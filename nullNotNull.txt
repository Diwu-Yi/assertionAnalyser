assertNull(new MutableObject<String>().getValue());
assertNull(new MutableObject<>().getValue());
assertNotNull(new LocaleUtils());
assertNotNull(locale, "valid locale");
assertNotNull(locale, "valid locale");
assertNotNull(locale, "valid locale");
assertNull(LocaleUtils.toLocale((String) null));
assertNull(LocaleUtils.toLocale((String) null));
assertNotNull(list);
assertNotNull(set);
assertNotNull(locale);
assertNotNull(list);
assertNotNull(list);
assertNull(CharSet.getInstance((String[]) null));
assertNotNull(new SystemUtils());
assertNull(expected);
assertNotNull(dir);
assertNotNull(dir);
assertNotNull(dir);
assertNotNull(dir);
assertNotNull(expectedStringValueWithDefault);
assertNotNull(array);
assertNull(result.get(1));
assertNull(ClassUtils.convertClassesToClassNames(null));
assertNull(result.get(1));
assertNull(ClassUtils.convertClassNamesToClasses(null));
assertNull(ClassUtils.getAllInterfaces(null));
assertNull(ClassUtils.getAllSuperclasses(null));
assertNull(new org.apache.commons.lang3.ClassUtilsTest() {}.getClass().getCanonicalName());
assertNull(ClassUtils.getSimpleName(null, null));
assertNotNull(new ClassUtils());
assertNull(ClassUtils.getComponentType(null));
//        assertNull("null -> null", ClassUtils.primitivesToWrappers(null)); // generates warning
assertNull(ClassUtils.primitivesToWrappers((Class<?>[]) null), "null -> null"); // equivalent cast to avoid warning
assertNull(ClassUtils.primitiveToWrapper(null), "null -> null");
//        assertNull(ClassUtils.toClass(null)); // generates warning
assertNull(ClassUtils.toClass((Object[]) null)); // equivalent explicit cast
//        assertNull("Wrong result for null input", ClassUtils.wrappersToPrimitives(null)); // generates warning
assertNull(ClassUtils.wrappersToPrimitives((Class<?>[]) null), "Wrong result for null input"); // equivalent cast
assertNull(ClassUtils.wrapperToPrimitive(String.class), "Wrong result for non wrapper class");
assertNull(ClassUtils.wrapperToPrimitive(null), "Wrong result for null class");
assertNotNull(t);
assertNotNull(t);
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNotNull(t);
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNotNull(t);
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNotNull(t);
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNotNull(t);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNotNull(t);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNotNull(t);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNotNull(t);
assertNotNull(i);
assertNotNull(t);
assertNotNull(i);
assertNotNull(cause);
assertNotNull(instance);
assertNotNull(t);
assertNotNull(cause);
assertNotNull(cause);
assertNotNull(supplier.get());
assertNotNull(t);
assertNotNull(t);
assertNotNull(cause);
assertNotNull(instance);
assertNotNull(cause);
assertNotNull(instance);
assertNotNull(t);
assertNotNull(cause);
assertNotNull(instance);
assertNotNull(t);
assertNotNull(i);
assertNotNull(cause);
assertNotNull(instance);
assertNotNull(cause);
assertNull(ArrayUtils.insert(42, null, array));
assertNull(ArrayUtils.insert(42, (boolean[]) null, null));
assertNull(ArrayUtils.insert(42, null, array));
assertNull(ArrayUtils.insert(42, (byte[]) null, null));
assertNull(ArrayUtils.insert(42, null, array));
assertNull(ArrayUtils.insert(42, (char[]) null, null));
assertNull(ArrayUtils.insert(42, null, array));
assertNull(ArrayUtils.insert(42, (double[]) null, null));
assertNull(ArrayUtils.insert(42, null, array));
assertNull(ArrayUtils.insert(42, (float[]) null, null));
assertNull(ArrayUtils.insert(42, null, array));
assertNull(ArrayUtils.insert(42, null, (String[]) null));
assertNull(ArrayUtils.insert(42, null, array));
assertNull(ArrayUtils.insert(42, (int[]) null, null));
assertNull(ArrayUtils.insert(42, null, array));
assertNull(ArrayUtils.insert(42, (long[]) null, null));
assertNull(ArrayUtils.insert(42, null, array));
assertNull(ArrayUtils.insert(42, (short[]) null, null));
assertNull(((ImmutableTriple<Object, String, Long>) triple2).left);
assertNull(((ImmutablePair<Object, String>) pair2).left);
assertNull(pair3.getLeft());
assertNull(pair3.getRight());
assertNull(nowPair2.left);
assertNull(nowPair2.getLeft());
assertNull(ImmutablePair.nullPair().getKey());
assertNull(ImmutablePair.nullPair().getLeft());
assertNull(ImmutablePair.nullPair().getRight());
assertNotNull(pair);
assertNull(ImmutablePair.nullPair().getValue());
assertNull(pair2.left);
assertNull(pair2.getLeft());
assertNull(pair3.left);
assertNull(pair3.right);
assertNull(nowPair2.left);
assertNull(nowPair2.getLeft());
assertNull(pair.getLeft());
assertNull(pair.getRight());
assertNull(pair2.getLeft());
assertNull(pair3.left);
assertNull(pair3.right);
assertNull(triple2.left);
assertNull(triple2.getLeft());
assertNull(ImmutableTriple.nullTriple().getLeft());
assertNull(ImmutableTriple.nullTriple().getMiddle());
assertNull(ImmutableTriple.nullTriple().getRight());
assertNotNull(triple);
assertNull(triple2.left);
assertNull(triple2.getLeft());
assertNull(triple2.getLeft());
assertNull(triple.getLeft());
assertNull(triple.getMiddle());
assertNull(triple.getRight());
assertNull(triple2.getLeft());
assertNull(ArrayUtils.setAll(null, nullIntFunction));
assertNull(ArrayUtils.setAll(null, nullSupplier));
assertNull(StringUtils.trim(null));
assertNull(StringUtils.trimToNull(" \t\r\n\b "));
assertNull(StringUtils.trimToNull(StringUtilsTest.TRIMMABLE));
assertNull(StringUtils.trimToNull(""));
assertNull(StringUtils.trimToNull(null));
assertNull(StringUtils.strip(null));
assertNull(StringUtils.stripToNull(null));
assertNull(StringUtils.stripToNull(""));
assertNull(StringUtils.stripToNull("        "));
assertNull(StringUtils.stripToNull(StringUtilsTest.WHITESPACE));
assertNull(StringUtils.strip(null, null));
assertNull(StringUtils.strip(null, ""));
assertNull(StringUtils.strip(null, " "));
assertNull(StringUtils.strip(null, "ab"));
assertNull(StringUtils.stripStart(null, null));
assertNull(StringUtils.stripStart(null, ""));
assertNull(StringUtils.stripStart(null, " "));
assertNull(StringUtils.stripStart(null, "ab"));
assertNull(StringUtils.stripEnd(null, null));
assertNull(StringUtils.stripEnd(null, ""));
assertNull(StringUtils.stripEnd(null, " "));
assertNull(StringUtils.stripEnd(null, "ab"));
assertNull(StringUtils.stripAll((String[]) null));
assertNull(StringUtils.stripAll(null, null));
assertNull(StringUtils.stripAccents(null), "Failed null safety");
assertNotNull(new StringEscapeUtils());
assertNull(StringEscapeUtils.escapeJava(null));
assertNull(StringEscapeUtils.unescapeJava(null));
assertNull(StringEscapeUtils.escapeEcmaScript(null));
assertNull(StringEscapeUtils.escapeEcmaScript(null));
assertNull(StringEscapeUtils.escapeXml(null));
assertNull(StringEscapeUtils.unescapeXml(null));
assertNull(StringEscapeUtils.escapeCsv(null));
assertNull(StringEscapeUtils.unescapeCsv(null));
assertNull(StringEscapeUtils.escapeJson(null));
assertNull(StringEscapeUtils.unescapeJson(null));
assertNull(ArrayUtils.addAll(null, (Object[]) null));
assertNotNull(result);
assertNotNull(result2);
assertNull(new NotImplementedException().getCode());
private void assertCorrect(final String assertMessage, final NotImplementedException nie, final String message, final Throwable nested, final String code) {assertNotNull(nie, assertMessage + ": target is null");
assertNotNull(array);
assertNotNull(MethodUtils.class.newInstance());
assertNotNull(expected);
assertNull(actual);
assertNull(actual);
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentNotAnnotatedMethod"),Annotated.class, true, true));
assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("doIt"), Annotated.class,true, true));
assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentProtectedAnnotatedMethod"),Annotated.class, true, true));
assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getDeclaredMethod("privateAnnotatedMethod"),Annotated.class, true, true));
assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("publicAnnotatedMethod"),Annotated.class, true, true));
assertNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod("parentNotAnnotatedMethod", String.class),Annotated.class, true, true));
assertNotNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod("parentProtectedAnnotatedMethod", String.class),Annotated.class, true, true));
assertNotNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getDeclaredMethod("privateAnnotatedMethod", String.class),Annotated.class, true, true));
assertNotNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod("publicAnnotatedMethod", String.class),Annotated.class, true, true));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentNotAnnotatedMethod"),Annotated.class, false, true));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("doIt"), Annotated.class,false, true));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentProtectedAnnotatedMethod"),Annotated.class, false, true));
assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getDeclaredMethod("privateAnnotatedMethod"),Annotated.class, false, true));
assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("publicAnnotatedMethod"),Annotated.class, false, true));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentNotAnnotatedMethod"),Annotated.class, true, false));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("doIt"), Annotated.class,true, false));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentProtectedAnnotatedMethod"),Annotated.class, true, false));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getDeclaredMethod("privateAnnotatedMethod"),Annotated.class, true, false));
assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("publicAnnotatedMethod"),Annotated.class, true, false));
assertNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod("parentNotAnnotatedMethod", String.class),Annotated.class, true, false));
assertNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod("parentProtectedAnnotatedMethod", String.class),Annotated.class, true, false));
assertNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getDeclaredMethod("privateAnnotatedMethod", String.class),Annotated.class, true, false));
assertNotNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod("publicAnnotatedMethod", String.class),Annotated.class, true, false));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentNotAnnotatedMethod"),Annotated.class, false, false));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("doIt"), Annotated.class,false, false));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentProtectedAnnotatedMethod"),Annotated.class, false, false));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getDeclaredMethod("privateAnnotatedMethod"),Annotated.class, false, false));
assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("publicAnnotatedMethod"),Annotated.class, false, false));
assertNotNull(m, "could not find any matches for " + methodName+ " (" + (requestTypes == null ? null : toString(requestTypes)) + ")");
assertNotNull(MethodUtils.class.newInstance());
assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class.getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));
assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class.getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));
assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.PublicInnerClass.class));
assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class,ArrayUtils.EMPTY_CLASS_ARRAY));
assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class, ArrayUtils.EMPTY_CLASS_ARRAY));
assertNotNull(InheritanceUtils.class.newInstance());
assertNotNull(new FieldUtils());
assertNull(FieldUtils.getField(PublicChild.class, "b"));
assertNull(FieldUtils.getField(PublicChild.class, "i"));
assertNull(FieldUtils.getField(PublicChild.class, "d"));
assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, "b"));
assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, "i"));
assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, "d"));
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "VALUE"));
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "s"));
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "b"));
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "i"));
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "d"));
assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "VALUE"));
assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "VALUE"));
assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "s"));
assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "b"));
assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "i"));
assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "d"));
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "s", true));
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "b", true));
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "i", true));
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "d", true));
assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "VALUE", true));
assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "VALUE", true));
assertNull(TypeUtils.getArrayComponentType(types[0]));
assertNull(TypeUtils.getArrayComponentType(types[1]));
assertNull(TypeUtils.getArrayComponentType(types[2]));
assertNull(TypeUtils.getArrayComponentType(types[3]));
assertNull(TypeUtils.getArrayComponentType(types[4]));
assertNull(TypeUtils.getArrayComponentType(types[5]));
assertNull(TypeUtils.getArrayComponentType(types[6]));
assertNull(TypeUtils.getArrayComponentType(boolean.class));
assertNull(TypeUtils.getArrayComponentType(byte.class));
assertNull(TypeUtils.getArrayComponentType(short.class));
assertNull(TypeUtils.getArrayComponentType(int.class));
assertNull(TypeUtils.getArrayComponentType(char.class));
assertNull(TypeUtils.getArrayComponentType(long.class));
assertNull(TypeUtils.getArrayComponentType(float.class));
assertNull(TypeUtils.getArrayComponentType(double.class));
assertNull(TypeUtils.getRawType(genericParentT, GenericParent.class));
assertNotNull(aIt);
assertNotNull(adIt);
assertNotNull(notaIt);
assertNotNull(emptySetIt);
assertNotNull(notFirstIt);
assertNotNull(notLastIt);
assertNull(RegExUtils.removeAll(null, Pattern.compile("")));
assertNull(RegExUtils.removeAll(null, ""));
assertNull(RegExUtils.removeFirst(null, Pattern.compile("")));
assertNull(RegExUtils.removeFirst(null, ""));
assertNull(RegExUtils.removePattern(null, ""));
assertNull(RegExUtils.replaceAll(null, Pattern.compile(""), ""));
assertNull(RegExUtils.replaceAll(null, "", ""));
assertNull(RegExUtils.replaceFirst(null, Pattern.compile(""), ""));
assertNull(RegExUtils.replaceFirst(null, "", ""));
assertNull(RegExUtils.replacePattern(null, "", ""));
assertNotNull(t);
assertNotNull(t);
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNotNull(t);
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNotNull(t);
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNotNull(t);
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNotNull(t);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNotNull(t);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNotNull(t);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertNotNull(t);
assertNotNull(i);
assertNotNull(t);
assertNotNull(i);
assertNotNull(cause);
assertNotNull(instance);
assertNotNull(t);
assertNotNull(cause);
assertNotNull(cause);
assertNotNull(supplier.get());
assertNotNull(t);
assertNotNull(t);
assertNotNull(cause);
assertNotNull(cause);
assertNotNull(instance);
assertNotNull(t);
assertNotNull(t);
assertNotNull(t);
assertNotNull(t);
assertNotNull(t);
assertNotNull(t);
assertNotNull(cause);
assertNotNull(instance);
assertNotNull(t);
assertNotNull(i);
assertNotNull(cause);
assertNotNull(instance);
assertNotNull(cause);
assertNull(FailableBiFunction.nop().apply("Foo", "Bar"), "Expect NOP to return null");
assertNull(FailableDoubleFunction.nop().apply(Double.MAX_VALUE), "Expect NOP to return null");
assertNull(FailableIntFunction.nop().apply(Integer.MAX_VALUE), "Expect NOP to return null");
assertNull(FailableLongFunction.nop().apply(Long.MAX_VALUE), "Expect NOP to return null");
assertNull(Suppliers.get(null));
assertNull(Suppliers.get(() -> null));
assertNotNull(new NumberUtils());
assertNull(NumberUtils.createBigDecimal(null), "createBigDecimal(null) failed");
assertNull(NumberUtils.createBigInteger(null), "createBigInteger(null) failed");
assertNull(NumberUtils.createDouble(null), "createDouble(null) failed");
assertNull(NumberUtils.createFloat(null), "createFloat(null) failed");
assertNull(NumberUtils.createInteger(null), "createInteger(null) failed");
assertNull(NumberUtils.createLong(null), "createLong(null) failed");
assertNull(NumberUtils.createNumber(null), "createNumber(null) failed");
assertNotNull(bigNum);
assertNull(StringUtils.firstNonBlank());
assertNull(StringUtils.firstNonBlank((String[]) null));
assertNull(StringUtils.firstNonBlank(null, null, null));
assertNull(StringUtils.firstNonBlank(null, "", " "));
assertNull(StringUtils.firstNonBlank(null, null, " "));
assertNull(StringUtils.firstNonEmpty());
assertNull(StringUtils.firstNonEmpty((String[]) null));
assertNull(StringUtils.firstNonEmpty(null, null, null));
assertNull(StringUtils.firstNonEmpty(null, null, ""));
assertNotNull(locale);
assertNotNull(new DurationFormatUtils());
assertNull(StopWatch.create().getMessage());
assertNotNull(new DateUtils());
assertNull(parser.parse("03/23", parsePosition));
assertNull(date);
assertNull(parser.parse("03/23/1961", parsePosition));
assertNotNull(parser.parse(input, parsePosition));
assertNull(parser.parse( "Thorsday, 03/23/61", parsePosition));
assertNotNull(parser.parse(input, parsePosition));
assertNull(parser.parse( "11:23 Pacific Standard ", parsePosition));
assertNotNull(new DateFormatUtils());
assertNull(ArrayUtils.removeAllOccurences(a, true));
assertNull(ArrayUtils.removeAllOccurrences(a, true));
assertNull(ArrayUtils.removeAllOccurences(a, (byte) 2));
assertNull(ArrayUtils.removeAllOccurrences(a, (byte) 2));
assertNull(ArrayUtils.removeAllOccurences(a, '2'));
assertNull(ArrayUtils.removeAllOccurrences(a, '2'));
assertNull(ArrayUtils.removeAllOccurences(a, 2));
assertNull(ArrayUtils.removeAllOccurrences(a, 2));
assertNull(ArrayUtils.removeAllOccurences(a, 2));
assertNull(ArrayUtils.removeAllOccurrences(a, 2));
assertNull(ArrayUtils.removeAllOccurences(a, 2));
assertNull(ArrayUtils.removeAllOccurrences(a, 2));
assertNull(ArrayUtils.removeAllOccurences(a, 2));
assertNull(ArrayUtils.removeAllOccurrences(a, 2));
assertNull(ArrayUtils.removeAllOccurences(a, "2"));
assertNull(ArrayUtils.removeAllOccurrences(a, "2"));
assertNull(ArrayUtils.removeAllOccurences(a, (short) 2));
assertNull(ArrayUtils.removeAllOccurrences(a, (short) 2));
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(BooleanUtils.toBooleanObject(8, 6, 7, 8));
assertNull(BooleanUtils.toBooleanObject((Integer) null));
assertNull(BooleanUtils.toBooleanObject(Integer.valueOf(8), six, seven, eight));
assertNull(BooleanUtils.toBooleanObject((String) null));
assertNull(BooleanUtils.toBooleanObject(""));
assertNull(BooleanUtils.toBooleanObject("oof"));
assertNull(BooleanUtils.toBooleanObject("z"));
assertNull(BooleanUtils.toBooleanObject("ab"));
assertNull(BooleanUtils.toBooleanObject("yoo"));
assertNull(BooleanUtils.toBooleanObject("true "));
assertNull(BooleanUtils.toBooleanObject("ono"));
assertNull(BooleanUtils.toBooleanObject("U", "Y", "N", "U"));
assertNull(BooleanUtils.toIntegerObject(null));
assertNull(BooleanUtils.toIntegerObject(null, six, seven, null));
assertNull(BooleanUtils.toStringOnOff(null));
assertNull(BooleanUtils.toStringTrueFalse(null));
assertNull(BooleanUtils.toStringYesNo(null));
assertNotNull(new BooleanUtils());
assertNotNull(new ClassPathUtils());
assertNotNull(new CharSetUtils());
assertNull(CharSetUtils.squeeze(null, (String) null));
assertNull(CharSetUtils.squeeze(null, ""));
assertNull(CharSetUtils.squeeze(null, (String[]) null));
assertNull(CharSetUtils.squeeze(null));
assertNull(CharSetUtils.squeeze(null, null));
assertNull(CharSetUtils.squeeze(null, "el"));
assertNull(CharSetUtils.keep(null, (String) null));
assertNull(CharSetUtils.keep(null, ""));
assertNull(CharSetUtils.keep(null, (String[]) null));
assertNull(CharSetUtils.keep(null));
assertNull(CharSetUtils.keep(null, null));
assertNull(CharSetUtils.keep(null, "a-e"));
assertNull(CharSetUtils.delete(null, (String) null));
assertNull(CharSetUtils.delete(null, ""));
assertNull(CharSetUtils.delete(null, (String[]) null));
assertNull(CharSetUtils.delete(null));
assertNull(CharSetUtils.delete(null, null));
assertNull(CharSetUtils.delete(null, "el"));
Assertions.assertNull(StringUtils.valueOf(null));
assertNotNull(new RandomStringUtils());
private void assertEqualsArchNotNull(final Processor.Arch arch, final Processor processor) {assertNotNull(arch);
assertNotNull(processor);
private void assertEqualsTypeNotNull(final Processor.Type type, final Processor processor) {assertNotNull(type);
assertNotNull(processor);
private void assertNotEqualsArchNotNull(final Processor.Arch arch, final Processor processor) {assertNotNull(arch);
assertNotNull(processor);
private void assertNotEqualsTypeNotNull(final Processor.Type type, final Processor processor) {assertNotNull(type);
assertNotNull(processor);
assertNotNull(ArchUtils.getProcessor(X86));
assertNull(ArchUtils.getProcessor("NA"));
assertNull(ArchUtils.getProcessor(null));
assertNull(ConcurrentUtils.extractCause(null), "Non null result");
assertNull(ConcurrentUtils.extractCause(new ExecutionException("Test", null)), "Non null result");
assertNull(ConcurrentUtils.extractCauseUnchecked(null), "Non null result");
assertNull(ConcurrentUtils.extractCauseUnchecked(new ExecutionException("Test", null)), "Non null result");
assertNull(ConcurrentUtils.initialize(null), "Got a result");
assertNull(ConcurrentUtils.initializeUnchecked(null), "Got a result");
assertNotNull(new ConcurrentRuntimeException(), "Error creating empty ConcurrentRuntimeException");
assertNull(ConcurrentUtils.putIfAbsent(null, "test", 100), "Wrong result");
assertNull(ConcurrentUtils.createIfAbsent(null, "test", init), "Wrong result");
assertNull(ConcurrentUtils.createIfAbsent(map, key, null), "Wrong result");
assertNotNull(createInitializer().get(), "No managed object");
assertNotNull(o1);
assertNotNull(o2);
assertNotNull(init.getFuture(), "No future");
assertNull(init.getActiveExecutor(), "Got an executor");
assertNotNull(init.getActiveExecutor(), "No active executor");
assertNotNull(iex.get(), "No interrupted exception");
assertNull(res.getException(key), "Got an exception");
assertNull(res.getResultObject(CHILD_INIT), "Got a results object");
assertNotNull(exception);
assertNotNull(cause);
assertNotNull(exception);
assertNull(cause);
assertNotNull(exception);
assertNotNull(exception.getMessage());
assertNotNull(cause);
assertNull(factory.getNamingPattern(), "Got a naming pattern");
assertNull(factory.getUncaughtExceptionHandler(), "Got an exception handler");
assertNull(factory.getPriority(), "Got a priority");
assertNull(factory.getDaemonFlag(), "Got a daemon flag");
assertNotNull(factory.getWrappedFactory(), "No wrapped factory");
assertNotNull(future, "No future returned");
assertNull(EnumUtils.getEnum(Traffic.class, "PURPLE"));
assertNull(EnumUtils.getEnum(Traffic.class, null));
assertNull(EnumUtils.getEnum(Traffic.class, "PURPLE", null));
assertNull(EnumUtils.getEnum(rawType, "rawType"));
assertNull(EnumUtils.getEnumIgnoreCase(Traffic.class, "purple"));
assertNull(EnumUtils.getEnumIgnoreCase(Traffic.class, null));
assertNull(EnumUtils.getEnumIgnoreCase(Traffic.class, "PURPLE", null));
assertNull(EnumUtils.getEnumIgnoreCase(rawType, "rawType"));
assertNull(EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, "PURPLE", f, null));
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(things.get(1));
assertNull(things.get(2));
assertNull(things.get(1).string);
assertNull(things.get(2).string);
assertNotNull(new RandomUtils());
assertNull(StringUtils.abbreviate(null, 10));
assertNull(StringUtils.abbreviate(null, 10, 12));
assertNull(StringUtils.abbreviate(null, 7, 14));
assertNull(StringUtils.abbreviate(null, null, 10));
assertNull(StringUtils.abbreviate(null, "...", 10));
assertNull(StringUtils.abbreviate(null, null, 10, 12));
assertNull(StringUtils.abbreviate(null, "...", 10, 12));
assertNull(StringUtils.abbreviate(null, ";", 7, 14));
assertNull(StringUtils.abbreviateMiddle(null, null, 0));
assertNull(StringUtils.appendIfMissing(null, null), "appendIfMissing(null,null)");
assertNull(StringUtils.appendIfMissing(null, null, (CharSequence[]) null), "appendIfMissing(null,null,null)");
assertNull(StringUtils.appendIfMissingIgnoreCase(null, null), "appendIfMissingIgnoreCase(null,null)");
assertNull(StringUtils.appendIfMissingIgnoreCase(null, null, (CharSequence[]) null), "appendIfMissingIgnoreCase(null,null,null)");
assertNull(StringUtils.capitalize(null));
assertNull(StringUtils.capitalize(null));
assertNull(StringUtils.center(null, -1));
assertNull(StringUtils.center(null, 4));
assertNull(StringUtils.center(null, -1, ' '));
assertNull(StringUtils.center(null, 4, ' '));
assertNull(StringUtils.center(null, 4, null));
assertNull(StringUtils.center(null, -1, " "));
assertNull(StringUtils.center(null, 4, " "));
assertNull(StringUtils.chomp(null, "foo"), "chomp(String, String) failed");
assertNull(StringUtils.chomp(null, null), "chomp(String, String) failed");
assertNull(StringUtils.chomp(null, ""), "chomp(String, String) failed");
assertNotNull(new StringUtils());
assertNull(StringUtils.defaultIfBlank(CharBuffer.wrap(""), (CharBuffer) null));
assertNull(StringUtils.defaultIfBlank(new StringBuffer(""), (StringBuffer) null));
assertNull(StringUtils.defaultIfBlank(new StringBuilder(""), (StringBuilder) null));
assertNull(StringUtils.defaultIfBlank("", (String) null));
assertNull(StringUtils.getIfBlank("", () -> null));
assertNull(StringUtils.defaultIfBlank("", (String) null));
assertNull(StringUtils.defaultIfEmpty(CharBuffer.wrap(""), (CharBuffer) null));
assertNull(StringUtils.defaultIfEmpty(new StringBuffer(""), (StringBuffer) null));
assertNull(StringUtils.defaultIfEmpty(new StringBuilder(""), (StringBuilder) null));
assertNull(StringUtils.getIfEmpty("", null));
assertNull(StringUtils.getIfEmpty("", () -> null));
assertNull(StringUtils.defaultIfEmpty("", (String) null));
assertNull(StringUtils.deleteWhitespace(null));
assertNull(StringUtils.difference(null, null));
assertNotNull(StringUtils.EMPTY);
assertNull(StringUtils.getDigits(null));
assertNull(StringUtils.join((Object[]) null, ','));
assertNull(StringUtils.join((Object[]) null, ',', 0, 1));
assertNull(StringUtils.join((byte[]) null, ','));
assertNull(StringUtils.join((byte[]) null, SEPARATOR_CHAR, 0, 1));
assertNull(StringUtils.join((boolean[]) null, COMMA_SEPARATOR_CHAR));
assertNull(StringUtils.join((boolean[]) null, SEPARATOR_CHAR, 0, 1));
assertNull(StringUtils.join((char[]) null, ','));
assertNull(StringUtils.join((char[]) null, SEPARATOR_CHAR, 0, 1));
assertNull(StringUtils.join((double[]) null, ','));
assertNull(StringUtils.join((double[]) null, SEPARATOR_CHAR, 0, 1));
assertNull(StringUtils.join((float[]) null, ','));
assertNull(StringUtils.join((float[]) null, SEPARATOR_CHAR, 0, 1));
assertNull(StringUtils.join((int[]) null, ','));
assertNull(StringUtils.join((int[]) null, SEPARATOR_CHAR, 0, 1));
assertNull(StringUtils.join((long[]) null, ','));
assertNull(StringUtils.join((long[]) null, SEPARATOR_CHAR, 0, 1));
assertNull(StringUtils.join((short[]) null, ','));
assertNull(StringUtils.join((short[]) null, SEPARATOR_CHAR, 0, 1));
assertNull(StringUtils.join((Object[]) null, null));
assertNull(StringUtils.join((Iterable<?>) null, ','));
assertNull(StringUtils.join((Iterable<?>) null, null));
assertNull(StringUtils.join((Iterator<?>) null, ','));
assertNull(StringUtils.join((Iterator<?>) null, null));
assertNull(StringUtils.join((List<String>) null, null));
assertNull(null, StringUtils.join((List<?>) null, '/', 0, 1));
assertNull(null, StringUtils.join((List<?>) null, delimiter, 0, 1));
//        assertNull(StringUtils.join(null)); // generates warning
assertNull(StringUtils.join((Object[]) null)); // equivalent explicit cast
assertNull(StringUtils.join((Object[]) null));
assertNull(StringUtils.leftPad(null, 5));
assertNull(StringUtils.leftPad(null, 5, ' '));
assertNull(StringUtils.leftPad(null, 5, "-+"));
assertNull(StringUtils.leftPad(null, 5, null));
assertNull(StringUtils.lowerCase(null));
assertNull(StringUtils.lowerCase(null, Locale.ENGLISH));
assertNull(StringUtils.normalizeSpace(null));
assertNull(StringUtils.overlay(null, null, 2, 4));
assertNull(StringUtils.overlay(null, null, -2, -4));
assertNull(StringUtils.prependIfMissing(null, null), "prependIfMissing(null,null)");
assertNull(StringUtils.prependIfMissing(null, null, (CharSequence[]) null), "prependIfMissing(null,null null)");
assertNull(StringUtils.prependIfMissingIgnoreCase(null, null), "prependIfMissingIgnoreCase(null,null)");
assertNull(StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null), "prependIfMissingIgnoreCase(null,null null)");
assertNull(StringUtils.remove(null, null));
assertNull(StringUtils.remove(null, 'a'));
assertNull(StringUtils.remove(null, null));
assertNull(StringUtils.remove(null, ""));
assertNull(StringUtils.remove(null, "a"));
assertNull(StringUtils.remove(null, null));
assertNull(StringUtils.remove(null, ""));
assertNull(StringUtils.removeAll(null, ""));
assertNull(StringUtils.removeEnd(null, null));
assertNull(StringUtils.removeEnd(null, ""));
assertNull(StringUtils.removeEnd(null, "a"));
assertNull(StringUtils.removeEndIgnoreCase(null, null), "removeEndIgnoreCase(null, null)");
assertNull(StringUtils.removeEndIgnoreCase(null, ""), "removeEndIgnoreCase(null, \"\")");
assertNull(StringUtils.removeEndIgnoreCase(null, "a"), "removeEndIgnoreCase(null, \"a\")");
assertNull(StringUtils.removeFirst(null, ""));
assertNull(StringUtils.removeIgnoreCase(null, null));
assertNull(StringUtils.removeIgnoreCase(null, ""));
assertNull(StringUtils.removeIgnoreCase(null, "a"));
assertNull(StringUtils.removeIgnoreCase(null, null));
assertNull(StringUtils.removeIgnoreCase(null, ""));
assertNull(StringUtils.removePattern(null, ""));
assertNull(StringUtils.removeStart(null, '\0'));
assertNull(StringUtils.removeStart(null, 'a'));
assertNull(StringUtils.removeStart(null, null));
assertNull(StringUtils.removeStart(null, ""));
assertNull(StringUtils.removeStart(null, "a"));
assertNull(StringUtils.removeStartIgnoreCase(null, null), "removeStartIgnoreCase(null, null)");
assertNull(StringUtils.removeStartIgnoreCase(null, ""), "removeStartIgnoreCase(null, \"\")");
assertNull(StringUtils.removeStartIgnoreCase(null, "a"), "removeStartIgnoreCase(null, \"a\")");
assertNull(StringUtils.repeat(null, 2));
assertNull(StringUtils.repeat(null, null, 2));
assertNull(StringUtils.repeat(null, "x", 2));
assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"}));
assertNull(StringUtils.replaceEachRepeatedly(null, new String[]{"a"}, new String[]{"b"}));
assertNull(StringUtils.replace(null, null, null));
assertNull(StringUtils.replace(null, null, "any"));
assertNull(StringUtils.replace(null, "any", null));
assertNull(StringUtils.replace(null, "any", "any"));
assertNull(StringUtils.replace(null, null, null, 2));
assertNull(StringUtils.replace(null, null, "any", 2));
assertNull(StringUtils.replace(null, "any", null, 2));
assertNull(StringUtils.replace(null, "any", "any", 2));
assertNull(StringUtils.replaceAll(null, "", ""));
assertNull(StringUtils.replaceChars(null, 'b', 'z'));
assertNull(StringUtils.replaceChars(null, null, null));
assertNull(StringUtils.replaceChars(null, "", null));
assertNull(StringUtils.replaceChars(null, "a", null));
assertNull(StringUtils.replaceChars(null, null, ""));
assertNull(StringUtils.replaceChars(null, null, "x"));
assertNull(StringUtils.replaceFirst(null, "", ""));
assertNull(StringUtils.replaceIgnoreCase(null, null, null));
assertNull(StringUtils.replaceIgnoreCase(null, null, "any"));
assertNull(StringUtils.replaceIgnoreCase(null, "any", null));
assertNull(StringUtils.replaceIgnoreCase(null, "any", "any"));
assertNull(StringUtils.replaceIgnoreCase(null, null, null, 2));
assertNull(StringUtils.replaceIgnoreCase(null, null, "any", 2));
assertNull(StringUtils.replaceIgnoreCase(null, "any", null, 2));
assertNull(StringUtils.replaceIgnoreCase(null, "any", "any", 2));
assertNull(StringUtils.replaceOnce(null, null, null));
assertNull(StringUtils.replaceOnce(null, null, "any"));
assertNull(StringUtils.replaceOnce(null, "any", null));
assertNull(StringUtils.replaceOnce(null, "any", "any"));
assertNull(StringUtils.replaceOnceIgnoreCase(null, null, null));
assertNull(StringUtils.replaceOnceIgnoreCase(null, null, "any"));
assertNull(StringUtils.replaceOnceIgnoreCase(null, "any", null));
assertNull(StringUtils.replaceOnceIgnoreCase(null, "any", "any"));
assertNull(StringUtils.replacePattern(null, "", ""));
assertNull(StringUtils.reverse(null));
assertNull(StringUtils.reverseDelimited(null, '.'));
assertNull(StringUtils.rightPad(null, 5));
assertNull(StringUtils.rightPad(null, 5, ' '));
assertNull(StringUtils.rightPad(null, 5, "-+"));
assertNull(StringUtils.rightPad(null, 8, null));
assertNull(StringUtils.rotate(null, 1));
assertNull(StringUtils.split(null));
assertNull(StringUtils.split(null, '.'));
assertNull(StringUtils.split(null, "."));
assertNull(StringUtils.split(null, ".", 3));
assertNull(StringUtils.splitByCharacterType(null));
assertNull(StringUtils.splitByCharacterTypeCamelCase(null));
assertNull(StringUtils.splitPreserveAllTokens(null));
assertNull(StringUtils.splitPreserveAllTokens(null, '.'));
assertNull(StringUtils.splitPreserveAllTokens(null, "."));
assertNull(StringUtils.splitPreserveAllTokens(null, ".", 3));
assertNull(StringUtils.swapCase(null));
assertNull(StringUtils.toCodePoints(null));
assertNull(StringUtils.truncate(null, 12));
assertNull(StringUtils.truncate(null, 0, 12));
assertNull(StringUtils.truncate(null, 10, 12));
assertNull(StringUtils.uncapitalize(null));
assertNull(StringUtils.unwrap(null, null));
assertNull(StringUtils.unwrap(null, CharUtils.NUL));
assertNull(StringUtils.unwrap(null, '1'));
assertNull(StringUtils.unwrap(null, null));
assertNull(StringUtils.unwrap(null, ""));
assertNull(StringUtils.unwrap(null, "1"));
assertNull(StringUtils.upperCase(null));
assertNull(StringUtils.upperCase(null, Locale.ENGLISH));
assertNull(StringUtils.wrap(null, CharUtils.NUL));
assertNull(StringUtils.wrap(null, '1'));
assertNull(StringUtils.wrap(null, null));
assertNull(StringUtils.wrap(null, ""));
assertNull(StringUtils.wrap(null, "1"));
assertNull(StringUtils.wrap(null, null));
assertNull(StringUtils.wrapIfMissing(null, CharUtils.NUL));
assertNull(StringUtils.wrapIfMissing(null, '1'));
assertNull(StringUtils.wrapIfMissing(null, "\0"));
assertNull(StringUtils.wrapIfMissing(null, "1"));
assertNull(StringUtils.toRootLowerCase(null));
assertNull(StringUtils.toRootUpperCase(null));
assertNotNull(new Validate());
assertNull(ArrayUtils.clone((boolean[]) null));
assertNull(ArrayUtils.clone((byte[]) null));
assertNull(ArrayUtils.clone((char[]) null));
assertNull(ArrayUtils.clone((double[]) null));
assertNull(ArrayUtils.clone((float[]) null));
assertNull(ArrayUtils.clone((int[]) null));
assertNull(ArrayUtils.clone((long[]) null));
assertNull(ArrayUtils.clone((short[]) null));
assertNotNull(new ArrayUtils());
assertNull(ArrayUtils.toPrimitive((Object[]) null));
assertNull(ArrayUtils.toPrimitive((Object) null));
assertNull(ArrayUtils.get(null, -1));
assertNull(ArrayUtils.get(null, 0));
assertNull(ArrayUtils.get(null, 1));
assertNull(ArrayUtils.get(array0, -1));
assertNull(ArrayUtils.get(array0, 0));
assertNull(ArrayUtils.get(array0, 1));
assertNull(ArrayUtils.get(array1, -1));
assertNull(ArrayUtils.get(array1, 1));
assertNull(ArrayUtils.getComponentType(null));
assertNull(ArrayUtils.get(null, -1, null));
assertNull(ArrayUtils.get(null, 0, null));
assertNull(ArrayUtils.get(null, 1, null));
assertNull(ArrayUtils.get(array0, -1, null));
assertNull(ArrayUtils.get(array0, 0, null));
assertNull(ArrayUtils.get(array0, 1, null));
assertNull(ArrayUtils.get(array1, -1, null));
assertNull(ArrayUtils.get(array1, 1, null));
assertNotNull(output);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(ArrayUtils.subarray(nullArray, 0, 3), "null input");
assertNull(ArrayUtils.subarray(nullArray, 0, 3), "null input");
assertNull(ArrayUtils.subarray(nullArray, 0, 3), "null input");
assertNull(ArrayUtils.subarray(nullArray, 0, 3), "null input");
assertNull(ArrayUtils.subarray(nullArray, 0, 3), "null input");
assertNull(ArrayUtils.subarray(nullArray, 0, 3), "null input");
assertNull(ArrayUtils.subarray(nullArray, 0, 3), "null input");
assertNull(ArrayUtils.subarray(nullArray, 0, 3), "null input");
assertNull(ArrayUtils.subarray(nullArray, 0, 3), "null input");
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(ArrayUtils.toMap(null));
assertNull(ArrayUtils.toPrimitive(b));
assertNull(ArrayUtils.toPrimitive(null, false));
assertNull(ArrayUtils.toPrimitive(b));
assertNull(ArrayUtils.toPrimitive(b, Byte.MIN_VALUE));
assertNull(ArrayUtils.toPrimitive(b));
assertNull(ArrayUtils.toPrimitive(b, Character.MIN_VALUE));
assertNull(ArrayUtils.toPrimitive(b));
assertNull(ArrayUtils.toPrimitive(l, Double.MIN_VALUE));
assertNull(ArrayUtils.toPrimitive(b));
assertNull(ArrayUtils.toPrimitive(l, Float.MIN_VALUE));
assertNull(ArrayUtils.toPrimitive(b));
assertNull(ArrayUtils.toPrimitive(l, Integer.MIN_VALUE));
assertNull(ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE));
assertNull(ArrayUtils.toPrimitive(b));
assertNull(ArrayUtils.toPrimitive(l, Long.MIN_VALUE));
assertNull(ArrayUtils.toPrimitive(b));
assertNull(ArrayUtils.toPrimitive(s, Short.MIN_VALUE));
assertNull(ArrayUtils.toStringArray(null));
assertNull(ArrayUtils.toStringArray(null, ""));
assertNotNull(new SerializationUtils());
assertNotNull(test);
assertNull(test);
assertNotNull(test);
assertNull(test);
assertNotNull(test);
assertNull(test);
assertNull(StrLookup.noneLookup().lookup(null));
assertNull(StrLookup.noneLookup().lookup(""));
assertNull(StrLookup.noneLookup().lookup("any"));
assertNull(StrLookup.systemPropertiesLookup().lookup(""));
assertNull(StrLookup.systemPropertiesLookup().lookup("other"));
assertNull(StrLookup.mapLookup(map).lookup(null));
assertNull(StrLookup.mapLookup(map).lookup(""));
assertNull(StrLookup.mapLookup(map).lookup("other"));
assertNull(StrLookup.mapLookup(map).lookup(null));
assertNull(StrLookup.mapLookup(map).lookup(""));
assertNull(StrLookup.mapLookup(map).lookup("any"));
assertNotNull(new WordUtils());
assertNull(WordUtils.wrap(null, 20));
assertNull(WordUtils.wrap(null, -1));
assertNull(WordUtils.wrap(null, 20, "\n", false));
assertNull(WordUtils.wrap(null, 20, "\n", true));
assertNull(WordUtils.wrap(null, 20, null, true));
assertNull(WordUtils.wrap(null, 20, null, false));
assertNull(WordUtils.wrap(null, -1, null, true));
assertNull(WordUtils.wrap(null, -1, null, false));
assertNull(WordUtils.capitalize(null));
assertNull(WordUtils.capitalize(null, null));
assertNull(WordUtils.capitalizeFully(null));
assertNull(WordUtils.capitalizeFully(null, null));
assertNull(WordUtils.uncapitalize(null));
assertNull(WordUtils.uncapitalize(null, null));
assertNull(WordUtils.initials(null));
assertNull(WordUtils.initials(null, array));
assertNull(WordUtils.initials(null, array));
assertNull(WordUtils.initials(null, array));
assertNull(WordUtils.initials(null, array));
assertNull(WordUtils.initials(null, array));
assertNull(WordUtils.initials(null, array));
assertNull(WordUtils.swapCase(null));
assertNull(tok.next());
assertNull(tok.next());
assertNull(tok.next());
assertNull(tok.next());
assertNull(tok.next());
assertNull(tok.next());
assertNull(tok.next());
assertNull(tok.next());
assertNull(tokenizer.nextToken());
assertNull(tok.getContent());
assertNull(notCloned);
assertNull(tokenizer.nextToken());
assertNull(tokenizer.nextToken());
assertNull(tokenizer.nextToken());
assertNull(clonedTokenizer.nextToken());
assertNull(tokenizer.previousToken());
assertNull(tokenizer.nextToken());
assertNull(tokenizer.previousToken());
assertNull(sub.getValueDelimiterMatcher());
assertNull(sub.getValueDelimiterMatcher());
assertNull(sub.replace((String) null));
assertNull(sub.replace((String) null, 0, 100));
assertNull(sub.replace((char[]) null));
assertNull(sub.replace((char[]) null, 0, 100));
assertNull(sub.replace((StringBuffer) null));
assertNull(sub.replace((StringBuffer) null, 0, 100));
assertNull(sub.replace((StrBuilder) null));
assertNull(sub.replace((StrBuilder) null, 0, 100));
assertNull(sub.replace((Object) null));
assertNull(sb.getNewLineText());
assertNull(sb.getNewLineText());
assertNull(sb.getNullText());
assertNull(sb.getNullText());
assertNull(sb.getNullText());
assertNotNull(a, "toCharArray() result is null");
assertNotNull(a, "toCharArray(int, int) result is null");
assertNull(StringUtils.substring(null, 0));
assertNull(StringUtils.substring(null, 0, 0));
assertNull(StringUtils.substring(null, 1, 2));
assertNull(StringUtils.substringBefore(null, 0));
assertNull(StringUtils.substringBefore(null, 'X'));
assertNull(StringUtils.substringBefore(null, null));
assertNull(StringUtils.substringBefore(null, ""));
assertNull(StringUtils.substringBefore(null, "XX"));
assertNull(StringUtils.substringAfter(null, null));
assertNull(StringUtils.substringAfter(null, ""));
assertNull(StringUtils.substringAfter(null, "XX"));
assertNull(StringUtils.substringAfter(null, 0));
assertNull(StringUtils.substringAfter(null, 'X'));
assertNull(StringUtils.substringBeforeLast(null, null));
assertNull(StringUtils.substringBeforeLast(null, ""));
assertNull(StringUtils.substringBeforeLast(null, "XX"));
assertNull(StringUtils.substringAfterLast(null, null));
assertNull(StringUtils.substringAfterLast(null, ""));
assertNull(StringUtils.substringAfterLast(null, "XX"));
assertNull(StringUtils.substringAfterLast(null, 0));
assertNull(StringUtils.substringAfterLast(null, 'X'));
assertNull(StringUtils.substringBetween(null, "tag"));
assertNull(StringUtils.substringBetween("", "abc"));
assertNull(StringUtils.substringBetween("abc", null));
assertNull(StringUtils.substringBetween("abc", "a"));
assertNull(StringUtils.substringBetween(null, "", ""));
assertNull(StringUtils.substringBetween("", null, ""));
assertNull(StringUtils.substringBetween("", "", null));
assertNull(StringUtils.substringBetween("foo", "", "]"));
assertNull(StringUtils.substringBetween("foo", "[", "]"));
assertNull(results);
assertNull(results);
assertNull(results);
assertNull(results);
assertNull(results);
assertNull(results);
assertNull(results);
assertNotNull(byteRange.toString());
assertNotNull(new CharUtils());
assertNull(CharUtils.toCharacterObject(null));
assertNull(CharUtils.toCharacterObject(""));
assertNull(CharUtils.toString(null));
assertNull(CharUtils.unicodeEscaped(null));
assertNull(EqualsBuilder.getRegistry());
assertNull(EqualsBuilder.getRegistry());
assertNull(EqualsBuilder.getRegistry());
assertNotNull(s);
assertNull(HashCodeBuilder.getRegistry());
assertNull(HashCodeBuilder.getRegistry());
assertNotNull(stringBuilder1.getStringBuffer());
assertNotNull(stringBuilder1.toString());
assertNotNull(stringBuilder2.getStringBuffer());
assertNotNull(stringBuilder2.toString());
assertNotNull(message);
assertNull(exceptionContext.getRawMessage());
assertNotNull(message);
assertNull(exceptionContext.getRawMessage());
assertNull(exceptionContext.getFirstContextValue("test1"));
assertNull(exceptionContext.getFirstContextValue("crap"));
assertNull(exceptionContext.getFirstContextValue("test1"));
assertNull(exceptionContext.getFirstContextValue("crap"));
assertNotNull(new ExceptionUtils());
assertNull(ExceptionUtils.throwableOfThrowable(null, null));
assertNull(ExceptionUtils.throwableOfThrowable(null, NestableException.class));
assertNull(ExceptionUtils.throwableOfThrowable(withoutCause, null));
assertNull(ExceptionUtils.throwableOfThrowable(withoutCause, ExceptionWithCause.class));
assertNull(ExceptionUtils.throwableOfThrowable(withoutCause, NestableException.class));
assertNull(ExceptionUtils.throwableOfThrowable(nested, null));
assertNull(ExceptionUtils.throwableOfThrowable(nested, ExceptionWithCause.class));
assertNull(ExceptionUtils.throwableOfThrowable(withCause, null));
assertNull(ExceptionUtils.throwableOfThrowable(withCause, Exception.class));
assertNull(ExceptionUtils.throwableOfThrowable(withCause, Throwable.class));
assertNull(ExceptionUtils.throwableOfThrowable(null, null, 0));
assertNull(ExceptionUtils.throwableOfThrowable(null, NestableException.class, 0));
assertNull(ExceptionUtils.throwableOfThrowable(withoutCause, null));
assertNull(ExceptionUtils.throwableOfThrowable(withoutCause, ExceptionWithCause.class, 0));
assertNull(ExceptionUtils.throwableOfThrowable(withoutCause, NestableException.class, 0));
assertNull(ExceptionUtils.throwableOfThrowable(nested, null, 0));
assertNull(ExceptionUtils.throwableOfThrowable(nested, ExceptionWithCause.class, 0));
assertNull(ExceptionUtils.throwableOfThrowable(withCause, null));
assertNull(ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithCause.class, 1));
assertNull(ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithCause.class, 9));
assertNull(ExceptionUtils.throwableOfThrowable(withCause, Exception.class, 0));
assertNull(ExceptionUtils.throwableOfThrowable(withCause, Throwable.class, 0));
assertNull(ExceptionUtils.throwableOfType(null, null));
assertNull(ExceptionUtils.throwableOfType(null, NestableException.class));
assertNull(ExceptionUtils.throwableOfType(withoutCause, null));
assertNull(ExceptionUtils.throwableOfType(withoutCause, ExceptionWithCause.class));
assertNull(ExceptionUtils.throwableOfType(withoutCause, NestableException.class));
assertNull(ExceptionUtils.throwableOfType(nested, null));
assertNull(ExceptionUtils.throwableOfType(nested, ExceptionWithCause.class));
assertNull(ExceptionUtils.throwableOfType(withCause, null));
assertNull(ExceptionUtils.throwableOfType(null, null, 0));
assertNull(ExceptionUtils.throwableOfType(null, NestableException.class, 0));
assertNull(ExceptionUtils.throwableOfType(withoutCause, null));
assertNull(ExceptionUtils.throwableOfType(withoutCause, ExceptionWithCause.class, 0));
assertNull(ExceptionUtils.throwableOfType(withoutCause, NestableException.class, 0));
assertNull(ExceptionUtils.throwableOfType(nested, null, 0));
assertNull(ExceptionUtils.throwableOfType(nested, ExceptionWithCause.class, 0));
assertNull(ExceptionUtils.throwableOfType(withCause, null));
assertNull(ExceptionUtils.throwableOfType(withCause, ExceptionWithCause.class, 1));
assertNull(ExceptionUtils.throwableOfType(withCause, ExceptionWithCause.class, 9));
assertNotNull(exception);
assertNotNull(cause);
assertNotNull(exception);
assertNull(cause);
assertNotNull(exception);
assertNotNull(exception.getMessage());
assertNotNull(cause);
assertNotNull(new CharSequenceUtils());
assertNull(CharSequenceUtils.subSequence(null, -1));
assertNull(CharSequenceUtils.subSequence(null, 0));
assertNull(CharSequenceUtils.subSequence(null, 1));
assertNotNull(new EventUtils());
// assertNull("2.10 unexpectedly worked", get("2.10"));
assertNotNull(new ThreadUtils());
assertNotNull(systemThreadGroup);
assertNull(systemThreadGroup.getParent());
assertNotNull(ThreadUtils.findThreadById(t1.getId(), threadGroup));
assertNull(ThreadUtils.findThreadById(nonExistingId, "non_existent_thread_group_JJHHZZ__"));
assertNull(ThreadUtils.findThreadById(nonExistingId, "thread_group_DDZZ99__"));
assertNull(ThreadUtils.findThreadById(t1.getId(), tg));
assertNull(ObjectUtils.clone(string));
assertNotNull(new ObjectUtils());
assertNull(ObjectUtils.firstNonNull());
assertNull(ObjectUtils.firstNonNull(null, null));
assertNull(ObjectUtils.firstNonNull((Object) null));
assertNull(ObjectUtils.firstNonNull((Object[]) null));
assertNull(ObjectUtils.getClass(null));
assertNull(ObjectUtils.getFirstNonNull(null, () -> null));
assertNull(ObjectUtils.getFirstNonNull());
assertNull(ObjectUtils.getFirstNonNull((Supplier<Object>) null));
assertNull(ObjectUtils.getFirstNonNull((Supplier<Object>[]) null));
assertNull(ObjectUtils.identityToString(null));
assertNull(ObjectUtils.max((String) null));
assertNull(ObjectUtils.max(nullArray));
assertNull(ObjectUtils.max(null, null));
assertNull(ObjectUtils.min((String) null));
assertNull(ObjectUtils.min(nullArray));
assertNull(ObjectUtils.min(null, null));
assertNull(ObjectUtils.mode((Object[]) null));
assertNull(ObjectUtils.mode());
assertNull(ObjectUtils.mode("foo", "bar", "baz"));
assertNull(ObjectUtils.mode("foo", "bar", "baz", "foo", "bar"));
assertNotNull(ObjectUtils.NULL);
assertNull(comparator.sort((File[])null));
assertNull(comparator.sort((List<File>)null));
assertNotNull(comparator.toString(), "comparator");
assertNotNull(bytes);
assertNotNull(bytes);
assertNotNull(bytes);
assertNotNull(bytes);
assertNotNull(content);
assertNotNull(content);
assertNotNull(content);
assertNotNull(content);
assertNotNull(url);
assertNotNull(url);
assertNotNull(url);
assertNotNull(url);
assertEquals(ifEquals, IOUtils.contentEqualsIgnoreEOL(new CharArrayReader(s1.toCharArray()),new CharArrayReader(s2.toCharArray())), "failed at :{" + s1 + "," + s2 + "}");assertEquals(ifEquals, IOUtils.contentEqualsIgnoreEOL(new CharArrayReader(s2.toCharArray()),new CharArrayReader(s1.toCharArray())), "failed at :{" + s2 + "," + s1 + "}");assertTrue(IOUtils.contentEqualsIgnoreEOL(new CharArrayReader(s1.toCharArray()),new CharArrayReader(s1.toCharArray())),"failed at :{" + s1 + "," + s1 + "}");assertTrue(IOUtils.contentEqualsIgnoreEOL(new CharArrayReader(s2.toCharArray()),new CharArrayReader(s2.toCharArray())), "failed at :{" + s2 + "," + s2 + "}");}@Testpublic void testSkip_FileReader() throws Exception {try (Reader in = Files.newBufferedReader(testFilePath)) {assertEquals(FILE_SIZE - 10, IOUtils.skip(in, FILE_SIZE - 10));assertEquals(10, IOUtils.skip(in, 20));assertEquals(0, IOUtils.skip(in, 10));}}@Testpublic void testSkip_InputStream() throws Exception {try (InputStream in = Files.newInputStream(testFilePath)) {assertEquals(FILE_SIZE - 10, IOUtils.skip(in, FILE_SIZE - 10));assertEquals(10, IOUtils.skip(in, 20));assertEquals(0, IOUtils.skip(in, 10));}}@Testpublic void testSkip_ReadableByteChannel() throws Exception {final FileInputStream fileInputStream = new FileInputStream(testFile);final FileChannel fileChannel = fileInputStream.getChannel();try {assertEquals(FILE_SIZE - 10, IOUtils.skip(fileChannel, FILE_SIZE - 10));assertEquals(10, IOUtils.skip(fileChannel, 20));assertEquals(0, IOUtils.skip(fileChannel, 10));} finally {IOUtils.closeQuietly(fileChannel, fileInputStream);}}@Testpublic void testSkipFully_InputStream() throws Exception {final int size = 1027;final InputStream input = new ByteArrayInputStream(new byte[size]);assertThrows(IllegalArgumentException.class, ()->IOUtils.skipFully(input, -1),"Should have failed with IllegalArgumentException" );IOUtils.skipFully(input, 0);IOUtils.skipFully(input, size - 1);assertThrows(IOException.class, ()->  IOUtils.skipFully(input, 2),"Should have failed with IOException" );IOUtils.closeQuietly(input);}@Testpublic void testSkipFully_ReadableByteChannel() throws Exception {final FileInputStream fileInputStream = new FileInputStream(testFile);final FileChannel fileChannel = fileInputStream.getChannel();try {assertThrows(IllegalArgumentException.class, ()->IOUtils.skipFully(fileChannel, -1),"Should have failed with IllegalArgumentException" );IOUtils.skipFully(fileChannel, 0);IOUtils.skipFully(fileChannel, FILE_SIZE - 1);assertThrows(IOException.class, ()->IOUtils.skipFully(fileChannel, 2),"Should have failed with IOException" );} finally {IOUtils.closeQuietly(fileChannel, fileInputStream);}}@Testpublic void testSkipFully_Reader() throws Exception {final int size = 1027;final Reader input = new CharArrayReader(new char[size]);IOUtils.skipFully(input, 0);IOUtils.skipFully(input, size - 3);assertThrows(IllegalArgumentException.class, ()->IOUtils.skipFully(input, -1),"Should have failed with IllegalArgumentException" );assertThrows(IOException.class, ()->IOUtils.skipFully(input, 5),"Should have failed with IOException" );IOUtils.closeQuietly(input);}@Testpublic void testStringToOutputStream() throws Exception {final File destination = TestUtils.newFile(temporaryFolder, "copy5.txt");final String str;try (Reader fin = Files.newBufferedReader(testFilePath)) {// Create our String. Rely on testReaderToString() to make sure this is valid.str = IOUtils.toString(fin);}try (OutputStream fout = Files.newOutputStream(destination.toPath())) {CopyUtils.copy(str, fout);// Note: this method *does* flush. It is equivalent to:// OutputStreamWriter _out = new OutputStreamWriter(fout);// CopyUtils.copy( str, _out, 4096 ); // copy( Reader, Writer, int );// _out.flush();// out = fout;// note: we don't flush here; this IOUtils method does it for usTestUtils.checkFile(destination, testFile);TestUtils.checkWrite(fout);}TestUtils.deleteFile(destination);}@Testpublic void testToBufferedInputStream_InputStream() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final InputStream in = IOUtils.toBufferedInputStream(fin);final byte[] out = IOUtils.toByteArray(in);assertNotNull(out);assertEquals(0, fin.available(), "Not all bytes were read");assertEquals(FILE_SIZE, out.length, "Wrong output size");TestUtils.assertEqualContent(out, testFile);}}@Testpublic void testToBufferedInputStreamWithBufferSize_InputStream() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final InputStream in = IOUtils.toBufferedInputStream(fin, 2048);final byte[] out = IOUtils.toByteArray(in);assertNotNull(out);assertEquals(0, fin.available(), "Not all bytes were read");assertEquals(FILE_SIZE, out.length, "Wrong output size");TestUtils.assertEqualContent(out, testFile);}}@Testpublic void testToByteArray_InputStream() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final byte[] out = IOUtils.toByteArray(fin);assertNotNull(out);assertEquals(0, fin.available(), "Not all bytes were read");assertEquals(FILE_SIZE, out.length, "Wrong output size");TestUtils.assertEqualContent(out, testFile);}}@Test@Disabled("Disable by default as it uses too much memory and can cause builds to fail.")public void testToByteArray_InputStream_LongerThanIntegerMaxValue() throws Exception {final CircularInputStream cin = new CircularInputStream(IOUtils.byteArray(), Integer.MAX_VALUE + 1L);assertThrows(IllegalArgumentException.class, () -> IOUtils.toByteArray(cin));}@Testpublic void testToByteArray_InputStream_NegativeSize() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final IllegalArgumentException exc = assertThrows(IllegalArgumentException.class,()->IOUtils.toByteArray(fin, -1), "Should have failed with IllegalArgumentException" );assertTrue(exc.getMessage().startsWith("Size must be equal or greater than zero"),"Exception message does not start with \"Size must be equal or greater than zero\"");}}@Testpublic void testToByteArray_InputStream_Size() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final byte[] out = IOUtils.toByteArray(fin, testFile.length());assertNotNull(out);assertEquals(0, fin.available(), "Not all bytes were read");assertEquals(FILE_SIZE, out.length, "Wrong output size: out.length=" + out.length + "!=" + FILE_SIZE);TestUtils.assertEqualContent(out, testFile);}}@Testpublic void testToByteArray_InputStream_SizeIllegal() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final IOException exc = assertThrows(IOException.class,()->IOUtils.toByteArray(fin, testFile.length() + 1), "Should have failed with IOException" );assertTrue(exc.getMessage().startsWith("Unexpected read size"),"Exception message does not start with \"Unexpected read size\"");}}@Testpublic void testToByteArray_InputStream_SizeLong() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final IllegalArgumentException exc = assertThrows(IllegalArgumentException.class,()-> IOUtils.toByteArray(fin, (long) Integer.MAX_VALUE + 1),"Should have failed with IllegalArgumentException" );assertTrue(exc.getMessage().startsWith("Size cannot be greater than Integer max value"),"Exception message does not start with \"Size cannot be greater than Integer max value\"");}}@Testpublic void testToByteArray_InputStream_SizeOne() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final byte[] out = IOUtils.toByteArray(fin, 1);assertNotNull(out, "Out cannot be null");assertEquals(1, out.length, "Out length must be 1");}}@Testpublic void testToByteArray_InputStream_SizeZero() throws Exception {try (InputStream fin =Files.newInputStream(testFilePath)) {final byte[] out = IOUtils.toByteArray(fin, 0);assertNotNull(out, "Out cannot be null");assertEquals(0, out.length, "Out length must be 0");}}@Testpublic void testToByteArray_Reader() throws IOException {final String charsetName = UTF_8;final byte[] expecteds = charsetName.getBytes(charsetName);byte[] actuals = IOUtils.toByteArray(new InputStreamReader(new ByteArrayInputStream(expecteds)));assertArrayEquals(expecteds, actuals);actuals = IOUtils.toByteArray(new InputStreamReader(new ByteArrayInputStream(expecteds)), charsetName);assertArrayEquals(expecteds, actuals);}@Testpublic void testToByteArray_String() throws Exception {try (Reader fin = Files.newBufferedReader(testFilePath)) {// Create our String. Rely on testReaderToString() to make sure this is valid.final String str = IOUtils.toString(fin);final byte[] out = IOUtils.toByteArray(str);assertEqualContent(str.getBytes(), out);}}@Testpublic void testToByteArray_URI() throws Exception {final URI url = testFile.toURI();final byte[] actual = IOUtils.toByteArray(url);assertEquals(FILE_SIZE, actual.length);}@Testpublic void testToByteArray_URL() throws Exception {final URL url = testFile.toURI().toURL();final byte[] actual = IOUtils.toByteArray(url);assertEquals(FILE_SIZE, actual.length);}@Testpublic void testToByteArray_URLConnection() throws Exception {final byte[] actual;try (CloseableURLConnection urlConnection = CloseableURLConnection.open(testFile.toURI())) {actual = IOUtils.toByteArray(urlConnection);}assertEquals(FILE_SIZE, actual.length);}@Testpublic void testToCharArray_InputStream() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final char[] out = IOUtils.toCharArray(fin);assertNotNull(out);assertEquals(0, fin.available(), "Not all chars were read");assertEquals(FILE_SIZE, out.length, "Wrong output size");TestUtils.assertEqualContent(out, testFile);}}@Testpublic void testToCharArray_InputStream_CharsetName() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final char[] out = IOUtils.toCharArray(fin, UTF_8);assertNotNull(out);assertEquals(0, fin.available(), "Not all chars were read");assertEquals(FILE_SIZE, out.length, "Wrong output size");TestUtils.assertEqualContent(out, testFile);}}@Testpublic void testToCharArray_Reader() throws Exception {try (Reader fr = Files.newBufferedReader(testFilePath)) {final char[] out = IOUtils.toCharArray(fr);assertNotNull(out);assertEquals(FILE_SIZE, out.length, "Wrong output size");TestUtils.assertEqualContent(out, testFile);}}/*** Test for {@link IOUtils#toInputStream(CharSequence)} and {@link IOUtils#toInputStream(CharSequence, String)}.* Note, this test utilizes on {@link IOUtils#toByteArray(java.io.InputStream)} and so relies on* {@link #testToByteArray_InputStream()} to ensure this method functions correctly.** @throws Exception on error*/@Testpublic void testToInputStream_CharSequence() throws Exception {final CharSequence csq = new StringBuilder("Abc123Xyz!");InputStream inStream = IOUtils.toInputStream(csq); // deliberately testing deprecated methodbyte[] bytes = IOUtils.toByteArray(inStream);assertEqualContent(csq.toString().getBytes(), bytes);inStream = IOUtils.toInputStream(csq, (String) null);bytes = IOUtils.toByteArray(inStream);assertEqualContent(csq.toString().getBytes(), bytes);inStream = IOUtils.toInputStream(csq, UTF_8);bytes = IOUtils.toByteArray(inStream);assertEqualContent(csq.toString().getBytes(StandardCharsets.UTF_8), bytes);}/*** Test for {@link IOUtils#toInputStream(String)} and {@link IOUtils#toInputStream(String, String)}. Note, this test* utilizes on {@link IOUtils#toByteArray(java.io.InputStream)} and so relies on* {@link #testToByteArray_InputStream()} to ensure this method functions correctly.** @throws Exception on error*/@Testpublic void testToInputStream_String() throws Exception {final String str = "Abc123Xyz!";InputStream inStream = IOUtils.toInputStream(str);byte[] bytes = IOUtils.toByteArray(inStream);assertEqualContent(str.getBytes(), bytes);inStream = IOUtils.toInputStream(str, (String) null);bytes = IOUtils.toByteArray(inStream);assertEqualContent(str.getBytes(), bytes);inStream = IOUtils.toInputStream(str, UTF_8);bytes = IOUtils.toByteArray(inStream);assertEqualContent(str.getBytes(StandardCharsets.UTF_8), bytes);}@Testpublic void testToString_ByteArray() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final byte[] in = IOUtils.toByteArray(fin);// Create our byte[]. Rely on testInputStreamToByteArray() to make sure this is valid.final String str = IOUtils.toString(in);assertEqualContent(in, str.getBytes());}}@Testpublic void testToString_InputStream() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final String out = IOUtils.toString(fin);assertNotNull(out);assertEquals(0, fin.available(), "Not all bytes were read");assertEquals(FILE_SIZE, out.length(), "Wrong output size");}}@Testpublic void testToString_Reader() throws Exception {try (Reader fin = Files.newBufferedReader(testFilePath)) {final String out = IOUtils.toString(fin);assertNotNull(out);assertEquals(FILE_SIZE, out.length(), "Wrong output size");}}@Testpublic void testToString_URI() throws Exception {final URI url = testFile.toURI();final String out = IOUtils.toString(url);assertNotNull(out);assertEquals(FILE_SIZE, out.length(), "Wrong output size");}private void testToString_URI(final String encoding) throws Exception {final URI uri = testFile.toURI();final String out = IOUtils.toString(uri, encoding);assertNotNull(out);assertEquals(FILE_SIZE, out.length(), "Wrong output size");}@Testpublic void testToString_URI_CharsetName() throws Exception {testToString_URI("US-ASCII");}@Testpublic void testToString_URI_CharsetNameNull() throws Exception {testToString_URI(null);}@Testpublic void testToString_URL() throws Exception {final URL url = testFile.toURI().toURL();final String out = IOUtils.toString(url);assertNotNull(out);assertEquals(FILE_SIZE, out.length(), "Wrong output size");}private void testToString_URL(final String encoding) throws Exception {final URL url = testFile.toURI().toURL();final String out = IOUtils.toString(url, encoding);assertNotNull(out);assertEquals(FILE_SIZE, out.length(), "Wrong output size");}@Testpublic void testToString_URL_CharsetName() throws Exception {testToString_URL("US-ASCII");}@Testpublic void testToString_URL_CharsetNameNull() throws Exception {testToString_URL(null);}/*** IO-764 IOUtils.write() throws NegativeArraySizeException while writing big strings.* <pre>* java.lang.OutOfMemoryError: Java heap space*     at java.lang.StringCoding.encode(StringCoding.java:350)*     at java.lang.String.getBytes(String.java:941)*     at org.apache.commons.io.IOUtils.write(IOUtils.java:3367)*     at org.apache.commons.io.IOUtilsTest.testBigString(IOUtilsTest.java:1659)* </pre>*/@Testpublic void testWriteBigString() throws IOException {// 3_000_000 is a size that we can allocate for the test string with Java 8 on the command line as:// mvn clean test -Dtest=IOUtilsTest -DtestBigString=3000000// 6_000_000 failed with the above//// TODO Can we mock the test string for this test to pretend to be larger?// Mocking the length seems simple but how about the data?final int repeat = Integer.getInteger("testBigString", 3_000_000);final String data;try {data = StringUtils.repeat("\uD83D", repeat);} catch (final OutOfMemoryError e) {System.err.printf("Don't fail the test if we cannot build the fixture, just log, fixture size = %,d%n.", repeat);e.printStackTrace();return;}try (CountingOutputStream os = new CountingOutputStream(NullOutputStream.INSTANCE)) {IOUtils.write(data, os, StandardCharsets.UTF_8);assertEquals(repeat, os.getByteCount());}}@Testpublic void testWriteLittleString() throws IOException {final String data = "\uD83D";// White-box test to check that not closing the internal channel is not a problem.for (int i = 0; i < 1_000_000; i++) {try (CountingOutputStream os = new CountingOutputStream(NullOutputStream.INSTANCE)) {IOUtils.write(data, os, StandardCharsets.UTF_8);assertEquals(data.length(), os.getByteCount());}}}}
assertNotNull(in, name);
assertNotNull(in, name);
assertNotNull(filter.toString()); // TODO better test
assertNotNull(filter.toString()); // TODO better test
assertNotNull(FileFilterUtils.asFileFilter((FileFilter) FalseFileFilter.INSTANCE));
assertNotNull(FileFilterUtils.asFileFilter((FilenameFilter) FalseFileFilter.INSTANCE).toString());
assertNotNull(new FileFilterUtils()); // dummy for test coverage
assertNotNull(FalseFileFilter.INSTANCE.toString());
assertNotNull(TrueFileFilter.INSTANCE.toString());
assertNotNull(filter.toString());
assertNotNull(filter.toString());
assertNotNull(filter.toString());
assertNotNull(filter.toString());
assertNull(FilenameUtils.concat("", null));
assertNull(FilenameUtils.concat(null, null));
assertNull(FilenameUtils.concat(null, ""));
assertNull(FilenameUtils.concat(null, "a"));
assertNull(FilenameUtils.concat("", ":")); // invalid prefix
assertNull(FilenameUtils.concat(":", "")); // invalid prefix
assertNull(FilenameUtils.getBaseName(null));
assertNull(FilenameUtils.getExtension(null));
assertNull(FilenameUtils.getFullPath(null));
assertNull(FilenameUtils.getFullPath(":"));
assertNull(FilenameUtils.getFullPath("1:/a/b/c.txt"));
assertNull(FilenameUtils.getFullPath("1:"));
assertNull(FilenameUtils.getFullPath("1:a"));
assertNull(FilenameUtils.getFullPath("///a/b/c.txt"));
assertNull(FilenameUtils.getFullPath("//a"));
assertNull(FilenameUtils.getFullPathNoEndSeparator(null));
assertNull(FilenameUtils.getFullPathNoEndSeparator(":"));
assertNull(FilenameUtils.getFullPathNoEndSeparator("1:/a/b/c.txt"));
assertNull(FilenameUtils.getFullPathNoEndSeparator("1:"));
assertNull(FilenameUtils.getFullPathNoEndSeparator("1:a"));
assertNull(FilenameUtils.getFullPathNoEndSeparator("///a/b/c.txt"));
assertNull(FilenameUtils.getFullPathNoEndSeparator("//a"));
assertNull(FilenameUtils.getName(null));
assertNull(FilenameUtils.getPath(null));
assertNull(FilenameUtils.getPath(":"));
assertNull(FilenameUtils.getPath("1:/a/b/c.txt"));
assertNull(FilenameUtils.getPath("1:"));
assertNull(FilenameUtils.getPath("1:a"));
assertNull(FilenameUtils.getPath("///a/b/c.txt"));
assertNull(FilenameUtils.getPath("//a"));
assertNull(FilenameUtils.getPath(null));
assertNull(FilenameUtils.getPathNoEndSeparator(":"));
assertNull(FilenameUtils.getPathNoEndSeparator("1:/a/b/c.txt"));
assertNull(FilenameUtils.getPathNoEndSeparator("1:"));
assertNull(FilenameUtils.getPathNoEndSeparator("1:a"));
assertNull(FilenameUtils.getPathNoEndSeparator("///a/b/c.txt"));
assertNull(FilenameUtils.getPathNoEndSeparator("//a"));
assertNull(FilenameUtils.getPrefix(null));
assertNull(FilenameUtils.getPrefix(":"));
assertNull(FilenameUtils.getPrefix("1:\\a\\b\\c.txt"));
assertNull(FilenameUtils.getPrefix("1:"));
assertNull(FilenameUtils.getPrefix("1:a"));
assertNull(FilenameUtils.getPrefix("\\\\\\a\\b\\c.txt"));
assertNull(FilenameUtils.getPrefix("\\\\a"));
assertNull(FilenameUtils.normalize(null));
assertNull(FilenameUtils.normalize(":"));
assertNull(FilenameUtils.normalize("1:\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("1:"));
assertNull(FilenameUtils.normalize("1:a"));
assertNull(FilenameUtils.normalize("\\\\\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\a"));
assertNull(FilenameUtils.normalize("a/b/../../../c"));
assertNull(FilenameUtils.normalize("a/b/../../.."));
assertNull(FilenameUtils.normalize("../a"));
assertNull(FilenameUtils.normalize(".."));
assertNull(FilenameUtils.normalize("/a/b/../../../c"));
assertNull(FilenameUtils.normalize("/a/b/../../.."));
assertNull(FilenameUtils.normalize("/../a"));
assertNull(FilenameUtils.normalize("/.."));
assertNull(FilenameUtils.normalize("~/a/b/../../../c"));
assertNull(FilenameUtils.normalize("~/a/b/../../.."));
assertNull(FilenameUtils.normalize("~/../a"));
assertNull(FilenameUtils.normalize("~/.."));
assertNull(FilenameUtils.normalize("~user/a/b/../../../c"));
assertNull(FilenameUtils.normalize("~user/a/b/../../.."));
assertNull(FilenameUtils.normalize("~user/../a"));
assertNull(FilenameUtils.normalize("~user/.."));
assertNull(FilenameUtils.normalize("C:/a/b/../../../c"));
assertNull(FilenameUtils.normalize("C:/a/b/../../.."));
assertNull(FilenameUtils.normalize("C:/../a"));
assertNull(FilenameUtils.normalize("C:/.."));
assertNull(FilenameUtils.normalize("C:a/b/../../../c"));
assertNull(FilenameUtils.normalize("C:a/b/../../.."));
assertNull(FilenameUtils.normalize("C:../a"));
assertNull(FilenameUtils.normalize("C:.."));
assertNull(FilenameUtils.normalize("//server/a/b/../../../c"));
assertNull(FilenameUtils.normalize("//server/a/b/../../.."));
assertNull(FilenameUtils.normalize("//server/../a"));
assertNull(FilenameUtils.normalize("//server/.."));
assertNull(FilenameUtils.normalize("\\\\-server\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\.\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\..\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\127.0..1\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\::1::2\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\:1\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\1:\\a\\b\\c.txt"));
asse