assertTrue(mutNum.isNaN());
assertTrue(mutNum.isInfinite());
assertTrue(mutNum.isInfinite());
assertFalse(new MutableBoolean().booleanValue());
assertTrue(new MutableBoolean(true).booleanValue());
assertFalse(new MutableBoolean(false).booleanValue());
assertTrue(new MutableBoolean(Boolean.TRUE).booleanValue());
assertFalse(new MutableBoolean(Boolean.FALSE).booleanValue());
assertFalse(new MutableBoolean().booleanValue());
assertFalse(mutBool.booleanValue());
assertTrue(mutBool.isFalse());
assertFalse(mutBool.isTrue());
assertTrue(mutBool.booleanValue());
assertFalse(mutBool.isFalse());
assertTrue(mutBool.isTrue());
assertFalse(mutBool.booleanValue());
assertTrue(mutBool.booleanValue());
assertFalse(mutBool.booleanValue());
assertTrue(mutBool.booleanValue());
assertTrue(mutNum.isNaN());
assertTrue(mutNum.isInfinite());
assertTrue(mutNum.isInfinite());
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(LocaleUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(LocaleUtils.class.getModifiers()));
assertTrue(locale.getCountry() == null || locale.getCountry().isEmpty());
assertTrue(locale.getVariant() == null || locale.getVariant().isEmpty());
assertTrue(locale.getVariant() == null || locale.getVariant().isEmpty());
assertTrue(StringUtils.isBlank(locale.getCountry()));
assertTrue(locale.getVariant() == null|| locale.getVariant().isEmpty());
assertTrue(found, "Could not find language: " + language + " for country: " + country);
assertTrue(locale.getVariant() == null|| locale.getVariant().isEmpty());
assertTrue(found, "Could not find language: " + country + " for country: " + language);
assertTrue(Modifier.isPublic(CharSet.class.getModifiers()));
assertFalse(Modifier.isFinal(CharSet.class.getModifiers()));
assertTrue(ArrayUtils.contains(array, CharRange.is('a')));
assertTrue(ArrayUtils.contains(array, CharRange.is('b')));
assertTrue(ArrayUtils.contains(array, CharRange.is('c')));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'c')));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));
assertTrue(ArrayUtils.contains(array, CharRange.is('a')));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));
assertTrue(ArrayUtils.contains(array, CharRange.is('a')));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));
assertTrue(ArrayUtils.contains(array, CharRange.is('a')));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('m', 'p')));
assertTrue(ArrayUtils.contains(array, CharRange.is('z')));
assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));
assertTrue(ArrayUtils.contains(array, CharRange.is('b')));
assertTrue(ArrayUtils.contains(array, CharRange.is('c')));
assertTrue(ArrayUtils.contains(array, CharRange.is('b')));
assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));
assertTrue(ArrayUtils.contains(array, CharRange.is('c')));
assertTrue(ArrayUtils.contains(array, CharRange.is('d')));
assertTrue(ArrayUtils.contains(array, CharRange.is('b')));
assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));
assertTrue(ArrayUtils.contains(array, CharRange.is('c')));
assertTrue(ArrayUtils.contains(array, CharRange.isNot('b')));
assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));
assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('a', 'c')));
assertTrue(ArrayUtils.contains(array, CharRange.isNot('z')));
assertTrue(ArrayUtils.contains(array, CharRange.is('b')));
assertTrue(ArrayUtils.contains(array, CharRange.is('-')));
assertTrue(ArrayUtils.contains(array, CharRange.is('-')));
assertTrue(ArrayUtils.contains(array, CharRange.is('-')));
assertTrue(ArrayUtils.contains(array, CharRange.is('-')));
assertTrue(ArrayUtils.contains(array, CharRange.is('-')));
assertTrue(ArrayUtils.contains(array, CharRange.is('a')));
assertTrue(ArrayUtils.contains(array, CharRange.is('a')));
assertTrue(ArrayUtils.contains(array, CharRange.is('-')));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '-')));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('-', 'a')));
assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); // "^"
assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); // "^^"
assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); // "^^"
assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); // "^"
assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); // "^^" x2
assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); // "a"
assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); // "^"
assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); // "^a"
assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); // "-"
assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); // "^^-c"
assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); // "^c-^"
assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); // "^c-^"
assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); // "d"
assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); // "^^"
assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); // "-"
assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '^'))); // "a-^"
assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); // "c"
assertFalse(set.contains('b'));
assertTrue(set.contains('^'));
assertTrue(set.contains('_')); // between ^ and a
assertTrue(set.contains('c'));
assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('a', '^'))); // "^a-^"
assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); // "c"
assertTrue(set.contains('b'));
assertFalse(set.contains('^'));
assertFalse(set.contains('_')); // between ^ and a
assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', ' '))); // "a- "
assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('-', ' '))); // "^-- "
assertTrue(set.contains('#'));
assertTrue(set.contains('^'));
assertTrue(set.contains('a'));
assertTrue(set.contains('*'));
assertTrue(set.contains('A'));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('^', 'b'))); // "^-b"
assertTrue(set.contains('b'));
assertTrue(set.contains('_')); // between ^ and a
assertFalse(set.contains('A'));
assertTrue(set.contains('^'));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('^', 'b'))); // "b-^"
assertTrue(set.contains('b'));
assertTrue(set.contains('^'));
assertTrue(set.contains('a')); // between ^ and b
assertFalse(set.contains('c'));
assertFalse(btod.contains('a'));
assertTrue(btod.contains('b'));
assertTrue(btod.contains('c'));
assertTrue(btod.contains('d'));
assertFalse(btod.contains('e'));
assertFalse(bcd.contains('a'));
assertTrue(bcd.contains('b'));
assertTrue(bcd.contains('c'));
assertTrue(bcd.contains('d'));
assertFalse(bcd.contains('e'));
assertFalse(bd.contains('a'));
assertTrue(bd.contains('b'));
assertFalse(bd.contains('c'));
assertTrue(bd.contains('d'));
assertFalse(bd.contains('e'));
assertTrue(notbtod.contains('a'));
assertFalse(notbtod.contains('b'));
assertFalse(notbtod.contains('c'));
assertFalse(notbtod.contains('d'));
assertTrue(notbtod.contains('e'));
assertFalse(dtob.contains('a'));
assertTrue(dtob.contains('b'));
assertTrue(dtob.contains('c'));
assertTrue(dtob.contains('d'));
assertFalse(dtob.contains('e'));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'z')));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('A', 'Z')));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'z')));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('A', 'Z')));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('0', '9')));
assertFalse(CharSet.getInstance("^a-c").contains('a'));
assertTrue(CharSet.getInstance("^a-c").contains('d'));
assertTrue(CharSet.getInstance("^^a-c").contains('a'));
assertFalse(CharSet.getInstance("^^a-c").contains('^'));
assertTrue(CharSet.getInstance("^a-cd-f").contains('d'));
assertTrue(CharSet.getInstance("a-c^").contains('^'));
assertTrue(CharSet.getInstance("^", "a-c").contains('^'));
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertTrue(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertTrue(SystemUtils.IS_JAVA_1_9);
assertTrue(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertTrue(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertTrue(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertTrue(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertTrue(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertTrue(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertTrue(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertTrue(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertTrue(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertTrue(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_OS_WINDOWS);
assertFalse(SystemUtils.IS_OS_UNIX);
assertFalse(SystemUtils.IS_OS_SOLARIS);
assertFalse(SystemUtils.IS_OS_LINUX);
assertFalse(SystemUtils.IS_OS_MAC_OSX);
assertFalse(SystemUtils.IS_OS_UNIX);
assertTrue(SystemUtils.IS_OS_WINDOWS);
assertTrue(SystemUtils.IS_OS_SOLARIS);
assertTrue(SystemUtils.IS_OS_UNIX);
assertFalse(SystemUtils.IS_OS_WINDOWS);
assertTrue(SystemUtils.IS_OS_LINUX);
assertTrue(SystemUtils.IS_OS_UNIX);
assertFalse(SystemUtils.IS_OS_WINDOWS);
assertTrue(SystemUtils.IS_OS_MAC_OSX);
assertTrue(SystemUtils.IS_OS_UNIX);
assertFalse(SystemUtils.IS_OS_WINDOWS);
assertTrue(SystemUtils.IS_OS_OS2);
assertFalse(SystemUtils.IS_OS_UNIX);
assertFalse(SystemUtils.IS_OS_WINDOWS);
assertTrue(SystemUtils.IS_OS_SUN_OS);
assertTrue(SystemUtils.IS_OS_UNIX);
assertFalse(SystemUtils.IS_OS_WINDOWS);
assertTrue(SystemUtils.IS_OS_FREE_BSD);
assertTrue(SystemUtils.IS_OS_UNIX);
assertFalse(SystemUtils.IS_OS_WINDOWS);
assertFalse(SystemUtils.IS_OS_ZOS);
assertFalse(SystemUtils.IS_OS_WINDOWS);
assertTrue(SystemUtils.IS_OS_ZOS);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(SystemUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(SystemUtils.class.getModifiers()));
assertTrue(dir.exists());
assertTrue(dir.exists());
assertTrue(dir.exists());
assertTrue(dir.exists());
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_3));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_4));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_5));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_6));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_7));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_9));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_10));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_11));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_12));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_13));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_3));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_4));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_5));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_6));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_7));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_9));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_10));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_11));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_12));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_13));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_3));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_4));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_5));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_6));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_7));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_9));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_10));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_11));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_12));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_13));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_3));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_4));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_5));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_6));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_7));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_9));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_10));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_11));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_12));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_13));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_3));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_4));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_5));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_6));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_7));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_9));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_10));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_11));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_12));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_13));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_3));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_4));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_5));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_6));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_7));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_9));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_10));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_11));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_12));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_13));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_1));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_2));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_3));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_4));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_5));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_6));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_7));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_1_8));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_9));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_10));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_11));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_12));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_13));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_1));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_2));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_3));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_4));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_5));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_6));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_7));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_8));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_9));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_10));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_11));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_12));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_13));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_1));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_2));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_3));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_4));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_5));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_6));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_7));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_8));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_9));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_10));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_11));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_12));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_13));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_1));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_2));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_3));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_4));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_5));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_6));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_7));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_8));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_9));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_10));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_11));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_12));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_13));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_1));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_2));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_3));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_4));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_5));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_6));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_7));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_8));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_9));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_10));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_11));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_12));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_13));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_1));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_2));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_3));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_4));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_5));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_6));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_7));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_8));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_9));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_10));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_11));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_12));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_13));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isOSNameMatch(osName, "Windows"));
assertFalse(SystemUtils.isOSNameMatch(osName, "Windows"));
assertTrue(SystemUtils.isOSNameMatch(osName, "Windows"));
assertTrue(SystemUtils.isOSNameMatch(osName, "Windows"));
assertFalse(SystemUtils.isOSNameMatch(osName, "Windows"));
assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1"));
assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1"));
assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1"));
assertTrue(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1"));
assertTrue(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1"));
assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1"));
assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.1"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.1"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.1"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.1.1"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.10"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.10.1"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.1"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.1.1"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.10"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.10.1"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.1"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.1.1"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.10"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.10.1"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.1"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.1.1"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.10"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.10.1"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.1"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.1.1"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.10"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.10.1"));
assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class)));
assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class)));
assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class)));
assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class)));
assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class)));
assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field4.getAnnotation(NestAnnotation.class)));
assertFalse(AnnotationUtils.equals(field4.getAnnotation(NestAnnotation.class), field1.getAnnotation(TestAnnotation.class)));
assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null));
assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class)));
assertTrue(AnnotationUtils.equals(null, null));
assertTrue(AnnotationUtils.isValidAnnotationMemberType(type));
assertTrue(AnnotationUtils.isValidAnnotationMemberType(Array.newInstance(type, 0).getClass()));
assertFalse(AnnotationUtils.isValidAnnotationMemberType(type));
assertFalse(AnnotationUtils.isValidAnnotationMemberType(Array.newInstance(type, 0).getClass()));
assertTrue(AnnotationUtils.equals(generated, real));
assertTrue(AnnotationUtils.equals(real, generated));
assertTrue(AnnotationUtils.equals(generated, generated2));
assertTrue(AnnotationUtils.equals(generated2, generated));
assertTrue(annotationString.startsWith("@org.apache.commons.lang3.AnnotationUtilsTest$TestMethodAnnotation("));
assertTrue(annotationString.endsWith(")"));
assertTrue(annotationString.contains("expected=class org.apache.commons.lang3.AnnotationUtilsTest$TestMethodAnnotation$None"));
assertTrue(annotationString.contains("timeout=666000"));
assertTrue(annotationString.contains(", "));
assertTrue(StringUtils.startsWith(null, null), "startsWith(null, null)");
assertFalse(StringUtils.startsWith(FOOBAR, null), "startsWith(FOOBAR, null)");
assertFalse(StringUtils.startsWith(null, FOO), "startsWith(null, FOO)");
assertTrue(StringUtils.startsWith(FOOBAR, ""), "startsWith(FOOBAR, \"\")");
assertTrue(StringUtils.startsWith(foobar, foo), "startsWith(foobar, foo)");
assertTrue(StringUtils.startsWith(FOOBAR, FOO), "startsWith(FOOBAR, FOO)");
assertFalse(StringUtils.startsWith(foobar, FOO), "startsWith(foobar, FOO)");
assertFalse(StringUtils.startsWith(FOOBAR, foo), "startsWith(FOOBAR, foo)");
assertFalse(StringUtils.startsWith(foo, foobar), "startsWith(foo, foobar)");
assertFalse(StringUtils.startsWith(bar, foobar), "startsWith(foo, foobar)");
assertFalse(StringUtils.startsWith(foobar, bar), "startsWith(foobar, bar)");
assertFalse(StringUtils.startsWith(FOOBAR, BAR), "startsWith(FOOBAR, BAR)");
assertFalse(StringUtils.startsWith(foobar, BAR), "startsWith(foobar, BAR)");
assertFalse(StringUtils.startsWith(FOOBAR, bar), "startsWith(FOOBAR, bar)");
assertTrue(StringUtils.startsWithIgnoreCase(null, null), "startsWithIgnoreCase(null, null)");
assertFalse(StringUtils.startsWithIgnoreCase(FOOBAR, null), "startsWithIgnoreCase(FOOBAR, null)");
assertFalse(StringUtils.startsWithIgnoreCase(null, FOO), "startsWithIgnoreCase(null, FOO)");
assertTrue(StringUtils.startsWithIgnoreCase(FOOBAR, ""), "startsWithIgnoreCase(FOOBAR, \"\")");
assertTrue(StringUtils.startsWithIgnoreCase(foobar, foo), "startsWithIgnoreCase(foobar, foo)");
assertTrue(StringUtils.startsWithIgnoreCase(FOOBAR, FOO), "startsWithIgnoreCase(FOOBAR, FOO)");
assertTrue(StringUtils.startsWithIgnoreCase(foobar, FOO), "startsWithIgnoreCase(foobar, FOO)");
assertTrue(StringUtils.startsWithIgnoreCase(FOOBAR, foo), "startsWithIgnoreCase(FOOBAR, foo)");
assertFalse(StringUtils.startsWithIgnoreCase(foo, foobar), "startsWithIgnoreCase(foo, foobar)");
assertFalse(StringUtils.startsWithIgnoreCase(bar, foobar), "startsWithIgnoreCase(foo, foobar)");
assertFalse(StringUtils.startsWithIgnoreCase(foobar, bar), "startsWithIgnoreCase(foobar, bar)");
assertFalse(StringUtils.startsWithIgnoreCase(FOOBAR, BAR), "startsWithIgnoreCase(FOOBAR, BAR)");
assertFalse(StringUtils.startsWithIgnoreCase(foobar, BAR), "startsWithIgnoreCase(foobar, BAR)");
assertFalse(StringUtils.startsWithIgnoreCase(FOOBAR, bar), "startsWithIgnoreCase(FOOBAR, bar)");
assertFalse(StringUtils.startsWithAny(null, (String[]) null));
assertFalse(StringUtils.startsWithAny(null, "abc"));
assertFalse(StringUtils.startsWithAny("abcxyz", (String[]) null));
assertFalse(StringUtils.startsWithAny("abcxyz"));
assertTrue(StringUtils.startsWithAny("abcxyz", "abc"));
assertTrue(StringUtils.startsWithAny("abcxyz", null, "xyz", "abc"));
assertFalse(StringUtils.startsWithAny("abcxyz", null, "xyz", "abcd"));
assertTrue(StringUtils.startsWithAny("abcxyz", ""));
assertFalse(StringUtils.startsWithAny("abcxyz", null, "xyz", "ABCX"));
assertFalse(StringUtils.startsWithAny("ABCXYZ", null, "xyz", "abc"));
assertTrue(StringUtils.startsWithAny("abcxyz", new StringBuilder("xyz"), new StringBuffer("abc")), "StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))");
assertTrue(StringUtils.startsWithAny(new StringBuffer("abcxyz"), new StringBuilder("xyz"), new StringBuffer("abc")), "StringUtils.startsWithAny(StringBuffer(abcxyz), StringBuilder(xyz), StringBuffer(abc))");
assertTrue(StringUtils.endsWith(null, null), "endsWith(null, null)");
assertFalse(StringUtils.endsWith(FOOBAR, null), "endsWith(FOOBAR, null)");
assertFalse(StringUtils.endsWith(null, FOO), "endsWith(null, FOO)");
assertTrue(StringUtils.endsWith(FOOBAR, ""), "endsWith(FOOBAR, \"\")");
assertFalse(StringUtils.endsWith(foobar, foo), "endsWith(foobar, foo)");
assertFalse(StringUtils.endsWith(FOOBAR, FOO), "endsWith(FOOBAR, FOO)");
assertFalse(StringUtils.endsWith(foobar, FOO), "endsWith(foobar, FOO)");
assertFalse(StringUtils.endsWith(FOOBAR, foo), "endsWith(FOOBAR, foo)");
assertFalse(StringUtils.endsWith(foo, foobar), "endsWith(foo, foobar)");
assertFalse(StringUtils.endsWith(bar, foobar), "endsWith(foo, foobar)");
assertTrue(StringUtils.endsWith(foobar, bar), "endsWith(foobar, bar)");
assertTrue(StringUtils.endsWith(FOOBAR, BAR), "endsWith(FOOBAR, BAR)");
assertFalse(StringUtils.endsWith(foobar, BAR), "endsWith(foobar, BAR)");
assertFalse(StringUtils.endsWith(FOOBAR, bar), "endsWith(FOOBAR, bar)");
assertTrue(StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B4"),"endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B4)");
assertFalse(StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B3\u0394"),"endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B3\u0394)");
assertTrue(StringUtils.endsWithIgnoreCase(null, null), "endsWithIgnoreCase(null, null)");
assertFalse(StringUtils.endsWithIgnoreCase(FOOBAR, null), "endsWithIgnoreCase(FOOBAR, null)");
assertFalse(StringUtils.endsWithIgnoreCase(null, FOO), "endsWithIgnoreCase(null, FOO)");
assertTrue(StringUtils.endsWithIgnoreCase(FOOBAR, ""), "endsWithIgnoreCase(FOOBAR, \"\")");
assertFalse(StringUtils.endsWithIgnoreCase(foobar, foo), "endsWithIgnoreCase(foobar, foo)");
assertFalse(StringUtils.endsWithIgnoreCase(FOOBAR, FOO), "endsWithIgnoreCase(FOOBAR, FOO)");
assertFalse(StringUtils.endsWithIgnoreCase(foobar, FOO), "endsWithIgnoreCase(foobar, FOO)");
assertFalse(StringUtils.endsWithIgnoreCase(FOOBAR, foo), "endsWithIgnoreCase(FOOBAR, foo)");
assertFalse(StringUtils.endsWithIgnoreCase(foo, foobar), "endsWithIgnoreCase(foo, foobar)");
assertFalse(StringUtils.endsWithIgnoreCase(bar, foobar), "endsWithIgnoreCase(foo, foobar)");
assertTrue(StringUtils.endsWithIgnoreCase(foobar, bar), "endsWithIgnoreCase(foobar, bar)");
assertTrue(StringUtils.endsWithIgnoreCase(FOOBAR, BAR), "endsWithIgnoreCase(FOOBAR, BAR)");
assertTrue(StringUtils.endsWithIgnoreCase(foobar, BAR), "endsWithIgnoreCase(foobar, BAR)");
assertTrue(StringUtils.endsWithIgnoreCase(FOOBAR, bar), "endsWithIgnoreCase(FOOBAR, bar)");
assertTrue(StringUtils.endsWithIgnoreCase("abcdef", "def"));
assertTrue(StringUtils.endsWithIgnoreCase("ABCDEF", "def"));
assertFalse(StringUtils.endsWithIgnoreCase("ABCDEF", "cde"));
assertTrue(StringUtils.endsWithIgnoreCase("\u03B1\u03B2\u03B3\u03B4", "\u0394"),"endsWith(\u03B1\u03B2\u03B3\u03B4, \u0394)");
assertFalse(StringUtils.endsWithIgnoreCase("\u03B1\u03B2\u03B3\u03B4", "\u0393"),"endsWith(\u03B1\u03B2\u03B3\u03B4, \u0393)");
assertFalse(StringUtils.endsWithAny(null, (String) null), "StringUtils.endsWithAny(null, null)");
assertFalse(StringUtils.endsWithAny(null, "abc"), "StringUtils.endsWithAny(null, new String[] {abc})");
assertFalse(StringUtils.endsWithAny("abcxyz", (String) null), "StringUtils.endsWithAny(abcxyz, null)");
assertTrue(StringUtils.endsWithAny("abcxyz", ""), "StringUtils.endsWithAny(abcxyz, new String[] {\"\"})");
assertTrue(StringUtils.endsWithAny("abcxyz", "xyz"), "StringUtils.endsWithAny(abcxyz, new String[] {xyz})");
assertTrue(StringUtils.endsWithAny("abcxyz", null, "xyz", "abc"), "StringUtils.endsWithAny(abcxyz, new String[] {null, xyz, abc})");
assertFalse(StringUtils.endsWithAny("defg", null, "xyz", "abc"), "StringUtils.endsWithAny(defg, new String[] {null, xyz, abc})");
assertTrue(StringUtils.endsWithAny("abcXYZ", "def", "XYZ"));
assertFalse(StringUtils.endsWithAny("abcXYZ", "def", "xyz"));
assertTrue(StringUtils.endsWithAny("abcXYZ", "def", "YZ"));
* assertFalse(StringUtils.endsWithAny("abcXYZ", null)); // replace with specific types to avoid warning
assertFalse(StringUtils.endsWithAny("abcXYZ", (CharSequence) null));
assertFalse(StringUtils.endsWithAny("abcXYZ", (CharSequence[]) null));
assertTrue(StringUtils.endsWithAny("abcXYZ", ""));
assertTrue(StringUtils.endsWithAny("abcxyz", new StringBuilder("abc"), new StringBuffer("xyz")), "StringUtils.endsWithAny(abcxyz, StringBuilder(abc), StringBuffer(xyz))");
assertTrue(StringUtils.endsWithAny(new StringBuffer("abcxyz"), new StringBuilder("abc"), new StringBuffer("xyz")), "StringUtils.endsWithAny(StringBuffer(abcxyz), StringBuilder(abc), StringBuffer(xyz))");
assertFalse(ClassUtils.isAssignable((Class<?>) null, null));
assertFalse(ClassUtils.isAssignable(String.class, null));
assertTrue(ClassUtils.isAssignable(null, Object.class));
assertTrue(ClassUtils.isAssignable(null, Integer.class));
assertFalse(ClassUtils.isAssignable(null, Integer.TYPE));
assertTrue(ClassUtils.isAssignable(String.class, Object.class));
assertTrue(ClassUtils.isAssignable(String.class, String.class));
assertFalse(ClassUtils.isAssignable(Object.class, String.class));
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.class));
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Object.class));
assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE));
assertTrue(ClassUtils.isAssignable(Integer.class, Object.class));
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));
assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class));
assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class));
assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Object.class));
assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));
assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class));
assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));
assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class));
assertFalse(ClassUtils.isAssignable((Class<?>) null, null, true));
assertFalse(ClassUtils.isAssignable(String.class, null, true));
assertTrue(ClassUtils.isAssignable(null, Object.class, true));
assertTrue(ClassUtils.isAssignable(null, Integer.class, true));
assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, true));
assertTrue(ClassUtils.isAssignable(String.class, Object.class, true));
assertTrue(ClassUtils.isAssignable(String.class, String.class, true));
assertFalse(ClassUtils.isAssignable(Object.class, String.class, true));
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.class, true));
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Object.class, true));
assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE, true));
assertTrue(ClassUtils.isAssignable(Integer.class, Object.class, true));
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, true));
assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, true));
assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, true));
assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));
assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class, true));
assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, true));
assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, true));
assertFalse(ClassUtils.isAssignable(array1, array2));
assertFalse(ClassUtils.isAssignable(null, array2));
assertTrue(ClassUtils.isAssignable(null, array0));
assertTrue(ClassUtils.isAssignable(array0, array0));
assertTrue(ClassUtils.isAssignable(array0, (Class<?>[]) null)); // explicit cast to avoid warning
assertTrue(ClassUtils.isAssignable(null, (Class<?>[]) null)); // explicit cast to avoid warning
assertFalse(ClassUtils.isAssignable(array1, array1s));
assertTrue(ClassUtils.isAssignable(array1s, array1s));
assertTrue(ClassUtils.isAssignable(array1s, array1));
assertTrue(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers));
assertTrue(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives));
assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1));
assertFalse(ClassUtils.isAssignable(arrayWrappers, array1));
assertTrue(ClassUtils.isAssignable(arrayPrimitives, array2));
assertTrue(ClassUtils.isAssignable(arrayWrappers, array2));
assertFalse(ClassUtils.isAssignable(array1, array2, true));
assertFalse(ClassUtils.isAssignable(null, array2, true));
assertTrue(ClassUtils.isAssignable(null, array0, true));
assertTrue(ClassUtils.isAssignable(array0, array0, true));
assertTrue(ClassUtils.isAssignable(array0, null, true));
assertTrue(ClassUtils.isAssignable((Class[]) null, null, true));
assertFalse(ClassUtils.isAssignable(array1, array1s, true));
assertTrue(ClassUtils.isAssignable(array1s, array1s, true));
assertTrue(ClassUtils.isAssignable(array1s, array1, true));
assertTrue(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, true));
assertTrue(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, true));
assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, true));
assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, true));
assertTrue(ClassUtils.isAssignable(arrayPrimitives, array2, true));
assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, true));
assertFalse(ClassUtils.isAssignable(array1, array2, false));
assertFalse(ClassUtils.isAssignable(null, array2, false));
assertTrue(ClassUtils.isAssignable(null, array0, false));
assertTrue(ClassUtils.isAssignable(array0, array0, false));
assertTrue(ClassUtils.isAssignable(array0, null, false));
assertTrue(ClassUtils.isAssignable((Class[]) null, null, false));
assertFalse(ClassUtils.isAssignable(array1, array1s, false));
assertTrue(ClassUtils.isAssignable(array1s, array1s, false));
assertTrue(ClassUtils.isAssignable(array1s, array1, false));
assertFalse(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, false));
assertFalse(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, false));
assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, false));
assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, false));
assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, false));
assertFalse(ClassUtils.isAssignable(arrayPrimitives, array2, false));
assertFalse(ClassUtils.isAssignable(Byte.class, Character.TYPE), "byte -> char");
assertTrue(ClassUtils.isAssignable(Byte.class, Byte.TYPE), "byte -> byte");
assertTrue(ClassUtils.isAssignable(Byte.class, Short.TYPE), "byte -> short");
assertTrue(ClassUtils.isAssignable(Byte.class, Integer.TYPE), "byte -> int");
assertTrue(ClassUtils.isAssignable(Byte.class, Long.TYPE), "byte -> long");
assertTrue(ClassUtils.isAssignable(Byte.class, Float.TYPE), "byte -> float");
assertTrue(ClassUtils.isAssignable(Byte.class, Double.TYPE), "byte -> double");
assertFalse(ClassUtils.isAssignable(Byte.class, Boolean.TYPE), "byte -> boolean");
assertFalse(ClassUtils.isAssignable(Short.class, Character.TYPE), "short -> char");
assertFalse(ClassUtils.isAssignable(Short.class, Byte.TYPE), "short -> byte");
assertTrue(ClassUtils.isAssignable(Short.class, Short.TYPE), "short -> short");
assertTrue(ClassUtils.isAssignable(Short.class, Integer.TYPE), "short -> int");
assertTrue(ClassUtils.isAssignable(Short.class, Long.TYPE), "short -> long");
assertTrue(ClassUtils.isAssignable(Short.class, Float.TYPE), "short -> float");
assertTrue(ClassUtils.isAssignable(Short.class, Double.TYPE), "short -> double");
assertFalse(ClassUtils.isAssignable(Short.class, Boolean.TYPE), "short -> boolean");
assertTrue(ClassUtils.isAssignable(Character.class, Character.TYPE), "char -> char");
assertFalse(ClassUtils.isAssignable(Character.class, Byte.TYPE), "char -> byte");
assertFalse(ClassUtils.isAssignable(Character.class, Short.TYPE), "char -> short");
assertTrue(ClassUtils.isAssignable(Character.class, Integer.TYPE), "char -> int");
assertTrue(ClassUtils.isAssignable(Character.class, Long.TYPE), "char -> long");
assertTrue(ClassUtils.isAssignable(Character.class, Float.TYPE), "char -> float");
assertTrue(ClassUtils.isAssignable(Character.class, Double.TYPE), "char -> double");
assertFalse(ClassUtils.isAssignable(Character.class, Boolean.TYPE), "char -> boolean");
assertFalse(ClassUtils.isAssignable(Integer.class, Character.TYPE), "int -> char");
assertFalse(ClassUtils.isAssignable(Integer.class, Byte.TYPE), "int -> byte");
assertFalse(ClassUtils.isAssignable(Integer.class, Short.TYPE), "int -> short");
assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE), "int -> int");
assertTrue(ClassUtils.isAssignable(Integer.class, Long.TYPE), "int -> long");
assertTrue(ClassUtils.isAssignable(Integer.class, Float.TYPE), "int -> float");
assertTrue(ClassUtils.isAssignable(Integer.class, Double.TYPE), "int -> double");
assertFalse(ClassUtils.isAssignable(Integer.class, Boolean.TYPE), "int -> boolean");
assertFalse(ClassUtils.isAssignable(Long.class, Character.TYPE), "long -> char");
assertFalse(ClassUtils.isAssignable(Long.class, Byte.TYPE), "long -> byte");
assertFalse(ClassUtils.isAssignable(Long.class, Short.TYPE), "long -> short");
assertFalse(ClassUtils.isAssignable(Long.class, Integer.TYPE), "long -> int");
assertTrue(ClassUtils.isAssignable(Long.class, Long.TYPE), "long -> long");
assertTrue(ClassUtils.isAssignable(Long.class, Float.TYPE), "long -> float");
assertTrue(ClassUtils.isAssignable(Long.class, Double.TYPE), "long -> double");
assertFalse(ClassUtils.isAssignable(Long.class, Boolean.TYPE), "long -> boolean");
assertFalse(ClassUtils.isAssignable(Float.class, Character.TYPE), "float -> char");
assertFalse(ClassUtils.isAssignable(Float.class, Byte.TYPE), "float -> byte");
assertFalse(ClassUtils.isAssignable(Float.class, Short.TYPE), "float -> short");
assertFalse(ClassUtils.isAssignable(Float.class, Integer.TYPE), "float -> int");
assertFalse(ClassUtils.isAssignable(Float.class, Long.TYPE), "float -> long");
assertTrue(ClassUtils.isAssignable(Float.class, Float.TYPE), "float -> float");
assertTrue(ClassUtils.isAssignable(Float.class, Double.TYPE), "float -> double");
assertFalse(ClassUtils.isAssignable(Float.class, Boolean.TYPE), "float -> boolean");
assertFalse(ClassUtils.isAssignable(Double.class, Character.TYPE), "double -> char");
assertFalse(ClassUtils.isAssignable(Double.class, Byte.TYPE), "double -> byte");
assertFalse(ClassUtils.isAssignable(Double.class, Short.TYPE), "double -> short");
assertFalse(ClassUtils.isAssignable(Double.class, Integer.TYPE), "double -> int");
assertFalse(ClassUtils.isAssignable(Double.class, Long.TYPE), "double -> long");
assertFalse(ClassUtils.isAssignable(Double.class, Float.TYPE), "double -> float");
assertTrue(ClassUtils.isAssignable(Double.class, Double.TYPE), "double -> double");
assertFalse(ClassUtils.isAssignable(Double.class, Boolean.TYPE), "double -> boolean");
assertFalse(ClassUtils.isAssignable(Boolean.class, Character.TYPE), "boolean -> char");
assertFalse(ClassUtils.isAssignable(Boolean.class, Byte.TYPE), "boolean -> byte");
assertFalse(ClassUtils.isAssignable(Boolean.class, Short.TYPE), "boolean -> short");
assertFalse(ClassUtils.isAssignable(Boolean.class, Integer.TYPE), "boolean -> int");
assertFalse(ClassUtils.isAssignable(Boolean.class, Long.TYPE), "boolean -> long");
assertFalse(ClassUtils.isAssignable(Boolean.class, Float.TYPE), "boolean -> float");
assertFalse(ClassUtils.isAssignable(Boolean.class, Double.TYPE), "boolean -> double");
assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE), "boolean -> boolean");
assertFalse(ClassUtils.isAssignable((Class<?>) null, null, false));
assertFalse(ClassUtils.isAssignable(String.class, null, false));
assertTrue(ClassUtils.isAssignable(null, Object.class, false));
assertTrue(ClassUtils.isAssignable(null, Integer.class, false));
assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, false));
assertTrue(ClassUtils.isAssignable(String.class, Object.class, false));
assertTrue(ClassUtils.isAssignable(String.class, String.class, false));
assertFalse(ClassUtils.isAssignable(Object.class, String.class, false));
assertFalse(ClassUtils.isAssignable(Integer.TYPE, Integer.class, false));
assertFalse(ClassUtils.isAssignable(Integer.TYPE, Object.class, false));
assertFalse(ClassUtils.isAssignable(Integer.class, Integer.TYPE, false));
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, false));
assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, false));
assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, false));
assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Object.class, false));
assertFalse(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, false));
assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class, false));
assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, false));
assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, false));
assertFalse(ClassUtils.isAssignable(Byte.class, Character.TYPE, true), "byte -> char");
assertTrue(ClassUtils.isAssignable(Byte.class, Byte.TYPE, true), "byte -> byte");
assertTrue(ClassUtils.isAssignable(Byte.class, Short.TYPE, true), "byte -> short");
assertTrue(ClassUtils.isAssignable(Byte.class, Integer.TYPE, true), "byte -> int");
assertTrue(ClassUtils.isAssignable(Byte.class, Long.TYPE, true), "byte -> long");
assertTrue(ClassUtils.isAssignable(Byte.class, Float.TYPE, true), "byte -> float");
assertTrue(ClassUtils.isAssignable(Byte.class, Double.TYPE, true), "byte -> double");
assertFalse(ClassUtils.isAssignable(Byte.class, Boolean.TYPE, true), "byte -> boolean");
assertFalse(ClassUtils.isAssignable(Short.class, Character.TYPE, true), "short -> char");
assertFalse(ClassUtils.isAssignable(Short.class, Byte.TYPE, true), "short -> byte");
assertTrue(ClassUtils.isAssignable(Short.class, Short.TYPE, true), "short -> short");
assertTrue(ClassUtils.isAssignable(Short.class, Integer.TYPE, true), "short -> int");
assertTrue(ClassUtils.isAssignable(Short.class, Long.TYPE, true), "short -> long");
assertTrue(ClassUtils.isAssignable(Short.class, Float.TYPE, true), "short -> float");
assertTrue(ClassUtils.isAssignable(Short.class, Double.TYPE, true), "short -> double");
assertFalse(ClassUtils.isAssignable(Short.class, Boolean.TYPE, true), "short -> boolean");
assertTrue(ClassUtils.isAssignable(Character.class, Character.TYPE, true), "char -> char");
assertFalse(ClassUtils.isAssignable(Character.class, Byte.TYPE, true), "char -> byte");
assertFalse(ClassUtils.isAssignable(Character.class, Short.TYPE, true), "char -> short");
assertTrue(ClassUtils.isAssignable(Character.class, Integer.TYPE, true), "char -> int");
assertTrue(ClassUtils.isAssignable(Character.class, Long.TYPE, true), "char -> long");
assertTrue(ClassUtils.isAssignable(Character.class, Float.TYPE, true), "char -> float");
assertTrue(ClassUtils.isAssignable(Character.class, Double.TYPE, true), "char -> double");
assertFalse(ClassUtils.isAssignable(Character.class, Boolean.TYPE, true), "char -> boolean");
assertFalse(ClassUtils.isAssignable(Integer.class, Character.TYPE, true), "int -> char");
assertFalse(ClassUtils.isAssignable(Integer.class, Byte.TYPE, true), "int -> byte");
assertFalse(ClassUtils.isAssignable(Integer.class, Short.TYPE, true), "int -> short");
assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE, true), "int -> int");
assertTrue(ClassUtils.isAssignable(Integer.class, Long.TYPE, true), "int -> long");
assertTrue(ClassUtils.isAssignable(Integer.class, Float.TYPE, true), "int -> float");
assertTrue(ClassUtils.isAssignable(Integer.class, Double.TYPE, true), "int -> double");
assertFalse(ClassUtils.isAssignable(Integer.class, Boolean.TYPE, true), "int -> boolean");
assertFalse(ClassUtils.isAssignable(Long.class, Character.TYPE, true), "long -> char");
assertFalse(ClassUtils.isAssignable(Long.class, Byte.TYPE, true), "long -> byte");
assertFalse(ClassUtils.isAssignable(Long.class, Short.TYPE, true), "long -> short");
assertFalse(ClassUtils.isAssignable(Long.class, Integer.TYPE, true), "long -> int");
assertTrue(ClassUtils.isAssignable(Long.class, Long.TYPE, true), "long -> long");
assertTrue(ClassUtils.isAssignable(Long.class, Float.TYPE, true), "long -> float");
assertTrue(ClassUtils.isAssignable(Long.class, Double.TYPE, true), "long -> double");
assertFalse(ClassUtils.isAssignable(Long.class, Boolean.TYPE, true), "long -> boolean");
assertFalse(ClassUtils.isAssignable(Float.class, Character.TYPE, true), "float -> char");
assertFalse(ClassUtils.isAssignable(Float.class, Byte.TYPE, true), "float -> byte");
assertFalse(ClassUtils.isAssignable(Float.class, Short.TYPE, true), "float -> short");
assertFalse(ClassUtils.isAssignable(Float.class, Integer.TYPE, true), "float -> int");
assertFalse(ClassUtils.isAssignable(Float.class, Long.TYPE, true), "float -> long");
assertTrue(ClassUtils.isAssignable(Float.class, Float.TYPE, true), "float -> float");
assertTrue(ClassUtils.isAssignable(Float.class, Double.TYPE, true), "float -> double");
assertFalse(ClassUtils.isAssignable(Float.class, Boolean.TYPE, true), "float -> boolean");
assertFalse(ClassUtils.isAssignable(Double.class, Character.TYPE, true), "double -> char");
assertFalse(ClassUtils.isAssignable(Double.class, Byte.TYPE, true), "double -> byte");
assertFalse(ClassUtils.isAssignable(Double.class, Short.TYPE, true), "double -> short");
assertFalse(ClassUtils.isAssignable(Double.class, Integer.TYPE, true), "double -> int");
assertFalse(ClassUtils.isAssignable(Double.class, Long.TYPE, true), "double -> long");
assertFalse(ClassUtils.isAssignable(Double.class, Float.TYPE, true), "double -> float");
assertTrue(ClassUtils.isAssignable(Double.class, Double.TYPE, true), "double -> double");
assertFalse(ClassUtils.isAssignable(Double.class, Boolean.TYPE, true), "double -> boolean");
assertFalse(ClassUtils.isAssignable(Boolean.class, Character.TYPE, true), "boolean -> char");
assertFalse(ClassUtils.isAssignable(Boolean.class, Byte.TYPE, true), "boolean -> byte");
assertFalse(ClassUtils.isAssignable(Boolean.class, Short.TYPE, true), "boolean -> short");
assertFalse(ClassUtils.isAssignable(Boolean.class, Integer.TYPE, true), "boolean -> int");
assertFalse(ClassUtils.isAssignable(Boolean.class, Long.TYPE, true), "boolean -> long");
assertFalse(ClassUtils.isAssignable(Boolean.class, Float.TYPE, true), "boolean -> float");
assertFalse(ClassUtils.isAssignable(Boolean.class, Double.TYPE, true), "boolean -> double");
assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true), "boolean -> boolean");
assertFalse(ClassUtils.isAssignable(Byte.TYPE, Character.TYPE), "byte -> char");
assertTrue(ClassUtils.isAssignable(Byte.TYPE, Byte.TYPE), "byte -> byte");
assertTrue(ClassUtils.isAssignable(Byte.TYPE, Short.TYPE), "byte -> short");
assertTrue(ClassUtils.isAssignable(Byte.TYPE, Integer.TYPE), "byte -> int");
assertTrue(ClassUtils.isAssignable(Byte.TYPE, Long.TYPE), "byte -> long");
assertTrue(ClassUtils.isAssignable(Byte.TYPE, Float.TYPE), "byte -> float");
assertTrue(ClassUtils.isAssignable(Byte.TYPE, Double.TYPE), "byte -> double");
assertFalse(ClassUtils.isAssignable(Byte.TYPE, Boolean.TYPE), "byte -> boolean");
assertFalse(ClassUtils.isAssignable(Short.TYPE, Character.TYPE), "short -> char");
assertFalse(ClassUtils.isAssignable(Short.TYPE, Byte.TYPE), "short -> byte");
assertTrue(ClassUtils.isAssignable(Short.TYPE, Short.TYPE), "short -> short");
assertTrue(ClassUtils.isAssignable(Short.TYPE, Integer.TYPE), "short -> int");
assertTrue(ClassUtils.isAssignable(Short.TYPE, Long.TYPE), "short -> long");
assertTrue(ClassUtils.isAssignable(Short.TYPE, Float.TYPE), "short -> float");
assertTrue(ClassUtils.isAssignable(Short.TYPE, Double.TYPE), "short -> double");
assertFalse(ClassUtils.isAssignable(Short.TYPE, Boolean.TYPE), "short -> boolean");
assertTrue(ClassUtils.isAssignable(Character.TYPE, Character.TYPE), "char -> char");
assertFalse(ClassUtils.isAssignable(Character.TYPE, Byte.TYPE), "char -> byte");
assertFalse(ClassUtils.isAssignable(Character.TYPE, Short.TYPE), "char -> short");
assertTrue(ClassUtils.isAssignable(Character.TYPE, Integer.TYPE), "char -> int");
assertTrue(ClassUtils.isAssignable(Character.TYPE, Long.TYPE), "char -> long");
assertTrue(ClassUtils.isAssignable(Character.TYPE, Float.TYPE), "char -> float");
assertTrue(ClassUtils.isAssignable(Character.TYPE, Double.TYPE), "char -> double");
assertFalse(ClassUtils.isAssignable(Character.TYPE, Boolean.TYPE), "char -> boolean");
assertFalse(ClassUtils.isAssignable(Integer.TYPE, Character.TYPE), "int -> char");
assertFalse(ClassUtils.isAssignable(Integer.TYPE, Byte.TYPE), "int -> byte");
assertFalse(ClassUtils.isAssignable(Integer.TYPE, Short.TYPE), "int -> short");
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE), "int -> int");
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Long.TYPE), "int -> long");
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Float.TYPE), "int -> float");
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Double.TYPE), "int -> double");
assertFalse(ClassUtils.isAssignable(Integer.TYPE, Boolean.TYPE), "int -> boolean");
assertFalse(ClassUtils.isAssignable(Long.TYPE, Character.TYPE), "long -> char");
assertFalse(ClassUtils.isAssignable(Long.TYPE, Byte.TYPE), "long -> byte");
assertFalse(ClassUtils.isAssignable(Long.TYPE, Short.TYPE), "long -> short");
assertFalse(ClassUtils.isAssignable(Long.TYPE, Integer.TYPE), "long -> int");
assertTrue(ClassUtils.isAssignable(Long.TYPE, Long.TYPE), "long -> long");
assertTrue(ClassUtils.isAssignable(Long.TYPE, Float.TYPE), "long -> float");
assertTrue(ClassUtils.isAssignable(Long.TYPE, Double.TYPE), "long -> double");
assertFalse(ClassUtils.isAssignable(Long.TYPE, Boolean.TYPE), "long -> boolean");
assertFalse(ClassUtils.isAssignable(Float.TYPE, Character.TYPE), "float -> char");
assertFalse(ClassUtils.isAssignable(Float.TYPE, Byte.TYPE), "float -> byte");
assertFalse(ClassUtils.isAssignable(Float.TYPE, Short.TYPE), "float -> short");
assertFalse(ClassUtils.isAssignable(Float.TYPE, Integer.TYPE), "float -> int");
assertFalse(ClassUtils.isAssignable(Float.TYPE, Long.TYPE), "float -> long");
assertTrue(ClassUtils.isAssignable(Float.TYPE, Float.TYPE), "float -> float");
assertTrue(ClassUtils.isAssignable(Float.TYPE, Double.TYPE), "float -> double");
assertFalse(ClassUtils.isAssignable(Float.TYPE, Boolean.TYPE), "float -> boolean");
assertFalse(ClassUtils.isAssignable(Double.TYPE, Character.TYPE), "double -> char");
assertFalse(ClassUtils.isAssignable(Double.TYPE, Byte.TYPE), "double -> byte");
assertFalse(ClassUtils.isAssignable(Double.TYPE, Short.TYPE), "double -> short");
assertFalse(ClassUtils.isAssignable(Double.TYPE, Integer.TYPE), "double -> int");
assertFalse(ClassUtils.isAssignable(Double.TYPE, Long.TYPE), "double -> long");
assertFalse(ClassUtils.isAssignable(Double.TYPE, Float.TYPE), "double -> float");
assertTrue(ClassUtils.isAssignable(Double.TYPE, Double.TYPE), "double -> double");
assertFalse(ClassUtils.isAssignable(Double.TYPE, Boolean.TYPE), "double -> boolean");
assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Character.TYPE), "boolean -> char");
assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Byte.TYPE), "boolean -> byte");
assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Short.TYPE), "boolean -> short");
assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Integer.TYPE), "boolean -> int");
assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Long.TYPE), "boolean -> long");
assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Float.TYPE), "boolean -> float");
assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Double.TYPE), "boolean -> double");
assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE), "boolean -> boolean");
assertTrue(ClassUtils.isInnerClass(Inner.class));
assertTrue(ClassUtils.isInnerClass(Map.Entry.class));
assertTrue(ClassUtils.isInnerClass(new Cloneable() {// empty}.getClass()));
assertFalse(ClassUtils.isInnerClass(this.getClass()));
assertFalse(ClassUtils.isInnerClass(String.class));
assertFalse(ClassUtils.isInnerClass(null));
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(ClassUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(ClassUtils.class.getModifiers()));
assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers()));
assertTrue((Boolean) isEmptyMethod.invoke(set));
assertFalse(iter.hasNext());
assertFalse(iter.hasNext());
assertTrue(ClassUtils.isPrimitiveOrWrapper(Boolean.class), "Boolean.class");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Byte.class), "Byte.class");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Character.class), "Character.class");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Short.class), "Short.class");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Integer.class), "Integer.class");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Long.class), "Long.class");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Double.class), "Double.class");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Float.class), "Float.class");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Boolean.TYPE), "boolean");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Byte.TYPE), "byte");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Character.TYPE), "char");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Short.TYPE), "short");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Integer.TYPE), "int");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Long.TYPE), "long");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Double.TYPE), "double");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Float.TYPE), "float");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Void.TYPE), "Void.TYPE");
assertFalse(ClassUtils.isPrimitiveOrWrapper(null), "null");
assertFalse(ClassUtils.isPrimitiveOrWrapper(Void.class), "Void.class");
assertFalse(ClassUtils.isPrimitiveOrWrapper(String.class), "String.class");
assertFalse(ClassUtils.isPrimitiveOrWrapper(this.getClass()), "this.getClass()");
assertTrue(ClassUtils.isPrimitiveWrapper(Boolean.class), "Boolean.class");
assertTrue(ClassUtils.isPrimitiveWrapper(Byte.class), "Byte.class");
assertTrue(ClassUtils.isPrimitiveWrapper(Character.class), "Character.class");
assertTrue(ClassUtils.isPrimitiveWrapper(Short.class), "Short.class");
assertTrue(ClassUtils.isPrimitiveWrapper(Integer.class), "Integer.class");
assertTrue(ClassUtils.isPrimitiveWrapper(Long.class), "Long.class");
assertTrue(ClassUtils.isPrimitiveWrapper(Double.class), "Double.class");
assertTrue(ClassUtils.isPrimitiveWrapper(Float.class), "Float.class");
assertFalse(ClassUtils.isPrimitiveWrapper(Boolean.TYPE), "boolean");
assertFalse(ClassUtils.isPrimitiveWrapper(Byte.TYPE), "byte");
assertFalse(ClassUtils.isPrimitiveWrapper(Character.TYPE), "char");
assertFalse(ClassUtils.isPrimitiveWrapper(Short.TYPE), "short");
assertFalse(ClassUtils.isPrimitiveWrapper(Integer.TYPE), "int");
assertFalse(ClassUtils.isPrimitiveWrapper(Long.TYPE), "long");
assertFalse(ClassUtils.isPrimitiveWrapper(Double.TYPE), "double");
assertFalse(ClassUtils.isPrimitiveWrapper(Float.TYPE), "float");
assertFalse(ClassUtils.isPrimitiveWrapper(null), "null");
assertFalse(ClassUtils.isPrimitiveWrapper(Void.class), "Void.class");
assertFalse(ClassUtils.isPrimitiveWrapper(Void.TYPE), "Void.TYPE");
assertFalse(ClassUtils.isPrimitiveWrapper(String.class), "String.class");
assertFalse(ClassUtils.isPrimitiveWrapper(this.getClass()), "this.getClass()");
assertFalse(wrapperCls.isPrimitive(), "Still primitive");
assertFalse(eightFbs.equals(bs), "AND failed to clear bits");
assertTrue(bs.get(3), "AND failed to maintain set bits");
assertFalse(bs.get(i), "Failed to clear extra bits in the receiver BitSet");
assertFalse(eightFbs.equals(bs), "AND failed to clear bits");
assertTrue(bs.get(3), "AND failed to maintain set bits");
assertFalse(bs.get(i), "Failed to clear extra bits in the receiver BitSet");
assertFalse(eightFbs.get(i), "Clear didn't clear bit " + i);
assertTrue(bs.isEmpty(), "Test2: isEmpty() returned incorrect value");
assertFalse(eightFbs.get(7), "Failed to clear bit");
assertTrue(eightFbs.get(i), "Clear cleared incorrect bits");
assertFalse(eightFbs.get(165), "Failed to clear bit");
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(bs.get(i), "Shouldn't have cleared bit " + i);
assertFalse(bs.get(i), "Failed to clear bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(bs.get(i), "Shouldn't have cleared bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(bs.get(i), "Shouldn't have cleared bit " + i);
assertFalse(bs.get(i), "Failed to clear bit " + i);
assertTrue(!bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Failed to clear bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Failed to clear bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(bs.get(i), "Shouldn't have cleared bit " + i);
assertFalse(bs.get(i), "Failed to clear bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(bs.get(i), "Shouldn't have cleared bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(bs.get(i), "Shouldn't have cleared bit " + i);
assertFalse(bs.get(i), "failed to clear bit " + i);
assertTrue(bs.get(i), "Shouldn't have cleared bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(bs.get(2), "Bit got cleared incorrectly ");
assertFalse(eightFbs.get(7), "Failed to clear bit");
assertTrue(eightFbs.get(i), "Clear cleared incorrect bits");
assertFalse(eightFbs.get(165), "Failed to clear bit");
assertFalse(eightFbs.equals(bs), "Different BitSets returned true");
assertFalse(eightFbs.equals(null), "Different BitSets returned true");
assertFalse(eightFbs.equals(new Object()), "Different BitSets returned true");
assertFalse(eightFbs.equals(bs), "Different sized FluentBitSet with higher bit set returned true");
assertTrue(eightFbs.equals(bs), "Different sized FluentBitSet with higher bits not set returned false");
assertFalse(bs.get(8), "Failed to flip bit");
assertTrue(bs.get(9), "Failed to flip bit");
assertTrue(bs.get(10), "Failed to flip bit");
assertTrue(bs.get(8), "Failed to flip bit");
assertFalse(bs.get(9), "Failed to flip bit");
assertFalse(bs.get(10), "Failed to flip bit");
assertTrue(bs.get(128), "Failed to flip bit");
assertTrue(bs.get(i), "Test1: Incorrectly flipped bit" + i);
assertTrue(!bs.get(j), "Test2: Incorrectly flipped bit" + j);
assertTrue(!bs.get(j), "Test3: Incorrectly flipped bit" + j);
assertTrue(!eightFbs.get(7), "Failed to flip bit 7");
assertTrue(eightFbs.get(i), "Flip flipped incorrect bits");
assertTrue(eightFbs.get(127), "Failed to flip bit 127");
assertTrue(!eightFbs.get(127), "Failed to flip bit 127");
assertTrue(!bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(7), "Failed to flip bit 7");
assertTrue(bs.get(8), "Failed to flip bit 8");
assertTrue(bs.get(9), "Failed to flip bit 9");
assertFalse(bs.get(10), "Failed to flip bit 10");
assertTrue(!bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(!bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(7), "Failed to flip bit 7");
assertTrue(bs.get(8), "Failed to flip bit 8");
assertTrue(bs.get(9), "Failed to flip bit 9");
assertFalse(bs.get(10), "Failed to flip bit 10");
assertTrue(bs.get(i), "failed to flip bit " + i);
assertFalse(bs.get(64), "Shouldn't have flipped bit 64");
assertTrue(bs.get(i), "Failed to flip bit " + i);
assertFalse(bs.get(64), "Shouldn't have flipped bit 64");
assertTrue(bs.get(i), "Failed to flip bit " + i);
assertFalse(bs.get(65), "Shouldn't have flipped bit 65");
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(bs.get(7), "Shouldn't have flipped bit 7");
assertFalse(bs.get(8), "Shouldn't have flipped bit 8");
assertTrue(bs.get(9), "Failed to flip bit 9");
assertFalse(bs.get(10), "Failed to flip bit 10");
assertTrue(bs.get(i), "failed to flip bit " + i);
assertFalse(bs.get(72), "Failed to flip bit 72");
assertTrue(bs.get(73), "Failed to flip bit 73");
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(bs.get(110), "Shouldn't have flipped bit 110");
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(bs.get(7), "Shouldn't have flipped bit 7");
assertFalse(bs.get(8), "Shouldn't have flipped bit 8");
assertTrue(bs.get(9), "Failed to flip bit 9");
assertFalse(bs.get(10), "Failed to flip bit 10");
assertTrue(bs.get(i), "failed to flip bit " + i);
assertFalse(bs.get(72), "Failed to flip bit 72");
assertTrue(bs.get(i), "failed to flip bit " + i);
assertFalse(bs.get(110), "Failed to flip bit 110");
assertTrue(bs.get(i), "failed to flip bit " + i);
assertFalse(bs.get(181), "Failed to flip bit 181");
assertTrue(bs.get(i), "failed to flip bit " + i);
assertFalse(bs.get(219), "Shouldn't have flipped bit 219");
assertTrue(bs.get(220), "Shouldn't have flipped bit 220");
assertTrue(!bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(eightFbs.get(99), "Get returned true for index out of range");
assertTrue(eightFbs.get(3), "Get returned false for set value");
assertFalse(bs.get(0), "Get returned true for a non set value");
assertFalse(bs.get(64), "Access greater than size");
assertTrue(bs.get(63), "Test highest bit");
assertFalse(bs.intersects(bs2), "Test1: intersects() returned incorrect value");
assertFalse(bs2.intersects(bs), "Test1: intersects() returned incorrect value");
assertFalse(bs.intersects(bs2), "Test2: intersects() returned incorrect value");
assertFalse(bs2.intersects(bs), "Test2: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2), "Test3: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs), "Test3: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2), "Test4: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs), "Test4: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2), "Test5: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs), "Test5: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2), "Test6: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs), "Test6: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2), "Test7: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs), "Test7: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2), "Test8: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs), "Test8: intersects() returned incorrect value");
assertFalse(bs.intersects(bs2), "Test9: intersects() returned incorrect value");
assertFalse(bs2.intersects(bs), "Test9: intersects() returned incorrect value");
assertFalse(bs.intersects(bs2.bitSet()), "Test1: intersects() returned incorrect value");
assertFalse(bs2.intersects(bs.bitSet()), "Test1: intersects() returned incorrect value");
assertFalse(bs.intersects(bs2.bitSet()), "Test2: intersects() returned incorrect value");
assertFalse(bs2.intersects(bs.bitSet()), "Test2: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2.bitSet()), "Test3: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs.bitSet()), "Test3: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2.bitSet()), "Test4: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs.bitSet()), "Test4: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2.bitSet()), "Test5: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs.bitSet()), "Test5: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2.bitSet()), "Test6: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs.bitSet()), "Test6: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2.bitSet()), "Test7: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs.bitSet()), "Test7: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2.bitSet()), "Test8: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs.bitSet()), "Test8: intersects() returned incorrect value");
assertFalse(bs.intersects(bs2.bitSet()), "Test9: intersects() returned incorrect value");
assertFalse(bs2.intersects(bs.bitSet()), "Test9: intersects() returned incorrect value");
assertTrue(bs.isEmpty(), "Test: isEmpty() returned wrong value");
assertFalse(bs.isEmpty(), "Test0: isEmpty() returned wrong value");
assertFalse(bs.isEmpty(), "Test1: isEmpty() returned wrong value");
assertFalse(bs.isEmpty(), "Test2: isEmpty() returned wrong value");
assertFalse(bs.isEmpty(), "Test3: isEmpty() returned wrong value");
assertFalse(bs.isEmpty(), "Test4: isEmpty() returned wrong value");
assertTrue(bs.get(i), "OR failed to set bits");
assertTrue(bs.get(i), "OR(0) failed to set bits");
assertFalse(bs.get(5), "OR set a bit which should be off");
assertTrue(bs.get(i), "OR failed to set bits");
assertTrue(bs.get(i), "OR(0) failed to set bits");
assertFalse(bs.get(5), "OR set a bit which should be off");
assertTrue(bs.get(i), "OR failed to set bits");
assertTrue(bs.get(i), "OR(0) failed to set bits");
assertFalse(bs.get(5), "OR set a bit which should be off");
assertTrue(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "Failed to set bit " + i);
assertTrue(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "Failed to set bit " + i);
assertFalse(bs.get(64), "Shouldn't have set bit 64");
assertTrue(bs.get(i), "Failed to set bit " + i);
assertFalse(bs.get(64), "Shouldn't have set bit 64");
assertTrue(bs.get(i), "Failed to set bit " + i);
assertFalse(bs.get(65), "Shouldn't have set bit 65");
assertTrue(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "Failed to set bit " + i);
assertTrue(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "Shouldn't have set flipped " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "failed to set bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(255), "Shouldn't have flipped bit 255");
assertFalse(bs.get(2), "Bit got set incorrectly ");
assertTrue(!eightFbs.get(3) && !eightFbs.get(4) && !eightFbs.get(5), "Should have set bits 3, 4, and 5 to false");
assertTrue(eightFbs.get(3) && eightFbs.get(4) && eightFbs.get(5), "Should have set bits 3, 4, and 5 to true");
assertTrue(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "Failed to set bit " + i);
assertTrue(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "Failed to set bit " + i);
assertFalse(bs.get(65), "Shouldn't have set bit 64");
assertTrue(bs.get(i), "Failed to set bit " + i);
assertFalse(bs.get(65), "Shouldn't have set bit 64");
assertTrue(bs.get(i), "Failed to set bit " + i);
assertFalse(bs.get(66), "Shouldn't have set bit 65");
assertTrue(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "Failed to set bit " + i);
assertTrue(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "Shouldn't have set flipped " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "failed to set bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(255), "Shouldn't have flipped bit 255");
assertFalse(bs.get(3), "Bit got set incorrectly ");
assertTrue(bs.get(8), "Failed to set bit");
assertTrue(bs.get(128), "Failed to set bit");
assertTrue(bs.get(i), "Incorrectly set");
assertFalse(bs.get(j), "Incorrectly set bit " + j);
assertFalse(bs.get(j), "Incorrectly set bit " + j);
assertTrue(bs.get(8), "Failed to set bit");
assertTrue(bs.get(128), "Failed to set bit");
assertTrue(bs.get(i), "Incorrectly set");
assertFalse(bs.get(j), "Incorrectly set bit " + j);
assertFalse(bs.get(j), "Incorrectly set bit " + j);
assertFalse(eightFbs.get(5), "Should have set bit 5 to true");
assertTrue(eightFbs.get(5), "Should have set bit 5 to false");
assertTrue(eightFbs.size() >= 129, "Returned incorrect size");
assertTrue(eightFbs.size() >= 129, "Returned incorrect size");
assertFalse(bs.get(i), "XOR failed to clear bits");
assertTrue(bs.get(i), "XOR failed to set bits");
assertTrue(bs.get(i), "XOR(0) failed to set bits");
assertFalse(bs.get(i), "XOR failed to clear bits");
assertTrue(bs.get(i), "XOR failed to set bits");
assertTrue(bs.get(i), "XOR(0) failed to set bits");
assertTrue(cause instanceof SomeException);
assertTrue(cause instanceof SomeException);
assertTrue(cause instanceof SomeException);
assertTrue(cause instanceof SomeException);
assertTrue(cause instanceof SomeException);
assertTrue(cause instanceof SomeException);
assertTrue(cause instanceof SomeException);
assertTrue(cause instanceof SomeException);
assertTrue(co.isClosed());
assertTrue(co.isClosed());
assertTrue(co.isClosed());
assertTrue(co.isClosed());
assertTrue(triple1.compareTo(triple2) < 0);
assertTrue(triple2.compareTo(triple1) > 0);
assertTrue(triple1.compareTo(triple2) < 0);
assertTrue(triple2.compareTo(triple1) > 0);
assertTrue(triple1.compareTo(triple2) < 0);
assertTrue(triple2.compareTo(triple1) > 0);
assertTrue(triple1.compareTo(triple2) < 0);
assertTrue(triple2.compareTo(triple1) > 0);
assertTrue(set.contains(triple2));
assertTrue(triple instanceof ImmutableTriple<?, ?, ?>);
assertTrue(triple2 instanceof ImmutableTriple<?, ?, ?>);
assertTrue(pair1.compareTo(pair2) < 0);
assertTrue(pair2.compareTo(pair1) > 0);
assertTrue(pair1.compareTo(pair2) < 0);
assertTrue(pair2.compareTo(pair1) > 0);
assertTrue(set.contains(pair2));
assertTrue(pair instanceof ImmutablePair<?, ?>);
assertTrue(pair2 instanceof ImmutablePair<?, ?>);
assertTrue(pair1.compareTo(pair2) < 0);
assertTrue(pair2.compareTo(pair1) > 0);
assertTrue(pair1.compareTo(pair2) < 0);
assertTrue(pair2.compareTo(pair1) > 0);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(StringEscapeUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(StringEscapeUtils.class.getModifiers()));
assertTrue(escaped.endsWith("}]"), escaped);
assertTrue(escaped.endsWith("\"valueCode\\\":\\\"\\\"}]"), escaped);
assertTrue(collect.contains("One"));
assertTrue(collect.contains("Two"));
assertTrue(TypeUtils.equals(String.class, new TypeLiteral<String>() {}.value));
assertTrue(TypeUtils.equals(TypeUtils.parameterize(List.class, String.class),new TypeLiteral<List<String>>() {}.value));
assertTrue(TypeUtils.equals(String.class, stringType.getType()));
assertTrue(TypeUtils.equals(TypeUtils.parameterize(List.class, String.class), listOfStringType.getType()));
assertTrue(expected.hasNext());
assertTrue(TypeUtils.equals(md.parameterTypes[i], m.getGenericParameterTypes()[i]));
assertFalse(expected.hasNext());
assertTrue(expected.hasNext());
assertTrue(TypeUtils.equals(md.parameterTypes[i], m.getGenericParameterTypes()[i]));
assertFalse(expected.hasNext());
assertTrue(methodsWithAnnotation[0].getName().endsWith("AnnotatedMethod"));
assertTrue(methodsWithAnnotation[1].getName().endsWith("AnnotatedMethod"));
assertTrue(methodsWithAnnotation[0].getName().endsWith("AnnotatedMethod"));
assertTrue(methodsWithAnnotation[1].getName().endsWith("AnnotatedMethod"));
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(FieldUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(FieldUtils.class.getModifiers()));
assertTrue(fieldUtilsTestAnnotatedFields.contains(annotatedFields.get(0)));
assertTrue(fieldUtilsTestAnnotatedFields.contains(annotatedFields.get(1)));
assertFalse(field.isAccessible());
assertTrue(Modifier.isFinal(field.getModifiers()));
assertFalse(Modifier.isFinal(field.getModifiers()));
assertFalse(field.isAccessible());
assertFalse(field.isAccessible());
assertTrue(Modifier.isFinal(field.getModifiers()));
assertFalse(Modifier.isFinal(field.getModifiers()));
assertFalse(field.isAccessible());
assertFalse(field.isAccessible());
assertTrue(Modifier.isFinal(field.getModifiers()));
assertTrue(Modifier.isFinal(field.getModifiers()));
assertFalse(field.isAccessible());
assertFalse(field.isAccessible());
assertTrue(Modifier.isFinal(field.getModifiers()));
assertTrue(Modifier.isFinal(field.getModifiers()));
assertFalse(field.isAccessible());
assertTrue(exception.getCause() instanceof NoSuchFieldException);
assertTrue(isAssignable,"[" + i1 + ", " + i2 + "]: From "+ String.valueOf(type2) + " to "+ String.valueOf(type1));
assertFalse(isAssignable,"[" + i1 + ", " + i2 + "]: From "+ String.valueOf(type2) + " to "+ String.valueOf(type1));
assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod("m0").getGenericReturnType()));
assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod("m1").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m2").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m3").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m4").getGenericReturnType()));
assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod("m5").getGenericReturnType()));
assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod("m6").getGenericReturnType()));
assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod("m7").getGenericReturnType()));
assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod("m8").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m9").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m10").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m11").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m12").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m13").getGenericReturnType()));
assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod("m14").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m15").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m16").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m17").getGenericReturnType()));
assertTrue(typeVarAssigns.containsKey(treeSetTypeVar));
assertTrue(TypeUtils.equals(expected, actual));
assertTrue(typeVarAssigns.containsKey(treeSetTypeVar),"Type var assigns for Comparable from Integer: " + typeVarAssigns);
assertTrue(typeVarAssigns.containsKey(treeSetTypeVar),"Type var assigns for Comparable from int: " + typeVarAssigns);
assertFalse(typeVarAssigns.containsKey(treeSetTypeVar),"Type var assigns for Collection from List: " + typeVarAssigns);
assertFalse(TypeUtils.isArrayType(types[0]));
assertFalse(TypeUtils.isArrayType(types[1]));
assertFalse(TypeUtils.isArrayType(types[2]));
assertFalse(TypeUtils.isArrayType(types[3]));
assertFalse(TypeUtils.isArrayType(types[4]));
assertFalse(TypeUtils.isArrayType(types[5]));
assertFalse(TypeUtils.isArrayType(types[6]));
assertTrue(TypeUtils.isArrayType(types[7]));
assertTrue(TypeUtils.isArrayType(types[8]));
assertTrue(TypeUtils.isArrayType(types[9]));
assertTrue(TypeUtils.isArrayType(types[10]));
assertTrue(TypeUtils.isArrayType(types[11]));
assertTrue(TypeUtils.isArrayType(types[12]));
assertTrue(TypeUtils.isArrayType(types[13]));
assertTrue(TypeUtils.isArrayType(boolean[].class));
assertTrue(TypeUtils.isArrayType(byte[].class));
assertTrue(TypeUtils.isArrayType(short[].class));
assertTrue(TypeUtils.isArrayType(int[].class));
assertTrue(TypeUtils.isArrayType(char[].class));
assertTrue(TypeUtils.isArrayType(long[].class));
assertTrue(TypeUtils.isArrayType(float[].class));
assertTrue(TypeUtils.isArrayType(double[].class));
assertTrue(TypeUtils.isArrayType(Object[].class));
assertTrue(TypeUtils.isArrayType(String[].class));
assertFalse(TypeUtils.isArrayType(boolean.class));
assertFalse(TypeUtils.isArrayType(byte.class));
assertFalse(TypeUtils.isArrayType(short.class));
assertFalse(TypeUtils.isArrayType(int.class));
assertFalse(TypeUtils.isArrayType(char.class));
assertFalse(TypeUtils.isArrayType(long.class));
assertFalse(TypeUtils.isArrayType(float.class));
assertFalse(TypeUtils.isArrayType(double.class));
assertFalse(TypeUtils.isArrayType(Object.class));
assertFalse(TypeUtils.isArrayType(String.class));
assertTrue(TypeUtils.isAssignable(datType, disType));
assertFalse(TypeUtils.isAssignable(daType, disType));
assertTrue(TypeUtils.isAssignable(uhderType, disType));
assertFalse(TypeUtils.isAssignable(dingType, disType),String.format("type %s not assignable to %s!", dingType, disType));
assertTrue(TypeUtils.isAssignable(testerType, disType));
assertFalse(TypeUtils.isAssignable(tester2Type, disType));
assertFalse(TypeUtils.isAssignable(dat2Type, datType));
assertFalse(TypeUtils.isAssignable(datType, dat2Type));
assertFalse(TypeUtils.isAssignable(dat3Type, datType));
assertTrue(TypeUtils.isAssignable(char.class, double.class));
assertTrue(TypeUtils.isAssignable(byte.class, double.class));
assertTrue(TypeUtils.isAssignable(short.class, double.class));
assertTrue(TypeUtils.isAssignable(int.class, double.class));
assertTrue(TypeUtils.isAssignable(long.class, double.class));
assertTrue(TypeUtils.isAssignable(float.class, double.class));
assertTrue(TypeUtils.isAssignable(int.class, long.class));
assertTrue(TypeUtils.isAssignable(Integer.class, long.class));
assertFalse(TypeUtils.isAssignable(int.class, Long.class));
assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));
assertTrue(TypeUtils.isAssignable(Integer.class, int.class));
assertTrue(TypeUtils.isAssignable(int.class, Integer.class));
assertTrue(TypeUtils.isAssignable(int.class, Number.class));
assertTrue(TypeUtils.isAssignable(int.class, Object.class));
assertTrue(TypeUtils.isAssignable(int.class, intComparableType));
assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));
assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));
assertFalse(TypeUtils.isAssignable(int.class, longComparableType));
assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));
assertFalse(TypeUtils.isAssignable(int[].class, long[].class));
assertTrue(TypeUtils.isAssignable(Integer[].class, caType));
assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));
assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));
assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));
assertTrue(TypeUtils.isAssignable(cClassType, bClassType));
assertTrue(TypeUtils.isAssignable(dClassType, bClassType));
assertTrue(TypeUtils.isAssignable(eClassType, bClassType));
assertTrue(TypeUtils.isAssignable(fClassType, bClassType));
assertTrue(TypeUtils.isAssignable(dClassType, cClassType));
assertTrue(TypeUtils.isAssignable(eClassType, cClassType));
assertTrue(TypeUtils.isAssignable(fClassType, cClassType));
assertTrue(TypeUtils.isAssignable(eClassType, dClassType));
assertTrue(TypeUtils.isAssignable(fClassType, dClassType));
assertTrue(TypeUtils.isAssignable(fClassType, eClassType));
assertFalse(testUnassignableClass.isAssignableFrom(paramType.getClass()));
assertFalse(paramType.getClass().isAssignableFrom(testUnassignableClass));
assertFalse(TypeUtils.isAssignable(arrayType, paramType),() -> String.format("TypeUtils.isAssignable(%s, %s)", arrayType, paramType));
assertFalse(TypeUtils.isAssignable(paramType, arrayType),() -> String.format("TypeUtils.isAssignable(%s, %s)", paramType, arrayType));
assertFalse(GenericArrayType.class.isAssignableFrom(paramType.getClass()));
assertFalse(paramType.getClass().isAssignableFrom(GenericArrayType.class));
assertFalse(TypeUtils.isAssignable(paramType, testType),() -> String.format("TypeUtils.isAssignable(%s, %s)", paramType, testType));
assertFalse(TypeUtils.isAssignable(testType, paramType),() -> String.format("TypeUtils.isAssignable(%s, %s)", testType, paramType));
assertFalse(WildcardType.class.isAssignableFrom(paramType.getClass()));
assertFalse(paramType.getClass().isAssignableFrom(WildcardType.class));
assertFalse(TypeUtils.isAssignable(paramType, testType),() -> String.format("TypeUtils.isAssignable(%s, %s)", paramType, testType));
assertFalse(TypeUtils.isAssignable(testType, paramType),() -> String.format("TypeUtils.isAssignable(%s, %s)", testType, paramType));
assertTrue(Object.class.isAssignableFrom(paramType.getClass()));
assertFalse(paramType.getClass().isAssignableFrom(Object.class));
assertTrue(TypeUtils.isAssignable(paramType, testType),() -> String.format("TypeUtils.isAssignable(%s, %s)", paramType, testType));
assertFalse(TypeUtils.isAssignable(testType, paramType),() -> String.format("TypeUtils.isAssignable(%s, %s)", testType, paramType));
assertTrue(TypeUtils.isInstance(1, intComparableType));
assertFalse(TypeUtils.isInstance(1, uriComparableType));
assertFalse(TypeUtils.equals(wildcardType, nonWildcardType));
assertFalse(TypeUtils.equals(nonWildcardType, wildcardType));
assertTrue(TypeUtils.isAssignable(fromType, failingToType));
assertTrue(TypeUtils.equals(getClass().getField("stringComparable").getGenericType(),stringComparableType));
assertTrue(TypeUtils.equals(getClass().getField("dat2").getGenericType(), dat2Type));
assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));
assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));
assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));
assertTrue(TypeUtils.equals(TypeUtils.WILDCARD_ALL, unbounded));
assertTrue(TypeUtils.equals(((ParameterizedType) cClass.getGenericType()).getActualTypeArguments()[0],simpleWildcard));
assertTrue(TypeUtils.equals(t, TypeUtils.wrap(t).getType()));
assertFalse(Modifier.isPublic(CharRange.class.getModifiers()));
assertTrue(Modifier.isFinal(CharRange.class.getModifiers()));
assertFalse(rangea.isNegated());
assertTrue(rangea.isNegated());
assertFalse(rangea.isNegated());
assertFalse(rangea.isNegated());
assertFalse(rangea.isNegated());
assertTrue(rangea.isNegated());
assertTrue(rangea.isNegated());
assertTrue(rangea.isNegated());
assertFalse(range.contains('b'));
assertTrue(range.contains('c'));
assertFalse(range.contains('d'));
assertFalse(range.contains('e'));
assertFalse(range.contains('b'));
assertTrue(range.contains('c'));
assertTrue(range.contains('d'));
assertFalse(range.contains('e'));
assertFalse(range.contains('b'));
assertTrue(range.contains('c'));
assertTrue(range.contains('d'));
assertFalse(range.contains('e'));
assertTrue(range.contains('b'));
assertFalse(range.contains('c'));
assertFalse(range.contains('d'));
assertTrue(range.contains('e'));
assertTrue(range.contains((char) 0));
assertTrue(range.contains(Character.MAX_VALUE));
assertFalse(c.contains(b));
assertTrue(c.contains(c));
assertTrue(c.contains(c2));
assertFalse(c.contains(d));
assertFalse(c.contains(cd));
assertFalse(c.contains(bd));
assertFalse(c.contains(bc));
assertFalse(c.contains(ab));
assertFalse(c.contains(de));
assertTrue(cd.contains(c));
assertTrue(bd.contains(c));
assertTrue(bc.contains(c));
assertFalse(ab.contains(c));
assertFalse(de.contains(c));
assertTrue(ae.contains(b));
assertTrue(ae.contains(ab));
assertTrue(ae.contains(bc));
assertTrue(ae.contains(cd));
assertTrue(ae.contains(de));
assertFalse(c.contains(notc));
assertFalse(c.contains(notbd));
assertTrue(all.contains(notc));
assertTrue(all.contains(notbd));
assertFalse(allbutfirst.contains(notc));
assertFalse(allbutfirst.contains(notbd));
assertTrue(notc.contains(a));
assertTrue(notc.contains(b));
assertFalse(notc.contains(c));
assertTrue(notc.contains(d));
assertTrue(notc.contains(e));
assertTrue(notc.contains(ab));
assertFalse(notc.contains(bc));
assertFalse(notc.contains(bd));
assertFalse(notc.contains(cd));
assertTrue(notc.contains(de));
assertFalse(notc.contains(ae));
assertFalse(notc.contains(all));
assertFalse(notc.contains(allbutfirst));
assertTrue(notbd.contains(a));
assertFalse(notbd.contains(b));
assertFalse(notbd.contains(c));
assertFalse(notbd.contains(d));
assertTrue(notbd.contains(e));
assertTrue(notcd.contains(ab));
assertFalse(notcd.contains(bc));
assertFalse(notcd.contains(bd));
assertFalse(notcd.contains(cd));
assertFalse(notcd.contains(de));
assertFalse(notcd.contains(ae));
assertTrue(notcd.contains(ef));
assertFalse(notcd.contains(all));
assertFalse(notcd.contains(allbutfirst));
assertFalse(notc.contains(notb));
assertTrue(notc.contains(notc));
assertFalse(notc.contains(notd));
assertFalse(notc.contains(notab));
assertTrue(notc.contains(notbc));
assertTrue(notc.contains(notbd));
assertTrue(notc.contains(notcd));
assertFalse(notc.contains(notde));
assertFalse(notbd.contains(notb));
assertFalse(notbd.contains(notc));
assertFalse(notbd.contains(notd));
assertFalse(notbd.contains(notab));
assertFalse(notbd.contains(notbc));
assertTrue(notbd.contains(notbd));
assertFalse(notbd.contains(notcd));
assertFalse(notbd.contains(notde));
assertTrue(notbd.contains(notae));
assertTrue(aIt.hasNext());
assertFalse(aIt.hasNext());
assertTrue(adIt.hasNext());
assertFalse(adIt.hasNext());
assertTrue(notaIt.hasNext());
assertFalse(emptySetIt.hasNext());
assertTrue(notFirstIt.hasNext());
assertFalse(notFirstIt.hasNext());
assertTrue(notLastIt.hasNext());
assertFalse(notLastIt.hasNext());
assertFalse(MethodInvokers.asFailableSupplier(getMethodForStaticGetString()).toString().isEmpty());
assertFalse(supplier.toString().isEmpty());
assertFalse(supplier.toString().isEmpty());
assertTrue(aBool.get());
assertFalse(aBool.get());
assertTrue(aBool1.get());
assertTrue(aBool2.get());
assertFalse(aBool1.get());
assertFalse(aBool2.get());
assertFalse(aBool2.get(), "Second consumer should not be invoked");
assertFalse(MethodInvokers.asBiFunction(getMethodForGetString1Arg()).toString().isEmpty());
assertTrue(func.applyAsBoolean("1", 1));
assertFalse(MethodInvokers.asFunction(getMethodForGetString()).toString().isEmpty());
assertTrue(cause instanceof SomeException);
assertTrue(cause instanceof SomeException);
assertTrue(cause instanceof SomeException);
assertTrue(cause instanceof SomeException);
assertTrue(predicate.test(null, null));
assertTrue(FailableBiPredicate.TRUE.and(FailableBiPredicate.TRUE).test(null, null));
assertFalse(FailableBiPredicate.TRUE.and(FailableBiPredicate.FALSE).test(null, null));
assertFalse(FailableBiPredicate.FALSE.and(FailableBiPredicate.TRUE).test(null, null));
assertFalse(FailableBiPredicate.FALSE.and(FailableBiPredicate.FALSE).test(null, null));
assertThrows(NullPointerException.class,() -> assertFalse(FailableBiPredicate.falsePredicate().and(null).test(null, null)));
assertThrows(NullPointerException.class,() -> assertTrue(FailableBiPredicate.truePredicate().and(null).test(null, null)));
assertFalse(FailableBiPredicate.TRUE.negate().test(null, null));
assertFalse(FailableBiPredicate.truePredicate().negate().test(null, null));
assertTrue(FailableBiPredicate.FALSE.negate().test(null, null));
assertTrue(FailableBiPredicate.falsePredicate().negate().test(null, null));
assertTrue(FailableBiPredicate.TRUE.or(FailableBiPredicate.TRUE).test(null, null));
assertTrue(FailableBiPredicate.TRUE.or(FailableBiPredicate.FALSE).test(null, null));
assertTrue(FailableBiPredicate.FALSE.or(FailableBiPredicate.TRUE).test(null, null));
assertFalse(FailableBiPredicate.FALSE.or(FailableBiPredicate.FALSE).test(null, null));
assertThrows(NullPointerException.class,() -> assertFalse(FailableBiPredicate.falsePredicate().or(null).test(null, null)));
assertThrows(NullPointerException.class,() -> assertTrue(FailableBiPredicate.truePredicate().or(null).test(null, null)));
assertTrue(cause instanceof SomeException);
assertTrue(FailableDoublePredicate.TRUE.and(FailableDoublePredicate.TRUE).test(0));
assertFalse(FailableDoublePredicate.TRUE.and(FailableDoublePredicate.FALSE).test(0));
assertFalse(FailableDoublePredicate.FALSE.and(FailableDoublePredicate.TRUE).test(0));
assertFalse(FailableDoublePredicate.FALSE.and(FailableDoublePredicate.FALSE).test(0));
assertThrows(NullPointerException.class,() -> assertFalse(FailableDoublePredicate.falsePredicate().and(null).test(0)));
assertThrows(NullPointerException.class,() -> assertTrue(FailableDoublePredicate.truePredicate().and(null).test(0)));
assertFalse(FailableDoublePredicate.TRUE.negate().test(0d));
assertFalse(FailableDoublePredicate.truePredicate().negate().test(0d));
assertTrue(FailableDoublePredicate.FALSE.negate().test(0d));
assertTrue(FailableDoublePredicate.falsePredicate().negate().test(0d));
assertTrue(FailableDoublePredicate.TRUE.or(FailableDoublePredicate.TRUE).test(0));
assertTrue(FailableDoublePredicate.TRUE.or(FailableDoublePredicate.FALSE).test(0));
assertTrue(FailableDoublePredicate.FALSE.or(FailableDoublePredicate.TRUE).test(0));
assertFalse(FailableDoublePredicate.FALSE.or(FailableDoublePredicate.FALSE).test(0));
assertThrows(NullPointerException.class,() -> assertFalse(FailableDoublePredicate.falsePredicate().or(null).test(0)));
assertThrows(NullPointerException.class,() -> assertTrue(FailableDoublePredicate.truePredicate().or(null).test(0)));
assertFalse(Failable.getAsBoolean(testable::testAsBooleanPrimitive));
assertTrue(cause instanceof SomeException);
assertTrue(FailableIntPredicate.TRUE.and(FailableIntPredicate.TRUE).test(0));
assertFalse(FailableIntPredicate.TRUE.and(FailableIntPredicate.FALSE).test(0));
assertFalse(FailableIntPredicate.FALSE.and(FailableIntPredicate.TRUE).test(0));
assertFalse(FailableIntPredicate.FALSE.and(FailableIntPredicate.FALSE).test(0));
assertThrows(NullPointerException.class,() -> assertFalse(FailableIntPredicate.falsePredicate().and(null).test(0)));
assertThrows(NullPointerException.class,() -> assertTrue(FailableIntPredicate.truePredicate().and(null).test(0)));
assertFalse(FailableIntPredicate.TRUE.negate().test(0));
assertFalse(FailableIntPredicate.truePredicate().negate().test(0));
assertTrue(FailableIntPredicate.FALSE.negate().test(0));
assertTrue(FailableIntPredicate.falsePredicate().negate().test(0));
assertTrue(FailableIntPredicate.TRUE.or(FailableIntPredicate.TRUE).test(0));
assertTrue(FailableIntPredicate.TRUE.or(FailableIntPredicate.FALSE).test(0));
assertTrue(FailableIntPredicate.FALSE.or(FailableIntPredicate.TRUE).test(0));
assertFalse(FailableIntPredicate.FALSE.or(FailableIntPredicate.FALSE).test(0));
assertThrows(NullPointerException.class,() -> assertFalse(FailableIntPredicate.falsePredicate().or(null).test(0)));
assertThrows(NullPointerException.class,() -> assertTrue(FailableIntPredicate.truePredicate().or(null).test(0)));
assertTrue(FailableLongPredicate.TRUE.and(FailableLongPredicate.TRUE).test(0));
assertFalse(FailableLongPredicate.TRUE.and(FailableLongPredicate.FALSE).test(0));
assertFalse(FailableLongPredicate.FALSE.and(FailableLongPredicate.TRUE).test(0));
assertFalse(FailableLongPredicate.FALSE.and(FailableLongPredicate.FALSE).test(0));
assertThrows(NullPointerException.class, () -> assertFalse(FailableLongPredicate.falsePredicate().and(null).test(0)));
assertThrows(NullPointerException.class, () -> assertTrue(FailableLongPredicate.truePredicate().and(null).test(0)));
assertFalse(FailableLongPredicate.TRUE.negate().test(0L));
assertFalse(FailableLongPredicate.truePredicate().negate().test(0L));
assertTrue(FailableLongPredicate.FALSE.negate().test(0L));
assertTrue(FailableLongPredicate.falsePredicate().negate().test(0L));
assertTrue(FailableLongPredicate.TRUE.or(FailableLongPredicate.TRUE).test(0));
assertTrue(FailableLongPredicate.TRUE.or(FailableLongPredicate.FALSE).test(0));
assertTrue(FailableLongPredicate.FALSE.or(FailableLongPredicate.TRUE).test(0));
assertFalse(FailableLongPredicate.FALSE.or(FailableLongPredicate.FALSE).test(0));
assertThrows(NullPointerException.class, () -> assertFalse(FailableLongPredicate.falsePredicate().or(null).test(0)));
assertThrows(NullPointerException.class, () -> assertTrue(FailableLongPredicate.truePredicate().or(null).test(0)));
assertTrue(cause instanceof SomeException);
assertTrue(FailablePredicate.TRUE.and(FailablePredicate.TRUE).test(null));
assertFalse(FailablePredicate.TRUE.and(FailablePredicate.FALSE).test(null));
assertFalse(FailablePredicate.FALSE.and(FailablePredicate.TRUE).test(null));
assertFalse(FailablePredicate.FALSE.and(FailablePredicate.FALSE).test(null));
assertThrows(NullPointerException.class, () -> assertFalse(FailablePredicate.FALSE.and(null).test(null)));
assertThrows(NullPointerException.class, () -> assertTrue(FailablePredicate.TRUE.and(null).test(null)));
assertTrue(FailablePredicate.TRUE.or(FailablePredicate.TRUE).test(null));
assertTrue(FailablePredicate.TRUE.or(FailablePredicate.FALSE).test(null));
assertTrue(FailablePredicate.FALSE.or(FailablePredicate.TRUE).test(null));
assertFalse(FailablePredicate.FALSE.or(FailablePredicate.FALSE).test(null));
assertThrows(NullPointerException.class, () -> assertFalse(FailablePredicate.FALSE.or(null).test(null)));
assertThrows(NullPointerException.class, () -> assertTrue(FailablePredicate.TRUE.or(null).test(null)));
assertFalse(FailablePredicate.TRUE.negate().test(null));
assertFalse(FailablePredicate.truePredicate().negate().test(null));
assertTrue(FailablePredicate.FALSE.negate().test(null));
assertTrue(FailablePredicate.falsePredicate().negate().test(null));
assertTrue(cause instanceof SomeException);
assertTrue(closeable.isClosed());
assertTrue(closeable.isClosed());
assertTrue(closeable.isClosed());
assertTrue(closeable.isClosed());
assertFalse(MethodInvokers.asFailableBiFunction(getMethodForGetString1ArgChecked()).toString().isEmpty());
assertFalse(MethodInvokers.asFailableBiConsumer(getMethodForSetString1Arg()).toString().isEmpty());
assertFalse(MethodInvokers.asFailableFunction(getMethodForGetString()).toString().isEmpty());
assertFalse(supplier.isInvoked());
assertTrue(supplier.isInvoked());
assertTrue(supplier2.isInvoked());
assertTrue(supplier4.isInvoked());
assertFalse(supplier.isInvoked());
assertTrue(supplier.isInvoked());
assertFalse(biConsumer.toString().isEmpty());
assertFalse(biConsumer.toString().isEmpty());
assertFalse(bf_multi.isSet(0));
assertFalse(bf_zero.isSet(0));
assertTrue(bf_multi.isSet(j));
assertFalse(bf_zero.isSet(j));
assertFalse(bf_single.isSet(0));
assertTrue(bf_single.isSet(0x4000));
assertFalse(bf_multi.isAllSet(j));
assertTrue(bf_zero.isAllSet(j));
assertTrue(bf_multi.isAllSet(0x3F80));
assertFalse(bf_single.isAllSet(0));
assertTrue(bf_single.isAllSet(0x4000));
assertFalse(new BitField(0x40).isSet(clearedBit));
assertTrue(f1.compareTo(f2) > 0);
assertTrue(f1.compareTo(f2) < 0);
assertTrue(f1.compareTo(f2) > 0);
assertTrue(f1.hashCode() != f2.hashCode());
assertTrue(f1.hashCode() != f2.hashCode());
assertTrue(NumberUtils.compare((byte) -3, (byte) 0) < 0);
assertTrue(NumberUtils.compare((byte) 123, (byte) 32) > 0);
assertTrue(NumberUtils.compare(-3, 0) < 0);
assertTrue(NumberUtils.compare(213, 32) > 0);
assertTrue(isValid == expected && canCreate == expected, "Expecting " + expected+ " for isCreatable/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
assertTrue(isValid == expected && canCreate == expected, "Expecting " + expected+ " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
assertTrue(NumberUtils.compare(-3L, 0L) < 0);
assertTrue(NumberUtils.compare(213L, 32L) > 0);
assertTrue(NumberUtils.compare((short) -3, (short) 0) < 0);
assertTrue(NumberUtils.compare((short) 213, (short) 32) > 0);
assertTrue(NumberUtils.LONG_ZERO instanceof Long);
assertTrue(NumberUtils.LONG_ONE instanceof Long);
assertTrue(NumberUtils.LONG_MINUS_ONE instanceof Long);
assertTrue(NumberUtils.INTEGER_ZERO instanceof Integer);
assertTrue(NumberUtils.INTEGER_ONE instanceof Integer);
assertTrue(NumberUtils.INTEGER_MINUS_ONE instanceof Integer);
assertTrue(NumberUtils.SHORT_ZERO instanceof Short);
assertTrue(NumberUtils.SHORT_ONE instanceof Short);
assertTrue(NumberUtils.SHORT_MINUS_ONE instanceof Short);
assertTrue(NumberUtils.BYTE_ZERO instanceof Byte);
assertTrue(NumberUtils.BYTE_ONE instanceof Byte);
assertTrue(NumberUtils.BYTE_MINUS_ONE instanceof Byte);
assertTrue(NumberUtils.DOUBLE_ZERO instanceof Double);
assertTrue(NumberUtils.DOUBLE_ONE instanceof Double);
assertTrue(NumberUtils.DOUBLE_MINUS_ONE instanceof Double);
assertTrue(NumberUtils.FLOAT_ZERO instanceof Float);
assertTrue(NumberUtils.FLOAT_ONE instanceof Float);
assertTrue(NumberUtils.FLOAT_MINUS_ONE instanceof Float);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(NumberUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(NumberUtils.class.getModifiers()));
assertFalse(checkCreateNumber("1eE"), "createNumber(String) succeeded");
assertFalse(NumberUtils.isDigits(null), "isDigits(null) failed");
assertFalse(NumberUtils.isDigits(""), "isDigits('') failed");
assertTrue(NumberUtils.isDigits("12345"), "isDigits(String) failed");
assertFalse(NumberUtils.isDigits("1234.5"), "isDigits(String) neg 1 failed");
assertFalse(NumberUtils.isDigits("1ab"), "isDigits(String) neg 3 failed");
assertFalse(NumberUtils.isDigits("abc"), "isDigits(String) neg 4 failed");
assertFalse(NumberUtils.isParsable(null));
assertFalse(NumberUtils.isParsable(""));
assertFalse(NumberUtils.isParsable("0xC1AB"));
assertFalse(NumberUtils.isParsable("65CBA2"));
assertFalse(NumberUtils.isParsable("pendro"));
assertFalse(NumberUtils.isParsable("64, 2"));
assertFalse(NumberUtils.isParsable("64.2.2"));
assertFalse(NumberUtils.isParsable("64."));
assertFalse(NumberUtils.isParsable("64L"));
assertFalse(NumberUtils.isParsable("-"));
assertFalse(NumberUtils.isParsable("--2"));
assertTrue(NumberUtils.isParsable("64.2"));
assertTrue(NumberUtils.isParsable("64"));
assertTrue(NumberUtils.isParsable("018"));
assertTrue(NumberUtils.isParsable(".18"));
assertTrue(NumberUtils.isParsable("-65"));
assertTrue(NumberUtils.isParsable("-018"));
assertTrue(NumberUtils.isParsable("-018.2"));
assertTrue(NumberUtils.isParsable("-.236"));
assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN)));
assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN)));
assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN)));
assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN)));
assertTrue(Double.isNaN(NumberUtils.max(a)));
assertTrue(Double.isNaN(NumberUtils.min(a)));
assertTrue(Double.isNaN(NumberUtils.max(b)));
assertTrue(Double.isNaN(NumberUtils.min(b)));
assertTrue(Float.isNaN(NumberUtils.max(aF)));
assertTrue(Float.isNaN(NumberUtils.max(bF)));
assertTrue(NumberUtils.createNumber(shouldBeFloat) instanceof Float);
assertTrue(NumberUtils.createNumber(shouldBeDouble) instanceof Double);
assertTrue(NumberUtils.createNumber(shouldBeBigDecimal) instanceof BigDecimal);
assertTrue(NumberUtils.createNumber("001.12") instanceof Float);
assertTrue(NumberUtils.createNumber("-001.12") instanceof Float);
assertTrue(NumberUtils.createNumber("+001.12") instanceof Float);
assertTrue(NumberUtils.createNumber("003.40282354e+38") instanceof Double);
assertTrue(NumberUtils.createNumber("-003.40282354e+38") instanceof Double);
assertTrue(NumberUtils.createNumber("+003.40282354e+38") instanceof Double);
assertTrue(NumberUtils.createNumber("0001.797693134862315759e+308") instanceof BigDecimal);
assertTrue(NumberUtils.createNumber("-001.797693134862315759e+308") instanceof BigDecimal);
assertTrue(NumberUtils.createNumber("+001.797693134862315759e+308") instanceof BigDecimal);
assertTrue(NumberUtils.createNumber(Double.toString(Double.MIN_NORMAL)) instanceof Double);
assertTrue(NumberUtils.createNumber(Double.toString(Double.MIN_NORMAL) + "D") instanceof Double);
assertTrue(NumberUtils.createNumber(Double.toString(Double.MIN_NORMAL) + "F") instanceof Double);
assertTrue(NumberUtils.createNumber(Double.toString(Double.MIN_VALUE)) instanceof Double);
assertTrue(NumberUtils.createNumber(Double.toString(Double.MIN_VALUE) + "D") instanceof Double);
assertTrue(NumberUtils.createNumber(Double.toString(Double.MIN_VALUE) + "F") instanceof Double);
assertTrue(NumberUtils.createNumber(Double.toString(Double.MAX_VALUE)) instanceof Double);
assertTrue(NumberUtils.createNumber(Double.toString(Double.MAX_VALUE) + "D") instanceof Double);
assertTrue(NumberUtils.createNumber(Double.toString(Double.MAX_VALUE) + "F") instanceof Double);
assertTrue(NumberUtils.createNumber("4.9e-324D") instanceof Double);
assertTrue(NumberUtils.createNumber("4.9e-324F") instanceof Double);
assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN)));
assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN)));
assertTrue(StringUtils.isEmpty(null));
assertTrue(StringUtils.isEmpty(""));
assertFalse(StringUtils.isEmpty(" "));
assertFalse(StringUtils.isEmpty("foo"));
assertFalse(StringUtils.isEmpty("  foo  "));
assertFalse(StringUtils.isNotEmpty(null));
assertFalse(StringUtils.isNotEmpty(""));
assertTrue(StringUtils.isNotEmpty(" "));
assertTrue(StringUtils.isNotEmpty("foo"));
assertTrue(StringUtils.isNotEmpty("  foo  "));
assertTrue(StringUtils.isAnyEmpty((String) null));
assertFalse(StringUtils.isAnyEmpty((String[]) null));
assertTrue(StringUtils.isAnyEmpty(null, "foo"));
assertTrue(StringUtils.isAnyEmpty("", "bar"));
assertTrue(StringUtils.isAnyEmpty("bob", ""));
assertTrue(StringUtils.isAnyEmpty("  bob  ", null));
assertFalse(StringUtils.isAnyEmpty(" ", "bar"));
assertFalse(StringUtils.isAnyEmpty("foo", "bar"));
assertFalse(StringUtils.isNoneEmpty((String) null));
assertTrue(StringUtils.isNoneEmpty((String[]) null));
assertFalse(StringUtils.isNoneEmpty(null, "foo"));
assertFalse(StringUtils.isNoneEmpty("", "bar"));
assertFalse(StringUtils.isNoneEmpty("bob", ""));
assertFalse(StringUtils.isNoneEmpty("  bob  ", null));
assertTrue(StringUtils.isNoneEmpty(" ", "bar"));
assertTrue(StringUtils.isNoneEmpty("foo", "bar"));
assertTrue(StringUtils.isAllEmpty());
assertTrue(StringUtils.isAllEmpty());
assertTrue(StringUtils.isAllEmpty((String) null));
assertTrue(StringUtils.isAllEmpty((String[]) null));
assertFalse(StringUtils.isAllEmpty(null, "foo"));
assertFalse(StringUtils.isAllEmpty("", "bar"));
assertFalse(StringUtils.isAllEmpty("bob", ""));
assertFalse(StringUtils.isAllEmpty("  bob  ", null));
assertFalse(StringUtils.isAllEmpty(" ", "bar"));
assertFalse(StringUtils.isAllEmpty("foo", "bar"));
assertTrue(StringUtils.isAllEmpty("", null));
assertTrue(StringUtils.isBlank(null));
assertTrue(StringUtils.isBlank(""));
assertTrue(StringUtils.isBlank(StringUtilsTest.WHITESPACE));
assertFalse(StringUtils.isBlank("foo"));
assertFalse(StringUtils.isBlank("  foo  "));
assertFalse(StringUtils.isNotBlank(null));
assertFalse(StringUtils.isNotBlank(""));
assertFalse(StringUtils.isNotBlank(StringUtilsTest.WHITESPACE));
assertTrue(StringUtils.isNotBlank("foo"));
assertTrue(StringUtils.isNotBlank("  foo  "));
assertTrue(StringUtils.isAnyBlank((String) null));
assertFalse(StringUtils.isAnyBlank((String[]) null));
assertTrue(StringUtils.isAnyBlank(null, "foo"));
assertTrue(StringUtils.isAnyBlank(null, null));
assertTrue(StringUtils.isAnyBlank("", "bar"));
assertTrue(StringUtils.isAnyBlank("bob", ""));
assertTrue(StringUtils.isAnyBlank("  bob  ", null));
assertTrue(StringUtils.isAnyBlank(" ", "bar"));
assertFalse(StringUtils.isAnyBlank("foo", "bar"));
assertFalse(StringUtils.isNoneBlank((String) null));
assertTrue(StringUtils.isNoneBlank((String[]) null));
assertFalse(StringUtils.isNoneBlank(null, "foo"));
assertFalse(StringUtils.isNoneBlank(null, null));
assertFalse(StringUtils.isNoneBlank("", "bar"));
assertFalse(StringUtils.isNoneBlank("bob", ""));
assertFalse(StringUtils.isNoneBlank("  bob  ", null));
assertFalse(StringUtils.isNoneBlank(" ", "bar"));
assertTrue(StringUtils.isNoneBlank("foo", "bar"));
assertTrue(StringUtils.isAllBlank((String) null));
assertTrue(StringUtils.isAllBlank((String[]) null));
assertTrue(StringUtils.isAllBlank(null, null));
assertTrue(StringUtils.isAllBlank(null, " "));
assertFalse(StringUtils.isAllBlank(null, "foo"));
assertFalse(StringUtils.isAllBlank("", "bar"));
assertFalse(StringUtils.isAllBlank("bob", ""));
assertFalse(StringUtils.isAllBlank("  bob  ", null));
assertFalse(StringUtils.isAllBlank(" ", "bar"));
assertFalse(StringUtils.isAllBlank("foo", "bar"));
assertFalse(shouldFail, "Expected SDF failure, but got " + dsdf + " for [" + format + ", " + date + "]");
assertFalse(shouldFail, "Expected FDF failure, but got " + dfdp + " for [" + format + ", " + date + "]");
assertTrue(parser.toString().startsWith("FastDate"));
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(DurationFormatUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(DurationFormatUtils.class.getModifiers()));
assertTrue(printer.toString().startsWith("FastDate"));
assertFalse(watch.isStarted());
assertFalse(watch.isSuspended());
assertTrue(watch.isStopped());
assertTrue(watch.isStarted());
assertFalse(watch.isSuspended());
assertFalse(watch.isStopped());
assertTrue(watch.isStarted());
assertTrue(watch.isSuspended());
assertFalse(watch.isStopped());
assertFalse(watch.isStarted());
assertFalse(watch.isSuspended());
assertTrue(watch.isStopped());
assertTrue(formatSplitTime.startsWith(ZERO_HOURS_PREFIX));
assertFalse(formatSplitTime.startsWith(MESSAGE), formatSplitTime);
assertTrue(formatSplitTime.startsWith(ZERO_HOURS_PREFIX));
assertTrue(formatTime.startsWith(ZERO_HOURS_PREFIX));
assertFalse(formatTime.startsWith(MESSAGE), formatTime);
assertTrue(watch.getStartTime() >= beforeStopWatchMillis);
assertTrue(stopWatch.toString().startsWith(MESSAGE));
assertTrue(stopWatch.toSplitString().startsWith(MESSAGE));
assertTrue(stopTime >= testStartMillis);
assertTrue(stopTime <= testEndMillis);
assertTrue(time >= 500);
assertTrue(time < 700);
assertTrue(watch.getTime() < 2000);
assertTrue(splitTime >= 500);
assertTrue(splitTime < 700);
assertTrue(totalTime >= 1500);
assertTrue(totalTime < 1900);
assertTrue(watch.isStarted());
assertTrue(testStartMillis <= stopTime);
assertTrue(testSuspendMillis <= stopTime);
assertTrue(suspendTime >= 500);
assertTrue(suspendTime < 700);
assertTrue(totalTime >= 1000);
assertTrue(totalTime < 1300);
assertTrue(new StopWatch(MESSAGE).toString().startsWith(MESSAGE));
private static void assertCalendarsEquals(final String message, final Calendar cal1, final Calendar cal2, final long delta) {assertFalse(Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta,message + " expected " + cal1.getTime() + " but got " + cal2.getTime());
assertFalse(count % 7 != 0, "There were " + count + " days in this iterator");
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(DateUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(DateUtils.class.getModifiers()));
assertTrue(DateUtils.isSameDay(cala, calb));
assertFalse(DateUtils.isSameDay(cala, calb));
assertTrue(DateUtils.isSameDay(cala, calb));
assertFalse(DateUtils.isSameDay(cala, calb));
assertTrue(DateUtils.isSameDay(datea, dateb));
assertFalse(DateUtils.isSameDay(datea, dateb));
assertTrue(DateUtils.isSameDay(datea, dateb));
assertFalse(DateUtils.isSameDay(datea, dateb));
assertFalse(DateUtils.isSameInstant(cala, calb));
assertTrue(DateUtils.isSameInstant(cala, calb));
assertTrue(DateUtils.isSameInstant(datea, dateb));
assertFalse(DateUtils.isSameInstant(datea, dateb));
assertTrue(DateUtils.isSameInstant(datea, dateb));
assertFalse(DateUtils.isSameInstant(datea, dateb));
assertTrue(DateUtils.isSameLocalTime(cala, calb));
assertFalse(DateUtils.isSameLocalTime(calc, cald), "LANG-677");
assertFalse(DateUtils.isSameLocalTime(cala, calb));
assertFalse(new GmtTimeZone(false, 0, 0).useDaylightTime());
assertFalse(new GmtTimeZone(false, 0, 0).useDaylightTime());
assertTrue(valid, "Expected FDP parse to fail, but got " + actualTime);
assertFalse(valid, "Expected FDP parse to succeed, but got " + e);
assertTrue(sdferrorIndex - fdferrorIndex <= 4,"FDF error index ("+ fdferrorIndex + ") should approximate SDF index (" + sdferrorIndex + ")");
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(DateFormatUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(DateFormatUtils.class.getModifiers()));
assertFalse(DurationUtils.isPositive(Duration.ZERO));
assertFalse(DurationUtils.isPositive(Duration.ofMillis(-1)));
assertTrue(DurationUtils.isPositive(Duration.ofMillis(1)));
assertTrue(DurationUtils.of(this::testSince).compareTo(Duration.ZERO) >= 0);
assertTrue(DurationUtils.of(start -> assertTrue(start.compareTo(Instant.now()) <= 0)).compareTo(Duration.ZERO) >= 0);
assertTrue(DurationUtils.since(Instant.EPOCH).compareTo(Duration.ZERO) >= 0);
assertTrue(DurationUtils.since(Instant.MIN).compareTo(Duration.ZERO) >= 0);
assertTrue(DurationUtils.since(Instant.MAX).compareTo(Duration.ZERO) <= 0);
assertFalse(BooleanUtils.isFalse(Boolean.TRUE));
assertTrue(BooleanUtils.isFalse(Boolean.FALSE));
assertFalse(BooleanUtils.isFalse(null));
assertTrue(BooleanUtils.isNotFalse(Boolean.TRUE));
assertFalse(BooleanUtils.isNotFalse(Boolean.FALSE));
assertTrue(BooleanUtils.isNotFalse(null));
assertFalse(BooleanUtils.isNotTrue(Boolean.TRUE));
assertTrue(BooleanUtils.isNotTrue(Boolean.FALSE));
assertTrue(BooleanUtils.isNotTrue(null));
assertTrue(BooleanUtils.isTrue(Boolean.TRUE));
assertFalse(BooleanUtils.isTrue(Boolean.FALSE));
assertFalse(BooleanUtils.isTrue(null));
assertTrue(BooleanUtils.toBoolean(Boolean.TRUE));
assertFalse(BooleanUtils.toBoolean(Boolean.FALSE));
assertFalse(BooleanUtils.toBoolean((Boolean) null));
assertTrue(BooleanUtils.toBoolean(1));
assertTrue(BooleanUtils.toBoolean(-1));
assertFalse(BooleanUtils.toBoolean(0));
assertTrue(BooleanUtils.toBoolean(6, 6, 7));
assertFalse(BooleanUtils.toBoolean(7, 6, 7));
assertTrue(BooleanUtils.toBoolean(null, null, seven));
assertFalse(BooleanUtils.toBoolean(null, six, null));
assertTrue(BooleanUtils.toBoolean(Integer.valueOf(6), six, seven));
assertFalse(BooleanUtils.toBoolean(Integer.valueOf(7), six, seven));
assertFalse(BooleanUtils.toBoolean((String) null));
assertFalse(BooleanUtils.toBoolean(""));
assertFalse(BooleanUtils.toBoolean("off"));
assertFalse(BooleanUtils.toBoolean("oof"));
assertFalse(BooleanUtils.toBoolean("yep"));
assertFalse(BooleanUtils.toBoolean("trux"));
assertFalse(BooleanUtils.toBoolean("false"));
assertFalse(BooleanUtils.toBoolean("a"));
assertTrue(BooleanUtils.toBoolean("true")); // interned handled differently
assertTrue(BooleanUtils.toBoolean(new StringBuilder("tr").append("ue").toString()));
assertTrue(BooleanUtils.toBoolean("truE"));
assertTrue(BooleanUtils.toBoolean("trUe"));
assertTrue(BooleanUtils.toBoolean("trUE"));
assertTrue(BooleanUtils.toBoolean("tRue"));
assertTrue(BooleanUtils.toBoolean("tRuE"));
assertTrue(BooleanUtils.toBoolean("tRUe"));
assertTrue(BooleanUtils.toBoolean("tRUE"));
assertTrue(BooleanUtils.toBoolean("TRUE"));
assertTrue(BooleanUtils.toBoolean("TRUe"));
assertTrue(BooleanUtils.toBoolean("TRuE"));
assertTrue(BooleanUtils.toBoolean("TRue"));
assertTrue(BooleanUtils.toBoolean("TrUE"));
assertTrue(BooleanUtils.toBoolean("TrUe"));
assertTrue(BooleanUtils.toBoolean("TruE"));
assertTrue(BooleanUtils.toBoolean("True"));
assertTrue(BooleanUtils.toBoolean("on"));
assertTrue(BooleanUtils.toBoolean("oN"));
assertTrue(BooleanUtils.toBoolean("On"));
assertTrue(BooleanUtils.toBoolean("ON"));
assertTrue(BooleanUtils.toBoolean("yes"));
assertTrue(BooleanUtils.toBoolean("yeS"));
assertTrue(BooleanUtils.toBoolean("yEs"));
assertTrue(BooleanUtils.toBoolean("yES"));
assertTrue(BooleanUtils.toBoolean("Yes"));
assertTrue(BooleanUtils.toBoolean("YeS"));
assertTrue(BooleanUtils.toBoolean("YEs"));
assertTrue(BooleanUtils.toBoolean("YES"));
assertTrue(BooleanUtils.toBoolean("1"));
assertFalse(BooleanUtils.toBoolean("yes?"));
assertFalse(BooleanUtils.toBoolean("0"));
assertFalse(BooleanUtils.toBoolean("tru"));
assertFalse(BooleanUtils.toBoolean("no"));
assertFalse(BooleanUtils.toBoolean("off"));
assertFalse(BooleanUtils.toBoolean("yoo"));
assertTrue(BooleanUtils.toBoolean(null, null, "N"));
assertFalse(BooleanUtils.toBoolean(null, "Y", null));
assertTrue(BooleanUtils.toBoolean("Y", "Y", "N"));
assertTrue(BooleanUtils.toBoolean("Y", "Y", "N"));
assertFalse(BooleanUtils.toBoolean("N", "Y", "N"));
assertFalse(BooleanUtils.toBoolean("N", "Y", "N"));
assertTrue(BooleanUtils.toBoolean((String) null, null, null));
assertTrue(BooleanUtils.toBoolean("Y", "Y", "Y"));
assertTrue(BooleanUtils.toBoolean("Y", "Y", "Y"));
assertTrue(BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, true));
assertTrue(BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false));
assertFalse(BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true));
assertFalse(BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, false));
assertTrue(BooleanUtils.toBooleanDefaultIfNull(null, true));
assertFalse(BooleanUtils.toBooleanDefaultIfNull(null, false));
assertTrue(BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue(),"False result for (true, true)");
assertFalse(BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue(),"True result for (false, false)");
assertFalse(BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue(),"True result for (true, false)");
assertFalse(BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue(),"True result for (false, true)");
assertFalse(BooleanUtils.and(new Boolean[] {Boolean.FALSE,Boolean.FALSE,Boolean.TRUE }).booleanValue(),"True result for (false, false, true)");
assertFalse(BooleanUtils.and(new Boolean[] {Boolean.FALSE,Boolean.TRUE,Boolean.FALSE }).booleanValue(),"True result for (false, true, false)");
assertFalse(BooleanUtils.and(new Boolean[] {Boolean.TRUE,Boolean.FALSE,Boolean.FALSE }).booleanValue(),"True result for (true, false, false)");
assertTrue(BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue(),"False result for (true, true, true)");
assertFalse(BooleanUtils.and(new Boolean[] {Boolean.FALSE,Boolean.FALSE,Boolean.FALSE }).booleanValue(),"True result for (false, false)");
assertFalse(BooleanUtils.and(new Boolean[] {Boolean.TRUE,Boolean.TRUE,Boolean.FALSE }).booleanValue(),"True result for (true, true, false)");
assertFalse(BooleanUtils.and(new Boolean[] {Boolean.TRUE,Boolean.FALSE,Boolean.TRUE }).booleanValue(),"True result for (true, false, true)");
assertFalse(BooleanUtils.and(new Boolean[] {Boolean.FALSE,Boolean.TRUE,Boolean.TRUE }).booleanValue(),"True result for (false, true, true)");
assertTrue(BooleanUtils.and(new boolean[] { true, true }),"False result for (true, true)");
assertFalse(BooleanUtils.and(new boolean[] { false, false }),"True result for (false, false)");
assertFalse(BooleanUtils.and(new boolean[] { true, false }),"True result for (true, false)");
assertFalse(BooleanUtils.and(new boolean[] { false, true }),"True result for (false, true)");
assertFalse(BooleanUtils.and(new boolean[] { false, false, true }),"True result for (false, false, true)");
assertFalse(BooleanUtils.and(new boolean[] { false, true, false }),"True result for (false, true, false)");
assertFalse(BooleanUtils.and(new boolean[] { true, false, false }),"True result for (true, false, false)");
assertTrue(BooleanUtils.and(new boolean[] { true, true, true }),"False result for (true, true, true)");
assertFalse(BooleanUtils.and(new boolean[] { false, false, false }),"True result for (false, false)");
assertFalse(BooleanUtils.and(new boolean[] { true, true, false }),"True result for (true, true, false)");
assertFalse(BooleanUtils.and(new boolean[] { true, false, true }),"True result for (true, false, true)");
assertFalse(BooleanUtils.and(new boolean[] { false, true, true }),"True result for (false, true, true)");
assertTrue(BooleanUtils.compare(true, false) > 0);
assertTrue(BooleanUtils.compare(false, true) < 0);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(BooleanUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(BooleanUtils.class.getModifiers()));
assertTrue(BooleanUtils.oneHot(new Boolean[]{Boolean.TRUE}), "true");
assertFalse(BooleanUtils.oneHot(new Boolean[]{Boolean.FALSE}), "false");
assertFalse(BooleanUtils.oneHot(new Boolean[]{null}), "false");
assertFalse(BooleanUtils.oneHot(new Boolean[]{true, true}), "both true");
assertFalse(BooleanUtils.oneHot(new Boolean[]{false, false}), "both false");
assertTrue(BooleanUtils.oneHot(new Boolean[]{true, false}), "first true");
assertTrue(BooleanUtils.oneHot(new Boolean[]{false, true}), "last true");
assertFalse(BooleanUtils.oneHot(null, null), "both null");
assertTrue(BooleanUtils.oneHot(true, null), "first true");
assertTrue(BooleanUtils.oneHot(null, true), "last true");
assertFalse(BooleanUtils.oneHot(new Boolean[]{false, false, false}), "all false");
assertTrue(BooleanUtils.oneHot(new Boolean[]{true, false, false}), "first true");
assertTrue(BooleanUtils.oneHot(new Boolean[]{false, true, false}), "middle true");
assertTrue(BooleanUtils.oneHot(new Boolean[]{false, false, true}), "last true");
assertFalse(BooleanUtils.oneHot(new Boolean[]{false, true, true}), "first false");
assertFalse(BooleanUtils.oneHot(new Boolean[]{true, false, true}), "middle false");
assertFalse(BooleanUtils.oneHot(new Boolean[]{true, true, false}), "last false");
assertFalse(BooleanUtils.oneHot(new Boolean[]{true, true, true}), "all true");
assertTrue(BooleanUtils.oneHot(new boolean[]{true}), "true");
assertFalse(BooleanUtils.oneHot(new boolean[]{false}), "false");
assertFalse(BooleanUtils.oneHot(new boolean[]{true, true}), "both true");
assertFalse(BooleanUtils.oneHot(new boolean[]{false, false}), "both false");
assertTrue(BooleanUtils.oneHot(new boolean[]{true, false}), "first true");
assertTrue(BooleanUtils.oneHot(new boolean[]{false, true}), "last true");
assertFalse(BooleanUtils.oneHot(new boolean[]{false, false, false}), "all false");
assertTrue(BooleanUtils.oneHot(new boolean[]{true, false, false}), "first true");
assertTrue(BooleanUtils.oneHot(new boolean[]{false, true, false}), "middle true");
assertTrue(BooleanUtils.oneHot(new boolean[]{false, false, true}), "last true");
assertFalse(BooleanUtils.oneHot(new boolean[]{false, true, true}), "first false");
assertFalse(BooleanUtils.oneHot(new boolean[]{true, false, true}), "middle false");
assertFalse(BooleanUtils.oneHot(new boolean[]{true, true, false}), "last false");
assertFalse(BooleanUtils.oneHot(new boolean[]{true, true, true}), "all true");
assertTrue(BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue(),"False result for (true, true)");
assertFalse(BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue(),"True result for (false, false)");
assertTrue(BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue(),"False result for (true, false)");
assertTrue(BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue(),"False result for (false, true)");
assertTrue(BooleanUtils.or(new Boolean[] {Boolean.FALSE,Boolean.FALSE,Boolean.TRUE }).booleanValue(),"False result for (false, false, true)");
assertTrue(BooleanUtils.or(new Boolean[] {Boolean.FALSE,Boolean.TRUE,Boolean.FALSE }).booleanValue(),"False result for (false, true, false)");
assertTrue(BooleanUtils.or(new Boolean[] {Boolean.TRUE,Boolean.FALSE,Boolean.FALSE }).booleanValue(),"False result for (true, false, false)");
assertTrue(BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue(),"False result for (true, true, true)");
assertFalse(BooleanUtils.or(new Boolean[] {Boolean.FALSE,Boolean.FALSE,Boolean.FALSE }).booleanValue(),"True result for (false, false)");
assertTrue(BooleanUtils.or(new Boolean[] {Boolean.TRUE,Boolean.TRUE,Boolean.FALSE }).booleanValue(),"False result for (true, true, false)");
assertTrue(BooleanUtils.or(new Boolean[] {Boolean.TRUE,Boolean.FALSE,Boolean.TRUE }).booleanValue(),"False result for (true, false, true)");
assertTrue(BooleanUtils.or(new Boolean[] {Boolean.FALSE,Boolean.TRUE,Boolean.TRUE }).booleanValue(),"False result for (false, true, true)");
assertTrue(BooleanUtils.or(new boolean[] { true, true }),"False result for (true, true)");
assertFalse(BooleanUtils.or(new boolean[] { false, false }),"True result for (false, false)");
assertTrue(BooleanUtils.or(new boolean[] { true, false }),"False result for (true, false)");
assertTrue(BooleanUtils.or(new boolean[] { false, true }),"False result for (false, true)");
assertTrue(BooleanUtils.or(new boolean[] { false, false, true }),"False result for (false, false, true)");
assertTrue(BooleanUtils.or(new boolean[] { false, true, false }),"False result for (false, true, false)");
assertTrue(BooleanUtils.or(new boolean[] { true, false, false }),"False result for (true, false, false)");
assertTrue(BooleanUtils.or(new boolean[] { true, true, true }),"False result for (true, true, true)");
assertFalse(BooleanUtils.or(new boolean[] { false, false, false }),"True result for (false, false)");
assertTrue(BooleanUtils.or(new boolean[] { true, true, false }),"False result for (true, true, false)");
assertTrue(BooleanUtils.or(new boolean[] { true, false, true }),"False result for (true, false, true)");
assertTrue(BooleanUtils.or(new boolean[] { false, true, true }),"False result for (false, true, true)");
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(ClassPathUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(ClassPathUtils.class.getModifiers()));
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(CharSetUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(CharSetUtils.class.getModifiers()));
assertFalse(CharSetUtils.containsAny(null, (String) null));
assertFalse(CharSetUtils.containsAny(null, ""));
assertFalse(CharSetUtils.containsAny("", (String) null));
assertFalse(CharSetUtils.containsAny("", ""));
assertFalse(CharSetUtils.containsAny("", "a-e"));
assertFalse(CharSetUtils.containsAny("hello", (String) null));
assertFalse(CharSetUtils.containsAny("hello", ""));
assertTrue(CharSetUtils.containsAny("hello", "a-e"));
assertTrue(CharSetUtils.containsAny("hello", "l-p"));
assertFalse(CharSetUtils.containsAny(null, (String[]) null));
assertFalse(CharSetUtils.containsAny(null));
assertFalse(CharSetUtils.containsAny(null, null));
assertFalse(CharSetUtils.containsAny(null, "a-e"));
assertFalse(CharSetUtils.containsAny("", (String[]) null));
assertFalse(CharSetUtils.containsAny(""));
assertFalse(CharSetUtils.containsAny("", null));
assertFalse(CharSetUtils.containsAny("", "a-e"));
assertFalse(CharSetUtils.containsAny("hello", (String[]) null));
assertFalse(CharSetUtils.containsAny("hello"));
assertFalse(CharSetUtils.containsAny("hello", null));
assertTrue(CharSetUtils.containsAny("hello", "a-e"));
assertTrue(CharSetUtils.containsAny("hello", "el"));
assertFalse(CharSetUtils.containsAny("hello", "x"));
assertTrue(CharSetUtils.containsAny("hello", "e-i"));
assertTrue(CharSetUtils.containsAny("hello", "a-z"));
assertFalse(CharSetUtils.containsAny("hello", ""));
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(RandomStringUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(RandomStringUtils.class.getModifiers()));
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertTrue(r1.charAt(i) >= 32 && r1.charAt(i) <= 127, "char between 32 and 127");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertTrue(Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i)), "r1 contains alphabetic");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertTrue(Character.isLetterOrDigit(r1.charAt(i)), "r1 contains alphanumeric");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertTrue(r1.charAt(i) >= 33 && r1.charAt(i) <= 126, "char between 33 and 126");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertTrue(Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i)), "r1 contains numeric");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertTrue(r1.charAt(i) >= 32 && r1.charAt(i) <= 126, "char between 32 and 126");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertTrue(set.indexOf(r1.charAt(i)) > -1, "random char in set");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertTrue(set.indexOf(r1.charAt(i)) > -1, "random char in set");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertTrue(msg.contains("start"), "Message (" + msg + ") must contain 'start'");
assertTrue(msg.contains("end"), "Message (" + msg + ") must contain 'end'");
assertTrue(found[i],"alphanumeric character not generated in 1000 attempts: " +testChars[i] + " -- repeated failures indicate a problem ");
assertTrue(found[i],"digit not generated in 1000 attempts: " + testChars[i] +" -- repeated failures indicate a problem ");
assertTrue(found[i],"alphanumeric character not generated in 1000 attempts: " + testChars[i] +" -- repeated failures indicate a problem ");
assertTrue(found[i],"ascii character not generated in 1000 attempts: " + (int) testChars[i] +" -- repeated failures indicate a problem");
assertTrue(s.matches(pattern), s);
assertTrue(s.matches(pattern), s);
assertTrue(s.matches(pattern), s);
assertTrue(s.matches(pattern), s);
assertTrue(s.matches(pattern), s);
assertTrue(s.matches(pattern), s);
assertTrue(chiSquare(expected, counts) < 13.82, "test homogeneity -- will fail about 1 in 1000 times");
assertTrue(c >= start && c < end, String.format("Character '%d' not in range [%d,%d).", c, start, end));
assertTrue(processor.isX86());
assertFalse(processor.isPPC());
assertTrue(processor.isX86());
assertTrue(processor.isIA64());
assertTrue(processor.isIA64());
assertFalse(processor.isX86());
assertTrue(processor.isPPC());
assertFalse(processor.isIA64());
assertTrue(processor.isPPC());
assertTrue(processor.isAarch64());
assertFalse(arch.getLabel().isEmpty());
assertFalse(type.getLabel().isEmpty());
assertTrue(processor.isX86());
assertTrue(processor.is32Bit());
assertTrue(processor.is32Bit());
assertFalse(processor.is32Bit());
assertFalse(processor.is32Bit());
assertFalse(processor.is32Bit());
assertTrue(processor.is64Bit());
assertTrue(processor.is64Bit());
assertTrue(processor.is64Bit());
assertFalse(processor.is64Bit());
assertFalse(processor.is64Bit());
assertFalse(processor.is64Bit());
assertTrue(processor.is64Bit());
assertFalse(processor.is32Bit());
assertTrue(test.isDone());
assertFalse(test.isCancelled());
assertFalse(test.cancel(true));
assertFalse(test.cancel(false));
assertTrue(test.isDone());
assertFalse(test.isCancelled());
assertFalse(test.cancel(true));
assertFalse(test.cancel(false));
assertTrue(booleanValue);
runTest(DELAY, true, millis -> assertTrue(millis >= TOTAL_DELAY.toMillis()), booleanValues,LockingVisitors.reentrantReadWriteLockVisitor(booleanValues));
runTest(DELAY, false, millis -> assertTrue(millis < TOTAL_DELAY.toMillis()), booleanValues,LockingVisitors.reentrantReadWriteLockVisitor(booleanValues));
runTest(DELAY, true, millis -> assertTrue(millis >= TOTAL_DELAY.toMillis()), booleanValues,LockingVisitors.stampedLockVisitor(booleanValues));
runTest(DELAY, false, millis -> assertTrue(millis < TOTAL_DELAY.toMillis()), booleanValues,LockingVisitors.stampedLockVisitor(booleanValues));
assertTrue(init.start(), "Wrong result of start()");
assertTrue(init.getActiveExecutor().isShutdown(), "Executor not shutdown");
assertTrue(init.start(), "Wrong result of start()");
assertFalse(exec.isShutdown(), "Executor was shutdown");
assertTrue(init.start(), "Wrong result for start()");
assertFalse(init.start(), "Could start again");
assertTrue(isInterrupted(), "Thread not interrupted");
assertFalse(init.isStarted(), "Already started");
assertTrue(init.isStarted(), "Not started");
assertTrue(init.isStarted(), "Not started");
assertTrue(initializer.start(), "Wrong result of start()");
assertTrue(res.initializerNames().isEmpty(), "Got child initializers");
assertTrue(initializer.getActiveExecutor().isShutdown(), "Executor not shutdown");
assertTrue(res.initializerNames().contains(key), "Name not found: " + key);
assertFalse(res.isException(key), "Exception flag");
assertTrue(initializer.getActiveExecutor().isShutdown(), "Executor not shutdown");
assertFalse(exec.isShutdown(), "Executor was shutdown");
assertTrue(res.isException(CHILD_INIT), "No exception flag");
assertTrue(res.isSuccessful(), "Wrong success flag");
assertFalse(res.isSuccessful(), "Wrong success flag");
assertTrue(exec.isShutdown(), "Executor not shutdown");
assertTrue(f.isDone());
assertFalse(breaker.isOpen(), "Open");
assertTrue(breaker.isClosed(), "Not closed");
assertTrue(deltaNanos < 100_000, String.format("Delta %,d ns to current time too large", deltaNanos));
assertTrue(breaker.at(startTime).incrementAndCheckState(), "In open state");
assertTrue(breaker.isClosed(), "Not closed");
assertTrue(breaker.at(startTime).incrementAndCheckState(), "In open state");
assertTrue(breaker.isClosed(), "Not closed");
assertTrue(open, "Not open");
assertFalse(breaker.isClosed(), "Closed");
assertTrue(open, "Not open");
assertFalse(breaker.isClosed(), "Closed");
assertFalse(breaker.at(startTime).incrementAndCheckState(), "Not open");
assertFalse(breaker.at(startTime + NANO_FACTOR).incrementAndCheckState(), "Closed in new interval");
assertTrue(breaker.isOpen(), "Not open at end");
assertFalse(breaker.at(2000).checkState(), "Already closed");
assertFalse(breaker.at(NANO_FACTOR).checkState(), "Closed at interval end");
assertTrue(breaker.at(NANO_FACTOR + 1).checkState(), "Not closed after interval end");
assertTrue(breaker.isClosed(), "Not closed at end");
assertTrue(breaker.isOpen(), "Not open");
assertFalse(breaker.at(NANO_FACTOR + 100).checkState(), "Already closed");
assertTrue(breaker.isOpen(), "Not open");
assertFalse(breaker.at(time).incrementAndCheckState(), "Already closed");
assertTrue(breaker.at(time).checkState(), "Not closed in time interval");
assertTrue(breaker.isOpen(), "Not open");
assertTrue(breaker.isClosed(), "Not closed");
assertTrue(breaker.at(time + 1000).incrementAndCheckState(), "Open again");
assertTrue(pattern.matcher(s).matches(), "Wrong string: " + s);
assertTrue(s.indexOf("object = null") > 0, "Object not found: " + s);
assertTrue(t1.isDaemon(), "No daemon thread");
assertFalse(t2.isDaemon(), "A daemon thread");
assertFalse(semaphore.isShutdown(), "Already shutdown");
assertFalse(exec.getContinueExistingPeriodicTasksAfterShutdownPolicy(), "Wrong periodic task policy");
assertFalse(exec.getExecuteExistingDelayedTasksAfterShutdownPolicy(), "Wrong delayed task policy");
assertFalse(exec.isShutdown(), "Already shutdown");
assertFalse(count++ > trials, "endOfPeriod() not called!");
assertTrue(semaphore.isShutdown(), "Not shutdown");
assertTrue(semaphore.getExecutorService().isShutdown(), "Executor not shutdown");
assertTrue(semaphore.isShutdown(), "Not shutdown");
assertTrue(semaphore.isShutdown(), "Not shutdown");
assertTrue(semaphore.getPeriodEnds() > 0, "End of period not reached");
assertFalse(circuit.incrementAndCheckState(1L), "Circuit opened before reaching the threshold");
assertTrue(circuit.incrementAndCheckState(2L), "The circuit was supposed to be open after increment above the threshold");
assertTrue(circuit.incrementAndCheckState(0L), "When the threshold is zero, the circuit is supposed to be always open");
assertFalse(circuit.incrementAndCheckState(9L), "Internal counter was not reset back to zero");
assertTrue(test.containsKey("RED"));
assertTrue(test.containsKey("AMBER"));
assertTrue(test.containsKey("GREEN"));
assertFalse(test.containsKey("PURPLE"));
assertFalse(test.containsKey(0));
assertTrue(test.containsKey(1));
assertTrue(test.containsKey(2));
assertTrue(test.containsKey(3));
assertTrue(test.containsKey(4));
assertTrue(test.containsKey(5));
assertTrue(test.containsKey(6));
assertTrue(test.containsKey(7));
assertTrue(test.containsKey(8));
assertTrue(test.containsKey(9));
assertTrue(test.containsKey(10));
assertTrue(test.containsKey(11));
assertTrue(test.containsKey(12));
assertFalse(test.containsKey(13));
assertTrue(EnumUtils.isValidEnum(Traffic.class, "RED"));
assertTrue(EnumUtils.isValidEnum(Traffic.class, "AMBER"));
assertTrue(EnumUtils.isValidEnum(Traffic.class, "GREEN"));
assertFalse(EnumUtils.isValidEnum(Traffic.class, "PURPLE"));
assertFalse(EnumUtils.isValidEnum(Traffic.class, null));
assertTrue(EnumUtils.isValidEnumIgnoreCase(Traffic.class, "red"));
assertTrue(EnumUtils.isValidEnumIgnoreCase(Traffic.class, "Amber"));
assertTrue(EnumUtils.isValidEnumIgnoreCase(Traffic.class, "grEEn"));
assertFalse(EnumUtils.isValidEnumIgnoreCase(Traffic.class, "purple"));
assertFalse(EnumUtils.isValidEnumIgnoreCase(Traffic.class, null));
private void assertSupportedEncoding(final String name) {assertTrue(CharEncoding.isSupported(name), "Encoding should be supported: " + name);
assertTrue(CharEncoding.isSupported("UTF8"));
assertTrue(CharEncoding.isSupported("UTF-8"));
assertTrue(CharEncoding.isSupported("ASCII"));
assertFalse(CharEncoding.isSupported(null));
assertFalse(CharEncoding.isSupported(""));
assertFalse(CharEncoding.isSupported(" "));
assertFalse(CharEncoding.isSupported("\t\r\n"));
assertFalse(CharEncoding.isSupported("DOESNOTEXIST"));
assertFalse(CharEncoding.isSupported("this is not a valid encoding name"));
assertFalse(is(a).between(b, c));
assertFalse(is(a).betweenExclusive(b, c));
assertFalse(ComparableUtils.between(b, c).test(a));
assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));
assertTrue(is(a).between(b, c));
assertFalse(is(a).betweenExclusive(b, c));
assertTrue(ComparableUtils.between(b, c).test(a));
assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));
assertTrue(is(a).between(b, c));
assertTrue(is(a).betweenExclusive(b, c));
assertTrue(ComparableUtils.between(b, c).test(a));
assertTrue(ComparableUtils.betweenExclusive(b, c).test(a));
assertFalse(is(a).equalTo(b));
assertTrue(is(a).greaterThan(b));
assertTrue(is(a).greaterThanOrEqualTo(b));
assertFalse(is(a).lessThan(b));
assertFalse(is(a).lessThanOrEqualTo(b));
assertTrue(ComparableUtils.gt(b).test(a));
assertTrue(ComparableUtils.ge(b).test(a));
assertFalse(ComparableUtils.lt(b).test(a));
assertFalse(ComparableUtils.le(b).test(a));
assertTrue(is(a).between(b, c));
assertFalse(is(a).betweenExclusive(b, c));
assertTrue(ComparableUtils.between(b, c).test(a));
assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));
assertTrue(is(a).between(b, c));
assertFalse(is(a).betweenExclusive(b, c));
assertTrue(ComparableUtils.between(b, c).test(a));
assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));
assertTrue(is(a).between(b, c));
assertFalse(is(a).betweenExclusive(b, c));
assertTrue(ComparableUtils.between(b, c).test(a));
assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));
assertTrue(is(a).equalTo(b));
assertFalse(is(a).greaterThan(b));
assertTrue(is(a).greaterThanOrEqualTo(b));
assertFalse(is(a).lessThan(b));
assertTrue(is(a).lessThanOrEqualTo(b));
assertFalse(ComparableUtils.gt(b).test(a));
assertTrue(ComparableUtils.ge(b).test(a));
assertFalse(ComparableUtils.lt(b).test(a));
assertTrue(ComparableUtils.le(b).test(a));
assertTrue(is(a).between(b, c));
assertTrue(is(a).betweenExclusive(b, c));
assertTrue(ComparableUtils.between(b, c).test(a));
assertTrue(ComparableUtils.betweenExclusive(b, c).test(a));
assertTrue(is(a).between(b, c));
assertFalse(is(a).betweenExclusive(b, c));
assertTrue(ComparableUtils.between(b, c).test(a));
assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));
assertFalse(is(a).between(b, c));
assertFalse(is(a).betweenExclusive(b, c));
assertFalse(ComparableUtils.between(b, c).test(a));
assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));
assertFalse(is(a).equalTo(b));
assertFalse(is(a).greaterThan(b));
assertFalse(is(a).greaterThanOrEqualTo(b));
assertTrue(is(a).lessThan(b));
assertTrue(is(a).lessThanOrEqualTo(b));
assertFalse(ComparableUtils.gt(b).test(a));
assertFalse(ComparableUtils.ge(b).test(a));
assertTrue(ComparableUtils.lt(b).test(a));
assertTrue(ComparableUtils.le(b).test(a));
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(RandomUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(RandomUtils.class.getModifiers()));
assertTrue(result || !result);
assertTrue(result >= 33 && result < 42);
assertTrue(randomResult > 0);
assertTrue(randomResult < Integer.MAX_VALUE);
assertTrue(result >= 33d && result <= 42d);
assertTrue(randomResult > 0);
assertTrue(randomResult < Double.MAX_VALUE);
assertTrue(result >= 33f && result <= 42f);
assertTrue(randomResult > 0);
assertTrue(randomResult < Float.MAX_VALUE);
assertTrue(result >= 33L && result < 42L);
assertTrue(randomResult > 0);
assertTrue(randomResult < Long.MAX_VALUE);
assertTrue(result >= 0 && result < Integer.MAX_VALUE);
assertTrue(result >= 0 && result < Long.MAX_VALUE);
assertTrue(result >= 0f && result <= Float.MAX_VALUE);
assertTrue(result >= 0 && result <= Double.MAX_VALUE);
assertTrue(actual.indexOf((char) ('a' + offset)) != -1,message + " -- should contain offset character");
assertTrue(actual.length() <= maxWidth,message + " -- should not be greater than maxWidth");
assertTrue(actual.indexOf((char) ('a' + offset)) != -1,message + " -- should contain offset character");
assertTrue(actual.length() <= maxWidth,message + " -- should not be greater than maxWidth");
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(StringUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(StringUtils.class.getModifiers()));
assertFalse(StringUtils.isAllLowerCase(null));
assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY));
assertFalse(StringUtils.isAllLowerCase("  "));
assertTrue(StringUtils.isAllLowerCase("abc"));
assertFalse(StringUtils.isAllLowerCase("abc "));
assertFalse(StringUtils.isAllLowerCase("abc\n"));
assertFalse(StringUtils.isAllLowerCase("abC"));
assertFalse(StringUtils.isAllLowerCase("ab c"));
assertFalse(StringUtils.isAllLowerCase("ab1c"));
assertFalse(StringUtils.isAllLowerCase("ab/c"));
assertFalse(StringUtils.isAllUpperCase(null));
assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY));
assertFalse(StringUtils.isAllUpperCase("  "));
assertTrue(StringUtils.isAllUpperCase("ABC"));
assertFalse(StringUtils.isAllUpperCase("ABC "));
assertFalse(StringUtils.isAllUpperCase("ABC\n"));
assertFalse(StringUtils.isAllUpperCase("aBC"));
assertFalse(StringUtils.isAllUpperCase("A C"));
assertFalse(StringUtils.isAllUpperCase("A1C"));
assertFalse(StringUtils.isAllUpperCase("A/C"));
assertFalse(StringUtils.isMixedCase(null));
assertFalse(StringUtils.isMixedCase(StringUtils.EMPTY));
assertFalse(StringUtils.isMixedCase(" "));
assertFalse(StringUtils.isMixedCase("A"));
assertFalse(StringUtils.isMixedCase("a"));
assertFalse(StringUtils.isMixedCase("/"));
assertFalse(StringUtils.isMixedCase("A/"));
assertFalse(StringUtils.isMixedCase("/b"));
assertFalse(StringUtils.isMixedCase("abc"));
assertFalse(StringUtils.isMixedCase("ABC"));
assertTrue(StringUtils.isMixedCase("aBc"));
assertTrue(StringUtils.isMixedCase("aBc "));
assertTrue(StringUtils.isMixedCase("A c"));
assertTrue(StringUtils.isMixedCase("aBc\n"));
assertTrue(StringUtils.isMixedCase("A1c"));
assertTrue(StringUtils.isMixedCase("a/C"));
assertTrue(StringUtils.containsOnly(str, 'a'));
assertFalse(Character.isWhitespace('\u00A0'));
assertTrue(StringUtils.containsOnly(str, 'a'));
assertTrue(StringUtils.containsOnly(str, 'a'));
assertTrue(Objects.deepEquals(new String[]{"ab", " ", "de", " ","fg"}, StringUtils.splitByCharacterType("ab de fg")));
assertTrue(Objects.deepEquals(new String[]{"ab", "   ", "de", " ","fg"}, StringUtils.splitByCharacterType("ab   de fg")));
assertTrue(Objects.deepEquals(new String[]{"ab", ":", "cd", ":","ef"}, StringUtils.splitByCharacterType("ab:cd:ef")));
assertTrue(Objects.deepEquals(new String[]{"number", "5"},StringUtils.splitByCharacterType("number5")));
assertTrue(Objects.deepEquals(new String[]{"foo", "B", "ar"},StringUtils.splitByCharacterType("fooBar")));
assertTrue(Objects.deepEquals(new String[]{"foo", "200", "B", "ar"},StringUtils.splitByCharacterType("foo200Bar")));
assertTrue(Objects.deepEquals(new String[]{"ASFR", "ules"},StringUtils.splitByCharacterType("ASFRules")));
assertTrue(Objects.deepEquals(new String[]{"ab", " ", "de", " ","fg"}, StringUtils.splitByCharacterTypeCamelCase("ab de fg")));
assertTrue(Objects.deepEquals(new String[]{"ab", "   ", "de", " ","fg"}, StringUtils.splitByCharacterTypeCamelCase("ab   de fg")));
assertTrue(Objects.deepEquals(new String[]{"ab", ":", "cd", ":","ef"}, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef")));
assertTrue(Objects.deepEquals(new String[]{"number", "5"},StringUtils.splitByCharacterTypeCamelCase("number5")));
assertTrue(Objects.deepEquals(new String[]{"foo", "Bar"},StringUtils.splitByCharacterTypeCamelCase("fooBar")));
assertTrue(Objects.deepEquals(new String[]{"foo", "200", "Bar"},StringUtils.splitByCharacterTypeCamelCase("foo200Bar")));
assertTrue(Objects.deepEquals(new String[]{"ASF", "Rules"},StringUtils.splitByCharacterTypeCamelCase("ASFRules")));
assertFalse(ArrayUtils.contains(excludeMethods, methodStr), "The method \"" + methodStr + "\" appears to be mutable in spirit and therefore must not accept a CharSequence");
assertTrue(ArrayUtils.contains(excludeMethods, methodStr),"The method \"" + methodStr + "\" appears to be immutable in spirit and therefore must not accept a String");
assertFalse(StringUtils.contains(null, ' '));
assertFalse(StringUtils.contains("", ' '));
assertFalse(StringUtils.contains("", null));
assertFalse(StringUtils.contains(null, null));
assertTrue(StringUtils.contains("abc", 'a'));
assertTrue(StringUtils.contains("abc", 'b'));
assertTrue(StringUtils.contains("abc", 'c'));
assertFalse(StringUtils.contains("abc", 'z'));
assertFalse(StringUtils.contains(null, null));
assertFalse(StringUtils.contains(null, ""));
assertFalse(StringUtils.contains(null, "a"));
assertFalse(StringUtils.contains("", null));
assertTrue(StringUtils.contains("", ""));
assertFalse(StringUtils.contains("", "a"));
assertTrue(StringUtils.contains("abc", "a"));
assertTrue(StringUtils.contains("abc", "b"));
assertTrue(StringUtils.contains("abc", "c"));
assertTrue(StringUtils.contains("abc", "abc"));
assertFalse(StringUtils.contains("abc", "z"));
assertFalse(StringUtils.contains(CharUSuppCharHigh, CharU20001));
assertFalse(StringUtils.contains(CharUSuppCharLow, CharU20001));
assertFalse(StringUtils.contains(CharU20001, CharUSuppCharHigh));
assertTrue(StringUtils.contains(CharU20001, CharUSuppCharLow));
assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharLow + "a", "a"));
assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharHigh + "a", "a"));
assertTrue(StringUtils.contains(CharU20000 + CharU20001, CharU20000));
assertTrue(StringUtils.contains(CharU20000 + CharU20001, CharU20001));
assertTrue(StringUtils.contains(CharU20000, CharU20000));
assertFalse(StringUtils.contains(CharU20000, CharU20001));
assertFalse(StringUtils.containsAny(null, (char[]) null));
assertFalse(StringUtils.containsAny(null, new char[0]));
assertFalse(StringUtils.containsAny(null, 'a', 'b'));
assertFalse(StringUtils.containsAny("", (char[]) null));
assertFalse(StringUtils.containsAny("", new char[0]));
assertFalse(StringUtils.containsAny("", 'a', 'b'));
assertFalse(StringUtils.containsAny("zzabyycdxx", (char[]) null));
assertFalse(StringUtils.containsAny("zzabyycdxx", new char[0]));
assertTrue(StringUtils.containsAny("zzabyycdxx", 'z', 'a'));
assertTrue(StringUtils.containsAny("zzabyycdxx", 'b', 'y'));
assertTrue(StringUtils.containsAny("zzabyycdxx", 'z', 'y'));
assertFalse(StringUtils.containsAny("ab", 'z'));
assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));
assertFalse(StringUtils.containsAny("abc" + CharUSuppCharHigh + "xyz", CharU20001.toCharArray()));
assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));
assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));
assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));
assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));
assertTrue(StringUtils.containsAny("a" + CharU20000 + CharU20001, "a".toCharArray()));
assertTrue(StringUtils.containsAny(CharU20000 + "a" + CharU20001, "a".toCharArray()));
assertTrue(StringUtils.containsAny(CharU20000 + CharU20001 + "a", "a".toCharArray()));
assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));
assertTrue(StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));
assertFalse(StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));
assertFalse(StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));
assertFalse(StringUtils.containsAny(null, (String) null));
assertFalse(StringUtils.containsAny(null, ""));
assertFalse(StringUtils.containsAny(null, "ab"));
assertFalse(StringUtils.containsAny("", (String) null));
assertFalse(StringUtils.containsAny("", ""));
assertFalse(StringUtils.containsAny("", "ab"));
assertFalse(StringUtils.containsAny("zzabyycdxx", (String) null));
assertFalse(StringUtils.containsAny("zzabyycdxx", ""));
assertTrue(StringUtils.containsAny("zzabyycdxx", "za"));
assertTrue(StringUtils.containsAny("zzabyycdxx", "by"));
assertTrue(StringUtils.containsAny("zzabyycdxx", "zy"));
assertFalse(StringUtils.containsAny("ab", "z"));
assertFalse(StringUtils.containsAny(null, (String[]) null));
assertFalse(StringUtils.containsAny(null, new String[0]));
assertFalse(StringUtils.containsAny(null, new String[] { "hello" }));
assertFalse(StringUtils.containsAny("", (String[]) null));
assertFalse(StringUtils.containsAny("", new String[0]));
assertFalse(StringUtils.containsAny("", new String[] { "hello" }));
assertFalse(StringUtils.containsAny("hello, goodbye", (String[]) null));
assertFalse(StringUtils.containsAny("hello, goodbye", new String[0]));
assertTrue(StringUtils.containsAny("hello, goodbye", new String[]{"hello", "goodbye"}));
assertTrue(StringUtils.containsAny("hello, goodbye", new String[]{"hello", "Goodbye"}));
assertFalse(StringUtils.containsAny("hello, goodbye", new String[]{"Hello", "Goodbye"}));
assertFalse(StringUtils.containsAny("hello, goodbye", new String[]{"Hello", null}));
assertFalse(StringUtils.containsAny("hello, null", new String[] { "Hello", null }));
assertTrue(StringUtils.containsAny("abcd", "ab", null));
assertTrue(StringUtils.containsAny("abcd", "ab", "cd"));
assertTrue(StringUtils.containsAny("abc", "d", "abc"));
assertFalse(StringUtils.containsAnyIgnoreCase(null, (String[]) null));
assertFalse(StringUtils.containsAnyIgnoreCase(null, new String[0]));
assertFalse(StringUtils.containsAnyIgnoreCase(null, new String[] { "hello" }));
assertFalse(StringUtils.containsAnyIgnoreCase("", (String[]) null));
assertFalse(StringUtils.containsAnyIgnoreCase("", new String[0]));
assertFalse(StringUtils.containsAnyIgnoreCase("", new String[] { "hello" }));
assertFalse(StringUtils.containsAnyIgnoreCase("hello, goodbye", (String[]) null));
assertFalse(StringUtils.containsAnyIgnoreCase("hello, goodbye", new String[0]));
assertTrue(StringUtils.containsAnyIgnoreCase("hello, goodbye", new String[]{"hello", "goodbye"}));
assertTrue(StringUtils.containsAnyIgnoreCase("hello, goodbye", new String[]{"hello", "Goodbye"}));
assertTrue(StringUtils.containsAnyIgnoreCase("hello, goodbye", new String[]{"Hello", "Goodbye"}));
assertTrue(StringUtils.containsAnyIgnoreCase("hello, goodbye", new String[]{"Hello", null}));
assertTrue(StringUtils.containsAnyIgnoreCase("hello, null", new String[] { "Hello", null }));
assertTrue(StringUtils.containsAnyIgnoreCase("abcd", "ab", null));
assertTrue(StringUtils.containsAnyIgnoreCase("abcd", "ab", "cd"));
assertTrue(StringUtils.containsAnyIgnoreCase("abc", "d", "abc"));
assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001));
assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001));
assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh));
assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow));
assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));
assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));
assertTrue(StringUtils.containsAny(CharU20000, CharU20000));
assertFalse(StringUtils.containsAny(CharU20000, CharU20001));
assertFalse(StringUtils.containsAny(CharU20001, CharU20000));
assertTrue(StringUtils.containsIgnoreCase(tdata[j][0], tdata[j][1]),Locale.getDefault() + ": " + j + " " + tdata[j][0] + " " + tdata[j][1]);
assertFalse(StringUtils.containsIgnoreCase(fdata[j][0], fdata[j][1]),Locale.getDefault() + ": " + j + " " + fdata[j][0] + " " + fdata[j][1]);
assertFalse(StringUtils.containsIgnoreCase(null, null));
assertFalse(StringUtils.containsIgnoreCase(null, ""));
assertFalse(StringUtils.containsIgnoreCase(null, "a"));
assertFalse(StringUtils.containsIgnoreCase(null, "abc"));
assertFalse(StringUtils.containsIgnoreCase("", null));
assertFalse(StringUtils.containsIgnoreCase("a", null));
assertFalse(StringUtils.containsIgnoreCase("abc", null));
assertTrue(StringUtils.containsIgnoreCase("", ""));
assertTrue(StringUtils.containsIgnoreCase("a", ""));
assertTrue(StringUtils.containsIgnoreCase("abc", ""));
assertFalse(StringUtils.containsIgnoreCase("", "a"));
assertTrue(StringUtils.containsIgnoreCase("a", "a"));
assertTrue(StringUtils.containsIgnoreCase("abc", "a"));
assertFalse(StringUtils.containsIgnoreCase("", "A"));
assertTrue(StringUtils.containsIgnoreCase("a", "A"));
assertTrue(StringUtils.containsIgnoreCase("abc", "A"));
assertFalse(StringUtils.containsIgnoreCase("", "abc"));
assertFalse(StringUtils.containsIgnoreCase("a", "abc"));
assertTrue(StringUtils.containsIgnoreCase("xabcz", "abc"));
assertFalse(StringUtils.containsIgnoreCase("", "ABC"));
assertFalse(StringUtils.containsIgnoreCase("a", "ABC"));
assertTrue(StringUtils.containsIgnoreCase("xabcz", "ABC"));
assertTrue(StringUtils.containsNone(null, (char[]) null));
assertTrue(StringUtils.containsNone("", (char[]) null));
assertTrue(StringUtils.containsNone(null, emptyChars));
assertTrue(StringUtils.containsNone(str1, emptyChars));
assertTrue(StringUtils.containsNone("", emptyChars));
assertTrue(StringUtils.containsNone("", chars1));
assertTrue(StringUtils.containsNone(str1, chars1));
assertTrue(StringUtils.containsNone(str1, chars2));
assertTrue(StringUtils.containsNone(str1, chars3));
assertFalse(StringUtils.containsNone(str2, chars1));
assertTrue(StringUtils.containsNone(str2, chars2));
assertTrue(StringUtils.containsNone(str2, chars3));
assertFalse(StringUtils.containsNone(str3, chars1));
assertFalse(StringUtils.containsNone(str3, chars2));
assertTrue(StringUtils.containsNone(str3, chars3));
assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));
assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));
assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));
assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));
assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));
assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));
assertFalse(StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));
assertTrue(StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));
assertTrue(StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));
assertTrue(StringUtils.containsNone(null, (String) null));
assertTrue(StringUtils.containsNone("", (String) null));
assertTrue(StringUtils.containsNone(null, ""));
assertTrue(StringUtils.containsNone(str1, ""));
assertTrue(StringUtils.containsNone("", ""));
assertTrue(StringUtils.containsNone("", chars1));
assertTrue(StringUtils.containsNone(str1, chars1));
assertTrue(StringUtils.containsNone(str1, chars2));
assertTrue(StringUtils.containsNone(str1, chars3));
assertFalse(StringUtils.containsNone(str2, chars1));
assertTrue(StringUtils.containsNone(str2, chars2));
assertTrue(StringUtils.containsNone(str2, chars3));
assertFalse(StringUtils.containsNone(str3, chars1));
assertFalse(StringUtils.containsNone(str3, chars2));
assertTrue(StringUtils.containsNone(str3, chars3));
assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001));
assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001));
assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh));
assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow));
assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));
assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));
assertFalse(StringUtils.containsNone(CharU20000, CharU20000));
assertTrue(StringUtils.containsNone(CharU20000, CharU20001));
assertTrue(StringUtils.containsNone(CharU20001, CharU20000));
assertFalse(StringUtils.containsOnly(null, (char[]) null));
assertFalse(StringUtils.containsOnly("", (char[]) null));
assertFalse(StringUtils.containsOnly(null, emptyChars));
assertFalse(StringUtils.containsOnly(str1, emptyChars));
assertTrue(StringUtils.containsOnly("", emptyChars));
assertTrue(StringUtils.containsOnly("", chars1));
assertFalse(StringUtils.containsOnly(str1, chars1));
assertTrue(StringUtils.containsOnly(str1, chars2));
assertTrue(StringUtils.containsOnly(str1, chars3));
assertTrue(StringUtils.containsOnly(str2, chars1));
assertFalse(StringUtils.containsOnly(str2, chars2));
assertTrue(StringUtils.containsOnly(str2, chars3));
assertFalse(StringUtils.containsOnly(str3, chars1));
assertFalse(StringUtils.containsOnly(str3, chars2));
assertTrue(StringUtils.containsOnly(str3, chars3));
assertFalse(StringUtils.containsOnly(null, (String) null));
assertFalse(StringUtils.containsOnly("", (String) null));
assertFalse(StringUtils.containsOnly(null, ""));
assertFalse(StringUtils.containsOnly(str1, ""));
assertTrue(StringUtils.containsOnly("", ""));
assertTrue(StringUtils.containsOnly("", chars1));
assertFalse(StringUtils.containsOnly(str1, chars1));
assertTrue(StringUtils.containsOnly(str1, chars2));
assertTrue(StringUtils.containsOnly(str1, chars3));
assertTrue(StringUtils.containsOnly(str2, chars1));
assertFalse(StringUtils.containsOnly(str2, chars2));
assertTrue(StringUtils.containsOnly(str2, chars3));
assertFalse(StringUtils.containsOnly(str3, chars1));
assertFalse(StringUtils.containsOnly(str3, chars2));
assertTrue(StringUtils.containsOnly(str3, chars3));
assertFalse( StringUtils.containsWhitespace("") );
assertTrue( StringUtils.containsWhitespace(" ") );
assertFalse( StringUtils.containsWhitespace("a") );
assertTrue( StringUtils.containsWhitespace("a ") );
assertTrue( StringUtils.containsWhitespace(" a") );
assertTrue( StringUtils.containsWhitespace("a\t") );
assertTrue( StringUtils.containsWhitespace("\n") );
assertTrue(Modifier.isPublic(Validate.class.getModifiers()));
assertFalse(Modifier.isFinal(Validate.class.getModifiers()));
assertFalse(StringUtils.isAlpha(null));
assertFalse(StringUtils.isAlpha(""));
assertFalse(StringUtils.isAlpha(" "));
assertTrue(StringUtils.isAlpha("a"));
assertTrue(StringUtils.isAlpha("A"));
assertTrue(StringUtils.isAlpha("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));
assertFalse(StringUtils.isAlpha("ham kso"));
assertFalse(StringUtils.isAlpha("1"));
assertFalse(StringUtils.isAlpha("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));
assertFalse(StringUtils.isAlpha("_"));
assertFalse(StringUtils.isAlpha("hkHKHik*khbkuh"));
assertFalse(StringUtils.isAlphanumeric(null));
assertFalse(StringUtils.isAlphanumeric(""));
assertFalse(StringUtils.isAlphanumeric(" "));
assertTrue(StringUtils.isAlphanumeric("a"));
assertTrue(StringUtils.isAlphanumeric("A"));
assertTrue(StringUtils.isAlphanumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));
assertFalse(StringUtils.isAlphanumeric("ham kso"));
assertTrue(StringUtils.isAlphanumeric("1"));
assertTrue(StringUtils.isAlphanumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));
assertFalse(StringUtils.isAlphanumeric("_"));
assertFalse(StringUtils.isAlphanumeric("hkHKHik*khbkuh"));
assertFalse(StringUtils.isAlphanumericSpace(null));
assertTrue(StringUtils.isAlphanumericSpace(""));
assertTrue(StringUtils.isAlphanumericSpace(" "));
assertTrue(StringUtils.isAlphanumericSpace("a"));
assertTrue(StringUtils.isAlphanumericSpace("A"));
assertTrue(StringUtils.isAlphanumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));
assertTrue(StringUtils.isAlphanumericSpace("ham kso"));
assertTrue(StringUtils.isAlphanumericSpace("1"));
assertTrue(StringUtils.isAlphanumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));
assertFalse(StringUtils.isAlphanumericSpace("_"));
assertFalse(StringUtils.isAlphanumericSpace("hkHKHik*khbkuh"));
assertFalse(StringUtils.isAlphaSpace(null));
assertTrue(StringUtils.isAlphaSpace(""));
assertTrue(StringUtils.isAlphaSpace(" "));
assertTrue(StringUtils.isAlphaSpace("a"));
assertTrue(StringUtils.isAlphaSpace("A"));
assertTrue(StringUtils.isAlphaSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));
assertTrue(StringUtils.isAlphaSpace("ham kso"));
assertFalse(StringUtils.isAlphaSpace("1"));
assertFalse(StringUtils.isAlphaSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));
assertFalse(StringUtils.isAlphaSpace("_"));
assertFalse(StringUtils.isAlphaSpace("hkHKHik*khbkuh"));
assertFalse(StringUtils.isAsciiPrintable(null));
assertTrue(StringUtils.isAsciiPrintable(""));
assertTrue(StringUtils.isAsciiPrintable(" "));
assertTrue(StringUtils.isAsciiPrintable("a"));
assertTrue(StringUtils.isAsciiPrintable("A"));
assertTrue(StringUtils.isAsciiPrintable("1"));
assertTrue(StringUtils.isAsciiPrintable("Ceki"));
assertTrue(StringUtils.isAsciiPrintable("!ab2c~"));
assertTrue(StringUtils.isAsciiPrintable("1000"));
assertTrue(StringUtils.isAsciiPrintable("10 00"));
assertFalse(StringUtils.isAsciiPrintable("10\t00"));
assertTrue(StringUtils.isAsciiPrintable("10.00"));
assertTrue(StringUtils.isAsciiPrintable("10,00"));
assertTrue(StringUtils.isAsciiPrintable("!ab-c~"));
assertTrue(StringUtils.isAsciiPrintable("hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug"));
assertTrue(StringUtils.isAsciiPrintable("\u0020"));
assertTrue(StringUtils.isAsciiPrintable("\u0021"));
assertTrue(StringUtils.isAsciiPrintable("\u007e"));
assertFalse(StringUtils.isAsciiPrintable("\u007f"));
assertTrue(StringUtils.isAsciiPrintable("G?lc?"));
assertTrue(StringUtils.isAsciiPrintable("=?iso-8859-1?Q?G=FClc=FC?="));
assertFalse(StringUtils.isAsciiPrintable("G\u00fclc\u00fc"));
assertFalse(StringUtils.isNumeric(null));
assertFalse(StringUtils.isNumeric(""));
assertFalse(StringUtils.isNumeric(" "));
assertFalse(StringUtils.isNumeric("a"));
assertFalse(StringUtils.isNumeric("A"));
assertFalse(StringUtils.isNumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));
assertFalse(StringUtils.isNumeric("ham kso"));
assertTrue(StringUtils.isNumeric("1"));
assertTrue(StringUtils.isNumeric("1000"));
assertTrue(StringUtils.isNumeric("\u0967\u0968\u0969"));
assertFalse(StringUtils.isNumeric("\u0967\u0968 \u0969"));
assertFalse(StringUtils.isNumeric("2.3"));
assertFalse(StringUtils.isNumeric("10 00"));
assertFalse(StringUtils.isNumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));
assertFalse(StringUtils.isNumeric("_"));
assertFalse(StringUtils.isNumeric("hkHKHik*khbkuh"));
assertFalse(StringUtils.isNumeric("+123"));
assertFalse(StringUtils.isNumeric("-123"));
assertFalse(StringUtils.isNumericSpace(null));
assertTrue(StringUtils.isNumericSpace(""));
assertTrue(StringUtils.isNumericSpace(" "));
assertFalse(StringUtils.isNumericSpace("a"));
assertFalse(StringUtils.isNumericSpace("A"));
assertFalse(StringUtils.isNumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));
assertFalse(StringUtils.isNumericSpace("ham kso"));
assertTrue(StringUtils.isNumericSpace("1"));
assertTrue(StringUtils.isNumericSpace("1000"));
assertFalse(StringUtils.isNumericSpace("2.3"));
assertTrue(StringUtils.isNumericSpace("10 00"));
assertTrue(StringUtils.isNumericSpace("\u0967\u0968\u0969"));
assertTrue(StringUtils.isNumericSpace("\u0967\u0968 \u0969"));
assertFalse(StringUtils.isNumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));
assertFalse(StringUtils.isNumericSpace("_"));
assertFalse(StringUtils.isNumericSpace("hkHKHik*khbkuh"));
assertFalse(StringUtils.isWhitespace(null));
assertTrue(StringUtils.isWhitespace(""));
assertTrue(StringUtils.isWhitespace(" "));
assertTrue(StringUtils.isWhitespace("\t \n \t"));
assertFalse(StringUtils.isWhitespace("\t aa\n \t"));
assertTrue(StringUtils.isWhitespace(" "));
assertFalse(StringUtils.isWhitespace(" a "));
assertFalse(StringUtils.isWhitespace("a  "));
assertFalse(StringUtils.isWhitespace("  a"));
assertFalse(StringUtils.isWhitespace("aba"));
assertTrue(StringUtils.isWhitespace(StringUtilsTest.WHITESPACE));
assertFalse(StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE));
private void assertIsEquals(final Object array1, final Object array2, final Object array3) {assertTrue(ArrayUtils.isEquals(array1, array1));
assertTrue(ArrayUtils.isEquals(array2, array2));
assertTrue(ArrayUtils.isEquals(array3, array3));
assertFalse(ArrayUtils.isEquals(array1, array2));
assertFalse(ArrayUtils.isEquals(array2, array1));
assertFalse(ArrayUtils.isEquals(array1, array3));
assertFalse(ArrayUtils.isEquals(array3, array1));
assertFalse(ArrayUtils.isEquals(array1, array2));
assertFalse(ArrayUtils.isEquals(array2, array1));
assertTrue(obj instanceof String[]);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(ArrayUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(ArrayUtils.class.getModifiers()));
assertFalse(ArrayUtils.contains(null, null));
assertFalse(ArrayUtils.contains(null, "1"));
assertTrue(ArrayUtils.contains(array, "0"));
assertTrue(ArrayUtils.contains(array, "1"));
assertTrue(ArrayUtils.contains(array, "2"));
assertTrue(ArrayUtils.contains(array, "3"));
assertFalse(ArrayUtils.contains(array, "notInArray"));
assertTrue(ArrayUtils.contains(array, null));
assertFalse(ArrayUtils.containsAny(null, null));
assertFalse(ArrayUtils.containsAny(null, "1"));
assertTrue(ArrayUtils.containsAny(array, "0"));
assertTrue(ArrayUtils.containsAny(array, "1"));
assertTrue(ArrayUtils.containsAny(array, "2"));
assertTrue(ArrayUtils.containsAny(array, "3"));
assertFalse(ArrayUtils.containsAny(array, "notInArray"));
assertTrue(ArrayUtils.containsAny(array, new String[] {null}));
assertTrue(ArrayUtils.contains(array, new LANG1261ParentObject()));
assertFalse(ArrayUtils.contains(array, true));
assertTrue(ArrayUtils.contains(array, true));
assertTrue(ArrayUtils.contains(array, false));
assertTrue(ArrayUtils.contains(array, true));
assertFalse(ArrayUtils.contains(array, false));
assertFalse(ArrayUtils.contains(array, (byte) 1));
assertTrue(ArrayUtils.contains(array, (byte) 0));
assertTrue(ArrayUtils.contains(array, (byte) 1));
assertTrue(ArrayUtils.contains(array, (byte) 2));
assertTrue(ArrayUtils.contains(array, (byte) 3));
assertFalse(ArrayUtils.contains(array, (byte) 99));
assertFalse(ArrayUtils.contains(array, 'b'));
assertTrue(ArrayUtils.contains(array, 'a'));
assertTrue(ArrayUtils.contains(array, 'b'));
assertTrue(ArrayUtils.contains(array, 'c'));
assertTrue(ArrayUtils.contains(array, 'd'));
assertFalse(ArrayUtils.contains(array, 'e'));
assertFalse(ArrayUtils.contains(array, (double) 1));
assertTrue(ArrayUtils.contains(array, (double) 0));
assertTrue(ArrayUtils.contains(array, (double) 1));
assertTrue(ArrayUtils.contains(array, (double) 2));
assertTrue(ArrayUtils.contains(array, (double) 3));
assertFalse(ArrayUtils.contains(array, (double) 99));
assertTrue(ArrayUtils.contains(a, Double.POSITIVE_INFINITY));
assertTrue(ArrayUtils.contains(a, Double.NEGATIVE_INFINITY));
assertTrue(ArrayUtils.contains(a, Double.NaN));
assertFalse(ArrayUtils.contains(array, (double) 1, (double) 0));
assertFalse(ArrayUtils.contains(array, 4.0, 0.33));
assertFalse(ArrayUtils.contains(array, 2.5, 0.49));
assertTrue(ArrayUtils.contains(array, 2.5, 0.50));
assertTrue(ArrayUtils.contains(array, 2.5, 0.51));
assertFalse(ArrayUtils.contains(array, (float) 1));
assertTrue(ArrayUtils.contains(array, (float) 0));
assertTrue(ArrayUtils.contains(array, (float) 1));
assertTrue(ArrayUtils.contains(array, (float) 2));
assertTrue(ArrayUtils.contains(array, (float) 3));
assertFalse(ArrayUtils.contains(array, (float) 99));
assertTrue(ArrayUtils.contains(array, Float.POSITIVE_INFINITY));
assertTrue(ArrayUtils.contains(array, Float.NEGATIVE_INFINITY));
assertTrue(ArrayUtils.contains(array, Float.NaN));
assertFalse(ArrayUtils.contains(array, 1));
assertTrue(ArrayUtils.contains(array, 0));
assertTrue(ArrayUtils.contains(array, 1));
assertTrue(ArrayUtils.contains(array, 2));
assertTrue(ArrayUtils.contains(array, 3));
assertFalse(ArrayUtils.contains(array, 99));
assertFalse(ArrayUtils.contains(array, 1));
assertTrue(ArrayUtils.contains(array, 0));
assertTrue(ArrayUtils.contains(array, 1));
assertTrue(ArrayUtils.contains(array, 2));
assertTrue(ArrayUtils.contains(array, 3));
assertFalse(ArrayUtils.contains(array, 99));
assertFalse(ArrayUtils.contains(array, (short) 1));
assertTrue(ArrayUtils.contains(array, (short) 0));
assertTrue(ArrayUtils.contains(array, (short) 1));
assertTrue(ArrayUtils.contains(array, (short) 2));
assertTrue(ArrayUtils.contains(array, (short) 3));
assertFalse(ArrayUtils.contains(array, (short) 99));
assertFalse(ArrayUtils.isArrayIndexValid(null, 0));
assertFalse(ArrayUtils.isArrayIndexValid(array, 1));
assertFalse(ArrayUtils.isArrayIndexValid(array, -1));
assertTrue(ArrayUtils.isArrayIndexValid(array, 0));
assertTrue(ArrayUtils.isEmpty((Object[]) null));
assertTrue(ArrayUtils.isEmpty(emptyArray));
assertFalse(ArrayUtils.isEmpty(notEmptyArray));
assertTrue(ArrayUtils.isEmpty((long[]) null));
assertTrue(ArrayUtils.isEmpty(emptyLongArray));
assertFalse(ArrayUtils.isEmpty(notEmptyLongArray));
assertTrue(ArrayUtils.isEmpty((int[]) null));
assertTrue(ArrayUtils.isEmpty(emptyIntArray));
assertFalse(ArrayUtils.isEmpty(notEmptyIntArray));
assertTrue(ArrayUtils.isEmpty((short[]) null));
assertTrue(ArrayUtils.isEmpty(emptyShortArray));
assertFalse(ArrayUtils.isEmpty(notEmptyShortArray));
assertTrue(ArrayUtils.isEmpty((char[]) null));
assertTrue(ArrayUtils.isEmpty(emptyCharArray));
assertFalse(ArrayUtils.isEmpty(notEmptyCharArray));
assertTrue(ArrayUtils.isEmpty((byte[]) null));
assertTrue(ArrayUtils.isEmpty(emptyByteArray));
assertFalse(ArrayUtils.isEmpty(notEmptyByteArray));
assertTrue(ArrayUtils.isEmpty((double[]) null));
assertTrue(ArrayUtils.isEmpty(emptyDoubleArray));
assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray));
assertTrue(ArrayUtils.isEmpty((float[]) null));
assertTrue(ArrayUtils.isEmpty(emptyFloatArray));
assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray));
assertTrue(ArrayUtils.isEmpty((boolean[]) null));
assertTrue(ArrayUtils.isEmpty(emptyBooleanArray));
assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray));
assertTrue(ArrayUtils.isEquals(array3, array3));
assertTrue(ArrayUtils.isEquals(array3, array4));
assertTrue(ArrayUtils.isEquals(null, null));
assertFalse(ArrayUtils.isEquals(null, array4));
assertFalse(ArrayUtils.isNotEmpty((Object[]) null));
assertFalse(ArrayUtils.isNotEmpty(emptyArray));
assertTrue(ArrayUtils.isNotEmpty(notEmptyArray));
assertFalse(ArrayUtils.isNotEmpty((long[]) null));
assertFalse(ArrayUtils.isNotEmpty(emptyLongArray));
assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray));
assertFalse(ArrayUtils.isNotEmpty((int[]) null));
assertFalse(ArrayUtils.isNotEmpty(emptyIntArray));
assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray));
assertFalse(ArrayUtils.isNotEmpty((short[]) null));
assertFalse(ArrayUtils.isNotEmpty(emptyShortArray));
assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray));
assertFalse(ArrayUtils.isNotEmpty((char[]) null));
assertFalse(ArrayUtils.isNotEmpty(emptyCharArray));
assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray));
assertFalse(ArrayUtils.isNotEmpty((byte[]) null));
assertFalse(ArrayUtils.isNotEmpty(emptyByteArray));
assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray));
assertFalse(ArrayUtils.isNotEmpty((double[]) null));
assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray));
assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray));
assertFalse(ArrayUtils.isNotEmpty((float[]) null));
assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray));
assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray));
assertFalse(ArrayUtils.isNotEmpty((boolean[]) null));
assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray));
assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertFalse(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertFalse(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertFalse(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertFalse(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array, c));
assertTrue(ArrayUtils.isSorted(array, c));
assertTrue(ArrayUtils.isSorted(array, c));
assertFalse(ArrayUtils.isSorted(array, c));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertFalse(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertFalse(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertFalse(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertFalse(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertFalse(ArrayUtils.isSorted(array));
assertTrue(array[0]);
assertFalse(array[1]);
assertFalse(array[2]);
assertTrue(array[0]);
assertFalse(array[1]);
assertFalse(array[2]);
assertFalse(array[0]);
assertFalse(array[1]);
assertTrue(array[2]);
assertTrue(array[0]);
assertFalse(array[1]);
assertFalse(array[2]);
assertTrue(array[0]);
assertFalse(array[1]);
assertFalse(array[2]);
assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayObject));
assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayBoolean));
assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayLong));
assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayInt));
assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayShort));
assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayChar));
assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayByte));
assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayDouble));
assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayFloat));
assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayObject));
assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayBoolean));
assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayLong));
assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayInt));
assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayShort));
assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayChar));
assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayByte));
assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayDouble));
assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayFloat));
assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayObject));
assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayBoolean));
assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayLong));
assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayInt));
assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayShort));
assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayChar));
assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayByte));
assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayDouble));
assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayFloat));
assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayObject));
assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayBoolean));
assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayLong));
assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayInt));
assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayShort));
assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayChar));
assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayByte));
assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayDouble));
assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayFloat));
assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayObject));
assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayBoolean));
assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayLong));
assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayInt));
assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayShort));
assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayChar));
assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayByte));
assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayDouble));
assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayFloat));
assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayObject));
assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayBoolean));
assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayLong));
assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayInt));
assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayShort));
assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayChar));
assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayByte));
assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayDouble));
assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayFloat));
assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayObject));
assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayBoolean));
assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayLong));
assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayInt));
assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayShort));
assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayChar));
assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayByte));
assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayDouble));
assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayFloat));
assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayObject));
assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayBoolean));
assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayLong));
assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayInt));
assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayShort));
assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayChar));
assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayByte));
assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayDouble));
assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayFloat));
assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayObject));
assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayBoolean));
assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayLong));
assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayInt));
assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayShort));
assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayChar));
assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayByte));
assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayDouble));
assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayFloat));
assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayObject));
assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayBoolean));
assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayLong));
assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayInt));
assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayShort));
assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayChar));
assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayByte));
assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayDouble));
assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayObject));
assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayBoolean));
assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayLong));
assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayInt));
assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayShort));
assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayChar));
assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayByte));
assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayDouble));
assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayObject));
assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayBoolean));
assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayLong));
assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayInt));
assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayShort));
assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayChar));
assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayByte));
assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayDouble));
assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayObject));
assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayBoolean));
assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayLong));
assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayInt));
assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayShort));
assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayChar));
assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayByte));
assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayDouble));
assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayObject));
assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayBoolean));
assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayLong));
assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayInt));
assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayShort));
assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayChar));
assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayByte));
assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayDouble));
assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayObject));
assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayBoolean));
assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayLong));
assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayInt));
assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayShort));
assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayChar));
assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayByte));
assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayDouble));
assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayObject));
assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayBoolean));
assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayLong));
assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayInt));
assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayShort));
assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayChar));
assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayByte));
assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayDouble));
assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayObject));
assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayBoolean));
assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayLong));
assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayInt));
assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayShort));
assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayChar));
assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayByte));
assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayDouble));
assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayObject));
assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayBoolean));
assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayLong));
assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayInt));
assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayShort));
assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayChar));
assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayByte));
assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayDouble));
assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
assertTrue(ArrayUtils.isSameType(new Object[0], new Object[0]));
assertFalse(ArrayUtils.isSameType(new String[0], new Object[0]));
assertTrue(ArrayUtils.isSameType(new String[0][0], new String[0][0]));
assertFalse(ArrayUtils.isSameType(new String[0], new String[0][0]));
assertFalse(ArrayUtils.isSameType(new String[0][0], new String[0]));
assertFalse(array[0]);
assertTrue(array[1]);
assertTrue(array[2]);
assertFalse(array[3]);
assertTrue(array[0]);
assertTrue(array[1]);
assertFalse(array[2]);
assertFalse(array[3]);
assertFalse(array[0]);
assertTrue(array[1]);
assertTrue(array[2]);
assertFalse(array[3]);
assertFalse(array[0]);
assertFalse(array[1]);
assertTrue(array[2]);
assertTrue(array[3]);
assertFalse(Arrays.equals(array1, array2));
assertTrue(ArrayUtils.contains(array1, element), "Element " + element + " not found");
assertFalse(Arrays.equals(array1, array2));
assertFalse(Arrays.equals(array1, array2));
assertTrue(ArrayUtils.contains(array1, element), "Element " + element + " not found");
assertFalse(Arrays.equals(array1, array2));
assertTrue(ArrayUtils.contains(array1, element), "Element " + element + " not found");
assertFalse(Arrays.equals(array1, array2));
assertTrue(ArrayUtils.contains(array1, element), "Element " + element + " not found");
assertFalse(Arrays.equals(array1, array2));
assertTrue(ArrayUtils.contains(array1, element), "Element " + element + " not found");
assertFalse(Arrays.equals(array1, array2));
assertTrue(ArrayUtils.contains(array1, element), "Element " + element + " not found");
assertFalse(Arrays.equals(array1, array2));
assertTrue(ArrayUtils.contains(array1, element), "Element " + element + " not found");
assertFalse(Arrays.equals(array1, array2));
assertTrue(ArrayUtils.contains(array1, element), "Element " + element + " not found");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), "0 start, mid end");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), "0 start, length end");
assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), "mid start, mid end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),"mid start, length end");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),"start undershoot, normal end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),"normal start, end overshoot");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), "start undershoot, end overshoot");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), "0 start, mid end");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), "0 start, length end");
assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), "mid start, mid end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),"mid start, length end");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),"start undershoot, normal end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),"normal start, end overshoot");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), "start undershoot, end overshoot");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), "0 start, mid end");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), "0 start, length end");
assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), "mid start, mid end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),"mid start, length end");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),"start undershoot, normal end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),"normal start, end overshoot");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), "start undershoot, end overshoot");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), "0 start, mid end");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), "0 start, length end");
assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), "mid start, mid end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),"mid start, length end");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),"start undershoot, normal end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),"normal start, end overshoot");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), "start undershoot, end overshoot");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), "0 start, mid end");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), "0 start, length end");
assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), "mid start, mid end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),"mid start, length end");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),"start undershoot, normal end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),"normal start, end overshoot");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), "start undershoot, end overshoot");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), "0 start, mid end");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), "0 start, length end");
assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), "mid start, mid end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),"mid start, length end");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),"start undershoot, normal end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),"normal start, end overshoot");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), "start undershoot, end overshoot");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), "0 start, mid end");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), "0 start, length end");
assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), "mid start, mid end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),"mid start, length end");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),"start undershoot, normal end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),"normal start, end overshoot");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), "start undershoot, end overshoot");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), "0 start, mid end");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), "0 start, length end");
assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), "mid start, mid end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),"mid start, length end");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),"start undershoot, normal end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),"normal start, end overshoot");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), "start undershoot, end overshoot");
assertFalse(array[0]);
assertFalse(array[1]);
assertTrue(array[2]);
assertTrue(array[0]);
assertTrue(array[1]);
assertFalse(array[2]);
assertFalse(array[3]);
assertFalse(array[0]);
assertTrue(array[1]);
assertFalse(array[2]);
assertFalse(array[0]);
assertTrue(array[1]);
assertTrue(array[2]);
assertFalse(array[0]);
assertTrue(array[1]);
assertTrue(array[2]);
assertTrue(array[0]);
assertTrue(array[1]);
assertFalse(array[2]);
assertTrue(array[0]);
assertTrue(array[1]);
assertFalse(array[2]);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(SerializationUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(SerializationUtils.class.getModifiers()));
assertTrue(test instanceof HashMap<?, ?>);
assertTrue(test instanceof HashMap<?, ?>);
assertTrue(test instanceof HashMap<?, ?>);
assertTrue(StrMatcher.charSetMatcher("a") instanceof StrMatcher.CharMatcher);
assertTrue(StrMatcher.charSetMatcher("a".toCharArray()) instanceof StrMatcher.CharMatcher);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(WordUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(WordUtils.class.getModifiers()));
assertFalse(WordUtils.containsAllWords(null, (String) null));
assertFalse(WordUtils.containsAllWords(null, ""));
assertFalse(WordUtils.containsAllWords(null, "ab"));
assertFalse(WordUtils.containsAllWords("", (String) null));
assertFalse(WordUtils.containsAllWords("", ""));
assertFalse(WordUtils.containsAllWords("", "ab"));
assertFalse(WordUtils.containsAllWords("foo", (String) null));
assertFalse(WordUtils.containsAllWords("bar", ""));
assertFalse(WordUtils.containsAllWords("zzabyycdxx", "by"));
assertTrue(WordUtils.containsAllWords("lorem ipsum dolor sit amet", "ipsum", "lorem", "dolor"));
assertFalse(WordUtils.containsAllWords("lorem ipsum dolor sit amet", "ipsum", null, "lorem", "dolor"));
assertFalse(WordUtils.containsAllWords("lorem ipsum null dolor sit amet", "ipsum", null, "lorem", "dolor"));
assertFalse(WordUtils.containsAllWords("ab", "b"));
assertFalse(WordUtils.containsAllWords("ab", "z"));
assertFalse(subject.translate(0xd7ff, writer));
assertFalse(subject.translate(0xe000, writer));
assertTrue(subject.translate(0xd800, writer));
assertTrue(subject.translate(0xdfff, writer));
assertTrue(col0.add(sa[i][0]), "Already added entry 0: "+i+" "+sa[i][0]);
assertTrue(col1.add(sa[i][1]), "Already added entry 1: "+i+" "+sa[i][1]);
assertTrue(success, "One or more errors detected");
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tokenizer.hasNext());
assertFalse(tokenizer.hasPrevious());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tkn.hasPrevious());
assertTrue(tkn.hasNext());
assertTrue(tkn.hasPrevious());
assertTrue(tkn.hasNext());
assertTrue(tkn.hasPrevious());
assertTrue(tkn.hasNext());
assertTrue(tkn.hasPrevious());
assertFalse(tkn.hasNext());
assertTrue(tkn.hasPrevious());
assertFalse(tkn.hasNext());
assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);
assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.CharMatcher);
assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);
assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);
assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);
assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher);
assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);
assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);
assertTrue(sub.getValueDelimiterMatcher() instanceof StrMatcher.StringMatcher);
assertTrue(sub.getValueDelimiterMatcher() instanceof StrMatcher.CharMatcher);
assertTrue(sub.getValueDelimiterMatcher() instanceof StrMatcher.StringMatcher);
assertFalse(sub.isPreserveEscapes());
assertTrue(sub.isPreserveEscapes());
assertTrue(sub.replaceIn(buf));
assertTrue(sub.replaceIn(buf, 1, buf.length() - 2));
assertTrue(sub.replaceIn(builder));
assertTrue(sub.replaceIn(builder, 1, builder.length() - 2));
assertTrue(sub.replaceIn(bld));
assertTrue(sub.replaceIn(bld, 1, bld.length() - 2));
assertFalse(sub.replaceIn((StringBuffer) null));
assertFalse(sub.replaceIn((StringBuffer) null, 0, 100));
assertFalse(sub.replaceIn((StrBuilder) null));
assertFalse(sub.replaceIn((StrBuilder) null, 0, 100));
assertFalse(sub.replaceIn(bld));
assertTrue(sb.isEmpty());
assertTrue(sb.isEmpty());
assertTrue(sb.capacity() >= 32);
assertTrue(sb.isEmpty());
assertTrue(sb.capacity() >= 32);
assertFalse(sb.isEmpty());
assertTrue(sb.capacity() >= 32);
assertTrue(sb.isEmpty());
assertTrue(sb.capacity() > 32);
assertFalse(sb.isEmpty());
assertTrue(sb.capacity() > 16);
assertFalse(sb.isEmpty());
assertFalse(sb.isEmpty());
assertFalse(sb.isEmpty());
assertTrue(sb.capacity() >= 16);
assertFalse(sb.isEmpty());
assertTrue(sb.capacity() >= 32);
assertFalse(sb.isEmpty());
assertTrue(sb.capacity() >= 32);
assertTrue(sb.isEmpty());
assertTrue(sb.capacity() >= 2);
assertTrue(sb.capacity() >= 0);
assertTrue(sb.capacity() >= 40);
assertTrue(sb.isEmpty());
assertFalse(sb.isEmpty());
assertTrue(sb.isEmpty());
assertTrue(sb.buffer.length >= 5);
assertFalse(sb.startsWith("a"));
assertFalse(sb.startsWith(null));
assertTrue(sb.startsWith(""));
assertTrue(sb.startsWith("a"));
assertTrue(sb.startsWith("ab"));
assertTrue(sb.startsWith("abc"));
assertFalse(sb.startsWith("cba"));
assertFalse(sb.endsWith("a"));
assertFalse(sb.endsWith("c"));
assertTrue(sb.endsWith(""));
assertFalse(sb.endsWith(null));
assertTrue(sb.endsWith("c"));
assertTrue(sb.endsWith("bc"));
assertTrue(sb.endsWith("abc"));
assertFalse(sb.endsWith("cba"));
assertFalse(sb.endsWith("abcd"));
assertFalse(sb.endsWith(" abc"));
assertFalse(sb.endsWith("abc "));
assertTrue(sb.contains('a'));
assertTrue(sb.contains('o'));
assertTrue(sb.contains('z'));
assertFalse(sb.contains('1'));
assertTrue(sb.contains("a"));
assertTrue(sb.contains("pq"));
assertTrue(sb.contains("z"));
assertFalse(sb.contains("zyx"));
assertFalse(sb.contains((String) null));
assertTrue(sb.contains(StrMatcher.charMatcher('a')));
assertTrue(sb.contains(StrMatcher.stringMatcher("pq")));
assertTrue(sb.contains(StrMatcher.charMatcher('z')));
assertFalse(sb.contains(StrMatcher.stringMatcher("zy")));
assertFalse(sb.contains((StrMatcher) null));
assertFalse(sb.contains(A_NUMBER_MATCHER));
assertTrue(sb.contains(A_NUMBER_MATCHER));
assertTrue(reader.ready());
assertFalse(reader.ready());
assertTrue(reader.markSupported());
assertTrue(reader.ready());
assertTrue(reader.ready());
assertTrue(sb1.equalsIgnoreCase(sb1));
assertTrue(sb1.equalsIgnoreCase(sb2));
assertTrue(sb2.equalsIgnoreCase(sb2));
assertFalse(sb1.equalsIgnoreCase(sb2));
assertTrue(sb1.equalsIgnoreCase(sb2));
assertTrue(sb1.equalsIgnoreCase(sb2));
assertTrue(sb1.equalsIgnoreCase(sb1));
assertTrue(sb2.equalsIgnoreCase(sb2));
assertTrue(sb1.equalsIgnoreCase(sb2));
assertTrue(sb1.equals(sb2));
assertTrue(sb1.equals(sb1));
assertTrue(sb2.equals(sb2));
assertFalse(sb1.equals(sb2));
assertFalse(sb1.equals(sb2));
assertTrue(sb1.equals(sb2));
assertFalse(sb.equals(other));
assertTrue(hc2a != 0);
assertFalse(sb.contains('h'), "The contains(char) method is looking beyond the end of the string");
assertFalse(rb.contains(null), "should not contain null");
assertTrue(rb.contains(10), "should contain 10");
assertTrue(rb.contains(-10), "should contain -10");
assertFalse(rb.contains(21), "should not contain 21");
assertFalse(rb.contains(-11), "should not contain -11");
assertFalse(rb.contains(null), "should not contain null");
assertTrue(rb.contains(10), "should contain 10");
assertTrue(rb.contains(-10), "should contain -10");
assertTrue(rb.contains(21), "should contain 21");
assertTrue(rb.contains(-11), "should contain -11");
assertFalse(rbstr.contains(null), "should not contain null");
assertTrue(rbstr.contains("house"), "should contain house");
assertTrue(rbstr.contains("i"), "should contain i");
assertFalse(rbstr.contains("hose"), "should not contain hose");
assertFalse(rbstr.contains("ice"), "should not contain ice");
assertFalse(rbstr.contains(null), "should not contain null");
assertTrue(rbstr.contains("house"), "should contain house");
assertTrue(rbstr.contains("i"), "should contain i");
assertFalse(rbstr.contains("houses"), "should not contain houses");
assertFalse(rbstr.contains(""), "should not contain ''");
assertTrue(r1.isNaturalOrdering());
assertTrue(r2.isNaturalOrdering());
assertTrue(mixed.contains(derivedComparableA));
assertTrue(same.contains(derivedComparableA));
assertTrue(rangeA.contains(derivedComparableA));
assertTrue(rangeB.contains(derivedComparableB));
assertFalse(intRange.contains(null));
assertFalse(intRange.contains(5));
assertTrue(intRange.contains(10));
assertTrue(intRange.contains(15));
assertTrue(intRange.contains(20));
assertFalse(intRange.contains(25));
assertFalse(intRange.containsRange(null));
assertTrue(intRange.containsRange(Range.between(12, 18)));
assertFalse(intRange.containsRange(Range.between(32, 45)));
assertFalse(intRange.containsRange(Range.between(2, 8)));
assertTrue(intRange.containsRange(Range.between(10, 20)));
assertFalse(intRange.containsRange(Range.between(9, 14)));
assertFalse(intRange.containsRange(Range.between(16, 21)));
assertTrue(intRange.containsRange(Range.between(10, 19)));
assertFalse(intRange.containsRange(Range.between(10, 21)));
assertTrue(intRange.containsRange(Range.between(11, 20)));
assertFalse(intRange.containsRange(Range.between(9, 20)));
assertFalse(intRange.containsRange(Range.between(-11, -18)));
assertTrue(intRange.hashCode() != 0);
assertFalse(intRange.isAfter(null));
assertTrue(intRange.isAfter(5));
assertFalse(intRange.isAfter(10));
assertFalse(intRange.isAfter(15));
assertFalse(intRange.isAfter(20));
assertFalse(intRange.isAfter(25));
assertFalse(intRange.isAfterRange(null));
assertTrue(intRange.isAfterRange(Range.between(5, 9)));
assertFalse(intRange.isAfterRange(Range.between(5, 10)));
assertFalse(intRange.isAfterRange(Range.between(5, 20)));
assertFalse(intRange.isAfterRange(Range.between(5, 25)));
assertFalse(intRange.isAfterRange(Range.between(15, 25)));
assertFalse(intRange.isAfterRange(Range.between(21, 25)));
assertFalse(intRange.isAfterRange(Range.between(10, 20)));
assertFalse(intRange.isBefore(null));
assertFalse(intRange.isBefore(5));
assertFalse(intRange.isBefore(10));
assertFalse(intRange.isBefore(15));
assertFalse(intRange.isBefore(20));
assertTrue(intRange.isBefore(25));
assertFalse(intRange.isBeforeRange(null));
assertFalse(intRange.isBeforeRange(Range.between(5, 9)));
assertFalse(intRange.isBeforeRange(Range.between(5, 10)));
assertFalse(intRange.isBeforeRange(Range.between(5, 20)));
assertFalse(intRange.isBeforeRange(Range.between(5, 25)));
assertFalse(intRange.isBeforeRange(Range.between(15, 25)));
assertTrue(intRange.isBeforeRange(Range.between(21, 25)));
assertFalse(intRange.isBeforeRange(Range.between(10, 20)));
assertFalse(intRange.isEndedBy(null));
assertFalse(intRange.isEndedBy(5));
assertFalse(intRange.isEndedBy(10));
assertFalse(intRange.isEndedBy(15));
assertTrue(intRange.isEndedBy(20));
assertFalse(intRange.isEndedBy(25));
assertFalse(intRange.isOverlappedBy(null));
assertTrue(intRange.isOverlappedBy(Range.between(12, 18)));
assertFalse(intRange.isOverlappedBy(Range.between(32, 45)));
assertFalse(intRange.isOverlappedBy(Range.between(2, 8)));
assertTrue(intRange.isOverlappedBy(Range.between(10, 20)));
assertTrue(intRange.isOverlappedBy(Range.between(9, 14)));
assertTrue(intRange.isOverlappedBy(Range.between(16, 21)));
assertTrue(intRange.isOverlappedBy(Range.between(10, 19)));
assertTrue(intRange.isOverlappedBy(Range.between(10, 21)));
assertTrue(intRange.isOverlappedBy(Range.between(11, 20)));
assertTrue(intRange.isOverlappedBy(Range.between(9, 20)));
assertFalse(intRange.isOverlappedBy(Range.between(-11, -18)));
assertTrue(intRange.isOverlappedBy(Range.between(9, 21)));
assertFalse(intRange.isStartedBy(null));
assertFalse(intRange.isStartedBy(5));
assertTrue(intRange.isStartedBy(10));
assertFalse(intRange.isStartedBy(15));
assertFalse(intRange.isStartedBy(20));
assertFalse(intRange.isStartedBy(25));
assertFalse(ri.contains(null), "should not contain null");
assertTrue(ri.contains(10), "should contain 10");
assertFalse(ri.contains(11), "should not contain 11");
assertFalse(ri.contains(null), "should not contain null");
assertTrue(ri.contains(10), "should contain 10");
assertTrue(ri.contains(11), "should contain 11");
assertTrue(chars.contains('b'));
assertFalse(chars.contains('B'));
assertTrue(CharUtils.compare('a', 'b') < 0);
assertTrue(CharUtils.compare('c', 'a') > 0);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(CharUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(CharUtils.class.getModifiers()));
assertTrue(CharUtils.isAscii('a'));
assertTrue(CharUtils.isAscii('A'));
assertTrue(CharUtils.isAscii('3'));
assertTrue(CharUtils.isAscii('-'));
assertTrue(CharUtils.isAscii('\n'));
assertFalse(CharUtils.isAscii(CHAR_COPY));
assertTrue(CharUtils.isAsciiAlpha('a'));
assertTrue(CharUtils.isAsciiAlpha('A'));
assertFalse(CharUtils.isAsciiAlpha('3'));
assertFalse(CharUtils.isAsciiAlpha('-'));
assertFalse(CharUtils.isAsciiAlpha('\n'));
assertFalse(CharUtils.isAsciiAlpha(CHAR_COPY));
assertTrue(CharUtils.isAsciiAlpha((char) i));
assertFalse(CharUtils.isAsciiAlpha((char) i));
assertTrue(CharUtils.isAsciiAlphaLower('a'));
assertFalse(CharUtils.isAsciiAlphaLower('A'));
assertFalse(CharUtils.isAsciiAlphaLower('3'));
assertFalse(CharUtils.isAsciiAlphaLower('-'));
assertFalse(CharUtils.isAsciiAlphaLower('\n'));
assertFalse(CharUtils.isAsciiAlphaLower(CHAR_COPY));
assertTrue(CharUtils.isAsciiAlphaLower((char) i));
assertFalse(CharUtils.isAsciiAlphaLower((char) i));
assertTrue(CharUtils.isAsciiAlphanumeric('a'));
assertTrue(CharUtils.isAsciiAlphanumeric('A'));
assertTrue(CharUtils.isAsciiAlphanumeric('3'));
assertFalse(CharUtils.isAsciiAlphanumeric('-'));
assertFalse(CharUtils.isAsciiAlphanumeric('\n'));
assertFalse(CharUtils.isAsciiAlphanumeric(CHAR_COPY));
assertTrue(CharUtils.isAsciiAlphanumeric((char) i));
assertFalse(CharUtils.isAsciiAlphanumeric((char) i));
assertFalse(CharUtils.isAsciiAlphaUpper('a'));
assertTrue(CharUtils.isAsciiAlphaUpper('A'));
assertFalse(CharUtils.isAsciiAlphaUpper('3'));
assertFalse(CharUtils.isAsciiAlphaUpper('-'));
assertFalse(CharUtils.isAsciiAlphaUpper('\n'));
assertFalse(CharUtils.isAsciiAlphaUpper(CHAR_COPY));
assertTrue(CharUtils.isAsciiAlphaUpper((char) i));
assertFalse(CharUtils.isAsciiAlphaUpper((char) i));
assertFalse(CharUtils.isAsciiControl('a'));
assertFalse(CharUtils.isAsciiControl('A'));
assertFalse(CharUtils.isAsciiControl('3'));
assertFalse(CharUtils.isAsciiControl('-'));
assertTrue(CharUtils.isAsciiControl('\n'));
assertFalse(CharUtils.isAsciiControl(CHAR_COPY));
assertTrue(CharUtils.isAsciiControl((char) i));
assertFalse(CharUtils.isAsciiControl((char) i));
assertFalse(CharUtils.isAsciiNumeric('a'));
assertFalse(CharUtils.isAsciiNumeric('A'));
assertTrue(CharUtils.isAsciiNumeric('3'));
assertFalse(CharUtils.isAsciiNumeric('-'));
assertFalse(CharUtils.isAsciiNumeric('\n'));
assertFalse(CharUtils.isAsciiNumeric(CHAR_COPY));
assertTrue(CharUtils.isAsciiNumeric((char) i));
assertFalse(CharUtils.isAsciiNumeric((char) i));
assertTrue(CharUtils.isAsciiPrintable('a'));
assertTrue(CharUtils.isAsciiPrintable('A'));
assertTrue(CharUtils.isAsciiPrintable('3'));
assertTrue(CharUtils.isAsciiPrintable('-'));
assertFalse(CharUtils.isAsciiPrintable('\n'));
assertFalse(CharUtils.isAsciiPrintable(CHAR_COPY));
assertTrue(CharUtils.isAsciiPrintable((char) i));
assertFalse(CharUtils.isAsciiPrintable((char) i));
assertTrue(toString.indexOf(includeField) > 0);
assertTrue(toString.indexOf(includeValue) > 0);
assertTrue((new StandardToStringStyle()).isUseClassName());
assertTrue((new StandardToStringStyle()).isUseFieldNames());
assertFalse((new StandardToStringStyle()).isUseShortClassName());
assertTrue((new StandardToStringStyle()).isUseIdentityHashCode());
assertTrue((new StandardToStringStyle()).isDefaultFullDetail());
assertTrue((new StandardToStringStyle()).isArrayContentDetail());
assertFalse((new StandardToStringStyle()).isFieldSeparatorAtStart());
assertFalse((new StandardToStringStyle()).isFieldSeparatorAtEnd());
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertFalse(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertFalse(toString.contains(STRING_FIELD_NAME));
assertFalse(toString.contains(INTEGER_FIELD_NAME));
assertFalse(toString.contains(STRING_FIELD_NAME));
assertTrue(builder.isExcludeNullValues());
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertFalse(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertFalse(toString.contains(STRING_FIELD_NAME));
assertFalse(toString.contains(INTEGER_FIELD_NAME));
assertFalse(toString.contains(STRING_FIELD_NAME));
assertFalse(builder.isExcludeNullValues());
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(builder.isExcludeNullValues());
assertFalse(toString.contains(STRING_FIELD_NAME));
assertFalse(toString.contains(INTEGER_FIELD_NAME));
assertFalse(toString.contains(STRING_FIELD_NAME));
assertFalse(toString.contains(INTEGER_FIELD_NAME));
assertTrue(oldBuilder.isExcludeNullValues());
assertFalse(toString.contains(STRING_FIELD_NAME));
assertFalse(toString.contains(INTEGER_FIELD_NAME));
assertTrue(expectedIterator.hasNext());
assertTrue(EqualsBuilder.reflectionEquals(o1, o1));
assertFalse(EqualsBuilder.reflectionEquals(o1, o2));
assertTrue(EqualsBuilder.reflectionEquals(o1, o2));
assertFalse(EqualsBuilder.reflectionEquals(o1, this));
assertFalse(EqualsBuilder.reflectionEquals(o1, null));
assertFalse(EqualsBuilder.reflectionEquals(null, o2));
assertTrue(EqualsBuilder.reflectionEquals(null, null));
assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));
assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), false));
assertFalse(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 0, 0, 4), new TestTTLeafObject(1, 2, 3, 4), true));
assertFalse(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 0), true));
assertFalse(EqualsBuilder.reflectionEquals(new TestTTLeafObject(0, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));
assertTrue(EqualsBuilder.reflectionEquals(ttlo, ttlo, testTransients));
assertTrue(EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 10), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 11), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(new TestSubObject(1, 11), new TestSubObject(1, 10), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestSubObject(1, 10), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(0, 10), testTransients));
assertTrue(EqualsBuilder.reflectionEquals(to1, teso, testTransients));
assertTrue(EqualsBuilder.reflectionEquals(teso, to1, testTransients));
assertTrue(EqualsBuilder.reflectionEquals(to1, ttso, false)); // Force testTransients = false for this assert
assertTrue(EqualsBuilder.reflectionEquals(ttso, to1, false)); // Force testTransients = false for this assert
assertTrue(EqualsBuilder.reflectionEquals(to1, tttso, false)); // Force testTransients = false for this assert
assertTrue(EqualsBuilder.reflectionEquals(tttso, to1, false)); // Force testTransients = false for this assert
assertTrue(EqualsBuilder.reflectionEquals(ttso, tttso, false)); // Force testTransients = false for this assert
assertTrue(EqualsBuilder.reflectionEquals(tttso, ttso, false)); // Force testTransients = false for this assert
assertFalse(EqualsBuilder.reflectionEquals(new TestObject(0), new TestEmptySubObject(1), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(new TestEmptySubObject(1), new TestObject(0), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(new TestObject(0), new TestTSubObject(1, 1), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(new TestTSubObject(1, 1), new TestObject(0), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(new TestObject(1), new TestSubObject(0, 10), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestObject(1), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(to1, ttlo));
assertFalse(EqualsBuilder.reflectionEquals(tso1, this));
assertTrue(EqualsBuilder.reflectionEquals(to, to, testTransients));
assertTrue(EqualsBuilder.reflectionEquals(to2, to2, testTransients));
assertTrue(EqualsBuilder.reflectionEquals(to, toBis, testTransients) && EqualsBuilder.reflectionEquals(toBis, to, testTransients));
assertTrue(EqualsBuilder.reflectionEquals(to, toBis, testTransients)&& EqualsBuilder.reflectionEquals(toBis, toTer, testTransients)&& EqualsBuilder.reflectionEquals(to, toTer, testTransients));
assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));
assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));
assertFalse(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));
assertFalse(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));
assertFalse(EqualsBuilder.reflectionEquals(to, null, testTransients));
assertFalse(EqualsBuilder.reflectionEquals(to2, null, testTransients));
assertFalse(EqualsBuilder.reflectionEquals(null, to, testTransients));
assertFalse(EqualsBuilder.reflectionEquals(null, to2, testTransients));
assertTrue(EqualsBuilder.reflectionEquals(null, null, testTransients));
assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals());
assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals());
assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().append(o1, o2).isEquals());
assertTrue(new EqualsBuilder().append(o1, o2).isEquals());
assertFalse(new EqualsBuilder().append(o1, this).isEquals());
assertFalse(new EqualsBuilder().append(o1, null).isEquals());
assertFalse(new EqualsBuilder().append(null, o2).isEquals());
assertTrue(new EqualsBuilder().append((Object) null, null).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a, o1_b).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_b, o1_a).isEquals());
assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_b, o2).isEquals());
assertTrue(new EqualsBuilder().setBypassReflectionClasses(bypassReflectionClasses).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a, o1_b).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_b, o1_a).isEquals());
assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_b, o2).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a, o1_a).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a, o1_b).isEquals());
assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_a, o2).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(oNull, oNull).isEquals());
assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_a, oNull).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a, o1_a).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a, o1_b).isEquals());
assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_a, o2).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a, o1_a).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a, o1_b).isEquals());
assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_a, o2).isEquals());
assertTrue(EqualsBuilder.reflectionEquals(o1_a, o1_b, false, null, true));
assertFalse(EqualsBuilder.reflectionEquals(o1_a, o2, false, null, true));
assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().append(o1, o2).isEquals());
assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().append(o1, o2).isEquals());
assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().append(o1, o2).isEquals());
assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().append(o1, o2).isEquals());
assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().append(o1, o2).isEquals());
assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().append(o1, o2).isEquals());
assertFalse(new EqualsBuilder().append(o1, Double.NaN).isEquals());
assertTrue(new EqualsBuilder().append(Double.NaN, Double.NaN).isEquals());
assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).isEquals());
assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().append(o1, o2).isEquals());
assertFalse(new EqualsBuilder().append(o1, Float.NaN).isEquals());
assertTrue(new EqualsBuilder().append(Float.NaN, Float.NaN).isEquals());
assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals());
assertTrue(equalsBuilder.isEquals());
assertTrue(equalsBuilder.isEquals());
assertFalse(equalsBuilder.isEquals());
assertTrue(equalsBuilder.isEquals());
assertFalse(equalsBuilder.isEquals());
assertTrue(equalsBuilder.isEquals());
assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().append(o1, o2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj2, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array3).isEquals());
assertFalse(new EqualsBuilder().append(array3, array1).isEquals());
assertFalse(new EqualsBuilder().append(array2, array3).isEquals());
assertFalse(new EqualsBuilder().append(array3, array2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(x, x).isEquals());
assertTrue(new EqualsBuilder().append(y, y).isEquals());
assertTrue(new EqualsBuilder().append(x, y).isEquals());
assertTrue(new EqualsBuilder().append(y, x).isEquals());
assertFalse(EqualsBuilder.reflectionEquals(x1, x2));
assertFalse(EqualsBuilder.reflectionEquals(x1, x2, (String[]) null));
assertFalse(EqualsBuilder.reflectionEquals(x1, x2));
assertFalse(EqualsBuilder.reflectionEquals(x1, x2, "xxx"));
assertFalse(EqualsBuilder.reflectionEquals(x1, x2, "two"));
assertFalse(EqualsBuilder.reflectionEquals(x1, x2, "three"));
assertTrue(EqualsBuilder.reflectionEquals(x1, x2, "two", "three"));
assertTrue(EqualsBuilder.reflectionEquals(x1, x2, "one", "two", "three"));
assertTrue(EqualsBuilder.reflectionEquals(x1, x2, "one", "two", "three", "xxx"));
assertTrue(EqualsBuilder.reflectionEquals(x1, x2, Arrays.asList("one", "two", "three")));
assertTrue(EqualsBuilder.reflectionEquals(x1, x2,  Arrays.asList("one", "two", "three", "xxx")));
assertFalse(EqualsBuilder.reflectionEquals(o1, o2));
assertTrue(EqualsBuilder.reflectionEquals(o1, o1));
assertTrue(EqualsBuilder.reflectionEquals(o1, o3));
assertFalse(EqualsBuilder.reflectionEquals(d1, d2));
assertTrue(EqualsBuilder.reflectionEquals(d1, d1));
assertTrue(EqualsBuilder.reflectionEquals(d1, d3));
assertFalse(EqualsBuilder.reflectionEquals(one, two));
assertTrue(EqualsBuilder.reflectionEquals(one, two));
assertTrue(EqualsBuilder.reflectionEquals(null, null));
assertTrue(new EqualsBuilder().reflectionAppend(o1, o1).build());
assertFalse(new EqualsBuilder().reflectionAppend(o1, o2).build());
assertTrue(new EqualsBuilder().reflectionAppend(o1, o2).build());
assertFalse(new EqualsBuilder().reflectionAppend(o1, this).build());
assertFalse(new EqualsBuilder().reflectionAppend(o1, null).build());
assertFalse(new EqualsBuilder().reflectionAppend(null, o2).build());
assertTrue(EqualsBuilder.isRegistered(firstObject, secondObject));
assertTrue(EqualsBuilder.isRegistered(secondObject, firstObject)); // LANG-1349
assertTrue(toString.contains(NOT_SECRET_FIELD));
assertTrue(toString.contains(NOT_SECRET_VALUE));
assertTrue(toString.indexOf(SECRET_VALUE) > 0);
assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0);
assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0);
assertTrue(0 > CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields));
assertTrue(0 > CompareToBuilder.reflectionCompare(x, z, testTransients, null, excludeFields));
assertTrue(0 > CompareToBuilder.reflectionCompare(y, z, testTransients, null, excludeFields));
assertTrue(0 < CompareToBuilder.reflectionCompare(y, x, testTransients, null, excludeFields));
assertTrue(0 < CompareToBuilder.reflectionCompare(z, x, testTransients, null, excludeFields));
assertTrue(0 < CompareToBuilder.reflectionCompare(z, y, testTransients, null, excludeFields));
assertTrue(0 != CompareToBuilder.reflectionCompare(tso1, new TestSubObject(1, 0), testTransients));
assertTrue(0 != CompareToBuilder.reflectionCompare(tso1, new TestSubObject(0, 1), testTransients));
assertTrue(CompareToBuilder.reflectionCompare(x, z, testTransients, null, excludeFields) > 0);
assertTrue(CompareToBuilder.reflectionCompare(x, y, testTransients) ==0 == EqualsBuilder.reflectionEquals(x, y, testTransients));
assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0);
assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0);
assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o1, o2).build().intValue() < 0);
assertTrue(new CompareToBuilder().append(o2, o1).build().intValue() > 0);
assertTrue(new CompareToBuilder().append(o1, null).build().intValue() > 0);
assertTrue(new CompareToBuilder().append(null, o1).build().intValue() < 0);
assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, null, String.CASE_INSENSITIVE_ORDER).toComparison() > 0);
assertTrue(new CompareToBuilder().append(null, o1, String.CASE_INSENSITIVE_ORDER).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o1, o2, null).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1, null).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, null, null).toComparison() > 0);
assertTrue(new CompareToBuilder().append(null, o1, null).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Long.MAX_VALUE).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Long.MAX_VALUE, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Long.MIN_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Long.MIN_VALUE, o1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Integer.MAX_VALUE).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Integer.MAX_VALUE, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Integer.MIN_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Integer.MIN_VALUE, o1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Short.MAX_VALUE).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Short.MAX_VALUE, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Short.MIN_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Short.MIN_VALUE, o1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Character.MAX_VALUE).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Character.MAX_VALUE, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Character.MIN_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Character.MIN_VALUE, o1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Byte.MAX_VALUE).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Byte.MAX_VALUE, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Byte.MIN_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Byte.MIN_VALUE, o1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Double.MAX_VALUE).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Double.MAX_VALUE, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Double.MIN_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Double.MIN_VALUE, o1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Double.NaN, Double.MAX_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Double.POSITIVE_INFINITY, Double.MAX_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Double.NEGATIVE_INFINITY, Double.MIN_VALUE).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o1, Double.NaN).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Double.NaN, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0);
assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Float.MAX_VALUE).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Float.MAX_VALUE, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Float.MIN_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Float.MIN_VALUE, o1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Float.NaN, Float.MAX_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Float.POSITIVE_INFINITY, Float.MAX_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Float.NEGATIVE_INFINITY, Float.MIN_VALUE).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o1, Float.NaN).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Float.NaN, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0);
assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);
assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);
assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);
assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);
assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);
assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);
assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);
assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);
assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);
assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(trace.contains("ContextedException"));
assertTrue(StringUtils.isEmpty(message));
assertTrue(trace.contains(TEST_MESSAGE));
assertTrue(trace.contains("ContextedException"));
assertTrue(trace.contains(TEST_MESSAGE));
assertTrue(message.contains(TEST_MESSAGE));
assertTrue(trace.contains("ContextedException"));
assertTrue(trace.contains(TEST_MESSAGE));
assertTrue(trace.contains(TEST_MESSAGE_2));
assertTrue(message.contains(TEST_MESSAGE_2));
assertTrue(trace.contains("ContextedException"));
assertTrue(trace.contains(TEST_MESSAGE));
assertTrue(trace.contains(TEST_MESSAGE_2));
assertTrue(message.contains(TEST_MESSAGE_2));
assertTrue(trace.contains("ContextedException"));
assertTrue(StringUtils.isEmpty(message));
assertTrue(trace.contains(TEST_MESSAGE));
assertTrue(trace.contains("ContextedException"));
assertTrue(trace.contains(TEST_MESSAGE));
assertTrue(message.contains(TEST_MESSAGE));
assertTrue(trace.contains("ContextedException"));
assertTrue(trace.contains(TEST_MESSAGE));
assertTrue(trace.contains(TEST_MESSAGE_2));
assertTrue(message.contains(TEST_MESSAGE_2));
assertTrue(trace.contains("ContextedException"));
assertTrue(trace.contains(TEST_MESSAGE));
assertTrue(trace.contains(TEST_MESSAGE_2));
assertTrue(message.contains(TEST_MESSAGE_2));
assertTrue(message.contains(TEST_MESSAGE));
assertTrue(message.contains("test1"));
assertTrue(message.contains("test2"));
assertTrue(message.contains("test Date"));
assertTrue(message.contains("test Nbr"));
assertTrue(message.contains("some value"));
assertTrue(message.contains("5"));
assertTrue(exceptionContext.getContextLabels().contains("test1"));
assertTrue(exceptionContext.getContextLabels().contains("test2"));
assertTrue(exceptionContext.getContextLabels().contains("test Date"));
assertTrue(exceptionContext.getContextLabels().contains("test Nbr"));
assertTrue(exceptionContext.getContextLabels().contains("test2"));
assertFalse(contextMessage.contains(TEST_MESSAGE));
assertTrue(message.contains(TEST_MESSAGE));
assertTrue(message.contains("test Poorly written obj"));
assertTrue(message.contains("Crap"));
assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString);
assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj"));
assertFalse(exceptionContext.getContextLabels().contains("crap"));
assertFalse(contextMessage.contains(TEST_MESSAGE));
assertTrue(labels.contains("test1"));
assertTrue(labels.contains("test2"));
assertTrue(labels.contains("test Date"));
assertTrue(labels.contains("test Nbr"));
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(ExceptionUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(ExceptionUtils.class.getModifiers()));
assertTrue(match);
assertFalse(match);
assertTrue(match);
assertFalse(match);
assertTrue(stackTrace.contains(ExceptionUtils.WRAPPED_MARKER));
assertFalse(stackTrace.contains(ExceptionUtils.WRAPPED_MARKER));
assertTrue(stackTrace.contains(ExceptionUtils.WRAPPED_MARKER));
assertFalse(stackTrace.contains(ExceptionUtils.WRAPPED_MARKER));
assertTrue(ExceptionUtils.hasCause(t, IOException.class));
assertTrue(ExceptionUtils.hasCause(t, Error.class));
assertTrue(ExceptionUtils.hasCause(t, RuntimeException.class));
assertTrue(ExceptionUtils.hasCause(t, TestThrowable.class));
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(CharSequenceUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(CharSequenceUtils.class.getModifiers()));
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(EventUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(EventUtils.class.getModifiers()));
assertFalse(JAVA_1_2.atLeast(JAVA_1_5), "1.2 at least 1.5 passed");
assertTrue(JAVA_1_5.atLeast(JAVA_1_2), "1.5 at least 1.2 failed");
assertFalse(JAVA_1_6.atLeast(JAVA_1_7), "1.6 at least 1.7 passed");
assertTrue(JAVA_0_9.atLeast(JAVA_1_5), "0.9 at least 1.5 failed");
assertFalse(JAVA_0_9.atLeast(JAVA_1_6), "0.9 at least 1.6 passed");
assertTrue(StringUtils.equals(null, null));
assertTrue(StringUtils.equals(fooCs, fooCs));
assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO)));
assertTrue(StringUtils.equals(fooCs, new String(new char[] { 'f', 'o', 'o' })));
assertTrue(StringUtils.equals(fooCs, new CustomCharSequence(FOO)));
assertTrue(StringUtils.equals(new CustomCharSequence(FOO), fooCs));
assertFalse(StringUtils.equals(fooCs, new String(new char[] { 'f', 'O', 'O' })));
assertFalse(StringUtils.equals(fooCs, barCs));
assertFalse(StringUtils.equals(fooCs, null));
assertFalse(StringUtils.equals(null, fooCs));
assertFalse(StringUtils.equals(fooCs, foobarCs));
assertFalse(StringUtils.equals(foobarCs, fooCs));
assertTrue(StringUtils.equals(null, null));
assertTrue(StringUtils.equals(FOO, FOO));
assertTrue(StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' })));
assertFalse(StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' })));
assertFalse(StringUtils.equals(FOO, BAR));
assertFalse(StringUtils.equals(FOO, null));
assertFalse(StringUtils.equals(null, FOO));
assertFalse(StringUtils.equals(FOO, FOOBAR));
assertFalse(StringUtils.equals(FOOBAR, FOO));
assertTrue(StringUtils.equalsIgnoreCase(null, null));
assertTrue(StringUtils.equalsIgnoreCase(FOO, FOO));
assertTrue(StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' })));
assertTrue(StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' })));
assertFalse(StringUtils.equalsIgnoreCase(FOO, BAR));
assertFalse(StringUtils.equalsIgnoreCase(FOO, null));
assertFalse(StringUtils.equalsIgnoreCase(null, FOO));
assertTrue(StringUtils.equalsIgnoreCase("", ""));
assertFalse(StringUtils.equalsIgnoreCase("abcd", "abcd "));
assertFalse(StringUtils.equalsAny(FOO));
assertFalse(StringUtils.equalsAny(FOO, new String[]{}));
assertTrue(StringUtils.equalsAny(FOO, FOO));
assertTrue(StringUtils.equalsAny(FOO, BAR, new String(new char[] { 'f', 'o', 'o' })));
assertFalse(StringUtils.equalsAny(FOO, BAR, new String(new char[] { 'f', 'O', 'O' })));
assertFalse(StringUtils.equalsAny(FOO, BAR));
assertFalse(StringUtils.equalsAny(FOO, BAR, null));
assertFalse(StringUtils.equalsAny(null, FOO));
assertFalse(StringUtils.equalsAny(FOO, FOOBAR));
assertFalse(StringUtils.equalsAny(FOOBAR, FOO));
assertTrue(StringUtils.equalsAny(null, null, null));
assertFalse(StringUtils.equalsAny(null, FOO, BAR, FOOBAR));
assertFalse(StringUtils.equalsAny(FOO, null, BAR));
assertTrue(StringUtils.equalsAny(FOO, BAR, null, "", FOO, BAR));
assertFalse(StringUtils.equalsAny(FOO, FOO.toUpperCase(Locale.ROOT)));
assertFalse(StringUtils.equalsAny(null, (CharSequence[]) null));
assertTrue(StringUtils.equalsAny(FOO, new CustomCharSequence("foo")));
assertTrue(StringUtils.equalsAny(FOO, new StringBuilder("foo")));
assertFalse(StringUtils.equalsAny(FOO, new CustomCharSequence("fOo")));
assertFalse(StringUtils.equalsAny(FOO, new StringBuilder("fOo")));
assertFalse(StringUtils.equalsAnyIgnoreCase(FOO));
assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, new String[]{}));
assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, FOO));
assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, FOO.toUpperCase(Locale.ROOT)));
assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, FOO, new String(new char[]{'f', 'o', 'o'})));
assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, BAR, new String(new char[]{'f', 'O', 'O'})));
assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, BAR));
assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, BAR, null));
assertFalse(StringUtils.equalsAnyIgnoreCase(null, FOO));
assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, FOOBAR));
assertFalse(StringUtils.equalsAnyIgnoreCase(FOOBAR, FOO));
assertTrue(StringUtils.equalsAnyIgnoreCase(null, null, null));
assertFalse(StringUtils.equalsAnyIgnoreCase(null, FOO, BAR, FOOBAR));
assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, null, BAR));
assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, BAR, null, "", FOO.toUpperCase(Locale.ROOT), BAR));
assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, FOO.toUpperCase(Locale.ROOT)));
assertFalse(StringUtils.equalsAnyIgnoreCase(null, (CharSequence[]) null));
assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, new CustomCharSequence("fOo")));
assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, new StringBuilder("fOo")));
assertTrue(StringUtils.compare(null, "a") < 0);
assertTrue(StringUtils.compare("a", null) > 0);
assertTrue(StringUtils.compare("a", "b") < 0);
assertTrue(StringUtils.compare("b", "a") > 0);
assertTrue(StringUtils.compare("a", "B") > 0);
assertTrue(StringUtils.compare("abc", "abd") < 0);
assertTrue(StringUtils.compare("ab", "abc") < 0);
assertTrue(StringUtils.compare("ab", "ab ") < 0);
assertTrue(StringUtils.compare("abc", "ab ") > 0);
assertTrue(StringUtils.compare(null, "a", true) < 0);
assertTrue(StringUtils.compare(null, "a", false) > 0);
assertTrue(StringUtils.compare("a", null, true) > 0);
assertTrue(StringUtils.compare("a", null, false) < 0);
assertTrue(StringUtils.compare("a", "b", false) < 0);
assertTrue(StringUtils.compare("b", "a", false) > 0);
assertTrue(StringUtils.compare("a", "B", false) > 0);
assertTrue(StringUtils.compare("abc", "abd", false) < 0);
assertTrue(StringUtils.compare("ab", "abc", false) < 0);
assertTrue(StringUtils.compare("ab", "ab ", false) < 0);
assertTrue(StringUtils.compare("abc", "ab ", false) > 0);
assertTrue(StringUtils.compareIgnoreCase(null, "a") < 0);
assertTrue(StringUtils.compareIgnoreCase("a", null) > 0);
assertTrue(StringUtils.compareIgnoreCase("a", "b") < 0);
assertTrue(StringUtils.compareIgnoreCase("b", "a") > 0);
assertTrue(StringUtils.compareIgnoreCase("a", "B") < 0);
assertTrue(StringUtils.compareIgnoreCase("A", "b") < 0);
assertTrue(StringUtils.compareIgnoreCase("abc", "ABD") < 0);
assertTrue(StringUtils.compareIgnoreCase("ab", "ABC") < 0);
assertTrue(StringUtils.compareIgnoreCase("ab", "AB ") < 0);
assertTrue(StringUtils.compareIgnoreCase("abc", "AB ") > 0);
assertTrue(StringUtils.compareIgnoreCase(null, "a", true) < 0);
assertTrue(StringUtils.compareIgnoreCase(null, "a", false) > 0);
assertTrue(StringUtils.compareIgnoreCase("a", null, true) > 0);
assertTrue(StringUtils.compareIgnoreCase("a", null, false) < 0);
assertTrue(StringUtils.compareIgnoreCase("a", "b", false) < 0);
assertTrue(StringUtils.compareIgnoreCase("b", "a", false) > 0);
assertTrue(StringUtils.compareIgnoreCase("a", "B", false) < 0);
assertTrue(StringUtils.compareIgnoreCase("A", "b", false) < 0);
assertTrue(StringUtils.compareIgnoreCase("abc", "ABD", false) < 0);
assertTrue(StringUtils.compareIgnoreCase("ab", "ABC", false) < 0);
assertTrue(StringUtils.compareIgnoreCase("ab", "AB ", false) < 0);
assertTrue(StringUtils.compareIgnoreCase("abc", "AB ", false) > 0);
assertFalse(ThreadUtils.getAllThreads().isEmpty());
assertFalse(ThreadUtils.getAllThreadGroups().isEmpty());
assertTrue(ThreadUtils.getAllThreadGroups().size() >= 7);
assertTrue(ThreadUtils.getAllThreads().size() >= 11);
assertTrue(ThreadUtils.findThreads(ThreadUtils.ALWAYS_TRUE_PREDICATE).size() >= 11);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(ThreadUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(ThreadUtils.class.getModifiers()));
assertFalse(ObjectUtils.allNotNull((Object) null));
assertFalse(ObjectUtils.allNotNull((Object[]) null));
assertFalse(ObjectUtils.allNotNull(null, null, null));
assertFalse(ObjectUtils.allNotNull(null, FOO, BAR));
assertFalse(ObjectUtils.allNotNull(FOO, BAR, null));
assertFalse(ObjectUtils.allNotNull(FOO, BAR, null, FOO, BAR));
assertTrue(ObjectUtils.allNotNull());
assertTrue(ObjectUtils.allNotNull(FOO));
assertTrue(ObjectUtils.allNotNull(FOO, BAR, 1, Boolean.TRUE, new Object(), new Object[]{}));
assertTrue(ObjectUtils.allNull());
assertTrue(ObjectUtils.allNull((Object) null));
assertTrue(ObjectUtils.allNull((Object[]) null));
assertTrue(ObjectUtils.allNull(null, null, null));
assertFalse(ObjectUtils.allNull(FOO));
assertFalse(ObjectUtils.allNull(null, FOO, null));
assertFalse(ObjectUtils.allNull(null, null, null, null, FOO, BAR));
assertFalse(ObjectUtils.anyNotNull());
assertFalse(ObjectUtils.anyNotNull((Object) null));
assertFalse(ObjectUtils.anyNotNull((Object[]) null));
assertFalse(ObjectUtils.anyNotNull(null, null, null));
assertTrue(ObjectUtils.anyNotNull(FOO));
assertTrue(ObjectUtils.anyNotNull(null, FOO, null));
assertTrue(ObjectUtils.anyNotNull(null, null, null, null, FOO, BAR));
assertTrue(ObjectUtils.anyNull((Object) null));
assertTrue(ObjectUtils.anyNull(null, null, null));
assertTrue(ObjectUtils.anyNull(null, FOO, BAR));
assertTrue(ObjectUtils.anyNull(FOO, BAR, null));
assertTrue(ObjectUtils.anyNull(FOO, BAR, null, FOO, BAR));
assertFalse(ObjectUtils.anyNull());
assertFalse(ObjectUtils.anyNull(FOO));
assertFalse(ObjectUtils.anyNull(FOO, BAR, 1, Boolean.TRUE, new Object(), new Object[]{}));
assertTrue(Arrays.deepEquals(new String[]{"string"}, ObjectUtils.clone(new String[]{"string"})));
assertTrue(ObjectUtils.CONST(true), "CONST(boolean)");
assertTrue(MAGIC_FLAG);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(ObjectUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(ObjectUtils.class.getModifiers()));
assertTrue(ObjectUtils.equals(null, null), "ObjectUtils.equals(null, null) returned false");
assertFalse(ObjectUtils.equals(FOO, null), "ObjectUtils.equals(\"foo\", null) returned true");
assertFalse(ObjectUtils.equals(null, BAR), "ObjectUtils.equals(null, \"bar\") returned true");
assertFalse(ObjectUtils.equals(FOO, BAR), "ObjectUtils.equals(\"foo\", \"bar\") returned true");
assertTrue(ObjectUtils.equals(FOO, FOO), "ObjectUtils.equals(\"foo\", \"foo\") returned false");
assertTrue(ObjectUtils.isEmpty(null));
assertTrue(ObjectUtils.isEmpty(""));
assertTrue(ObjectUtils.isEmpty(new int[] {}));
assertTrue(ObjectUtils.isEmpty(Collections.emptyList()));
assertTrue(ObjectUtils.isEmpty(Collections.emptySet()));
assertTrue(ObjectUtils.isEmpty(Collections.emptyMap()));
assertTrue(ObjectUtils.isEmpty(Optional.empty()));
assertTrue(ObjectUtils.isEmpty(Optional.ofNullable(null)));
assertFalse(ObjectUtils.isEmpty("  "));
assertFalse(ObjectUtils.isEmpty("ab"));
assertFalse(ObjectUtils.isEmpty(NON_EMPTY_ARRAY));
assertFalse(ObjectUtils.isEmpty(NON_EMPTY_LIST));
assertFalse(ObjectUtils.isEmpty(NON_EMPTY_SET));
assertFalse(ObjectUtils.isEmpty(NON_EMPTY_MAP));
assertFalse(ObjectUtils.isEmpty(Optional.of(new Object())));
assertFalse(ObjectUtils.isEmpty(Optional.ofNullable(new Object())));
assertFalse(ObjectUtils.isArray(null));
assertFalse(ObjectUtils.isArray(""));
assertFalse(ObjectUtils.isArray("abg"));
assertFalse(ObjectUtils.isArray(123));
assertTrue(ObjectUtils.isArray(NON_EMPTY_ARRAY));
assertTrue(ObjectUtils.isArray(new int[]{1, 2, 3}));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_BOOLEAN_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_BOOLEAN_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_BYTE_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_CHAR_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_CLASS_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_DOUBLE_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_FIELD_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_FLOAT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_INT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_LONG_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_METHOD_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_OBJECT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_SHORT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_STRING_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_THROWABLE_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_TYPE_ARRAY));
assertFalse(ObjectUtils.isNotEmpty(null));
assertFalse(ObjectUtils.isNotEmpty(""));
assertFalse(ObjectUtils.isNotEmpty(new int[] {}));
assertFalse(ObjectUtils.isNotEmpty(Collections.emptyList()));
assertFalse(ObjectUtils.isNotEmpty(Collections.emptySet()));
assertFalse(ObjectUtils.isNotEmpty(Collections.emptyMap()));
assertFalse(ObjectUtils.isNotEmpty(Optional.empty()));
assertFalse(ObjectUtils.isNotEmpty(Optional.ofNullable(null)));
assertTrue(ObjectUtils.isNotEmpty("  "));
assertTrue(ObjectUtils.isNotEmpty("ab"));
assertTrue(ObjectUtils.isNotEmpty(NON_EMPTY_ARRAY));
assertTrue(ObjectUtils.isNotEmpty(NON_EMPTY_LIST));
assertTrue(ObjectUtils.isNotEmpty(NON_EMPTY_SET));
assertTrue(ObjectUtils.isNotEmpty(NON_EMPTY_MAP));
assertTrue(ObjectUtils.isNotEmpty(Optional.of(new Object())));
assertTrue(ObjectUtils.isNotEmpty(Optional.ofNullable(new Object())));
assertFalse(ObjectUtils.notEqual(null, null), "ObjectUtils.notEqual(null, null) returned false");
assertTrue(ObjectUtils.notEqual(FOO, null), "ObjectUtils.notEqual(\"foo\", null) returned true");
assertTrue(ObjectUtils.notEqual(null, BAR), "ObjectUtils.notEqual(null, \"bar\") returned true");
assertTrue(ObjectUtils.notEqual(FOO, BAR), "ObjectUtils.notEqual(\"foo\", \"bar\") returned true");
assertFalse(ObjectUtils.notEqual(FOO, FOO), "ObjectUtils.notEqual(\"foo\", \"foo\") returned false");
assertTrue(ObjectUtils.NULL instanceof ObjectUtils.Null);
assertTrue(inputStream.isClosed(), "inputStream should be closed");
assertFalse(inputStream.isClosed(), "inputStream should NOT be closed");
assertTrue(c.compare(lessFile, moreFile) < 0, "less");
assertTrue(c.compare(moreFile, lessFile) > 0, "more");
assertTrue(sensitive.compare(equalFile1, file3) > 0, "sensitive file1 & file3 > 0");
assertTrue(sensitive.compare(equalFile1, lessFile) > 0, "sensitive file1 & less  > 0");
assertTrue(insensitive.compare(equalFile1, lessFile) > 0, "insensitive file1 & file4 > 0");
assertTrue(insensitive.compare(file3, lessFile) > 0, "insensitive file3 & less  > 0");
assertTrue(comparator.compare(lessFile, moreFile) < 0, "less");
assertTrue(comparator.compare(moreFile, lessFile) > 0, "more");
assertTrue(reverse.compare(moreFile, lessFile) < 0, "less");
assertTrue(reverse.compare(lessFile, moreFile) > 0, "more");
assertTrue(reverse.toString().startsWith("ReverseFileComparator["), "reverse");
assertTrue(sensitive.compare(equalFile1, file3) > 0, "sensitive file1 & file3 > 0");
assertTrue(sensitive.compare(equalFile1, lessFile) > 0, "sensitive file1 & less  > 0");
assertTrue(insensitive.compare(equalFile1, lessFile) > 0, "insensitive file1 & file4 > 0");
assertTrue(insensitive.compare(file3, lessFile) > 0, "insensitive file3 & less  > 0");
assertFalse(nonexistantFile.exists());
assertTrue(comparator.compare(nonexistantFile, moreFile) < 0, "less");
assertTrue(sensitive.compare(equalFile1, file3) > 0, "sensitive file1 & file3 > 0");
assertTrue(sensitive.compare(equalFile1, lessFile) > 0, "sensitive file1 & less  > 0");
assertTrue(insensitive.compare(equalFile1, lessFile) > 0, "insensitive file1 & file4 > 0");
assertTrue(insensitive.compare(file3, lessFile) > 0, "insensitive file3 & less  > 0");
assertTrue(IOUtils.contentEquals((InputStream) null, null));
assertFalse(IOUtils.contentEquals(input1, null));
assertFalse(IOUtils.contentEquals(null, input1));
assertTrue(IOUtils.contentEquals(input1, input1));
assertTrue(IOUtils.contentEquals(input1, input1));
assertTrue(IOUtils.contentEquals(new ByteArrayInputStream(dataEmpty), new ByteArrayInputStream(dataEmpty)));
assertTrue(IOUtils.contentEquals(new BufferedInputStream(new ByteArrayInputStream(dataEmpty)),new BufferedInputStream(new ByteArrayInputStream(dataEmpty))));
assertTrue(IOUtils.contentEquals(new ByteArrayInputStream(dataAbc), new ByteArrayInputStream(dataAbc)));
assertFalse(IOUtils.contentEquals(new ByteArrayInputStream(dataAbcd), new ByteArrayInputStream(dataAbc)));
assertFalse(IOUtils.contentEquals(new ByteArrayInputStream(dataAbc), new ByteArrayInputStream(dataAbcd)));
assertFalse(IOUtils.contentEquals(new ByteArrayInputStream("apache".getBytes(StandardCharsets.UTF_8)),new ByteArrayInputStream("apacha".getBytes(StandardCharsets.UTF_8))));
assertFalse(IOUtils.contentEquals(new ByteArrayInputStream(bytes2XDefaultA),new ByteArrayInputStream(bytes2XDefaultB)));
assertFalse(IOUtils.contentEquals(new ByteArrayInputStream(bytes2XDefaultA),new ByteArrayInputStream(bytes2XDefaultA2)));
assertTrue(IOUtils.contentEquals(new ByteArrayInputStream(bytes2XDefaultA),new ByteArrayInputStream(bytes2XDefaultA)));
assertTrue(IOUtils.contentEquals(input1, input1));
assertTrue(IOUtils.contentEquals((Reader) null, null));
assertFalse(IOUtils.contentEquals(null, input1));
assertFalse(IOUtils.contentEquals(input1, null));
assertTrue(IOUtils.contentEquals(input1, input1));
assertTrue(IOUtils.contentEquals(input1, input1));
assertTrue(IOUtils.contentEquals(new StringReader(""), new StringReader("")));
assertTrue(IOUtils.contentEquals(new BufferedReader(new StringReader("")), new BufferedReader(new StringReader(""))));
assertTrue(IOUtils.contentEquals(new StringReader("ABC"), new StringReader("ABC")));
assertFalse(IOUtils.contentEquals(new StringReader("ABCD"), new StringReader("ABC")));
assertFalse(IOUtils.contentEquals(new StringReader("ABC"), new StringReader("ABCD")));
assertFalse(IOUtils.contentEquals(new StringReader("apache"), new StringReader("apacha")));
assertTrue(IOUtils.contentEqualsIgnoreEOL(null, null));
assertFalse(IOUtils.contentEqualsIgnoreEOL(null, input1));
assertFalse(IOUtils.contentEqualsIgnoreEOL(input1, null));
assertTrue(IOUtils.contentEqualsIgnoreEOL(input1, input1));
assertTrue(IOUtils.contentEqualsIgnoreEOL(input1, input1));
assertTrue(url.getFile().endsWith("/test-file-utf8.bin"));
assertTrue(url.getFile().endsWith("/org/apache/commons/io/test-file-utf8.bin"));
assertTrue(url.getFile().endsWith("/org/apache/commons/io/FileUtilsTestDataCR.dat"));
assertTrue(url.getFile().endsWith("/org/apache/commons/io/FileUtilsTestDataCR.dat"));
assertTrue(data[i][0].equalsIgnoreCase(data[i][1]), "Test data corrupt: " + i);
assertTrue(match, Locale.getDefault().toString() + ": " + i);
assertFalse(FilenameUtils.wildcardMatch(null, "Foo"));
assertFalse(FilenameUtils.wildcardMatch("Foo", null));
assertTrue(FilenameUtils.wildcardMatch(null, null));
assertTrue(FilenameUtils.wildcardMatch("Foo", "Foo"));
assertTrue(FilenameUtils.wildcardMatch("", ""));
assertTrue(FilenameUtils.wildcardMatch("", "*"));
assertFalse(FilenameUtils.wildcardMatch("", "?"));
assertTrue(FilenameUtils.wildcardMatch("Foo", "Fo*"));
assertTrue(FilenameUtils.wildcardMatch("Foo", "Fo?"));
assertTrue(FilenameUtils.wildcardMatch("Foo Bar and Catflap", "Fo*"));
assertTrue(FilenameUtils.wildcardMatch("New Bookmarks", "N?w ?o?k??r?s"));
assertFalse(FilenameUtils.wildcardMatch("Foo", "Bar"));
assertTrue(FilenameUtils.wildcardMatch("Foo Bar Foo", "F*o Bar*"));
assertTrue(FilenameUtils.wildcardMatch("Adobe Acrobat Installer", "Ad*er"));
assertTrue(FilenameUtils.wildcardMatch("Foo", "*Foo"));
assertTrue(FilenameUtils.wildcardMatch("BarFoo", "*Foo"));
assertTrue(FilenameUtils.wildcardMatch("Foo", "Foo*"));
assertTrue(FilenameUtils.wildcardMatch("FooBar", "Foo*"));
assertFalse(FilenameUtils.wildcardMatch("FOO", "*Foo"));
assertFalse(FilenameUtils.wildcardMatch("BARFOO", "*Foo"));
assertFalse(FilenameUtils.wildcardMatch("FOO", "Foo*"));
assertFalse(FilenameUtils.wildcardMatch("FOOBAR", "Foo*"));
assertFalse(FilenameUtils.wildcardMatch(null, "Foo", IOCase.SENSITIVE));
assertFalse(FilenameUtils.wildcardMatch("Foo", null, IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch(null, null, IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Foo", "Foo", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("", "", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Foo", "Fo*", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Foo", "Fo?", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Foo Bar and Catflap", "Fo*", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("New Bookmarks", "N?w ?o?k??r?s", IOCase.SENSITIVE));
assertFalse(FilenameUtils.wildcardMatch("Foo", "Bar", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Foo Bar Foo", "F*o Bar*", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Adobe Acrobat Installer", "Ad*er", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Foo", "*Foo", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Foo", "Foo*", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Foo", "*Foo", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("BarFoo", "*Foo", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Foo", "Foo*", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("FooBar", "Foo*", IOCase.SENSITIVE));
assertFalse(FilenameUtils.wildcardMatch("FOO", "*Foo", IOCase.SENSITIVE));
assertFalse(FilenameUtils.wildcardMatch("BARFOO", "*Foo", IOCase.SENSITIVE));
assertFalse(FilenameUtils.wildcardMatch("FOO", "Foo*", IOCase.SENSITIVE));
assertFalse(FilenameUtils.wildcardMatch("FOOBAR", "Foo*", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("FOO", "*Foo", IOCase.INSENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("BARFOO", "*Foo", IOCase.INSENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("FOO", "Foo*", IOCase.INSENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("FOOBAR", "Foo*", IOCase.INSENSITIVE));
assertFalse(FilenameUtils.wildcardMatchOnSystem(null, "Foo"));
assertFalse(FilenameUtils.wildcardMatchOnSystem("Foo", null));
assertTrue(FilenameUtils.wildcardMatchOnSystem(null, null));
assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo", "Foo"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("", ""));
assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo", "Fo*"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo", "Fo?"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo Bar and Catflap", "Fo*"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("New Bookmarks", "N?w ?o?k??r?s"));
assertFalse(FilenameUtils.wildcardMatchOnSystem("Foo", "Bar"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo Bar Foo", "F*o Bar*"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("Adobe Acrobat Installer", "Ad*er"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo", "*Foo"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("BarFoo", "*Foo"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo", "Foo*"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("FooBar", "Foo*"));
assertFalse(observer.getListeners().iterator().hasNext(), "Listeners[1]");
assertFalse(observer.getListeners().iterator().hasNext(), "Listeners[2]");
assertTrue(it.hasNext(), "Listeners[3]");
assertFalse(it.hasNext(), "Listeners[4]");
assertFalse(observer.getListeners().iterator().hasNext(), "Listeners[5]");
assertTrue(listener.getCreatedDirectories().contains(testDirA), "B testDirA");
assertTrue(listener.getCreatedDirectories().contains(testDirB), "B testDirB");
assertTrue(listener.getCreatedDirectories().contains(testDirC), "B testDirC");
assertTrue(listener.getCreatedFiles().contains(testDirAFile1), "B testDirAFile1");
assertFalse(listener.getCreatedFiles().contains(testDirAFile2), "B testDirAFile2");
assertTrue(listener.getCreatedFiles().contains(testDirAFile3), "B testDirAFile3");
assertTrue(listener.getCreatedFiles().contains(testDirAFile4), "B testDirAFile4");
assertTrue(listener.getCreatedFiles().contains(testDirBFile1), "B testDirBFile1");
assertTrue(listener.getDeletedDirectories().contains(testDirB), "D testDirB");
assertTrue(listener.getChangedFiles().contains(testDirAFile4), "D testDirAFile4");
assertTrue(listener.getDeletedFiles().contains(testDirBFile1), "D testDirBFile1");
assertTrue(listener.getDeletedDirectories().contains(testDirA), "E testDirA");
assertTrue(listener.getDeletedFiles().contains(testDirAFile1), "E testDirAFile1");
assertFalse(listener.getDeletedFiles().contains(testDirAFile2), "E testDirAFile2");
assertTrue(listener.getDeletedFiles().contains(testDirAFile3), "E testDirAFile3");
assertTrue(listener.getDeletedFiles().contains(testDirAFile4), "E testDirAFile4");
assertFalse(listener.getCreatedFiles().contains(testDirAFile1), "B testDirAFile1");
assertTrue(listener.getCreatedFiles().contains(testDirAFile2), "B testDirAFile2");
assertFalse(listener.getCreatedFiles().contains(testDirAFile3), "B testDirAFile3");
assertTrue(listener.getCreatedFiles().contains(testDirAFile4), "B testDirAFile4");
assertFalse(listener.getCreatedFiles().contains(testDirAFile5), "B testDirAFile5");
assertFalse(testDirAFile1.exists(), "B testDirAFile1 exists");
assertTrue(testDirAFile2.exists(), "B testDirAFile2 exists");
assertFalse(testDirAFile3.exists(), "B testDirAFile3 exists");
assertTrue(testDirAFile4.exists(), "B testDirAFile4 exists");
assertFalse(testDirAFile5.exists(), "B testDirAFile5 exists");
assertTrue(testDirAFile1.exists(), "D testDirAFile1 exists");
assertTrue(listener.getCreatedFiles().contains(testDirAFile1), "D testDirAFile1");
assertTrue(testDirAFile3.exists(), "E testDirAFile3 exists");
assertTrue(listener.getCreatedFiles().contains(testDirAFile3), "E testDirAFile3");
assertTrue(testDirAFile5.exists(), "F testDirAFile5 exists");
assertTrue(listener.getCreatedFiles().contains(testDirAFile5), "F testDirAFile5");
assertTrue(testDirAFile1.exists(), "B testDirAFile1 exists");
assertTrue(testDirAFile2.exists(), "B testDirAFile2 exists");
assertTrue(testDirAFile3.exists(), "B testDirAFile3 exists");
assertTrue(testDirAFile4.exists(), "B testDirAFile4 exists");
assertTrue(testDirAFile5.exists(), "B testDirAFile5 exists");
assertTrue(listener.getCreatedFiles().contains(testDirAFile1), "B testDirAFile1");
assertTrue(listener.getCreatedFiles().contains(testDirAFile2), "B testDirAFile2");
assertTrue(listener.getCreatedFiles().contains(testDirAFile3), "B testDirAFile3");
assertTrue(listener.getCreatedFiles().contains(testDirAFile4), "B testDirAFile4");
assertTrue(listener.getCreatedFiles().contains(testDirAFile5), "B testDirAFile5");
assertFalse(testDirAFile1.exists(), "D testDirAFile1 exists");
assertTrue(listener.getDeletedFiles().contains(testDirAFile1), "D testDirAFile1");
assertFalse(testDirAFile3.exists(), "E testDirAFile3 exists");
assertTrue(listener.getDeletedFiles().contains(testDirAFile3), "E testDirAFile3");
assertFalse(testDirAFile5.exists(), "F testDirAFile5 exists");
assertTrue(listener.getDeletedFiles().contains(testDirAFile5), "F testDirAFile5");
assertTrue(listener.getCreatedFiles().contains(testDirAFile1), "B testDirAFile1");
assertTrue(listener.getCreatedFiles().contains(testDirAFile2), "B testDirAFile2");
assertTrue(listener.getCreatedFiles().contains(testDirAFile3), "B testDirAFile3");
assertTrue(listener.getCreatedFiles().contains(testDirAFile4), "B testDirAFile4");
assertTrue(listener.getCreatedFiles().contains(testDirAFile5), "B testDirAFile5");
assertTrue(testDirAFile1.exists(), "B testDirAFile1 exists");
assertTrue(testDirAFile2.exists(), "B testDirAFile2 exists");
assertTrue(testDirAFile3.exists(), "B testDirAFile3 exists");
assertTrue(testDirAFile4.exists(), "B testDirAFile4 exists");
assertTrue(testDirAFile5.exists(), "B testDirAFile5 exists");
assertTrue(listener.getChangedFiles().contains(testDirAFile1), "D testDirAFile1");
assertTrue(listener.getChangedFiles().contains(testDirAFile3), "E testDirAFile3");
assertTrue(listener.getChangedFiles().contains(testDirAFile5), "F testDirAFile5");
assertFalse(testDirAFile1.exists(), "A testDirAFile1 exists");
assertTrue(testDirAFile1.exists(), "B testDirAFile1 exists");
assertTrue(testDirAFile2.exists(), "B testDirAFile2 exists");
assertTrue(testDirAFile3.exists(), "B testDirAFile3 exists");
assertTrue(listener.getCreatedFiles().contains(testDirAFile1), "C created");
assertFalse(listener.getCreatedFiles().contains(testDirAFile2), "C created");
assertFalse(listener.getCreatedFiles().contains(testDirAFile3), "C created");
assertTrue(listener.getChangedFiles().contains(testDirAFile1), "D changed");
assertFalse(listener.getChangedFiles().contains(testDirAFile2), "D changed");
assertFalse(listener.getChangedFiles().contains(testDirAFile3), "D changed");
assertFalse(testDirAFile1.exists(), "E testDirAFile1 exists");
assertFalse(testDirAFile2.exists(), "E testDirAFile2 exists");
assertFalse(testDirAFile3.exists(), "E testDirAFile3 exists");
assertTrue(listener.getDeletedFiles().contains(testDirAFile1), "E deleted");
assertFalse(listener.getDeletedFiles().contains(testDirAFile2), "E deleted");
assertFalse(listener.getDeletedFiles().contains(testDirAFile3), "E deleted");
assertFalse(monitor.getObservers().iterator().hasNext(), "Observers[1]");
assertFalse(monitor.getObservers().iterator().hasNext(), "Observers[2]");
assertFalse(monitor.getObservers().iterator().hasNext(), "Observers[3]");
assertTrue(it.hasNext(), "Observers[4]");
assertFalse(it.hasNext(), "Observers[5]");
assertFalse(monitor.getObservers().iterator().hasNext(), "Observers[6]");
assertFalse(monitor.getObservers().iterator().hasNext());
assertFalse(monitor.getObservers().iterator().hasNext());
assertFalse(createdThreads.isEmpty());
createdThreads.forEach(thread -> assertFalse(thread.isAlive(), "The FileAlterationMonitor did not stop the threads it created."));
assertTrue(file.exists());
assertTrue(visitor.getPathCounters().getByteCounter().get() > 0);
assertFalse(visitor.getDirList().isEmpty());
assertFalse(visitor.getFileList().isEmpty());
assertTrue(visitor.getPathCounters().getFileCounter().get() > 0);
assertTrue(visitor.getPathCounters().getDirectoryCounter().get() > 0);
assertTrue(visitor.getPathCounters().getByteCounter().get() > 0);
assertFalse(visitor.getDirList().isEmpty());
assertFalse(visitor.getFileList().isEmpty());
assertFalse(visitor.getDirList().isEmpty());
assertFalse(visitor.getFileList().isEmpty());
assertTrue(files.length > 0);
assertTrue(visitor.getPathCounters().getFileCounter().get() > 0);
assertTrue(visitor.getPathCounters().getDirectoryCounter().get() > 0);
assertTrue(visitor.getPathCounters().getByteCounter().get() > 0);
assertFalse(visitor.getDirList().isEmpty());
assertFalse(visitor.getFileList().isEmpty());
assertFalse(visitor.getDirList().isEmpty());
assertFalse(visitor.getFileList().isEmpty());
assertTrue(executableFile.setExecutable(true));
assertTrue(readOnlyFile.setReadOnly());
assertTrue(readOnlyFile.setReadOnly());
assertTrue(listFilter.accept(txtFile));
assertFalse(listFilter.accept(bmpFile));
assertFalse(listFilter.accept(dirFile));
assertTrue(listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
assertFalse(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName()));
assertFalse(listFilter.accept(dirFile.getParentFile(), dirFile.getName()));
assertTrue(filteredList.contains(fileA));
assertFalse(filteredList.contains(fileB));
assertTrue(filteredList.contains(fileA));
assertFalse(filteredList.contains(fileB));
assertTrue(filteredSet.contains(fileA));
assertFalse(filteredSet.contains(fileB));
assertTrue(filteredSet.contains(fileA));
assertFalse(filteredSet.contains(fileB));
assertTrue(orFilter.accept(testFile.getParentFile(), testFile.getName()));
assertFalse(orFilter.accept(testFile.getParentFile(), testFile.getName()));
assertTrue(filter.accept(testFile.getParentFile(), testFile.getName()));
assertFalse(filter.accept(fredFile.getParentFile(), fredFile.getName()));
assertFalse(listFilter.accept(testFile.getParentFile(), testFile.getName()));
assertTrue(listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
assertTrue(filter.accept(testFile.getParentFile(), testFile.getName()));
assertFalse(filter.accept(fredFile.getParentFile(), fredFile.getName()));
assertFalse(listFilter.accept(testFile.getParentFile(), testFile.getName()));
assertTrue(listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
assertTrue(files.length > 0);
assertTrue(visitor.getPathCounters().getDirectoryCounter().get() > 0);
assertFalse(visitor.getDirList().isEmpty());
assertFalse(visitor.getFileList().isEmpty());
public static void assertFalseFiltersInvoked(final int testNumber, final TesterFalseFileFilter[] filters, final boolean[] invoked) {for (int i = 1; i < filters.length; i++) {
public static void assertTrueFiltersInvoked(final int testNumber, final TesterTrueFileFilter[] filters, final boolean[] invoked) {for (int i = 1; i < filters.length; i++) {
assertTrue(filters.contains(filter), "found file filter");
assertTrueFiltersInvoked(i, trueFilters, trueResults);
assertFalseFiltersInvoked(i, falseFilters, falseResults);
assertTrueFiltersInvoked(i, trueFilters, trueResults);
assertFalseFiltersInvoked(i, falseFilters, falseResults);
assertTrueFiltersInvoked(i, trueFilters, trueResults);
assertFalseFiltersInvoked(i, falseFilters, falseResults);
assertTrueFiltersInvoked(i, trueFilters, trueResults);
assertFalseFiltersInvoked(i, falseFilters, falseResults);
assertFalse(fileFilter.getFileFilters().contains(filter), "file filter removed");
assertTrue(listFilter.accept(txtFile));
assertFalse(listFilter.accept(bmpFile));
assertFalse(listFilter.accept(dirFile));
assertTrue(listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
assertFalse(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName()));
assertFalse(listFilter.accept(dirFile.getParentFile(), dirFile.getName()));
assertTrue(baos.toByteArray().length > 0);
assertTrue(FileUtils.waitFor(FileUtils.current(), 10));
assertTrue(wasInterrupted.get());
assertTrue(permissions.contains(PosixFilePermission.OWNER_WRITE), permissions::toString);
assertFalse(Files.exists(symLink), symLink::toString);
assertTrue(Files.exists(file), file::toString);
assertFalse(Files.isWritable(testDir),() -> String.format("Parent directory '%s' of '%s' should NOT be Writable, permissions are %s ", testDir, file, permissions));
assertFalse(Files.isExecutable(testDir),() -> String.format("Parent directory '%s' of '%s' should NOT be Executable, permissions are %s ", testDir, file, permissions));
assertFalse(Files.exists(file));
assertFalse(Files.isWritable(testDir));
assertFalse(Files.isExecutable(testDir));
* Assert that the content of two files is the same.*/private static void assertEqualContent(final File f0, final File f1)throws IOException {/* This doesn't work because the filesize isn't updated until the file* is closed.assertTrue( "The files " + f0 + " and " + f1 +" have differing file sizes (" + f0.length() +" vs " + f1.length() + ")", ( f0.length() == f1.length() ) );
assertTrue(n0 == n1,"The files " + f0 + " and " + f1 +" have differing number of bytes available (" + n0 + " vs " + n1 + ")");
assertTrue(file.exists(), "Check existence of output file");
assertTrue(file.delete(), "Couldn't delete file: " + file);
assertTrue( filename + "Test output data file shouldn't previously exist",!destination.exists() );
assertTrue(FilenameUtils.directoryContains("/foo", "/foo/bar"));
assertTrue(FilenameUtils.directoryContains("/foo/", "/foo/bar"));
assertTrue(FilenameUtils.directoryContains("C:\\foo", "C:\\foo\\bar"));
assertTrue(FilenameUtils.directoryContains("C:\\foo\\", "C:\\foo\\bar"));
assertFalse(FilenameUtils.directoryContains("/foo", "/foo"));
assertFalse(FilenameUtils.directoryContains("/foo", "/foobar"));
assertFalse(FilenameUtils.directoryContains("C:\\foo", "C:\\foobar"));
assertFalse(FilenameUtils.directoryContains("/foo", null));
assertFalse(FilenameUtils.directoryContains("", ""));
assertFalse(FilenameUtils.directoryContains("", "/foo"));
assertFalse(FilenameUtils.directoryContains("/foo", ""));
assertTrue(FilenameUtils.equals(null, null));
assertFalse(FilenameUtils.equals(null, ""));
assertFalse(FilenameUtils.equals("", null));
assertTrue(FilenameUtils.equals("", ""));
assertTrue(FilenameUtils.equals("file.txt", "file.txt"));
assertFalse(FilenameUtils.equals("file.txt", "FILE.TXT"));
assertFalse(FilenameUtils.equals("a\\b\\file.txt", "a/b/file.txt"));
assertFalse(FilenameUtils.equals("file.txt", "FILE.TXT", true, IOCase.SENSITIVE));
assertTrue(FilenameUtils.equals("file.txt", "FILE.TXT", true, IOCase.INSENSITIVE));
assertFalse(FilenameUtils.equals("file.txt", "FILE.TXT", true, null));
assertTrue(FilenameUtils.equalsNormalized(null, null));
assertFalse(FilenameUtils.equalsNormalized(null, ""));
assertFalse(FilenameUtils.equalsNormalized("", null));
assertTrue(FilenameUtils.equalsNormalized("", ""));
assertTrue(FilenameUtils.equalsNormalized("file.txt", "file.txt"));
assertFalse(FilenameUtils.equalsNormalized("file.txt", "FILE.TXT"));
assertTrue(FilenameUtils.equalsNormalized("a\\b\\file.txt", "a/b/file.txt"));
assertFalse(FilenameUtils.equalsNormalized("a/b/", "a/b"));
assertFalse(FilenameUtils.equalsNormalizedOnSystem("//file.txt", "file.txt"));
assertFalse(FilenameUtils.equalsNormalizedOnSystem("file.txt", "//file.txt"));
assertFalse(FilenameUtils.equalsNormalizedOnSystem("//file.txt", "//file.txt"));
assertTrue(FilenameUtils.equalsNormalizedOnSystem(null, null));
assertFalse(FilenameUtils.equalsNormalizedOnSystem(null, ""));
assertFalse(FilenameUtils.equalsNormalizedOnSystem("", null));
assertTrue(FilenameUtils.equalsNormalizedOnSystem("", ""));
assertTrue(FilenameUtils.equalsNormalizedOnSystem("file.txt", "file.txt"));
assertTrue(FilenameUtils.equalsNormalizedOnSystem("a\\b\\file.txt", "a/b/file.txt"));
assertFalse(FilenameUtils.equalsNormalizedOnSystem("a/b/", "a/b"));
assertTrue(FilenameUtils.equalsOnSystem(null, null));
assertFalse(FilenameUtils.equalsOnSystem(null, ""));
assertFalse(FilenameUtils.equalsOnSystem("", null));
assertTrue(FilenameUtils.equalsOnSystem("", ""));
assertTrue(FilenameUtils.equalsOnSystem("file.txt", "file.txt"));
assertFalse(FilenameUtils.equalsOnSystem("a\\b\\file.txt", "a/b/file.txt"));
assertFalse(FilenameUtils.isExtension(null, (String) null));
assertFalse(FilenameUtils.isExtension("file.txt", (String) null));
assertTrue(FilenameUtils.isExtension("file", (String) null));
assertFalse(FilenameUtils.isExtension("file.txt", ""));
assertTrue(FilenameUtils.isExtension("file", ""));
assertTrue(FilenameUtils.isExtension("file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("file.txt", "rtf"));
assertFalse(FilenameUtils.isExtension("a/b/file.txt", (String) null));
assertFalse(FilenameUtils.isExtension("a/b/file.txt", ""));
assertTrue(FilenameUtils.isExtension("a/b/file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("a/b/file.txt", "rtf"));
assertFalse(FilenameUtils.isExtension("a.b/file.txt", (String) null));
assertFalse(FilenameUtils.isExtension("a.b/file.txt", ""));
assertTrue(FilenameUtils.isExtension("a.b/file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("a.b/file.txt", "rtf"));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", (String) null));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", ""));
assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", "rtf"));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", (String) null));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", ""));
assertTrue(FilenameUtils.isExtension("a.b\\file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", "rtf"));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", "TXT"));
assertFalse(FilenameUtils.isExtension(null, (String[]) null));
assertFalse(FilenameUtils.isExtension("file.txt", (String[]) null));
assertTrue(FilenameUtils.isExtension("file", (String[]) null));
assertFalse(FilenameUtils.isExtension("file.txt"));
assertTrue(FilenameUtils.isExtension("file.txt", new String[]{"txt"}));
assertFalse(FilenameUtils.isExtension("file.txt", new String[]{"rtf"}));
assertTrue(FilenameUtils.isExtension("file", "rtf", ""));
assertTrue(FilenameUtils.isExtension("file.txt", "rtf", "txt"));
assertFalse(FilenameUtils.isExtension("a/b/file.txt", (String[]) null));
assertFalse(FilenameUtils.isExtension("a/b/file.txt"));
assertTrue(FilenameUtils.isExtension("a/b/file.txt", new String[]{"txt"}));
assertFalse(FilenameUtils.isExtension("a/b/file.txt", new String[]{"rtf"}));
assertTrue(FilenameUtils.isExtension("a/b/file.txt", "rtf", "txt"));
assertFalse(FilenameUtils.isExtension("a.b/file.txt", (String[]) null));
assertFalse(FilenameUtils.isExtension("a.b/file.txt"));
assertTrue(FilenameUtils.isExtension("a.b/file.txt", new String[]{"txt"}));
assertFalse(FilenameUtils.isExtension("a.b/file.txt", new String[]{"rtf"}));
assertTrue(FilenameUtils.isExtension("a.b/file.txt", "rtf", "txt"));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", (String[]) null));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt"));
assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", new String[]{"txt"}));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", new String[]{"rtf"}));
assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", "rtf", "txt"));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", (String[]) null));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt"));
assertTrue(FilenameUtils.isExtension("a.b\\file.txt", new String[]{"txt"}));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new String[]{"rtf"}));
assertTrue(FilenameUtils.isExtension("a.b\\file.txt", "rtf", "txt"));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new String[]{"TXT"}));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", "TXT", "RTF"));
assertFalse(FilenameUtils.isExtension(null, (Collection<String>) null));
assertFalse(FilenameUtils.isExtension("file.txt", (Collection<String>) null));
assertTrue(FilenameUtils.isExtension("file", (Collection<String>) null));
assertFalse(FilenameUtils.isExtension("file.txt", new ArrayList<>()));
assertTrue(FilenameUtils.isExtension("file.txt", new ArrayList<>(Arrays.asList("txt"))));
assertFalse(FilenameUtils.isExtension("file.txt", new ArrayList<>(Arrays.asList("rtf"))));
assertTrue(FilenameUtils.isExtension("file", new ArrayList<>(Arrays.asList("rtf", ""))));
assertTrue(FilenameUtils.isExtension("file.txt", new ArrayList<>(Arrays.asList("rtf", "txt"))));
assertFalse(FilenameUtils.isExtension("a/b/file.txt", (Collection<String>) null));
assertFalse(FilenameUtils.isExtension("a/b/file.txt", new ArrayList<>()));
assertTrue(FilenameUtils.isExtension("a/b/file.txt", new ArrayList<>(Arrays.asList("txt"))));
assertFalse(FilenameUtils.isExtension("a/b/file.txt", new ArrayList<>(Arrays.asList("rtf"))));
assertTrue(FilenameUtils.isExtension("a/b/file.txt", new ArrayList<>(Arrays.asList("rtf", "txt"))));
assertFalse(FilenameUtils.isExtension("a.b/file.txt", (Collection<String>) null));
assertFalse(FilenameUtils.isExtension("a.b/file.txt", new ArrayList<>()));
assertTrue(FilenameUtils.isExtension("a.b/file.txt", new ArrayList<>(Arrays.asList("txt"))));
assertFalse(FilenameUtils.isExtension("a.b/file.txt", new ArrayList<>(Arrays.asList("rtf"))));
assertTrue(FilenameUtils.isExtension("a.b/file.txt", new ArrayList<>(Arrays.asList("rtf", "txt"))));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", (Collection<String>) null));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", new ArrayList<>()));
assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", new ArrayList<>(Arrays.asList("txt"))));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", new ArrayList<>(Arrays.asList("rtf"))));
assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", new ArrayList<>(Arrays.asList("rtf", "txt"))));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", (Collection<String>) null));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new ArrayList<>()));
assertTrue(FilenameUtils.isExtension("a.b\\file.txt", new ArrayList<>(Arrays.asList("txt"))));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new ArrayList<>(Arrays.asList("rtf"))));
assertTrue(FilenameUtils.isExtension("a.b\\file.txt", new ArrayList<>(Arrays.asList("rtf", "txt"))));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new ArrayList<>(Arrays.asList("TXT"))));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new ArrayList<>(Arrays.asList("TXT", "RTF"))));
assertTrue(FilenameUtils.isExtension("file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("file.txt", "rtf"));
assertTrue(FilenameUtils.isExtension("file", "rtf", ""));
assertTrue(FilenameUtils.isExtension("file.txt", "rtf", "txt"));
assertTrue(FilenameUtils.isExtension("a/b/file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("a/b/file.txt", "rtf"));
assertTrue(FilenameUtils.isExtension("a/b/file.txt", "rtf", "txt"));
assertTrue(FilenameUtils.isExtension("a.b/file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("a.b/file.txt", "rtf"));
assertTrue(FilenameUtils.isExtension("a.b/file.txt", "rtf", "txt"));
assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", "rtf"));
assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", "rtf", "txt"));
assertTrue(FilenameUtils.isExtension("a.b\\file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", "rtf"));
assertTrue(FilenameUtils.isExtension("a.b\\file.txt", "rtf", "txt"));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", "TXT"));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", "TXT", "RTF"));
assertTrue(IOCase.SENSITIVE.checkCompareTo("ABC", "abc") < 0);
assertTrue(IOCase.SENSITIVE.checkCompareTo("abc", "ABC") > 0);
assertTrue(IOCase.SENSITIVE.checkCompareTo("ABC", "") > 0);
assertTrue(IOCase.SENSITIVE.checkCompareTo("", "ABC") < 0);
assertTrue(IOCase.SENSITIVE.checkCompareTo("ABC", "DEF") < 0);
assertTrue(IOCase.SENSITIVE.checkCompareTo("DEF", "ABC") > 0);
assertTrue(IOCase.SENSITIVE.checkEndsWith("ABC", "BC"));
assertFalse(IOCase.SENSITIVE.checkEndsWith("ABC", "Bc"));
assertTrue(IOCase.INSENSITIVE.checkEndsWith("ABC", "BC"));
assertTrue(IOCase.INSENSITIVE.checkEndsWith("ABC", "Bc"));
assertTrue(IOCase.SYSTEM.checkEndsWith("ABC", "BC"));
assertTrue(IOCase.SENSITIVE.checkEndsWith("ABC", ""));
assertFalse(IOCase.SENSITIVE.checkEndsWith("ABC", "A"));
assertFalse(IOCase.SENSITIVE.checkEndsWith("ABC", "AB"));
assertTrue(IOCase.SENSITIVE.checkEndsWith("ABC", "ABC"));
assertTrue(IOCase.SENSITIVE.checkEndsWith("ABC", "BC"));
assertTrue(IOCase.SENSITIVE.checkEndsWith("ABC", "C"));
assertFalse(IOCase.SENSITIVE.checkEndsWith("ABC", "ABCD"));
assertFalse(IOCase.SENSITIVE.checkEndsWith("", "ABC"));
assertTrue(IOCase.SENSITIVE.checkEndsWith("", ""));
assertFalse(IOCase.SENSITIVE.checkEndsWith("ABC", null));
assertFalse(IOCase.SENSITIVE.checkEndsWith(null, "ABC"));
assertFalse(IOCase.SENSITIVE.checkEndsWith(null, null));
assertTrue(IOCase.SENSITIVE.checkEquals("ABC", "ABC"));
assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "Abc"));
assertTrue(IOCase.INSENSITIVE.checkEquals("ABC", "ABC"));
assertTrue(IOCase.INSENSITIVE.checkEquals("ABC", "Abc"));
assertTrue(IOCase.SYSTEM.checkEquals("ABC", "ABC"));
assertFalse(IOCase.SENSITIVE.checkEquals("ABC", ""));
assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "A"));
assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "AB"));
assertTrue(IOCase.SENSITIVE.checkEquals("ABC", "ABC"));
assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "BC"));
assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "C"));
assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "ABCD"));
assertFalse(IOCase.SENSITIVE.checkEquals("", "ABC"));
assertTrue(IOCase.SENSITIVE.checkEquals("", ""));
assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "AB"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "Ab"));
assertTrue(IOCase.INSENSITIVE.checkRegionMatches("ABC", 0, "AB"));
assertTrue(IOCase.INSENSITIVE.checkRegionMatches("ABC", 0, "Ab"));
assertTrue(IOCase.SYSTEM.checkRegionMatches("ABC", 0, "AB"));
assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, ""));
assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "A"));
assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "AB"));
assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "ABC"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "BC"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "C"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "ABCD"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("", 0, "ABC"));
assertTrue(IOCase.SENSITIVE.checkRegionMatches("", 0, ""));
assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, ""));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "A"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "AB"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "ABC"));
assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "BC"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "C"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "ABCD"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("", 1, "ABC"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("", 1, ""));
assertTrue(IOCase.SENSITIVE.checkStartsWith("ABC", "AB"));
assertFalse(IOCase.SENSITIVE.checkStartsWith("ABC", "Ab"));
assertTrue(IOCase.INSENSITIVE.checkStartsWith("ABC", "AB"));
assertTrue(IOCase.INSENSITIVE.checkStartsWith("ABC", "Ab"));
assertTrue(IOCase.SYSTEM.checkStartsWith("ABC", "AB"));
assertTrue(IOCase.SENSITIVE.checkStartsWith("ABC", ""));
assertTrue(IOCase.SENSITIVE.checkStartsWith("ABC", "A"));
assertTrue(IOCase.SENSITIVE.checkStartsWith("ABC", "AB"));
assertTrue(IOCase.SENSITIVE.checkStartsWith("ABC", "ABC"));
assertFalse(IOCase.SENSITIVE.checkStartsWith("ABC", "BC"));
assertFalse(IOCase.SENSITIVE.checkStartsWith("ABC", "C"));
assertFalse(IOCase.SENSITIVE.checkStartsWith("ABC", "ABCD"));
assertFalse(IOCase.SENSITIVE.checkStartsWith("", "ABC"));
assertTrue(IOCase.SENSITIVE.checkStartsWith("", ""));
assertFalse(IOCase.SENSITIVE.checkStartsWith("ABC", null));
assertFalse(IOCase.SENSITIVE.checkStartsWith(null, "ABC"));
assertFalse(IOCase.SENSITIVE.checkStartsWith(null, null));
assertTrue(IOCase.SENSITIVE.isCaseSensitive());
assertFalse(IOCase.INSENSITIVE.isCaseSensitive());
assertTrue(IOCase.isCaseSensitive(IOCase.SENSITIVE));
assertFalse(IOCase.isCaseSensitive(IOCase.INSENSITIVE));
assertTrue(accPathVisitor.getFileList().isEmpty());
assertTrue(accPathVisitor.getFileList().isEmpty());
assertTrue(Files.exists(tempFile));
assertTrue(Files.exists(tempFile));
assertTrue(Files.exists(tempDirPath.resolve("f1")));
assertTrue(Files.exists(tempDirPath.resolve("dir")));
assertTrue(Files.exists(targetDir.resolve("dirs-a-file-size-1")));
assertTrue(Files.exists(targetDir.resolve("dirs-a-file-size-1")));
assertTrue(Files.exists(targetDir.resolve("dir")));
assertTrue(Files.exists(targetDir.resolve("f1")));
assertTrue(Files.exists(targetDir.resolve("dirs-a-file-size-1")));
assertTrue(Files.exists(targetDir.resolve("dirs-a-file-size-1")));
assertTrue(Files.exists(targetFile));
assertTrue(Files.exists(targetFile));
assertFalse(PathUtils.isDirectory(null));
assertTrue(PathUtils.isDirectory(tempDirPath));
assertFalse(PathUtils.isDirectory(testFile1.get()));
assertTrue(PathUtils.isDirectory(tempDir.get()));
assertFalse(PathUtils.isDirectory(ref));
assertFalse(PathUtils.isRegularFile(null));
assertFalse(PathUtils.isRegularFile(tempDirPath));
assertTrue(PathUtils.isRegularFile(testFile1.get()));
assertFalse(PathUtils.isRegularFile(testFile1.get()));
assertFalse(iterator.hasNext());
assertTrue(readable);
assertTrue(writable);
assertTrue(Files.isReadable(resolved), "isReadable");
assertTrue(Files.isWritable(resolved), "isWritable");
assertTrue(Files.isReadable(resolved), "isReadable");
assertTrue(Files.isWritable(resolved), "isWritable");
assertFalse(Files.isReadable(resolved), "isReadable");
assertTrue(Files.isReadable(resolved), "isReadable");
assertFalse(Files.isWritable(resolved), "isWritable");
assertTrue(dosFileAttributeView.readAttributes().isReadOnly());
assertFalse(Files.isReadable(resolved));
assertFalse(Files.exists(file), "Bad test: test file still exists");
assertTrue(Files.exists(file), "touch() created file");
assertTrue(getLastModifiedMillis(file) >= nowMillis - delta, "FileUtils.touch() changed lastModified to more than now-3s");
assertTrue(getLastModifiedMillis(file) <= nowMillis + delta, "FileUtils.touch() changed lastModified to less than now+3s");
assertTrue(Files.exists(brokenLink, LinkOption.NOFOLLOW_LINKS));
assertFalse(Files.exists(missingFile, LinkOption.NOFOLLOW_LINKS));
assertFalse(Files.exists(brokenLink, LinkOption.NOFOLLOW_LINKS), "Symbolic link not removed");
assertFalse(Files.isWritable(resolved));
assertFalse(Files.isWritable(resolved));
Assertions.assertTrue(PathUtils.isEmpty(FILE_SIZE_0));
Assertions.assertFalse(PathUtils.isEmpty(FILE_SIZE_1));
Assertions.assertTrue(PathUtils.isEmpty(tempDir.get()));
Assertions.assertFalse(PathUtils.isEmpty(DIR_SIZE_1));
Assertions.assertTrue(PathUtils.isEmptyDirectory(tempDir.get()));
Assertions.assertFalse(PathUtils.isEmptyDirectory(DIR_SIZE_1));
Assertions.assertTrue(PathUtils.isEmptyFile(FILE_SIZE_0));
Assertions.assertFalse(PathUtils.isEmptyFile(FILE_SIZE_1));
assertTrue(FileUtils.isEmptyDirectory(tempDir.toFile()));
assertFalse(Files.exists(ref.get()));
// assertFalse(Files.exists(ref));
assertTrue(FileUtils.isEmptyDirectory(tempDir.toFile()));
assertFalse(Files.exists(ref.get()));
assertTrue(PathUtils.directoryAndFileContentEquals(null, null));
assertFalse(PathUtils.directoryAndFileContentEquals(null, path1));
assertFalse(PathUtils.directoryAndFileContentEquals(path1, null));
assertTrue(PathUtils.directoryAndFileContentEquals(path1, path1));
assertTrue(PathUtils.directoryAndFileContentEquals(path1, path2));
assertTrue(PathUtils.directoryAndFileContentEquals(path2, path2));
assertTrue(PathUtils.directoryAndFileContentEquals(path2, path1));
assertTrue(PathUtils.directoryAndFileContentEquals(dir1, dir2));
assertTrue(PathUtils.directoryAndFileContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryAndFileContentEquals(dir1, dir1));
assertTrue(PathUtils.directoryAndFileContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryAndFileContentEquals(dir1, dir2));
assertTrue(PathUtils.directoryAndFileContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryAndFileContentEquals(dir1, dir1));
assertTrue(PathUtils.directoryAndFileContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryAndFileContentEquals(dir1, dir2));
assertTrue(PathUtils.directoryAndFileContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryAndFileContentEquals(dir1, dir1));
assertTrue(PathUtils.directoryAndFileContentEquals(dir2, dir2));
assertFalse(PathUtils.directoryAndFileContentEquals(dir1, dir2));
assertFalse(PathUtils.directoryAndFileContentEquals(dir2, dir1));
assertFalse(PathUtils.directoryAndFileContentEquals(dir1, dir2));
assertFalse(PathUtils.directoryAndFileContentEquals(dir2, dir1));
assertTrue(PathUtils.directoryContentEquals(null, null));
assertFalse(PathUtils.directoryContentEquals(null, path1));
assertFalse(PathUtils.directoryContentEquals(path1, null));
assertTrue(PathUtils.directoryContentEquals(path1, path1));
assertTrue(PathUtils.directoryContentEquals(path1, path2));
assertTrue(PathUtils.directoryContentEquals(path2, path2));
assertTrue(PathUtils.directoryContentEquals(path2, path1));
assertTrue(PathUtils.directoryContentEquals(dir1, dir2));
assertTrue(PathUtils.directoryContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryContentEquals(dir1, dir1));
assertTrue(PathUtils.directoryContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryContentEquals(dir1, dir2));
assertTrue(PathUtils.directoryContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryContentEquals(dir1, dir1));
assertTrue(PathUtils.directoryContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryContentEquals(dir1, dir2));
assertTrue(PathUtils.directoryContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryContentEquals(dir1, dir1));
assertTrue(PathUtils.directoryContentEquals(dir2, dir2));
assertFalse(PathUtils.directoryContentEquals(dir1, dir2));
assertFalse(PathUtils.directoryContentEquals(dir2, dir1));
assertFalse(PathUtils.directoryContentEquals(dir1, dir2));
assertFalse(PathUtils.directoryContentEquals(dir2, dir1));
assertTrue(PathUtils.fileContentEquals(null, null));
assertFalse(PathUtils.fileContentEquals(null, path1));
assertFalse(PathUtils.fileContentEquals(path1, null));
assertTrue(PathUtils.fileContentEquals(path1, path1));
assertTrue(PathUtils.fileContentEquals(path1, path2));
assertTrue(PathUtils.fileContentEquals(path2, path2));
assertTrue(PathUtils.fileContentEquals(path2, path1));
assertFalse(PathUtils.fileContentEquals(objFile1, objFile2));
assertFalse(PathUtils.fileContentEquals(objFile1b, objFile2));
assertTrue(PathUtils.fileContentEquals(objFile1, objFile1b));
assertTrue(PathUtils.fileContentEquals(objFile1, objFile1));
assertTrue(PathUtils.fileContentEquals(objFile1b, objFile1b));
assertTrue(PathUtils.fileContentEquals(objFile2, objFile2));
assertTrue(PathUtils.fileContentEquals(path1, path1));
assertTrue(PathUtils.fileContentEquals(path1, path2));
assertTrue(Files.exists(ref.get()));
assertFalse(Files.exists(ref.get()));
// assertFalse(Files.exists(ref));
assertTrue(Files.exists(ref.get()));
assertFalse(Files.exists(ref.get()));
Assertions.assertTrue(Files.exists(skippedFile));
Assertions.assertTrue(Files.exists(skippedFile));
assertFalse(FilesUncheck.deleteIfExists(NEW_FILE_PATH));
assertTrue(0 < FilesUncheck.getLastModifiedTime(FILE_PATH_EMPTY, LinkOption.NOFOLLOW_LINKS).toMillis());
assertFalse(FilesUncheck.isHidden(FILE_PATH_EMPTY));
assertTrue(FilesUncheck.isSameFile(FILE_PATH_EMPTY, FILE_PATH_EMPTY));
assertTrue(0 < FilesUncheck.walk(TARGET_PATH, FileVisitOption.FOLLOW_LINKS).count());
assertFalse(iterator.hasNext());
assertTrue(testFile.exists());
assertTrue(tempDirFile.exists());
assertTrue(testFile.exists());  // not deleted, as dir not empty
assertTrue(testFile.getParentFile().exists());  // not deleted, as dir not empty
assertTrue(testFile.exists());
assertTrue(tempDirFile.exists());
assertFalse(new File(testFile.getPath()).exists(), showFailures());
assertFalse(testFile.getParentFile().exists(), showFailures());
assertTrue(testFile.exists());
assertTrue(tempDirFile.exists());
assertTrue(testFile.exists());  // not deleted, as dir not empty
assertTrue(testFile.getParentFile().exists());  // not deleted, as dir not empty
assertFalse(theInstance.exitWhenFinished);
assertTrue(theInstance.exitWhenFinished);
assertTrue(theInstance.exitWhenFinished);
assertFalse(testFile.exists(), "1-testFile exists: " + testFile);
assertTrue(testFile.exists(), "2-testFile exists");
assertFalse(theInstance.exitWhenFinished, "5-exitWhenFinished");
assertTrue(theInstance.reaper.isAlive(), "6-reaper.isAlive");
assertFalse(theInstance.exitWhenFinished, "7-exitWhenFinished");
assertTrue(theInstance.exitWhenFinished, "8-exitWhenFinished");
assertTrue(theInstance.reaper.isAlive(), "9-reaper.isAlive");
assertFalse(new File(path).exists(), "11-testFile exists " + showFailures());
assertTrue(theInstance.exitWhenFinished, "12-exitWhenFinished");
assertFalse(theInstance.reaper.isAlive(), "13-reaper.isAlive");
assertFalse(testFile.exists());
assertTrue(testFile.exists());
assertFalse(theInstance.exitWhenFinished);
assertTrue(theInstance.reaper.isAlive());
assertFalse(new File(path).exists(), showFailures());
assertFalse(theInstance.exitWhenFinished);
assertTrue(theInstance.reaper.isAlive());
assertFalse(theInstance.exitWhenFinished);
assertTrue(theInstance.exitWhenFinished);
assertFalse(theInstance.reaper.isAlive());
assertFalse(theInstance.exitWhenFinished);
assertTrue(theInstance.exitWhenFinished);
assertTrue(theInstance.exitWhenFinished);
assertFalse(testFile.exists());
assertTrue(testFile.exists());
assertFalse(new File(path).exists(), showFailures());
public void assertCloseCalled() {assertTrue(_closeCalled);
assertTrue(in.hasBOM(), "hasBOM()");
assertTrue(in.hasBOM(ByteOrderMark.UTF_8), "hasBOM(UTF-8)");
assertTrue(in.hasBOM(), "hasBOM()");
assertTrue(in.hasBOM(ByteOrderMark.UTF_8), "hasBOM(UTF-8)");
assertTrue(in.markSupported());
assertTrue(in.markSupported());
assertTrue(in.markSupported());
assertTrue(in.markSupported());
assertFalse(in.hasBOM(), "hasBOM()");
assertFalse(in.hasBOM(ByteOrderMark.UTF_8), "hasBOM(UTF-8)");
assertFalse(in.hasBOM(), "hasBOM()");
assertFalse(in.hasBOM(ByteOrderMark.UTF_8), "hasBOM(UTF-8)");
assertTrue(in.hasBOM(), "hasBOM()");
assertTrue(in.hasBOM(ByteOrderMark.UTF_8), "hasBOM(UTF-8)");
assertTrue(in.hasBOM(), "hasBOM()");
assertTrue(in.hasBOM(ByteOrderMark.UTF_16BE), "hasBOM(UTF-16BE)");
assertTrue(in.hasBOM(), "hasBOM()");
assertTrue(in.hasBOM(ByteOrderMark.UTF_16LE), "hasBOM(UTF-16LE)");
assertTrue(in.hasBOM(), "hasBOM()");
assertTrue(in.hasBOM(ByteOrderMark.UTF_32BE), "hasBOM(UTF-32BE)");
assertTrue(in.hasBOM(), "hasBOM()");
assertTrue(in.hasBOM(ByteOrderMark.UTF_32LE), "hasBOM(UTF-32LE)");
assertTrue(in.hasBOM(), "hasBOM()");
assertTrue(in.hasBOM(ByteOrderMark.UTF_8), "hasBOM(UTF-8)");
assertTrue(in.hasBOM(), "hasBOM()");
assertTrue(in.hasBOM(ByteOrderMark.UTF_8), "hasBOM(UTF-8)");
assertFalse(in.hasBOM(ByteOrderMark.UTF_16BE), "hasBOM(UTF-16BE)");
assertFalse(in.hasBOM(), "hasBOM()");
assertFalse(in.hasBOM(ByteOrderMark.UTF_8), "hasBOM(UTF-8)");
assertTrue(is.markSupported());
assertTrue(is.markSupported());
assertFalse(timestampedObserver.isClosed());
assertTrue(timestampedObserver.getOpenInstant().isAfter(before));
assertTrue(timestampedObserver.getOpenToNowDuration().toNanos() > 0);
assertFalse(timestampedObserver.isClosed());
assertTrue(timestampedObserver.getOpenInstant().isAfter(before));
assertTrue(timestampedObserver.getOpenToNowDuration().toNanos() > 0);
assertFalse(timestampedObserver.isClosed());
assertTrue(timestampedObserver.isClosed());
assertTrue(timestampedObserver.getOpenInstant().isAfter(before));
assertTrue(timestampedObserver.getOpenToNowDuration().toNanos() > 0);
assertTrue(timestampedObserver.getCloseInstant().isAfter(timestampedObserver.getOpenInstant()));
assertTrue(timestampedObserver.getOpenToCloseDuration().toNanos() > 0);
assertTrue(Comparable.class.isAssignableFrom(result), "Assignable");
assertTrue(Comparable.class.isAssignableFrom(result), "Assignable");
assertTrue(Runnable.class.isAssignableFrom(result), "Assignable");
assertTrue(Serializable.class.isAssignableFrom(result), "Assignable");
assertFalse(Flushable.class.isAssignableFrom(result), "Not Assignable");
assertTrue(ex.getMessage().contains("Invalid encoding,"));
assertTrue(encoding.equalsIgnoreCase(xmlReader.getEncoding()), "Check encoding : " + encoding);
assertTrue(ex.getMessage().contains("Invalid encoding,"));
assertTrue(ex.getMessage().contains("Invalid encoding,"));
assertTrue(file.getParentFile().exists(), () -> "Cannot create file " + file + " as the parent directory does not exist");
assertTrue(file.exists());
assertTrue(tailer.getTailable() instanceof NonStandardTailable);
assertFalse(file.exists(), "nosuchfile should not exist");
assertTrue(listener.exception instanceof InterruptedException, "Unexpected Exception: " + listener.exception);
assertTrue(listener.notFound > 0, "fileNotFound should be called");
assertFalse(file.exists(), "nosuchfile should not exist");
assertTrue(listener.notFound > 0, "fileNotFound should be called");
assertFalse(file.exists(), "nosuchfile should not exist");
assertTrue(listener.notFound > 0, "fileNotFound should be called");
assertFalse(file.exists(), "File should not exist");
assertTrue(file.exists(), "File should now exist");
assertTrue(listener.exception instanceof InterruptedException, "Unexpected Exception: " + listener.exception);
assertTrue(listener.reachedEndOfFile >= 3, "end of file reached at least 3 times");
assertTrue(listener.awaitExpectedLines(timeout, timeoutUnit), () -> String.format("await timed out after %s %s", timeout, timeoutUnit));
assertTrue(reader.markSupported());
assertTrue(reader.ready());
assertTrue(reader.ready());
assertFalse(reader.ready());
assertTrue(reader.ready());
assertTrue(reader.ready());
assertFalse(reader.ready());
assertTrue(reader.ready());
assertFalse(reader.ready());
assertTrue(subReader.ready());
assertTrue(subReader.ready());
assertFalse(subReader.ready());
assertTrue(subReader.ready());
assertTrue(subReader.ready());
assertFalse(subReader.ready());
assertTrue(subReader.ready());
assertFalse(subReader.ready());
assertTrue(closed, "closed");
assertTrue(closed, "closed");
assertFalse(closed, "closed");
assertTrue(closed, "closed");
assertFalse(closed, "closed");
assertTrue(closed, "closed");
assertFalse(closed, "closed");
assertTrue(closed, "closed");
assertTrue(reversedLinesFileReader.readLines(0).isEmpty());
assertTrue(reversedLinesFileReader.readLines(0).isEmpty());
assertTrue(reversedLinesFileReader.readLines(10000).isEmpty());
assertTrue(reversedLinesFileReader.readLines(0).isEmpty());
assertTrue(reversedLinesFileReader.toString(0).isEmpty());
assertTrue(reversedLinesFileReader.toString(10000).isEmpty());
assertTrue(ois.getObservers().isEmpty());
assertTrue(input.markSupported(), "Mark Should be Supported");
assertFalse(input.markSupported(), "Mark Should NOT be Supported");
assertTrue(reader.isCauseOf(e));
assertTrue(reader.isCauseOf(e));
assertTrue(reader.isCauseOf(e));
assertFalse(reader.ready());
assertTrue(reader.ready());
assertFalse(reader.isCauseOf(exception));
assertFalse(reader.isCauseOf(new TaggedIOException(exception, UUID.randomUUID())));
assertTrue(ucStringReader.ready());
assertFalse(is.markSupported());
assertFalse(msis.markSupported());
assertTrue(is.markSupported());
assertFalse(msis.markSupported());
assertFalse(sdis.readBoolean());
assertTrue(sdis.readBoolean());
assertTrue(sdis.readBoolean());
assertTrue(reader.markSupported(), "Mark Should be Supported");
assertFalse(reader.markSupported(), "Mark Should NOT be Supported");
assertFalse(reader.markSupported());
assertTrue(read <= bufferLength);
assertTrue(offset < expected.length);
assertTrue(read >= 0);
assertTrue(read <= 255);
assertTrue(e.getMessage().startsWith("Invalid encoding"), "Msg Start: " + e.getMessage());
assertTrue(e.getMessage().endsWith(msgSuffix), "Msg End: " + e.getMessage());
assertTrue(e.getMessage().startsWith("Invalid encoding"), "Msg Start: " + e.getMessage());
assertTrue(e.getMessage().endsWith(msgSuffix), "Msg End: "   + e.getMessage());
assertTrue(closed.get());
assertTrue(stream.isCauseOf(e));
assertTrue(stream.isCauseOf(e));
assertTrue(stream.isCauseOf(e));
assertFalse(stream.isCauseOf(exception));
assertFalse(stream.isCauseOf(new TaggedIOException(exception, UUID.randomUUID())));
assertTrue(available >= min, "avail should be >= " + min + ", but was " + available);
assertTrue(read <= bufferLength, "Read " + read + " <= " + bufferLength);
assertTrue(offset < expected.length,"offset for " + charsetName + " " + offset + " < " + expected.length);
assertTrue(r.markSupported());
assertTrue(read >= 0, "read " + read + " >=0 ");
assertTrue(read <= 255, "read " + read + " <= 255");
//Assert.assertTrue(goodW.closed);
assertTrue(ucStringReader.ready());
assertFalse(inputStream.isCloseOnClose());
assertTrue(inputStream.isCloseOnClose());
assertFalse(inputStream.isCloseOnClose());
assertTrue(inputStream.isCloseOnClose());
assertTrue(ByteBufferCleaner.isSupported(), "ByteBufferCleaner does not work on this platform, please investigate and fix");
static void assertEqualsAndNoLineBreaks(final String msg, final String expected, final String actual) {if (actual != null) {assertFalse(actual.contains(LF.getString()), "Line contains \\n: line=" + actual);
assertFalse(actual.contains(CR.getString()), "Line contains \\r: line=" + actual);
assertTrue(true, "Test finished OK");
assertFalse(closed, "closed");
assertTrue(realOuter.mkdirs());
assertTrue(realInner.mkdirs());
assertTrue(randomDirectory.mkdirs());
assertTrue(setupSymlink(randomDirectory, symlinkDirectory));
assertTrue(realOuter.mkdirs());
assertTrue(realInner.mkdirs());
assertTrue(randomDirectory.mkdirs());
assertTrue(realOuter.mkdirs());
assertTrue(realInner.mkdirs());
assertTrue(setupSymlink(randomFile, symlinkFile));
assertTrue(randomFile.exists());
assertFalse(symlinkFile.exists());
assertTrue(aFile.mkdir());
assertTrue(bFile.mkdir());
assertTrue(cFile.mkdir());
assertTrue(dFile.mkdir());
assertTrue(realParent.mkdirs());
assertTrue(realInner.mkdirs());
assertTrue(randomDirectory.mkdirs());
assertTrue(setupSymlink(randomDirectory, symlinkDirectory));
assertTrue(setupSymlink(realParent, symlinkParentDirectory));
assertTrue(realParent.mkdirs());
assertTrue(realInner.mkdirs());
assertTrue(randomDirectory.mkdirs());
assertTrue(nested.mkdirs());
assertTrue(nested.mkdirs());
assertTrue(ca.matches("org.foo"));
assertFalse(ca.matches("org.foo.and.more"));
assertFalse(ca.matches("org_foo"));
assertTrue(ca.matches("org.foo.should.match"));
assertFalse(ca.matches("bar.should.not.match"));
assertTrue(ca.matches("org.apache_something.more"));
assertFalse(ca.matches("org..apache_something.more"));
assertFalse(m.matches(Integer.class.getName()));
assertTrue(m.matches(Integer.class.getName()));
assertFalse(m.matches(String.class.getName()));
assertTrue(ice.getMessage().contains(name), "Expecting message to contain " + name);
assertTrue(ca.matches("foo.should.match"));
assertTrue(ca.matches("bar.should.match"));
assertFalse(ca.matches("zoo.should.not.match"));
assertTrue(ca.matches("foo.should.match"));
assertFalse(ca.matches("bar.should.not.match"));
assertTrue(ca.matches("foo.should.match"));
assertFalse(ca.matches("bar.should.not.match"));
assertTrue(sqlExceptionList.getCauseList().isEmpty());
assertTrue(st.startsWith("org.apache.commons.io.IOExceptionList: 1 exception(s): [java.io.EOFException]"));
assertTrue(st.contains("Caused by: java.io.EOFException"));
assertTrue(IOUtils.contentEquals(expected, fis), "Content is not equal.");
assertTrue(setLastModifiedMillis(testFile, lastModified1 - mins10));
assertTrue(file.exists());
assertTrue(file.exists());
assertFalse(Files.exists(linkPath));
assertTrue(Files.exists(targetPath));
assertTrue(Files.isSymbolicLink(linkPath), () -> "Expected a sym link here: " + linkName);
assertTrue(expectedFilesAndDirs.contains(file),() -> "Unexpected directory/file " + file + ", expected one of " + expectedFilesAndDirs);
assertTrue(file.exists());
assertTrue(file.exists());
assertTrue(file.exists());
assertTrue(file.exists());
assertTrue(FileUtils.contentEquals(null, null));
assertFalse(FileUtils.contentEquals(null, file));
assertFalse(FileUtils.contentEquals(file, null));
assertTrue(FileUtils.contentEquals(file, file));
assertTrue(FileUtils.contentEquals(file, file2));
assertTrue(FileUtils.contentEquals(file2, file2));
assertTrue(FileUtils.contentEquals(file2, file));
assertFalse(FileUtils.contentEquals(objFile1, objFile2));
assertFalse(FileUtils.contentEquals(objFile1b, objFile2));
assertTrue(FileUtils.contentEquals(objFile1, objFile1b));
assertTrue(FileUtils.contentEquals(objFile1, objFile1));
assertTrue(FileUtils.contentEquals(objFile1b, objFile1b));
assertTrue(FileUtils.contentEquals(objFile2, objFile2));
assertTrue(FileUtils.contentEquals(file, file));
assertTrue(FileUtils.contentEquals(file, file2));
assertTrue(FileUtils.contentEqualsIgnoreEOL(null, null, null));
assertFalse(FileUtils.contentEqualsIgnoreEOL(null, file1, null));
assertFalse(FileUtils.contentEqualsIgnoreEOL(file1, null, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
assertFalse(FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
assertFalse(FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
assertTrue(cr.exists());
assertTrue(crlf.exists());
assertTrue(lf.exists());
assertTrue(FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
assertTrue(FileUtils.contentEquals(cr, cr));
assertTrue(FileUtils.contentEquals(crlf, crlf));
assertTrue(FileUtils.contentEquals(lf, lf));
assertFalse(FileUtils.contentEquals(cr, crlf));
assertFalse(FileUtils.contentEquals(cr, lf));
assertFalse(FileUtils.contentEquals(crlf, lf));
assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
//        assertTrue(urls[0].toExternalForm().startsWith("file:"));
//        assertTrue(urls[0].toExternalForm().indexOf("file1.txt") > 0);
assertTrue(setLastModifiedMillis(sourceFile, DATE3));
assertTrue(setLastModifiedMillis(sourceDirectory, DATE2));
assertTrue(setLastModifiedMillis(source, DATE1));
assertTrue(expectedCount > 0, "Count > 0");
assertTrue(expectedSize > 0, "Size > 0");
assertTrue(destDir.exists(), "Check exists");
assertTrue(actualDestDir.exists(), "Check exists");
assertTrue(srcSize > 0, "Size > 0");
assertTrue(new File(actualDestDir, "sub/A.txt").exists());
assertTrue(srcSize > 0, "Size > 0");
assertTrue(new File(destDir, "sub/A.txt").exists());
assertTrue(expectedSize > 0, "Size > 0");
assertTrue(destDir.exists(), "Check exists");
assertTrue(sizeOfSrcDirectory > 0, "Size > 0");
assertTrue(new File(destDir, "sub/A.txt").exists());
assertTrue(expectedCount > 0, "Count > 0");
assertTrue(expectedSize > 0, "Size > 0");
assertTrue(destination.exists(), "Check Exist");
assertTrue(destination.exists(), "Check Exist");
assertTrue(destination.exists(), "Check Exist");
assertTrue(destination.exists(), "Check Exist");
assertTrue(destFile.exists(), "Check Exist");
assertTrue(destLastModMillis > nowMillis,destLastModMillis + " > " + nowMillis + " (delta " + deltaMillis + ")");
assertTrue(destination.exists(), "Check Exist");
assertTrue(outputDirDestination.exists(), "Check Exists");
assertTrue(outputDirDestination.isDirectory(), "Check Directory");
assertTrue(destFile1.exists(), "Check Exists");
assertTrue(destFile2.exists(), "Check Exists");
assertTrue(destination.exists(), "Check Exists");
assertTrue(destFile1.exists(), "Check Exists");
assertTrue(destFile2.exists(), "Check Exists");
assertTrue(IOUtils.contentEquals(resStream, fis), "Content is not equal.");
assertTrue(testDirectory.exists());
assertTrue(testFile.exists());
assertFalse(testDirectory.exists(), "Check No Exist");
assertFalse(testFile.exists(), "Check No Exist");
assertTrue(testFile.exists());
assertFalse(testFile.exists(), "Check No Exist");
assertFalse(testFile.exists());
assertTrue(file2.exists());
assertTrue(file2.length() > 0);
assertTrue(file2.delete());
assertTrue(destination.exists(), "Copy1.txt doesn't exist to delete");
assertFalse(destination.exists(), "Check No Exist");
assertTrue(destination.exists(), "Copy2.txt doesn't exist to delete");
assertFalse(destination.exists(), "Check No Exist");
assertFalse(destination.exists(), "Check No Exist");
assertTrue(testDirectory.exists(), "TestDirectory must exist");
assertFalse(testDirectory.exists(), "TestDirectory must not exist");
assertTrue(file.setReadOnly());
assertTrue(file.canRead());
assertFalse(file.canWrite());
assertTrue(file.delete());
assertTrue(file.setReadOnly());
assertTrue(file.canRead());
assertFalse(file.canWrite());
assertTrue(file.exists(), "File doesn't exist to delete");
assertFalse(file.exists(), "Check deletion");
assertTrue(testFile.exists(), "Test file does not exist.");
assertTrue(testFile.exists(), "Directory was not created.");
assertTrue(tempDirFile.exists());
assertFalse(testParentDir.exists());
assertFalse(testParentDir.exists());
assertFalse(testFile.exists());
assertTrue(testParentDir.exists());
assertFalse(testFile.exists());
assertTrue(testParentDir.exists());
assertFalse(testFile.exists());
assertTrue(dir.mkdirs(), dir + " should not be present");
assertTrue(file.createNewFile(), file + " should not be present");
assertTrue(dest.mkdirs());
assertTrue(src.exists());
assertTrue(src.exists());
assertTrue(sourceFile.toFile().canExecute());
assertTrue(destFile.toFile().exists());
assertTrue(destFile.toFile().canExecute());
assertFalse(FileUtils.isDirectory(null));
assertTrue(FileUtils.isDirectory(tempDirFile));
assertFalse(FileUtils.isDirectory(testFile1));
assertTrue(FileUtils.isDirectory(tempDirAsFile));
assertFalse(FileUtils.isDirectory(tempDirAsFile));
Assertions.assertTrue(FileUtils.isEmptyDirectory(tempDirAsFile));
Assertions.assertFalse(FileUtils.isEmptyDirectory(PathUtilsIsEmptyTest.DIR_SIZE_1.toFile()));
assertFalse(FileUtils.isFileNewer(oldFile, refFile), "Old File - Newer - File");
assertFalse(FileUtils.isFileNewer(oldFile, date), "Old File - Newer - Date");
assertFalse(FileUtils.isFileNewer(oldFile, now), "Old File - Newer - Mili");
assertFalse(FileUtils.isFileNewer(oldFile, instant), "Old File - Newer - Instant");
assertFalse(FileUtils.isFileNewer(oldFile, zonedDateTime), "Old File - Newer - ZonedDateTime");
assertFalse(FileUtils.isFileNewer(oldFile, offsetDateTime), "Old File - Newer - OffsetDateTime");
assertFalse(FileUtils.isFileNewer(oldFile, localDateTime), "Old File - Newer - LocalDateTime");
assertFalse(FileUtils.isFileNewer(oldFile, localDateTime, ZoneId.systemDefault()), "Old File - Newer - LocalDateTime,ZoneId");
assertFalse(FileUtils.isFileNewer(oldFile, localDate), "Old File - Newer - LocalDate");
assertTrue(FileUtils.isFileNewer(oldFile, localDate, localTime0), "Old File - Newer - LocalDate,LocalTime");
assertTrue(FileUtils.isFileNewer(oldFile, localDate, offsetTime0), "Old File - Newer - LocalDate,OffsetTime");
assertFalse(FileUtils.isFileNewer(oldFile, localDatePlusDay), "Old File - Newer - LocalDate plus one day");
assertFalse(FileUtils.isFileNewer(oldFile, localDatePlusDay, localTime0), "Old File - Newer - LocalDate plus one day,LocalTime");
assertFalse(FileUtils.isFileNewer(oldFile, localDatePlusDay, offsetTime0), "Old File - Newer - LocalDate plus one day,OffsetTime");
assertTrue(FileUtils.isFileNewer(newFile, refFile), "New File - Newer - File");
assertTrue(FileUtils.isFileNewer(newFile, date), "New File - Newer - Date");
assertTrue(FileUtils.isFileNewer(newFile, now), "New File - Newer - Mili");
assertTrue(FileUtils.isFileNewer(newFile, instant), "New File - Newer - Instant");
assertTrue(FileUtils.isFileNewer(newFile, zonedDateTime), "New File - Newer - ZonedDateTime");
assertTrue(FileUtils.isFileNewer(newFile, offsetDateTime), "New File - Newer - OffsetDateTime");
assertTrue(FileUtils.isFileNewer(newFile, localDateTime), "New File - Newer - LocalDateTime");
assertTrue(FileUtils.isFileNewer(newFile, localDateTime, ZoneId.systemDefault()), "New File - Newer - LocalDateTime,ZoneId");
assertFalse(FileUtils.isFileNewer(newFile, localDate), "New File - Newer - LocalDate");
assertTrue(FileUtils.isFileNewer(newFile, localDate, localTime0), "New File - Newer - LocalDate,LocalTime");
assertTrue(FileUtils.isFileNewer(newFile, localDate, offsetTime0), "New File - Newer - LocalDate,OffsetTime");
assertFalse(FileUtils.isFileNewer(newFile, localDatePlusDay), "New File - Newer - LocalDate plus one day");
assertFalse(FileUtils.isFileNewer(newFile, localDatePlusDay, localTime0), "New File - Newer - LocalDate plus one day,LocalTime");
assertFalse(FileUtils.isFileNewer(newFile, localDatePlusDay, offsetTime0), "New File - Newer - LocalDate plus one day,OffsetTime");
assertFalse(FileUtils.isFileNewer(invalidFile, refFile), "Invalid - Newer - File");
assertTrue(FileUtils.isFileOlder(oldFile, refFile), "Old File - Older - File");
assertTrue(FileUtils.isFileOlder(oldFile, date), "Old File - Older - Date");
assertTrue(FileUtils.isFileOlder(oldFile, now), "Old File - Older - Mili");
assertTrue(FileUtils.isFileOlder(oldFile, instant), "Old File - Older - Instant");
assertTrue(FileUtils.isFileOlder(oldFile, zonedDateTime), "Old File - Older - ZonedDateTime");
assertTrue(FileUtils.isFileOlder(oldFile, offsetDateTime), "Old File - Older - OffsetDateTime");
assertTrue(FileUtils.isFileOlder(oldFile, localDateTime), "Old File - Older - LocalDateTime");
assertTrue(FileUtils.isFileOlder(oldFile, localDateTime, ZoneId.systemDefault()), "Old File - Older - LocalDateTime,LocalTime");
assertTrue(FileUtils.isFileOlder(oldFile, localDate), "Old File - Older - LocalDate");
assertFalse(FileUtils.isFileOlder(oldFile, localDate, localTime0), "Old File - Older - LocalDate,LocalTime");
assertFalse(FileUtils.isFileOlder(oldFile, localDate, offsetTime0), "Old File - Older - LocalDate,OffsetTime");
assertTrue(FileUtils.isFileOlder(oldFile, localDatePlusDay), "Old File - Older - LocalDate plus one day");
assertTrue(FileUtils.isFileOlder(oldFile, localDatePlusDay, localTime0), "Old File - Older - LocalDate plus one day,LocalTime");
assertTrue(FileUtils.isFileOlder(oldFile, localDatePlusDay, offsetTime0), "Old File - Older - LocalDate plus one day,OffsetTime");
assertFalse(FileUtils.isFileOlder(newFile, refFile), "New File - Older - File");
assertFalse(FileUtils.isFileOlder(newFile, date), "New File - Older - Date");
assertFalse(FileUtils.isFileOlder(newFile, now), "New File - Older - Mili");
assertFalse(FileUtils.isFileOlder(newFile, instant), "New File - Older - Instant");
assertFalse(FileUtils.isFileOlder(newFile, zonedDateTime), "New File - Older - ZonedDateTime");
assertFalse(FileUtils.isFileOlder(newFile, offsetDateTime), "New File - Older - OffsetDateTime");
assertFalse(FileUtils.isFileOlder(newFile, localDateTime), "New File - Older - LocalDateTime");
assertFalse(FileUtils.isFileOlder(newFile, localDateTime, ZoneId.systemDefault()), "New File - Older - LocalDateTime,ZoneId");
assertTrue(FileUtils.isFileOlder(newFile, localDate), "New File - Older - LocalDate");
assertFalse(FileUtils.isFileOlder(newFile, localDate, localTime0), "New File - Older - LocalDate,LocalTime");
assertFalse(FileUtils.isFileOlder(newFile, localDate, offsetTime0), "New File - Older - LocalDate,OffsetTime");
assertTrue(FileUtils.isFileOlder(newFile, localDatePlusDay), "New File - Older - LocalDate plus one day");
assertTrue(FileUtils.isFileOlder(newFile, localDatePlusDay, localTime0), "New File - Older - LocalDate plus one day,LocalTime");
assertTrue(FileUtils.isFileOlder(newFile, localDatePlusDay, offsetTime0), "New File - Older - LocalDate plus one day,OffsetTime");
assertFalse(FileUtils.isFileOlder(invalidFile, refFile), "Invalid - Older - File");
assertFalse(FileUtils.isRegularFile(null));
assertFalse(FileUtils.isRegularFile(tempDirFile));
assertTrue(FileUtils.isRegularFile(testFile1));
assertFalse(FileUtils.isRegularFile(testFile1));
assertTrue(subDir.mkdir());
assertTrue(subSubDir.mkdir());
assertTrue(notSubSubDir.mkdir());
assertTrue(subDir1.mkdir());
assertTrue(subDir2.mkdir());
assertTrue(subDir3.mkdir());
assertTrue(subDir4.mkdir());
assertTrue(new File(directory, "TEST").mkdir());
assertTrue(new File(directory, "test.txt").createNewFile());
FileUtils.iterateFiles(directory, filter, null).forEachRemaining(file -> assertFalse(file.isDirectory(), file::getAbsolutePath));
assertTrue(new File(directory, "TEST").mkdir());
assertTrue(new File(directory, "test.txt").createNewFile());
assertFalse(file.isDirectory(), file::getAbsolutePath);
assertTrue(files.contains(subDir1), "Should contain the directory.");
assertTrue(files.contains(subDir2), "Should contain the directory.");
assertTrue(files.contains(someFile), "Should contain the file.");
assertTrue(files.contains(subDir3), "Should contain the directory.");
assertTrue(destination.exists(), "Check Exist");
assertFalse(src.exists(), "Original deleted");
assertTrue(movedDir.exists(), "Check dir moved");
assertTrue(movedFile.exists(), "Check file moved");
assertTrue(destination.exists(), "Check Exist");
assertFalse(src.exists(), "Original deleted");
assertTrue(movedDir.exists(), "Check dir moved");
assertTrue(movedFile.exists(), "Check file moved");
assertFalse(destDir.exists(), "Check Exist before");
assertTrue(destDir.exists(), "Check Exist after");
assertFalse(src.exists(), "Original deleted");
assertTrue(movedDir.exists(), "Check dir moved");
assertTrue(movedChildDir.exists(), "Check child dir moved");
assertTrue(movedFile.exists(), "Check file moved");
assertTrue(destination.exists(), "Check Exist");
assertFalse(src.exists(), "Original deleted");
assertFalse(destination.exists(), "Check Rollback");
assertTrue(src.exists(), "Original exists");
assertTrue(destination.exists(), "Check Exist");
assertFalse(src.exists(), "Original deleted");
assertTrue(destination.exists(), "Check Exist");
assertFalse(src.exists(), "Original deleted");
assertTrue(destLastModMillis > nowMillis,destLastModMillis + " > " + nowMillis + " (delta " + deltaMillis + ")");
assertTrue(testDestFile.getParentFile().exists(), () -> "Cannot create file " + testDestFile + " as the parent directory does not exist");
assertTrue(destination.exists(), "Check Exist");
assertFalse(testFile1.exists(), "Original deleted");
assertFalse(destDir.exists(), "Check Exist before");
assertFalse(movedFile.exists(), "Check Exist before");
assertTrue(movedFile.exists(), "Check Exist after");
assertFalse(testFile1.exists(), "Original deleted");
assertFalse(movedFile.exists(), "Check File Doesnt exist");
assertFalse(movedDir.exists(), "Check Dir Doesnt exist");
assertTrue(movedFile.exists(), "Check File exists");
assertFalse(testFile.exists(), "Check Original File doesn't exist");
assertTrue(movedDir.exists(), "Check Dir exists");
assertFalse(testDir.exists(), "Check Original Dir doesn't exist");
assertTrue(nonEmptyFile.getParentFile().exists(), () -> "Cannot create file " + nonEmptyFile + " as the parent directory does not exist");
assertTrue(file.toString().contains("file.txt"));
assertTrue(file.toString().contains("file name%20.txt"));
assertTrue(file.toString().contains("file% %me.txt%"));
assertTrue(files[0].toString().contains("file1.txt"), "File: " + files[0]);
assertTrue(files[1].toString().contains("file2.txt"), "File: " + files[1]);
assertTrue(files[0].toString().contains("file1.txt"), "File: " + files[0]);
assertTrue(file.toString().contains("\u00E4\u00F6\u00FC\u00DF"));
assertFalse(file.exists(), "Bad test: test file still exists");
assertTrue(file.exists(), "FileUtils.touch() created file");
assertTrue(res, "Bad test: set lastModified failed");
assertTrue(getLastModifiedMillis(file) >= nowMillis - delta, "FileUtils.touch() changed lastModified to more than now-3s");
assertTrue(getLastModifiedMillis(file) <= nowMillis + delta, "FileUtils.touch() changed lastModified to less than now+3s");
assertTrue(urls[0].toExternalForm().startsWith("file:"));
assertTrue(urls[0].toExternalForm().contains("file1.txt"));
assertTrue(urls[1].toExternalForm().startsWith("file:"));
assertTrue(urls[1].toExternalForm().contains("file2.txt"));
assertTrue(urls[2].toExternalForm().startsWith("file:"));
assertTrue(urls[2].toExternalForm().contains("test%20file.txt"));
assertTrue(writer.isCauseOf(e));
assertTrue(writer.isCauseOf(e));
assertTrue(writer.isCauseOf(e));
assertFalse(writer.isCauseOf(exception));
assertFalse(writer.isCauseOf(new TaggedIOException(exception, UUID.randomUUID())));
assertTrue(writerCharset.contains(charset), writerCharset.name());
assertTrue(in instanceof ClosedInputStream);
assertTrue(true, "Dummy");
assertTrue(true, "Dummy to show test completed OK");
assertFalse(closed, "closed");
assertTrue(stream.isCauseOf(e));
assertTrue(stream.isCauseOf(e));
assertTrue(stream.isCauseOf(e));
assertFalse(stream.isCauseOf(exception));
assertFalse(stream.isCauseOf(new TaggedIOException(exception, UUID.randomUUID())));
assertTrue(file.exists());
assertTrue(altLockFile.exists());
assertTrue(msg.startsWith("Can't write file, lock "), "Exception message does not start correctly. ");
assertTrue(file.exists());
assertTrue(altLockFile.exists());
assertTrue(file.exists());
assertFalse(altLockFile.exists());
assertFalse(file.exists());
assertFalse(lockFile.exists());
assertFalse(file.exists());
assertFalse(lockFile.exists());
assertFalse(file.exists());
assertFalse(lockFile.exists());
assertFalse(file.exists());
assertFalse(lockFile.exists());
assertFalse(file.exists());
assertFalse(lockFile.exists());
assertFalse(file.exists());
assertFalse(lockFile.exists());
assertFalse(file.exists());
assertFalse(lockFile.exists());
assertFalse(file.exists());
assertFalse(lockFile.exists());
assertTrue(file.exists());
assertTrue(lockFile.exists());
assertTrue(msg.startsWith("Can't write file, lock "), "Exception message does not start correctly. ");
assertTrue(file.exists());
assertTrue(lockFile.exists());
assertTrue(msg.startsWith("Can't write file, lock "), "Exception message does not start correctly. ");
assertTrue(file.exists());
assertTrue(lockFile.exists());
assertTrue(file.exists());
assertFalse(lockFile.exists());
assertTrue(file.exists());
assertTrue(lockFile.exists());
assertTrue(file.exists());
assertFalse(lockFile.exists());
assertTrue(file.exists());
assertTrue(lockFile.exists());
assertTrue(file.exists());
assertFalse(lockFile.exists());
assertFalse(reached.get());
assertTrue(reached.get());
assertFalse(reached.get());
assertFalse(reached.get());
assertFalse(reached.get());
assertTrue(reached.get());
assertFalse(reached.get());
assertTrue(reached.get());
assertFalse(dfos.isInMemory());
assertFalse(dfos.isInMemory());
assertTrue(dfos.isInMemory());
assertTrue(dfos.isInMemory());
assertTrue(dfos.isInMemory());
assertFalse(dfos.isInMemory());
assertTrue(dfos.getFile().exists(), "Check file exists");
assertTrue(dfos.getFile().getName().startsWith(prefix), "Check prefix");
assertTrue(dfos.getFile().getName().endsWith(suffix), "Check suffix");
assertFalse(dfos.isInMemory());
assertTrue(dfos.getFile().exists(), "Check file exists");
assertTrue(dfos.getFile().getName().startsWith(prefix), "Check prefix");
assertTrue(dfos.getFile().getName().endsWith(".tmp"), "Check suffix"); // ".tmp" is default
assertTrue(dfos.isInMemory());
assertFalse(dfos.isInMemory());
assertTrue(testFile.exists());
assertFalse(dfos.isInMemory());
assertFalse(testFile.exists());
assertTrue(dfos.isInMemory());
assertThrows(IOException.class, () -> {try (Writer writer = new FileWriterWithEncoding(temporaryFolder, defaultEncoding)) {// empty}});assertFalse(file1.exists());}@Testpublic void constructor_File_encoding_badEncoding() {assertThrows(IOException.class, () -> {try (Writer writer = new FileWriterWithEncoding(file1, "BAD-ENCODE")) {// empty}});assertFalse(file1.exists());}@Testpublic void constructor_File_existingFile_withContent() throws Exception {try (FileWriter fw1 = new FileWriter(file1);) {fw1.write(textContent);fw1.write(65);}assertEquals(1025, file1.length());try (FileWriterWithEncoding fw1 = new FileWriterWithEncoding(file1, defaultEncoding)) {fw1.write("ABcd");}assertEquals(4, file1.length());}@Testpublic void constructor_File_nullFile() {assertThrows(NullPointerException.class, () -> {try (Writer writer = new FileWriterWithEncoding((File) null, defaultEncoding)) {// empty}});assertFalse(file1.exists());}@Testpublic void constructor_fileName_nullFile() {assertThrows(NullPointerException.class, () -> {try (Writer writer = new FileWriterWithEncoding((String) null, defaultEncoding)) {// empty}});assertFalse(file1.exists());}@Testpublic void constructorAppend_File_existingFile_withContent() throws Exception {try (FileWriter fw1 = new FileWriter(file1)) {fw1.write("ABcd");}assertEquals(4, file1.length());try (FileWriterWithEncoding fw1 = new FileWriterWithEncoding(file1, defaultEncoding, true)) {fw1.write("XyZ");}assertEquals(7, file1.length());}@Testpublic void sameEncoding_Charset_constructor() throws Exception {try (FileWriterWithEncoding writer = new FileWriterWithEncoding(file2, Charset.defaultCharset())) {successfulRun(writer);}}@Testpublic void sameEncoding_CharsetEncoder_constructor() throws Exception {try (FileWriterWithEncoding writer = new FileWriterWithEncoding(file2, Charset.defaultCharset().newEncoder())) {successfulRun(writer);}}@Testpublic void sameEncoding_null_Charset_constructor() throws Exception {try (FileWriterWithEncoding writer = new FileWriterWithEncoding(file2, (Charset) null)) {successfulRun(writer);}}@Testpublic void sameEncoding_null_CharsetEncoder_constructor() throws Exception {try (FileWriterWithEncoding writer = new FileWriterWithEncoding(file2.getPath(), (CharsetEncoder) null)) {successfulRun(writer);}}@Testpublic void sameEncoding_null_CharsetName_constructor() throws Exception {try (FileWriterWithEncoding writer = new FileWriterWithEncoding(file2.getPath(), (String) null)) {successfulRun(writer);}}@Testpublic void sameEncoding_string_Charset_constructor() throws Exception {try (FileWriterWithEncoding writer = new FileWriterWithEncoding(file2.getPath(), Charset.defaultCharset())) {successfulRun(writer);}}@Testpublic void sameEncoding_string_CharsetEncoder_constructor() throws Exception {try (FileWriterWithEncoding writer = new FileWriterWithEncoding(file2.getPath(), Charset.defaultCharset().newEncoder())) {successfulRun(writer);}}@Testpublic void sameEncoding_string_constructor() throws Exception {try (FileWriterWithEncoding writer = new FileWriterWithEncoding(file2, defaultEncoding)) {successfulRun(writer);}}@Testpublic void sameEncoding_string_string_constructor() throws Exception {try (FileWriterWithEncoding writer = new FileWriterWithEncoding(file2.getPath(), defaultEncoding)) {successfulRun(writer);}}@BeforeEachpublic void setUp() throws Exception {final File encodingFinder = new File(temporaryFolder, "finder.txt");try (OutputStreamWriter out = new OutputStreamWriter(Files.newOutputStream(encodingFinder.toPath()))) {defaultEncoding = out.getEncoding();}file1 = new File(temporaryFolder, "testfile1.txt");file2 = new File(temporaryFolder, "testfile2.txt");final char[] arr = new char[1024];final char[] chars = "ABCDEFGHIJKLMNOPQabcdefgihklmnopq".toCharArray();for (int i = 0; i < arr.length; i++) {arr[i] = chars[i % chars.length];}textContent = new String(arr);}private void successfulRun(final FileWriterWithEncoding fw21) throws Exception {try (FileWriter fw1 = new FileWriter(file1); // default encodingFileWriterWithEncoding fw2 = fw21) {writeTestPayload(fw1, fw2);checkFile(file1, file2);}assertTrue(file1.exists());assertTrue(file2.exists());}@Testpublic void testDifferentEncoding() throws Exception {if (Charset.isSupported(StandardCharsets.UTF_16BE.name())) {try (FileWriter fw1 = new FileWriter(file1); // default encodingFileWriterWithEncoding fw2 = new FileWriterWithEncoding(file2, defaultEncoding)) {writeTestPayload(fw1, fw2);try {checkFile(file1, file2);fail();} catch (final AssertionError ex) {// success}}assertTrue(file1.exists());assertTrue(file2.exists());}if (Charset.isSupported(StandardCharsets.UTF_16LE.name())) {try (FileWriter fw1 = new FileWriter(file1); // default encodingFileWriterWithEncoding fw2 = new FileWriterWithEncoding(file2, defaultEncoding)) {writeTestPayload(fw1, fw2);try {checkFile(file1, file2);fail();} catch (final AssertionError ex) {// success}}assertTrue(file1.exists());assertTrue(file2.exists());}}private void writeTestPayload(final FileWriter fw1, final FileWriterWithEncoding fw2) throws IOException {assertTrue(file1.exists());assertTrue(file2.exists());fw1.write(textContent);fw2.write(textContent);fw1.write(65);fw2.write(65);fw1.write(anotherTestContent);fw2.write(anotherTestContent);fw1.write(anotherTestContent, 1, 2);fw2.write(anotherTestContent, 1, 2);fw1.write("CAFE", 1, 2);fw2.write("CAFE", 1, 2);fw1.flush();fw2.flush();}}
assertTrue(true, "Dummy to show test completed OK");
assertFalse(cancelled);
assertFalse(cancelled);
assertTrue(results.contains(files[i]), prefix + "[" + i + "] " + files[i]);
assertTrue(results.contains(javaDir), "Start Dir");
assertTrue(results.contains(javaDir), "[A] Start Dir");
assertTrue(results.contains(javaDir), "[B] Start Dir");
assertTrue(results.contains(orgDir), "[B] Org Dir");
assertTrue(results.contains(javaDir), "[C] Start Dir");
assertTrue(results.contains(orgDir), "[C] Org Dir");
assertTrue(results.contains(apacheDir), "[C] Apache Dir");
assertTrue(results.contains(commonsDir), "[C] Commons Dir");
assertTrue(results.contains(javaDir), "[D] Start Dir");
assertTrue(results.contains(javaDir), "[DirAndFile1] Start Dir");
assertTrue(results.size() > 1 + dirs.length + ioFiles.length, "[DirAndFile2] Result Size");
assertTrue(results.contains(javaDir), "[DirAndFile2] Start Dir");
assertTrue(results.contains(javaDir), "[DirAndFile3] Start Dir");
assertTrue(results.contains(javaDir), "[DirAndFile4] Start Dir");
assertTrue(results.contains(FileUtils.current()), "Current Dir");
assertTrue(results.contains(invalidDir), "Current Dir");
assertTrue(Uncheck.test(t -> TestUtils.compareAndSetThrows(ref1, t).equals(t), "new1"));
assertFalse(IS_HIDDEN.and(IS_HIDDEN).test(PATH_FIXTURE));
assertTrue(IOPredicate.alwaysTrue().and(IOPredicate.alwaysTrue()).test(PATH_FIXTURE));
assertFalse(IOPredicate.alwaysFalse().and(IOPredicate.alwaysTrue()).test(PATH_FIXTURE));
assertFalse(IOPredicate.alwaysTrue().and(IOPredicate.alwaysFalse()).test(PATH_FIXTURE));
assertFalse(IOPredicate.alwaysFalse().and(IOPredicate.alwaysFalse()).test(PATH_FIXTURE));
assertFalse(list.contains("A"));
assertFalse(list.contains("B"));
assertFalse(IS_HIDDEN.test(PATH_FIXTURE));
assertFalse(Constants.IO_PREDICATE_FALSE.test("A"));
assertFalse(alwaysFalse.test("A"));
assertFalse(IOPredicate.isEqual(null).test("A"));
assertTrue(IOPredicate.isEqual("B").test("B"));
assertFalse(IOPredicate.isEqual("A").test("B"));
assertFalse(IOPredicate.isEqual("B").test("A"));
assertFalse(IOPredicate.isEqual(null).asPredicate().test("A"));
assertTrue(IOPredicate.isEqual("B").asPredicate().test("B"));
assertFalse(IOPredicate.isEqual("A").asPredicate().test("B"));
assertFalse(IOPredicate.isEqual("B").asPredicate().test("A"));
assertTrue(IS_HIDDEN.negate().test(PATH_FIXTURE));
assertFalse(IOPredicate.alwaysTrue().negate().test(PATH_FIXTURE));
assertTrue(IS_HIDDEN.negate().asPredicate().test(PATH_FIXTURE));
assertTrue(IS_HIDDEN.asPredicate().negate().test(PATH_FIXTURE));
assertFalse(IS_HIDDEN.or(IS_HIDDEN).test(PATH_FIXTURE));
assertTrue(IOPredicate.alwaysTrue().or(IOPredicate.alwaysFalse()).test(PATH_FIXTURE));
assertTrue(IOPredicate.alwaysFalse().or(IOPredicate.alwaysTrue()).test(PATH_FIXTURE));
assertFalse(IS_HIDDEN.asPredicate().or(e -> false).test(PATH_FIXTURE));
assertTrue(Constants.IO_PREDICATE_TRUE.test("A"));
assertTrue(Constants.IO_PREDICATE_TRUE.asPredicate().test("A"));
assertTrue(Constants.IO_PREDICATE_TRUE.test("A"));
assertTrue(alwaysTrue.test("A"));
assertTrue(realOuter.mkdirs());
assertTrue(realInner.mkdirs());
assertTrue(randomDirectory.mkdirs());
assertTrue(setupSymlink(randomDirectory, symlinkDirectory));
assertTrue(realParent.mkdirs());
assertTrue(realInner.mkdirs());
assertTrue(randomDirectory.mkdirs());
assertTrue(setupSymlink(randomDirectory, symlinkDirectory));
assertTrue(setupSymlink(realParent, symlinkParentDirectory));
assertTrue(realOuter.mkdirs());
assertTrue(realInner.mkdirs());
assertTrue(setupSymlink(randomFile, symlinkFile));
assertTrue(randomFile.exists());
assertFalse(symlinkFile.exists());
assertTrue(realParent.mkdirs());
assertTrue(setupSymlink(realParent, symlinkParentDirectory));
assertTrue(realChild.mkdirs());
assertTrue(setupSymlink(realChild, symlinkChild));
assertTrue(FileUtils.isSymlink(symlinkChild));
assertFalse(FileUtils.isSymlink(realChild));
assertTrue(setupSymlink(noexistFile, symlinkFile));
assertTrue(FileUtils.isSymlink(symlinkFile));
assertFalse(FileUtils.isSymlink(noexistFile));
assertFalse(FileUtils.isSymlink(noexistParentFile));
assertFalse(FileUtils.isSymlink(badSymlinkInPathFile));
assertTrue(randomDirectory.mkdirs());
assertTrue(setupSymlink(randomDirectory, symlinkDirectory));
assertTrue(FileUtils.isSymlink(symlinkDirectory));
assertFalse(FileUtils.isSymlink(randomDirectory));
assertTrue(setupSymlink(randomFile, symlinkFile));
assertTrue(FileUtils.isSymlink(symlinkFile));
assertFalse(FileUtils.isSymlink(randomFile));
assertTrue(randomDirectory.mkdirs());
assertTrue(setupSymlink(randomDirectory, symlinkDirectory));
assertTrue(nested.mkdirs());
assertTrue(subDir.mkdir());
assertTrue(subDir.exists());
assertTrue(subFile.exists());
assertFalse(subDir.exists());
assertFalse(subFile.exists());
assertFalse(subDir.exists());
assertTrue(subDir.mkdir());
assertTrue(subDir.exists());
assertTrue(subFile.exists());
assertTrue(subDir.exists());
assertTrue(subFile.exists());
assertTrue(subDir.exists());
assertFalse(subFile.exists());
assertFalse(subDir.exists());
assertFalse(subDir.exists());
assertTrue(FileDeleteStrategy.NORMAL.deleteQuietly(null));
assertTrue(subDir.mkdir());
assertTrue(subDir.exists());
assertTrue(subFile.exists());
assertFalse(FileDeleteStrategy.NORMAL.deleteQuietly(subDir));
assertTrue(subDir.exists());
assertTrue(subFile.exists());
assertTrue(FileDeleteStrategy.NORMAL.deleteQuietly(subFile));
assertTrue(subDir.exists());
assertFalse(subFile.exists());
assertTrue(FileDeleteStrategy.NORMAL.deleteQuietly(subDir));
assertFalse(subDir.exists());
assertTrue(FileDeleteStrategy.NORMAL.deleteQuietly(subDir));  // no error
assertFalse(subDir.exists());
assertTrue(FileUtils.directoryContains(directory1, file1ByRelativeDirectory2));
assertTrue(FileUtils.directoryContains(directory2, file2ByRelativeDirectory1));
assertFalse(FileUtils.directoryContains(directory1, file2ByRelativeDirectory1));
assertFalse(FileUtils.directoryContains(directory2, file1ByRelativeDirectory2));
assertTrue(FileUtils.directoryContains(top, directory1));
assertTrue(FileUtils.directoryContains(top, directory2));
assertTrue(FileUtils.directoryContains(top, directory3));
assertTrue(FileUtils.directoryContains(directory2, directory3));
assertTrue(FileUtils.directoryContains(directory1, file1));
assertTrue(FileUtils.directoryContains(directory2, file2));
assertFalse(FileUtils.directoryContains(directory1, file2));
assertFalse(FileUtils.directoryContains(directory2, file1));
assertFalse(FileUtils.directoryContains(directory1, file3));
assertFalse(FileUtils.directoryContains(directory2, file3));
assertFalse(FileUtils.directoryContains(directory1, top));
assertFalse(FileUtils.directoryContains(directory2, top));
assertFalse(FileUtils.directoryContains(directory3, top));
assertFalse(FileUtils.directoryContains(directo