assertArrayEquals(array1, ArraySorter.sort(array2));
assertArrayEquals(array1, ArraySorter.sort(array2));
assertArrayEquals(array1, ArraySorter.sort(array2, String::compareTo));
assertArrayEquals(array1, ArraySorter.sort(array2));
assertArrayEquals(array1, ArraySorter.sort(array2));
assertArrayEquals(array1, ArraySorter.sort(array2));
assertArrayEquals(array1, ArraySorter.sort(array2));
1. 找到ISSUE/PR/JIRA TICKETS 里的自然语言描述: 开源找PAIR eg. 1000+description oracle pair
2. CODE CONTEXT: MUTABLE , DOUBLE CODE -> CONCEPT -> ORACLE 知识图谱：Knowledge graph -> oracle
assertArrayEquals(array1, ArraySorter.sort(array2));
assertArrayEquals(array1, ArraySorter.sort(array2));
assertEquals(5d, mutableDouble.doubleValue(), 0.01d);
assertEquals(10d, mutableDouble.doubleValue(), 0.01d);
assertEquals(0, mutNum.compareTo(new MutableDouble(0d)));
assertEquals(+1, mutNum.compareTo(new MutableDouble(-1d)));
assertEquals(-1, mutNum.compareTo(new MutableDouble(1d)));
assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);
assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d);
assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d);
assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d);
assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d);
assertNotEquals("0", mutNumA);
assertEquals(2.5d, mutableDouble.doubleValue(), 0.01d);
assertEquals(1.5d, mutableDouble.doubleValue(), 0.01d);
assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);
assertEquals(Double.valueOf(0), new MutableDouble().getValue());
assertEquals(Double.valueOf(1d), mutNum.getValue());
assertEquals(Double.valueOf(2d), mutNum.getValue());
assertEquals(Double.valueOf(3d), mutNum.getValue());
assertEquals(mutNumA.hashCode(), Double.valueOf(0d).hashCode());
assertEquals( (byte) 1, mutNum.byteValue() );
assertEquals(Double.valueOf(0d), new MutableDouble(0d).toDouble());
assertEquals(Double.valueOf(12.3d), new MutableDouble(12.3d).toDouble());
assertEquals("0.0", new MutableDouble(0d).toString());
assertEquals("10.0", new MutableDouble(10d).toString());
assertEquals("-123.0", new MutableDouble(-123d).toString());
assertEquals((short) 0, mutNum.compareTo(new MutableShort((short) 0)));
assertEquals((short) +1, mutNum.compareTo(new MutableShort((short) -1)));
assertEquals((short) -1, mutNum.compareTo(new MutableShort((short) 1)));
assertEquals((short) 0, new MutableShort().shortValue());
assertEquals((short) 1, new MutableShort((short) 1).shortValue());
assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue());
assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue());
assertEquals((short) 2, new MutableShort("2").shortValue());
assertNotEquals("0", mutNumA);
assertEquals((short) 0, new MutableShort().shortValue());
assertEquals(Short.valueOf((short) 0), new MutableShort().getValue());
assertEquals(Short.valueOf((short) 1), mutNum.getValue());
assertEquals(Short.valueOf((short) 2), mutNum.getValue());
assertEquals(Short.valueOf((short) 3), mutNum.getValue());
assertEquals(mutNumA.hashCode(), Short.valueOf((short) 0).hashCode());
assertEquals( (byte) 1, mutNum.byteValue() );
assertEquals(Short.valueOf((short) 0), new MutableShort((short) 0).toShort());
assertEquals(Short.valueOf((short) 123), new MutableShort((short) 123).toShort());
assertEquals("0", new MutableShort((short) 0).toString());
assertEquals("10", new MutableShort((short) 10).toString());
assertEquals("-123", new MutableShort((short) -123).toString());
assertEquals(0, mutBool.compareTo(new MutableBoolean(false)));
assertEquals(-1, mutBool.compareTo(new MutableBoolean(true)));
assertEquals(+1, mutBool.compareTo(new MutableBoolean(false)));
assertEquals(0, mutBool.compareTo(new MutableBoolean(true)));
assertEquals(Boolean.FALSE, new MutableBoolean().getValue());
assertEquals(mutBoolA.hashCode(), Boolean.FALSE.hashCode());
assertEquals(mutBoolC.hashCode(), Boolean.TRUE.hashCode());
assertEquals(Boolean.FALSE.toString(), new MutableBoolean(false).toString());
assertEquals(Boolean.TRUE.toString(), new MutableBoolean(true).toString());
assertEquals(0, mutNum.compareTo(new MutableLong(0)));
assertEquals(+1, mutNum.compareTo(new MutableLong(-1)));
assertEquals(-1, mutNum.compareTo(new MutableLong(1)));
assertEquals(0, new MutableLong().longValue());
assertEquals(1, new MutableLong(1).longValue());
assertEquals(2, new MutableLong(Long.valueOf(2)).longValue());
assertEquals(3, new MutableLong(new MutableLong(3)).longValue());
assertEquals(2, new MutableLong("2").longValue());
assertNotEquals("0", mutNumA);
assertEquals(0, new MutableLong().longValue());
assertEquals(Long.valueOf(0), new MutableLong().getValue());
assertEquals(Long.valueOf(1), mutNum.getValue());
assertEquals(Long.valueOf(2), mutNum.getValue());
assertEquals(Long.valueOf(3), mutNum.getValue());
assertEquals(mutNumA.hashCode(), Long.valueOf(0).hashCode());
assertEquals( (byte) 1, mutNum.byteValue() );
assertEquals(Long.valueOf(0L), new MutableLong(0L).toLong());
assertEquals(Long.valueOf(123L), new MutableLong(123L).toLong());
assertEquals("0", new MutableLong(0).toString());
assertEquals("10", new MutableLong(10).toString());
assertEquals("-123", new MutableLong(-123).toString());
assertEquals(0, mutNum.compareTo(new MutableFloat(0f)));
assertEquals(+1, mutNum.compareTo(new MutableFloat(-1f)));
assertEquals(-1, mutNum.compareTo(new MutableFloat(1f)));
assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);
assertEquals(1f, new MutableFloat(1f).floatValue(), 0.0001f);
assertEquals(2f, new MutableFloat(Float.valueOf(2f)).floatValue(), 0.0001f);
assertEquals(3f, new MutableFloat(new MutableFloat(3f)).floatValue(), 0.0001f);
assertEquals(2f, new MutableFloat("2.0").floatValue(), 0.0001f);
assertNotEquals("0", mutNumA);
assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);
assertEquals(Float.valueOf(0), new MutableFloat().getValue());
assertEquals(Float.valueOf(1f), mutNum.getValue());
assertEquals(Float.valueOf(2f), mutNum.getValue());
assertEquals(Float.valueOf(3f), mutNum.getValue());
assertEquals(mutNumA.hashCode(), Float.valueOf(0f).hashCode());
assertEquals( (byte) 1, mutNum.byteValue() );
assertEquals(Float.valueOf(0f), new MutableFloat(0f).toFloat());
assertEquals(Float.valueOf(12.3f), new MutableFloat(12.3f).toFloat());
assertEquals("0.0", new MutableFloat(0f).toString());
assertEquals("10.0", new MutableFloat(10f).toString());
assertEquals("-123.0", new MutableFloat(-123f).toString());
assertEquals((byte) 1, mutableByte.byteValue());
assertEquals((byte) 1, mutableByte.byteValue());
assertEquals((byte) 2, mutNum.byteValue());
assertEquals((byte) 2, mutNum.byteValue());
assertEquals((byte) 0, mutNum.compareTo(new MutableByte((byte) 0)));
assertEquals((byte) +1, mutNum.compareTo(new MutableByte((byte) -1)));
assertEquals((byte) -1, mutNum.compareTo(new MutableByte((byte) 1)));
assertEquals((byte) 0, new MutableByte().byteValue());
assertEquals((byte) 1, new MutableByte((byte) 1).byteValue());
assertEquals((byte) 2, new MutableByte(Byte.valueOf((byte) 2)).byteValue());
assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue());
assertEquals((byte) 2, new MutableByte("2").byteValue());
assertNotEquals(mutNumA, Byte.valueOf((byte) 0));
assertNotEquals("0", mutNumA);
assertEquals((byte) 1, mutableByte.byteValue());
assertEquals((byte) 1, mutableByte.byteValue());
assertEquals((byte) 0, new MutableByte().byteValue());
assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue());
assertEquals((byte) 1, mutNum.byteValue());
assertEquals(Byte.valueOf((byte) 1), mutNum.getValue());
assertEquals((byte) 2, mutNum.byteValue());
assertEquals(Byte.valueOf((byte) 2), mutNum.getValue());
assertEquals((byte) 3, mutNum.byteValue());
assertEquals(Byte.valueOf((byte) 3), mutNum.getValue());
assertEquals(mutNumA.hashCode(), Byte.valueOf((byte) 0).hashCode());
assertEquals( (byte) 1, mutNum.byteValue() );
assertEquals((byte) 0, mutNum.byteValue());
assertEquals((byte) 0, mutNum.byteValue());
assertEquals(Byte.valueOf((byte) 0), new MutableByte((byte) 0).toByte());
assertEquals(Byte.valueOf((byte) 123), new MutableByte((byte) 123).toByte());
assertEquals("0", new MutableByte((byte) 0).toString());
assertEquals("10", new MutableByte((byte) 10).toString());
assertEquals("-123", new MutableByte((byte) -123).toString());
assertEquals(1, mutableInteger.intValue());
assertEquals(1, mutableInteger.intValue());
assertEquals(0, mutNum.compareTo(new MutableInt(0)));
assertEquals(+1, mutNum.compareTo(new MutableInt(-1)));
assertEquals(-1, mutNum.compareTo(new MutableInt(1)));
assertEquals(0, new MutableInt().intValue());
assertEquals(1, new MutableInt(1).intValue());
assertEquals(2, new MutableInt(Integer.valueOf(2)).intValue());
assertEquals(3, new MutableInt(new MutableLong(3)).intValue());
assertEquals(2, new MutableInt("2").intValue());
assertNotEquals(numA, Integer.valueOf(0));
assertNotEquals("0", numA);
assertEquals(1, mutableInteger.intValue());
assertEquals(1, mutableInteger.intValue());
assertEquals(0, new MutableInt().intValue());
assertEquals(Integer.valueOf(0), new MutableInt().getValue());
assertEquals(Integer.valueOf(1), mutNum.getValue());
assertEquals(Integer.valueOf(2), mutNum.getValue());
assertEquals(Integer.valueOf(3), mutNum.getValue());
assertEquals(mutNumA.hashCode(), Integer.valueOf(0).hashCode());
assertEquals( (byte) 1, mutNum.byteValue() );
assertEquals(Integer.valueOf(0), new MutableInt(0).toInteger());
assertEquals(Integer.valueOf(123), new MutableInt(123).toInteger());
assertEquals("0", new MutableInt(0).toString());
assertEquals("10", new MutableInt(10).toString());
assertEquals("-123", new MutableInt(-123).toString());
assertSame(i, new MutableObject<>(i).getValue());
assertSame("HI", new MutableObject<>("HI").getValue());
assertSame(null, new MutableObject<>(null).getValue());
assertNotEquals("0", mutNumA);
assertSame("HELLO", mutNum.getValue());
assertSame(null, mutNum.getValue());
assertEquals(mutNumA.hashCode(), "ALPHA".hashCode());
assertEquals("HI", new MutableObject<>("HI").toString());
assertEquals("10.0", new MutableObject<>(Double.valueOf(10)).toString());
assertEquals("null", new MutableObject<>(null).toString());
private static void assertValidToLocale(final String language) {final Locale locale = LocaleUtils.toLocale(language);
assertEquals(language, locale.getLanguage());
private static void assertValidToLocale(final String localeString, final String language, final String country) {final Locale locale = LocaleUtils.toLocale(localeString);
assertEquals(language, locale.getLanguage());
private static void assertValidToLocale(final String localeString, final String language,final String country, final String variant) {final Locale locale = LocaleUtils.toLocale(localeString);
assertEquals(language, locale.getLanguage());
assertEquals(Locale.getDefault(), LocaleUtils.toLocale((Locale) null));
assertEquals(Locale.getDefault(), LocaleUtils.toLocale(Locale.getDefault()));
assertEquals(actualLocale, LocaleUtils.toLocale(actualLocale));
private static void assertLocaleLookupList(final Locale locale, final Locale defaultLocale, final Locale[] expected) {final List<Locale> localeList = defaultLocale == null ?LocaleUtils.localeLookupList(locale) :LocaleUtils.localeLookupList(locale, defaultLocale);
assertEquals(expected.length, localeList.size());
assertEquals(Arrays.asList(expected), localeList);
assertUnmodifiableCollection(localeList);
assertLocaleLookupList(null, null, new Locale[0]);
assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ});
assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});
assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});
assertLocaleLookupList(LOCALE_EN_US, null,new Locale[] {LOCALE_EN_US,LOCALE_EN});
assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,new Locale[] {LOCALE_EN_US_ZZZZ,LOCALE_EN_US,LOCALE_EN});
assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ,new Locale[]{LOCALE_QQ});
assertLocaleLookupList(LOCALE_EN, LOCALE_EN,new Locale[]{LOCALE_EN});
assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US,new Locale[]{LOCALE_EN_US,LOCALE_EN});
assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ,new Locale[] {LOCALE_EN_US,LOCALE_EN,LOCALE_QQ});
assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ,new Locale[] {LOCALE_EN_US,LOCALE_EN,LOCALE_QQ_ZZ});
assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,new Locale[] {LOCALE_EN_US_ZZZZ,LOCALE_EN_US,LOCALE_EN});
assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ,new Locale[] {LOCALE_EN_US_ZZZZ,LOCALE_EN_US,LOCALE_EN});
assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ,new Locale[] {LOCALE_EN_US_ZZZZ,LOCALE_EN_US,LOCALE_EN,LOCALE_QQ});
assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ,new Locale[] {LOCALE_EN_US_ZZZZ,LOCALE_EN_US,LOCALE_EN,LOCALE_QQ_ZZ});
assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN,new Locale[] {LOCALE_FR_CA,LOCALE_FR,LOCALE_EN});
assertSame(set, set2);
assertUnmodifiableCollection(set);
assertEquals(jdkLocaleSet, set);
assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN));
assertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US));
assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ));
assertEquals(set.contains(LOCALE_FR), LocaleUtils.isAvailableLocale(LOCALE_FR));
assertEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isAvailableLocale(LOCALE_FR_CA));
assertEquals(set.contains(LOCALE_QQ), LocaleUtils.isAvailableLocale(LOCALE_QQ));
assertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ));
assertEquals(str, locale.getLanguage());
assertEquals(new Locale(str), locale);
private static void assertLanguageByCountry(final String country, final String[] languages) {final List<Locale> list = LocaleUtils.languagesByCountry(country);
assertLanguageByCountry("GB", new String[]{"en"});
assertLanguageByCountry("ZZ", new String[0]);
assertLanguageByCountry("CH", new String[]{"fr", "de", "it"});
private static void assertCountriesByLanguage(final String language, final String[] countries) {final List<Locale> list = LocaleUtils.countriesByLanguage(language);
assertEquals(language, locale.getLanguage());
assertCountriesByLanguage(null, new String[0]);
assertCountriesByLanguage("de", new String[]{"DE", "CH", "AT", "LU"});
assertCountriesByLanguage("zz", new String[0]);
assertCountriesByLanguage("it", new String[]{"IT", "CH"});
assertValidToLocale("en_001", "en", "001");
assertValidToLocale("en_150", "en", "150");
assertValidToLocale("ar_001", "ar", "001");
assertValidToLocale("en_001_GB", "en", "001", "GB");
assertValidToLocale("en_150_US", "en", "150", "US");
assertSame(CharSet.EMPTY, CharSet.getInstance( (String) null));
assertSame(CharSet.EMPTY, CharSet.getInstance(""));
assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("a-zA-Z"));
assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("A-Za-z"));
assertSame(CharSet.ASCII_ALPHA_LOWER, CharSet.getInstance("a-z"));
assertSame(CharSet.ASCII_ALPHA_UPPER, CharSet.getInstance("A-Z"));
assertSame(CharSet.ASCII_NUMERIC, CharSet.getInstance("0-9"));
assertEquals("[]", CharSet.getInstance(new String[0]).toString());
assertEquals("[]", CharSet.getInstance(new String[] {null}).toString());
assertEquals("[a-e]", CharSet.getInstance(new String[] {"a-e"}).toString());
assertEquals("[]", set.toString());
assertEquals(0, array.length);
assertEquals("[]", set.toString());
assertEquals(0, array.length);
assertEquals("[a]", set.toString());
assertEquals(1, array.length);
assertEquals("a", array[0].toString());
assertEquals("[^a]", set.toString());
assertEquals(1, array.length);
assertEquals("^a", array[0].toString());
assertEquals("[a-e]", set.toString());
assertEquals(1, array.length);
assertEquals("a-e", array[0].toString());
assertEquals("[^a-e]", set.toString());
assertEquals(1, array.length);
assertEquals("^a-e", array[0].toString());
assertEquals(3, array.length);
assertEquals(2, array.length);
assertEquals(2, array.length);
assertEquals(2, array.length);
assertEquals(4, array.length);
assertEquals(3, array.length);
assertEquals(3, array.length);
assertEquals(4, array.length);
assertEquals(2, array.length);
assertEquals(3, array.length);
assertEquals(1, array.length);
assertEquals(1, array.length);
assertEquals(1, array.length);
assertEquals(1, array.length);
assertEquals(2, array.length);
assertEquals(2, array.length);
assertEquals(1, array.length);
assertEquals(1, array.length);
assertEquals(1, array.length);
assertEquals(1, array.length);
assertEquals(2, array.length);
assertEquals(1, array.length);
assertEquals(2, array.length);
assertEquals(2, array.length);
assertEquals(1, array.length);
assertEquals(1, array.length);
assertEquals(2, array.length);
assertEquals(2, array.length);
assertEquals("[b-d]", dtob.toString());
assertEquals(1, array.length);
assertEquals(set, SerializationUtils.clone(set));
assertEquals(set, SerializationUtils.clone(set));
assertEquals(set, SerializationUtils.clone(set));
assertEquals(0, array.length);
assertEquals(2, array.length);
assertEquals(1, array.length);
assertEquals(1, array.length);
assertEquals(1, array.length);
Assertions.assertEquals(String.format("%s[%s]", classLoader, url), ClassLoaderUtils.toString(classLoader));
Assertions.assertEquals(String.format("%s[%s]", urlClassLoader, url),ClassLoaderUtils.toString(urlClassLoader));
assertEquals(14, Conversion.hexDigitToInt('e'));
assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e'));
assertArrayEquals(new boolean[]{false, false, false, false}, Conversion.hexDigitToBinary('0'));
assertArrayEquals(new boolean[]{true, false, false, false}, Conversion.hexDigitToBinary('1'));
assertArrayEquals(new boolean[]{false, true, false, false}, Conversion.hexDigitToBinary('2'));
assertArrayEquals(new boolean[]{true, true, false, false}, Conversion.hexDigitToBinary('3'));
assertArrayEquals(new boolean[]{false, false, true, false}, Conversion.hexDigitToBinary('4'));
assertArrayEquals(new boolean[]{true, false, true, false}, Conversion.hexDigitToBinary('5'));
assertArrayEquals(new boolean[]{false, true, true, false}, Conversion.hexDigitToBinary('6'));
assertArrayEquals(new boolean[]{true, true, true, false}, Conversion.hexDigitToBinary('7'));
assertArrayEquals(new boolean[]{false, false, false, true}, Conversion.hexDigitToBinary('8'));
assertArrayEquals(new boolean[]{true, false, false, true}, Conversion.hexDigitToBinary('9'));
assertArrayEquals(new boolean[]{false, true, false, true}, Conversion.hexDigitToBinary('A'));
assertArrayEquals(new boolean[]{false, true, false, true}, Conversion.hexDigitToBinary('a'));
assertArrayEquals(new boolean[]{true, true, false, true}, Conversion.hexDigitToBinary('B'));
assertArrayEquals(new boolean[]{true, true, false, true}, Conversion.hexDigitToBinary('b'));
assertArrayEquals(new boolean[]{false, false, true, true}, Conversion.hexDigitToBinary('C'));
assertArrayEquals(new boolean[]{false, false, true, true}, Conversion.hexDigitToBinary('c'));
assertArrayEquals(new boolean[]{true, false, true, true}, Conversion.hexDigitToBinary('D'));
assertArrayEquals(new boolean[]{true, false, true, true}, Conversion.hexDigitToBinary('d'));
assertArrayEquals(new boolean[]{false, true, true, true}, Conversion.hexDigitToBinary('E'));
assertArrayEquals(new boolean[]{false, true, true, true}, Conversion.hexDigitToBinary('e'));
assertArrayEquals(new boolean[]{true, true, true, true}, Conversion.hexDigitToBinary('F'));
assertArrayEquals(new boolean[]{true, true, true, true}, Conversion.hexDigitToBinary('f'));
assertArrayEquals(new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBinary('0'));
assertArrayEquals(new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBinary('1'));
assertArrayEquals(new boolean[]{false, false, true, false}, Conversion.hexDigitMsb0ToBinary('2'));
assertArrayEquals(new boolean[]{false, false, true, true}, Conversion.hexDigitMsb0ToBinary('3'));
assertArrayEquals(new boolean[]{false, true, false, false}, Conversion.hexDigitMsb0ToBinary('4'));
assertArrayEquals(new boolean[]{false, true, false, true}, Conversion.hexDigitMsb0ToBinary('5'));
assertArrayEquals(new boolean[]{false, true, true, false}, Conversion.hexDigitMsb0ToBinary('6'));
assertArrayEquals(new boolean[]{false, true, true, true}, Conversion.hexDigitMsb0ToBinary('7'));
assertArrayEquals(new boolean[]{true, false, false, false}, Conversion.hexDigitMsb0ToBinary('8'));
assertArrayEquals(new boolean[]{true, false, false, true}, Conversion.hexDigitMsb0ToBinary('9'));
assertArrayEquals(new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBinary('A'));
assertArrayEquals(new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBinary('a'));
assertArrayEquals(new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBinary('B'));
assertArrayEquals(new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBinary('b'));
assertArrayEquals(new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBinary('C'));
assertArrayEquals(new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBinary('c'));
assertArrayEquals(new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBinary('D'));
assertArrayEquals(new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBinary('d'));
assertArrayEquals(new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBinary('E'));
assertArrayEquals(new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBinary('e'));
assertArrayEquals(new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBinary('F'));
assertArrayEquals(new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBinary('f'));
assertEquals('0', Conversion.binaryToHexDigit(new boolean[]{false, false, false, false}));
assertEquals('1', Conversion.binaryToHexDigit(new boolean[]{true, false, false, false}));
assertEquals('2', Conversion.binaryToHexDigit(new boolean[]{false, true, false, false}));
assertEquals('3', Conversion.binaryToHexDigit(new boolean[]{true, true, false, false}));
assertEquals('4', Conversion.binaryToHexDigit(new boolean[]{false, false, true, false}));
assertEquals('5', Conversion.binaryToHexDigit(new boolean[]{true, false, true, false}));
assertEquals('6', Conversion.binaryToHexDigit(new boolean[]{false, true, true, false}));
assertEquals('7', Conversion.binaryToHexDigit(new boolean[]{true, true, true, false}));
assertEquals('8', Conversion.binaryToHexDigit(new boolean[]{false, false, false, true}));
assertEquals('9', Conversion.binaryToHexDigit(new boolean[]{true, false, false, true}));
assertEquals('a', Conversion.binaryToHexDigit(new boolean[]{false, true, false, true}));
assertEquals('b', Conversion.binaryToHexDigit(new boolean[]{true, true, false, true}));
assertEquals('c', Conversion.binaryToHexDigit(new boolean[]{false, false, true, true}));
assertEquals('d', Conversion.binaryToHexDigit(new boolean[]{true, false, true, true}));
assertEquals('e', Conversion.binaryToHexDigit(new boolean[]{false, true, true, true}));
assertEquals('f', Conversion.binaryToHexDigit(new boolean[]{true, true, true, true}));
assertEquals('1', Conversion.binaryToHexDigit(new boolean[]{true}));
assertEquals('f', Conversion.binaryToHexDigit(new boolean[]{true, true, true, true, true}));
assertEquals('0',Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false}));
assertEquals('1',Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, true}));
assertEquals('2',Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, false}));
assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, true}));
assertEquals('4',Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, false}));
assertEquals('5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, true}));
assertEquals('6', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, true, false}));
assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, true, true}));
assertEquals('8',Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, false, false}));
assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, false, true}));
assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, true, false}));
assertEquals('b', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, true, true}));
assertEquals('c', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, false, false}));
assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, false, true}));
assertEquals('e', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, true, false}));
assertEquals('f', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, true, true}));
assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 0));
assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 1));
assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 2));
assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 3));
assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 4));
assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(javaDocCheck, 3));
assertEquals('0', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, false, false}));
assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, false, true}));
assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, true, false}));
assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, true, true}));
assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, false, false}));
assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, false, true}));
assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, true, false}));
assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, true, true}));
assertEquals('8', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, false, false}));
assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, false, true}));
assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, true, false}));
assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, true, true}));
assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, false, false}));
assertEquals('d', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, false, true}));
assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, true, false}));
assertEquals('f', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, true, true}));
assertEquals('4',Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, false, false, false, false, false, false, false, false, false,false, false, true, false, false}));
assertEquals('5',Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, false, false, false, false, false, false, false, false, false,true, false, true, false, false}, 2));
assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0));
assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1));
assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2));
assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0));
assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1));
assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2));
assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3));
assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 4));
assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 5));
assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 6));
assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 7));
assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 0));
assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 1));
assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 2));
assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 3));
assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 4));
assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 5));
assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 6));
assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 7));
assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 8));
assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 9));
assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 10));
assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 11));
assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 12));
assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 13));
assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 14));
assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 15));
assertEquals(Conversion.binaryToHexDigit(a, k),Conversion.binaryBeMsb0ToHexDigit(b, k));
assertEquals('e', Conversion.intToHexDigit(14));
assertEquals('e', Conversion.intToHexDigitMsb0(7));
assertEquals((byte) 0x00, Conversion.hexToByte(src, 0, (byte) 0, 0, 0));
assertEquals((byte) 0x0C, Conversion.hexToByte(src, 0, (byte) 0, 0, 1));
assertEquals((byte) 0xDC, Conversion.hexToByte(src, 0, (byte) 0, 0, 2));
assertEquals((byte) 0xFD, Conversion.hexToByte(src, 1, (byte) 0, 0, 2));
assertEquals((byte) 0x34, Conversion.hexToByte(src, 0, (byte) 0x34, 0, 0));
assertEquals((byte) 0x84, Conversion.hexToByte(src, 17, (byte) 0x34, 4, 1));
assertEquals((byte) 0x00, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 0 * 4));
assertEquals((byte) 0x0C, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 1 * 4));
assertEquals((byte) 0xDC, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 2 * 4));
assertEquals((byte) 0xFD, Conversion.binaryToByte(src, 1 * 4, (byte) 0, 0, 2 * 4));
assertEquals((byte) 0x34, Conversion.binaryToByte(src, 0 * 4, (byte) 0x34, 0, 0 * 4));
assertEquals((byte) 0x84, Conversion.binaryToByte(src, 17 * 4, (byte) 0x34, 4, 1 * 4));
assertArrayEquals(new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[]{}, 0, 0));
assertArrayEquals(new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 100, new int[]{}, 0, 0));
assertArrayEquals(new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[]{}, 100, 0));
assertArrayEquals(new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF},Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 0));
assertArrayEquals(new int[]{0x90ABCDEF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF},Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 1));
assertArrayEquals(new int[]{0x90ABCDEF, 0x12345678, 0xFFFFFFFF, 0xFFFFFFFF},Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 2));
// assertArrayEquals(new// int[]{0x90ABCDEF, 0x12345678, 0x90ABCDEF, 0x12345678}, Conversion.longToIntArray(0x1234567890ABCDEFL,// 0, new int[]{-1, -1, -1, -1}, 0, 4));//rejected by assertion
// assertArrayEquals(new// int[]{0xFFFFFFFF, 0x90ABCDEF, 0x12345678, 0x90ABCDEF}, Conversion.longToIntArray(0x1234567890ABCDEFL,// 0, new int[]{-1, -1, -1, -1}, 1, 3));
assertArrayEquals(new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0x12345678},Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 2, 2));
assertArrayEquals(new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0xFFFFFFFF},Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF},Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 3, 1));
assertArrayEquals(new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x4855E6F7, 0xFFFFFFFF},Conversion.longToIntArray(0x1234567890ABCDEFL, 1, new int[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x242AF37B, 0xFFFFFFFF},Conversion.longToIntArray(0x1234567890ABCDEFL, 2, new int[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x121579BD, 0xFFFFFFFF},Conversion.longToIntArray(0x1234567890ABCDEFL, 3, new int[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x890ABCDE, 0xFFFFFFFF},Conversion.longToIntArray(0x1234567890ABCDEFL, 4, new int[]{-1, -1, -1, -1}, 2, 1));
// assertArrayEquals(new// int[]{0x4855E6F7, 0x091A2B3C, 0x4855E6F7, 0x091A2B3C}, Conversion.longToIntArray(0x1234567890ABCDEFL,// 1, new int[]{-1, -1, -1, -1}, 0, 4));//rejected by assertion
assertArrayEquals(new int[]{0x091A2B3C},Conversion.longToIntArray(0x1234567890ABCDEFL, 33, new int[]{0}, 0, 1));
assertArrayEquals(new short[]{},Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 0, 0));
assertArrayEquals(new short[]{},Conversion.longToShortArray(0x0000000000000000L, 100, new short[]{}, 0, 0));
assertArrayEquals(new short[]{},Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 100, 0));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF},Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 0));
assertArrayEquals(new short[]{(short) 0xCDEF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF},Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 1));
assertArrayEquals(new short[]{(short) 0xCDEF, (short) 0x90AB, (short) 0xFFFF, (short) 0xFFFF},Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 2));
assertArrayEquals(new short[]{(short) 0xCDEF, (short) 0x90AB, (short) 0x5678, (short) 0xFFFF},Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 3));
assertArrayEquals(new short[]{(short) 0xCDEF, (short) 0x90AB, (short) 0x5678, (short) 0x1234},Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 4));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xCDEF, (short) 0x90AB, (short) 0x5678},Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 1, 3));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF, (short) 0x90AB},Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 2, 2));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF, (short) 0xFFFF},Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF},Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 3, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0xE6F7, (short) 0xFFFF},Conversion.longToShortArray(0x1234567890ABCDEFL, 1, new short[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0xF37B, (short) 0xFFFF},Conversion.longToShortArray(0x1234567890ABCDEFL, 2, new short[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0x79BD, (short) 0xFFFF},Conversion.longToShortArray(0x1234567890ABCDEFL, 3, new short[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0xBCDE, (short) 0xFFFF},Conversion.longToShortArray(0x1234567890ABCDEFL, 4, new short[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new short[]{(short) 0xE6F7, (short) 0x4855, (short) 0x2B3C, (short) 0x091A},Conversion.longToShortArray(0x1234567890ABCDEFL, 1, new short[]{-1, -1, -1, -1}, 0, 4));
assertArrayEquals(new short[]{(short) 0x2B3C},Conversion.longToShortArray(0x1234567890ABCDEFL, 33, new short[]{0}, 0, 1));
assertArrayEquals(new short[]{}, Conversion.intToShortArray(0x00000000, 0, new short[]{}, 0, 0));
assertArrayEquals(new short[]{}, Conversion.intToShortArray(0x00000000, 100, new short[]{}, 0, 0));
assertArrayEquals(new short[]{}, Conversion.intToShortArray(0x00000000, 0, new short[]{}, 100, 0));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF},Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 0));
assertArrayEquals(new short[]{(short) 0x5678, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF},Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 1));
assertArrayEquals(new short[]{(short) 0x5678, (short) 0x1234, (short) 0xFFFF, (short) 0xFFFF},Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 2));
// assertArrayEquals(new// short[]{(short) 0x5678, (short) 0x1234, (short) 0x5678, (short) 0xFFFF}, Conversion.intToShortArray(0x12345678,// 0, new short[]{-1, -1, -1, -1}, 0, 3));//rejected by assertion
// assertArrayEquals(new// short[]{(short) 0x5678, (short) 0x1234, (short) 0x5678, (short) 0x1234}, Conversion.intToShortArray(0x12345678,// 0, new short[]{-1, -1, -1, -1}, 0, 4));
// assertArrayEquals(new// short[]{(short) 0xFFFF, (short) 0x5678, (short) 0x1234, (short) 0x5678}, Conversion.intToShortArray(0x12345678,// 0, new short[]{-1, -1, -1, -1}, 1, 3));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0x5678, (short) 0x1234},Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 2, 2));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0x5678, (short) 0xFFFF},Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0x5678},Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 3, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0x2B3C, (short) 0xFFFF},Conversion.intToShortArray(0x12345678, 1, new short[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0x159E, (short) 0xFFFF},Conversion.intToShortArray(0x12345678, 2, new short[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0x8ACF, (short) 0xFFFF},Conversion.intToShortArray(0x12345678, 3, new short[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0x4567, (short) 0xFFFF},Conversion.intToShortArray(0x12345678, 4, new short[]{-1, -1, -1, -1}, 2, 1));
// assertArrayEquals(new// short[]{(short) 0xE6F7, (short) 0x4855, (short) 0x2B3C, (short) 0x091A}, Conversion.intToShortArray(0x12345678,// 1, new short[]{-1, -1, -1, -1}, 0, 4));//rejected by assertion
// assertArrayEquals(new// short[]{(short) 0x2B3C}, Conversion.intToShortArray(0x12345678, 33, new// short[]{0}, 0, 1));//rejected by assertion
assertArrayEquals(new short[]{(short) 0x091A},Conversion.intToShortArray(0x12345678, 17, new short[]{0}, 0, 1));
assertArrayEquals(new byte[]{},Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0));
assertArrayEquals(new byte[]{},Conversion.longToByteArray(0x0000000000000000L, 100, new byte[]{}, 0, 0));
assertArrayEquals(new byte[]{},Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 100, 0));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 0));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 2));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 4));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56,(byte) 0x34, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 7));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56,(byte) 0x34, (byte) 0x12, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 8));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 1));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 2));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB,(byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB,(byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB,(byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8));
assertArrayEquals(new byte[]{(byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 1, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));
assertArrayEquals(new byte[]{(byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 2, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0x5E, (byte) 0x85,(byte) 0xC4, (byte) 0xB3, (byte) 0xA2, (byte) 0x91, (byte) 0x00},Conversion.longToByteArray(0x1234567890ABCDEFL, 5, new byte[]{-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8));
// assertArrayEquals(new// byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xC4, (byte) 0xB3, (byte) 0xA2, (byte) 0x91, (byte) 0x00, (byte) 0x00}, Conversion.longToByteArray(0x1234567890ABCDEFL, 13, new// byte[]{-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8));//rejected by assertion
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xC4,(byte) 0xB3, (byte) 0xA2, (byte) 0x91, (byte) 0x00, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 13, new byte[]{-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7));
assertArrayEquals(new byte[]{}, Conversion.intToByteArray(0x00000000, 0, new byte[]{}, 0, 0));
assertArrayEquals(new byte[]{}, Conversion.intToByteArray(0x00000000, 100, new byte[]{}, 0, 0));
assertArrayEquals(new byte[]{}, Conversion.intToByteArray(0x00000000, 0, new byte[]{}, 100, 0));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 0));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 2));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 4));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 1));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 2));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB,(byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));
assertArrayEquals(new byte[]{(byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 1, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));
assertArrayEquals(new byte[]{(byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 2, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0x5E, (byte) 0x85,(byte) 0xFC, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 5, new byte[]{-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));
// assertArrayEquals(new// byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xFC, (byte) 0x00, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF}, Conversion.intToByteArray(0x90ABCDEF, 13, new// byte[]{-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));//rejected by assertion
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xFC,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 13, new byte[]{-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 3));
assertArrayEquals(new byte[]{}, Conversion.shortToByteArray((short) 0x0000, 0, new byte[]{}, 0, 0));
assertArrayEquals(new byte[]{}, Conversion.shortToByteArray((short) 0x0000, 100, new byte[]{}, 0, 0));
assertArrayEquals(new byte[]{}, Conversion.shortToByteArray((short) 0x0000, 0, new byte[]{}, 100, 0));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1}, 0, 0));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1}, 0, 1));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1}, 0, 2));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1}, 3, 1));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF,(byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1}, 3, 2));
assertArrayEquals(new byte[]{(byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 1, new byte[]{-1, -1, -1, -1, -1, -1, -1}, 0, 1));
assertArrayEquals(new byte[]{(byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 2, new byte[]{-1, -1, -1, -1, -1, -1, -1}, 0, 1));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0xFE, (byte) 0xFF,(byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 5, new byte[]{-1, 0, -1, -1, -1, -1, -1}, 3, 2));
// assertArrayEquals(new// byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 13, new// byte[]{-1, 0, -1, -1, -1, -1, -1}, 3, 2));//rejected by assertion
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0xFE, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 13, new byte[]{-1, 0, -1, -1, -1, -1, -1}, 3, 1));
assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 0, 0));
assertEquals("", Conversion.longToHex(0x0000000000000000L, 100, "", 0, 0));
assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 100, 0));
assertEquals("ffffffffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 0));
assertEquals("3fffffffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 0, 1));
assertEquals("feffffffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 2));
assertEquals("fedcffffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 4));
assertEquals("fedcba098765432fffffffff",Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 15));
assertEquals("fedcba0987654321ffffffff",Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 16));
assertEquals("fff3ffffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 3, 1));
assertEquals("ffffefffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 2));
assertEquals("ffffedcfffffffffffffffff",Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 4));
assertEquals("ffffedcba098765432ffffff",Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 15));
assertEquals("ffffedcba0987654321fffff",Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 16));
assertEquals("7fffffffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDEFL, 1, "ffffffffffffffffffffffff", 0, 1));
assertEquals("bfffffffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDEFL, 2, "ffffffffffffffffffffffff", 0, 1));
assertEquals("fffdb975121fca86420fffff",Conversion.longToHex(0x1234567890ABCDEFL, 3, "ffffffffffffffffffffffff", 3, 16));
// assertEquals("ffffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 4, "ffffffffffffffffffffffff", 3, 16));//rejected
// by assertionassertEquals("fffedcba0987654321ffffff",Conversion.longToHex(0x1234567890ABCDEFL, 4, "ffffffffffffffffffffffff", 3, 15));
assertEquals("fedcba0987654321", Conversion.longToHex(0x1234567890ABCDEFL, 0, "", 0, 16));
assertEquals("", Conversion.intToHex(0x00000000, 0, "", 0, 0));
assertEquals("", Conversion.intToHex(0x00000000, 100, "", 0, 0));
assertEquals("", Conversion.intToHex(0x00000000, 0, "", 100, 0));
assertEquals("ffffffffffffffffffffffff",Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 0));
assertEquals("3fffffffffffffffffffffff",Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 0, 1));
assertEquals("feffffffffffffffffffffff",Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 2));
assertEquals("fedcffffffffffffffffffff",Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 4));
assertEquals("fedcba0fffffffffffffffff",Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 7));
assertEquals("fedcba09ffffffffffffffff",Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 8));
assertEquals("fff3ffffffffffffffffffff",Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 3, 1));
assertEquals("ffffefffffffffffffffffff",Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 2));
assertEquals("ffffedcfffffffffffffffff",Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 4));
assertEquals("ffffedcba0ffffffffffffff",Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 7));
assertEquals("ffffedcba09fffffffffffff",Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 8));
assertEquals("7fffffffffffffffffffffff",Conversion.intToHex(0x90ABCDEF, 1, "ffffffffffffffffffffffff", 0, 1));
assertEquals("bfffffffffffffffffffffff",Conversion.intToHex(0x90ABCDEF, 2, "ffffffffffffffffffffffff", 0, 1));
assertEquals("fffdb97512ffffffffffffff",Conversion.intToHex(0x90ABCDEF, 3, "ffffffffffffffffffffffff", 3, 8));
// assertEquals("ffffffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF,// 4, "ffffffffffffffffffffffff", 3, 8));//rejected by assertion
assertEquals("fffedcba09ffffffffffffff",Conversion.intToHex(0x90ABCDEF, 4, "ffffffffffffffffffffffff", 3, 7));
assertEquals("fedcba09", Conversion.intToHex(0x90ABCDEF, 0, "", 0, 8));
assertEquals("", Conversion.shortToHex((short) 0x0000, 0, "", 0, 0));
assertEquals("", Conversion.shortToHex((short) 0x0000, 100, "", 0, 0));
assertEquals("", Conversion.shortToHex((short) 0x0000, 0, "", 100, 0));
assertEquals("ffffffffffffffffffffffff",Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 0));
assertEquals("3fffffffffffffffffffffff",Conversion.shortToHex((short) 0xCDE3, 0, "ffffffffffffffffffffffff", 0, 1));
assertEquals("feffffffffffffffffffffff",Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 2));
assertEquals("fedfffffffffffffffffffff",Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 3));
assertEquals("fedcffffffffffffffffffff",Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 4));
assertEquals("fff3ffffffffffffffffffff",Conversion.shortToHex((short) 0xCDE3, 0, "ffffffffffffffffffffffff", 3, 1));
assertEquals("ffffefffffffffffffffffff",Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 3, 2));
assertEquals("7fffffffffffffffffffffff",Conversion.shortToHex((short) 0xCDEF, 1, "ffffffffffffffffffffffff", 0, 1));
assertEquals("bfffffffffffffffffffffff",Conversion.shortToHex((short) 0xCDEF, 2, "ffffffffffffffffffffffff", 0, 1));
assertEquals("fffdb9ffffffffffffffffff",Conversion.shortToHex((short) 0xCDEF, 3, "ffffffffffffffffffffffff", 3, 4));
// assertEquals("ffffffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF,// 4, "ffffffffffffffffffffffff", 3, 4));//rejected by assertion
assertEquals("fffedcffffffffffffffffff",Conversion.shortToHex((short) 0xCDEF, 4, "ffffffffffffffffffffffff", 3, 3));
assertEquals("fedc", Conversion.shortToHex((short) 0xCDEF, 0, "", 0, 4));
assertEquals("", Conversion.byteToHex((byte) 0x00, 0, "", 0, 0));
assertEquals("", Conversion.byteToHex((byte) 0x00, 100, "", 0, 0));
assertEquals("", Conversion.byteToHex((byte) 0x00, 0, "", 100, 0));
assertEquals("00000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 0));
assertEquals("f0000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 1));
assertEquals("fe000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 2));
assertEquals("000f0", Conversion.byteToHex((byte) 0xEF, 0, "00000", 3, 1));
assertEquals("000fe", Conversion.byteToHex((byte) 0xEF, 0, "00000", 3, 2));
assertEquals("70000", Conversion.byteToHex((byte) 0xEF, 1, "00000", 0, 1));
assertEquals("b0000", Conversion.byteToHex((byte) 0xEF, 2, "00000", 0, 1));
assertEquals("000df", Conversion.byteToHex((byte) 0xEF, 3, "00000", 3, 2));
// assertEquals("00000", Conversion.byteToHex((byte) 0xEF, 4, "00000", 3, 2));//rejected by
// assertionassertEquals("000e0", Conversion.byteToHex((byte) 0xEF, 4, "00000", 3, 1));
assertEquals("fe", Conversion.byteToHex((byte) 0xEF, 0, "", 0, 2));
assertArrayEquals(new boolean[]{},Conversion.longToBinary(0x0000000000000000L, 0, new boolean[]{}, 0, 0));
assertArrayEquals(new boolean[]{},Conversion.longToBinary(0x0000000000000000L, 100, new boolean[]{}, 0, 0));
assertArrayEquals(new boolean[]{},Conversion.longToBinary(0x0000000000000000L, 0, new boolean[]{}, 100, 0));
assertArrayEquals(new boolean[69],Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 0));
assertArrayEquals(new boolean[]{true, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 1));
assertArrayEquals(new boolean[]{true, true, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 2));
assertArrayEquals(new boolean[]{true, true, true, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 3));
assertArrayEquals(new boolean[]{true, true, true, true, false, true, true, true, true, false, true, true,false, false, true, true, true, true, false, true, false, true, false, true,false, false, false, false, true, false, false, true, false, false, false,true, true, true, true, false, false, true, true, false, true, false, true,false, false, false, true, false, true, true, false, false, false, true, false,false, true, false, false, false, false, false, false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 63));
assertArrayEquals(new boolean[]{true, true, true, true, false, true, true, true, true, false, true, true,false, false, true, true, true, true, false, true, false, true, false, true,false, false, false, false, true, false, false, true, false, false, false,true, true, true, true, false, false, true, true, false, true, false, true,false, false, false, true, false, true, true, false, false, false, true, false,false, true, false, false, false, false, false, false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 64));
assertArrayEquals(new boolean[]{false, false, true, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 1));
assertArrayEquals(new boolean[]{false, false, true, true, true, true, false, true, true, true, true, false,true, true, false, false, true, true, true, true, false, true, false, true,false, true, false, false, false, false, true, false, false, true, false,false, false, true, true, true, true, false, false, true, true, false, true,false, true, false, false, false, true, false, true, true, false, false, false,true, false, false, true, false, false, false, false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 64));
assertArrayEquals(new boolean[]{true, true, true, false, true, true, true, true, false, true, true, false,false, true, true, true, true, false, true, false, true, false, true, false,false, false, false, true, false, false, true, false, false, false, true, true,true, true, false, false, true, true, false, true, false, true, false, false,false, true, false, true, true, false, false, false, true, false, false, true,false, false, false, false, false, false, false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 1, new boolean[69], 0, 63));
assertArrayEquals(new boolean[]{true, true, false, true, true, true, true, false, true, true, false, false,true, true, true, true, false, true, false, true, false, true, false, false,false, false, true, false, false, true, false, false, false, true, true, true,true, false, false, true, true, false, true, false, true, false, false, false,true, false, true, true, false, false, false, true, false, false, true, false,false, false, false, false, false, false, false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 0, 62));
// assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,// true, true, false, true, true, false, false, true, true, true, true, false, true,// false, true, false, true, false, false, false, false, true, false, false, true,// false, false, false, true, true, true, true, false, false, true, true, false, true,// false, true, false, false, false, true, false, true, true, false, false, false, true,// false, false, true, false, false, false// , false, false, false, false}, Conversion.longToBinary(0x1234567890ABCDEFL, 2, new// boolean[69], 3, 63));//rejected by assertion
assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true, true, true, false, true,true, false, false, true, true, true, true, false, true, false, true, false,true, false, false, false, false, true, false, false, true, false, false,false, true, true, true, true, false, false, true, true, false, true, false,true, false, false, false, true, false, true, true, false, false, false, true,false, false, true, false, false, false, false, false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 3, 62));
assertArrayEquals(new boolean[]{}, Conversion.intToBinary(0x00000000, 0, new boolean[]{}, 0, 0));
assertArrayEquals(new boolean[]{}, Conversion.intToBinary(0x00000000, 100, new boolean[]{}, 0, 0));
assertArrayEquals(new boolean[]{}, Conversion.intToBinary(0x00000000, 0, new boolean[]{}, 100, 0));
assertArrayEquals(new boolean[69], Conversion.intToBinary(0x90ABCDEF, 0, new boolean[69], 0, 0));
assertArrayEquals(new boolean[]{true, false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false, false,false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 1));
assertArrayEquals(new boolean[]{true, true, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false, false,false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 2));
assertArrayEquals(new boolean[]{true, true, true, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false, false,false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 3));
assertArrayEquals(new boolean[]{true, true, true, true, false, true, true, true, true, false, true, true,false, false, true, true, true, true, false, true, false, true, false, true,false, false, false, false, true, false, false, false, false, false, false,false, false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 31));
assertArrayEquals(new boolean[]{true, true, true, true, false, true, true, true, true, false, true, true,false, false, true, true, true, true, false, true, false, true, false, true,false, false, false, false, true, false, false, true, false, false, false,false, false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 32));
assertArrayEquals(new boolean[]{false, false, true, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false, false,false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 1));
assertArrayEquals(new boolean[]{false, false, true, true, true, true, false, true, true, true, true, false,true, true, false, false, true, true, true, true, false, true, false, true,false, true, false, false, false, false, true, false, false, true, false,false, false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 32));
assertArrayEquals(new boolean[]{true, true, true, false, true, true, true, true, false, true, true, false,false, true, true, true, true, false, true, false, true, false, true, false,false, false, false, true, false, false, true, false, false, false, false,false, false}, Conversion.intToBinary(0x90ABCDEF, 1, new boolean[37], 0, 31));
assertArrayEquals(new boolean[]{true, true, false, true, true, true, true, false, true, true, false, false,true, true, true, true, false, true, false, true, false, true, false, false,false, false, true, false, false, true, false, false, false, false, false,false, false}, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 0, 30));
// assertArrayEquals(new boolean[]{false, false, false, true, true, false, true,// true,// true, true, false, true, true, false, false, true, true, true, true, false, true,// false, true, false, true, false, false, false, false, true, false, false, false,// false, false, false, false}, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37],// 3, 31));//rejected by assertion
assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true, true, true, false, true,true, false, false, true, true, true, true, false, true, false, true, false,true, false, false, false, false, true, false, false, true, false, false,false, false}, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 3, 30));
assertArrayEquals(new boolean[]{}, Conversion.shortToBinary((short) 0x0000, 0, new boolean[]{}, 0, 0));
assertArrayEquals(new boolean[]{},Conversion.shortToBinary((short) 0x0000, 100, new boolean[]{}, 0, 0));
assertArrayEquals(new boolean[]{},Conversion.shortToBinary((short) 0x0000, 0, new boolean[]{}, 100, 0));
assertArrayEquals(new boolean[69], Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[69], 0, 0));
assertArrayEquals(new boolean[]{true, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 1));
assertArrayEquals(new boolean[]{true, true, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 2));
assertArrayEquals(new boolean[]{true, true, true, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 3));
assertArrayEquals(new boolean[]{true, true, true, true, false, true, true, true, true, false, true, true,false, false, true, false, false, false, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 15));
assertArrayEquals(new boolean[]{true, true, true, true, false, true, true, true, true, false, true, true,false, false, true, true, false, false, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 16));
assertArrayEquals(new boolean[]{false, false, true, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 2, 1));
assertArrayEquals(new boolean[]{false, false, true, true, true, true, false, true, true, true, true, false,true, true, false, false, true, true, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 2, 16));
assertArrayEquals(new boolean[]{true, true, true, false, true, true, true, true, false, true, true, false,false, true, true, false, false, false, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 1, new boolean[21], 0, 15));
assertArrayEquals(new boolean[]{true, true, false, true, true, true, true, false, true, true, false, false,true, true, false, false, false, false, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21], 0, 14));
// assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,// true, true, false, true, true, false, false, true, false, false, false, false,// false}, Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21],// 3, 15));//rejected by
// assertionassertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true, true, true, false, true,true, false, false, true, true, false, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21], 3, 14));
assertArrayEquals(new boolean[]{}, Conversion.byteToBinary((byte) 0x00, 0, new boolean[]{}, 0, 0));
assertArrayEquals(new boolean[]{}, Conversion.byteToBinary((byte) 0x00, 100, new boolean[]{}, 0, 0));
assertArrayEquals(new boolean[]{}, Conversion.byteToBinary((byte) 0x00, 0, new boolean[]{}, 100, 0));
assertArrayEquals(new boolean[69], Conversion.byteToBinary((byte) 0xEF, 0, new boolean[69], 0, 0));
assertArrayEquals(new boolean[]{true, false, false, false, false, false, false, false, false, false, false, false,false}, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 1));
assertArrayEquals(new boolean[]{true, false, false, false, false, false, false, false, false, false, false, false,false}, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 2));
assertArrayEquals(new boolean[]{true, false, true, false, false, false, false, false, false, false, false, false,false}, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 3));
assertArrayEquals(new boolean[]{true, false, true, false, true, false, false, false, false, false, false, false,false}, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 7));
assertArrayEquals(new boolean[]{true, false, true, false, true, false, false, true, false, false, false, false,false}, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 8));
assertArrayEquals(new boolean[]{false, false, true, false, false, false, false, false, false, false, false, false,false}, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 2, 1));
assertArrayEquals(new boolean[]{false, false, true, false, true, false, true, false, false, true, false, false,false}, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 2, 8));
assertArrayEquals(new boolean[]{false, true, false, true, false, false, true, false, false, false, false, false,false}, Conversion.byteToBinary((byte) 0x95, 1, new boolean[13], 0, 7));
assertArrayEquals(new boolean[]{true, false, true, false, false, true, false, false, false, false, false, false,false}, Conversion.byteToBinary((byte) 0x95, 2, new boolean[13], 0, 6));
// assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,// false, false, false, false, false}, Conversion.byteToBinary((byte) 0x95, 2, new// boolean[13], 3, 7));//rejected by assertion
assertArrayEquals(new boolean[]{false, false, false, true, false, true, false, false, true, false, false, false,false}, Conversion.byteToBinary((byte) 0x95, 2, new boolean[13], 3, 6));
assertArrayEquals(new byte[]{(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,(byte) 0xff, (byte) 0xff}, Conversion.uuidToByteArray(new UUID(0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL), new byte[16], 0, 16));
assertArrayEquals(new byte[]{(byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee,(byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55,(byte) 0x66, (byte) 0x77}, Conversion.uuidToByteArray(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 0, 16));
assertArrayEquals(new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x88, (byte) 0x99, (byte) 0xaa,(byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x00,(byte) 0x00, (byte) 0x00}, Conversion.uuidToByteArray(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 4, 8));
assertArrayEquals(new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc,(byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33,(byte) 0x00, (byte) 0x00}, Conversion.uuidToByteArray(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 2, 12));
assertEquals(new UUID(0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL),Conversion.byteArrayToUuid(new byte[]{(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff}, 0));
assertEquals(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L),Conversion.byteArrayToUuid(new byte[]{(byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd,(byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33,(byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77}, 0));
assertEquals(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L),Conversion.byteArrayToUuid(new byte[]{0, 0, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd,(byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33,(byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77}, 2));
assertEquals(System.getProperty("user.name"), SystemUtils.USER_NAME);
assertEquals(expected, value);
assertEquals(expected, hostName);
assertEquals(System.getProperty("user.name"), SystemUtils.getUserName());
assertEquals(System.getProperty("user.name", "foo"), SystemUtils.getUserName("foo"));
assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS);
assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless());
assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless());
assertTimeoutPreemptively(Duration.ofSeconds(666L), () -> {final Test real = getClass().getDeclaredMethod("testGeneratedAnnotationEquivalentToRealAnnotation").getAnnotation(Test.class);
assertEquals(real, generated);
assertNotEquals(generated, real);
assertNotEquals(generated, generated2);
assertNotEquals(generated2, generated);
assertTimeoutPreemptively(Duration.ofSeconds(666L), () -> {final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class);
assertEquals(test.hashCode(), AnnotationUtils.hashCode(test));
assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1));
assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3));
assertTimeoutPreemptively(Duration.ofSeconds(666L), () -> {final TestMethodAnnotation testAnnotation =getClass().getDeclaredMethod("testToString").getAnnotation(TestMethodAnnotation.class);
assertEquals("For input string: \"4 \"", thrown.getMessage());
assertEquals(3, array.length);
assertEquals("2", array[0]);
assertEquals("3", array[1]);
assertEquals("1", array[2]);
assertThat(thrown.getMessage(), is(nullValue()));
assertThat(oomeThrown.getMessage(), is(nullValue()));
assertAll(() -> assertThat(seThrown.getMessage(), is(nullValue())),() -> assertThat(seThrown.getCause(), is(equalTo(se))));
private void assertEvenNumbers(final List<Integer> output) {assertEquals(3, output.size());
assertThat(thrown.getMessage(), is(equalTo("Invalid argument: " + 5)));
assertThat(thrown.getMessage(), is(nullValue()));
assertAll(() -> assertThat(thrown.getMessage(), is(nullValue())),() -> assertThat(thrown.getCause(), is(equalTo(se))));
private void assertGetClassReturnsClass(final Class<?> c) throws Exception {assertEquals(c, ClassUtils.getClass(c.getName()));
private void assertGetClassThrowsClassNotFound(final String className) {assertGetClassThrowsException(className, ClassNotFoundException.class);
private void assertGetClassThrowsNullPointerException(final String className) {assertGetClassThrowsException(className, NullPointerException.class);
assertEquals("java.lang.String", result.get(0));
assertEquals(Object.class, result.get(2));
assertEquals("", ClassUtils.getAbbreviatedName((Class<?>) null, 1));
assertEquals("j.l.String", ClassUtils.getAbbreviatedName(String.class, 1));
assertEquals("j.l.String", ClassUtils.getAbbreviatedName(String.class, 5));
assertEquals("o.a.c.l.ClassUtils", ClassUtils.getAbbreviatedName(ClassUtils.class, 18));
assertEquals("j.lang.String", ClassUtils.getAbbreviatedName(String.class, 13));
assertEquals("j.lang.String", ClassUtils.getAbbreviatedName(String.class, 15));
assertEquals("java.lang.String", ClassUtils.getAbbreviatedName(String.class, 20));
assertEquals("", ClassUtils.getAbbreviatedName((String) null, 1));
assertEquals("", ClassUtils.getAbbreviatedName("", 1));
assertEquals("WithoutPackage", ClassUtils.getAbbreviatedName("WithoutPackage", 1));
assertEquals("j.l.String", ClassUtils.getAbbreviatedName("java.lang.String", 1));
assertEquals("o.a.c.l.ClassUtils", ClassUtils.getAbbreviatedName("org.apache.commons.lang3.ClassUtils", 18));
assertEquals("org.apache.commons.lang3.ClassUtils",ClassUtils.getAbbreviatedName("org.apache.commons.lang3.ClassUtils", "org.apache.commons.lang3.ClassUtils".length()));
assertEquals("o.a.c.l.ClassUtils", ClassUtils.getAbbreviatedName("o.a.c.l.ClassUtils", 18));
assertEquals("o..c.l.ClassUtils", ClassUtils.getAbbreviatedName("o..c.l.ClassUtils", 18));
assertEquals(".", ClassUtils.getAbbreviatedName(".", 18));
assertEquals(".", ClassUtils.getAbbreviatedName(".", 1));
assertEquals("..", ClassUtils.getAbbreviatedName("..", 1));
assertEquals("...", ClassUtils.getAbbreviatedName("...", 2));
assertEquals("...", ClassUtils.getAbbreviatedName("...", 3));
assertEquals("java.lang.String", ClassUtils.getAbbreviatedName("java.lang.String", Integer.MAX_VALUE));
assertEquals("j.lang.String", ClassUtils.getAbbreviatedName("java.lang.String", "j.lang.String".length()));
assertEquals("j.l.String", ClassUtils.getAbbreviatedName("java.lang.String", "j.lang.String".length() - 1));
assertEquals("j.l.String", ClassUtils.getAbbreviatedName("java.lang.String", "j.l.String".length()));
assertEquals("j.l.String", ClassUtils.getAbbreviatedName("java.lang.String", "j.l.String".length() - 1));
Assertions.assertSame(className, ClassUtils.getAbbreviatedName(className, className.length() + 1));
Assertions.assertSame(className, ClassUtils.getAbbreviatedName(className, className.length()));
assertEquals("org.apache.commons.lang3.ClassUtils", ClassUtils.getCanonicalName(ClassUtils.class));
assertEquals("java.util.Map.Entry", ClassUtils.getCanonicalName(Map.Entry.class));
assertEquals("", ClassUtils.getCanonicalName((Class<?>) null));
assertEquals("java.lang.String[]", ClassUtils.getCanonicalName(String[].class));
assertEquals("java.util.Map.Entry[]", ClassUtils.getCanonicalName(Map.Entry[].class));
assertEquals("boolean", ClassUtils.getCanonicalName(boolean.class));
assertEquals("byte", ClassUtils.getCanonicalName(byte.class));
assertEquals("char", ClassUtils.getCanonicalName(char.class));
assertEquals("short", ClassUtils.getCanonicalName(short.class));
assertEquals("int", ClassUtils.getCanonicalName(int.class));
assertEquals("long", ClassUtils.getCanonicalName(long.class));
assertEquals("float", ClassUtils.getCanonicalName(float.class));
assertEquals("double", ClassUtils.getCanonicalName(double.class));
assertEquals("boolean[]", ClassUtils.getCanonicalName(boolean[].class));
assertEquals("byte[]", ClassUtils.getCanonicalName(byte[].class));
assertEquals("char[]", ClassUtils.getCanonicalName(char[].class));
assertEquals("short[]", ClassUtils.getCanonicalName(short[].class));
assertEquals("int[]", ClassUtils.getCanonicalName(int[].class));
assertEquals("long[]", ClassUtils.getCanonicalName(long[].class));
assertEquals("float[]", ClassUtils.getCanonicalName(float[].class));
assertEquals("double[]", ClassUtils.getCanonicalName(double[].class));
assertEquals("java.lang.String[][]", ClassUtils.getCanonicalName(String[][].class));
assertEquals("java.lang.String[][][]", ClassUtils.getCanonicalName(String[][][].class));
assertEquals("java.lang.String[][][][]", ClassUtils.getCanonicalName(String[][][][].class));
assertEquals(StringUtils.EMPTY, ClassUtils.getCanonicalName(new Object() {// empty}.getClass()));
assertEquals(StringUtils.EMPTY, ClassUtils.getCanonicalName(Named.class));
assertEquals("org.apache.commons.lang3.ClassUtilsTest.Inner", ClassUtils.getCanonicalName(Inner.class));
assertEquals("org.apache.commons.lang3.ClassUtils", ClassUtils.getCanonicalName(ClassUtils.class, "X"));
assertEquals("java.util.Map.Entry", ClassUtils.getCanonicalName(Map.Entry.class, "X"));
assertEquals("X", ClassUtils.getCanonicalName((Class<?>) null, "X"));
assertEquals("java.lang.String[]", ClassUtils.getCanonicalName(String[].class, "X"));
assertEquals("java.util.Map.Entry[]", ClassUtils.getCanonicalName(Map.Entry[].class, "X"));
assertEquals("boolean", ClassUtils.getCanonicalName(boolean.class, "X"));
assertEquals("byte", ClassUtils.getCanonicalName(byte.class, "X"));
assertEquals("char", ClassUtils.getCanonicalName(char.class, "X"));
assertEquals("short", ClassUtils.getCanonicalName(short.class, "X"));
assertEquals("int", ClassUtils.getCanonicalName(int.class, "X"));
assertEquals("long", ClassUtils.getCanonicalName(long.class, "X"));
assertEquals("float", ClassUtils.getCanonicalName(float.class, "X"));
assertEquals("double", ClassUtils.getCanonicalName(double.class, "X"));
assertEquals("boolean[]", ClassUtils.getCanonicalName(boolean[].class, "X"));
assertEquals("byte[]", ClassUtils.getCanonicalName(byte[].class, "X"));
assertEquals("char[]", ClassUtils.getCanonicalName(char[].class, "X"));
assertEquals("short[]", ClassUtils.getCanonicalName(short[].class, "X"));
assertEquals("int[]", ClassUtils.getCanonicalName(int[].class, "X"));
assertEquals("long[]", ClassUtils.getCanonicalName(long[].class, "X"));
assertEquals("float[]", ClassUtils.getCanonicalName(float[].class, "X"));
assertEquals("double[]", ClassUtils.getCanonicalName(double[].class, "X"));
assertEquals("java.lang.String[][]", ClassUtils.getCanonicalName(String[][].class, "X"));
assertEquals("java.lang.String[][][]", ClassUtils.getCanonicalName(String[][][].class, "X"));
assertEquals("java.lang.String[][][][]", ClassUtils.getCanonicalName(String[][][][].class, "X"));
assertEquals("X", ClassUtils.getCanonicalName(new Object() {// empty}.getClass(), "X"));
assertEquals("X", ClassUtils.getCanonicalName(Named.class, "X"));
assertEquals("org.apache.commons.lang3.ClassUtilsTest.Inner", ClassUtils.getCanonicalName(Inner.class, "X"));
assertEquals("X", ClassUtils.getCanonicalName((Object) null, "X"));
assertEquals(OBJECT_CANONICAL_NAME, ClassUtils.getCanonicalName(new Object()));
// assertEquals("org.apache.commons.lang3.ClassUtils", ClassUtils.getName(ClassLoader.class, "@"));
assertEquals("org.apache.commons.lang3.ClassUtils", ClassUtils.getName(ClassUtils.class));
assertEquals("java.util.Map$Entry", ClassUtils.getName(Map.Entry.class));
assertEquals("", ClassUtils.getName((Class<?>) null));
assertEquals("[Ljava.lang.String;", ClassUtils.getName(String[].class));
assertEquals("[Ljava.util.Map$Entry;", ClassUtils.getName(Map.Entry[].class));
assertEquals("boolean", ClassUtils.getName(boolean.class));
assertEquals("byte", ClassUtils.getName(byte.class));
assertEquals("char", ClassUtils.getName(char.class));
assertEquals("short", ClassUtils.getName(short.class));
assertEquals("int", ClassUtils.getName(int.class));
assertEquals("long", ClassUtils.getName(long.class));
assertEquals("float", ClassUtils.getName(float.class));
assertEquals("double", ClassUtils.getName(double.class));
assertEquals("[Z", ClassUtils.getName(boolean[].class));
assertEquals("[B", ClassUtils.getName(byte[].class));
assertEquals("[C", ClassUtils.getName(char[].class));
assertEquals("[S", ClassUtils.getName(short[].class));
assertEquals("[I", ClassUtils.getName(int[].class));
assertEquals("[J", ClassUtils.getName(long[].class));
assertEquals("[F", ClassUtils.getName(float[].class));
assertEquals("[D", ClassUtils.getName(double[].class));
assertEquals("[[Ljava.lang.String;", ClassUtils.getName(String[][].class));
assertEquals("[[[Ljava.lang.String;", ClassUtils.getName(String[][][].class));
assertEquals("[[[[Ljava.lang.String;", ClassUtils.getName(String[][][][].class));
assertEquals("org.apache.commons.lang3.ClassUtilsTest$3", ClassUtils.getName(new Object() {// empty}.getClass()));
assertEquals("org.apache.commons.lang3.ClassUtilsTest$3Named", ClassUtils.getName(Named.class));
assertEquals("org.apache.commons.lang3.ClassUtilsTest$Inner", ClassUtils.getName(Inner.class));
assertEquals(OBJECT_CANONICAL_NAME, ClassUtils.getName(new Object()));
assertEquals("org.apache.commons.lang3.ClassUtils", ClassUtils.getName(new ClassUtils(), "<null>"));
assertEquals("org.apache.commons.lang3.ClassUtilsTest$Inner", ClassUtils.getName(new Inner(), "<null>"));
assertEquals("java.lang.String", ClassUtils.getName("hello", "<null>"));
assertEquals("<null>", ClassUtils.getName(null, "<null>"));
assertEquals("org.apache.commons.lang3.ClassUtilsTest$4", ClassUtils.getName(new Object() {// empty}, "<null>"));
assertEquals("org.apache.commons.lang3.ClassUtilsTest$4Named", ClassUtils.getName(new Named(), "<null>"));
assertEquals("org.apache.commons.lang3.ClassUtilsTest$Inner", ClassUtils.getName(new Inner(), "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(ClassUtils.class));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(ClassUtils[].class));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(ClassUtils[][].class));
assertEquals("", ClassUtils.getPackageCanonicalName(int[].class));
assertEquals("", ClassUtils.getPackageCanonicalName(int[][].class));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object() {// empty}.getClass()));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(Named.class));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(Inner.class));
assertEquals(StringUtils.EMPTY, ClassUtils.getPackageCanonicalName((Class<?>) null));
assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0], "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], "<null>"));
assertEquals("", ClassUtils.getPackageCanonicalName(new int[0], "<null>"));
assertEquals("", ClassUtils.getPackageCanonicalName(new int[0][0], "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object() {// empty}, "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Named(), "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Inner(), "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtils"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtils[]"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtils[][]"));
assertEquals("", ClassUtils.getPackageCanonicalName("[I"));
assertEquals("", ClassUtils.getPackageCanonicalName("[[I"));
assertEquals("", ClassUtils.getPackageCanonicalName("int[]"));
assertEquals("", ClassUtils.getPackageCanonicalName("int[][]"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner"));
assertEquals("java.lang", ClassUtils.getPackageName(String.class));
assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));
assertEquals("", ClassUtils.getPackageName((Class<?>) null));
assertEquals("java.lang", ClassUtils.getPackageName(String[].class));
assertEquals("", ClassUtils.getPackageName(boolean[].class));
assertEquals("", ClassUtils.getPackageName(byte[].class));
assertEquals("", ClassUtils.getPackageName(char[].class));
assertEquals("", ClassUtils.getPackageName(short[].class));
assertEquals("", ClassUtils.getPackageName(int[].class));
assertEquals("", ClassUtils.getPackageName(long[].class));
assertEquals("", ClassUtils.getPackageName(float[].class));
assertEquals("", ClassUtils.getPackageName(double[].class));
assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));
assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));
assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Object() {// empty}.getClass()));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(Named.class));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new ClassUtils(), "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Inner(), "<null>"));
assertEquals("<null>", ClassUtils.getPackageName(null, "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(ClassUtils.class.getName()));
assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class.getName()));
assertEquals("", ClassUtils.getPackageName((String) null));
assertEquals("", ClassUtils.getPackageName(""));
assertEquals("ClassUtils", ClassUtils.getShortCanonicalName(ClassUtils.class));
assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName(ClassUtils[].class));
assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName(ClassUtils[][].class));
assertEquals("int[]", ClassUtils.getShortCanonicalName(int[].class));
assertEquals("int[][]", ClassUtils.getShortCanonicalName(int[][].class));
assertEquals("ClassUtilsTest.8", ClassUtils.getShortCanonicalName(new Object() {// empty}.getClass()));
assertEquals("ClassUtilsTest.8Named", ClassUtils.getShortCanonicalName(Named.class));
assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName(Inner.class));
assertEquals("<null>", ClassUtils.getShortCanonicalName(null, "<null>"));
assertEquals("ClassUtils", ClassUtils.getShortCanonicalName(new ClassUtils(), "<null>"));
assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName(new ClassUtils[0], "<null>"));
assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName(new ClassUtils[0][0], "<null>"));
assertEquals("int[]", ClassUtils.getShortCanonicalName(new int[0], "<null>"));
assertEquals("int[][]", ClassUtils.getShortCanonicalName(new int[0][0], "<null>"));
assertEquals("ClassUtilsTest.9", ClassUtils.getShortCanonicalName(new Object() {// empty}, "<null>"));
assertEquals("ClassUtilsTest.9Named", ClassUtils.getShortCanonicalName(new Named(), "<null>"));
assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName(new Inner(), "<null>"));
assertEquals("", ClassUtils.getShortCanonicalName((String) null));
assertEquals("Map.Entry", ClassUtils.getShortCanonicalName(java.util.Map.Entry.class.getName()));
assertEquals("Entry", ClassUtils.getShortCanonicalName(java.util.Map.Entry.class.getCanonicalName()));
assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils"));
assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;"));
assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;"));
assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]"));
assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]"));
assertEquals("int[]", ClassUtils.getShortCanonicalName("[I"));
assertEquals("int[]", ClassUtils.getShortCanonicalName(int[].class.getCanonicalName()));
assertEquals("int[]", ClassUtils.getShortCanonicalName(int[].class.getName()));
assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I"));
assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]"));
assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]"));
assertEquals("int[]", int[].class.getCanonicalName());
assertEquals("[I", int[].class.getName());
assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6"));
assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named"));
assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner"));
assertEquals("org.apache.commons.lang3.ClassUtilsTest$10", new org.apache.commons.lang3.ClassUtilsTest() {}.getClass().getName());
assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));
assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));
assertEquals("", ClassUtils.getShortClassName((Class<?>) null));
assertEquals("String[]", ClassUtils.getShortClassName(String[].class));
assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));
assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));
assertEquals("byte", ClassUtils.getShortClassName(byte.class));
assertEquals("char", ClassUtils.getShortClassName(char.class));
assertEquals("short", ClassUtils.getShortClassName(short.class));
assertEquals("int", ClassUtils.getShortClassName(int.class));
assertEquals("long", ClassUtils.getShortClassName(long.class));
assertEquals("float", ClassUtils.getShortClassName(float.class));
assertEquals("double", ClassUtils.getShortClassName(double.class));
assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));
assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));
assertEquals("char[]", ClassUtils.getShortClassName(char[].class));
assertEquals("short[]", ClassUtils.getShortClassName(short[].class));
assertEquals("int[]", ClassUtils.getShortClassName(int[].class));
assertEquals("long[]", ClassUtils.getShortClassName(long[].class));
assertEquals("float[]", ClassUtils.getShortClassName(float[].class));
assertEquals("double[]", ClassUtils.getShortClassName(double[].class));
assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));
assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));
assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));
assertEquals("ClassUtilsTest.12", ClassUtils.getShortClassName(new Object() {// empty}.getClass()));
assertEquals("ClassUtilsTest.10Named", ClassUtils.getShortClassName(Named.class));
assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(Inner.class));
assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>"));
assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>"));
assertEquals("String", ClassUtils.getShortClassName("hello", "<null>"));
assertEquals("<null>", ClassUtils.getShortClassName(null, "<null>"));
assertEquals("ClassUtilsTest.13", ClassUtils.getShortClassName(new Object() {// empty}, "<null>"));
assertEquals("ClassUtilsTest.11Named", ClassUtils.getShortClassName(new Named(), "<null>"));
assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>"));
assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class.getName()));
assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class.getName()));
assertEquals("", ClassUtils.getShortClassName((String) null));
assertEquals("", ClassUtils.getShortClassName(""));
assertEquals("ClassUtils", ClassUtils.getSimpleName(ClassUtils.class));
assertEquals("Entry", ClassUtils.getSimpleName(Map.Entry.class));
assertEquals("", ClassUtils.getSimpleName(null));
assertEquals("String[]", ClassUtils.getSimpleName(String[].class));
assertEquals("Entry[]", ClassUtils.getSimpleName(Map.Entry[].class));
assertEquals("boolean", ClassUtils.getSimpleName(boolean.class));
assertEquals("byte", ClassUtils.getSimpleName(byte.class));
assertEquals("char", ClassUtils.getSimpleName(char.class));
assertEquals("short", ClassUtils.getSimpleName(short.class));
assertEquals("int", ClassUtils.getSimpleName(int.class));
assertEquals("long", ClassUtils.getSimpleName(long.class));
assertEquals("float", ClassUtils.getSimpleName(float.class));
assertEquals("double", ClassUtils.getSimpleName(double.class));
assertEquals("boolean[]", ClassUtils.getSimpleName(boolean[].class));
assertEquals("byte[]", ClassUtils.getSimpleName(byte[].class));
assertEquals("char[]", ClassUtils.getSimpleName(char[].class));
assertEquals("short[]", ClassUtils.getSimpleName(short[].class));
assertEquals("int[]", ClassUtils.getSimpleName(int[].class));
assertEquals("long[]", ClassUtils.getSimpleName(long[].class));
assertEquals("float[]", ClassUtils.getSimpleName(float[].class));
assertEquals("double[]", ClassUtils.getSimpleName(double[].class));
assertEquals("String[][]", ClassUtils.getSimpleName(String[][].class));
assertEquals("String[][][]", ClassUtils.getSimpleName(String[][][].class));
assertEquals("String[][][][]", ClassUtils.getSimpleName(String[][][][].class));
assertEquals("", ClassUtils.getSimpleName(new Object() {// empty}.getClass()));
assertEquals("Named", ClassUtils.getSimpleName(Named.class));
assertEquals("ClassUtils", ClassUtils.getSimpleName(new ClassUtils()));
assertEquals("Inner", ClassUtils.getSimpleName(new Inner()));
assertEquals("String", ClassUtils.getSimpleName("hello"));
assertEquals(StringUtils.EMPTY, ClassUtils.getSimpleName(null));
assertEquals(StringUtils.EMPTY, ClassUtils.getSimpleName(null));
assertEquals("ClassUtils", ClassUtils.getSimpleName(new ClassUtils(), "<null>"));
assertEquals("Inner", ClassUtils.getSimpleName(new Inner(), "<null>"));
assertEquals("String", ClassUtils.getSimpleName("hello", "<null>"));
assertEquals("<null>", ClassUtils.getSimpleName(null, "<null>"));
assertEquals("firstEntry", map.firstEntry().getValue());
assertEquals(Character.class, map.firstEntry().getKey());
assertEquals("lastEntry", map.lastEntry().getValue());
assertEquals("null", map.get(null));
assertEquals(int[].class, ClassUtils.getClass("int[]"));
assertEquals(long[].class, ClassUtils.getClass("long[]"));
assertEquals(short[].class, ClassUtils.getClass("short[]"));
assertEquals(byte[].class, ClassUtils.getClass("byte[]"));
assertEquals(char[].class, ClassUtils.getClass("char[]"));
assertEquals(float[].class, ClassUtils.getClass("float[]"));
assertEquals(double[].class, ClassUtils.getClass("double[]"));
assertEquals(boolean[].class, ClassUtils.getClass("boolean[]"));
assertEquals(String[].class, ClassUtils.getClass("java.lang.String[]"));
assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass("java.util.Map.Entry[]"));
assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass("java.util.Map$Entry[]"));
assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass("[Ljava.util.Map.Entry;"));
assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass("[Ljava.util.Map$Entry;"));
assertEquals(int[][].class, ClassUtils.getClass("int[][]"));
assertEquals(long[][].class, ClassUtils.getClass("long[][]"));
assertEquals(short[][].class, ClassUtils.getClass("short[][]"));
assertEquals(byte[][].class, ClassUtils.getClass("byte[][]"));
assertEquals(char[][].class, ClassUtils.getClass("char[][]"));
assertEquals(float[][].class, ClassUtils.getClass("float[][]"));
assertEquals(double[][].class, ClassUtils.getClass("double[][]"));
assertEquals(boolean[][].class, ClassUtils.getClass("boolean[][]"));
assertEquals(String[][].class, ClassUtils.getClass("java.lang.String[][]"));
assertGetClassThrowsClassNotFound("integer[]");
assertGetClassThrowsNullPointerException(null);
assertGetClassThrowsClassNotFound("java.lang.String][");
assertGetClassThrowsClassNotFound(".hello.world");
assertGetClassThrowsClassNotFound("hello..world");
assertEquals(int.class, ClassUtils.getClass("int"));
assertEquals(long.class, ClassUtils.getClass("long"));
assertEquals(short.class, ClassUtils.getClass("short"));
assertEquals(byte.class, ClassUtils.getClass("byte"));
assertEquals(char.class, ClassUtils.getClass("char"));
assertEquals(float.class, ClassUtils.getClass("float"));
assertEquals(double.class, ClassUtils.getClass("double"));
assertEquals(boolean.class, ClassUtils.getClass("boolean"));
assertEquals(void.class, ClassUtils.getClass("void"));
assertGetClassReturnsClass(byte[].class);
assertGetClassReturnsClass(double[].class);
assertGetClassReturnsClass(boolean[].class);
assertGetClassReturnsClass(byte[][].class);
assertGetClassReturnsClass(double[][].class);
assertGetClassReturnsClass(boolean[][].class);
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested"));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested"));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested"));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested"));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested", true));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested", true));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested", true));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested", true));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(classLoader, "org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested"));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(classLoader, "org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested"));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(classLoader, "org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested"));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(classLoader, "org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested"));
assertEquals(Object.class.getMethod("toString"), toStringMethod);
assertEquals(StringParameterizedChild.class, iter.next());
assertEquals(GenericParent.class, iter.next());
assertEquals(Object.class, iter.next());
assertEquals(StringParameterizedChild.class, iter.next());
assertEquals(GenericParent.class, iter.next());
assertEquals(GenericConsumer.class, iter.next());
assertEquals(Object.class, iter.next());
assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(), "empty -> empty");
assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY), "empty -> empty");
assertEquals(expectedWrapper, wrappers[i], primitive + " -> " + expectedWrapper);
assertNotSame(noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives), "unmodified");
assertEquals(Boolean.class, ClassUtils.primitiveToWrapper(Boolean.TYPE), "boolean -> Boolean.class");
assertEquals(Byte.class, ClassUtils.primitiveToWrapper(Byte.TYPE), "byte -> Byte.class");
assertEquals(Character.class, ClassUtils.primitiveToWrapper(Character.TYPE), "char -> Character.class");
assertEquals(Short.class, ClassUtils.primitiveToWrapper(Short.TYPE), "short -> Short.class");
assertEquals(Integer.class, ClassUtils.primitiveToWrapper(Integer.TYPE), "int -> Integer.class");
assertEquals(Long.class, ClassUtils.primitiveToWrapper(Long.TYPE), "long -> Long.class");
assertEquals(Double.class, ClassUtils.primitiveToWrapper(Double.TYPE), "double -> Double.class");
assertEquals(Float.class, ClassUtils.primitiveToWrapper(Float.TYPE), "float -> Float.class");
assertEquals(String.class, ClassUtils.primitiveToWrapper(String.class), "String.class -> String.class");
assertEquals(ClassUtils.class, ClassUtils.primitiveToWrapper(ClassUtils.class), "ClassUtils.class -> ClassUtils.class");
assertEquals(Void.TYPE, ClassUtils.primitiveToWrapper(Void.TYPE), "Void.TYPE -> Void.TYPE");
assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(), "empty -> empty");
assertArrayEquals(new Object[] {null}, castNull, "(Object) null -> [null]");
assertArrayEquals(new Class[] {String.class, Integer.class, Double.class}, ClassUtils.toClass("Test", Integer.valueOf(1), Double.valueOf(99d)));
assertArrayEquals(new Class[] {String.class, null, Double.class}, ClassUtils.toClass("Test", null, Double.valueOf(99d)));
assertEquals(int[].class, ClassUtils.getClass(" int [ ] "));
assertEquals(long[].class, ClassUtils.getClass("\rlong\t[\n]\r"));
assertEquals(short[].class, ClassUtils.getClass("\tshort                \t\t[]"));
assertEquals(byte[].class, ClassUtils.getClass("byte[\t\t\n\r]   "));
assertEquals(classes.length, primitives.length, "Wrong length of result array");
assertEquals(expectedPrimitive, primitives[i], classes[i] + " -> " + expectedPrimitive);
assertArrayEquals(empty, ClassUtils.wrappersToPrimitives(empty), "Wrong result for empty input");
assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.wrappersToPrimitives(), "empty -> empty");
assertEquals(primitive, ClassUtils.wrapperToPrimitive(wrapperCls), wrapperCls + " -> " + primitive);
assertEquals("{0, 1, 4, 6, 7}", bs.toString(), "Incorrect bitset after andNot");
assertEquals(0, bs.size(), "Incorrect size");
assertEquals("{0, 1, 4, 6, 7}", bs.toString(), "Incorrect bitset after andNot");
assertEquals(0, bs.size(), "Incorrect size");
assertEquals(48, bs.cardinality(), "cardinality() returned wrong value");
assertEquals(452, bs.cardinality(), "cardinality() returned wrong value");
assertEquals(0, bs.cardinality(), "cardinality() returned wrong value");
assertEquals(500, bs.cardinality(), "cardinality() returned wrong value");
assertEquals(0, eightFbs.length(), "Test1: Wrong length");
assertEquals(0, bs.length(), "Test2: Wrong length");
assertEquals(0, bs.cardinality(), "Test2: cardinality() returned incorrect value");
assertEquals(0, bs.length(), "Test1: Wrong length,");
assertEquals(0, bs.size(), "Test1: Wrong size,");
assertEquals(0, bs.length(), "Test2: Wrong length,");
assertEquals(0, bs.size(), "Test2: Wrong size,");
assertEquals(0, bs.length(), "Test3: Wrong length,");
assertEquals(0, bs.size(), "Test3: Wrong size,");
assertEquals(0, bs.size(), "Test4: Wrong size,");
assertEquals(0, bs.length(), "Test4: Wrong length,");
assertEquals(64, bs.size(), "Test5: Wrong size,");
assertEquals(26, bs.length(), "Test5: Wrong length,");
assertEquals(64, bs.size(), "Test6: Wrong size,");
assertEquals(26, bs.length(), "Test6: Wrong length,");
assertEquals(64, bs.size(), "Test7: Wrong size,");
assertEquals(0, bs.length(), "Test7: Wrong length,");
assertEquals(64, bs.size(), "Failed to grow BitSet");
assertEquals(0, bs.length(), "Test1: Wrong length,");
assertEquals(0, bs.size(), "Test1: Wrong size,");
assertEquals(0, bs.length(), "Test2: Wrong length,");
assertEquals(0, bs.size(), "Test2: Wrong size,");
assertEquals(0, bs.length(), "Test3: Wrong length,");
assertEquals(0, bs.size(), "Test3: Wrong size,");
assertEquals(0, bs.length(), "Test4: Wrong length,");
assertEquals(0, bs.size(), "Test4: Wrong size,");
assertEquals(26, bs.length(), "Test5: Wrong length,");
assertEquals(64, bs.size(), "Test5: Wrong size,");
assertEquals(26, bs.length(), "Test6: Wrong length,");
assertEquals(64, bs.size(), "Test6: Wrong size,");
assertEquals(64, bs.size(), "Test7: Wrong size,");
assertEquals(26, bs.length(), "Test7: Wrong length,");
assertEquals(64, bs.size(), "Test8: Wrong size,");
assertEquals(26, bs.length(), "Test8: Wrong length,");
assertEquals(64, bs.size(), "Test9: Wrong size,");
assertEquals(0, bs.length(), "Test9: Wrong length,");
assertEquals(0, bs.length(), "Test1: Wrong length,");
assertEquals(0, bs.size(), "Test1: Wrong size,");
assertEquals(0, bs.length(), "Test2: Wrong length,");
assertEquals(0, bs.size(), "Test2: Wrong size,");
assertEquals(0, bs.length(), "Test3: Wrong length,");
assertEquals(0, bs.size(), "Test3: Wrong size,");
assertEquals(0, bs.size(), "Test4: Wrong size,");
assertEquals(0, bs.length(), "Test4: Wrong length,");
assertEquals(64, bs.size(), "Test5: Wrong size,");
assertEquals(26, bs.length(), "Test5: Wrong length,");
assertEquals(64, bs.size(), "Test6: Wrong size,");
assertEquals(26, bs.length(), "Test6: Wrong length,");
assertEquals(64, bs.size(), "Test7: Wrong size,");
assertEquals(0, bs.length(), "Test7: Wrong length,");
assertEquals(bs, eightFbs, "clone failed to return equal BitSet");
assertEquals(64, bs.size(), "Create FluentBitSet of incorrect size");
assertEquals("{}", bs.toString(), "New FluentBitSet had invalid string representation");
assertEquals(128, bs.size(), "Create FluentBitSet of incorrect size");
assertEquals("{}", bs.toString(), "New FluentBitSet had invalid string representation: " + bs.toString());
assertEquals(128, bs.size(), "Failed to round FluentBitSet element size");
assertEquals(eightFbs, eightFbs, "Same FluentBitSet returned false");
assertEquals(bs, eightFbs, "Identical FluentBitSet returned false");
assertEquals(192, bs.size(), "Failed to grow BitSet");
assertEquals(i + 1, bs.length(), "Incorrect length");
assertEquals(0, bs0.size(), "Test1: Wrong size");
assertEquals(0, bs0.length(), "Test1: Wrong length");
assertEquals(bs0.size(), 64, "Test2: Wrong size");
assertEquals(1, bs0.length(), "Test2: Wrong length");
assertEquals(64, bs0.size(), "Test3: Wrong size");
assertEquals(64, bs0.length(), "Test3: Wrong length");
assertEquals(64, bs.size(), "Failed to grow BitSet");
assertEquals(0, bs.length(), "Test1: Wrong length,");
assertEquals(0, bs.size(), "Test1: Wrong size,");
assertEquals(0, bs.length(), "Test2: Wrong length,");
assertEquals(0, bs.size(), "Test2: Wrong size,");
assertEquals(0, bs.length(), "Test3: Wrong length,");
assertEquals(0, bs.size(), "Test3: Wrong size,");
assertEquals(correctbs, resultbs, "Test1: Returned incorrect BitSet");
assertEquals(correctbs, resultbs, "Test2: Returned incorrect BitSet");
assertEquals(correctbs, resultbs, "Test3: Returned incorrect BitSet");
assertEquals(correctbs, resultbs, "Test4: Returned incorrect BitSet");
assertEquals(correctbs, resultbs, "Test5: Returned incorrect BitSet");
assertEquals(correctbs, resultbs, "Test6: Returned incorrect BitSet");
assertEquals(bs.get(0, bs.size()), bs, "equality principle 1 ");
assertEquals(correctbs, resultbs, "Test7: Returned incorrect BitSet");
assertEquals(resultbs, bs2, "equality principle 2 ");
assertEquals(resultbs, bs2, "equality principle 3 ");
assertEquals(0, bs.length(), "Test1: Wrong length,");
assertEquals(0, bs.size(), "Test1: Wrong size,");
assertEquals(0, bs.length(), "Test2: Wrong length,");
assertEquals(0, bs.size(), "Test2: Wrong size,");
assertEquals(0, bs.length(), "Test3: Wrong length,");
assertEquals(0, bs.size(), "Test3: Wrong size,");
assertEquals(0, bs.length(), "Test4: Wrong length,");
assertEquals(0, bs.size(), "Test4: Wrong size,");
assertEquals(26, bs.length(), "Test5: Wrong length,");
assertEquals(64, bs.size(), "Test5: Wrong size,");
assertEquals(26, bs.length(), "Test6: Wrong length,");
assertEquals(64, bs.size(), "Test6: Wrong size,");
assertEquals(64, bs.size(), "Test7: Wrong size,");
assertEquals(26, bs.length(), "Test7: Wrong length,");
assertEquals(64, bs.size(), "Test8: Wrong size,");
assertEquals(26, bs.length(), "Test8: Wrong length,");
assertEquals(64, bs.size(), "Test9: Wrong size,");
assertEquals(26, bs.length(), "Test9: Wrong length,");
assertEquals(bs.bitSet().hashCode(), bs.hashCode(), "BitSet returns wrong hash value");
assertEquals(97, bs.hashCode(), "BitSet returns wrong hash value");
assertEquals(0, bs.length(), "BitSet returned wrong length");
assertEquals(6, bs.length(), "BitSet returned wrong length");
assertEquals(11, bs.length(), "BitSet returned wrong length");
assertEquals(433, bs.length(), "BitSet returned wrong length");
assertEquals(433, bs.length(), "BitSet returned wrong length");
assertEquals(5, bs.nextClearBit(0), "nextClearBit() returned the wrong value");
assertEquals(5, bs.nextClearBit(5), "nextClearBit() returned the wrong value");
assertEquals(32, bs.nextClearBit(6), "nextClearBit() returned the wrong value");
assertEquals(32, bs.nextClearBit(32), "nextClearBit() returned the wrong value");
assertEquals(63, bs.nextClearBit(33), "nextClearBit() returned the wrong value");
assertEquals(63, bs.nextClearBit(63), "nextClearBit() returned the wrong value");
assertEquals(64, bs.nextClearBit(64), "nextClearBit() returned the wrong value");
assertEquals(71, bs.nextClearBit(65), "nextClearBit() returned the wrong value");
assertEquals(71, bs.nextClearBit(71), "nextClearBit() returned the wrong value");
assertEquals(72, bs.nextClearBit(72), "nextClearBit() returned the wrong value");
assertEquals(127, bs.nextClearBit(110), "nextClearBit() returned the wrong value");
assertEquals(127, bs.nextClearBit(127), "nextClearBit() returned the wrong value");
assertEquals(128, bs.nextClearBit(128), "nextClearBit() returned the wrong value");
assertEquals(193, bs.nextClearBit(130), "nextClearBit() returned the wrong value");
assertEquals(193, bs.nextClearBit(191), "nextClearBit() returned the wrong value");
assertEquals(193, bs.nextClearBit(192), "nextClearBit() returned the wrong value");
assertEquals(193, bs.nextClearBit(193), "nextClearBit() returned the wrong value");
assertEquals(450, bs.nextClearBit(194), "nextClearBit() returned the wrong value");
assertEquals(450, bs.nextClearBit(255), "nextClearBit() returned the wrong value");
assertEquals(450, bs.nextClearBit(256), "nextClearBit() returned the wrong value");
assertEquals(450, bs.nextClearBit(450), "nextClearBit() returned the wrong value");
assertEquals(512, bs.nextClearBit(451), "nextClearBit() returned the wrong value");
assertEquals(512, bs.nextClearBit(511), "nextClearBit() returned the wrong value");
assertEquals(512, bs.nextClearBit(512), "nextClearBit() returned the wrong value");
assertEquals(513, bs.nextClearBit(513), "nextClearBit() returned the wrong value");
assertEquals(800, bs.nextClearBit(800), "nextClearBit() returned the wrong value");
assertEquals(5, bs.nextSetBit(0), "nextSetBit() returned the wrong value");
assertEquals(5, bs.nextSetBit(5), "nextSetBit() returned the wrong value");
assertEquals(32, bs.nextSetBit(6), "nextSetBit() returned the wrong value");
assertEquals(32, bs.nextSetBit(32), "nextSetBit() returned the wrong value");
assertEquals(63, bs.nextSetBit(33), "nextSetBit() returned the wrong value");
assertEquals(63, bs.nextSetBit(63), "nextSetBit() returned the wrong value");
assertEquals(64, bs.nextSetBit(64), "nextSetBit() returned the wrong value");
assertEquals(71, bs.nextSetBit(65), "nextSetBit() returned the wrong value");
assertEquals(71, bs.nextSetBit(71), "nextSetBit() returned the wrong value");
assertEquals(72, bs.nextSetBit(72), "nextSetBit() returned the wrong value");
assertEquals(127, bs.nextSetBit(110), "nextSetBit() returned the wrong value");
assertEquals(127, bs.nextSetBit(127), "nextSetBit() returned the wrong value");
assertEquals(128, bs.nextSetBit(128), "nextSetBit() returned the wrong value");
assertEquals(193, bs.nextSetBit(130), "nextSetBit() returned the wrong value");
assertEquals(193, bs.nextSetBit(191), "nextSetBit() returned the wrong value");
assertEquals(193, bs.nextSetBit(192), "nextSetBit() returned the wrong value");
assertEquals(193, bs.nextSetBit(193), "nextSetBit() returned the wrong value");
assertEquals(450, bs.nextSetBit(194), "nextSetBit() returned the wrong value");
assertEquals(450, bs.nextSetBit(255), "nextSetBit() returned the wrong value");
assertEquals(450, bs.nextSetBit(256), "nextSetBit() returned the wrong value");
assertEquals(450, bs.nextSetBit(450), "nextSetBit() returned the wrong value");
assertEquals(-1, bs.nextSetBit(451), "nextSetBit() returned the wrong value");
assertEquals(-1, bs.nextSetBit(511), "nextSetBit() returned the wrong value");
assertEquals(-1, bs.nextSetBit(512), "nextSetBit() returned the wrong value");
assertEquals(-1, bs.nextSetBit(800), "nextSetBit() returned the wrong value");
assertEquals(1, bs.previousClearBit(1), "previousClearBit");
assertEquals(-1, bs.previousSetBit(1), "previousSetBit");
assertEquals(64, bs.size(), "Failed to grow BitSet");
assertEquals(128, bs.size(), "Failed to grow BitSet");
assertEquals(192, bs.size(), "Failed to grow BitSet");
assertEquals(i + 1, bs.length(), "Incorrect length");
assertEquals(0, bs.length(), "Test1: Wrong length");
assertEquals(1, bs.length(), "Test2: Wrong length");
assertEquals(192, bs.size(), "Failed to grow BitSet");
assertEquals(i + 1, bs.length(), "Incorrect length");
assertEquals(0, bs.length(), "Test1: Wrong length");
assertEquals(1, bs.length(), "Test2: Wrong length");
assertEquals(64, eightFbs.size(), "Returned incorrect size");
assertEquals(64, eightFbs.size(), "Returned incorrect size");
assertEquals(0, bs.stream().count(), "stream");
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, bs.toByteArray(), "stream");
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, bs.toLongArray(), "stream");
assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", eightFbs.toString(), "Returned incorrect string representation");
assertEquals("{0, 1, 3, 4, 5, 6, 7}", eightFbs.toString(), "Returned incorrect string representation");
assertEquals("{63}", bs.toString(), "Test highest bit");
assertEquals("{63}", bs.toString(), "Test highest bit");
assertSame(ise, e);
assertSame(error, e);
assertSame(ise, e);
assertSame(error, e);
assertSame(ise, e);
assertSame(error, e);
assertEquals(1, testable.getAcceptedPrimitiveObject1());
assertSame(ise, e);
assertSame(error, e);
assertEquals(1, testable.getAcceptedPrimitiveObject1());
assertSame(ise, e);
assertSame(error, e);
assertEquals(1, testable.getAcceptedPrimitiveObject1());
assertSame(ise, e);
assertSame(error, e);
assertEquals("X", testable.getAcceptedObject());
assertEquals(1d, testable.getAcceptedPrimitiveObject1());
assertSame(ise, e);
assertSame(error, e);
assertEquals("X", testable.getAcceptedObject());
assertEquals(1, testable.getAcceptedPrimitiveObject1());
assertSame(ise, e);
assertSame(error, e);
assertEquals("X", testable.getAcceptedObject());
assertEquals(1L, testable.getAcceptedPrimitiveObject1());
assertSame(ise, e);
assertSame(error, e);
assertSame(ise, e);
assertSame(error, e);
assertEquals("Odd Invocation: 1", cause.getMessage());
assertSame(ise, e);
assertSame(error, e);
assertEquals("Odd Invocation: 1", cause.getMessage());
assertEquals("Odd Invocation: 1", cause.getMessage());
assertSame(ise, e);
assertSame(error, e);
assertSame(ise, e);
assertSame(error, e);
assertEquals(0, biFunction.apply(testable, null).intValue());
assertEquals("Odd Invocation: 1", cause.getMessage());
assertEquals("Odd Invocation: 1", cause.getMessage());
assertSame(ise, e);
assertSame(error, e);
assertEquals("Odd Invocation: 1", cause.getMessage());
assertSame(ise, e);
assertSame(error, e);
assertEquals("Odd Invocation: 1", cause.getMessage());
assertEquals("Odd Invocation: 1", cause.getMessage());
assertSame(ise, e);
assertSame(error, e);
assertSame(ioe, cause);
assertArrayEquals(new boolean[0], ArrayUtils.insert(0, new boolean[0], null));
assertArrayEquals(new boolean[]{false, true, false, true}, ArrayUtils.insert(0, array, false));
assertArrayEquals(new boolean[]{true, false, false, true}, ArrayUtils.insert(1, array, false));
assertArrayEquals(new boolean[]{true, false, true, false}, ArrayUtils.insert(array.length, array, false));
assertArrayEquals(new boolean[]{false, true, false, true, false, true}, ArrayUtils.insert(0, array, values));
assertArrayEquals(new boolean[]{true, false, true, false, false, true}, ArrayUtils.insert(1, array, values));
assertArrayEquals(new boolean[]{true, false, true, false, true, false}, ArrayUtils.insert(array.length, array, values));
assertArrayEquals(new byte[0], ArrayUtils.insert(0, new byte[0], null));
assertArrayEquals(new byte[]{0, 1, 2, 3}, ArrayUtils.insert(0, array, (byte) 0));
assertArrayEquals(new byte[]{1, 0, 2, 3}, ArrayUtils.insert(1, array, (byte) 0));
assertArrayEquals(new byte[]{1, 2, 3, 0}, ArrayUtils.insert(array.length, array, (byte) 0));
assertArrayEquals(new byte[]{4, 5, 6, 1, 2, 3}, ArrayUtils.insert(0, array, values));
assertArrayEquals(new byte[]{1, 4, 5, 6, 2, 3}, ArrayUtils.insert(1, array, values));
assertArrayEquals(new byte[]{1, 2, 3, 4, 5, 6}, ArrayUtils.insert(array.length, array, values));
assertArrayEquals(new char[0], ArrayUtils.insert(0, new char[0], null));
assertArrayEquals(new char[]{'z', 'a', 'b', 'c'}, ArrayUtils.insert(0, array, 'z'));
assertArrayEquals(new char[]{'a', 'z', 'b', 'c'}, ArrayUtils.insert(1, array, 'z'));
assertArrayEquals(new char[]{'a', 'b', 'c', 'z'}, ArrayUtils.insert(array.length, array, 'z'));
assertArrayEquals(new char[]{'d', 'e', 'f', 'a', 'b', 'c'}, ArrayUtils.insert(0, array, values));
assertArrayEquals(new char[]{'a', 'd', 'e', 'f', 'b', 'c'}, ArrayUtils.insert(1, array, values));
assertArrayEquals(new char[]{'a', 'b', 'c', 'd', 'e', 'f'}, ArrayUtils.insert(array.length, array, values));
assertArrayEquals(new double[0], ArrayUtils.insert(0, new double[0], null), delta);
assertArrayEquals(new double[]{0, 1, 2, 3}, ArrayUtils.insert(0, array, 0), delta);
assertArrayEquals(new double[]{1, 0, 2, 3}, ArrayUtils.insert(1, array, 0), delta);
assertArrayEquals(new double[]{1, 2, 3, 0}, ArrayUtils.insert(array.length, array, 0), delta);
assertArrayEquals(new double[]{4, 5, 6, 1, 2, 3}, ArrayUtils.insert(0, array, values), delta);
assertArrayEquals(new double[]{1, 4, 5, 6, 2, 3}, ArrayUtils.insert(1, array, values), delta);
assertArrayEquals(new double[]{1, 2, 3, 4, 5, 6}, ArrayUtils.insert(array.length, array, values), delta);
assertArrayEquals(new float[0], ArrayUtils.insert(0, new float[0], null), delta);
assertArrayEquals(new float[]{0, 1, 2, 3}, ArrayUtils.insert(0, array, 0), delta);
assertArrayEquals(new float[]{1, 0, 2, 3}, ArrayUtils.insert(1, array, 0), delta);
assertArrayEquals(new float[]{1, 2, 3, 0}, ArrayUtils.insert(array.length, array, 0), delta);
assertArrayEquals(new float[]{4, 5, 6, 1, 2, 3}, ArrayUtils.insert(0, array, values), delta);
assertArrayEquals(new float[]{1, 4, 5, 6, 2, 3}, ArrayUtils.insert(1, array, values), delta);
assertArrayEquals(new float[]{1, 2, 3, 4, 5, 6}, ArrayUtils.insert(array.length, array, values), delta);
assertArrayEquals(new String[0], ArrayUtils.insert(0, new String[0], (String[]) null));
assertArrayEquals(new String[]{"z", "a", "b", "c"}, ArrayUtils.insert(0, array, "z"));
assertArrayEquals(new String[]{"a", "z", "b", "c"}, ArrayUtils.insert(1, array, "z"));
assertArrayEquals(new String[]{"a", "b", "c", "z"}, ArrayUtils.insert(array.length, array, "z"));
assertArrayEquals(new String[]{"d", "e", "f", "a", "b", "c"}, ArrayUtils.insert(0, array, values));
assertArrayEquals(new String[]{"a", "d", "e", "f", "b", "c"}, ArrayUtils.insert(1, array, values));
assertArrayEquals(new String[]{"a", "b", "c", "d", "e", "f"}, ArrayUtils.insert(array.length, array, values));
assertArrayEquals(new int[0], ArrayUtils.insert(0, new int[0], null));
assertArrayEquals(new int[]{0, 1, 2, 3}, ArrayUtils.insert(0, array, 0));
assertArrayEquals(new int[]{1, 0, 2, 3}, ArrayUtils.insert(1, array, 0));
assertArrayEquals(new int[]{1, 2, 3, 0}, ArrayUtils.insert(array.length, array, 0));
assertArrayEquals(new int[]{4, 5, 6, 1, 2, 3}, ArrayUtils.insert(0, array, values));
assertArrayEquals(new int[]{1, 4, 5, 6, 2, 3}, ArrayUtils.insert(1, array, values));
assertArrayEquals(new int[]{1, 2, 3, 4, 5, 6}, ArrayUtils.insert(array.length, array, values));
assertArrayEquals(new long[0], ArrayUtils.insert(0, new long[0], null));
assertArrayEquals(new long[]{0, 1, 2, 3}, ArrayUtils.insert(0, array, 0));
assertArrayEquals(new long[]{1, 0, 2, 3}, ArrayUtils.insert(1, array, 0));
assertArrayEquals(new long[]{1, 2, 3, 0}, ArrayUtils.insert(array.length, array, 0));
assertArrayEquals(new long[]{4, 5, 6, 1, 2, 3}, ArrayUtils.insert(0, array, values));
assertArrayEquals(new long[]{1, 4, 5, 6, 2, 3}, ArrayUtils.insert(1, array, values));
assertArrayEquals(new long[]{1, 2, 3, 4, 5, 6}, ArrayUtils.insert(array.length, array, values));
assertArrayEquals(new short[0], ArrayUtils.insert(0, new short[0], null));
assertArrayEquals(new short[]{0, 1, 2, 3}, ArrayUtils.insert(0, array, (short) 0));
assertArrayEquals(new short[]{1, 0, 2, 3}, ArrayUtils.insert(1, array, (short) 0));
assertArrayEquals(new short[]{1, 2, 3, 0}, ArrayUtils.insert(array.length, array, (short) 0));
assertArrayEquals(new short[]{4, 5, 6, 1, 2, 3}, ArrayUtils.insert(0, array, values));
assertArrayEquals(new short[]{1, 4, 5, 6, 2, 3}, ArrayUtils.insert(1, array, values));
assertArrayEquals(new short[]{1, 2, 3, 4, 5, 6}, ArrayUtils.insert(array.length, array, values));
assertEquals("x", pair.getLeft());
assertEquals("y", pair.getMiddle());
assertEquals("z", pair.getRight());
assertEquals(0, triple1.compareTo(triple1));
assertEquals(0, triple2.compareTo(triple2));
assertEquals(0, triple1.compareTo(triple1));
assertEquals(0, triple2.compareTo(triple2));
assertEquals(0, triple1.compareTo(triple1));
assertEquals(0, triple2.compareTo(triple2));
assertEquals(0, triple1.compareTo(triple1));
assertEquals(0, triple2.compareTo(triple2));
assertEquals(triple.hashCode(), triple2.hashCode());
assertEquals("         (Key,Something,Value)", String.format("%1$30s", triple));
assertEquals("(Key,Something,Value)", String.format("%1$s", triple));
assertEquals("(Key,Something,Value)", triple.toString());
assertEquals("Test created on " + "04-25-2011", triple.toString("Test created on %3$tm-%3$td-%3$tY"));
assertEquals(0, ((ImmutableTriple<Integer, String, Boolean>) triple).left.intValue());
assertEquals("foo", ((ImmutableTriple<Integer, String, Boolean>) triple).middle);
assertEquals(Boolean.TRUE, ((ImmutableTriple<Integer, String, Boolean>) triple).right);
assertEquals("bar", ((ImmutableTriple<Object, String, Long>) triple2).middle);
assertEquals(Long.valueOf(200L), ((ImmutableTriple<Object, String, Long>) triple2).right);
assertEquals("         (Key,Value)", String.format("%1$20s", pair));
assertEquals("(Key,Value)", String.format("%1$s", pair));
assertEquals(pair.hashCode(), entry.hashCode());
assertEquals("x", pair.getLeft());
assertEquals("y", pair.getRight());
assertEquals(entry.getKey(), pair.getLeft());
assertEquals(entry.getValue(), pair.getRight());
assertEquals(0, ((ImmutablePair<Integer, String>) pair).left.intValue());
assertEquals("foo", ((ImmutablePair<Integer, String>) pair).right);
assertEquals("bar", ((ImmutablePair<Object, String>) pair2).right);
assertEquals("(Key,Value)", pair.toString());
assertEquals("Test created on " + "04-25-2011", pair.toString("Test created on %2$tm-%2$td-%2$tY"));
assertEquals(0, nowPair.getLeft().intValue());
assertEquals("foo", nowPair.right);
assertEquals("foo", nowPair.getRight());
assertEquals("bar", nowPair2.right);
assertEquals("bar", nowPair2.getRight());
assertEquals("A", pair1.getLeft());
assertEquals("B", pair2.getLeft());
assertEquals("A", pair1.getRight());
assertEquals("B", pair2.getRight());
assertEquals(ImmutablePair.of(null, "foo"), ImmutablePair.of(null, "foo"));
assertNotEquals(ImmutablePair.of("foo", 0), ImmutablePair.of("foo", null));
assertNotEquals(ImmutablePair.of("foo", "bar"), ImmutablePair.of("xyz", "bar"));
assertEquals(ImmutablePair.of(null, "foo").hashCode(), ImmutablePair.of(null, "foo").hashCode());
assertSame(ImmutablePair.nullPair(), ImmutablePair.nullPair());
// How do we assert that?final ImmutablePair<String, String> pair = ImmutablePair.nullPair();
assertEquals("x", pair.left);
assertEquals("y", pair.right);
assertEquals(entry.getKey(), pair.getLeft());
assertEquals(entry.getValue(), pair.getRight());
assertEquals(0, pair.getLeft().intValue());
assertEquals("foo", pair.right);
assertEquals("foo", pair.getRight());
assertEquals("bar", pair2.right);
assertEquals("bar", pair2.getRight());
assertEquals(origPair, deserializedPair);
assertEquals(origPair.hashCode(), deserializedPair.hashCode());
assertEquals("(null,null)", ImmutablePair.of(null, null).toString());
assertEquals("(null,two)", ImmutablePair.of(null, "two").toString());
assertEquals("(one,null)", ImmutablePair.of("one", null).toString());
assertEquals("(one,two)", ImmutablePair.of("one", "two").toString());
assertEquals("(Key,null)", pair.toString());
assertEquals("(null,Value)", pair.toString());
assertEquals(value1, map.get(key1));
assertEquals(value1, map.get(ImmutablePair.of(o1, o2)));
assertEquals(item, entry.getKey());
assertEquals(item.getLeft() + "" + item.getRight(), entry.getValue());
assertEquals(0, nowPair.getLeft().intValue());
assertEquals("foo", nowPair.right);
assertEquals("foo", nowPair.getRight());
assertEquals("bar", nowPair2.right);
assertEquals("bar", nowPair2.getRight());
assertEquals(MutablePair.of(null, "foo"), MutablePair.of(null, "foo"));
assertNotEquals(MutablePair.of("foo", 0), MutablePair.of("foo", null));
assertNotEquals(MutablePair.of("foo", "bar"), MutablePair.of("xyz", "bar"));
assertEquals(MutablePair.of(null, "foo").hashCode(), MutablePair.of(null, "foo").hashCode());
assertEquals(42, pair.getLeft().intValue());
assertEquals("bar", pair.getRight());
assertEquals("x", pair.left);
assertEquals("y", pair.right);
assertEquals(entry.getKey(), pair.getLeft());
assertEquals(entry.getValue(), pair.getRight());
assertEquals(0, pair.getLeft().intValue());
assertEquals("foo", pair.getRight());
assertEquals("bar", pair2.getRight());
assertEquals(origPair, deserializedPair);
assertEquals(origPair.hashCode(), deserializedPair.hashCode());
assertEquals("(null,null)", MutablePair.of(null, null).toString());
assertEquals("(null,two)", MutablePair.of(null, "two").toString());
assertEquals("(one,null)", MutablePair.of("one", null).toString());
assertEquals("(one,two)", MutablePair.of("one", "two").toString());
assertEquals(0, triple.left.intValue());
assertEquals(0, triple.getLeft().intValue());
assertEquals("foo", triple.middle);
assertEquals("foo", triple.getMiddle());
assertEquals(Boolean.TRUE, triple.getRight());
assertEquals("bar", triple2.middle);
assertEquals("bar", triple2.getMiddle());
assertEquals(Integer.valueOf(42), triple2.right);
assertEquals(Integer.valueOf(42), triple2.getRight());
assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42));
assertNotEquals(ImmutableTriple.of("foo", 0, Boolean.TRUE), ImmutableTriple.of("foo", null, null));
assertNotEquals(ImmutableTriple.of("foo", "bar", "baz"), ImmutableTriple.of("xyz", "bar", "blo"));
assertEquals(ImmutableTriple.of(null, "foo", Boolean.TRUE).hashCode(), ImmutableTriple.of(null, "foo", Boolean.TRUE).hashCode());
assertEquals(ImmutableTriple.nullTriple(), ImmutableTriple.nullTriple());
assertSame(ImmutableTriple.nullTriple(), ImmutableTriple.nullTriple());
// How do we assert that?final ImmutableTriple<String, String, String> triple = ImmutableTriple.nullTriple();
assertEquals("x", pair.left);
assertEquals("y", pair.middle);
assertEquals("z", pair.right);
assertEquals(origTriple, deserializedTriple);
assertEquals(origTriple.hashCode(), deserializedTriple.hashCode());
assertEquals("(null,null,null)", ImmutableTriple.of(null, null, null).toString());
assertEquals("(null,two,null)", ImmutableTriple.of(null, "two", null).toString());
assertEquals("(one,null,null)", ImmutableTriple.of("one", null, null).toString());
assertEquals("(one,two,null)", ImmutableTriple.of("one", "two", null).toString());
assertEquals("(null,two,three)", ImmutableTriple.of(null, "two", "three").toString());
assertEquals("(one,null,three)", ImmutableTriple.of("one", null, "three").toString());
assertEquals("(one,two,three)", MutableTriple.of("one", "two", "three").toString());
assertEquals(0, triple.left.intValue());
assertEquals(0, triple.getLeft().intValue());
assertEquals("foo", triple.middle);
assertEquals("foo", triple.getMiddle());
assertEquals(Boolean.FALSE, triple.getRight());
assertEquals("bar", triple2.middle);
assertEquals("bar", triple2.getMiddle());
assertEquals(Boolean.TRUE, triple2.getRight());
assertEquals(value1, map.get(key1));
assertEquals(value1, map.get(ImmutableTriple.of(o1, o2, o3)));
assertEquals(item, entry.getKey());
assertEquals(item.getLeft() + "" + item.getMiddle() + "" + item.getRight(), entry.getValue());
assertEquals("x", pair.left);
assertEquals("y", pair.middle);
assertEquals("z", pair.right);
assertEquals(0, triple.getLeft().intValue());
assertEquals("foo", triple.getMiddle());
assertEquals(Boolean.FALSE, triple.getRight());
assertEquals("bar", triple2.getMiddle());
assertEquals("hello", triple2.getRight());
assertEquals(MutableTriple.of(null, "foo", "baz"), MutableTriple.of(null, "foo", "baz"));
assertNotEquals(MutableTriple.of("foo", 0, Boolean.TRUE), MutableTriple.of("foo", null, Boolean.TRUE));
assertNotEquals(MutableTriple.of("foo", "bar", "baz"), MutableTriple.of("xyz", "bar", "baz"));
assertNotEquals(MutableTriple.of("foo", "bar", "baz"), MutableTriple.of("foo", "bar", "blo"));
assertEquals(MutableTriple.of(null, "foo", "baz").hashCode(), MutableTriple.of(null, "foo", "baz").hashCode());
assertEquals(42, triple.getLeft().intValue());
assertEquals("bar", triple.getMiddle());
assertEquals(Boolean.FALSE, triple.getRight());
assertEquals(origTriple, deserializedTriple);
assertEquals(origTriple.hashCode(), deserializedTriple.hashCode());
assertEquals("(null,null,null)", MutableTriple.of(null, null, null).toString());
assertEquals("(null,two,null)", MutableTriple.of(null, "two", null).toString());
assertEquals("(one,null,null)", MutableTriple.of("one", null, null).toString());
assertEquals("(one,two,null)", MutableTriple.of("one", "two", null).toString());
assertEquals("(null,two,three)", MutableTriple.of(null, "two", "three").toString());
assertEquals("(one,null,three)", MutableTriple.of("one", null, "three").toString());
assertEquals("(one,two,three)", MutableTriple.of("one", "two", "three").toString());
assertEquals(0, triple.getLeft().intValue());
assertEquals("foo", triple.getMiddle());
assertEquals(Boolean.TRUE, triple.getRight());
assertEquals("bar", triple2.getMiddle());
assertEquals("hello", triple2.getRight());
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.setAll(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, nullIntFunction));
assertSame(array, array2);
assertEquals(i, array[i].intValue());
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.setAll(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, nullSupplier));
assertSame(array, array2);
assertEquals(FOO, StringUtils.trim(FOO + "  "));
assertEquals(FOO, StringUtils.trim(" " + FOO + "  "));
assertEquals(FOO, StringUtils.trim(" " + FOO));
assertEquals(FOO, StringUtils.trim(FOO + ""));
assertEquals("", StringUtils.trim(" \t\r\n\b "));
assertEquals("", StringUtils.trim(StringUtilsTest.TRIMMABLE));
assertEquals("", StringUtils.trim(""));
assertEquals(FOO, StringUtils.trimToNull(FOO + "  "));
assertEquals(FOO, StringUtils.trimToNull(" " + FOO + "  "));
assertEquals(FOO, StringUtils.trimToNull(" " + FOO));
assertEquals(FOO, StringUtils.trimToNull(FOO + ""));
assertEquals(FOO, StringUtils.trimToEmpty(FOO + "  "));
assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO + "  "));
assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO));
assertEquals(FOO, StringUtils.trimToEmpty(FOO + ""));
assertEquals("", StringUtils.trimToEmpty(" \t\r\n\b "));
assertEquals("", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE));
assertEquals("", StringUtils.trimToEmpty(""));
assertEquals("", StringUtils.trimToEmpty(null));
assertEquals("", StringUtils.strip(""));
assertEquals("", StringUtils.strip("        "));
assertEquals("abc", StringUtils.strip("  abc  "));
assertEquals(StringUtilsTest.NON_WHITESPACE,StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));
assertEquals("ab c", StringUtils.stripToNull("  ab c  "));
assertEquals(StringUtilsTest.NON_WHITESPACE,StringUtils.stripToNull(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));
assertEquals("", StringUtils.stripToEmpty(null));
assertEquals("", StringUtils.stripToEmpty(""));
assertEquals("", StringUtils.stripToEmpty("        "));
assertEquals("", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE));
assertEquals("ab c", StringUtils.stripToEmpty("  ab c  "));
assertEquals(StringUtilsTest.NON_WHITESPACE,StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));
assertEquals("", StringUtils.strip("", null));
assertEquals("", StringUtils.strip("        ", null));
assertEquals("abc", StringUtils.strip("  abc  ", null));
assertEquals(StringUtilsTest.NON_WHITESPACE,StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));
assertEquals("", StringUtils.strip("", ""));
assertEquals("        ", StringUtils.strip("        ", ""));
assertEquals("  abc  ", StringUtils.strip("  abc  ", ""));
assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, ""));
assertEquals("", StringUtils.strip("", " "));
assertEquals("", StringUtils.strip("        ", " "));
assertEquals("abc", StringUtils.strip("  abc  ", " "));
assertEquals("", StringUtils.strip("", "ab"));
assertEquals("        ", StringUtils.strip("        ", "ab"));
assertEquals("  abc  ", StringUtils.strip("  abc  ", "ab"));
assertEquals("c", StringUtils.strip("abcabab", "ab"));
assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, ""));
assertEquals("", StringUtils.stripStart("", null));
assertEquals("", StringUtils.stripStart("        ", null));
assertEquals("abc  ", StringUtils.stripStart("  abc  ", null));
assertEquals(StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE,StringUtils.stripStart(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));
assertEquals("", StringUtils.stripStart("", ""));
assertEquals("        ", StringUtils.stripStart("        ", ""));
assertEquals("  abc  ", StringUtils.stripStart("  abc  ", ""));
assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, ""));
assertEquals("", StringUtils.stripStart("", " "));
assertEquals("", StringUtils.stripStart("        ", " "));
assertEquals("abc  ", StringUtils.stripStart("  abc  ", " "));
assertEquals("", StringUtils.stripStart("", "ab"));
assertEquals("        ", StringUtils.stripStart("        ", "ab"));
assertEquals("  abc  ", StringUtils.stripStart("  abc  ", "ab"));
assertEquals("cabab", StringUtils.stripStart("abcabab", "ab"));
assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, ""));
assertEquals("", StringUtils.stripEnd("", null));
assertEquals("", StringUtils.stripEnd("        ", null));
assertEquals("  abc", StringUtils.stripEnd("  abc  ", null));
assertEquals(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE,StringUtils.stripEnd(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));
assertEquals("", StringUtils.stripEnd("", ""));
assertEquals("        ", StringUtils.stripEnd("        ", ""));
assertEquals("  abc  ", StringUtils.stripEnd("  abc  ", ""));
assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, ""));
assertEquals("", StringUtils.stripEnd("", " "));
assertEquals("", StringUtils.stripEnd("        ", " "));
assertEquals("  abc", StringUtils.stripEnd("  abc  ", " "));
assertEquals("", StringUtils.stripEnd("", "ab"));
assertEquals("        ", StringUtils.stripEnd("        ", "ab"));
assertEquals("  abc  ", StringUtils.stripEnd("  abc  ", "ab"));
assertEquals("abc", StringUtils.stripEnd("abcabab", "ab"));
assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, ""));
assertArrayEquals(empty, StringUtils.stripAll()); // empty array
assertArrayEquals(foo, StringUtils.stripAll(fooDots, "."));
assertEquals("Cue", StringUtils.stripAccents(cue), "Failed to strip accents from " + cue);
assertEquals("AAAAAACEEEEIIIINOOOOOUUUUY",StringUtils.stripAccents(lots),"Failed to strip accents from " + lots);
assertEquals("", StringUtils.stripAccents(""), "Failed empty String");
assertEquals("control", StringUtils.stripAccents("control"), "Failed to handle non-accented text");
assertEquals("eclair", StringUtils.stripAccents("\u00E9clair"), "Failed to handle easy example");
assertEquals("ALOSZZCN aloszzcn", StringUtils.stripAccents("\u0104\u0141\u00D3\u015A\u017B\u0179\u0106\u0143 "+ "\u0105\u0142\u00F3\u015B\u017C\u017A\u0107\u0144"));
assertEquals(input, StringUtils.stripAccents(input), "Failed to handle non-accented text");
assertEscapeJava("single quote should not be escaped", "'", "'");
assertEscapeJava("\\u1234", "\u1234");
assertEscapeJava("\\u0234", "\u0234");
assertEscapeJava("\\u00EF", "\u00ef");
assertEscapeJava("\\u0001", "\u0001");
assertEscapeJava("Should use capitalized Unicode hex", "\\uABCD", "\uabcd");
assertEscapeJava("He didn't say, \\\"stop!\\\"","He didn't say, \"stop!\"");
assertEscapeJava("non-breaking space", "This space is non-breaking:" + "\\u00A0","This space is non-breaking:\u00a0");
assertEscapeJava("\\uABCD\\u1234\\u012C","\uABCD\u1234\u012C");
assertEquals(expected, actual);
private void assertEscapeJava(final String escaped, final String original) throws IOException {assertEscapeJava(null, escaped, original);
private void assertEscapeJava(String message, final String expected, final String original) throws IOException {final String converted = StringEscapeUtils.escapeJava(original);
assertEquals(expected, converted, message);
assertEquals(expected, writer.toString());
assertUnescapeJava("test", "test");
assertUnescapeJava("\ntest\b", "\\ntest\\b");
assertUnescapeJava("\u123425foo\ntest\b", "\\u123425foo\\ntest\\b");
assertUnescapeJava("'\foo\teste\r", "\\'\\foo\\teste\\r");
assertUnescapeJava("lowercase Unicode", "\uABCDx", "\\uabcdx");
assertUnescapeJava("uppercase Unicode", "\uABCDx", "\\uABCDx");
assertUnescapeJava("Unicode as final character", "\uABCD", "\\uabcd");
private void assertUnescapeJava(final String unescaped, final String original) throws IOException {assertUnescapeJava(null, unescaped, original);
private void assertUnescapeJava(final String message, final String unescaped, final String original) throws IOException {final String expected = unescaped;
assertEquals(expected, actual,"unescape(String) failed" +(message == null ? "" : (": " + message)) +": expected '" + StringEscapeUtils.escapeJava(expected) +// we escape this so we can see it in the error message"' actual '" + StringEscapeUtils.escapeJava(actual) + "'");
assertEquals(unescaped, writer.toString());
assertEquals("He didn\\'t say, \\\"stop!\\\"", StringEscapeUtils.escapeEcmaScript("He didn't say, \"stop!\""));
assertEquals("document.getElementById(\\\"test\\\").value = \\'<script>alert(\\'aaa\\');<\\/script>\\';",
assertEquals("He didn't say, \"stop!\"", StringEscapeUtils.unescapeEcmaScript("He didn\\'t say, \\\"stop!\\\""));
assertEquals("document.getElementById(\"test\").value = '<script>alert('aaa');</script>';",
assertEquals(expected, StringEscapeUtils.escapeHtml4(original), message);
assertEquals(expected, actual, message);
assertEquals(expected, StringEscapeUtils.unescapeHtml4(original), message);
assertEquals(expected, actual, message);
assertEquals("Fran\u00E7ais", StringEscapeUtils.unescapeHtml4("Fran\u00E7ais"), "funny chars pass through OK");
assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml4("Hello&;World"));
assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml4("Hello&#;World"));
assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml4("Hello&# ;World"));
assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml4("Hello&##;World"));
assertEquals("\u0080\u009F", StringEscapeUtils.unescapeHtml4("&#x80;&#x9F;"), "hex number unescape");
assertEquals("\u0080\u009F", StringEscapeUtils.unescapeHtml4("&#X80;&#X9F;"), "hex number unescape");
assertEquals(expected, StringEscapeUtils.unescapeHtml4(escapedC1 + escapedC2), "hex number unescape index " + (int) i);
assertEquals("&zzzz;", StringEscapeUtils.unescapeHtml4("&zzzz;"));
assertEquals("&Beta;", StringEscapeUtils.escapeHtml4("\u0392"));
assertEquals("\u0392", StringEscapeUtils.unescapeHtml4("&Beta;"));
assertEquals("&lt;abc&gt;", StringEscapeUtils.escapeXml("<abc>"));
assertEquals("<abc>", StringEscapeUtils.unescapeXml("&lt;abc&gt;"));
assertEquals("\u00A1", StringEscapeUtils.escapeXml("\u00A1"), "XML should not escape >0x7f values");
assertEquals("\u00A0", StringEscapeUtils.unescapeXml("&#160;"), "XML should be able to unescape >0x7f values");
assertEquals("\u00A0", StringEscapeUtils.unescapeXml("&#0160;"),
assertEquals("\u00A0", StringEscapeUtils.unescapeXml("&#00160;"),
assertEquals("\u00A0", StringEscapeUtils.unescapeXml("&#000160;"),
assertEquals("ain't", StringEscapeUtils.unescapeXml("ain&apos;t"));
assertEquals("ain&apos;t", StringEscapeUtils.escapeXml("ain't"));
assertEquals("", StringEscapeUtils.escapeXml(""));
assertEquals("&lt;abc&gt;", sw.toString(), "XML was escaped incorrectly");
assertEquals("<abc>", sw.toString(), "XML was unescaped incorrectly");
assertEquals("a&lt;b&gt;c&quot;d&apos;e&amp;f", StringEscapeUtils.escapeXml10("a<b>c\"d'e&f"));
assertEquals("a\tb\rc\nd", StringEscapeUtils.escapeXml10("a\tb\rc\nd"), "XML 1.0 should not escape \t \n \r");
assertEquals("ab", StringEscapeUtils.escapeXml10("a\u0000\u0001\u0008\u000b\u000c\u000e\u001fb"),"XML 1.0 should omit most #x0-x8 | #xb | #xc | #xe-#x19");
assertEquals("a\ud7ff  \ue000b", StringEscapeUtils.escapeXml10("a\ud7ff\ud800 \udfff \ue000b"),"XML 1.0 should omit #xd800-#xdfff");
assertEquals("a\ufffdb", StringEscapeUtils.escapeXml10("a\ufffd\ufffe\uffffb"),"XML 1.0 should omit #xfffe | #xffff");
assertEquals("a\u007e&#127;&#132;\u0085&#134;&#159;\u00a0b",
assertEquals("a&lt;b&gt;c&quot;d&apos;e&amp;f", StringEscapeUtils.escapeXml11("a<b>c\"d'e&f"));
assertEquals("a\tb\rc\nd", StringEscapeUtils.escapeXml11("a\tb\rc\nd"), "XML 1.1 should not escape \t \n \r");
assertEquals("ab", StringEscapeUtils.escapeXml11("a\u0000b"), "XML 1.1 should omit #x0");
assertEquals("a&#1;&#8;&#11;&#12;&#14;&#31;b",
assertEquals("a\u007e&#127;&#132;\u0085&#134;&#159;\u00a0b",
assertEquals("a\ud7ff  \ue000b", StringEscapeUtils.escapeXml11("a\ud7ff\ud800 \udfff \ue000b"),"XML 1.1 should omit #xd800-#xdfff");
assertEquals("a\ufffdb", StringEscapeUtils.escapeXml11("a\ufffd\ufffe\uffffb"),"XML 1.1 should omit #xfffe | #xffff");
assertEquals("&#144308;", escapeXml.translate("\uD84C\uDFB4"),
assertEquals("a b c &#144308;", escapeXml.translate("a b c \uD84C\uDFB4"),
assertEquals("&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8;", escapeXml.translate("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008"));
assertEquals("\t", escapeXml.translate("\t")); // 0x9
assertEquals("\n", escapeXml.translate("\n")); // 0xA
assertEquals("&#11;&#12;", escapeXml.translate("\u000B\u000C"));
assertEquals("\r", escapeXml.translate("\r")); // 0xD
assertEquals("Hello World! Ain&apos;t this great?", escapeXml.translate("Hello World! Ain't this great?"));
assertEquals("&#14;&#15;&#24;&#25;", escapeXml.translate("\u000E\u000F\u0018\u0019"));
assertEquals("\uD84C\uDFB4", StringEscapeUtils.unescapeXml("&#144308;"),
assertEquals("a b c \uD84C\uDFB4", StringEscapeUtils.unescapeXml("a b c &#144308;"),
assertEquals("<P&O>", StringEscapeUtils.unescapeHtml4("&lt;P&O&gt;"));
assertEquals("test & <", StringEscapeUtils.unescapeHtml4("test & &lt;"));
assertEquals("<P&O>", StringEscapeUtils.unescapeXml("&lt;P&O&gt;"));
assertEquals("test & <", StringEscapeUtils.unescapeXml("test & &lt;"));
assertEquals("& &", StringEscapeUtils.unescapeHtml4("& &amp;"));
assertEquals("foo.bar",            StringEscapeUtils.escapeCsv("foo.bar"));
assertEquals("\"foo,bar\"",        StringEscapeUtils.escapeCsv("foo,bar"));
assertEquals("\"foo\nbar\"",       StringEscapeUtils.escapeCsv("foo\nbar"));
assertEquals("\"foo\rbar\"",       StringEscapeUtils.escapeCsv("foo\rbar"));
assertEquals("\"foo\"\"bar\"",     StringEscapeUtils.escapeCsv("foo\"bar"));
assertEquals("foo\uD84C\uDFB4bar", StringEscapeUtils.escapeCsv("foo\uD84C\uDFB4bar"));
assertEquals("",   StringEscapeUtils.escapeCsv(""));
assertEquals(expected, writer.toString());
assertEquals("foo.bar",              StringEscapeUtils.unescapeCsv("foo.bar"));
assertEquals("foo,bar",              StringEscapeUtils.unescapeCsv("\"foo,bar\""));
assertEquals("foo\nbar",             StringEscapeUtils.unescapeCsv("\"foo\nbar\""));
assertEquals("foo\rbar",             StringEscapeUtils.unescapeCsv("\"foo\rbar\""));
assertEquals("foo\"bar",             StringEscapeUtils.unescapeCsv("\"foo\"\"bar\""));
assertEquals("foo\uD84C\uDFB4bar",   StringEscapeUtils.unescapeCsv("foo\uD84C\uDFB4bar"));
assertEquals("",   StringEscapeUtils.unescapeCsv(""));
assertEquals("\"foo.bar\"",          StringEscapeUtils.unescapeCsv("\"foo.bar\""));
assertEquals(expected, writer.toString());
assertEquals(original, escaped, "High Unicode should not have been escaped");
assertEquals(original, unescaped, "High Unicode should have been unchanged");
//        assertEquals( "High Unicode should have been unescaped", original, unescapedFromEntity);
assertEquals(original, escaped,"Hiragana character Unicode behavior should not be being escaped by escapeHtml4");
assertEquals(escaped, unescaped, "Hiragana character Unicode behavior has changed - expected no unescaping");
assertEquals(bellsTest, valueTest);
assertEquals("He didn't say, \\\"stop!\\\"", StringEscapeUtils.escapeJson("He didn't say, \"stop!\""));
assertEquals(expected, StringEscapeUtils.escapeJson(input));
assertEquals("He didn't say, \"stop!\"", StringEscapeUtils.unescapeJson("He didn't say, \\\"stop!\\\""));
assertEquals(expected, StringEscapeUtils.unescapeJson(input));
assertArrayEquals(new boolean[]{false}, newArray);
assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new boolean[]{true}, newArray);
assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new boolean[]{false, true, false, true}, newArray);
assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new byte[]{0}, newArray);
assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new byte[]{1}, newArray);
assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new byte[]{0, 1, 2, 3}, newArray);
assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new byte[]{4, 1, 2, 3}, newArray);
assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
assertEquals(Character.TYPE, newArray.getClass().getComponentType());
assertEquals(Character.TYPE, newArray.getClass().getComponentType());
assertEquals(Character.TYPE, newArray.getClass().getComponentType());
assertEquals(Character.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new double[]{0}, newArray);
assertEquals(Double.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new double[]{1}, newArray);
assertEquals(Double.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new double[]{0, 1, 2, 3}, newArray);
assertEquals(Double.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new double[]{4, 1, 2, 3}, newArray);
assertEquals(Double.TYPE, newArray.getClass().getComponentType());
assertEquals(Float.TYPE, newArray.getClass().getComponentType());
assertEquals(Float.TYPE, newArray.getClass().getComponentType());
assertEquals(Float.TYPE, newArray.getClass().getComponentType());
assertEquals(Float.TYPE, newArray.getClass().getComponentType());
assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
assertEquals(Long.TYPE, newArray.getClass().getComponentType());
assertEquals(Long.TYPE, newArray.getClass().getComponentType());
assertEquals(Long.TYPE, newArray.getClass().getComponentType());
assertEquals(Long.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new Object[]{"a"}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new Object[]{"a"}, newStringArray);
assertEquals(String.class, newStringArray.getClass().getComponentType());
assertEquals(String.class, newArray.getClass().getComponentType());
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new Number[] { Float.valueOf(3), Integer.valueOf(1), Double.valueOf(2) }, newArray);
assertEquals(Number.class, newArray.getClass().getComponentType());
assertArrayEquals(new Float[] { Float.valueOf(3) }, newArray);
assertEquals(Float.class, newArray.getClass().getComponentType());
assertEquals(Short.TYPE, newArray.getClass().getComponentType());
assertEquals(Short.TYPE, newArray.getClass().getComponentType());
assertEquals(Short.TYPE, newArray.getClass().getComponentType());
assertEquals(Short.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, newArray);
assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new boolean[]{true}, newArray);
assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new boolean[]{true, false, true, false}, newArray);
assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new byte[]{0}, newArray);
assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new byte[]{1}, newArray);
assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new byte[]{1, 2, 3, 0}, newArray);
assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new byte[]{1, 2, 3, 4}, newArray);
assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
assertEquals(Character.TYPE, newArray.getClass().getComponentType());
assertEquals(Character.TYPE, newArray.getClass().getComponentType());
assertEquals(Character.TYPE, newArray.getClass().getComponentType());
assertEquals(Character.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new double[]{0}, newArray);
assertEquals(Double.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new double[]{1}, newArray);
assertEquals(Double.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new double[]{1, 2, 3, 0}, newArray);
assertEquals(Double.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new double[]{1, 2, 3, 4}, newArray);
assertEquals(Double.TYPE, newArray.getClass().getComponentType());
assertEquals(Float.TYPE, newArray.getClass().getComponentType());
assertEquals(Float.TYPE, newArray.getClass().getComponentType());
assertEquals(Float.TYPE, newArray.getClass().getComponentType());
assertEquals(Float.TYPE, newArray.getClass().getComponentType());
assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
assertEquals(Long.TYPE, newArray.getClass().getComponentType());
assertEquals(Long.TYPE, newArray.getClass().getComponentType());
assertEquals(Long.TYPE, newArray.getClass().getComponentType());
assertEquals(Long.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new Object[]{"a"}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new Object[]{"a"}, newStringArray);
assertEquals(String.class, newStringArray.getClass().getComponentType());
assertEquals(String.class, newArray.getClass().getComponentType());
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new Number[]{Integer.valueOf(1), Double.valueOf(2), Float.valueOf(3)}, newArray);
assertEquals(Number.class, newArray.getClass().getComponentType());
assertArrayEquals(new Float[]{Float.valueOf(3)}, newArray);
assertEquals(Float.class, newArray.getClass().getComponentType());
assertEquals(Short.TYPE, newArray.getClass().getComponentType());
assertEquals(Short.TYPE, newArray.getClass().getComponentType());
assertEquals(Short.TYPE, newArray.getClass().getComponentType());
assertEquals(Short.TYPE, newArray.getClass().getComponentType());
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new String[]{"1", "2", "3"}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertEquals(String.class, newArray.getClass().getComponentType());
assertEquals(String.class, newArray.getClass().getComponentType());
assertEquals(String.class, newArray.getClass().getComponentType());
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new boolean[]{true, false, false, true}, ArrayUtils.addAll(new boolean[]{true, false}, false, true));
assertArrayEquals(new boolean[]{false, true}, ArrayUtils.addAll(null, new boolean[]{false, true}));
assertArrayEquals(new boolean[]{true, false}, ArrayUtils.addAll(new boolean[]{true, false}, null));
assertArrayEquals(new byte[]{(byte) 0, (byte) 1, (byte) 2, (byte) 3}, ArrayUtils.addAll(new byte[]{(byte) 0, (byte) 1}, (byte) 2, (byte) 3));
assertArrayEquals(new byte[]{(byte) 2, (byte) 3}, ArrayUtils.addAll(null, new byte[]{(byte) 2, (byte) 3}));
assertArrayEquals(new byte[]{(byte) 0, (byte) 1}, ArrayUtils.addAll(new byte[]{(byte) 0, (byte) 1}, null));
assertArrayEquals(new short[]{(short) 10, (short) 20, (short) 30, (short) 40}, ArrayUtils.addAll(new short[]{(short) 10, (short) 20}, (short) 30, (short) 40));
assertArrayEquals(new double[]{Math.PI, -Math.PI, 0, 9.99}, ArrayUtils.addAll(new double[]{Math.PI, -Math.PI}, 0, 9.99));
assertArrayEquals(new double[]{0, 9.99}, ArrayUtils.addAll(null, new double[]{0, 9.99}));
assertArrayEquals(new double[]{Math.PI, -Math.PI}, ArrayUtils.addAll(new double[]{Math.PI, -Math.PI}, null));
assertArrayEquals(new Object[]{"a"}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertEquals(String.class, newArray.getClass().getComponentType());
assertEquals(String.class, newArray.getClass().getComponentType());
assertEquals(String.class, newArray.getClass().getComponentType());
assertEquals(String.class, newArray.getClass().getComponentType());
assertEquals(String.class, newArray.getClass().getComponentType());
assertEquals("1", result[0]);
assertEquals("2", result[1]);
assertEquals("3", result[2]);
assertEquals("4", result[3]);
assertEquals("1", result2[0]);
assertEquals("2", result2[1]);
assertEquals("4", result2[2]);
assertEquals("5", result2[3]);
assertArrayEquals(new boolean[]{true}, booleanArray);
assertEquals("Index: -1, Length: 0", e.getMessage());
assertArrayEquals(new boolean[]{false, true}, booleanArray);
assertArrayEquals(new boolean[]{false, true}, booleanArray);
assertArrayEquals(new boolean[]{true, true, false}, booleanArray);
assertEquals("Index: 4, Length: 2", e.getMessage());
assertEquals("Index: -1, Length: 2", e.getMessage());
assertEquals("Index: -1, Length: 0", e.getMessage());
assertEquals("Index: 4, Length: 2", e.getMessage());
assertEquals("Index: -1, Length: 2", e.getMessage());
assertEquals("Index: -1, Length: 0", e.getMessage());
assertEquals("Index: 4, Length: 2", e.getMessage());
assertEquals("Index: -1, Length: 2", e.getMessage());
assertArrayEquals(new byte[]{2, 1}, byteArray);
assertEquals("Index: -1, Length: 0", e.getMessage());
assertArrayEquals(new byte[]{2, 6, 3}, byteArray);
assertArrayEquals(new byte[]{1, 2, 6}, byteArray);
assertArrayEquals(new byte[]{2, 6, 1, 3}, byteArray);
assertEquals("Index: 4, Length: 2", e.getMessage());
assertEquals("Index: -1, Length: 2", e.getMessage());
assertEquals("Index: -1, Length: 0", e.getMessage());
assertEquals("Index: 4, Length: 2", e.getMessage());
assertEquals("Index: -1, Length: 2", e.getMessage());
assertEquals("Index: -1, Length: 0", e.getMessage());
assertEquals("Index: 4, Length: 2", e.getMessage());
assertEquals("Index: -1, Length: 2", e.getMessage());
assertEquals("Index: -1, Length: 0", e.getMessage());
assertEquals("Index: 4, Length: 2", e.getMessage());
assertEquals("Index: -1, Length: 2", e.getMessage());
assertArrayEquals(new double[]{2.2, 1.1}, doubleArray);
assertEquals("Index: -1, Length: 0", e.getMessage());
assertArrayEquals(new double[]{2.3, 6.4, 10.5}, doubleArray);
assertArrayEquals(new double[]{-4.8, 2.6, 6.7}, doubleArray);
assertArrayEquals(new double[]{2.9, 6.0, 1.0, 0.3}, doubleArray);
assertEquals("Index: 4, Length: 2", e.getMessage());
assertEquals("Index: -1, Length: 2", e.getMessage());
assertEquals(Number.class, n.getClass().getComponentType());
assertCorrect("Issue in (String)", nie, message, null, null);
assertCorrect("Issue in (Throwable)", nie, nested.toString(), nested, null);
assertCorrect("Issue in (String, Throwable)", nie, message, nested, null);
assertCorrect("Issue in (String, String)", nie, message, null, code);
assertCorrect("Issue in (Throwable, String)", nie, nested.toString(), nested, code);
assertCorrect("Issue in (String, Throwable, String)", nie, message, nested, code);
assertEquals(message, nie.getMessage(), assertMessage + ": Message not equal");
assertEquals(nested, nie.getCause(), assertMessage + ": Nested throwable not equal");
assertEquals(code, nie.getCode(), assertMessage + ": Code not equal");
private void assertEvenNumbers(final List<Integer> output) {assertEquals(3, output.size());
assertThat(thrown.getMessage(), is(equalTo("Invalid argument: " + 5)));
assertThat(thrown.getMessage(), is(nullValue()));
assertAll(() -> assertThat(thrown.getMessage(), is(nullValue())), () -> assertThat(thrown.getCause(), is(equalTo(se))));
assertThat(thrown.getMessage(), is(nullValue()));
assertThat(oomeThrown.getMessage(), is(nullValue()));
assertAll(() -> assertThat(seThrown.getMessage(), is(nullValue())), () -> assertThat(seThrown.getCause(), is(equalTo(se))));
assertEquals(2, Streams.instancesOf(String.class, Arrays.asList("A", "B")).collect(Collectors.toList()).size());
assertEquals(2, Streams.instancesOf(String.class, Arrays.asList(null, "A", null, "B", null)).collect(Collectors.toList()).size());
assertEquals(0, Streams.instancesOf(String.class, Arrays.asList(null, null)).collect(Collectors.toList()).size());
assertEquals(2, Streams.instancesOf(String.class, objects).collect(Collectors.toList()).size());
assertEquals(2, Streams.nonNull(Arrays.asList("A", "B")).collect(Collectors.toList()).size());
assertEquals(2, Streams.nonNull(Arrays.asList(null, "A", null, "B", null)).collect(Collectors.toList()).size());
assertEquals(0, Streams.nonNull(Arrays.asList(null, null)).collect(Collectors.toList()).size());
assertEquals(0, Streams.nonNull(input).collect(Collectors.toList()).size());
assertEquals(1, Streams.of("foo").count());
assertEquals(2, Streams.of("foo", "bar").count());
assertEquals(2, Streams.of(Arrays.asList("A", "B")).collect(Collectors.toList()).size());
assertEquals(0, Streams.of(input).collect(Collectors.toList()).size());
assertEquals(0, Streams.of(table.elements()).count());
assertEquals(1, Streams.of(table.elements()).count());
assertEquals(2, Streams.of(table.elements()).count());
assertEquals(2, Streams.of((Iterable<String>) Arrays.asList("A", "B")).collect(Collectors.toList()).size());
assertEquals(0, Streams.of(input).collect(Collectors.toList()).size());
assertEquals(2, Streams.of(Arrays.asList("A", "B").iterator()).collect(Collectors.toList()).size());
assertEquals(0, Streams.of(input).collect(Collectors.toList()).size());
assertEquals("For input string: \"4 \"", thrown.getMessage());
assertEquals(6, Streams.stream(input).collect(Collectors.toList()).size());
assertEquals(0, Streams.stream(input).collect(Collectors.toList()).size());
assertEquals(3, array.length);
assertEquals("2", array[0]);
assertEquals("3", array[1]);
assertEquals("1", array[2]);
assertEquals("", Stream.of().collect(JOINING_0));
assertEquals("1", Stream.of(_1L).collect(JOINING_0));
assertEquals("12", Stream.of(_1L, _2L).collect(JOINING_0));
assertEquals("123", Stream.of(_1L, _2L, _3L).collect(JOINING_0));
assertEquals("1null3", Stream.of(_1L, null, _3L).collect(JOINING_0));
assertEquals("12", Stream.of(new AtomicLong(1), new AtomicLong(2)).collect(JOINING_0));
assertEquals("12", Stream.of(new Fixture(1), new Fixture(2)).collect(JOINING_0));
assertEquals("", Stream.of().collect(JOINING_1));
assertEquals("1", Stream.of(_1L).collect(JOINING_1));
assertEquals("1-2", Stream.of(_1L, _2L).collect(JOINING_1));
assertEquals("1-2-3", Stream.of(_1L, _2L, _3L).collect(JOINING_1));
assertEquals("1-null-3", Stream.of(_1L, null, _3L).collect(JOINING_1));
assertEquals("1-2", Stream.of(new AtomicLong(1), new AtomicLong(2)).collect(JOINING_1));
assertEquals("1-2", Stream.of(new Fixture(1), new Fixture(2)).collect(JOINING_1));
assertEquals("<>", Stream.of().collect(JOINING_3));
assertEquals("<1>", Stream.of(_1L).collect(JOINING_3));
assertEquals("<1-2>", Stream.of(_1L, _2L).collect(JOINING_3));
assertEquals("<1-2-3>", Stream.of(_1L, _2L, _3L).collect(JOINING_3));
assertEquals("<1-null-3>", Stream.of(_1L, null, _3L).collect(JOINING_3));
assertEquals("<1-2>", Stream.of(new AtomicLong(1), new AtomicLong(2)).collect(JOINING_3));
assertEquals("<1-2>", Stream.of(new Fixture(1), new Fixture(2)).collect(JOINING_3));
assertEquals("<>", Stream.of().collect(JOINING_4));
assertEquals("<1>", Stream.of(_1L).collect(JOINING_4));
assertEquals("<1-2>", Stream.of(_1L, _2L).collect(JOINING_4));
assertEquals("<1-2-3>", Stream.of(_1L, _2L, _3L).collect(JOINING_4));
assertEquals("<1-null-3>", Stream.of(_1L, null, _3L).collect(JOINING_4));
assertEquals("<1-NUL-3>", Stream.of(_1L, null, _3L).collect(JOINING_4_NUL));
assertEquals("<1-2>", Stream.of(new AtomicLong(1), new AtomicLong(2)).collect(JOINING_4));
assertEquals("<1-2>", Stream.of(new Fixture(1), new Fixture(2)).collect(JOINING_4));
assertEquals("", Stream.of().collect(JOINING_0));
assertEquals("1", Stream.of("1").collect(JOINING_0));
assertEquals("12", Stream.of("1", "2").collect(JOINING_0));
assertEquals("123", Stream.of("1", "2", "3").collect(JOINING_0));
assertEquals("1null3", Stream.of("1", null, "3").collect(JOINING_0));
assertEquals("", Stream.of().collect(JOINING_1));
assertEquals("1", Stream.of("1").collect(JOINING_1));
assertEquals("1-2", Stream.of("1", "2").collect(JOINING_1));
assertEquals("1-2-3", Stream.of("1", "2", "3").collect(JOINING_1));
assertEquals("1-null-3", Stream.of("1", null, "3").collect(JOINING_1));
assertEquals("<>", Stream.of().collect(JOINING_3));
assertEquals("<1>", Stream.of("1").collect(JOINING_3));
assertEquals("<1-2>", Stream.of("1", "2").collect(JOINING_3));
assertEquals("<1-2-3>", Stream.of("1", "2", "3").collect(JOINING_3));
assertEquals("<1-null-3>", Stream.of("1", null, "3").collect(JOINING_3));
assertEquals("<>", Stream.of().collect(JOINING_4));
assertEquals("<1>", Stream.of("1").collect(JOINING_4));
assertEquals("<1-2>", Stream.of("1", "2").collect(JOINING_4));
assertEquals("<1-2-3>", Stream.of("1", "2", "3").collect(JOINING_4));
assertEquals("<1-null-3>", Stream.of("1", null, "3").collect(JOINING_4));
assertEquals("<1-NUL-3>", Stream.of("1", null, "3").collect(JOINING_4_NUL));
assertArrayEquals(new int[] {0, 1}, IntStreams.range(2).toArray());
assertArrayEquals(new int[] {0, 1, 2}, IntStreams.rangeClosed(2).toArray());
assertEquals(new TypeLiteral<String>() {}, new TypeLiteral<String>() {});
assertEquals(new TypeLiteral<List<String>>() {}, new TypeLiteral<List<String>>() {});
assertNotEquals(new TypeLiteral<String>() {}, new TypeLiteral<List<String>>() {});
assertEquals(a.getLeft(), b.getLeft());
assertEquals("Byte...", TestBean.varOverload((byte) 1, (byte) 2));
assertEquals("Short...", TestBean.varOverload((short) 1, (short) 2));
assertEquals("Integer...", TestBean.varOverload(1, 2));
assertEquals("Long...", TestBean.varOverload(1L, 2L));
assertEquals("Float...", TestBean.varOverload(1f, 2f));
assertEquals("Double...", TestBean.varOverload(1d, 2d));
assertEquals("Character...", TestBean.varOverload('a', 'b'));
assertEquals("String...", TestBean.varOverload("a", "b"));
assertEquals("Boolean...", TestBean.varOverload(true, false));
assertEquals("Object...", TestBean.varOverload(1, "s"));
assertEquals("Object...", TestBean.varOverload(1, true));
assertEquals("Object...", TestBean.varOverload(1.1, true));
assertEquals("Object...", TestBean.varOverload('c', true));
assertEquals("Number...", TestBean.varOverload(1, 1.1));
assertEquals("Number...", TestBean.varOverload(1, 1L));
assertEquals("Number...", TestBean.varOverload(1d, 1f));
assertEquals("Number...", TestBean.varOverload((short) 1, (byte) 1));
assertEquals("Object...", TestBean.varOverload(1, 'c'));
assertEquals("Object...", TestBean.varOverload('c', "s"));
assertEquals("Byte...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", (byte) 1, (byte) 2));
assertEquals("Short...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", (short) 1, (short) 2));
assertEquals("Integer...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1, 2));
assertEquals("Long...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1L, 2L));
assertEquals("Float...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1f, 2f));
assertEquals("Double...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1d, 2d));
assertEquals("Character...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 'a', 'b'));
assertEquals("String...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", "a", "b"));
assertEquals("Boolean...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", true, false));
assertEquals("Object...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1, "s"));
assertEquals("Object...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1, true));
assertEquals("Object...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1.1, true));
assertEquals("Object...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 'c', true));
assertEquals("Number...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1, 1.1));
assertEquals("Number...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1, 1L));
assertEquals("Number...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1d, 1f));
assertEquals("Number...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", (short) 1, (byte) 1));
assertEquals("Object...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1, 'c'));
assertEquals("Object...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 'c', "s"));
assertEquals("Object...", MethodUtils.invokeStaticMethod(TestBean.class, "varOverload",(Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));
assertEquals("Number...", MethodUtils.invokeStaticMethod(TestBean.class, "numOverload",(Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));
assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo",(Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));
assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo"));
assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo",(Object[]) null));
assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo",null, null));
assertEquals("foo(String)", MethodUtils.invokeMethod(testBean, "foo",""));
assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo",new Object()));
assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo",Boolean.TRUE));
assertEquals("foo(Integer)", MethodUtils.invokeMethod(testBean, "foo",NumberUtils.INTEGER_ONE));
assertEquals("foo(int)", MethodUtils.invokeMethod(testBean, "foo",NumberUtils.BYTE_ONE));
assertEquals("foo(long)", MethodUtils.invokeMethod(testBean, "foo",NumberUtils.LONG_ONE));
assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo",NumberUtils.DOUBLE_ONE));
assertEquals("foo(String...)", MethodUtils.invokeMethod(testBean, "foo","a", "b", "c"));
assertEquals("foo(String...)", MethodUtils.invokeMethod(testBean, "foo","a", "b", "c"));
assertEquals("foo(int, String...)", MethodUtils.invokeMethod(testBean, "foo",5, "a", "b", "c"));
assertEquals("foo(long...)", MethodUtils.invokeMethod(testBean, "foo",1L, 2L));
assertEquals("String...", MethodUtils.invokeMethod(testBean, "varOverload","a", null, "c"));
assertEquals("String...", MethodUtils.invokeMethod(testBean, "varOverload","a", "b", null));
assertEquals("Boolean...", MethodUtils.invokeMethod(testBean, "varOverload",new Object[] {null}));
assertEquals("Object...", MethodUtils.invokeMethod(testBean, "varOverload",(Object[]) null));
assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo",(Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));
assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo"));
assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo",(Object[]) null));
assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo",null, null));
assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean,"foo", ""));
assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean,"foo", new Object()));
assertEquals("foo(Integer)", MethodUtils.invokeExactMethod(testBean,"foo", NumberUtils.INTEGER_ONE));
assertEquals("foo(double)", MethodUtils.invokeExactMethod(testBean,"foo", new Object[]{NumberUtils.DOUBLE_ONE},new Class[]{Double.TYPE}));
assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class,"bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));
assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class,"bar", (Object[]) null));
assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class,"bar", null, null));
assertEquals("bar(String)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", ""));
assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", new Object()));
assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", Boolean.TRUE));
assertEquals("bar(Integer)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE));
assertEquals("bar(int)", MethodUtils.invokeStaticMethod(TestBean.class,"bar", NumberUtils.BYTE_ONE));
assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.DOUBLE_ONE));
assertEquals("bar(String...)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", "a", "b"));
assertEquals("bar(long...)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", 1L, 2L));
assertEquals("bar(int, String...)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE, "a", "b"));
assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class,"bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));
assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class,"bar", (Object[]) null));
assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class,"bar", null, null));
assertEquals("bar(String)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", ""));
assertEquals("bar(Object)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object()));
assertEquals("bar(Integer)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE));
assertEquals("bar(double)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object[]{NumberUtils.DOUBLE_ONE},new Class[]{Double.TYPE}));
assertNotSame(accessibleMethod, method);
assertSame(Mutable.class, accessibleMethod.getDeclaringClass());
assertSame(Mutable.class, accessibleMethod.getDeclaringClass());
assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(MutableObject.class.getMethod("getValue",ArrayUtils.EMPTY_CLASS_ARRAY)).getDeclaringClass());
assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(MutableObject.class, "getValue", ArrayUtils.EMPTY_CLASS_ARRAY).getDeclaringClass());
assertEquals(md.declaringClass, m.getDeclaringClass());
assertEquals(md.name, m.getName());
assertEquals(md.parameterTypes.length, m.getParameterTypes().length);
assertEquals(md.declaringClass, m.getDeclaringClass());
assertEquals(md.name, m.getName());
assertEquals(md.parameterTypes.length, m.getParameterTypes().length);
assertArrayEquals(new Method[0], MethodUtils.getMethodsWithAnnotation(Object.class, Annotated.class));
assertThat(methodsWithAnnotation, hasItemInArray(MethodUtilsTest.class.getMethod("testGetMethodsWithAnnotation")));
assertThat(methodsWithAnnotation, hasItemInArray(MethodUtilsTest.class.getMethod("testGetMethodsListWithAnnotation")));
assertArrayEquals(new Method[0], MethodUtils.getMethodsWithAnnotation(Object.class, Annotated.class,true, true));
assertEquals("PublicChild", methodsWithAnnotation[0].getDeclaringClass().getSimpleName());
assertEquals("PublicChild", methodsWithAnnotation[1].getDeclaringClass().getSimpleName());
assertEquals("Foo.doIt",methodsWithAnnotation[2].getDeclaringClass().getSimpleName() + '.' +methodsWithAnnotation[2].getName());
assertEquals("Parent.parentProtectedAnnotatedMethod",methodsWithAnnotation[3].getDeclaringClass().getSimpleName() + '.' +methodsWithAnnotation[3].getName());
assertArrayEquals(new Method[0], MethodUtils.getMethodsWithAnnotation(Object.class, Annotated.class,false, true));
assertEquals("PublicChild", methodsWithAnnotation[0].getDeclaringClass().getSimpleName());
assertEquals("PublicChild", methodsWithAnnotation[1].getDeclaringClass().getSimpleName());
assertArrayEquals(new Method[0], MethodUtils.getMethodsWithAnnotation(Object.class, Annotated.class,true, false));
assertEquals("PublicChild.publicAnnotatedMethod",methodsWithAnnotation[0].getDeclaringClass().getSimpleName() + '.' +methodsWithAnnotation[0].getName());
assertEquals("Foo.doIt",methodsWithAnnotation[1].getDeclaringClass().getSimpleName() + '.' +methodsWithAnnotation[1].getName());
assertArrayEquals(new Method[0], MethodUtils.getMethodsWithAnnotation(Object.class, Annotated.class,false, false));
assertEquals("PublicChild.publicAnnotatedMethod",methodsWithAnnotation[0].getDeclaringClass().getSimpleName() + '.' +methodsWithAnnotation[0].getName());
assertEquals(0, MethodUtils.getMethodsListWithAnnotation(Object.class, Annotated.class).size());
assertThat(methodWithAnnotation, hasItems(MethodUtilsTest.class.getMethod("testGetMethodsWithAnnotation"),MethodUtilsTest.class.getMethod("testGetMethodsListWithAnnotation")));
assertArrayEquals(actualTypes, m.getParameterTypes(), toString(m.getParameterTypes()) + " not equals " + toString(actualTypes));
assertEquals("privateStringStuff()", MethodUtils.invokeMethod(testBean, true, "privateStringStuff"));
assertEquals("privateStringStuff(Integer)", MethodUtils.invokeMethod(testBean, true, "privateStringStuff", 5));
assertEquals("privateStringStuff(double)", MethodUtils.invokeMethod(testBean, true, "privateStringStuff", 5.0d));
assertEquals("privateStringStuff(String)", MethodUtils.invokeMethod(testBean, true, "privateStringStuff", "Hi There"));
assertEquals("privateStringStuff(Object)", MethodUtils.invokeMethod(testBean, true, "privateStringStuff", new Date()));
assertEquals(-1, distanceMethod.invoke(null, new Class[]{String.class}, new Class[]{Date.class}));
assertEquals(0, distanceMethod.invoke(null, new Class[]{Date.class}, new Class[]{Date.class}));
assertEquals(1, distanceMethod.invoke(null, new Class[]{Integer.class}, new Class[]{ClassUtils.wrapperToPrimitive(Integer.class)}));
assertEquals(2, distanceMethod.invoke(null, new Class[]{Integer.class}, new Class[]{Object.class}));
assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod"),GetMatchingMethodClass.class.getMethod("testMethod"));
assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod", Long.TYPE),GetMatchingMethodClass.class.getMethod("testMethod", Long.TYPE));
assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod", Long.class),GetMatchingMethodClass.class.getMethod("testMethod", Long.class));
assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod", (Class<?>) null),GetMatchingMethodClass.class.getMethod("testMethod", Long.class));
assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod3", Long.TYPE, Long.class),GetMatchingMethodClass.class.getMethod("testMethod3", Long.TYPE, Long.class));
assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod3", Long.class, Long.TYPE),GetMatchingMethodClass.class.getMethod("testMethod3", Long.class, Long.TYPE));
assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod3", null, Long.TYPE),GetMatchingMethodClass.class.getMethod("testMethod3", Long.class, Long.TYPE));
assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod3", Long.TYPE, null),GetMatchingMethodClass.class.getMethod("testMethod3", Long.TYPE, Long.class));
assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class,(Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString());
assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class,(Object[]) null).toString());
assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString());
assertEquals("(String)", ConstructorUtils.invokeConstructor(TestBean.class, "").toString());
assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString());
assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString());
assertEquals("(Integer)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString());
assertEquals("(int)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toString());
assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).toString());
assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).toString());
assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString());
assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) null).toString());
assertEquals("(String)", ConstructorUtils.invokeExactConstructor(TestBean.class, "").toString());
assertEquals("(Object)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object()).toString());
assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString());
assertEquals("(double)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE },new Class[] { Double.TYPE }).toString());
assertArrayEquals(actualTypes, c.getParameterTypes(), toString(c.getParameterTypes()) + " not equals " + toString(actualTypes));
assertArrayEquals(new String[]{"2", "3"}, testBean.varArgs);
assertEquals(1, InheritanceUtils.distance(AnotherChild.class, AnotherParent.class));
assertEquals(1, InheritanceUtils.distance(Grandchild.class, AnotherChild.class));
assertEquals(2, InheritanceUtils.distance(Grandchild.class, AnotherParent.class));
assertEquals(3, InheritanceUtils.distance(Grandchild.class, Object.class));
assertEquals(0, InheritanceUtils.distance(AnotherChild.class, AnotherChild.class));
assertEquals(0, InheritanceUtils.distance(Object.class, Object.class));
assertEquals(-1, InheritanceUtils.distance(null, Object.class));
assertEquals(-1, InheritanceUtils.distance(Object.class, null));
assertEquals(-1, InheritanceUtils.distance(null, null));
assertEquals(-1, InheritanceUtils.distance(Boolean.class, String.class));
assertEquals(-1, InheritanceUtils.distance(Object.class, Grandchild.class));
assertEquals(Foo.class, FieldUtils.getField(PublicChild.class, "VALUE").getDeclaringClass());
assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "s").getDeclaringClass());
assertEquals(Foo.class, FieldUtils.getField(PubliclyShadowedChild.class, "VALUE").getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "s").getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "b").getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "i").getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "d").getDeclaringClass());
assertEquals(Foo.class, FieldUtils.getField(PrivatelyShadowedChild.class, "VALUE").getDeclaringClass());
assertEquals(parentClass, FieldUtils.getField(PrivatelyShadowedChild.class, "s").getDeclaringClass());
assertEquals(PublicChild.class, FieldUtils.getField(PublicChild.class, "VALUE", true).getDeclaringClass());
assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "s", true).getDeclaringClass());
assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "b", true).getDeclaringClass());
assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "i", true).getDeclaringClass());
assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "d", true).getDeclaringClass());
assertEquals(Foo.class, FieldUtils.getField(PubliclyShadowedChild.class, "VALUE", true).getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "s", true).getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "b", true).getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "i", true).getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "d", true).getDeclaringClass());
assertEquals(Foo.class, FieldUtils.getField(PrivatelyShadowedChild.class, "VALUE", true).getDeclaringClass());
assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "s", true).getDeclaringClass());
assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "b", true).getDeclaringClass());
assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "i", true).getDeclaringClass());
assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "d", true).getDeclaringClass());
assertArrayEquals(new Field[0], FieldUtils.getAllFields(Object.class));
assertArrayEquals(fieldsNumber, sort(FieldUtils.getAllFields(Number.class)));
assertArrayEquals(sort(ArrayUtils.addAll(fieldsInteger, fieldsNumber)), sort(FieldUtils.getAllFields(Integer.class)));
assertEquals(expected, allFields.length, Arrays.toString(allFields));
assertEquals(0, FieldUtils.getAllFieldsList(Object.class).size());
assertEquals(fieldsNumber, FieldUtils.getAllFieldsList(Number.class));
assertEquals(new HashSet<>(allFieldsInteger), new HashSet<>(FieldUtils.getAllFieldsList(Integer.class)));
assertEquals(expected, allFields.size(), allFields.toString());
assertArrayEquals(new Field[0], FieldUtils.getFieldsWithAnnotation(Object.class, Annotated.class));
assertArrayEquals(annotatedFields,sort(FieldUtils.getFieldsWithAnnotation(FieldUtilsTest.class, Annotated.class)));
assertEquals(0, FieldUtils.getFieldsListWithAnnotation(Object.class, Annotated.class).size());
assertEquals(annotatedFields.size(), fieldUtilsTestAnnotatedFields.size());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "s").getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "b").getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "i").getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "d").getDeclaringClass());
assertEquals(PublicChild.class, FieldUtils.getDeclaredField(PublicChild.class, "VALUE", true).getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "s", true).getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "b", true).getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "i", true).getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "d", true).getDeclaringClass());
assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "s", true).getDeclaringClass());
assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "b", true).getDeclaringClass());
assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "i", true).getDeclaringClass());
assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "d", true).getDeclaringClass());
assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE")));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE")));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE")));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(PublicChild.class, "VALUE")));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE"));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE"));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE"));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(PublicChild.class, "VALUE"));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE", true));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE", true));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE", true));
assertEquals("child", FieldUtils.readStaticField(PublicChild.class, "VALUE", true));
assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, "VALUE"));
assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, "VALUE", true));
assertEquals("child", FieldUtils.readDeclaredStaticField(PublicChild.class, "VALUE", true));
assertEquals("s", FieldUtils.readField(parentS, publicChild));
assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild));
assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild));
assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild));
assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild));
assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild));
assertEquals(I0, FieldUtils.readField(parentI, publicChild));
assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild));
assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild));
assertEquals(D0, FieldUtils.readField(parentD, publicChild));
assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild));
assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild));
assertEquals("s", FieldUtils.readField(parentS, publicChild, true));
assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild, true));
assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild, true));
assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild, true));
assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild, true));
assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild, true));
assertEquals(I0, FieldUtils.readField(parentI, publicChild, true));
assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild, true));
assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild, true));
assertEquals(D0, FieldUtils.readField(parentD, publicChild, true));
assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild, true));
assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild, true));
assertEquals("s", FieldUtils.readField(publicChild, "s"));
assertEquals("ss", FieldUtils.readField(publiclyShadowedChild, "s"));
assertEquals("s", FieldUtils.readField(privatelyShadowedChild, "s"));
assertEquals(Boolean.TRUE, FieldUtils.readField(publiclyShadowedChild, "b"));
assertEquals(I1, FieldUtils.readField(publiclyShadowedChild, "i"));
assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, "d"));
assertEquals("s", FieldUtils.readField(publicChild, "s", true));
assertEquals("ss", FieldUtils.readField(publiclyShadowedChild, "s", true));
assertEquals("ss", FieldUtils.readField(privatelyShadowedChild, "s", true));
assertEquals(Boolean.FALSE, FieldUtils.readField(publicChild, "b", true));
assertEquals(Boolean.TRUE, FieldUtils.readField(publiclyShadowedChild, "b", true));
assertEquals(Boolean.TRUE, FieldUtils.readField(privatelyShadowedChild, "b", true));
assertEquals(I0, FieldUtils.readField(publicChild, "i", true));
assertEquals(I1, FieldUtils.readField(publiclyShadowedChild, "i", true));
assertEquals(I1, FieldUtils.readField(privatelyShadowedChild, "i", true));
assertEquals(D0, FieldUtils.readField(publicChild, "d", true));
assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, "d", true));
assertEquals(D1, FieldUtils.readField(privatelyShadowedChild, "d", true));
assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s"));
assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b"));
assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i"));
assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d"));
assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s", true));
assertEquals("ss", FieldUtils.readDeclaredField(privatelyShadowedChild, "s", true));
assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b", true));
assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b", true));
assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i", true));
assertEquals(I1, FieldUtils.readDeclaredField(privatelyShadowedChild, "i", true));
assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d", true));
assertEquals(D1, FieldUtils.readDeclaredField(privatelyShadowedChild, "d", true));
assertEquals("new", StaticContainer.mutablePublic);
assertEquals("new", StaticContainer.mutablePublic);
assertEquals("new", StaticContainer.getMutableProtected());
assertEquals("new", StaticContainer.getMutablePackage());
assertEquals("new", StaticContainer.getMutablePrivate());
assertEquals("new", StaticContainer.mutablePublic);
assertEquals("new", StaticContainer.mutablePublic);
assertEquals("new", StaticContainer.getMutableProtected());
assertEquals("new", StaticContainer.getMutablePackage());
assertEquals("new", StaticContainer.getMutablePrivate());
assertEquals("new", StaticContainer.mutablePublic);
assertEquals("new", StaticContainer.mutablePublic);
assertEquals("new", StaticContainer.getMutableProtected());
assertEquals("new", StaticContainer.getMutablePackage());
assertEquals("new", StaticContainer.getMutablePrivate());
assertEquals("S", field.get(publicChild));
assertEquals("S", field.get(publicChild));
assertEquals(Boolean.TRUE, field.get(publicChild));
assertEquals(Integer.valueOf(Integer.MAX_VALUE), field.get(publicChild));
assertEquals(Double.valueOf(Double.MAX_VALUE), field.get(publicChild));
assertEquals("S", FieldUtils.readField(publicChild, "s"));
assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s"));
assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b"));
assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i"));
assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d"));
assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s"));
assertEquals("S", FieldUtils.readField(publicChild, "s", true));
assertEquals(Boolean.TRUE, FieldUtils.readField(publicChild, "b", true));
assertEquals(Integer.valueOf(1), FieldUtils.readField(publicChild, "i", true));
assertEquals(Double.valueOf(1.0), FieldUtils.readField(publicChild, "d", true));
assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s", true));
assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b", true));
assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i", true));
assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d", true));
assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s", true));
assertEquals(Boolean.FALSE, FieldUtils.readField(privatelyShadowedChild, "b", true));
assertEquals(Integer.valueOf(0), FieldUtils.readField(privatelyShadowedChild, "i", true));
assertEquals(Double.valueOf(0.0), FieldUtils.readField(privatelyShadowedChild, "d", true));
assertEquals("S", FieldUtils.readDeclaredField(publiclyShadowedChild, "s"));
assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b"));
assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, "i"));
assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, "d"));
assertEquals("S", FieldUtils.readDeclaredField(publiclyShadowedChild, "s", true));
assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b", true));
assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, "i", true));
assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, "d", true));
assertEquals("S", FieldUtils.readDeclaredField(privatelyShadowedChild, "s", true));
assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b", true));
assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(privatelyShadowedChild, "i", true));
assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(privatelyShadowedChild, "d", true));
public void delegateBooleanAssertion(final Type[] types, final int i2, final int i1, final boolean expected) {final Type type1 = types[i1];
assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns.get(treeSetTypeVar));
assertEquals("java.lang.Comparable<? extends java.lang.Integer>[]", actual.toString());
assertEquals(types[0], TypeUtils.getArrayComponentType(types[7]));
assertEquals(types[1], TypeUtils.getArrayComponentType(types[8]));
assertEquals(types[2], TypeUtils.getArrayComponentType(types[9]));
assertEquals(types[3], TypeUtils.getArrayComponentType(types[10]));
assertEquals(types[4], TypeUtils.getArrayComponentType(types[11]));
assertEquals(types[5], TypeUtils.getArrayComponentType(types[12]));
assertEquals(types[6], TypeUtils.getArrayComponentType(types[13]));
assertEquals(boolean.class, TypeUtils.getArrayComponentType(boolean[].class));
assertEquals(byte.class, TypeUtils.getArrayComponentType(byte[].class));
assertEquals(short.class, TypeUtils.getArrayComponentType(short[].class));
assertEquals(int.class, TypeUtils.getArrayComponentType(int[].class));
assertEquals(char.class, TypeUtils.getArrayComponentType(char[].class));
assertEquals(long.class, TypeUtils.getArrayComponentType(long[].class));
assertEquals(float.class, TypeUtils.getArrayComponentType(float[].class));
assertEquals(double.class, TypeUtils.getArrayComponentType(double[].class));
assertEquals(GenericParent.class, TypeUtils.getRawType(stringParentFieldType, null));
assertEquals(GenericParent.class, TypeUtils.getRawType(integerParentFieldType,null));
assertEquals(List.class, TypeUtils.getRawType(foosFieldType, null));
assertEquals(String.class, TypeUtils.getRawType(genericParentT,StringParameterizedChild.class));
assertEquals(String.class, TypeUtils.getRawType(genericParentT,stringParentFieldType));
assertEquals(Foo.class, TypeUtils.getRawType(Iterable.class.getTypeParameters()[0],foosFieldType));
assertEquals(Foo.class, TypeUtils.getRawType(List.class.getTypeParameters()[0],foosFieldType));
assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class.getDeclaredField("barParents").getGenericType(), null));
assertEquals(Integer.class, typeVarAssigns.get(treeSetTypeVar),"Type argument of Comparable from Integer: " + typeArg);
assertEquals(Integer.class, typeVarAssigns.get(treeSetTypeVar),"Type argument of Comparable from int: " + typeArg);
assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));
assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));
assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));
assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));
assertEquals(Number.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));
assertEquals(Number.class, typeVarAssigns.get(This.class.getTypeParameters()[1]));
assertEquals(getClass().getTypeParameters()[0], typeVarAssigns.get(getClass().getTypeParameters()[0]));
assertEquals(getClass().getTypeParameters()[0], typeVarAssigns.get(Other.class.getTypeParameters()[0]));
delegateBooleanAssertion(types, 0, 0, true);
delegateBooleanAssertion(types, 0, 1, true);
delegateBooleanAssertion(types, 1, 0, true);
delegateBooleanAssertion(types, 0, 2, true);
delegateBooleanAssertion(types, 2, 0, true);
delegateBooleanAssertion(types, 0, 3, true);
delegateBooleanAssertion(types, 3, 0, true);
delegateBooleanAssertion(types, 0, 4, true);
delegateBooleanAssertion(types, 4, 0, true);
delegateBooleanAssertion(types, 0, 5, true);
delegateBooleanAssertion(types, 5, 0, true);
delegateBooleanAssertion(types, 0, 6, true);
delegateBooleanAssertion(types, 6, 0, true);
delegateBooleanAssertion(types, 1, 1, true);
delegateBooleanAssertion(types, 1, 2, true);
delegateBooleanAssertion(types, 2, 1, false);
delegateBooleanAssertion(types, 1, 3, true);
delegateBooleanAssertion(types, 3, 1, false);
delegateBooleanAssertion(types, 1, 4, false);
delegateBooleanAssertion(types, 4, 1, false);
delegateBooleanAssertion(types, 1, 5, false);
delegateBooleanAssertion(types, 5, 1, false);
delegateBooleanAssertion(types, 1, 6, true);
delegateBooleanAssertion(types, 6, 1, false);
delegateBooleanAssertion(types, 2, 2, true);
delegateBooleanAssertion(types, 2, 3, false);
delegateBooleanAssertion(types, 3, 2, true);
delegateBooleanAssertion(types, 2, 4, false);
delegateBooleanAssertion(types, 4, 2, true);
delegateBooleanAssertion(types, 2, 5, false);
delegateBooleanAssertion(types, 5, 2, true);
delegateBooleanAssertion(types, 2, 6, false);
delegateBooleanAssertion(types, 6, 2, true);
delegateBooleanAssertion(types, 3, 3, true);
delegateBooleanAssertion(types, 3, 4, false);
delegateBooleanAssertion(types, 4, 3, false);
delegateBooleanAssertion(types, 3, 5, false);
delegateBooleanAssertion(types, 5, 3, false);
delegateBooleanAssertion(types, 3, 6, true);
delegateBooleanAssertion(types, 6, 3, false);
delegateBooleanAssertion(types, 4, 4, true);
delegateBooleanAssertion(types, 4, 5, true);
delegateBooleanAssertion(types, 5, 4, false);
delegateBooleanAssertion(types, 4, 6, true);
delegateBooleanAssertion(types, 6, 4, false);
delegateBooleanAssertion(types, 5, 5, true);
delegateBooleanAssertion(types, 5, 6, false);
delegateBooleanAssertion(types, 6, 5, false);
delegateBooleanAssertion(types, 6, 6, true);
delegateBooleanAssertion(types, 7, 7, true);
delegateBooleanAssertion(types, 7, 8, true);
delegateBooleanAssertion(types, 8, 7, true);
delegateBooleanAssertion(types, 7, 9, true);
delegateBooleanAssertion(types, 9, 7, true);
delegateBooleanAssertion(types, 7, 10, true);
delegateBooleanAssertion(types, 10, 7, true);
delegateBooleanAssertion(types, 7, 11, true);
delegateBooleanAssertion(types, 11, 7, true);
delegateBooleanAssertion(types, 7, 12, true);
delegateBooleanAssertion(types, 12, 7, true);
delegateBooleanAssertion(types, 7, 13, true);
delegateBooleanAssertion(types, 13, 7, true);
delegateBooleanAssertion(types, 8, 8, true);
delegateBooleanAssertion(types, 8, 9, true);
delegateBooleanAssertion(types, 9, 8, false);
delegateBooleanAssertion(types, 8, 10, true);
delegateBooleanAssertion(types, 10, 8, false);
delegateBooleanAssertion(types, 8, 11, false);
delegateBooleanAssertion(types, 11, 8, false);
delegateBooleanAssertion(types, 8, 12, false);
delegateBooleanAssertion(types, 12, 8, false);
delegateBooleanAssertion(types, 8, 13, true);
delegateBooleanAssertion(types, 13, 8, false);
delegateBooleanAssertion(types, 9, 9, true);
delegateBooleanAssertion(types, 9, 10, false);
delegateBooleanAssertion(types, 10, 9, true);
delegateBooleanAssertion(types, 9, 11, false);
delegateBooleanAssertion(types, 11, 9, true);
delegateBooleanAssertion(types, 9, 12, false);
delegateBooleanAssertion(types, 12, 9, true);
delegateBooleanAssertion(types, 9, 13, false);
delegateBooleanAssertion(types, 13, 9, true);
delegateBooleanAssertion(types, 10, 10, true);
delegateBooleanAssertion(types, 10, 11, false);
delegateBooleanAssertion(types, 11, 10, false);
delegateBooleanAssertion(types, 10, 12, false);
delegateBooleanAssertion(types, 12, 10, false);
delegateBooleanAssertion(types, 10, 13, true);
delegateBooleanAssertion(types, 13, 10, false);
delegateBooleanAssertion(types, 11, 11, true);
delegateBooleanAssertion(types, 11, 12, true);
delegateBooleanAssertion(types, 12, 11, false);
delegateBooleanAssertion(types, 11, 13, true);
delegateBooleanAssertion(types, 13, 11, false);
delegateBooleanAssertion(types, 12, 12, true);
delegateBooleanAssertion(types, 12, 13, false);
delegateBooleanAssertion(types, 13, 12, false);
delegateBooleanAssertion(types, 13, 13, true);
assertEquals(rawClass, paramType.getRawType());
assertEquals(typeArgClass, paramType.getActualTypeArguments()[0]);
assertEquals(rawClass, paramType.getRawType());
assertEquals(typeArgClass, paramType.getActualTypeArguments()[0]);
assertEquals(rawClass, paramType.getRawType());
assertEquals(typeArgClass, paramType.getActualTypeArguments()[0]);
assertEquals(rawClass, paramType.getRawType());
assertEquals(typeArgClass, paramType.getActualTypeArguments()[0]);
assertEquals("T extends java.lang.Enum<T>", TypeUtils.toString(method.getGenericReturnType()));
assertArrayEquals(expectedArray, TypeUtils.normalizeUpperBounds(typeArray));
assertEquals(String.format("? super %s", java.sql.Date.class.getName()), TypeUtils.toString(lowerBounded));
assertEquals(String.format("? super %s", java.sql.Date.class.getName()), lowerBounded.toString());
assertEquals(String.format("? super %s", iterableT0.getName()), TypeUtils.toString(lowerTypeVariable));
assertEquals(String.format("? super %s", iterableT0.getName()), lowerTypeVariable.toString());
assertEquals("java.lang.Comparable<java.lang.String>", stringComparableType.toString());
assertEquals(TypeUtils.parameterize(ArrayList.class, String.class), unrolled);
assertEquals(getClass().getName() + ":B", TypeUtils.toLongString(getClass().getTypeParameters()[0]));
assertEquals("int[]", TypeUtils.toString(int[].class));
assertEquals("java.lang.Integer[]", TypeUtils.toString(Integer[].class));
assertEquals("java.util.List<java.lang.String>[]", TypeUtils.toString(stringListField.getGenericType()));
assertArrayEquals(new Type[] { Object.class }, TypeUtils.getImplicitUpperBounds(unbounded));
assertArrayEquals(new Type[] { null }, TypeUtils.getImplicitLowerBounds(unbounded));
assertEquals("?", TypeUtils.toString(unbounded));
assertEquals("?", unbounded.toString());
assertEquals(String.format("? extends %s", String.class.getName()), TypeUtils.toString(simpleWildcard));
assertEquals(String.format("? extends %s", String.class.getName()), simpleWildcard.toString());
assertEquals(String.class, TypeUtils.wrap(String.class).getType());
assertEquals("a", rangea.toString());
assertEquals("^a", rangea.toString());
assertEquals("a", rangea.toString());
assertEquals('e', rangea.getEnd());
assertEquals("a-e", rangea.toString());
assertEquals('e', rangea.getEnd());
assertEquals("a-e", rangea.toString());
assertEquals("^a", rangea.toString());
assertEquals('e', rangea.getEnd());
assertEquals("^a-e", rangea.toString());
assertEquals('e', rangea.getEnd());
assertEquals("^a-e", rangea.toString());
assertEquals(rangeae, rangeae);
assertEquals(rangeae, CharRange.isIn('a', 'e'));
assertNotEquals(rangea, rangeae);
assertNotEquals(rangeae, rangea);
assertNotEquals(rangeae, rangenotbf);
assertNotEquals(rangenotbf, rangeae);
assertEquals(rangea.hashCode(), rangea.hashCode());
assertEquals(rangea.hashCode(), CharRange.is('a').hashCode());
assertEquals(rangeae.hashCode(), rangeae.hashCode());
assertEquals(rangeae.hashCode(), CharRange.isIn('a', 'e').hashCode());
assertEquals(rangenotbf.hashCode(), rangenotbf.hashCode());
assertEquals(rangenotbf.hashCode(), CharRange.isIn('b', 'f').hashCode());
assertNotEquals(rangea.hashCode(), rangeae.hashCode());
assertNotEquals(rangea.hashCode(), rangenotbf.hashCode());
assertNotEquals(rangeae.hashCode(), rangea.hashCode());
assertNotEquals(rangeae.hashCode(), rangenotbf.hashCode());
assertNotEquals(rangenotbf.hashCode(), rangea.hashCode());
assertNotEquals(rangenotbf.hashCode(), rangeae.hashCode());
assertEquals("range", e.getMessage());
assertEquals(Character.valueOf('a'), aIt.next());
assertEquals(Character.valueOf('a'), adIt.next());
assertEquals(Character.valueOf('b'), adIt.next());
assertEquals(Character.valueOf('c'), adIt.next());
assertEquals(Character.valueOf('d'), adIt.next());
assertEquals(Character.valueOf((char) 0), notFirstIt.next());
assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next());
assertEquals(range, SerializationUtils.clone(range));
assertEquals(range, SerializationUtils.clone(range));
assertEquals(range, SerializationUtils.clone(range));
assertEquals("any", RegExUtils.removeAll("any", (Pattern) null));
assertEquals("any", RegExUtils.removeAll("any", Pattern.compile("")));
assertEquals("", RegExUtils.removeAll("any", Pattern.compile(".*")));
assertEquals("", RegExUtils.removeAll("any", Pattern.compile(".+")));
assertEquals("", RegExUtils.removeAll("any", Pattern.compile(".?")));
assertEquals("A\nB", RegExUtils.removeAll("A<__>\n<__>B", Pattern.compile("<.*>")));
assertEquals("AB", RegExUtils.removeAll("A<__>\n<__>B", Pattern.compile("(?s)<.*>")));
assertEquals("ABC123", RegExUtils.removeAll("ABCabc123abc", Pattern.compile("[a-z]")));
assertEquals("AB", RegExUtils.removeAll("A<__>\n<__>B", Pattern.compile("<.*>", Pattern.DOTALL)));
assertEquals("AB", RegExUtils.removeAll("A<__>\\n<__>B", Pattern.compile("<.*>")));
assertEquals("", RegExUtils.removeAll("<A>x\\ny</A>", Pattern.compile("<A>.*</A>")));
assertEquals("", RegExUtils.removeAll("<A>\nxy\n</A>", Pattern.compile("<A>.*</A>", Pattern.DOTALL)));
assertEquals("any", RegExUtils.removeAll("any", (String) null));
assertEquals("any", RegExUtils.removeAll("any", ""));
assertEquals("", RegExUtils.removeAll("any", ".*"));
assertEquals("", RegExUtils.removeAll("any", ".+"));
assertEquals("", RegExUtils.removeAll("any", ".?"));
assertEquals("A\nB", RegExUtils.removeAll("A<__>\n<__>B", "<.*>"));
assertEquals("AB", RegExUtils.removeAll("A<__>\n<__>B", "(?s)<.*>"));
assertEquals("ABC123", RegExUtils.removeAll("ABCabc123abc", "[a-z]"));
assertEquals("any", RegExUtils.removeFirst("any", (Pattern) null));
assertEquals("any", RegExUtils.removeFirst("any", Pattern.compile("")));
assertEquals("", RegExUtils.removeFirst("any", Pattern.compile(".*")));
assertEquals("", RegExUtils.removeFirst("any", Pattern.compile(".+")));
assertEquals("bc", RegExUtils.removeFirst("abc", Pattern.compile(".?")));
assertEquals("A\n<__>B", RegExUtils.removeFirst("A<__>\n<__>B", Pattern.compile("<.*>")));
assertEquals("AB", RegExUtils.removeFirst("A<__>\n<__>B", Pattern.compile("(?s)<.*>")));
assertEquals("ABCbc123", RegExUtils.removeFirst("ABCabc123", Pattern.compile("[a-z]")));
assertEquals("ABC123abc", RegExUtils.removeFirst("ABCabc123abc", Pattern.compile("[a-z]+")));
assertEquals("any", RegExUtils.removeFirst("any", (String) null));
assertEquals("any", RegExUtils.removeFirst("any", ""));
assertEquals("", RegExUtils.removeFirst("any", ".*"));
assertEquals("", RegExUtils.removeFirst("any", ".+"));
assertEquals("bc", RegExUtils.removeFirst("abc", ".?"));
assertEquals("A\n<__>B", RegExUtils.removeFirst("A<__>\n<__>B", "<.*>"));
assertEquals("AB", RegExUtils.removeFirst("A<__>\n<__>B", "(?s)<.*>"));
assertEquals("ABCbc123", RegExUtils.removeFirst("ABCabc123", "[a-z]"));
assertEquals("ABC123abc", RegExUtils.removeFirst("ABCabc123abc", "[a-z]+"));
assertEquals("any", RegExUtils.removePattern("any", (String) null));
assertEquals("", RegExUtils.removePattern("", ""));
assertEquals("", RegExUtils.removePattern("", ".*"));
assertEquals("", RegExUtils.removePattern("", ".+"));
assertEquals("AB", RegExUtils.removePattern("A<__>\n<__>B", "<.*>"));
assertEquals("AB", RegExUtils.removePattern("A<__>\\n<__>B", "<.*>"));
assertEquals("", RegExUtils.removePattern("<A>x\\ny</A>", "<A>.*</A>"));
assertEquals("", RegExUtils.removePattern("<A>\nxy\n</A>", "<A>.*</A>"));
assertEquals("ABC123", RegExUtils.removePattern("ABCabc123", "[a-z]"));
assertEquals("any", RegExUtils.replaceAll("any", (Pattern) null, ""));
assertEquals("any", RegExUtils.replaceAll("any", Pattern.compile(""), null));
assertEquals("zzz", RegExUtils.replaceAll("", Pattern.compile(""), "zzz"));
assertEquals("zzz", RegExUtils.replaceAll("", Pattern.compile(".*"), "zzz"));
assertEquals("", RegExUtils.replaceAll("", Pattern.compile(".+"), "zzz"));
assertEquals("ZZaZZbZZcZZ", RegExUtils.replaceAll("abc", Pattern.compile(""), "ZZ"));
assertEquals("z\nz", RegExUtils.replaceAll("<__>\n<__>", Pattern.compile("<.*>"), "z"));
assertEquals("z", RegExUtils.replaceAll("<__>\n<__>", Pattern.compile("(?s)<.*>"), "z"));
assertEquals("z", RegExUtils.replaceAll("<__>\n<__>", Pattern.compile("<.*>", Pattern.DOTALL), "z"));
assertEquals("z", RegExUtils.replaceAll("<__>\\n<__>", Pattern.compile("<.*>"), "z"));
assertEquals("X", RegExUtils.replaceAll("<A>\nxy\n</A>", Pattern.compile("<A>.*</A>", Pattern.DOTALL), "X"));
assertEquals("ABC___123", RegExUtils.replaceAll("ABCabc123", Pattern.compile("[a-z]"), "_"));
assertEquals("ABC_123", RegExUtils.replaceAll("ABCabc123", Pattern.compile("[^A-Z0-9]+"), "_"));
assertEquals("ABC123", RegExUtils.replaceAll("ABCabc123", Pattern.compile("[^A-Z0-9]+"), ""));
assertEquals("Lorem_ipsum_dolor_sit",RegExUtils.replaceAll("Lorem ipsum  dolor   sit", Pattern.compile("( +)([a-z]+)"), "_$2"));
assertEquals("any", RegExUtils.replaceAll("any", (String) null, ""));
assertEquals("any", RegExUtils.replaceAll("any", "", null));
assertEquals("zzz", RegExUtils.replaceAll("", "", "zzz"));
assertEquals("zzz", RegExUtils.replaceAll("", ".*", "zzz"));
assertEquals("", RegExUtils.replaceAll("", ".+", "zzz"));
assertEquals("ZZaZZbZZcZZ", RegExUtils.replaceAll("abc", "", "ZZ"));
assertEquals("z\nz", RegExUtils.replaceAll("<__>\n<__>", "<.*>", "z"));
assertEquals("z", RegExUtils.replaceAll("<__>\n<__>", "(?s)<.*>", "z"));
assertEquals("ABC___123", RegExUtils.replaceAll("ABCabc123", "[a-z]", "_"));
assertEquals("ABC_123", RegExUtils.replaceAll("ABCabc123", "[^A-Z0-9]+", "_"));
assertEquals("ABC123", RegExUtils.replaceAll("ABCabc123", "[^A-Z0-9]+", ""));
assertEquals("Lorem_ipsum_dolor_sit", RegExUtils.replaceAll("Lorem ipsum  dolor   sit", "( +)([a-z]+)", "_$2"));
assertEquals("any", RegExUtils.replaceFirst("any", (Pattern) null, ""));
assertEquals("any", RegExUtils.replaceFirst("any", Pattern.compile(""), null));
assertEquals("zzz", RegExUtils.replaceFirst("", Pattern.compile(""), "zzz"));
assertEquals("zzz", RegExUtils.replaceFirst("", Pattern.compile(".*"), "zzz"));
assertEquals("", RegExUtils.replaceFirst("", Pattern.compile(".+"), "zzz"));
assertEquals("ZZabc", RegExUtils.replaceFirst("abc", Pattern.compile(""), "ZZ"));
assertEquals("z\n<__>", RegExUtils.replaceFirst("<__>\n<__>", Pattern.compile("<.*>"), "z"));
assertEquals("z", RegExUtils.replaceFirst("<__>\n<__>", Pattern.compile("(?s)<.*>"), "z"));
assertEquals("ABC_bc123", RegExUtils.replaceFirst("ABCabc123", Pattern.compile("[a-z]"), "_"));
assertEquals("ABC_123abc", RegExUtils.replaceFirst("ABCabc123abc", Pattern.compile("[^A-Z0-9]+"), "_"));
assertEquals("ABC123abc", RegExUtils.replaceFirst("ABCabc123abc", Pattern.compile("[^A-Z0-9]+"), ""));
assertEquals("Lorem_ipsum  dolor   sit",RegExUtils.replaceFirst("Lorem ipsum  dolor   sit", Pattern.compile("( +)([a-z]+)"), "_$2"));
assertEquals("any", RegExUtils.replaceFirst("any", (String) null, ""));
assertEquals("any", RegExUtils.replaceFirst("any", "", null));
assertEquals("zzz", RegExUtils.replaceFirst("", "", "zzz"));
assertEquals("zzz", RegExUtils.replaceFirst("", ".*", "zzz"));
assertEquals("", RegExUtils.replaceFirst("", ".+", "zzz"));
assertEquals("ZZabc", RegExUtils.replaceFirst("abc", "", "ZZ"));
assertEquals("z\n<__>", RegExUtils.replaceFirst("<__>\n<__>", "<.*>", "z"));
assertEquals("z", RegExUtils.replaceFirst("<__>\n<__>", "(?s)<.*>", "z"));
assertEquals("ABC_bc123", RegExUtils.replaceFirst("ABCabc123", "[a-z]", "_"));
assertEquals("ABC_123abc", RegExUtils.replaceFirst("ABCabc123abc", "[^A-Z0-9]+", "_"));
assertEquals("ABC123abc", RegExUtils.replaceFirst("ABCabc123abc", "[^A-Z0-9]+", ""));
assertEquals("Lorem_ipsum  dolor   sit",RegExUtils.replaceFirst("Lorem ipsum  dolor   sit", "( +)([a-z]+)", "_$2"));
assertEquals("any", RegExUtils.replacePattern("any", (String) null, ""));
assertEquals("any", RegExUtils.replacePattern("any", "", null));
assertEquals("zzz", RegExUtils.replacePattern("", "", "zzz"));
assertEquals("zzz", RegExUtils.replacePattern("", ".*", "zzz"));
assertEquals("", RegExUtils.replacePattern("", ".+", "zzz"));
assertEquals("z", RegExUtils.replacePattern("<__>\n<__>", "<.*>", "z"));
assertEquals("z", RegExUtils.replacePattern("<__>\\n<__>", "<.*>", "z"));
assertEquals("X", RegExUtils.replacePattern("<A>\nxy\n</A>", "<A>.*</A>", "X"));
assertEquals("ABC___123", RegExUtils.replacePattern("ABCabc123", "[a-z]", "_"));
assertEquals("ABC_123", RegExUtils.replacePattern("ABCabc123", "[^A-Z0-9]+", "_"));
assertEquals("ABC123", RegExUtils.replacePattern("ABCabc123", "[^A-Z0-9]+", ""));
assertEquals("Lorem_ipsum_dolor_sit",RegExUtils.replacePattern("Lorem ipsum  dolor   sit", "( +)([a-z]+)", "_$2"));
assertEquals(staticGetString(), MethodInvokers.asFailableSupplier(getMethodForStaticGetString()).get());
assertEquals(staticGetString(), MethodInvokers.asFailableSupplier(getMethodForStaticGetString()).get());
assertEquals("ABC", tri.apply(ref1, ref2, ref3));
assertEquals(Character.valueOf('a'), ref1.get());
assertEquals(Short.valueOf((short) 1), ref2.get());
assertEquals("z", ref3.get());
assertEquals(BigInteger.TEN, tri.andThen(after).apply(ref1, ref2, ref3));
assertEquals(Character.valueOf('b'), ref1.get());
assertEquals(Short.valueOf((short) 2), ref2.get());
assertEquals("zz", ref3.get());
assertEquals(staticGetString(), supplier.get());
assertEquals(staticGetString(), supplier.get());
assertEquals(Character.valueOf('a'), ref1.get());
assertEquals(Short.valueOf((short) 1), ref2.get());
assertEquals("z", ref3.get());
assertEquals(Character.valueOf('b'), ref1.get());
assertEquals(Short.valueOf((short) 2), ref2.get());
assertEquals("zz", ref3.get());
assertEquals(INSTANCE.getString1Arg("A"), func.apply(INSTANCE, "A"));
assertEquals('C', function.apply("ABC", 2));
assertEquals(new HashSet<>(Arrays.asList(INSTANCE.getString(), INSTANCE.getString2())), set1);
assertEquals(new HashSet<>(Arrays.asList(INSTANCE.getString(), INSTANCE.getString2())), set2);
assertEquals(3, function.apply("ABC"));
assertEquals(1, testable.getAcceptedPrimitiveObject1());
assertEquals(1, testable.getAcceptedPrimitiveObject1());
assertEquals(1, testable.getAcceptedPrimitiveObject1());
assertEquals("X", testable.getAcceptedObject());
assertEquals(1d, testable.getAcceptedPrimitiveObject1());
assertEquals("X", testable.getAcceptedObject());
assertEquals(1, testable.getAcceptedPrimitiveObject1());
assertEquals("X", testable.getAcceptedObject());
assertEquals(1L, testable.getAcceptedPrimitiveObject1());
assertEquals("Odd Invocation: 1", cause.getMessage());
assertEquals("Odd Invocation: 1", cause.getMessage());
assertEquals("Odd Invocation: 1", cause.getMessage());
assertEquals(0, biFunction.apply(testable, null).intValue());
assertEquals("Odd Invocation: 1", cause.getMessage());
assertEquals("Odd Invocation: 1", cause.getMessage());
assertEquals(0, Failable.getAsDouble(testable::testAsDoublePrimitive));
assertEquals("Odd Invocation: 1", cause.getMessage());
assertEquals("Odd Invocation: 1", cause.getMessage());
assertEquals("Odd Invocation: 1", cause.getMessage());
assertSame(ioe, cause);
assertEquals(0, FailableDoubleToIntFunction.nop().applyAsInt(Double.MAX_VALUE), "Expect NOP to return 0");
assertEquals(0, FailableDoubleToLongFunction.nop().applyAsLong(Double.MAX_VALUE), "Expect NOP to return 0");
assertEquals(0, FailableIntToDoubleFunction.nop().applyAsDouble(Integer.MAX_VALUE), "Expect NOP to return 0");
assertEquals(0, FailableIntToLongFunction.nop().applyAsLong(Integer.MAX_VALUE), "Expect NOP to return 0");
assertEquals(0, FailableLongToDoubleFunction.nop().applyAsDouble(Long.MAX_VALUE), "Expect NOP to return 0");
assertEquals(0, FailableLongToIntFunction.nop().applyAsInt(Long.MAX_VALUE), "Expect NOP to return 0");
assertEquals(0, FailableToIntFunction.nop().applyAsInt("Foo"), "Expect NOP to return 0");
assertEquals(0, FailableToIntBiFunction.nop().applyAsInt("Foo", "Bar"), "Expect NOP to return 0");
assertEquals(0, FailableToLongFunction.nop().applyAsLong("Foo"), "Expect NOP to return 0");
assertEquals(0, FailableToLongBiFunction.nop().applyAsLong("Foo", "Bar"), "Expect NOP to return 0");
assertEquals(0, FailableToDoubleFunction.nop().applyAsDouble("Foo"), "Expect NOP to return 0");
assertEquals(0, FailableToDoubleBiFunction.nop().applyAsDouble("Foo", "Bar"), "Expect NOP to return 0");
assertEquals(INSTANCE.getString1ArgChecked("A"), func.apply(INSTANCE, "A"));
assertEquals("A", INSTANCE.getValue1());
assertEquals(INSTANCE.getString(), MethodInvokers.asFailableFunction(getMethodForGetString()).apply(INSTANCE));
assertEquals(new HashSet<>(Arrays.asList(INSTANCE.getString(), INSTANCE.getString2())), set);
assertSame("foo", Objects.requireNonNull("foo"));
assertEquals("The value must not be null.", e.getMessage());
assertSame("foo", Objects.requireNonNull("foo", supplier));
assertEquals("The supplier must not return null.", e.getMessage());
assertEquals("The supplier must not return null.", e.getMessage());
assertSame("bar", Objects.requireNonNull(null, supplier3));
assertSame(rte, e);
assertSame("foo", Objects.requireNonNull("foo", "bar"));
assertEquals("bar", e.getMessage());
assertSame("foo", Objects.requireNonNull("foo", supplier));
assertEquals("bar", e.getMessage());
assertEquals("foo", Suppliers.get(() -> "foo"));
assertEquals("A", INSTANCE.getValue1());
assertEquals("B", INSTANCE.getValue1());
assertEquals(bf_single.getValue(-1), 1);
assertEquals(bf_single.getValue(0), 0);
assertEquals(bf_zero.getValue(-1), 0);
assertEquals(bf_zero.getValue(0), 0);
assertEquals(bf_single.getShortValue((short) - 1), (short) 1);
assertEquals(bf_single.getShortValue((short) 0), (short) 0);
assertEquals(bf_zero.getShortValue((short) -1), (short) 0);
assertEquals(bf_zero.getShortValue((short) 0), (short) 0);
assertEquals(bf_single.getRawValue(-1), 0x4000);
assertEquals(bf_single.getRawValue(0), 0);
assertEquals(bf_zero.getRawValue(-1), 0);
assertEquals(bf_zero.getRawValue(0), 0);
assertEquals(bf_single.getShortRawValue((short) - 1), (short) 0x4000);
assertEquals(bf_single.getShortRawValue((short) 0), (short) 0);
assertEquals(bf_zero.getShortRawValue((short) -1), (short) 0);
assertEquals(bf_zero.getShortRawValue((short) 0), (short) 0);
assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j);
assertEquals(bf_zero.getValue(bf_zero.setValue(0, j)), 0);
assertEquals(bf_zero.setValue(0, j), 0);
assertEquals(bf_single.getValue(bf_single.setValue(0, j)), j);
assertEquals(bf_single.setValue(0, j), j << 14);
assertEquals(bf_single.setValue(0x4000, 2), 0);
assertEquals(bf_multi.getShortValue(bf_multi.setShortValue((short) 0, (short) j)), (short) j);
assertEquals(bf_zero.getShortValue(bf_zero.setShortValue((short) 0, (short) j)), (short) 0);
assertEquals(bf_zero.setShortValue((short) 0, (short) j), (short) 0);
assertEquals(bf_single.getShortValue(bf_single.setShortValue((short) 0, (short) j)), (short) j);
assertEquals(bf_single.setShortValue((short) 0, (short) j), (short) (j << 14));
assertEquals(bf_single.setShortValue((short) 0x4000, (short) 2), (short) 0);
assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true));
assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true));
assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true));
assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true));
assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true));
assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true));
assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true));
assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true));
assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true));
assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false));
assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false));
assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false));
assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false));
assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false));
assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false));
assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false));
assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false));
assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false));
assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false));
assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true));
assertEquals(bf_single.set(0), bf_single.setBoolean(0, true));
assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true));
assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false));
assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false));
assertEquals(bf_zero.clear(-1), bf_zero.setBoolean(-1, false));
assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true));
assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true));
assertEquals(bf_zero.setShort((short) 0), bf_zero.setShortBoolean((short) 0, true));
assertEquals(bf_multi.clearShort((short) - 1), bf_multi.setShortBoolean((short) - 1, false));
assertEquals(bf_single.clearShort((short) - 1), bf_single.setShortBoolean((short) - 1, false));
assertEquals(bf_zero.clearShort((short) -1), bf_zero.setShortBoolean((short) -1, false));
assertEquals(Integer.MAX_VALUE, f.getNumerator());
assertEquals(Integer.MAX_VALUE, f.getNumerator());
assertEquals(Integer.MAX_VALUE, f.getNumerator());
assertEquals(Integer.MIN_VALUE+1, f.getNumerator());
assertEquals(Integer.MAX_VALUE, f.getNumerator());
assertEquals(Integer.MIN_VALUE, fr.getNumerator());
assertNotEquals(f1, Integer.valueOf(6));
assertEquals(f2.getNumerator(), f.getNumerator());
assertEquals(f2.getDenominator(), f.getDenominator());
assertEquals(f2.getNumerator(), f.getNumerator());
assertEquals(f2.getDenominator(), f.getDenominator());
assertEquals(-Integer.MAX_VALUE, f.getNumerator());
assertEquals(Integer.MAX_VALUE, f.getDenominator());
assertEquals(3, f.getProperWhole());
assertEquals(5, f.getProperNumerator());
assertEquals(-3, f.getProperWhole());
assertEquals(5, f.getProperNumerator());
assertEquals(Integer.MIN_VALUE, f.getNumerator());
assertEquals(Integer.MIN_VALUE, f.getProperWhole());
assertEquals(0, f.getProperNumerator());
assertEquals(Integer.MAX_VALUE, f.getDenominator());
assertEquals(Integer.MIN_VALUE, f.getNumerator());
assertEquals(Integer.MIN_VALUE+2, f.getNumerator());
assertEquals(Integer.MAX_VALUE, f.getDenominator());
assertEquals(2, result.getNumerator());
assertEquals(3, result.getDenominator());
assertEquals(2, result.getNumerator());
assertEquals(3, result.getDenominator());
assertEquals(-2, result.getNumerator());
assertEquals(3, result.getDenominator());
assertEquals(-2, result.getNumerator());
assertEquals(3, result.getDenominator());
assertEquals(2, result.getNumerator());
assertEquals(3, result.getDenominator());
assertEquals(0, result.getNumerator());
assertEquals(1, result.getDenominator());
assertEquals(0, result.getNumerator());
assertEquals(1, result.getDenominator());
assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());
assertEquals(1, result.getDenominator());
assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());
assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());
assertEquals(Integer.MIN_VALUE+1, f.getNumerator());
assertEquals(Integer.MAX_VALUE-1, f.getNumerator());
assertEquals("3/5", str);
assertEquals("1 2/5", f.toProperString());
assertEquals("1 4/10", f.toProperString());
assertEquals("2", f.toProperString());
assertEquals("0", f.toProperString());
assertEquals("1", f.toProperString());
assertEquals("-1 2/5", f.toProperString());
assertEquals("-2147483648", f.toProperString());
assertEquals("-1 1/2147483647", f.toProperString());
assertEquals("-1", Fraction.getFraction(-1).toProperString());
assertEquals("3/5", str);
assertEquals("7/5", f.toString());
assertEquals("4/2", f.toString());
assertEquals("0/2", f.toString());
assertEquals("2/2", f.toString());
assertEquals("-2147483648/1", f.toString());
assertEquals("-2147483648/2147483647", f.toString());
assertEquals(0, NumberUtils.compare((byte) 113, (byte) 113));
assertEquals(0.0d, NumberUtils.toDouble((BigDecimal) null), "toDouble(BigInteger) 1 failed");
assertEquals(8.5d, NumberUtils.toDouble(BigDecimal.valueOf(8.5d)), "toDouble(BigInteger) 2 failed");
assertEquals(1.1d, NumberUtils.toDouble((BigDecimal) null, 1.1d), "toDouble(BigInteger) 1 failed");
assertEquals(8.5d, NumberUtils.toDouble(BigDecimal.valueOf(8.5d), 1.1d), "toDouble(BigInteger) 2 failed");
assertEquals(0, Double.compare(Double.NaN, Double.NaN));
assertEquals(Double.compare(Double.NaN, Double.POSITIVE_INFINITY), +1);
assertEquals(Double.compare(Double.NaN, Double.MAX_VALUE), +1);
assertEquals(Double.compare(Double.NaN, 1.2d), +1);
assertEquals(Double.compare(Double.NaN, 0.0d), +1);
assertEquals(Double.compare(Double.NaN, -0.0d), +1);
assertEquals(Double.compare(Double.NaN, -1.2d), +1);
assertEquals(Double.compare(Double.NaN, -Double.MAX_VALUE), +1);
assertEquals(Double.compare(Double.NaN, Double.NEGATIVE_INFINITY), +1);
assertEquals(Double.compare(Double.POSITIVE_INFINITY, Double.NaN), -1);
assertEquals(0, Double.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY));
assertEquals(Double.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE), +1);
assertEquals(Double.compare(Double.POSITIVE_INFINITY, 1.2d), +1);
assertEquals(Double.compare(Double.POSITIVE_INFINITY, 0.0d), +1);
assertEquals(Double.compare(Double.POSITIVE_INFINITY, -0.0d), +1);
assertEquals(Double.compare(Double.POSITIVE_INFINITY, -1.2d), +1);
assertEquals(Double.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE), +1);
assertEquals(Double.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY), +1);
assertEquals(Double.compare(Double.MAX_VALUE, Double.NaN), -1);
assertEquals(Double.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY), -1);
assertEquals(0, Double.compare(Double.MAX_VALUE, Double.MAX_VALUE));
assertEquals(Double.compare(Double.MAX_VALUE, 1.2d), +1);
assertEquals(Double.compare(Double.MAX_VALUE, 0.0d), +1);
assertEquals(Double.compare(Double.MAX_VALUE, -0.0d), +1);
assertEquals(Double.compare(Double.MAX_VALUE, -1.2d), +1);
assertEquals(Double.compare(Double.MAX_VALUE, -Double.MAX_VALUE), +1);
assertEquals(Double.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY), +1);
assertEquals(Double.compare(1.2d, Double.NaN), -1);
assertEquals(Double.compare(1.2d, Double.POSITIVE_INFINITY), -1);
assertEquals(Double.compare(1.2d, Double.MAX_VALUE), -1);
assertEquals(Double.compare(1.2d, -Double.MAX_VALUE), +1);
assertEquals(Double.compare(1.2d, Double.NEGATIVE_INFINITY), +1);
assertEquals(Double.compare(0.0d, Double.NaN), -1);
assertEquals(Double.compare(0.0d, Double.POSITIVE_INFINITY), -1);
assertEquals(Double.compare(0.0d, Double.MAX_VALUE), -1);
assertEquals(Double.compare(0.0d, -Double.MAX_VALUE), +1);
assertEquals(Double.compare(0.0d, Double.NEGATIVE_INFINITY), +1);
assertEquals(Double.compare(-0.0d, Double.NaN), -1);
assertEquals(Double.compare(-0.0d, Double.POSITIVE_INFINITY), -1);
assertEquals(Double.compare(-0.0d, Double.MAX_VALUE), -1);
assertEquals(Double.compare(-0.0d, -Double.MAX_VALUE), +1);
assertEquals(Double.compare(-0.0d, Double.NEGATIVE_INFINITY), +1);
assertEquals(Double.compare(-1.2d, Double.NaN), -1);
assertEquals(Double.compare(-1.2d, Double.POSITIVE_INFINITY), -1);
assertEquals(Double.compare(-1.2d, Double.MAX_VALUE), -1);
assertEquals(Double.compare(-1.2d, -Double.MAX_VALUE), +1);
assertEquals(Double.compare(-1.2d, Double.NEGATIVE_INFINITY), +1);
assertEquals(Double.compare(-Double.MAX_VALUE, Double.NaN), -1);
assertEquals(Double.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY), -1);
assertEquals(Double.compare(-Double.MAX_VALUE, Double.MAX_VALUE), -1);
assertEquals(Double.compare(-Double.MAX_VALUE, 1.2d), -1);
assertEquals(Double.compare(-Double.MAX_VALUE, 0.0d), -1);
assertEquals(Double.compare(-Double.MAX_VALUE, -0.0d), -1);
assertEquals(Double.compare(-Double.MAX_VALUE, -1.2d), -1);
assertEquals(0, Double.compare(-Double.MAX_VALUE, -Double.MAX_VALUE));
assertEquals(Double.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY), +1);
assertEquals(Double.compare(Double.NEGATIVE_INFINITY, Double.NaN), -1);
assertEquals(Double.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY), -1);
assertEquals(Double.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE), -1);
assertEquals(Double.compare(Double.NEGATIVE_INFINITY, 1.2d), -1);
assertEquals(Double.compare(Double.NEGATIVE_INFINITY, 0.0d), -1);
assertEquals(Double.compare(Double.NEGATIVE_INFINITY, -0.0d), -1);
assertEquals(Double.compare(Double.NEGATIVE_INFINITY, -1.2d), -1);
assertEquals(Double.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE), -1);
assertEquals(0, Double.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY));
assertEquals(0, NumberUtils.BYTE_ZERO.byteValue());
assertEquals(1, NumberUtils.BYTE_ONE.byteValue());
assertEquals(NumberUtils.BYTE_MINUS_ONE.byteValue(), -1);
assertEquals(0.0d, NumberUtils.DOUBLE_ZERO.doubleValue());
assertEquals(1.0d, NumberUtils.DOUBLE_ONE.doubleValue());
assertEquals(NumberUtils.DOUBLE_MINUS_ONE.doubleValue(), -1.0d);
assertEquals(new BigDecimal("1234.5"), NumberUtils.createBigDecimal("1234.5"),"createBigDecimal(String) failed");
assertEquals(new BigInteger("12345"), NumberUtils.createBigInteger("12345"), "createBigInteger(String) failed");
assertEquals(new BigInteger("255"), NumberUtils.createBigInteger("0xff"), "createBigInteger(String) failed");
assertEquals(new BigInteger("255"), NumberUtils.createBigInteger("0Xff"), "createBigInteger(String) failed");
assertEquals(new BigInteger("255"), NumberUtils.createBigInteger("#ff"), "createBigInteger(String) failed");
assertEquals(new BigInteger("-255"), NumberUtils.createBigInteger("-0xff"), "createBigInteger(String) failed");
assertEquals(new BigInteger("255"), NumberUtils.createBigInteger("0377"), "createBigInteger(String) failed");
assertEquals(new BigInteger("-255"), NumberUtils.createBigInteger("-0377"), "createBigInteger(String) failed");
assertEquals(new BigInteger("-255"), NumberUtils.createBigInteger("-0377"), "createBigInteger(String) failed");
assertEquals(new BigInteger("-0"), NumberUtils.createBigInteger("-0"), "createBigInteger(String) failed");
assertEquals(new BigInteger("0"), NumberUtils.createBigInteger("0"), "createBigInteger(String) failed");
assertEquals(new BigInteger("+FFFFFFFFFFFFFFFF", 16), NumberUtils.createBigInteger("+0xFFFFFFFFFFFFFFFF"));
assertEquals(new BigInteger("+FFFFFFFFFFFFFFFF", 16), NumberUtils.createBigInteger("+#FFFFFFFFFFFFFFFF"));
assertEquals(new BigInteger("+1234567", 8), NumberUtils.createBigInteger("+01234567"));
assertEquals(Double.valueOf("1234.5"), NumberUtils.createDouble("1234.5"), "createDouble(String) failed");
assertEquals(Float.valueOf("1234.5"), NumberUtils.createFloat("1234.5"), "createFloat(String) failed");
assertEquals(Integer.valueOf("12345"), NumberUtils.createInteger("12345"), "createInteger(String) failed");
assertEquals(Integer.decode("+0xF"), NumberUtils.createInteger("+0xF"));
assertEquals(Long.valueOf("12345"), NumberUtils.createLong("12345"), "createLong(String) failed");
assertEquals(Long.decode("+0xFFFFFFFF"), NumberUtils.createLong("+0xFFFFFFFF"));
assertEquals(Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5"), "createNumber(String) 1 failed");
assertEquals(Integer.valueOf("12345"), NumberUtils.createNumber("12345"), "createNumber(String) 2 failed");
assertEquals(Double.valueOf("1234.5"), NumberUtils.createNumber("1234.5D"), "createNumber(String) 3 failed");
assertEquals(Double.valueOf("1234.5"), NumberUtils.createNumber("1234.5d"), "createNumber(String) 3 failed");
assertEquals(Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5F"), "createNumber(String) 4 failed");
assertEquals(Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5f"), "createNumber(String) 4 failed");
assertEquals(Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber("" + (Integer.MAX_VALUE + 1L)),"createNumber(String) 5 failed");
assertEquals(Long.valueOf(12345), NumberUtils.createNumber("12345L"), "createNumber(String) 6 failed");
assertEquals(Long.valueOf(12345), NumberUtils.createNumber("12345l"), "createNumber(String) 6 failed");
assertEquals(Float.valueOf("-1234.5"), NumberUtils.createNumber("-1234.5"), "createNumber(String) 7 failed");
assertEquals(Integer.valueOf("-12345"), NumberUtils.createNumber("-12345"), "createNumber(String) 8 failed");
assertEquals(0xFADE, NumberUtils.createNumber("0xFADE").intValue(), "createNumber(String) 9a failed");
assertEquals(0xFADE, NumberUtils.createNumber("0Xfade").intValue(), "createNumber(String) 9b failed");
assertEquals(-0xFADE, NumberUtils.createNumber("-0xFADE").intValue(), "createNumber(String) 10a failed");
assertEquals(-0xFADE, NumberUtils.createNumber("-0Xfade").intValue(), "createNumber(String) 10b failed");
assertEquals(Double.valueOf("1.1E200"), NumberUtils.createNumber("1.1E200"), "createNumber(String) 11 failed");
assertEquals(Float.valueOf("1.1E20"), NumberUtils.createNumber("1.1E20"), "createNumber(String) 12 failed");
assertEquals(Double.valueOf("-1.1E200"), NumberUtils.createNumber("-1.1E200"),"createNumber(String) 13 failed");
assertEquals(Double.valueOf("1.1E-200"), NumberUtils.createNumber("1.1E-200"),"createNumber(String) 14 failed");
assertEquals(new BigInteger("12345678901234567890"), NumberUtils.createNumber("12345678901234567890L"),"createNumber(String) failed");
assertEquals(new BigDecimal("1.1E-700"), NumberUtils.createNumber("1.1E-700F"),"createNumber(String) 15 failed");
assertEquals(Long.valueOf("10" + Integer.MAX_VALUE), NumberUtils.createNumber("10" + Integer.MAX_VALUE + "L"),"createNumber(String) 16 failed");
assertEquals(Long.valueOf("10" + Integer.MAX_VALUE), NumberUtils.createNumber("10" + Integer.MAX_VALUE),"createNumber(String) 17 failed");
assertEquals(new BigInteger("10" + Long.MAX_VALUE), NumberUtils.createNumber("10" + Long.MAX_VALUE),"createNumber(String) 18 failed");
assertEquals(Float.valueOf("2."), NumberUtils.createNumber("2."), "createNumber(String) LANG-521 failed");
assertEquals(Double.valueOf(Double.MAX_VALUE), NumberUtils.createNumber("" + Double.MAX_VALUE),"createNumber(String) LANG-693 failed");
assertEquals(Double.valueOf("-160952.54"), NumberUtils.createNumber("-160952.54"),"createNumber(String) LANG-1018 failed");
assertEquals(Double.valueOf("6264583.33"), NumberUtils.createNumber("6264583.33"),"createNumber(String) LANG-1187 failed");
assertEquals(Double.valueOf("193343.82"), NumberUtils.createNumber("193343.82"),"createNumber(String) LANG-1215 failed");
assertEquals(Double.valueOf("001234.5678"), NumberUtils.createNumber("001234.5678"),"createNumber(String) LANG-1060a failed");
assertEquals(Double.valueOf("+001234.5678"), NumberUtils.createNumber("+001234.5678"),"createNumber(String) LANG-1060b failed");
assertEquals(Double.valueOf("-001234.5678"), NumberUtils.createNumber("-001234.5678"),"createNumber(String) LANG-1060c failed");
assertEquals(Double.valueOf("0000.00000"), NumberUtils.createNumber("0000.00000d"),"createNumber(String) LANG-1060d failed");
assertEquals(Float.valueOf("001234.56"), NumberUtils.createNumber("001234.56"),"createNumber(String) LANG-1060e failed");
assertEquals(Float.valueOf("+001234.56"), NumberUtils.createNumber("+001234.56"),"createNumber(String) LANG-1060f failed");
assertEquals(Float.valueOf("-001234.56"), NumberUtils.createNumber("-001234.56"),"createNumber(String) LANG-1060g failed");
assertEquals(Float.valueOf("0000.10"), NumberUtils.createNumber("0000.10"),"createNumber(String) LANG-1060h failed");
assertEquals(Float.valueOf("001.1E20"), NumberUtils.createNumber("001.1E20"),"createNumber(String) LANG-1060i failed");
assertEquals(Float.valueOf("+001.1E20"), NumberUtils.createNumber("+001.1E20"),"createNumber(String) LANG-1060j failed");
assertEquals(Float.valueOf("-001.1E20"), NumberUtils.createNumber("-001.1E20"),"createNumber(String) LANG-1060k failed");
assertEquals(Double.valueOf("001.1E200"), NumberUtils.createNumber("001.1E200"),"createNumber(String) LANG-1060l failed");
assertEquals(Double.valueOf("+001.1E200"), NumberUtils.createNumber("+001.1E200"),"createNumber(String) LANG-1060m failed");
assertEquals(Double.valueOf("-001.1E200"), NumberUtils.createNumber("-001.1E200"),"createNumber(String) LANG-1060n failed");
assertEquals(Integer.decode("+0xF"), NumberUtils.createNumber("+0xF"),"createNumber(String) LANG-1645a failed");
assertEquals(Long.decode("+0xFFFFFFFF"), NumberUtils.createNumber("+0xFFFFFFFF"),"createNumber(String) LANG-1645b failed");
assertEquals(new BigInteger("+FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("+0xFFFFFFFFFFFFFFFF"),"createNumber(String) LANG-1645c failed");
assertEquals(Float.valueOf(Float.MAX_VALUE), NumberUtils.createNumber("3.4028235e+38"));
assertEquals(Double.valueOf(3.4028236e+38), NumberUtils.createNumber("3.4028236e+38"));
assertEquals(Double.valueOf(Double.MAX_VALUE), NumberUtils.createNumber("1.7976931348623157e+308"));
assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308"));
assertEquals(nonZero1, NumberUtils.createNumber(nonZero1.toString()));
assertEquals(nonZero1, NumberUtils.createNumber(nonZero1.toString() + "F"));
assertEquals(nonZero2, NumberUtils.createNumber("4.9e-325"));
assertEquals(nonZero2, NumberUtils.createNumber("4.9e-325D"));
assertEquals(nonZero3, NumberUtils.createNumber("1e-325"));
assertEquals(nonZero3, NumberUtils.createNumber("1e-325D"));
assertEquals(nonZero4, NumberUtils.createNumber("0.1e-325"));
assertEquals(nonZero4, NumberUtils.createNumber("0.1e-325D"));
assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678"));
assertEquals(Long.valueOf(0x123456789L), NumberUtils.createNumber("0x123456789"));
assertEquals(Long.valueOf(0x7fffffffffffffffL), NumberUtils.createNumber("0x7fffffffffffffff"));
assertEquals(new BigInteger("7fffffffffffffff0", 16), NumberUtils.createNumber("0x7fffffffffffffff0"));
assertEquals(Long.valueOf(0x7fffffffffffffffL), NumberUtils.createNumber("#7fffffffffffffff"));
assertEquals(new BigInteger("7fffffffffffffff0", 16), NumberUtils.createNumber("#7fffffffffffffff0"));
assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits
assertEquals(Long.valueOf(037777777777L), NumberUtils.createNumber("037777777777")); // 32 bits
assertEquals(Long.valueOf(0777777777777777777777L), NumberUtils.createNumber("0777777777777777777777"));
assertEquals(new BigInteger("1777777777777777777777", 8), NumberUtils.createNumber("01777777777777777777777"));
assertEquals(Integer.valueOf(0), NumberUtils.createNumber("0"));
assertEquals(Integer.valueOf(0), NumberUtils.createNumber("-0"));
assertEquals(Long.valueOf(0), NumberUtils.createNumber("0L"));
assertEquals(Long.valueOf(0), NumberUtils.createNumber("-0L"));
assertCreateNumberZero(zero, f0, fn0);
assertCreateNumberZero(zero + "e" + exp, f0, fn0);
assertCreateNumberZero(zero + "F", f0, fn0);
assertCreateNumberZero(zero + "D", d0, dn0);
assertCreateNumberZero(number + "F", f0, fn0);
assertCreateNumberZero(number + "D", d0, dn0);
private static void assertCreateNumberZero(final String number, final Object zero, final Object negativeZero) {assertEquals(zero, NumberUtils.createNumber(number), () -> "Input: " + number);
assertEquals(zero, NumberUtils.createNumber("+" + number), () -> "Input: +" + number);
assertEquals(negativeZero, NumberUtils.createNumber("-" + number), () -> "Input: -" + number);
assertEquals(Float.class, NumberUtils.createNumber("0.0").getClass());
assertEquals(Float.valueOf("0.0"), NumberUtils.createNumber("0.0"));
assertEquals(Float.class, NumberUtils.createNumber("+0.0").getClass());
assertEquals(Float.valueOf("+0.0"), NumberUtils.createNumber("+0.0"));
assertEquals(Float.class, NumberUtils.createNumber("-0.0").getClass());
assertEquals(Float.valueOf("-0.0"), NumberUtils.createNumber("-0.0"));
assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000"));
assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000"));
assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000"));
assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000"));
assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF"));
assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000"));
assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF"));
assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000"));
assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF"));
assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000"));
assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF"));
assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000"));
assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000"));
assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000"));
assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000"));
assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000"));
assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000"));
assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000"));
assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF"));
assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000"));
assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF"));
assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000"));
assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000"));
assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF"));
assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000"));
assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF"));
assertEquals((byte) 5, NumberUtils.max((byte) 5), "max(byte[]) failed for array length 1");
assertEquals((byte) 9, NumberUtils.max((byte) 6, (byte) 9), "max(byte[]) failed for array length 2");
assertEquals((byte) 10, NumberUtils.max((byte) -10, (byte) -5, (byte) 0, (byte) 5, (byte) 10),"max(byte[]) failed for array length 5");
assertEquals((byte) 10, NumberUtils.max((byte) -10, (byte) -5, (byte) 0, (byte) 5, (byte) 10));
assertEquals((byte) 10, NumberUtils.max((byte) -5, (byte) 0, (byte) 10, (byte) 5, (byte) -10));
assertEquals(5.1f, NumberUtils.max(5.1f), "max(double[]) failed for array length 1");
assertEquals(9.2f, NumberUtils.max(6.3f, 9.2f), "max(double[]) failed for array length 2");
assertEquals(10.4f, NumberUtils.max(-10.5f, -5.6f, 0, 5.7f, 10.4f), "max(double[]) failed for float length 5");
assertEquals(5.1f, NumberUtils.max(5.1f), "max(float[]) failed for array length 1");
assertEquals(9.2f, NumberUtils.max(6.3f, 9.2f), "max(float[]) failed for array length 2");
assertEquals(10.4f, NumberUtils.max(-10.5f, -5.6f, 0, 5.7f, 10.4f), "max(float[]) failed for float length 5");
assertEquals(high, NumberUtils.max(low, mid, high), "maximum(byte, byte, byte) 1 failed");
assertEquals(high, NumberUtils.max(mid, low, high), "maximum(byte, byte, byte) 2 failed");
assertEquals(high, NumberUtils.max(mid, high, low), "maximum(byte, byte, byte) 3 failed");
assertEquals(high, NumberUtils.max(high, mid, high), "maximum(byte, byte, byte) 4 failed");
assertEquals(12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2), "maximum(int, int, int) 1 failed");
assertEquals(12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2), "maximum(int, int, int) 2 failed");
assertEquals(12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345), "maximum(int, int, int) 3 failed");
assertEquals(12345, NumberUtils.max(12345 - 1, 12345, 12345), "maximum(int, int, int) 4 failed");
assertEquals(12345, NumberUtils.max(12345, 12345, 12345), "maximum(int, int, int) 5 failed");
assertEquals(12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L), "maximum(long, long, long) 1 failed");
assertEquals(12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L), "maximum(long, long, long) 2 failed");
assertEquals(12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L), "maximum(long, long, long) 3 failed");
assertEquals(12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L), "maximum(long, long, long) 4 failed");
assertEquals(12345L, NumberUtils.max(12345L, 12345L, 12345L), "maximum(long, long, long) 5 failed");
assertEquals(high, NumberUtils.max(low, mid, high), "maximum(short, short, short) 1 failed");
assertEquals(high, NumberUtils.max(mid, low, high), "maximum(short, short, short) 2 failed");
assertEquals(high, NumberUtils.max(mid, high, low), "maximum(short, short, short) 3 failed");
assertEquals(high, NumberUtils.max(high, mid, high), "maximum(short, short, short) 4 failed");
assertEquals(5, NumberUtils.max(5), "max(int[]) failed for array length 1");
assertEquals(9, NumberUtils.max(6, 9), "max(int[]) failed for array length 2");
assertEquals(10, NumberUtils.max(-10, -5, 0, 5, 10), "max(int[]) failed for array length 5");
assertEquals(5L, NumberUtils.max(5L), "max(long[]) failed for array length 1");
assertEquals(9L, NumberUtils.max(6L, 9L), "max(long[]) failed for array length 2");
assertEquals(10L, NumberUtils.max(-10L, -5L, 0L, 5L, 10L), "max(long[]) failed for array length 5");
assertEquals((short) 5, NumberUtils.max((short) 5), "max(short[]) failed for array length 1");
assertEquals((short) 9, NumberUtils.max((short) 6, (short) 9), "max(short[]) failed for array length 2");
assertEquals((short) 10, NumberUtils.max((short) -10, (short) -5, (short) 0, (short) 5, (short) 10),"max(short[]) failed for array length 5");
assertEquals((byte) 5, NumberUtils.min((byte) 5), "min(byte[]) failed for array length 1");
assertEquals((byte) 6, NumberUtils.min((byte) 6, (byte) 9), "min(byte[]) failed for array length 2");
assertEquals((byte) -10, NumberUtils.min((byte) -10, (byte) -5, (byte) 0, (byte) 5, (byte) 10));
assertEquals((byte) -10, NumberUtils.min((byte) -5, (byte) 0, (byte) -10, (byte) 5, (byte) 10));
assertEquals(5.12, NumberUtils.min(5.12), "min(double[]) failed for array length 1");
assertEquals(6.23, NumberUtils.min(6.23, 9.34), "min(double[]) failed for array length 2");
assertEquals(-10.45, NumberUtils.min(-10.45, -5.56, 0, 5.67, 10.78), "min(double[]) failed for array length 5");
assertEquals(5.9f, NumberUtils.min(5.9f), "min(float[]) failed for array length 1");
assertEquals(6.8f, NumberUtils.min(6.8f, 9.7f), "min(float[]) failed for array length 2");
assertEquals(-10.6f, NumberUtils.min(-10.6f, -5.5f, 0, 5.4f, 10.3f), "min(float[]) failed for array length 5");
assertEquals(low, NumberUtils.min(low, mid, high), "minimum(byte, byte, byte) 1 failed");
assertEquals(low, NumberUtils.min(mid, low, high), "minimum(byte, byte, byte) 2 failed");
assertEquals(low, NumberUtils.min(mid, high, low), "minimum(byte, byte, byte) 3 failed");
assertEquals(low, NumberUtils.min(low, mid, low), "minimum(byte, byte, byte) 4 failed");
assertEquals(12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2), "minimum(int, int, int) 1 failed");
assertEquals(12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2), "minimum(int, int, int) 2 failed");
assertEquals(12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345), "minimum(int, int, int) 3 failed");
assertEquals(12345, NumberUtils.min(12345 + 1, 12345, 12345), "minimum(int, int, int) 4 failed");
assertEquals(12345, NumberUtils.min(12345, 12345, 12345), "minimum(int, int, int) 5 failed");
assertEquals(12345L, NumberUtils.min(12345L, 12345L + 1L, 12345L + 2L), "minimum(long, long, long) 1 failed");
assertEquals(12345L, NumberUtils.min(12345L + 1L, 12345L, 12345 + 2L), "minimum(long, long, long) 2 failed");
assertEquals(12345L, NumberUtils.min(12345L + 1L, 12345L + 2L, 12345L), "minimum(long, long, long) 3 failed");
assertEquals(12345L, NumberUtils.min(12345L + 1L, 12345L, 12345L), "minimum(long, long, long) 4 failed");
assertEquals(12345L, NumberUtils.min(12345L, 12345L, 12345L), "minimum(long, long, long) 5 failed");
assertEquals(low, NumberUtils.min(low, mid, high), "minimum(short, short, short) 1 failed");
assertEquals(low, NumberUtils.min(mid, low, high), "minimum(short, short, short) 2 failed");
assertEquals(low, NumberUtils.min(mid, high, low), "minimum(short, short, short) 3 failed");
assertEquals(low, NumberUtils.min(low, mid, low), "minimum(short, short, short) 4 failed");
assertEquals(5, NumberUtils.min(5), "min(int[]) failed for array length 1");
assertEquals(6, NumberUtils.min(6, 9), "min(int[]) failed for array length 2");
assertEquals(5L, NumberUtils.min(5L), "min(long[]) failed for array length 1");
assertEquals(6L, NumberUtils.min(6L, 9L), "min(long[]) failed for array length 2");
assertEquals((short) 5, NumberUtils.min((short) 5), "min(short[]) failed for array length 1");
assertEquals((short) 6, NumberUtils.min((short) 6, (short) 9), "min(short[]) failed for array length 2");
assertEquals(NumberUtils.toDouble("-1.2345"), -1.2345d, "toDouble(String) 1 failed");
assertEquals(1.2345d, NumberUtils.toDouble("1.2345"), "toDouble(String) 2 failed");
assertEquals(0.0d, NumberUtils.toDouble("abc"), "toDouble(String) 3 failed");
assertEquals(NumberUtils.toDouble("-001.2345"), -1.2345d, "toDouble(String) 4 failed");
assertEquals(1.2345d, NumberUtils.toDouble("+001.2345"), "toDouble(String) 5 failed");
assertEquals(1.2345d, NumberUtils.toDouble("001.2345"), "toDouble(String) 6 failed");
assertEquals(0d, NumberUtils.toDouble("000.00000"), "toDouble(String) 7 failed");
assertEquals(NumberUtils.toDouble(Double.MAX_VALUE + ""), Double.MAX_VALUE,"toDouble(Double.MAX_VALUE) failed");
assertEquals(NumberUtils.toDouble(Double.MIN_VALUE + ""), Double.MIN_VALUE,"toDouble(Double.MIN_VALUE) failed");
assertEquals(0.0d, NumberUtils.toDouble(""), "toDouble(empty) failed");
assertEquals(0.0d, NumberUtils.toDouble((String) null), "toDouble(null) failed");
assertEquals(1.2345d, NumberUtils.toDouble("1.2345", 5.1d), "toDouble(String, int) 1 failed");
assertEquals(5.0d, NumberUtils.toDouble("a", 5.0d), "toDouble(String, int) 2 failed");
assertEquals(1.2345d, NumberUtils.toDouble("001.2345", 5.1d), "toDouble(String, int) 3 failed");
assertEquals(NumberUtils.toDouble("-001.2345", 5.1d), -1.2345d, "toDouble(String, int) 4 failed");
assertEquals(1.2345d, NumberUtils.toDouble("+001.2345", 5.1d), "toDouble(String, int) 5 failed");
assertEquals(0d, NumberUtils.toDouble("000.00", 5.1d), "toDouble(String, int) 7 failed");
assertEquals(123, NumberUtils.toByte("123"), "toByte(String) 1 failed");
assertEquals(0, NumberUtils.toByte("abc"), "toByte(String) 2 failed");
assertEquals(0, NumberUtils.toByte(""), "toByte(empty) failed");
assertEquals(0, NumberUtils.toByte(null), "toByte(null) failed");
assertEquals(123, NumberUtils.toByte("123", (byte) 5), "toByte(String, byte) 1 failed");
assertEquals(5, NumberUtils.toByte("12.3", (byte) 5), "toByte(String, byte) 2 failed");
assertEquals(NumberUtils.toFloat("-1.2345"), -1.2345f, "toFloat(String) 1 failed");
assertEquals(1.2345f, NumberUtils.toFloat("1.2345"), "toFloat(String) 2 failed");
assertEquals(0.0f, NumberUtils.toFloat("abc"), "toFloat(String) 3 failed");
assertEquals(NumberUtils.toFloat("-001.2345"), -1.2345f, "toFloat(String) 4 failed");
assertEquals(1.2345f, NumberUtils.toFloat("+001.2345"), "toFloat(String) 5 failed");
assertEquals(1.2345f, NumberUtils.toFloat("001.2345"), "toFloat(String) 6 failed");
assertEquals(0f, NumberUtils.toFloat("000.00"), "toFloat(String) 7 failed");
assertEquals(NumberUtils.toFloat(Float.MAX_VALUE + ""), Float.MAX_VALUE, "toFloat(Float.MAX_VALUE) failed");
assertEquals(NumberUtils.toFloat(Float.MIN_VALUE + ""), Float.MIN_VALUE, "toFloat(Float.MIN_VALUE) failed");
assertEquals(0.0f, NumberUtils.toFloat(""), "toFloat(empty) failed");
assertEquals(0.0f, NumberUtils.toFloat(null), "toFloat(null) failed");
assertEquals(1.2345f, NumberUtils.toFloat("1.2345", 5.1f), "toFloat(String, int) 1 failed");
assertEquals(5.0f, NumberUtils.toFloat("a", 5.0f), "toFloat(String, int) 2 failed");
assertEquals(5.0f, NumberUtils.toFloat("-001Z.2345", 5.0f), "toFloat(String, int) 3 failed");
assertEquals(5.0f, NumberUtils.toFloat("+001AB.2345", 5.0f), "toFloat(String, int) 4 failed");
assertEquals(5.0f, NumberUtils.toFloat("001Z.2345", 5.0f), "toFloat(String, int) 5 failed");
assertEquals(12345, NumberUtils.toInt("12345"), "toInt(String) 1 failed");
assertEquals(0, NumberUtils.toInt("abc"), "toInt(String) 2 failed");
assertEquals(0, NumberUtils.toInt(""), "toInt(empty) failed");
assertEquals(0, NumberUtils.toInt(null), "toInt(null) failed");
assertEquals(12345, NumberUtils.toInt("12345", 5), "toInt(String, int) 1 failed");
assertEquals(5, NumberUtils.toInt("1234.5", 5), "toInt(String, int) 2 failed");
assertEquals(12345L, NumberUtils.toLong("12345"), "toLong(String) 1 failed");
assertEquals(0L, NumberUtils.toLong("abc"), "toLong(String) 2 failed");
assertEquals(0L, NumberUtils.toLong("1L"), "toLong(String) 3 failed");
assertEquals(0L, NumberUtils.toLong("1l"), "toLong(String) 4 failed");
assertEquals(NumberUtils.toLong(Long.MAX_VALUE + ""), Long.MAX_VALUE, "toLong(Long.MAX_VALUE) failed");
assertEquals(NumberUtils.toLong(Long.MIN_VALUE + ""), Long.MIN_VALUE, "toLong(Long.MIN_VALUE) failed");
assertEquals(0L, NumberUtils.toLong(""), "toLong(empty) failed");
assertEquals(0L, NumberUtils.toLong(null), "toLong(null) failed");
assertEquals(12345L, NumberUtils.toLong("12345", 5L), "toLong(String, long) 1 failed");
assertEquals(5L, NumberUtils.toLong("1234.5", 5L), "toLong(String, long) 2 failed");
assertEquals(NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(123.456)), BigDecimal.valueOf(123.46),"toScaledBigDecimal(BigDecimal) 1 failed");
assertEquals(NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(23.515)), BigDecimal.valueOf(23.52),"toScaledBigDecimal(BigDecimal) 2 failed");
assertEquals(NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(23.525)), BigDecimal.valueOf(23.52),"toScaledBigDecimal(BigDecimal) 3 failed");
assertEquals("2352.00",NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(23.525)).multiply(BigDecimal.valueOf(100)).toString(),"toScaledBigDecimal(BigDecimal) 4 failed");
assertEquals(NumberUtils.toScaledBigDecimal((BigDecimal) null), BigDecimal.ZERO,"toScaledBigDecimal(BigDecimal) 5 failed");
assertEquals(NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(123.456), 1, RoundingMode.CEILING),BigDecimal.valueOf(123.5), "toScaledBigDecimal(BigDecimal, int, RoundingMode) 1 failed");
assertEquals(NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(23.5159), 3, RoundingMode.FLOOR),BigDecimal.valueOf(23.515), "toScaledBigDecimal(BigDecimal, int, RoundingMode) 2 failed");
assertEquals(NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(23.525), 2, RoundingMode.HALF_UP),BigDecimal.valueOf(23.53), "toScaledBigDecimal(BigDecimal, int, RoundingMode) 3 failed");
assertEquals("23521.0000",NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(23.521), 4, RoundingMode.HALF_EVEN).multiply(BigDecimal.valueOf(1000)).toString(),"toScaledBigDecimal(BigDecimal, int, RoundingMode) 4 failed");
assertEquals(NumberUtils.toScaledBigDecimal((BigDecimal) null, 2, RoundingMode.HALF_UP), BigDecimal.ZERO,"toScaledBigDecimal(BigDecimal, int, RoundingMode) 5 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Double.valueOf(123.456d)), BigDecimal.valueOf(123.46),"toScaledBigDecimal(Double) 1 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Double.valueOf(23.515d)), BigDecimal.valueOf(23.52),"toScaledBigDecimal(Double) 2 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Double.valueOf(23.525d)), BigDecimal.valueOf(23.52),"toScaledBigDecimal(Double) 3 failed");
assertEquals("2352.00",NumberUtils.toScaledBigDecimal(Double.valueOf(23.525d)).multiply(BigDecimal.valueOf(100)).toString(),"toScaledBigDecimal(Double) 4 failed");
assertEquals(NumberUtils.toScaledBigDecimal((Double) null), BigDecimal.ZERO,"toScaledBigDecimal(Double) 5 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Double.valueOf(123.456d), 1, RoundingMode.CEILING),BigDecimal.valueOf(123.5), "toScaledBigDecimal(Double, int, RoundingMode) 1 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Double.valueOf(23.5159d), 3, RoundingMode.FLOOR),BigDecimal.valueOf(23.515), "toScaledBigDecimal(Double, int, RoundingMode) 2 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Double.valueOf(23.525d), 2, RoundingMode.HALF_UP),BigDecimal.valueOf(23.53), "toScaledBigDecimal(Double, int, RoundingMode) 3 failed");
assertEquals("23521.0000",NumberUtils.toScaledBigDecimal(Double.valueOf(23.521d), 4, RoundingMode.HALF_EVEN).multiply(BigDecimal.valueOf(1000)).toString(),"toScaledBigDecimal(Double, int, RoundingMode) 4 failed");
assertEquals(NumberUtils.toScaledBigDecimal((Double) null, 2, RoundingMode.HALF_UP), BigDecimal.ZERO,"toScaledBigDecimal(Double, int, RoundingMode) 5 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Float.valueOf(123.456f)), BigDecimal.valueOf(123.46),"toScaledBigDecimal(Float) 1 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Float.valueOf(23.515f)), BigDecimal.valueOf(23.51),"toScaledBigDecimal(Float) 2 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Float.valueOf(23.525f)), BigDecimal.valueOf(23.52),"toScaledBigDecimal(Float) 3 failed");
assertEquals("2352.00",NumberUtils.toScaledBigDecimal(Float.valueOf(23.525f)).multiply(BigDecimal.valueOf(100)).toString(),"toScaledBigDecimal(Float) 4 failed");
assertEquals(NumberUtils.toScaledBigDecimal((Float) null), BigDecimal.ZERO,"toScaledBigDecimal(Float) 5 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Float.valueOf(123.456f), 1, RoundingMode.CEILING),BigDecimal.valueOf(123.5), "toScaledBigDecimal(Float, int, RoundingMode) 1 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Float.valueOf(23.5159f), 3, RoundingMode.FLOOR),BigDecimal.valueOf(23.515), "toScaledBigDecimal(Float, int, RoundingMode) 2 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Float.valueOf(23.525f), 2, RoundingMode.HALF_UP),BigDecimal.valueOf(23.52), "toScaledBigDecimal(Float, int, RoundingMode) 3 failed");
assertEquals("23521.0000", NumberUtils.toScaledBigDecimal(Float.valueOf(23.521f), 4, RoundingMode.HALF_EVEN).multiply(BigDecimal.valueOf(1000)).toString(), "toScaledBigDecimal(Float, int, RoundingMode) 4 failed");
assertEquals(NumberUtils.toScaledBigDecimal((Float) null, 2, RoundingMode.HALF_UP), BigDecimal.ZERO,"toScaledBigDecimal(Float, int, RoundingMode) 5 failed");
assertEquals(NumberUtils.toScaledBigDecimal("123.456"), BigDecimal.valueOf(123.46),"toScaledBigDecimal(String) 1 failed");
assertEquals(NumberUtils.toScaledBigDecimal("23.515"), BigDecimal.valueOf(23.52),"toScaledBigDecimal(String) 2 failed");
assertEquals(NumberUtils.toScaledBigDecimal("23.525"), BigDecimal.valueOf(23.52),"toScaledBigDecimal(String) 3 failed");
assertEquals("2352.00", NumberUtils.toScaledBigDecimal("23.525").multiply(BigDecimal.valueOf(100)).toString(),"toScaledBigDecimal(String) 4 failed");
assertEquals(NumberUtils.toScaledBigDecimal((String) null), BigDecimal.ZERO,"toScaledBigDecimal(String) 5 failed");
assertEquals(NumberUtils.toScaledBigDecimal("123.456", 1, RoundingMode.CEILING), BigDecimal.valueOf(123.5),"toScaledBigDecimal(String, int, RoundingMode) 1 failed");
assertEquals(NumberUtils.toScaledBigDecimal("23.5159", 3, RoundingMode.FLOOR), BigDecimal.valueOf(23.515),"toScaledBigDecimal(String, int, RoundingMode) 2 failed");
assertEquals(NumberUtils.toScaledBigDecimal("23.525", 2, RoundingMode.HALF_UP), BigDecimal.valueOf(23.53),"toScaledBigDecimal(String, int, RoundingMode) 3 failed");
assertEquals("23521.0000", NumberUtils.toScaledBigDecimal("23.521", 4, RoundingMode.HALF_EVEN).multiply(BigDecimal.valueOf(1000)).toString(),"toScaledBigDecimal(String, int, RoundingMode) 4 failed");
assertEquals(NumberUtils.toScaledBigDecimal((String) null, 2, RoundingMode.HALF_UP), BigDecimal.ZERO,"toScaledBigDecimal(String, int, RoundingMode) 5 failed");
assertEquals(12345, NumberUtils.toShort("12345"), "toShort(String) 1 failed");
assertEquals(0, NumberUtils.toShort("abc"), "toShort(String) 2 failed");
assertEquals(0, NumberUtils.toShort(""), "toShort(empty) failed");
assertEquals(0, NumberUtils.toShort(null), "toShort(null) failed");
assertEquals(12345, NumberUtils.toShort("12345", (short) 5), "toShort(String, short) 1 failed");
assertEquals(5, NumberUtils.toShort("1234.5", (short) 5), "toShort(String, short) 2 failed");
assertEquals("zz", StringUtils.firstNonBlank(null, "zz"));
assertEquals("abc", StringUtils.firstNonBlank("abc"));
assertEquals("xyz", StringUtils.firstNonBlank(null, "xyz"));
assertEquals("xyz", StringUtils.firstNonBlank(null, "xyz", "abc"));
assertEquals(" ", StringUtils.firstNonEmpty(null, "", " "));
assertEquals("zz", StringUtils.firstNonEmpty(null, "zz"));
assertEquals("abc", StringUtils.firstNonEmpty("abc"));
assertEquals("xyz", StringUtils.firstNonEmpty(null, "xyz"));
assertEquals("xyz", StringUtils.firstNonEmpty(null, "xyz", "abc"));
assertEquals(Calendar.getInstance().get(Calendar.DAY_OF_MONTH), CalendarUtils.INSTANCE.getDayOfMonth());
assertEquals(Calendar.getInstance().get(Calendar.MONTH), CalendarUtils.INSTANCE.getMonth());
assertEquals("Januar", monthNames[0]);
assertEquals("Februar", monthNames[1]);
assertEquals("M\u00e4rz", monthNames[2]);
assertEquals("April", monthNames[3]);
assertEquals("Mai", monthNames[4]);
assertEquals("Juni", monthNames[5]);
assertEquals("Juli", monthNames[6]);
assertEquals("August", monthNames[7]);
assertEquals("September", monthNames[8]);
assertEquals("Oktober", monthNames[9]);
assertEquals("November", monthNames[10]);
assertEquals("Dezember", monthNames[11]);
assertEquals("Jan", monthNames[0]);
assertEquals("Feb", monthNames[1]);
assertEquals("M\u00e4r", monthNames[2]);
assertEquals("Apr", monthNames[3]);
assertEquals("Mai", monthNames[4]);
assertEquals("Jun", monthNames[5]);
assertEquals("Jul", monthNames[6]);
assertEquals("Aug", monthNames[7]);
assertEquals("Sep", monthNames[8]);
assertEquals("Okt", monthNames[9]);
assertEquals("Nov", monthNames[10]);
assertEquals("Dez", monthNames[11]);
assertEquals(Calendar.getInstance().get(Calendar.YEAR), CalendarUtils.INSTANCE.getYear());
assertEquals(expectedTime, actualTime,"locale: " + locale + ", formattedDate: '" + formattedDate + "', originalFormattedDate: '"+ originalFormattedDate + ", simpleDateFormat.pattern: '" + simpleDateFormat + "', Java: "+ SystemUtils.JAVA_RUNTIME_VERSION + "\n");
assertEquals(i++, map.get(parser).intValue());
assertEquals(cal.getTime().getTime(), parser.parse(dateStub + trial.one).getTime() - trial.offset,message + trial.one);
assertEquals(cal.getTime(), parser.parse(dateStub + trial.two), message + trial.two);
assertEquals(cal.getTime(), parser.parse(dateStub + trial.three), message + trial.three);
assertEquals(cal.getTime(), h.parse("2010-08-01 12 AM 33:20"));
assertEquals(cal.getTime(), K.parse("2010-08-01 0 AM 33:20"));
assertEquals(cal.getTime(), k.parse("2010-08-01 00:33:20"));
assertEquals(cal.getTime(), H.parse("2010-08-01 00:33:20"));
assertEquals(cal.getTime(), h.parse("2010-08-01 3 AM 33:20"));
assertEquals(cal.getTime(), K.parse("2010-08-01 3 AM 33:20"));
assertEquals(cal.getTime(), k.parse("2010-08-01 03:33:20"));
assertEquals(cal.getTime(), H.parse("2010-08-01 03:33:20"));
assertEquals(cal.getTime(), h.parse("2010-08-01 3 PM 33:20"));
assertEquals(cal.getTime(), K.parse("2010-08-01 3 PM 33:20"));
assertEquals(cal.getTime(), k.parse("2010-08-01 15:33:20"));
assertEquals(cal.getTime(), H.parse("2010-08-01 15:33:20"));
assertEquals(cal.getTime(), h.parse("2010-08-01 12 PM 33:20"));
assertEquals(cal.getTime(), K.parse("2010-08-01 0 PM 33:20"));
assertEquals(cal.getTime(), k.parse("2010-08-01 12:33:20"));
assertEquals(cal.getTime(), H.parse("2010-08-01 12:33:20"));
assertEquals(Calendar.MONDAY, calendar.get(Calendar.DAY_OF_WEEK));
assertEquals(Calendar.SATURDAY, calendar.get(Calendar.DAY_OF_WEEK));
assertEquals(Calendar.SUNDAY, calendar.get(Calendar.DAY_OF_WEEK));
assertEquals(cal.getTime(), fdf.parse("3 7 2 41 03"));
assertEquals(parser1.hashCode(), parser2.hashCode());
assertNotEquals(parser1, new Object());
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected.getTime(), fdp.parse("14 avril 2014"));
assertEquals(expected.getTime(), fdp.parse("14 avr. 2014"));
assertEquals(expected.getTime(), fdp.parse("14 avr 2014"));
assertEquals(date, parser.parse("2004/11/31"));
assertEquals(cal.getTime(), parser.parse("2009-10-16T16:42:16.000Z"));
assertEquals(expected.getTime(), fdp.parse("14may2014"));
assertEquals(expected.getTime(), fdp.parse("14MAY2014"));
assertEquals(expected.getTime(), fdp.parse("14May2014"));
assertEquals(SWEDEN, parser.getLocale());
assertEquals(cal.getTime(), parser.parse("0001/01/01"));
assertEquals(cal.getTime(), parser.parse("0010/01/01"));
assertEquals(cal.getTime(), parser.parse("0100/01/01"));
assertEquals(cal.getTime(), parser.parse("0999/01/01"));
assertEquals(cal.getTime(), parser.parse("01.01.1000"));
assertEquals(cal.getTime(), fdf.parse("2003 AD February 0010 PM Monday 0015 0033 0020 0989 GMT-05:00"));
assertEquals(cal.getTime(), parse);
assertEquals(cal.getTime(), fdf.parse("03 BC 2 10 PM Sat 15 33 20 989 -0500"));
assertEquals(cal.getTime(), fdf.parse("03 AD 2 10 PM Saturday 15 33 20 989 -0500"));
assertEquals(cal.getTime(), fdf.parse("20030210153320989"));
assertEquals(cal.getTime(), date);
assertEquals("sq_MK", locale.toString());
assertEquals(cal.getTime(), fdf.parse("2003-07-10T15:33:20.000 -0500"));
assertEquals(cal.getTime(), fdf.parse("2003-07-10T15:33:20.000 GMT-05:00"));
assertEquals(cal.getTime(), fdf.parse("2003-07-10T16:33:20.000 Eastern Daylight Time"));
assertEquals(cal.getTime(), fdf.parse("2003-07-10T16:33:20.000 EDT"));
assertEquals(cal.getTime(), fdf.parse("2003-02-10T09:00:00.000 -0300"));
assertEquals(cal.getTime(), fdf.parse("2003-02-10T15:05:06.000 +0500"));
assertEquals(yMdHmsSZ, parser.getPattern());
assertEquals(cal.getTime(), fdf.parse("'20030210A'B153320989'"));
assertEquals((f == null), (s == null), "Should both or neither throw Exceptions");
assertEquals(dsdf, dfdp, "Parsed dates should be equal");
assertEquals(cal.getTime(), fdf.parse("2/3/04"));
assertEquals(cal.getTime(), fdf.parse("2004-02-03"));
assertEquals(REYKJAVIK, parser.getTimeZone());
assertEquals(expected, actual, "timeZone:" + timeZone.getID() + " locale:" + locale.getDisplayName());
assertEquals(inDate, out, "format: '" + formatStr + "', locale: '" + locale + "', time zone: '"+ timeZone.getID() + "', year: " + year + ", parse: '" + fmt);
assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone(TimeZones.GMT_ID));
assertEquals(0, FastTimeZone.getGmtTimeZone().getRawOffset());
assertEquals(HOURS_23, FastTimeZone.getGmtTimeZone("GMT+23:00").getRawOffset());
assertEquals(-HOURS_23, FastTimeZone.getGmtTimeZone("GMT-23:00").getRawOffset());
assertEquals(HOURS_23, FastTimeZone.getGmtTimeZone("23:00").getRawOffset());
assertEquals(HOURS_2, FastTimeZone.getGmtTimeZone("2:00").getRawOffset());
assertEquals(MINUTES_59, FastTimeZone.getGmtTimeZone("00:59").getRawOffset());
assertEquals(MINUTES_5, FastTimeZone.getGmtTimeZone("00:5").getRawOffset());
assertEquals(HOURS_23+MINUTES_59, FastTimeZone.getGmtTimeZone("23:59").getRawOffset());
assertEquals(HOURS_2+MINUTES_5, FastTimeZone.getGmtTimeZone("2:5").getRawOffset());
assertEquals(HOURS_23, FastTimeZone.getGmtTimeZone("2300").getRawOffset());
assertEquals(HOURS_2, FastTimeZone.getGmtTimeZone("0200").getRawOffset());
assertEquals(MINUTES_59, FastTimeZone.getGmtTimeZone("0059").getRawOffset());
assertEquals(MINUTES_5, FastTimeZone.getGmtTimeZone("0005").getRawOffset());
assertEquals(HOURS_23+MINUTES_59, FastTimeZone.getGmtTimeZone("2359").getRawOffset());
assertEquals(HOURS_2+MINUTES_5, FastTimeZone.getGmtTimeZone("0205").getRawOffset());
assertEquals(TimeZone.getTimeZone("America/New_York"), FastTimeZone.getTimeZone("America/New_York"));
assertEquals(HOURS_23, FastTimeZone.getGmtTimeZone("+23:00").getRawOffset());
assertEquals(HOURS_2, FastTimeZone.getGmtTimeZone("+2:00").getRawOffset());
assertEquals(-HOURS_23, FastTimeZone.getGmtTimeZone("-23:00").getRawOffset());
assertEquals(-HOURS_2, FastTimeZone.getGmtTimeZone("-2:00").getRawOffset());
assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone("UTC"));
assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone("Z"));
assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone("+0"));
assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone("-0"));
assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE));
assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DATE));
assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DAY_OF_YEAR));
assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DAY_OF_YEAR));
assertEquals(cal.get(Calendar.DAY_OF_MONTH), testResult);
assertEquals(aCalendar.get(Calendar.DAY_OF_YEAR), testResult);
assertEquals(cal.get(Calendar.DAY_OF_YEAR), testResult);
assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.HOUR_OF_DAY));
assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.HOUR_OF_DAY));
assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.HOUR_OF_DAY));
assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.HOUR_OF_DAY));
assertEquals(expectedValue, testResult);
assertEquals(expectedValue, testResult);
assertEquals(expectedValue, testResult);
assertEquals(expectedValue, testResult);
assertEquals( hours +(((days - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_HOUR,testResult);
assertEquals(hours + (((days - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_HOUR,testResult);
assertEquals( hours +(((aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_HOUR,testResult);
assertEquals(hours + (((cal.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_HOUR,testResult);
assertEquals(0, DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInMilliseconds(aDate, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MILLISECOND));
assertEquals(expectedValue, testresult);
assertEquals(expectedValue, testresult);
assertEquals(expectedValue, testresult);
assertEquals(expectedValue, testresult);
assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);
assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);
assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);
assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);
assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY),testResult);
assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY),testResult);
assertEquals(aCalendar.get(Calendar.MILLISECOND), testResult);
assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR) + ((aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY),testResult);
assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR) + ((cal.get(Calendar.DAY_OF_YEAR) - 1)* DateUtils.MILLIS_PER_DAY),testResult);
assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MINUTE));
assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MINUTE));
assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MINUTE));
assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE));
assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE));
assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE));
assertEquals(expectedValue, testResult);
assertEquals(expectedValue, testResult);
assertEquals(expectedValue, testResult);
assertEquals(expectedValue, testResult);
assertEquals(minutes, testResult);
assertEquals(minutes, testResult);
assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_MINUTE,testResult);
assertEquals(minutes+ ((hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_MINUTE,testResult);
assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + ((aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_MINUTE,testResult);
assertEquals(minutes+ ((hours * DateUtils.MILLIS_PER_HOUR) + ((cal.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_MINUTE,testResult);
assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.SECOND));
assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.SECOND));
assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.SECOND));
assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.SECOND));
assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.SECOND));
assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.SECOND));
assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.SECOND));
assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.SECOND));
assertEquals(expectedValue, testresult);
assertEquals(expectedValue, testresult);
assertEquals(expectedValue, testresult);
assertEquals(expectedValue, testresult);
assertEquals(seconds+ (minutes* DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),testResult);
assertEquals(seconds+ (minutes* DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),testResult);
assertEquals(seconds, testResult);
assertEquals(aCalendar.get(Calendar.SECOND), testResult);
assertEquals(seconds, testResult);
assertEquals(seconds+ ((minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_SECOND,testResult);
assertEquals(seconds+ ((minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_SECOND,testResult);
assertEquals(seconds+ ((minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR) + ((aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_SECOND,testResult);
assertEquals(seconds+ ((minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR) + ((cal.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_SECOND,testResult);
assertEquals(roundedDownDate, DateUtils.round(roundedDownDate, calendarField));
assertEquals(roundedUpDate, DateUtils.round(roundedUpDate, calendarField));
assertEquals(roundedDownDate, DateUtils.round(lastRoundDownDate, calendarField));
assertEquals(roundedUpDate, DateUtils.round(firstRoundUpDate, calendarField));
assertEquals(roundedDownCalendar, DateUtils.round(roundedDownCalendar, calendarField));
assertEquals(roundedUpCalendar, DateUtils.round(roundedUpCalendar, calendarField));
assertEquals(roundedDownCalendar, DateUtils.round(lastRoundDownCalendar, calendarField));
assertEquals(roundedUpCalendar, DateUtils.round(firstRoundUpCalendar, calendarField));
assertEquals(roundedDownDate, DateUtils.round((Object) roundedDownDate, calendarField));
assertEquals(roundedUpDate, DateUtils.round((Object) roundedUpDate, calendarField));
assertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));
assertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));
assertEquals(roundedDownDate, DateUtils.round((Object) roundedDownCalendar, calendarField));
assertEquals(roundedUpDate, DateUtils.round((Object) roundedUpCalendar, calendarField));
assertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));
assertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));
assertEquals(truncatedDate, DateUtils.truncate(truncatedDate, calendarField), "Truncating "+ fdf.format(truncatedDate) +" as Date with CalendarField-value "+ calendarField +" must return itself");
assertEquals(truncatedDate, DateUtils.truncate(lastTruncateDate, calendarField));
assertNotEquals(truncatedDate, DateUtils.truncate(nextTruncateDate, calendarField), fdf.format(lastTruncateDate) + " is not an extreme when truncating as Date with CalendarField-value " + calendarField);
assertEquals(truncatedCalendar, DateUtils.truncate(truncatedCalendar, calendarField), "Truncating "+ fdf.format(truncatedCalendar) +" as Calendar with CalendarField-value "+ calendarField +" must return itself");
assertEquals(truncatedCalendar, DateUtils.truncate(lastTruncateCalendar, calendarField));
assertNotEquals(truncatedCalendar, DateUtils.truncate(nextTruncateCalendar, calendarField), fdf.format(lastTruncateCalendar) + " is not an extreme when truncating as Calendar with CalendarField-value " + calendarField);
assertEquals(truncatedDate, DateUtils.truncate((Object) truncatedDate, calendarField), "Truncating "+ fdf.format(truncatedDate) +" as Date cast to Object with CalendarField-value "+ calendarField +" must return itself as Date");
assertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateDate, calendarField));
assertNotEquals(truncatedDate, DateUtils.truncate((Object) nextTruncateDate, calendarField), fdf.format(lastTruncateDate) + " is not an extreme when truncating as Date cast to Object with CalendarField-value " + calendarField);
assertEquals(truncatedDate, DateUtils.truncate((Object) truncatedCalendar, calendarField), "Truncating "+ fdf.format(truncatedCalendar) +" as Calendar cast to Object with CalendarField-value "+ calendarField +" must return itself as Date");
assertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateCalendar, calendarField));
assertNotEquals(truncatedDate, DateUtils.truncate((Object) nextTruncateCalendar, calendarField), fdf.format(lastTruncateCalendar) + " is not an extreme when truncating as Calendar cast to Object with CalendarField-value " + calendarField);
assertEquals(januaryOneDate, DateUtils.round(januaryOneDate, calendarField), "Rounding "+ fdf.format(januaryOneDate) +" as Date with CalendarField-value "+ calendarField +" must return itself");
assertEquals(januaryOneDate, DateUtils.round(minDate, calendarField));
assertEquals(januaryOneDate, DateUtils.round(maxDate, calendarField));
assertEquals(januaryOneCalendar, DateUtils.round(januaryOneCalendar, calendarField), "Rounding "+ fdf.format(januaryOneCalendar) +" as Date with CalendarField-value "+ calendarField +" must return itself");
assertEquals(januaryOneCalendar, DateUtils.round(minCalendar, calendarField));
assertEquals(januaryOneCalendar, DateUtils.round(maxCalendar, calendarField));
assertNotEquals(januaryOneDate, DateUtils.round(toPrevRoundDate, calendarField), fdf.format(minDate) + " is not an lower-extreme when rounding as Date with CalendarField-value " + calendarField);
assertNotEquals(januaryOneDate, DateUtils.round(toNextRoundDate, calendarField), fdf.format(maxDate) + " is not an upper-extreme when rounding as Date with CalendarField-value " + calendarField);
assertNotEquals(januaryOneDate, DateUtils.round(toPrevRoundDate, calendarField), fdf.format(minCalendar) + " is not an lower-extreme when rounding as Date with CalendarField-value " + calendarField);
assertNotEquals(januaryOneDate, DateUtils.round(toNextRoundDate, calendarField), fdf.format(maxCalendar) + " is not an upper-extreme when rounding as Date with CalendarField-value " + calendarField);
private void assertEqualDuration(final String expected, final int[] start, final int[] end, final String format) {assertEqualDuration(null, expected, start, end, format);
private void assertEqualDuration(final String message, final String expected, final int[] start, final int[] end, final String format) {final Calendar cal1 = Calendar.getInstance();
assertEquals(expected, result);
assertEquals(expected, result, message);
assertEqualDuration( tmpMsg + i, Integer.toString(i), array1, array2, format );
assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS");
assertEqualDuration( "01", new int[] { 2006, 0, 15, 0, 0, 0 },new int[] { 2006, 2, 10, 0, 0, 0 }, "MM");
assertEqualDuration( "12", new int[] { 2005, 0, 15, 0, 0, 0 },new int[] { 2006, 0, 15, 0, 0, 0 }, "MM");
assertEqualDuration( "12", new int[] { 2005, 0, 15, 0, 0, 0 },new int[] { 2006, 0, 16, 0, 0, 0 }, "MM");
assertEqualDuration( "11", new int[] { 2005, 0, 15, 0, 0, 0 },new int[] { 2006, 0, 14, 0, 0, 0 }, "MM");
assertEqualDuration( "01 26", new int[] { 2006, 0, 15, 0, 0, 0 },new int[] { 2006, 2, 10, 0, 0, 0 }, "MM dd");
assertEqualDuration( "54", new int[] { 2006, 0, 15, 0, 0, 0 },new int[] { 2006, 2, 10, 0, 0, 0 }, "dd");
assertEqualDuration( "09 12", new int[] { 2006, 1, 20, 0, 0, 0 },new int[] { 2006, 11, 4, 0, 0, 0 }, "MM dd");
assertEqualDuration( "287", new int[] { 2006, 1, 20, 0, 0, 0 },new int[] { 2006, 11, 4, 0, 0, 0 }, "dd");
assertEqualDuration( "11 30", new int[] { 2006, 0, 2, 0, 0, 0 },new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd");
assertEqualDuration( "364", new int[] { 2006, 0, 2, 0, 0, 0 },new int[] { 2007, 0, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "12 00", new int[] { 2006, 0, 1, 0, 0, 0 },new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd");
assertEqualDuration( "365", new int[] { 2006, 0, 1, 0, 0, 0 },new int[] { 2007, 0, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "31", new int[] { 2006, 0, 1, 0, 0, 0 },new int[] { 2006, 1, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "92", new int[] { 2005, 9, 1, 0, 0, 0 },new int[] { 2006, 0, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "77", new int[] { 2005, 9, 16, 0, 0, 0 },new int[] { 2006, 0, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "136", new int[] { 2005, 9, 16, 0, 0, 0 },new int[] { 2006, 2, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "136", new int[] { 2004, 9, 16, 0, 0, 0 },new int[] { 2005, 2, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "137", new int[] { 2003, 9, 16, 0, 0, 0 },new int[] { 2004, 2, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "135", new int[] { 2003, 9, 16, 0, 0, 0 },new int[] { 2004, 1, 28, 0, 0, 0 }, "dd");
assertEqualDuration( "364", new int[] { 2007, 0, 2, 0, 0, 0 },new int[] { 2008, 0, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "729", new int[] { 2006, 0, 2, 0, 0, 0 },new int[] { 2008, 0, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "365", new int[] { 2007, 2, 2, 0, 0, 0 },new int[] { 2008, 2, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "333", new int[] { 2007, 1, 2, 0, 0, 0 },new int[] { 2008, 0, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "28", new int[] { 2008, 1, 2, 0, 0, 0 },new int[] { 2008, 2, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "393", new int[] { 2007, 1, 2, 0, 0, 0 },new int[] { 2008, 2, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "369", new int[] { 2004, 0, 29, 0, 0, 0 },new int[] { 2005, 1, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "338", new int[] { 2004, 1, 29, 0, 0, 0 },new int[] { 2005, 1, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "28", new int[] { 2004, 2, 8, 0, 0, 0 },new int[] { 2004, 3, 5, 0, 0, 0 }, "dd");
assertEqualDuration( "48", new int[] { 1992, 1, 29, 0, 0, 0 },new int[] { 1996, 1, 29, 0, 0, 0 }, "M");
assertEqualDuration( "11", new int[] { 1996, 1, 29, 0, 0, 0 },new int[] { 1997, 1, 28, 0, 0, 0 }, "M");
assertEqualDuration( "11 28", new int[] { 1996, 1, 29, 0, 0, 0 },new int[] { 1997, 1, 28, 0, 0, 0 }, "M d");
assertEquals("0", DurationFormatUtils.formatDuration(duration, "y"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "M"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "d"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "H"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "m"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "s"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "S"));
assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS"));
assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy"));
assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "y"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "M"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "d"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "H"));
assertEquals("1", DurationFormatUtils.formatDuration(duration, "m"));
assertEquals("60", DurationFormatUtils.formatDuration(duration, "s"));
assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S"));
assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss"));
assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d"));
assertEquals("00:00:00.000", DurationFormatUtils.formatDurationHMS(time));
assertEquals("00:00:00.001", DurationFormatUtils.formatDurationHMS(time));
assertEquals("00:00:00.015", DurationFormatUtils.formatDurationHMS(time));
assertEquals("00:00:00.165", DurationFormatUtils.formatDurationHMS(time));
assertEquals("00:00:01.675", DurationFormatUtils.formatDurationHMS(time));
assertEquals("00:00:13.465", DurationFormatUtils.formatDurationHMS(time));
assertEquals("00:01:12.789", DurationFormatUtils.formatDurationHMS(time));
assertEquals("00:32:12.789", DurationFormatUtils.formatDurationHMS(time));
assertEquals("01:02:12.789", DurationFormatUtils.formatDurationHMS(time));
assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatDurationISO(0L));
assertEquals("P0Y0M0DT0H0M0.001S", DurationFormatUtils.formatDurationISO(1L));
assertEquals("P0Y0M0DT0H0M0.010S", DurationFormatUtils.formatDurationISO(10L));
assertEquals("P0Y0M0DT0H0M0.100S", DurationFormatUtils.formatDurationISO(100L));
assertEquals("P0Y0M0DT0H1M15.321S", DurationFormatUtils.formatDurationISO(75321L));
assertEquals("0 days 0 hours 0 minutes 1 second", text);
assertEquals("0 days 0 hours 0 minutes 2 seconds", text);
assertEquals("0 days 0 hours 0 minutes 11 seconds", text);
assertEquals("0 days 0 hours 1 minute 0 seconds", text);
assertEquals("0 days 0 hours 2 minutes 0 seconds", text);
assertEquals("0 days 0 hours 11 minutes 0 seconds", text);
assertEquals("0 days 0 hours 1 minute 1 second", text);
assertEquals("0 days 1 hour 0 minutes 0 seconds", text);
assertEquals("0 days 2 hours 0 minutes 0 seconds", text);
assertEquals("0 days 11 hours 0 minutes 0 seconds", text);
assertEquals("0 days 1 hour 1 minute 1 second", text);
assertEquals("1 day 0 hours 0 minutes 0 seconds", text);
assertEquals("2 days 0 hours 0 minutes 0 seconds", text);
assertEquals("11 days 0 hours 0 minutes 0 seconds", text);
assertEquals("1 day 1 hour 1 minute 1 second", text);
assertEquals("50 seconds", text);
assertEquals("1 minute 5 seconds", text);
assertEquals("2 minutes 0 seconds", text);
assertEquals("2 minutes 1 second", text);
assertEquals("1 hour 12 minutes 0 seconds", text);
assertEquals("1 day 0 hours 0 minutes 0 seconds", text);
assertEquals("50 seconds", text);
assertEquals("1 minute 5 seconds", text);
assertEquals("2 minutes", text);
assertEquals("2 minutes 1 second", text);
assertEquals("1 hour 12 minutes", text);
assertEquals("1 day", text);
assertEquals("0 days 0 hours 0 minutes 50 seconds", text);
assertEquals("0 days 0 hours 1 minute 5 seconds", text);
assertEquals("0 days 0 hours 2 minutes", text);
assertEquals("0 days 0 hours 2 minutes 1 second", text);
assertEquals("0 days 1 hour 12 minutes", text);
assertEquals("1 day", text);
assertEquals("0 days 0 hours 0 minutes 50 seconds", text);
assertEquals("0 days 0 hours 1 minute 5 seconds", text);
assertEquals("0 days 0 hours 2 minutes 0 seconds", text);
assertEquals("0 days 0 hours 2 minutes 1 second", text);
assertEquals("0 days 1 hour 12 minutes 0 seconds", text);
assertEquals("1 day 1 hour 12 minutes 0 seconds", text);
assertEquals("2 days 1 hour 12 minutes 0 seconds", text);
assertEquals(i + " days 0 hours 0 minutes 0 seconds", text);
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "y"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "M"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "d"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "H"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "m"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "s"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "S"));
assertEquals("0000", DurationFormatUtils.formatPeriod(time1970, time1970, "SSSS"));
assertEquals("0000", DurationFormatUtils.formatPeriod(time1970, time1970, "yyyy"));
assertEquals("0000", DurationFormatUtils.formatPeriod(time1970, time1970, "yyMM"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "y"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "M"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "d"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "H"));
assertEquals("1", DurationFormatUtils.formatPeriod(time1970, time, "m"));
assertEquals("60", DurationFormatUtils.formatPeriod(time1970, time, "s"));
assertEquals("60000", DurationFormatUtils.formatPeriod(time1970, time, "S"));
assertEquals("01:00", DurationFormatUtils.formatPeriod(time1970, time, "mm:ss"));
assertEquals("36", DurationFormatUtils.formatPeriod(time1970, time, "yM"));
assertEquals("3 years 6 months", DurationFormatUtils.formatPeriod(time1970, time, "y' years 'M' months'"));
assertEquals("03/06", DurationFormatUtils.formatPeriod(time1970, time, "yy/MM"));
assertEquals("310", DurationFormatUtils.formatPeriod(time1970, time, "yM"));
assertEquals("3 years 10 months", DurationFormatUtils.formatPeriod(time1970, time, "y' years 'M' months'"));
assertEquals("03/10", DurationFormatUtils.formatPeriod(time1970, time, "yy/MM"));
assertEquals("40", DurationFormatUtils.formatPeriod(time1970, time, "yM"));
assertEquals("4 years 0 months", DurationFormatUtils.formatPeriod(time1970, time, "y' years 'M' months'"));
assertEquals("04/00", DurationFormatUtils.formatPeriod(time1970, time, "yy/MM"));
assertEquals("48", DurationFormatUtils.formatPeriod(time1970, time, "M"));
assertEquals("48", DurationFormatUtils.formatPeriod(time1970, time, "MM"));
assertEquals("048", DurationFormatUtils.formatPeriod(time1970, time, "MMM"));
assertEquals("2002-02-23T09:11:12-03:00", text);
assertEquals("P32Y1M22DT9H11M12.001S", text);
assertEquals("P1Y1M2DT10H30M0.000S", text);
// assertEquals("P1Y2M3DT10H30M", text);
assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatPeriodISO(0L, 0L));
assertEquals("P0Y0M0DT0H0M1.000S", DurationFormatUtils.formatPeriodISO(0L, 1000L));
assertEquals("P0Y0M0DT0H1M1.000S", DurationFormatUtils.formatPeriodISO(0L, 61000L));
assertEqualDuration( "09", new int[] { 2005, 11, 31, 0, 0, 0 },new int[] { 2006, 9, 6, 0, 0, 0 }, "MM");
assertEquals("1 9", DurationFormatUtils.formatPeriod(startMillis, endMillis, "M d"));
assertEquals("61.999", DurationFormatUtils.formatDuration(61999, "s.S"));
assertEquals("1 1999", DurationFormatUtils.formatDuration(61999, "m S"));
assertEquals("61.999", DurationFormatUtils.formatDuration(61999, "s.SSS"));
assertEquals("1 1999", DurationFormatUtils.formatDuration(61999, "m SSS"));
assertEquals("61.0999", DurationFormatUtils.formatDuration(61999, "s.SSSS"));
assertEquals("1 1999", DurationFormatUtils.formatDuration(61999, "m SSSS"));
assertEquals("61.00999", DurationFormatUtils.formatDuration(61999, "s.SSSSS"));
assertEquals("1 01999", DurationFormatUtils.formatDuration(61999, "m SSSSS"));
assertEquals("0", DurationFormatUtils.formatDuration(0, "S"));
assertEquals(Integer.toString(Integer.MAX_VALUE), DurationFormatUtils.formatDuration(Integer.MAX_VALUE, "S"));
assertEquals(Long.toString(maxIntPlus), DurationFormatUtils.formatDuration(maxIntPlus, "S"));
assertEquals(Long.toString(Long.MAX_VALUE), DurationFormatUtils.formatDuration(Long.MAX_VALUE, "S"));
assertArrayEquals(new DurationFormatUtils.Token[]{new DurationFormatUtils.Token(DurationFormatUtils.y, 1),new DurationFormatUtils.Token(DurationFormatUtils.M, 1),new DurationFormatUtils.Token(DurationFormatUtils.d, 1),new DurationFormatUtils.Token(DurationFormatUtils.H, 1),new DurationFormatUtils.Token(DurationFormatUtils.m, 1),new DurationFormatUtils.Token(DurationFormatUtils.s, 1),new DurationFormatUtils.Token(DurationFormatUtils.S, 1)}, DurationFormatUtils.lexx("yMdHmsS"));
assertArrayEquals(new DurationFormatUtils.Token[]{new DurationFormatUtils.Token(DurationFormatUtils.H, 2),new DurationFormatUtils.Token(new StringBuilder(":"), 1),new DurationFormatUtils.Token(DurationFormatUtils.m, 2),new DurationFormatUtils.Token(new StringBuilder(":"), 1),new DurationFormatUtils.Token(DurationFormatUtils.s, 2),new DurationFormatUtils.Token(new StringBuilder("."), 1),new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx("HH:mm:ss.SSS"));
assertArrayEquals(new DurationFormatUtils.Token[]{new DurationFormatUtils.Token(new StringBuilder("P"), 1),new DurationFormatUtils.Token(DurationFormatUtils.y, 4),new DurationFormatUtils.Token(new StringBuilder("Y"), 1),new DurationFormatUtils.Token(DurationFormatUtils.M, 1),new DurationFormatUtils.Token(new StringBuilder("M"), 1),new DurationFormatUtils.Token(DurationFormatUtils.d, 1),new DurationFormatUtils.Token(new StringBuilder("DT"), 1),new DurationFormatUtils.Token(DurationFormatUtils.H, 1),new DurationFormatUtils.Token(new StringBuilder("H"), 1),new DurationFormatUtils.Token(DurationFormatUtils.m, 1),new DurationFormatUtils.Token(new StringBuilder("M"), 1),new DurationFormatUtils.Token(DurationFormatUtils.s, 1),new DurationFormatUtils.Token(new StringBuilder("."), 1),new DurationFormatUtils.Token(DurationFormatUtils.S, 3),new DurationFormatUtils.Token(new StringBuilder("S"), 1)}, DurationFormatUtils.lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN));
assertNotEquals(token, new Object(), "Token equal to non-Token class. ");
assertNotEquals(token, new DurationFormatUtils.Token(new Object()), "Token equal to Token with wrong value class. ");
assertNotEquals(token, new DurationFormatUtils.Token(DurationFormatUtils.y, 1), "Token equal to Token with different count. ");
assertEquals(numToken, numToken, "Token with Number value not equal to itself. ");
assertEqualDuration( hr + ":" + min + ":" + sec,new int[] { 2000, 0, 1, 0, 0, 0, 0 },new int[] { 2000, 0, 1, hr, min, sec },"H:m:s");
assertEquals(trial.three, printer.format(cal));
assertEquals(expected, format.format(date, sb).toString());
assertEquals(expected, format.format(epoch, sb).toString());
assertEquals("1", printer.format(calendar.getTime()));
assertEquals("6", printer.format(calendar.getTime()));
assertEquals("7", printer.format(calendar.getTime()));
assertEquals(printer1.hashCode(), printer2.hashCode());
assertNotEquals(printer1, new Object());
assertEquals("2003-01-10T15:33:20", fdf.format(date1));
assertEquals("2003-01-10T15:33:20", fdf.format(cal1));
assertEquals("2003-01-10T15:33:20", fdf.format(millis1));
assertEquals("2003-07-10T09:00:00", fdf.format(date2));
assertEquals("2003-07-10T09:00:00", fdf.format(cal2));
assertEquals("2003-07-10T09:00:00", fdf.format(millis2));
assertEquals("-0500", fdf.format(date1));
assertEquals("-0500", fdf.format(cal1));
assertEquals("-0500", fdf.format(millis1));
assertEquals("-0400", fdf.format(date2));
assertEquals("-0400", fdf.format(cal2));
assertEquals("-0400", fdf.format(millis2));
assertEquals("-05:00", fdf.format(date1));
assertEquals("-05:00", fdf.format(cal1));
assertEquals("-05:00", fdf.format(millis1));
assertEquals("-04:00", fdf.format(date2));
assertEquals("-04:00", fdf.format(cal2));
assertEquals("-04:00", fdf.format(millis2));
assertEquals(sdf.format(date1).replace("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));
assertEquals(sdf.format(date2).replace("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));
assertEquals("0 24 0 12", printer.format(calendar));
assertEquals("0 12 12 12", printer.format(calendar));
assertEquals("11 23 23 11", printer.format(calendar));
assertEquals("2", getInstance("d", SWEDEN).format(cal));
assertEquals("02", getInstance("dd", SWEDEN).format(cal));
assertEquals("002", getInstance("ddd", SWEDEN).format(cal));
assertEquals("0002", getInstance("dddd", SWEDEN).format(cal));
assertEquals("00002", getInstance("ddddd", SWEDEN).format(cal));
assertEquals("2009-10-16T16:42:16.000Z", format.format(cal.getTime()), "dateTime");
assertEquals("2009-10-16T16:42:16.000Z", format.format(cal), "dateTime");
assertEquals("fredag, week 53", fdf.format(d));
assertEquals("2009-10-16T08:42:16 +0200", value, "calendar");
assertEquals("2009-10-16T12:12:16 +0530", value, "calendar");
assertEquals("2009-10-16T07:42:16 +0100", value, "calendar");
assertEquals(SWEDEN, printer.getLocale());
assertEquals("0001/01/01", format.format(cal));
assertEquals("0010/01/01", format.format(cal));
assertEquals("0100/01/01", format.format(cal));
assertEquals("0999/01/01", format.format(cal));
assertEquals("01.01.1000", format.format(cal));
assertEquals(YYYY_MM_DD, printer.getPattern());
assertEquals("2/3/04", fdf.format(cal));
assertEquals("2004-02-03", fdf.format(cal));
assertEquals("2004/12/31", format.format(cal));
assertEquals("0999/12/31", format.format(cal));
assertEquals("0001/03/02", format.format(cal));
assertEquals(expected, format.format(calendar, sb).toString());
assertEquals(expected, format.format(date, sb, new FieldPosition(0)).toString());
assertEquals(expected, format.format(date, sb).toString());
assertEquals(expected, format.format(epoch, sb, new FieldPosition(0)).toString());
assertEquals(expected, format.format(epoch, sb).toString());
assertEquals("+0000", noColonFormat.format(c));
assertEquals("Z", isoFormat.format(c));
assertEquals("+00:00", colonFormat.format(c));
assertEquals(NEW_YORK, printer.getTimeZone());
assertEquals("2021", printer4Digits.format(cal));
assertEquals("2021", printer4DigitsFallback.format(cal));
assertEquals("2021", printer4DigitAnotherFallback.format(cal));
assertEquals("21", printer2Digits.format(cal));
assertEquals(suspendTime, totalTime);
assertEquals(MESSAGE, stopWatch.getMessage());
assertEquals(stopTime, watch.getStopTime());
assertEquals(2L, watch.getTime(TimeUnit.HOURS));
assertEquals(179L, watch.getTime(TimeUnit.MINUTES));
assertEquals(10741L, watch.getTime(TimeUnit.SECONDS));
assertEquals(10741999L, watch.getTime(TimeUnit.MILLISECONDS));
assertEquals(time, watch.getTime());
assertEquals(splitStr.length(), 12, "Formatted split string not the correct length");
assertEquals(splitStr.length(), 12, "Formatted split string not the correct length");
assertEquals(splitStr.length(), 12 + MESSAGE.length() + 1, "Formatted split string not the correct length");
assertEquals(splitStr.length(), 12, "Formatted split string not the correct length");
assertEquals(splitStr.length(), 12 + MESSAGE.length() + 1, "Formatted split string not the correct length");
assertSame(Locale.GERMANY, format1.getLocale());
assertEquals(Locale.US, format2.getLocale());
assertSame(Locale.GERMANY, format3.getLocale());
assertSame(Locale.GERMANY, format1.getLocale());
assertEquals(Locale.US, format2.getLocale());
assertSame(Locale.GERMANY, format3.getLocale());
assertEquals("MM/DD/yyyy", format1.getPattern());
assertEquals(TimeZone.getDefault(), format1.getTimeZone());
assertEquals(TimeZone.getDefault(), format2.getTimeZone());
assertEquals(Locale.GERMANY, format1.getLocale());
assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone());
assertEquals(TimeZone.getDefault(), format2.getTimeZone());
assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone());
assertEquals(TimeZone.getDefault(), format2.getTimeZone());
assertEquals(TimeZone.getDefault(), format3.getTimeZone());
assertEquals(Locale.GERMANY, format1.getLocale());
assertEquals(Locale.GERMANY, format2.getLocale());
assertEquals(Locale.GERMANY, format3.getLocale());
assertEquals(sdf.toPattern(), format.getPattern());
assertEquals(Locale.getDefault(), format.getLocale());
assertEquals(TimeZone.getDefault(), format.getTimeZone());
assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA),FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA));
assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")),FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault()));
assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG),FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault()));
assertEquals("292278994-08-17", dateAsString);
assertEquals("17/08/292278994", dateAsString);
assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA),FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA));
assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")),FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault()));
assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM),FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault()));
assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA),FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA));
assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")),FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault()));
assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG),FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault()));
assertEquals("1970-Sep-15", dateAsString);
assertEquals("1970-syys-15", dateAsString);
assertEquals("1970-szept.-15", dateAsString);
assertEquals("1970-September-15", dateAsString);
assertEquals("1970-syyskuu-15", dateAsString);
assertEquals("1970-szeptember-15", dateAsString);
assertEquals(expectedValue, actualValue);
private static void assertWeekIterator(final Iterator<?> it, final Calendar start) {final Calendar end = (Calendar) start.clone();
assertWeekIterator(it, start, end);
private static void assertWeekIterator(final Iterator<?> it, final Calendar start, final Calendar end) {Calendar cal = (Calendar) it.next();
assertCalendarsEquals("", start, cal, 0);
assertCalendarsEquals("", cal, DateUtils.truncate(cal, Calendar.DATE), 0);
assertCalendarsEquals("", last, cal, 0);
assertCalendarsEquals("", end, cal, 0);
private static void assertWeekIterator(final Iterator<?> it, final Date start, final Date end) {final Calendar calStart = Calendar.getInstance();
assertWeekIterator(it, calStart, calEnd);
private void assertDate(final Date date, final int year, final int month, final int day, final int hour, final int min, final int sec, final int mil) {final GregorianCalendar cal = new GregorianCalendar();
assertEquals(year, cal.get(Calendar.YEAR));
assertEquals(sec, cal.get(Calendar.SECOND));
assertDate(result, 2000, 5, 28, 4, 3, 2, 1);   // june
assertEquals(dateTimeParser.parse("March 28, 2002 14:00:00.000"),DateUtils.ceiling(dateTimeParser.parse("March 28, 2002 13:45:01.231"),Calendar.HOUR),"ceiling javadoc-1 failed");
assertEquals(dateTimeParser.parse("April 1, 2002 00:00:00.000"),DateUtils.ceiling(dateTimeParser.parse("March 28, 2002 13:45:01.231"),Calendar.MONTH),"ceiling javadoc-2 failed");
assertEquals(dateParser.parse("January 1, 2003"),DateUtils.ceiling(date1, Calendar.YEAR),"ceiling year-1 failed");
assertEquals(dateParser.parse("January 1, 2002"),DateUtils.ceiling(date2, Calendar.YEAR),"ceiling year-2 failed");
assertEquals(dateParser.parse("March 1, 2002"),DateUtils.ceiling(date1, Calendar.MONTH),"ceiling month-1 failed");
assertEquals(dateParser.parse("December 1, 2001"),DateUtils.ceiling(date2, Calendar.MONTH),"ceiling month-2 failed");
assertEquals(dateParser.parse("February 16, 2002"),DateUtils.ceiling(date1, DateUtils.SEMI_MONTH),"ceiling semimonth-1 failed");
assertEquals(dateParser.parse("December 1, 2001"),DateUtils.ceiling(date2, DateUtils.SEMI_MONTH),"ceiling semimonth-2 failed");
assertEquals(dateParser.parse("February 13, 2002"),DateUtils.ceiling(date1, Calendar.DATE),"ceiling date-1 failed");
assertEquals(dateParser.parse("November 19, 2001"),DateUtils.ceiling(date2, Calendar.DATE),"ceiling date-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 13:00:00.000"),DateUtils.ceiling(date1, Calendar.HOUR),"ceiling hour-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 2:00:00.000"),DateUtils.ceiling(date2, Calendar.HOUR),"ceiling hour-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:35:00.000"),DateUtils.ceiling(date1, Calendar.MINUTE),"ceiling minute-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:24:00.000"),DateUtils.ceiling(date2, Calendar.MINUTE),"ceiling minute-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:57.000"),DateUtils.ceiling(date1, Calendar.SECOND),"ceiling second-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:12.000"),DateUtils.ceiling(date2, Calendar.SECOND),"ceiling second-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.ceiling(dateAmPm1, Calendar.AM_PM),"ceiling ampm-1 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.ceiling(dateAmPm2, Calendar.AM_PM),"ceiling ampm-2 failed");
assertEquals(dateTimeParser.parse("February 4, 2002 00:00:00.000"),DateUtils.ceiling(dateAmPm3, Calendar.AM_PM),"ceiling ampm-3 failed");
assertEquals(dateTimeParser.parse("February 4, 2002 00:00:00.000"),DateUtils.ceiling(dateAmPm4, Calendar.AM_PM),"ceiling ampm-4 failed");
assertEquals(dateParser.parse("January 1, 2003"),DateUtils.ceiling((Object) date1, Calendar.YEAR),"ceiling year-1 failed");
assertEquals(dateParser.parse("January 1, 2002"),DateUtils.ceiling((Object) date2, Calendar.YEAR),"ceiling year-2 failed");
assertEquals(dateParser.parse("March 1, 2002"),DateUtils.ceiling((Object) date1, Calendar.MONTH),"ceiling month-1 failed");
assertEquals(dateParser.parse("December 1, 2001"),DateUtils.ceiling((Object) date2, Calendar.MONTH),"ceiling month-2 failed");
assertEquals(dateParser.parse("February 16, 2002"),DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH),"ceiling semimonth-1 failed");
assertEquals(dateParser.parse("December 1, 2001"),DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH),"ceiling semimonth-2 failed");
assertEquals(dateParser.parse("February 13, 2002"),DateUtils.ceiling((Object) date1, Calendar.DATE),"ceiling date-1 failed");
assertEquals(dateParser.parse("November 19, 2001"),DateUtils.ceiling((Object) date2, Calendar.DATE),"ceiling date-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 13:00:00.000"),DateUtils.ceiling((Object) date1, Calendar.HOUR),"ceiling hour-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 2:00:00.000"),DateUtils.ceiling((Object) date2, Calendar.HOUR),"ceiling hour-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:35:00.000"),DateUtils.ceiling((Object) date1, Calendar.MINUTE),"ceiling minute-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:24:00.000"),DateUtils.ceiling((Object) date2, Calendar.MINUTE),"ceiling minute-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:57.000"),DateUtils.ceiling((Object) date1, Calendar.SECOND),"ceiling second-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:12.000"),DateUtils.ceiling((Object) date2, Calendar.SECOND),"ceiling second-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM),"ceiling ampm-1 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM),"ceiling ampm-2 failed");
assertEquals(dateTimeParser.parse("February 4, 2002 00:00:00.000"),DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM),"ceiling ampm-3 failed");
assertEquals(dateTimeParser.parse("February 4, 2002 00:00:00.000"),DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM),"ceiling ampm-4 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:57.000"),DateUtils.ceiling((Object) cal1, Calendar.SECOND),"ceiling calendar second-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:12.000"),DateUtils.ceiling((Object) cal2, Calendar.SECOND),"ceiling calendar second-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM),"ceiling ampm-1 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM),"ceiling ampm-2 failed");
assertEquals(dateTimeParser.parse("February 4, 2002 00:00:00.000"),DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM),"ceiling ampm-3 failed");
assertEquals(dateTimeParser.parse("February 4, 2002 00:00:00.000"),DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM),"ceiling ampm-4 failed");
assertEquals(dateTimeParser.parse("March 31, 2003 00:00:00.000"),DateUtils.ceiling(date4, Calendar.DATE),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 31, 2003 00:00:00.000"),DateUtils.ceiling((Object) cal4, Calendar.DATE),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 31, 2003 00:00:00.000"),DateUtils.ceiling(date5, Calendar.DATE),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 31, 2003 00:00:00.000"),DateUtils.ceiling((Object) cal5, Calendar.DATE),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 31, 2003 00:00:00.000"),DateUtils.ceiling(date6, Calendar.DATE),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 31, 2003 00:00:00.000"),DateUtils.ceiling((Object) cal6, Calendar.DATE),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 31, 2003 00:00:00.000"),DateUtils.ceiling(date7, Calendar.DATE),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 31, 2003 00:00:00.000"),DateUtils.ceiling((Object) cal7, Calendar.DATE),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 03:00:00.000"),DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 03:00:00.000"),DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 03:00:00.000"),DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 03:00:00.000"),DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 04:00:00.000"),DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 04:00:00.000"),DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 04:00:00.000"),DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 04:00:00.000"),DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY),"ceiling MET date across DST change-over");
assertEquals(d.getTime(), d2.getTime() + d.getTime() % 1000, "Date not equal to itself ISO formatted and parsed");
assertWeekIterator(it,dateParser.parse("January 27, 2002"),dateParser.parse("March 2, 2002"));
assertWeekIterator(it,dateParser.parse("January 28, 2002"),dateParser.parse("March 3, 2002"));
assertWeekIterator(it,dateParser.parse("October 28, 2001"),dateParser.parse("December 1, 2001"));
assertWeekIterator(it,dateParser.parse("October 29, 2001"),dateParser.parse("December 2, 2001"));
assertEquals(cal.getTime(), date);
assertEquals(cal.getTime(), date);
assertEquals(cal.getTime(), date);
assertEquals(cal.getTime(), date);
assertEquals(dateParser.parse("January 1, 2002"),DateUtils.round(date1, Calendar.YEAR),"round year-1 failed");
assertEquals(dateParser.parse("January 1, 2002"),DateUtils.round(date2, Calendar.YEAR),"round year-2 failed");
assertEquals(dateParser.parse("February 1, 2002"),DateUtils.round(date1, Calendar.MONTH),"round month-1 failed");
assertEquals(dateParser.parse("December 1, 2001"),DateUtils.round(date2, Calendar.MONTH),"round month-2 failed");
assertEquals(dateParser.parse("February 1, 2002"),DateUtils.round(date0, DateUtils.SEMI_MONTH),"round semimonth-0 failed");
assertEquals(dateParser.parse("February 16, 2002"),DateUtils.round(date1, DateUtils.SEMI_MONTH),"round semimonth-1 failed");
assertEquals(dateParser.parse("November 16, 2001"),DateUtils.round(date2, DateUtils.SEMI_MONTH),"round semimonth-2 failed");
assertEquals(dateParser.parse("February 13, 2002"),DateUtils.round(date1, Calendar.DATE),"round date-1 failed");
assertEquals(dateParser.parse("November 18, 2001"),DateUtils.round(date2, Calendar.DATE),"round date-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 13:00:00.000"),DateUtils.round(date1, Calendar.HOUR),"round hour-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:00:00.000"),DateUtils.round(date2, Calendar.HOUR),"round hour-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:35:00.000"),DateUtils.round(date1, Calendar.MINUTE),"round minute-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:00.000"),DateUtils.round(date2, Calendar.MINUTE),"round minute-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:57.000"),DateUtils.round(date1, Calendar.SECOND),"round second-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:11.000"),DateUtils.round(date2, Calendar.SECOND),"round second-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 00:00:00.000"),DateUtils.round(dateAmPm1, Calendar.AM_PM),"round ampm-1 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.round(dateAmPm2, Calendar.AM_PM),"round ampm-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.round(dateAmPm3, Calendar.AM_PM),"round ampm-3 failed");
assertEquals(dateTimeParser.parse("February 4, 2002 00:00:00.000"),DateUtils.round(dateAmPm4, Calendar.AM_PM),"round ampm-4 failed");
assertEquals(dateParser.parse("January 1, 2002"),DateUtils.round((Object) date1, Calendar.YEAR),"round year-1 failed");
assertEquals(dateParser.parse("January 1, 2002"),DateUtils.round((Object) date2, Calendar.YEAR),"round year-2 failed");
assertEquals(dateParser.parse("February 1, 2002"),DateUtils.round((Object) date1, Calendar.MONTH),"round month-1 failed");
assertEquals(dateParser.parse("December 1, 2001"),DateUtils.round((Object) date2, Calendar.MONTH),"round month-2 failed");
assertEquals(dateParser.parse("February 16, 2002"),DateUtils.round((Object) date1, DateUtils.SEMI_MONTH),"round semimonth-1 failed");
assertEquals(dateParser.parse("November 16, 2001"),DateUtils.round((Object) date2, DateUtils.SEMI_MONTH),"round semimonth-2 failed");
assertEquals(dateParser.parse("February 13, 2002"),DateUtils.round((Object) date1, Calendar.DATE),"round date-1 failed");
assertEquals(dateParser.parse("November 18, 2001"),DateUtils.round((Object) date2, Calendar.DATE),"round date-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 13:00:00.000"),DateUtils.round((Object) date1, Calendar.HOUR),"round hour-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:00:00.000"),DateUtils.round((Object) date2, Calendar.HOUR),"round hour-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:35:00.000"),DateUtils.round((Object) date1, Calendar.MINUTE),"round minute-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:00.000"),DateUtils.round((Object) date2, Calendar.MINUTE),"round minute-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:57.000"),DateUtils.round((Object) date1, Calendar.SECOND),"round second-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:11.000"),DateUtils.round((Object) date2, Calendar.SECOND),"round second-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:57.000"),DateUtils.round((Object) cal1, Calendar.SECOND),"round calendar second-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:11.000"),DateUtils.round((Object) cal2, Calendar.SECOND),"round calendar second-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 00:00:00.000"),DateUtils.round((Object) dateAmPm1, Calendar.AM_PM),"round ampm-1 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.round((Object) dateAmPm2, Calendar.AM_PM),"round ampm-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.round((Object) dateAmPm3, Calendar.AM_PM),"round ampm-3 failed");
assertEquals(dateTimeParser.parse("February 4, 2002 00:00:00.000"),DateUtils.round((Object) dateAmPm4, Calendar.AM_PM),"round ampm-4 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 00:00:00.000"),DateUtils.round((Object) calAmPm1, Calendar.AM_PM),"round ampm-1 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.round((Object) calAmPm2, Calendar.AM_PM),"round ampm-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.round((Object) calAmPm3, Calendar.AM_PM),"round ampm-3 failed");
assertEquals(dateTimeParser.parse("February 4, 2002 00:00:00.000"),DateUtils.round((Object) calAmPm4, Calendar.AM_PM),"round ampm-4 failed");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.round(date4, Calendar.DATE),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.round((Object) cal4, Calendar.DATE),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.round(date5, Calendar.DATE),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.round((Object) cal5, Calendar.DATE),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.round(date6, Calendar.DATE),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.round((Object) cal6, Calendar.DATE),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.round(date7, Calendar.DATE),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.round((Object) cal7, Calendar.DATE),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 01:00:00.000"),DateUtils.round(date4, Calendar.HOUR_OF_DAY),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 01:00:00.000"),DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 03:00:00.000"),DateUtils.round(date5, Calendar.HOUR_OF_DAY),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 03:00:00.000"),DateUtils.round((Object) cal5, Calendar.HOUR_OF_DAY),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 03:00:00.000"),DateUtils.round(date6, Calendar.HOUR_OF_DAY),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 03:00:00.000"),DateUtils.round((Object) cal6, Calendar.HOUR_OF_DAY),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 04:00:00.000"),DateUtils.round(date7, Calendar.HOUR_OF_DAY),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 04:00:00.000"),DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("July 2, 2007 08:09:00.000"),DateUtils.round(date, Calendar.MINUTE),"Minute Round Up Failed");
assertEquals(dateTimeParser.parse("July 2, 2007 08:08:00.000"),DateUtils.round(date, Calendar.MINUTE),"Minute No Round Failed");
assertEquals(dateTimeParser.parse("July 2, 2007 08:08:51.000"),DateUtils.round(date, Calendar.SECOND),"Second Round Up with 600 Milli Seconds Failed");
assertEquals(dateTimeParser.parse("July 2, 2007 08:08:50.000"),DateUtils.round(date, Calendar.SECOND),"Second Round Down with 200 Milli Seconds Failed");
assertEquals(dateTimeParser.parse("July 2, 2007 08:08:21.000"),DateUtils.round(date, Calendar.SECOND),"Second Round Up with 200 Milli Seconds Failed");
assertEquals(dateTimeParser.parse("July 2, 2007 08:08:20.000"),DateUtils.round(date, Calendar.SECOND),"Second Round Down with 200 Milli Seconds Failed");
assertEquals(dateTimeParser.parse("July 2, 2007 08:00:00.000"),DateUtils.round(date, Calendar.HOUR),"Hour Round Down Failed");
assertEquals(dateTimeParser.parse("July 2, 2007 09:00:00.000"),DateUtils.round(date, Calendar.HOUR),"Hour Round Up Failed");
final String outsideOfRangeAssertionMessage = "DateUtils.setDays did not throw an expected IllegalArgumentException for amount outside of range 1 to 31.";
final String outsideOfRangeAssertionMessage = "DateUtils.setHours did not throw an expected IllegalArgumentException for amount outside of range 0 to 23.";
final String outsideOfRangeAssertionMessage = "DateUtils.setMilliseconds did not throw an expected IllegalArgumentException for range outside of 0 to 999.";
final String outsideOfRangeAssertionMessage = "DateUtils.setMinutes did not throw an expected IllegalArgumentException for amount outside of range 0 to 59.";
final String outsideOfRangeAssertionMessage = "DateUtils.setMonths did not throw an expected IllegalArgumentException for amount outside of range 0 to 11.";
final String outsideOfRangeAssertionMessage = "DateUtils.setSeconds did not throw an expected IllegalArgumentException for amount outside of range 0 to 59.";
assertEquals(date1, DateUtils.toCalendar(date1).getTime(), "Failed to convert to a Calendar and back");
assertEquals(date2, c.getTime(), "Convert Date and TimeZone to a Calendar, but failed to get the Date back");
assertEquals(defaultZone, c.getTimeZone(), "Convert Date and TimeZone to a Calendar, but failed to get the TimeZone back");
assertEquals(dateParser.parse("January 1, 2002"),DateUtils.truncate(date1, Calendar.YEAR),"truncate year-1 failed");
assertEquals(dateParser.parse("January 1, 2001"),DateUtils.truncate(date2, Calendar.YEAR),"truncate year-2 failed");
assertEquals(dateParser.parse("February 1, 2002"),DateUtils.truncate(date1, Calendar.MONTH),"truncate month-1 failed");
assertEquals(dateParser.parse("November 1, 2001"),DateUtils.truncate(date2, Calendar.MONTH),"truncate month-2 failed");
assertEquals(dateParser.parse("February 1, 2002"),DateUtils.truncate(date1, DateUtils.SEMI_MONTH),"truncate semimonth-1 failed");
assertEquals(dateParser.parse("November 16, 2001"),DateUtils.truncate(date2, DateUtils.SEMI_MONTH),"truncate semimonth-2 failed");
assertEquals(dateParser.parse("February 12, 2002"),DateUtils.truncate(date1, Calendar.DATE),"truncate date-1 failed");
assertEquals(dateParser.parse("November 18, 2001"),DateUtils.truncate(date2, Calendar.DATE),"truncate date-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:00:00.000"),DateUtils.truncate(date1, Calendar.HOUR),"truncate hour-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:00:00.000"),DateUtils.truncate(date2, Calendar.HOUR),"truncate hour-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:00.000"),DateUtils.truncate(date1, Calendar.MINUTE),"truncate minute-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:00.000"),DateUtils.truncate(date2, Calendar.MINUTE),"truncate minute-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:56.000"),DateUtils.truncate(date1, Calendar.SECOND),"truncate second-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:11.000"),DateUtils.truncate(date2, Calendar.SECOND),"truncate second-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 00:00:00.000"),DateUtils.truncate(dateAmPm1, Calendar.AM_PM),"truncate ampm-1 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 00:00:00.000"),DateUtils.truncate(dateAmPm2, Calendar.AM_PM),"truncate ampm-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.truncate(dateAmPm3, Calendar.AM_PM),"truncate ampm-3 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.truncate(dateAmPm4, Calendar.AM_PM),"truncate ampm-4 failed");
assertEquals(dateParser.parse("January 1, 2002"),DateUtils.truncate((Object) date1, Calendar.YEAR),"truncate year-1 failed");
assertEquals(dateParser.parse("January 1, 2001"),DateUtils.truncate((Object) date2, Calendar.YEAR),"truncate year-2 failed");
assertEquals(dateParser.parse("February 1, 2002"),DateUtils.truncate((Object) date1, Calendar.MONTH),"truncate month-1 failed");
assertEquals(dateParser.parse("November 1, 2001"),DateUtils.truncate((Object) date2, Calendar.MONTH),"truncate month-2 failed");
assertEquals(dateParser.parse("February 1, 2002"),DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH),"truncate semimonth-1 failed");
assertEquals(dateParser.parse("November 16, 2001"),DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH),"truncate semimonth-2 failed");
assertEquals(dateParser.parse("February 12, 2002"),DateUtils.truncate((Object) date1, Calendar.DATE),"truncate date-1 failed");
assertEquals(dateParser.parse("November 18, 2001"),DateUtils.truncate((Object) date2, Calendar.DATE),"truncate date-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:00:00.000"),DateUtils.truncate((Object) date1, Calendar.HOUR),"truncate hour-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:00:00.000"),DateUtils.truncate((Object) date2, Calendar.HOUR),"truncate hour-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:00.000"),DateUtils.truncate((Object) date1, Calendar.MINUTE),"truncate minute-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:00.000"),DateUtils.truncate((Object) date2, Calendar.MINUTE),"truncate minute-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:56.000"),DateUtils.truncate((Object) date1, Calendar.SECOND),"truncate second-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:11.000"),DateUtils.truncate((Object) date2, Calendar.SECOND),"truncate second-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 00:00:00.000"),DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM),"truncate ampm-1 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 00:00:00.000"),DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM),"truncate ampm-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM),"truncate ampm-3 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM),"truncate ampm-4 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:56.000"),DateUtils.truncate((Object) cal1, Calendar.SECOND),"truncate calendar second-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:11.000"),DateUtils.truncate((Object) cal2, Calendar.SECOND),"truncate calendar second-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 00:00:00.000"),DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM),"truncate ampm-1 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 00:00:00.000"),DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM),"truncate ampm-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM),"truncate ampm-3 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM),"truncate ampm-4 failed");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.truncate(date3, Calendar.DATE),"truncate MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.truncate((Object) cal3, Calendar.DATE),"truncate MET date across DST change-over");
assertEquals(dateTimeParser.parse("October 26, 2003 00:00:00.000"),DateUtils.truncate(date8, Calendar.DATE),"truncate MET date across DST change-over");
assertEquals(dateTimeParser.parse("October 26, 2003 00:00:00.000"),DateUtils.truncate((Object) cal8, Calendar.DATE),"truncate MET date across DST change-over");
assertEquals("2004-10-31 00:00:00.000 -06:00", format.format(oct31MDT), "Check 00:00:00.000");
assertEquals("2004-10-31 01:00:00.000 -06:00", format.format(oct31_01MDT), "Check 01:00:00.000");
assertEquals("2004-10-31 01:02:00.000 -06:00", format.format(oct31_01_02MDT), "Check 01:02:00.000");
assertEquals("2004-10-31 01:02:03.000 -06:00", format.format(oct31_01_02_03MDT), "Check 01:02:03.000");
assertEquals("2004-10-31 01:02:03.004 -06:00", format.format(oct31_01_02_03_04MDT), "Check 01:02:03.004");
assertEquals(gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L, "Demonstrate Problem");
assertEquals(oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND),"Truncate Calendar.MILLISECOND");
assertEquals(oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND),"Truncate Calendar.SECOND");
assertEquals(oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE),"Truncate Calendar.MINUTE");
assertEquals(oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY),"Truncate Calendar.HOUR_OF_DAY");
assertEquals(oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR),"Truncate Calendar.HOUR");
assertEquals(oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE),"Truncate Calendar.DATE");
assertEquals(oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND),"Round Calendar.MILLISECOND");
assertEquals(oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND),"Round Calendar.SECOND");
assertEquals(oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE),"Round Calendar.MINUTE");
assertEquals(oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY),"Round Calendar.HOUR_OF_DAY");
assertEquals(oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR),"Round Calendar.HOUR");
assertEquals(oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE),"Round Calendar.DATE");
assertWeekIterator(it, sunday);
assertWeekIterator(it, monday);
assertWeekIterator(it, today);
assertWeekIterator(it, centered);
assertWeekIterator(it, centered);
assertWeekIterator(it2, centered);
assertEquals("GMT+00:00", new GmtTimeZone(false, 0, 0).getID());
assertEquals("GMT+01:02", new GmtTimeZone(false, 1, 2).getID());
assertEquals("GMT+11:22", new GmtTimeZone(false, 11, 22).getID());
assertEquals("GMT-01:02", new GmtTimeZone(true, 1, 2).getID());
assertEquals("GMT-11:22", new GmtTimeZone(true, 11, 22).getID());
assertEquals(0, new GmtTimeZone(false, 0, 0).getOffset(234304));
assertEquals(0, new GmtTimeZone(false, 0, 0).getRawOffset());
assertEquals(23 * 60 * 60 * 1000, new GmtTimeZone(false, 23, 0).getRawOffset());
assertEquals(59 * 60 * 1000, new GmtTimeZone(false, 0, 59).getRawOffset());
assertEquals(-(6 * 60 + 30) * 60 * 1000,new GmtTimeZone(true, 6, 30).getOffset(1, 1, 1, 1, 1, 1));
assertEquals("[GmtTimeZone id=\"GMT-12:00\",offset=-43200000]",new GmtTimeZone(true, 12, 0).toString());
assertEquals(vulgar.getTime(), cal.getTime());
assertEquals(expectedTime, actualTime, locale.toString()+" "+formattedDate +"\n");
assertEquals(sdfE, fdfE, locale.toString()+" "+formattedDate + " expected same Exception ");
assertEquals(-1, sdferrorIndex, "Expected SDF error index -1 ");
assertEquals(-1, fdferrorIndex, "Expected FDF error index -1 ");
assertEquals(length, endIndex, "Expected FDF to parse full string " + fdfP);
assertEquals(expectedTime, actualTime, locale.toString()+" "+formattedDate +"\n");
assertNotEquals(-1, fdferrorIndex, "Test data error: expected FDF parse to fail, but got " + actualTime);
assertEquals(5, parsePosition.getErrorIndex());
assertEquals(4, parsePosition.getIndex());
assertEquals(2, calendar.get(Calendar.MONTH));
assertEquals(23, calendar.get(Calendar.DATE));
assertEquals(0, parsePosition.getIndex());
assertEquals(0, parsePosition.getErrorIndex());
assertEquals(12, parsePosition.getIndex());
assertEquals(1961, calendar.get(Calendar.YEAR));
assertEquals(2, calendar.get(Calendar.MONTH));
assertEquals(23, calendar.get(Calendar.DATE));
assertEquals(2, parsePosition.getErrorIndex());
assertEquals(input.length(), parsePosition.getIndex());
assertEquals(0, parsePosition.getErrorIndex());
assertEquals(input.length(), parsePosition.getIndex());
assertEquals(6, parsePosition.getErrorIndex());
private void assertFormats(final String expectedValue, final String pattern, final TimeZone timeZone, final Calendar cal) {assertEquals(expectedValue, DateFormatUtils.format(cal.getTime(), pattern, timeZone));
assertEquals(expectedValue, DateFormatUtils.format(cal.getTime().getTime(), pattern, timeZone));
assertEquals(expectedValue, DateFormatUtils.format(cal, pattern, timeZone));
assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH"));
assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH"));
assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US));
assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH", Locale.US));
assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH"));
assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH"));
assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US));
assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US));
assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()));
assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()));
assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));
assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));
assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));
assertEquals("20030608101112", DateFormatUtils.format(calendar, "yyyyMMddHHmmss"));
assertEquals("20030608221112", DateFormatUtils.format(calendar, "yyyyMMddHHmmss"));
assertEquals(d.getTime(), d2.getTime() + d.getTime() % 1000, "Date not equal to itself ISO formatted and parsed");
assertEquals("2009-10-16T08:42:16+02:00", value, "long");
assertEquals("2009-10-16T12:12:16+05:30", value, "long");
assertEquals("2009-10-16T07:42:16+01:00", value, "long");
assertEquals("2009-10-16T08:42:16+02:00", value, "calendar");
assertEquals("2009-10-16T12:12:16+05:30", value, "calendar");
assertEquals("2009-10-16T07:42:16+01:00", value, "calendar");
assertFormats("Sun, 08 Jun 2003 10:11:12 -0300", DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),timeZone, june);
assertFormats("Sun, 08 Jun 2003 10:11:12 +0000", DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),timeZone, june);
assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));
assertEquals(Integer.MIN_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MIN_VALUE));
assertEquals(Integer.MIN_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MIN_VALUE - 1));
assertEquals(Integer.MIN_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MIN_VALUE - 2));
assertEquals(Integer.MAX_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MAX_VALUE));
assertEquals(Integer.MAX_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MAX_VALUE + 1));
assertEquals(Integer.MAX_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MAX_VALUE + 2));
assertEquals(Integer.MIN_VALUE, DurationUtils.toMillisInt(Duration.ofMillis(Integer.MIN_VALUE)));
assertEquals(Integer.MAX_VALUE, DurationUtils.toMillisInt(Duration.ofMillis(Integer.MAX_VALUE)));
assertEquals(Integer.MAX_VALUE, DurationUtils.toMillisInt(Duration.ofMillis(NumberUtils.LONG_INT_MAX_VALUE + 1)));
assertEquals(Integer.MAX_VALUE, DurationUtils.toMillisInt(Duration.ofMillis(NumberUtils.LONG_INT_MAX_VALUE + 2)));
assertEquals(Integer.MIN_VALUE, DurationUtils.toMillisInt(Duration.ofMillis(NumberUtils.LONG_INT_MIN_VALUE - 1)));
assertEquals(Integer.MIN_VALUE, DurationUtils.toMillisInt(Duration.ofMillis(NumberUtils.LONG_INT_MIN_VALUE - 2)));
assertNotEquals(summer.getTime(), standard.getTime());
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.removeAllOccurences(a, true));
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.removeAllOccurences(a, true));
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.removeAllOccurences(a, true));
assertArrayEquals(new boolean[]{false, false}, ArrayUtils.removeAllOccurences(a, true));
assertArrayEquals(new boolean[]{true, true, true}, ArrayUtils.removeAllOccurences(a, false));
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.removeAllOccurrences(a, true));
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.removeAllOccurrences(a, true));
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.removeAllOccurrences(a, true));
assertArrayEquals(new boolean[]{false, false}, ArrayUtils.removeAllOccurrences(a, true));
assertArrayEquals(new boolean[]{true, true, true}, ArrayUtils.removeAllOccurrences(a, false));
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.removeAllOccurences(a, (byte) 2));
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.removeAllOccurences(a, (byte) 2));
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.removeAllOccurences(a, (byte) 2));
assertArrayEquals(new byte[]{1, 3}, ArrayUtils.removeAllOccurences(a, (byte) 2));
assertArrayEquals(new byte[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurences(a, (byte) 4));
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.removeAllOccurrences(a, (byte) 2));
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.removeAllOccurrences(a, (byte) 2));
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.removeAllOccurrences(a, (byte) 2));
assertArrayEquals(new byte[]{1, 3}, ArrayUtils.removeAllOccurrences(a, (byte) 2));
assertArrayEquals(new byte[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurrences(a, (byte) 4));
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.removeAllOccurences(a, '2'));
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.removeAllOccurences(a, '2'));
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.removeAllOccurences(a, '2'));
assertArrayEquals(new char[]{'1', '3'}, ArrayUtils.removeAllOccurences(a, '2'));
assertArrayEquals(new char[]{'1', '2', '2', '3', '2'}, ArrayUtils.removeAllOccurences(a, '4'));
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.removeAllOccurrences(a, '2'));
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.removeAllOccurrences(a, '2'));
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.removeAllOccurrences(a, '2'));
assertArrayEquals(new char[]{'1', '3'}, ArrayUtils.removeAllOccurrences(a, '2'));
assertArrayEquals(new char[]{'1', '2', '2', '3', '2'}, ArrayUtils.removeAllOccurrences(a, '4'));
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(new double[]{1, 3}, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(new double[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurences(a, 4));
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(new double[]{1, 3}, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(new double[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurrences(a, 4));
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(new float[]{1, 3}, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(new float[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurences(a, 4));
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(new float[]{1, 3}, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(new float[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurrences(a, 4));
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(new int[]{1, 3}, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(new int[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurences(a, 4));
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(new int[]{1, 3}, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(new int[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurrences(a, 4));
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(new long[]{1, 3}, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(new long[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurences(a, 4));
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(new long[]{1, 3}, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(new long[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurrences(a, 4));
assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.removeAllOccurences(a, "2"));
assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.removeAllOccurences(a, "2"));
assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.removeAllOccurences(a, "2"));
assertArrayEquals(new String[]{"1", "3"}, ArrayUtils.removeAllOccurences(a, "2"));
assertArrayEquals(new String[]{"1", "2", "2", "3", "2"}, ArrayUtils.removeAllOccurences(a, "4"));
assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.removeAllOccurrences(a, "2"));
assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.removeAllOccurrences(a, "2"));
assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.removeAllOccurrences(a, "2"));
assertArrayEquals(new String[]{"1", "3"}, ArrayUtils.removeAllOccurrences(a, "2"));
assertArrayEquals(new String[]{"1", "2", "2", "3", "2"}, ArrayUtils.removeAllOccurrences(a, "4"));
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.removeAllOccurences(a, (short) 2));
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.removeAllOccurences(a, (short) 2));
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.removeAllOccurences(a, (short) 2));
assertArrayEquals(new short[]{1, 3}, ArrayUtils.removeAllOccurences(a, (short) 2));
assertArrayEquals(new short[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurences(a, (short) 4));
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.removeAllOccurrences(a, (short) 2));
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.removeAllOccurrences(a, (short) 2));
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.removeAllOccurrences(a, (short) 2));
assertArrayEquals(new short[]{1, 3}, ArrayUtils.removeAllOccurrences(a, (short) 2));
assertArrayEquals(new short[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurrences(a, (short) 4));
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{true, true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{1}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{1, 1}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{1}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{1, 1}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false, true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2, 1}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2, 1}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2, 1}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2, 1}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2, 1}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2, 1}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{1}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{1, 1}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{1}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{1, 1}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{1}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{1, 1}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertEquals(3, inarray.length);
assertEquals(2, outarray.length);
assertEquals(Number.class, outarray.getClass().getComponentType());
assertEquals(1, outarray.length);
assertEquals(Number.class, outarray.getClass().getComponentType());
assertEquals(0, outarray.length);
assertEquals(Number.class, outarray.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{1}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{1, 1}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(sort(expected), BooleanUtils.booleanValues());
assertSame(null, BooleanUtils.negate(null));
assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE));
assertSame(Boolean.FALSE, BooleanUtils.negate(Boolean.TRUE));
assertArrayEquals(new boolean[] {false, true}, BooleanUtils.primitiveValues());
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(1));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(-1));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(0));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(1)));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(-1)));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(0)));
assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject(null, null, seven, eight));
assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject(null, six, null, eight));
assertSame(null, BooleanUtils.toBooleanObject(null, six, seven, null));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(6), six, seven, eight));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(7), six, seven, eight));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false"));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no"));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off"));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE"));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO"));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("y")); // yes
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("t")); // true
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("T"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("1"));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("f")); // false
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("F"));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("n")); // No
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N"));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("0"));
assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject(null, null, "N", "U"));
assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject(null, "Y", null, "U"));
assertSame(null, BooleanUtils.toBooleanObject(null, "Y", "N", null));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y", "Y", "N", "U"));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N", "Y", "N", "U"));
assertEquals(1, BooleanUtils.toInteger(true));
assertEquals(0, BooleanUtils.toInteger(false));
assertEquals(6, BooleanUtils.toInteger(true, 6, 7));
assertEquals(7, BooleanUtils.toInteger(false, 6, 7));
assertEquals(6, BooleanUtils.toInteger(Boolean.TRUE, 6, 7, 8));
assertEquals(7, BooleanUtils.toInteger(Boolean.FALSE, 6, 7, 8));
assertEquals(8, BooleanUtils.toInteger(null, 6, 7, 8));
assertEquals(Integer.valueOf(1), BooleanUtils.toIntegerObject(true));
assertEquals(Integer.valueOf(0), BooleanUtils.toIntegerObject(false));
assertEquals(Integer.valueOf(1), BooleanUtils.toIntegerObject(Boolean.TRUE));
assertEquals(Integer.valueOf(0), BooleanUtils.toIntegerObject(Boolean.FALSE));
assertEquals(six, BooleanUtils.toIntegerObject(true, six, seven));
assertEquals(seven, BooleanUtils.toIntegerObject(false, six, seven));
assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight));
assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight));
assertEquals(eight, BooleanUtils.toIntegerObject(null, six, seven, eight));
assertEquals("Y", BooleanUtils.toString(true, "Y", "N"));
assertEquals("N", BooleanUtils.toString(false, "Y", "N"));
assertEquals("U", BooleanUtils.toString(null, "Y", "N", "U"));
assertEquals("Y", BooleanUtils.toString(Boolean.TRUE, "Y", "N", "U"));
assertEquals("N", BooleanUtils.toString(Boolean.FALSE, "Y", "N", "U"));
assertEquals("on", BooleanUtils.toStringOnOff(true));
assertEquals("off", BooleanUtils.toStringOnOff(false));
assertEquals("on", BooleanUtils.toStringOnOff(Boolean.TRUE));
assertEquals("off", BooleanUtils.toStringOnOff(Boolean.FALSE));
assertEquals("true", BooleanUtils.toStringTrueFalse(true));
assertEquals("false", BooleanUtils.toStringTrueFalse(false));
assertEquals("true", BooleanUtils.toStringTrueFalse(Boolean.TRUE));
assertEquals("false", BooleanUtils.toStringTrueFalse(Boolean.FALSE));
assertEquals("yes", BooleanUtils.toStringYesNo(true));
assertEquals("no", BooleanUtils.toStringYesNo(false));
assertEquals("yes", BooleanUtils.toStringYesNo(Boolean.TRUE));
assertEquals("no", BooleanUtils.toStringYesNo(Boolean.FALSE));
assertEquals(Boolean.FALSE, BooleanUtils.and(new Boolean[] {null}));
assertEquals(0, BooleanUtils.compare(true, true));
assertEquals(0, BooleanUtils.compare(false, false));
assertEquals(Boolean.FALSE, BooleanUtils.oneHot(new Boolean[] {null}));
assertEquals(Boolean.FALSE, BooleanUtils.or(new Boolean[] {null}));
assertEquals(Boolean.FALSE, BooleanUtils.xor(new Boolean[] {null}));
assertEquals(true,BooleanUtils.xor(new Boolean[] { Boolean.TRUE }).booleanValue(),"true");
assertEquals(false,BooleanUtils.xor(new Boolean[] { Boolean.FALSE }).booleanValue(),"false");
assertEquals(false ^ false,BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue(),"false ^ false");
assertEquals(false ^ true,BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue(),"false ^ true");
assertEquals(true ^ false,BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue(),"true ^ false");
assertEquals(true ^ true,BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue(),"true ^ true");
assertEquals(false ^ false ^ false,BooleanUtils.xor(new Boolean[] {Boolean.FALSE,Boolean.FALSE,Boolean.FALSE }).booleanValue(),"false ^ false ^ false");
assertEquals(false ^ false ^ true,BooleanUtils.xor(new Boolean[] {Boolean.FALSE,Boolean.FALSE,Boolean.TRUE }).booleanValue(),"false ^ false ^ true");
assertEquals(false ^ true ^ false,BooleanUtils.xor(new Boolean[] {Boolean.FALSE,Boolean.TRUE,Boolean.FALSE }).booleanValue(),"false ^ true ^ false");
assertEquals(true ^ false ^ false,BooleanUtils.xor(new Boolean[] {Boolean.TRUE,Boolean.FALSE,Boolean.FALSE }).booleanValue(),"true ^ false ^ false");
assertEquals(true ^ false ^ true,BooleanUtils.xor(new Boolean[] {Boolean.TRUE,Boolean.FALSE,Boolean.TRUE }).booleanValue(),"true ^ false ^ true");
assertEquals(true ^ true ^ false,BooleanUtils.xor(new Boolean[] {Boolean.TRUE,Boolean.TRUE,Boolean.FALSE }).booleanValue(),"true ^ true ^ false");
assertEquals(false ^ true ^ true,BooleanUtils.xor(new Boolean[] {Boolean.FALSE,Boolean.TRUE,Boolean.TRUE }).booleanValue(),"false ^ true ^ true");
assertEquals(true ^ true ^ true,BooleanUtils.xor(new Boolean[] {Boolean.TRUE,Boolean.TRUE,Boolean.TRUE }).booleanValue(),"true ^ true ^ true");
assertEquals(true,BooleanUtils.xor(new boolean[] { true }),"true");
assertEquals(false,BooleanUtils.xor(new boolean[] { false }),"false");
assertEquals(true ^ true,BooleanUtils.xor(new boolean[] { true, true }),"true ^ true");
assertEquals(false ^ false,BooleanUtils.xor(new boolean[] { false, false }),"false ^ false");
assertEquals(true ^ false,BooleanUtils.xor(new boolean[] { true, false }),"true ^ false");
assertEquals(false ^ true,BooleanUtils.xor(new boolean[] { false, true }),"false ^ true");
assertEquals(false ^ false ^ false,BooleanUtils.xor(new boolean[] { false, false, false }),"false ^ false ^ false");
assertEquals(false ^ false ^ true,BooleanUtils.xor(new boolean[] { false, false, true }),"false ^ false ^ true");
assertEquals(false ^ true ^ false,BooleanUtils.xor(new boolean[] { false, true, false }),"false ^ true ^ false");
assertEquals(false ^ true ^ true,BooleanUtils.xor(new boolean[] { false, true, true }),"false ^ true ^ true");
assertEquals(true ^ false ^ false,BooleanUtils.xor(new boolean[] { true, false, false }),"true ^ false ^ false");
assertEquals(true ^ false ^ true,BooleanUtils.xor(new boolean[] { true, false, true }),"true ^ false ^ true");
assertEquals(true ^ true ^ false,BooleanUtils.xor(new boolean[] { true, true, false }),"true ^ true ^ false");
assertEquals(true ^ true ^ true,BooleanUtils.xor(new boolean[] { true, true, true }),"true ^ true ^ true");
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals("", CharSetUtils.squeeze("", (String) null));
assertEquals("", CharSetUtils.squeeze("", ""));
assertEquals("", CharSetUtils.squeeze("", "a-e"));
assertEquals("hello", CharSetUtils.squeeze("hello", (String) null));
assertEquals("hello", CharSetUtils.squeeze("hello", ""));
assertEquals("hello", CharSetUtils.squeeze("hello", "a-e"));
assertEquals("helo", CharSetUtils.squeeze("hello", "l-p"));
assertEquals("heloo", CharSetUtils.squeeze("helloo", "l"));
assertEquals("hello", CharSetUtils.squeeze("helloo", "^l"));
assertEquals("", CharSetUtils.squeeze("", (String[]) null));
assertEquals("", CharSetUtils.squeeze(""));
assertEquals("", CharSetUtils.squeeze("", null));
assertEquals("", CharSetUtils.squeeze("", "a-e"));
assertEquals("hello", CharSetUtils.squeeze("hello", (String[]) null));
assertEquals("hello", CharSetUtils.squeeze("hello"));
assertEquals("hello", CharSetUtils.squeeze("hello", null));
assertEquals("hello", CharSetUtils.squeeze("hello", "a-e"));
assertEquals("helo", CharSetUtils.squeeze("hello", "el"));
assertEquals("hello", CharSetUtils.squeeze("hello", "e"));
assertEquals("fofof", CharSetUtils.squeeze("fooffooff", "of"));
assertEquals("fof", CharSetUtils.squeeze("fooooff", "fo"));
assertEquals(0, CharSetUtils.count(null, ""));
assertEquals(0, CharSetUtils.count("", (String) null));
assertEquals(0, CharSetUtils.count("", ""));
assertEquals(0, CharSetUtils.count("", "a-e"));
assertEquals(0, CharSetUtils.count("hello", (String) null));
assertEquals(0, CharSetUtils.count("hello", ""));
assertEquals(1, CharSetUtils.count("hello", "a-e"));
assertEquals(3, CharSetUtils.count("hello", "l-p"));
assertEquals(0, CharSetUtils.count(null, "a-e"));
assertEquals(0, CharSetUtils.count("", (String[]) null));
assertEquals(0, CharSetUtils.count(""));
assertEquals(0, CharSetUtils.count("", null));
assertEquals(0, CharSetUtils.count("", "a-e"));
assertEquals(0, CharSetUtils.count("hello", (String[]) null));
assertEquals(0, CharSetUtils.count("hello"));
assertEquals(0, CharSetUtils.count("hello", null));
assertEquals(1, CharSetUtils.count("hello", "a-e"));
assertEquals(3, CharSetUtils.count("hello", "el"));
assertEquals(0, CharSetUtils.count("hello", "x"));
assertEquals(2, CharSetUtils.count("hello", "e-i"));
assertEquals(5, CharSetUtils.count("hello", "a-z"));
assertEquals(0, CharSetUtils.count("hello", ""));
assertEquals("", CharSetUtils.keep("", (String) null));
assertEquals("", CharSetUtils.keep("", ""));
assertEquals("", CharSetUtils.keep("", "a-e"));
assertEquals("", CharSetUtils.keep("hello", (String) null));
assertEquals("", CharSetUtils.keep("hello", ""));
assertEquals("", CharSetUtils.keep("hello", "xyz"));
assertEquals("hello", CharSetUtils.keep("hello", "a-z"));
assertEquals("hello", CharSetUtils.keep("hello", "oleh"));
assertEquals("ell", CharSetUtils.keep("hello", "el"));
assertEquals("", CharSetUtils.keep("", (String[]) null));
assertEquals("", CharSetUtils.keep(""));
assertEquals("", CharSetUtils.keep("", null));
assertEquals("", CharSetUtils.keep("", "a-e"));
assertEquals("", CharSetUtils.keep("hello", (String[]) null));
assertEquals("", CharSetUtils.keep("hello"));
assertEquals("", CharSetUtils.keep("hello", null));
assertEquals("e", CharSetUtils.keep("hello", "a-e"));
assertEquals("e", CharSetUtils.keep("hello", "a-e"));
assertEquals("ell", CharSetUtils.keep("hello", "el"));
assertEquals("hello", CharSetUtils.keep("hello", "elho"));
assertEquals("hello", CharSetUtils.keep("hello", "a-z"));
assertEquals("----", CharSetUtils.keep("----", "-"));
assertEquals("ll", CharSetUtils.keep("hello", "l"));
assertEquals("", CharSetUtils.delete("", (String) null));
assertEquals("", CharSetUtils.delete("", ""));
assertEquals("", CharSetUtils.delete("", "a-e"));
assertEquals("hello", CharSetUtils.delete("hello", (String) null));
assertEquals("hello", CharSetUtils.delete("hello", ""));
assertEquals("hllo", CharSetUtils.delete("hello", "a-e"));
assertEquals("he", CharSetUtils.delete("hello", "l-p"));
assertEquals("hello", CharSetUtils.delete("hello", "z"));
assertEquals("", CharSetUtils.delete("", (String[]) null));
assertEquals("", CharSetUtils.delete(""));
assertEquals("", CharSetUtils.delete("", null));
assertEquals("", CharSetUtils.delete("", "a-e"));
assertEquals("hello", CharSetUtils.delete("hello", (String[]) null));
assertEquals("hello", CharSetUtils.delete("hello"));
assertEquals("hello", CharSetUtils.delete("hello", null));
assertEquals("hello", CharSetUtils.delete("hello", "xyz"));
assertEquals("ho", CharSetUtils.delete("hello", "el"));
assertEquals("", CharSetUtils.delete("hello", "elho"));
assertEquals("hello", CharSetUtils.delete("hello", ""));
assertEquals("hello", CharSetUtils.delete("hello", ""));
assertEquals("", CharSetUtils.delete("hello", "a-z"));
assertEquals("", CharSetUtils.delete("----", "-"));
assertEquals("heo", CharSetUtils.delete("hello", "l"));
Assertions.assertEquals("ABC", StringUtils.valueOf(new char[] {'A', 'B', 'C' }));
assertEquals(50, r1.length(), "random(50) length");
assertEquals(50, r2.length(), "random(50) length");
assertEquals(50, r1.length(), "randomAscii(50) length");
assertEquals(50, r1.length(), "randomAlphabetic(50)");
assertEquals(50, r1.length(), "randomAlphanumeric(50)");
assertEquals(50, r1.length(), "randomGraph(50) length");
assertEquals(50, r1.length(), "randomNumeric(50)");
assertEquals(50, r1.length(), "randomPrint(50) length");
assertEquals(50, r1.length(), "random(50, \"abcdefg\")");
assertEquals(50, r1.length(), "random(50) length");
assertEquals(50, r2.length(), "random(50) length");
assertEquals(50, r1.length(), "random(50, \"stuvwxyz\")");
assertEquals(50, r1.length(), "random(50) length");
assertEquals(50, r2.length(), "random(50) length");
assertEquals(r1, r2, "r1.equals(r2)");
assertEquals("", r1, "random(0).equals(\"\")");
assertEquals("aaa", RandomStringUtils.random(3, 0, 0, false, false, new char[]{'a'}, new Random(seedMillis)));
assertThat("within range", s.length(), allOf(greaterThanOrEqualTo(expectedMinLengthInclusive), lessThanOrEqualTo(expectedMaxLengthExclusive - 1)));
assertThat("min generated, may fail randomly rarely", minCreatedLength, is(expectedMinLengthInclusive));
assertThat("max generated, may fail randomly rarely", maxCreatedLength, is(expectedMaxLengthExclusive - 1));
assertThat("within range", s.length(), allOf(greaterThanOrEqualTo(expectedMinLengthInclusive), lessThanOrEqualTo(expectedMaxLengthExclusive - 1)));
assertThat("min generated, may fail randomly rarely", minCreatedLength, is(expectedMinLengthInclusive));
assertThat("max generated, may fail randomly rarely", maxCreatedLength, is(expectedMaxLengthExclusive - 1));
assertThat("within range", s.length(), allOf(greaterThanOrEqualTo(expectedMinLengthInclusive), lessThanOrEqualTo(expectedMaxLengthExclusive - 1)));
assertThat("min generated, may fail randomly rarely", minCreatedLength, is(expectedMinLengthInclusive));
assertThat("max generated, may fail randomly rarely", maxCreatedLength, is(expectedMaxLengthExclusive - 1));
assertThat("within range", s.length(), allOf(greaterThanOrEqualTo(expectedMinLengthInclusive), lessThanOrEqualTo(expectedMaxLengthExclusive - 1)));
assertThat("min generated, may fail randomly rarely", minCreatedLength, is(expectedMinLengthInclusive));
assertThat("max generated, may fail randomly rarely", maxCreatedLength, is(expectedMaxLengthExclusive - 1));
assertThat("within range", s.length(), allOf(greaterThanOrEqualTo(expectedMinLengthInclusive), lessThanOrEqualTo(expectedMaxLengthExclusive - 1)));
assertThat("min generated, may fail randomly rarely", minCreatedLength, is(expectedMinLengthInclusive));
assertThat("max generated, may fail randomly rarely", maxCreatedLength, is(expectedMaxLengthExclusive - 1));
assertThat("within range", s.length(), allOf(greaterThanOrEqualTo(expectedMinLengthInclusive), lessThanOrEqualTo(expectedMaxLengthExclusive - 1)));
assertThat("min generated, may fail randomly rarely", minCreatedLength, is(expectedMinLengthInclusive));
assertThat("max generated, may fail randomly rarely", maxCreatedLength, is(expectedMaxLengthExclusive - 1));
assertEquals(o, c,"differs at " + i + "(" + Integer.toHexString(Character.valueOf(o).hashCode()) + "," +Integer.toHexString(Character.valueOf(c).hashCode()) + ")");
assertEquals(type, processor.getType());
assertNotEquals(type, processor.getType());
assertEqualsTypeNotNull(Processor.Type.X86, processor);
assertNotEqualsTypeNotNull(Processor.Type.PPC, processor);
assertEqualsTypeNotNull(Processor.Type.X86, processor);
assertEqualsTypeNotNull(Processor.Type.IA_64, processor);
assertEqualsTypeNotNull(Processor.Type.IA_64, processor);
assertNotEqualsTypeNotNull(Processor.Type.X86, processor);
assertEqualsTypeNotNull(Processor.Type.PPC, processor);
assertNotEqualsTypeNotNull(Processor.Type.IA_64, processor);
assertEqualsTypeNotNull(Processor.Type.PPC, processor);
assertEqualsTypeNotNull(Processor.Type.AARCH_64, processor);
assertNotEquals(ObjectUtils.identityToString(processor), processor.toString());
final Error err = new AssertionError("Test");
assertEquals(err, e, "Wrong error");
assertSame(ex, cex.getCause(), "Wrong cause");
final Error err = new AssertionError("Test");
assertEquals(err, e, "Wrong error");
assertEquals(rex, r, "Wrong exception");
assertSame(ex, cex.getCause(), "Wrong cause");
final Error err = new AssertionError("Test");
assertEquals(err, e, "Wrong error");
assertEquals(rex, r, "Wrong exception");
assertEquals(ex, cex.getCause(), "Wrong cause");
final Error err = new AssertionError("Test");
assertEquals(err, e, "Wrong error");
assertEquals(rex, r, "Wrong exception");
assertEquals(ex, crex.getCause(), "Wrong cause");
assertSame(result, ConcurrentUtils.initialize(init), "Wrong result object");
assertSame(result, ConcurrentUtils.initializeUnchecked(init), "Wrong result object");
assertSame(cause, crex.getCause(), "Wrong cause");
assertSame(value, test.get());
assertSame(value, test.get(1000, TimeUnit.SECONDS));
assertSame(value, test.get(1000, null));
assertSame(value, test.get());
assertSame(value, test.get(1000, TimeUnit.SECONDS));
assertSame(value, test.get(1000, null));
assertEquals(value, ConcurrentUtils.putIfAbsent(map, key, 0), "Wrong result");
assertEquals(value, map.get(key), "Wrong value in map");
assertEquals(value, ConcurrentUtils.putIfAbsent(map, key, value), "Wrong result");
assertEquals(value, map.get(key), "Wrong value in map");
assertEquals(value, ConcurrentUtils.createIfAbsent(map, key, init), "Wrong result");
assertEquals(value, map.get(key), "Wrong value in map");
assertEquals(value, ConcurrentUtils.createIfAbsent(map, key, init), "Wrong result");
assertEquals(value, map.get(key), "Wrong value in map");
assertEquals(value, map.get(key), "Map was changed");
assertEquals(value, ConcurrentUtils.createIfAbsentUnchecked(map, key, new ConstantInitializer<>(value)), "Wrong result");
assertEquals(value, map.get(key), "Wrong value in map");
assertEquals(ex, crex.getCause(), "Wrong cause");
assertEquals(obj, initializer.get(), "Got different object at " + i);
assertEquals(managedObject, t.object, "Wrong object");
assertSame(e, new UncheckedExecutionException(e).getCause());
assertEquals(1, initializer.initCounter.get(), "Wrong number of invocations");
assertEquals(1, result.intValue(), "Wrong result");
assertEquals(1, init.initializeCalls, "Wrong number of invocations");
assertSame(exec, init.getActiveExecutor(), "Wrong executor");
assertEquals(exec, init.getExternalExecutor(), "Wrong executor service");
assertSame(exec, init.getActiveExecutor(), "Wrong active executor");
assertEquals(rex, ex, "Runtime exception not thrown");
assertEquals(ex, cex.getCause(), "Exception not thrown");
assertEquals(1, result.intValue(), "Wrong result");
assertEquals(1, cinit.initializeCalls, "Wrong number of executions");
assertEquals(expExec, cinit.currentExecutor, "Wrong executor service");
assertEquals(count, res.initializerNames().size(), "Wrong number of child initializers");
assertEquals(Integer.valueOf(1), res.getResultObject(key), "Wrong result object");
assertEquals(exec, initializer.getActiveExecutor(), "Wrong executor");
assertEquals(child.ex, ex, "Wrong exception");
assertEquals(child.ex, cex.getCause(), "Wrong cause");
assertEquals(count, res2.initializerNames().size(), "Wrong number of initializers");
assertEquals(answer, memoizer.compute(input));
assertEquals(input, memoizer.compute(input), "Should call computable first time");
assertEquals(input, memoizer.compute(input), "Should not call the computable the second time");
assertEquals(EXCEPTION_MESSAGE, exception.getMessage(), WRONG_EXCEPTION_MESSAGE);
assertEquals(CAUSE_MESSAGE, cause.getMessage(), WRONG_CAUSE_MESSAGE);
assertEquals(EXCEPTION_MESSAGE, exception.getMessage(), WRONG_EXCEPTION_MESSAGE);
assertEquals(CAUSE_MESSAGE, cause.getMessage(), WRONG_CAUSE_MESSAGE);
assertEquals(expected, UncheckedFuture.map(input).map(UncheckedFuture::get).collect(Collectors.toList()));
assertEquals(expected, UncheckedFuture.on(input).stream().map(UncheckedFuture::get).collect(Collectors.toList()));
assertEquals("Z", UncheckedFuture.on(new TestFuture<>("Z")).get());
assertEquals(NANO_FACTOR, breaker.getOpeningInterval(), "Wrong opening interval");
assertEquals(2 * NANO_FACTOR / 1000, breaker.getClosingInterval(), "Wrong closing interval");
assertEquals(NANO_FACTOR, breaker.getClosingInterval(), "Wrong closing interval");
assertEquals(NANO_FACTOR, breaker.getClosingInterval(), "Wrong closing interval");
assertEquals(OPENING_THRESHOLD, breaker.getClosingThreshold(), "Wrong closing threshold");
assertEquals(expectedSource, evt.getSource(), "Wrong event source");
assertEquals("open", evt.getPropertyName(), "Wrong property name");
assertNotEquals(newValue, oldValue, "Old and new value are equal");
assertArrayEquals(values,changedValues.toArray(new Boolean[0]));
assertSame(e, new UncheckedTimeoutException(e).getCause());
assertEquals(expected, init.equals(obj), "Wrong result of equals");
assertEquals(expected, obj.equals(init), "Not symmetric");
assertEquals(init.hashCode(), obj.hashCode(), "Different hash codes");
assertEquals(VALUE, init.getObject(), "Wrong object");
assertEquals(VALUE, init.get(), "Wrong object");
assertEquals(exec, init.getExternalExecutor(), "Executor not set");
assertEquals(RESULT, init.initialize(), "Wrong result");
assertEquals(1, call.callCount, "Wrong number of invocations");
assertNotSame(wrappedFactory, factory.getWrappedFactory(), "Wrapped factory not reset");
assertEquals(String.format(PATTERN, Long.valueOf(i + 1)), t.getName(), "Wrong thread name");
assertEquals(i + 1, factory.getThreadCount(), "Wrong thread count");
assertSame(t, factory.newThread(r), "Wrong thread");
assertEquals(name, t.getName(), "Name was changed");
assertSame(t, factory.newThread(r), "Wrong thread");
assertEquals(flag, t.isDaemon(), "Wrong daemon flag");
assertSame(t1, factory.newThread(r1), "Wrong thread 1");
assertSame(t2, factory.newThread(r2), "Wrong thread 2");
assertSame(t, factory.newThread(r), "Wrong thread");
assertEquals(priority, t.getPriority(), "Wrong priority");
assertSame(t, factory.newThread(r), "Wrong thread");
assertEquals(orgPriority, t.getPriority(), "Wrong priority");
assertSame(t, factory.newThread(r), "Wrong thread");
assertEquals(handler, t.getUncaughtExceptionHandler(), "Wrong exception handler");
assertSame(t, factory.newThread(r), "Wrong thread");
assertEquals(handler, t.getUncaughtExceptionHandler(), "Wrong exception handler");
assertEquals(service, semaphore.getExecutorService(), "Wrong service");
assertEquals(PERIOD_MILLIS, semaphore.getPeriod(), "Wrong period");
assertEquals(UNIT, semaphore.getUnit(), "Wrong unit");
assertEquals(0, semaphore.getLastAcquiresPerPeriod(), "Statistic available");
assertEquals(0.0, semaphore.getAverageCallsPerPeriod(), .05, "Average available");
assertEquals(LIMIT, semaphore.getLimit(), "Wrong limit");
assertEquals(count - 1, semaphore.getAcquireCount(), "Wrong semaphore count");
assertEquals(1, semaphore.getAcquireCount(), "Wrong semaphore count (2)");
assertEquals(count - 1, semaphore.getLastAcquiresPerPeriod(), "Wrong acquire() count");
assertEquals(1, semaphore.getAcquireCount(), "Wrong count");
assertEquals(1, semaphore.getLastAcquiresPerPeriod(), "Wrong acquire count");
assertEquals(1.0, semaphore.getAverageCallsPerPeriod(), .005, "Wrong average (1)");
assertEquals(1.5, semaphore.getAverageCallsPerPeriod(), .005, "Wrong average (2)");
assertEquals(LIMIT - i, semaphore.getAvailablePermits(), "Wrong available count at " + i);
assertEquals(LIMIT, semaphore.getAvailablePermits(), "Wrong available count in new period");
assertEquals(LIMIT, permits, "Wrong number of permits granted");
assertEquals(Long.valueOf(threshold), Long.valueOf(circuit.getThreshold()), "Wrong value of threshold");
assertEquals(answer, memoizer.compute(input));
assertEquals(input, memoizer.compute(input), "Should call computable first time");
assertEquals(input, memoizer.compute(input), "Should not call the computable the second time");
private void assertArrayEquals(final long[] actual, final long... expected) {Assertions.assertArrayEquals(expected, actual);
assertEquals(0L, EnumUtils.generateBitVector(Traffic.class, EnumSet.noneOf(Traffic.class)));
assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED)));
assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER)));
assertEquals(4L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.GREEN)));
assertEquals(3L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER)));
assertEquals(5L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN)));
assertEquals(6L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN)));
assertEquals(7L,EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)));
assertEquals((1L << 31), EnumUtils.generateBitVector(Enum64.class, EnumSet.of(Enum64.A31)));
assertEquals((1L << 32), EnumUtils.generateBitVector(Enum64.class, EnumSet.of(Enum64.A32)));
assertEquals((1L << 63), EnumUtils.generateBitVector(Enum64.class, EnumSet.of(Enum64.A63)));
assertEquals(Long.MIN_VALUE, EnumUtils.generateBitVector(Enum64.class, EnumSet.of(Enum64.A63)));
assertEquals(0L, EnumUtils.generateBitVector(Traffic.class));
assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED));
assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, Traffic.AMBER));
assertEquals(4L, EnumUtils.generateBitVector(Traffic.class, Traffic.GREEN));
assertEquals(3L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER));
assertEquals(5L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.GREEN));
assertEquals(6L, EnumUtils.generateBitVector(Traffic.class, Traffic.AMBER, Traffic.GREEN));
assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN));
assertEquals(7L,EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN, Traffic.GREEN));
assertEquals((1L << 31), EnumUtils.generateBitVector(Enum64.class, Enum64.A31));
assertEquals((1L << 32), EnumUtils.generateBitVector(Enum64.class, Enum64.A32));
assertEquals((1L << 63), EnumUtils.generateBitVector(Enum64.class, Enum64.A63));
assertEquals(Long.MIN_VALUE, EnumUtils.generateBitVector(Enum64.class, Enum64.A63));
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.noneOf(Traffic.class)), 0L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED)), 1L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER)), 2L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.GREEN)), 4L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER)), 3L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN)), 5L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN)), 6L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)), 7L);
assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, EnumSet.of(Enum64.A31)), (1L << 31));
assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, EnumSet.of(Enum64.A32)), (1L << 32));
assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, EnumSet.of(Enum64.A63)), (1L << 63));
assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, EnumSet.of(Enum64.A63)), Long.MIN_VALUE);
assertArrayEquals(EnumUtils.generateBitVectors(TooMany.class, EnumSet.of(TooMany.M2)), 1L, 0L);
assertArrayEquals(EnumUtils.generateBitVectors(TooMany.class, EnumSet.of(TooMany.L2, TooMany.M2)), 1L,(1L << 63));
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class), 0L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED), 1L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER), 2L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.GREEN), 4L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER), 3L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.GREEN), 5L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER, Traffic.GREEN), 6L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN), 7L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN, Traffic.GREEN), 7L);
assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, Enum64.A31), (1L << 31));
assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, Enum64.A32), (1L << 32));
assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, Enum64.A63), (1L << 63));
assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, Enum64.A63), Long.MIN_VALUE);
assertArrayEquals(EnumUtils.generateBitVectors(TooMany.class, TooMany.M2), 1L, 0L);
assertArrayEquals(EnumUtils.generateBitVectors(TooMany.class, TooMany.L2, TooMany.M2), 1L, (1L << 63));
assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, "RED"));
assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, "AMBER"));
assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, "GREEN"));
assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, "RED", Traffic.AMBER));
assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, "AMBER", Traffic.GREEN));
assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, "GREEN", Traffic.RED));
assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, "PURPLE", Traffic.AMBER));
assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, "PURPLE", Traffic.GREEN));
assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, "PURPLE", Traffic.RED));
assertEquals(Traffic.RED, EnumUtils.getEnumIgnoreCase(Traffic.class, "red"));
assertEquals(Traffic.AMBER, EnumUtils.getEnumIgnoreCase(Traffic.class, "Amber"));
assertEquals(Traffic.GREEN, EnumUtils.getEnumIgnoreCase(Traffic.class, "grEEn"));
assertEquals(Traffic.RED, EnumUtils.getEnumIgnoreCase(Traffic.class, "red", Traffic.AMBER));
assertEquals(Traffic.AMBER, EnumUtils.getEnumIgnoreCase(Traffic.class, "Amber", Traffic.GREEN));
assertEquals(Traffic.GREEN, EnumUtils.getEnumIgnoreCase(Traffic.class, "grEEn", Traffic.RED));
assertEquals(Traffic.AMBER, EnumUtils.getEnumIgnoreCase(Traffic.class, "PURPLE", Traffic.AMBER));
assertEquals(Traffic.GREEN, EnumUtils.getEnumIgnoreCase(Traffic.class, "purple", Traffic.GREEN));
assertEquals(Traffic.RED, EnumUtils.getEnumIgnoreCase(Traffic.class, "pUrPlE", Traffic.RED));
assertEquals(Traffic.AMBER, EnumUtils.getEnumIgnoreCase(Traffic.class, null, Traffic.AMBER));
assertEquals(Traffic.GREEN, EnumUtils.getEnumIgnoreCase(Traffic.class, null, Traffic.GREEN));
assertEquals(Traffic.RED, EnumUtils.getEnumIgnoreCase(Traffic.class, null, Traffic.RED));
assertEquals("{RED=RED, AMBER=AMBER, GREEN=GREEN}", test.toString(), "getEnumMap not created correctly");
assertEquals(Traffic.RED, test.get("RED"));
assertEquals(Traffic.AMBER, test.get("AMBER"));
assertEquals(Traffic.GREEN, test.get("GREEN"));
assertEquals("{1=JAN, 2=FEB, 3=MAR, 4=APR, 5=MAY, 6=JUN, 7=JUL, 8=AUG, 9=SEP, 10=OCT, 11=NOV, 12=DEC}", test.toString(),"getEnumMap not created correctly");
assertEquals(Traffic.RED, EnumUtils.getEnumSystemProperty(Traffic.class, key, null));
assertEquals(Traffic.RED, EnumUtils.getEnumSystemProperty(Traffic.class, "?", Traffic.RED));
assertEquals(Traffic.RED, EnumUtils.getEnumSystemProperty(null, null, Traffic.RED));
assertEquals(Traffic.RED, EnumUtils.getEnumSystemProperty(null, "?", Traffic.RED));
assertEquals(Traffic.RED, EnumUtils.getEnumSystemProperty(Traffic.class, null, Traffic.RED));
assertEquals(Traffic2.RED, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, "***red***", f, Traffic2.AMBER));
assertEquals(Traffic2.AMBER, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, "**Amber**", f, Traffic2.GREEN));
assertEquals(Traffic2.GREEN, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, "*grEEn*", f, Traffic2.RED));
assertEquals(Traffic2.AMBER, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, "PURPLE", f, Traffic2.AMBER));
assertEquals(Traffic2.GREEN, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, "purple", f, Traffic2.GREEN));
assertEquals(Traffic2.RED, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, "pUrPlE", f, Traffic2.RED));
assertEquals(Traffic2.AMBER, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, null, f, Traffic2.AMBER));
assertEquals(Traffic2.GREEN, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, null, f, Traffic2.GREEN));
assertEquals(Traffic2.RED, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, null, f, Traffic2.RED));
assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVector(Traffic.class, 0L));
assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVector(Traffic.class, 1L));
assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 2L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 3L));
assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 4L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 5L));
assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 6L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN),EnumUtils.processBitVector(Traffic.class, 7L));
assertEquals(EnumSet.of(Enum64.A31), EnumUtils.processBitVector(Enum64.class, (1L << 31)));
assertEquals(EnumSet.of(Enum64.A32), EnumUtils.processBitVector(Enum64.class, (1L << 32)));
assertEquals(EnumSet.of(Enum64.A63), EnumUtils.processBitVector(Enum64.class, (1L << 63)));
assertEquals(EnumSet.of(Enum64.A63), EnumUtils.processBitVector(Enum64.class, Long.MIN_VALUE));
assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 0L));
assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 1L));
assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 2L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 3L));
assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 4L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 5L));
assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 6L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN),EnumUtils.processBitVectors(Traffic.class, 7L));
assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 0L, 0L));
assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 0L, 1L));
assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 0L, 2L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 0L, 3L));
assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 4L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 5L));
assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 6L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN),EnumUtils.processBitVectors(Traffic.class, 0L, 7L));
assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 666L, 0L));
assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 666L, 1L));
assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 666L, 2L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 666L, 3L));
assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 4L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 5L));
assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 6L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN),EnumUtils.processBitVectors(Traffic.class, 666L, 7L));
assertEquals(EnumSet.of(Enum64.A31), EnumUtils.processBitVectors(Enum64.class, (1L << 31)));
assertEquals(EnumSet.of(Enum64.A32), EnumUtils.processBitVectors(Enum64.class, (1L << 32)));
assertEquals(EnumSet.of(Enum64.A63), EnumUtils.processBitVectors(Enum64.class, (1L << 63)));
assertEquals(EnumSet.of(Enum64.A63), EnumUtils.processBitVectors(Enum64.class, Long.MIN_VALUE));
assertEquals(EnumSet.noneOf(TooMany.class), EnumUtils.processBitVectors(TooMany.class, 0L));
assertEquals(EnumSet.of(TooMany.A), EnumUtils.processBitVectors(TooMany.class, 1L));
assertEquals(EnumSet.of(TooMany.B), EnumUtils.processBitVectors(TooMany.class, 2L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B), EnumUtils.processBitVectors(TooMany.class, 3L));
assertEquals(EnumSet.of(TooMany.C), EnumUtils.processBitVectors(TooMany.class, 4L));
assertEquals(EnumSet.of(TooMany.A, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 5L));
assertEquals(EnumSet.of(TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 6L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 7L));
assertEquals(EnumSet.noneOf(TooMany.class), EnumUtils.processBitVectors(TooMany.class, 0L, 0L));
assertEquals(EnumSet.of(TooMany.A), EnumUtils.processBitVectors(TooMany.class, 0L, 1L));
assertEquals(EnumSet.of(TooMany.B), EnumUtils.processBitVectors(TooMany.class, 0L, 2L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B), EnumUtils.processBitVectors(TooMany.class, 0L, 3L));
assertEquals(EnumSet.of(TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 4L));
assertEquals(EnumSet.of(TooMany.A, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 5L));
assertEquals(EnumSet.of(TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 6L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 7L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 7L));
assertEquals(EnumSet.of(TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 0L));
assertEquals(EnumSet.of(TooMany.A, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 1L));
assertEquals(EnumSet.of(TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 2L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 3L));
assertEquals(EnumSet.of(TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 4L));
assertEquals(EnumSet.of(TooMany.A, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 5L));
assertEquals(EnumSet.of(TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 6L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2),EnumUtils.processBitVectors(TooMany.class, 1L, 7L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2),EnumUtils.processBitVectors(TooMany.class, 1L, 7L));
assertEquals(EnumSet.of(TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 0L));
assertEquals(EnumSet.of(TooMany.A, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 1L));
assertEquals(EnumSet.of(TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 2L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 3L));
assertEquals(EnumSet.of(TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 4L));
assertEquals(EnumSet.of(TooMany.A, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 5L));
assertEquals(EnumSet.of(TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 6L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2),EnumUtils.processBitVectors(TooMany.class, 9L, 7L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2),EnumUtils.processBitVectors(TooMany.class, 9L, 7L));
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{true, true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false, false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{true, true, true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{true, true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false, false, false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{true, true, true, true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false, true, false, true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertNotSame(array1, array2);
assertArrayEquals(array1, array2);
assertEquals(boolean.class, array2.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{1}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{1, 1}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{3}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{1}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{1, 3, 5}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2, 4}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{1, 3, 5, 7}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2, 4, 6}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertNotSame(array1, array2);
assertArrayEquals(array1, array2);
assertEquals(byte.class, array2.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertNotSame(array1, array2);
assertArrayEquals(array1, array2);
assertEquals(char.class, array2.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{1}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{1, 1}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{3}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{1}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{1, 3, 5}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2, 4}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{1, 3, 5, 7}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2, 4, 6}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertNotSame(array1, array2);
assertArrayEquals(array1, array2);
assertEquals(double.class, array2.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{1}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{1, 1}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{3}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{1}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{1, 3, 5}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2, 4}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{1, 3, 5, 7}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2, 4, 6}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertNotSame(array1, array2);
assertArrayEquals(array1, array2);
assertEquals(float.class, array2.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertArrayEquals(new int[]{1}, array);
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{1}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{1, 1}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{3}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{1}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{1, 3, 5}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2, 4}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{1, 3, 5, 7}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2, 4, 6}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertNotSame(array1, array2);
assertArrayEquals(array1, array2);
assertEquals(int.class, array2.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{1}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{1, 1}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{3}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{1}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{1, 3, 5}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2, 4}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{1, 3, 5, 7}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2, 4, 6}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertNotSame(array1, array2);
assertArrayEquals(array1, array2);
assertEquals(long.class, array2.getClass().getComponentType());
assertEquals(3, inarray.length);
assertArrayEquals(new Number[] { Integer.valueOf(1), Byte.valueOf((byte) 3) }, outarray);
assertEquals(Number.class, outarray.getClass().getComponentType());
assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray);
assertEquals(Number.class, outarray.getClass().getComponentType());
assertEquals(0, outarray.length);
assertEquals(Number.class, outarray.getClass().getComponentType());
assertArrayEquals(new Number[] { Byte.valueOf((byte) 3) }, outarray);
assertEquals(Number.class, outarray.getClass().getComponentType());
assertArrayEquals(new Number[] { Long.valueOf(2L) }, outarray);
assertEquals(Number.class, outarray.getClass().getComponentType());
assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray);
assertEquals(Number.class, outarray.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[] { "c", "e" }, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertNotSame(array1, array2);
assertArrayEquals(array1, array2);
assertEquals(Object.class, array2.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{1}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{1, 1}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{3}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{1}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{1, 3, 5}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2, 4}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{1, 3, 5, 7}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2, 4, 6}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertNotSame(array1, array2);
assertArrayEquals(array1, array2);
assertEquals(short.class, array2.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false, true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2, 1}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{1}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2, 1}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{1}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2, 1}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{1}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2, 1}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{1}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2, 1}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{1}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2, 1}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{1}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals(Object.class, array.getClass().getComponentType());
assertEquals("y", things.get(0).string);
assertEquals("y", things.get(0).string);
assertEquals("x", things.get(0).string);
assertEquals("y", things.get(1).string);
assertEquals("z", things.get(2).string);
assertEquals(Integer.MIN_VALUE, ComparableUtils.max(Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MIN_VALUE)));
assertEquals(Integer.MAX_VALUE, ComparableUtils.max(Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(Integer.MAX_VALUE)));
assertEquals(Integer.MAX_VALUE, ComparableUtils.max(Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE)));
assertEquals(Integer.MAX_VALUE, ComparableUtils.max(Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(Integer.MIN_VALUE)));
assertEquals(Integer.MIN_VALUE, ComparableUtils.min(Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MIN_VALUE)));
assertEquals(Integer.MAX_VALUE, ComparableUtils.min(Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(Integer.MAX_VALUE)));
assertEquals(Integer.MIN_VALUE, ComparableUtils.min(Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE)));
assertEquals(Integer.MIN_VALUE, ComparableUtils.min(Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(Integer.MIN_VALUE)));
assertArrayEquals(new byte[0], RandomUtils.nextBytes(0));
assertNotEquals(endExclusive, RandomUtils.nextLong(startInclusive, endExclusive));
private void assertAbbreviateWithAbbrevMarkerAndOffset(final String expected, final String abbrevMarker, final int offset, final int maxWidth) {final String abcdefghijklmno = "abcdefghijklmno";
assertEquals(expected, actual, message);
private void assertAbbreviateWithOffset(final String expected, final int offset, final int maxWidth) {final String abcdefghijklmno = "abcdefghijklmno";
assertEquals(expected, actual, message);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals(noMatch + "c", res[2]);
assertEquals("a", res[0], msg);
assertEquals("a", res[0], msg);
assertEquals("b", res[1], msg);
assertEquals(noMatch + "c", res[2], msg);
assertEquals("a", res[0], msg);
assertEquals("b", res[1], msg);
assertEquals(noMatch + "c", res[2], msg);
assertEquals("a", res[0], msg);
assertEquals("a", res[0], msg);
assertEquals("b", res[1], msg);
assertEquals("", res[2], msg);
assertEquals(noMatch + "c", res[3], msg);
assertEquals("", res[0], msg);
assertEquals("a", res[1], msg);
assertEquals("", res[2], msg);
assertEquals("a", res[0], msg);
assertEquals("b", res[1], msg);
assertEquals("", res[2], msg);
assertEquals(noMatch + "c", res[3], msg);
assertEquals("a", res[0], msg);
assertEquals("b", res[1], msg);
assertEquals("", res[2], msg);
assertEquals(noMatch + "c", res[3], msg);
assertEquals("a", res[0], msg);
assertEquals("much too long", StringUtils.abbreviate(greaterThanMaxTest, "", 13));
assertEquals("", StringUtils.abbreviate("", 10));
assertEquals("short", StringUtils.abbreviate("short", 10));
assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all good men to come to the aid of their party.", 10));
assertEquals("raspberry p...", StringUtils.abbreviate(raspberry, 14));
assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 15));
assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 16));
assertEquals("abc...", StringUtils.abbreviate("abcdefg", 6));
assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 7));
assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 8));
assertEquals("a...", StringUtils.abbreviate("abcdefg", 4));
assertEquals("", StringUtils.abbreviate("", 4));
assertEquals("", StringUtils.abbreviate("", 0, 10));
assertEquals("", StringUtils.abbreviate("", 2, 10));
assertEquals("raspberry peach", StringUtils.abbreviate(raspberry, 11, 15));
assertAbbreviateWithOffset("abcdefg...", -1, 10);
assertAbbreviateWithOffset("abcdefg...", 0, 10);
assertAbbreviateWithOffset("abcdefg...", 1, 10);
assertAbbreviateWithOffset("abcdefg...", 2, 10);
assertAbbreviateWithOffset("abcdefg...", 3, 10);
assertAbbreviateWithOffset("abcdefg...", 4, 10);
assertAbbreviateWithOffset("...fghi...", 5, 10);
assertAbbreviateWithOffset("...ghij...", 6, 10);
assertAbbreviateWithOffset("...hijk...", 7, 10);
assertAbbreviateWithOffset("...ijklmno", 8, 10);
assertAbbreviateWithOffset("...ijklmno", 9, 10);
assertAbbreviateWithOffset("...ijklmno", 10, 10);
assertAbbreviateWithOffset("...ijklmno", 11, 10);
assertAbbreviateWithOffset("...ijklmno", 12, 10);
assertAbbreviateWithOffset("...ijklmno", 13, 10);
assertAbbreviateWithOffset("...ijklmno", 14, 10);
assertAbbreviateWithOffset("...ijklmno", 15, 10);
assertAbbreviateWithOffset("...ijklmno", 16, 10);
assertAbbreviateWithOffset("...ijklmno", Integer.MAX_VALUE, 10);
assertEquals("paranaguacu", StringUtils.abbreviate("paranaguacu", null, 10));
assertEquals("", StringUtils.abbreviate("", "...", 2));
assertEquals("wai**", StringUtils.abbreviate("waiheke", "**", 5));
assertEquals("And af,,,,", StringUtils.abbreviate("And after a long time, he finally met his son.", ",,,,", 10));
assertEquals("raspberry pe..", StringUtils.abbreviate(raspberry, "..", 14));
assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", "---*---", 15));
assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", ".", 16));
assertEquals("abc()(", StringUtils.abbreviate("abcdefg", "()(", 6));
assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", ";", 7));
assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", "_-", 8));
assertEquals("abc.", StringUtils.abbreviate("abcdefg", ".", 4));
assertEquals("", StringUtils.abbreviate("", 4));
assertEquals("", StringUtils.abbreviate("", null, 0, 10));
assertEquals("", StringUtils.abbreviate("", "...", 2, 10));
assertEquals("raspberry peach", StringUtils.abbreviate(raspberry, "--", 12, 15));
assertAbbreviateWithAbbrevMarkerAndOffset("abcdefgh;;", ";;", -1, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("abcdefghi.", ".", 0, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("abcdefgh++", "++", 1, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("abcdefghi*", "*", 2, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("abcdef{{{{", "{{{{", 4, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("abcdef____", "____", 5, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("==fghijk==", "==", 5, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("___ghij___", "___", 6, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("/ghijklmno", "/", 7, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("/ghijklmno", "/", 8, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("/ghijklmno", "/", 9, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("///ijklmno", "///", 10, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("//hijklmno", "//", 10, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("//hijklmno", "//", 11, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("...ijklmno", "...", 12, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("/ghijklmno", "/", 13, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("/ghijklmno", "/", 14, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("999ijklmno", "999", 15, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("_ghijklmno", "_", 16, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("+ghijklmno", "+", Integer.MAX_VALUE, 10);
assertEquals("abc", StringUtils.abbreviateMiddle("abc", null, 0));
assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 0));
assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 3));
assertEquals("ab.f", StringUtils.abbreviateMiddle("abcdef", ".", 4));
assertEquals("A very long text with un...f the text is complete.",StringUtils.abbreviateMiddle("A very long text with unimportant stuff in the middle but interesting start and " +"end to see if the text is complete.", "...", 50));
assertEquals("Start text->Close text",StringUtils.abbreviateMiddle(longText, "->", 22));
assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", -1));
assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 1));
assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 2));
assertEquals("a", StringUtils.abbreviateMiddle("a", ".", 1));
assertEquals("a.d", StringUtils.abbreviateMiddle("abcd", ".", 3));
assertEquals("a..f", StringUtils.abbreviateMiddle("abcdef", "..", 4));
assertEquals("ab.ef", StringUtils.abbreviateMiddle("abcdef", ".", 5));
assertEquals("abc", StringUtils.appendIfMissing("abc", null), "appendIfMissing(abc,null)");
assertEquals("xyz", StringUtils.appendIfMissing("", "xyz"), "appendIfMissing(\"\",xyz)");
assertEquals("abcxyz", StringUtils.appendIfMissing("abc", "xyz"), "appendIfMissing(abc,xyz)");
assertEquals("abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz"), "appendIfMissing(abcxyz,xyz)");
assertEquals("aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz"), "appendIfMissing(aXYZ,xyz)");
assertEquals("abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null), "appendIfMissing(abc,null,null)");
assertEquals("xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null), "appendIfMissing(\"\",xyz,null))");
assertEquals("abcxyz", StringUtils.appendIfMissing("abc", "xyz", null), "appendIfMissing(abc,xyz,{null})");
assertEquals("abc", StringUtils.appendIfMissing("abc", "xyz", ""), "appendIfMissing(abc,xyz,\"\")");
assertEquals("abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno"), "appendIfMissing(abc,xyz,mno)");
assertEquals("abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno"), "appendIfMissing(abcxyz,xyz,mno)");
assertEquals("abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno"), "appendIfMissing(abcmno,xyz,mno)");
assertEquals("abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno"), "appendIfMissing(abcXYZ,xyz,mno)");
assertEquals("abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno"), "appendIfMissing(abcMNO,xyz,mno)");
assertEquals("abc", StringUtils.appendIfMissingIgnoreCase("abc", null), "appendIfMissingIgnoreCase(abc,null)");
assertEquals("xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz"), "appendIfMissingIgnoreCase(\"\",xyz)");
assertEquals("abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz"), "appendIfMissingIgnoreCase(abc,xyz)");
assertEquals("abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz"), "appendIfMissingIgnoreCase(abcxyz,xyz)");
assertEquals("abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz"), "appendIfMissingIgnoreCase(abcXYZ,xyz)");
assertEquals("abc", StringUtils.appendIfMissingIgnoreCase("abc", null, (CharSequence[]) null), "appendIfMissingIgnoreCase(abc,null,null)");
assertEquals("xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz", (CharSequence[]) null), "appendIfMissingIgnoreCase(\"\",xyz,null)");
assertEquals("abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", null), "appendIfMissingIgnoreCase(abc,xyz,{null})");
assertEquals("abc", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", ""), "appendIfMissingIgnoreCase(abc,xyz,\"\")");
assertEquals("abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "mno"), "appendIfMissingIgnoreCase(abc,xyz,mno)");
assertEquals("abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz", "mno"), "appendIfMissingIgnoreCase(abcxyz,xyz,mno)");
assertEquals("abcmno", StringUtils.appendIfMissingIgnoreCase("abcmno", "xyz", "mno"), "appendIfMissingIgnoreCase(abcmno,xyz,mno)");
assertEquals("abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz", "mno"), "appendIfMissingIgnoreCase(abcXYZ,xyz,mno)");
assertEquals("abcMNO", StringUtils.appendIfMissingIgnoreCase("abcMNO", "xyz", "mno"), "appendIfMissingIgnoreCase(abcMNO,xyz,mno)");
assertEquals("", StringUtils.capitalize(""), "capitalize(empty-string) failed");
assertEquals("X", StringUtils.capitalize("x"), "capitalize(single-char-string) failed");
assertEquals(FOO_CAP, StringUtils.capitalize(FOO_CAP), "capitalize(String) failed");
assertEquals(FOO_CAP, StringUtils.capitalize(FOO_UNCAP), "capitalize(string) failed");
assertEquals("\u01C8", StringUtils.capitalize("\u01C9"), "capitalize(String) is not using TitleCase");
assertEquals("", StringUtils.capitalize(""));
assertEquals("Cat", StringUtils.capitalize("cat"));
assertEquals("CAt", StringUtils.capitalize("cAt"));
assertEquals("'cat'", StringUtils.capitalize("'cat'"));
assertEquals("    ", StringUtils.center("", 4));
assertEquals("ab", StringUtils.center("ab", 0));
assertEquals("ab", StringUtils.center("ab", -1));
assertEquals("ab", StringUtils.center("ab", 1));
assertEquals("    ", StringUtils.center("", 4));
assertEquals(" ab ", StringUtils.center("ab", 4));
assertEquals("abcd", StringUtils.center("abcd", 2));
assertEquals(" a  ", StringUtils.center("a", 4));
assertEquals("  a  ", StringUtils.center("a", 5));
assertEquals("    ", StringUtils.center("", 4, ' '));
assertEquals("ab", StringUtils.center("ab", 0, ' '));
assertEquals("ab", StringUtils.center("ab", -1, ' '));
assertEquals("ab", StringUtils.center("ab", 1, ' '));
assertEquals("    ", StringUtils.center("", 4, ' '));
assertEquals(" ab ", StringUtils.center("ab", 4, ' '));
assertEquals("abcd", StringUtils.center("abcd", 2, ' '));
assertEquals(" a  ", StringUtils.center("a", 4, ' '));
assertEquals("  a  ", StringUtils.center("a", 5, ' '));
assertEquals("xxaxx", StringUtils.center("a", 5, 'x'));
assertEquals("    ", StringUtils.center("", 4, " "));
assertEquals("ab", StringUtils.center("ab", 0, " "));
assertEquals("ab", StringUtils.center("ab", -1, " "));
assertEquals("ab", StringUtils.center("ab", 1, " "));
assertEquals("    ", StringUtils.center("", 4, " "));
assertEquals(" ab ", StringUtils.center("ab", 4, " "));
assertEquals("abcd", StringUtils.center("abcd", 2, " "));
assertEquals(" a  ", StringUtils.center("a", 4, " "));
assertEquals("yayz", StringUtils.center("a", 4, "yz"));
assertEquals("yzyayzy", StringUtils.center("a", 7, "yz"));
assertEquals("  abc  ", StringUtils.center("abc", 7, null));
assertEquals("  abc  ", StringUtils.center("abc", 7, ""));
assertEquals(expectedResult, StringUtils.chomp(original), "chomp(String) failed");
assertEquals("foo", StringUtils.chomp("foobar", "bar"), "chomp(String, String) failed");
assertEquals("foobar", StringUtils.chomp("foobar", "baz"), "chomp(String, String) failed");
assertEquals("foo", StringUtils.chomp("foo", "foooo"), "chomp(String, String) failed");
assertEquals("foobar", StringUtils.chomp("foobar", ""), "chomp(String, String) failed");
assertEquals("foobar", StringUtils.chomp("foobar", null), "chomp(String, String) failed");
assertEquals("", StringUtils.chomp("", "foo"), "chomp(String, String) failed");
assertEquals("", StringUtils.chomp("", null), "chomp(String, String) failed");
assertEquals("", StringUtils.chomp("", ""), "chomp(String, String) failed");
assertEquals("", StringUtils.chomp("foo", "foo"), "chomp(String, String) failed");
assertEquals(" ", StringUtils.chomp(" foo", "foo"), "chomp(String, String) failed");
assertEquals("foo ", StringUtils.chomp("foo ", "foo"), "chomp(String, String) failed");
assertEquals(expectedResult, StringUtils.chop(original), "chop(String) failed");
assertEquals("", StringUtils.defaultString(null));
assertEquals("", StringUtils.defaultString(""));
assertEquals("abc", StringUtils.defaultString("abc"));
assertEquals("NULL", StringUtils.defaultString(null, "NULL"));
assertEquals("", StringUtils.defaultString("", "NULL"));
assertEquals("abc", StringUtils.defaultString("abc", "NULL"));
assertEquals("NULL", StringUtils.defaultIfBlank(CharBuffer.wrap(""), CharBuffer.wrap("NULL")).toString());
assertEquals("NULL", StringUtils.defaultIfBlank(CharBuffer.wrap(" "), CharBuffer.wrap("NULL")).toString());
assertEquals("abc", StringUtils.defaultIfBlank(CharBuffer.wrap("abc"), CharBuffer.wrap("NULL")).toString());
assertEquals("abc", s.toString());
assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(""), new StringBuffer("NULL")).toString());
assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(" "), new StringBuffer("NULL")).toString());
assertEquals("abc", StringUtils.defaultIfBlank(new StringBuffer("abc"), new StringBuffer("NULL")).toString());
assertEquals("abc", s.toString());
assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuilder(""), new StringBuilder("NULL")).toString());
assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuilder(" "), new StringBuilder("NULL")).toString());
assertEquals("abc", StringUtils.defaultIfBlank(new StringBuilder("abc"), new StringBuilder("NULL")).toString());
assertEquals("abc", s.toString());
assertEquals("NULL", StringUtils.defaultIfBlank(null, "NULL"));
assertEquals("NULL", StringUtils.defaultIfBlank("", "NULL"));
assertEquals("NULL", StringUtils.defaultIfBlank(" ", "NULL"));
assertEquals("abc", StringUtils.defaultIfBlank("abc", "NULL"));
assertEquals("NULL", StringUtils.getIfBlank(null, () -> "NULL"));
assertEquals("NULL", StringUtils.getIfBlank("",  () -> "NULL"));
assertEquals("NULL", StringUtils.getIfBlank(" ", () -> "NULL"));
assertEquals("abc", StringUtils.getIfBlank("abc", () -> "NULL"));
assertEquals(0, numberOfCalls.getValue());
assertEquals(1, numberOfCalls.getValue());
assertEquals(2, numberOfCalls.getValue());
assertEquals(3, numberOfCalls.getValue());
assertEquals("NULL", StringUtils.defaultIfEmpty(CharBuffer.wrap(""), CharBuffer.wrap("NULL")).toString());
assertEquals("abc", StringUtils.defaultIfEmpty(CharBuffer.wrap("abc"), CharBuffer.wrap("NULL")).toString());
assertEquals("abc", s.toString());
assertEquals("NULL", StringUtils.defaultIfEmpty(new StringBuffer(""), new StringBuffer("NULL")).toString());
assertEquals("abc", StringUtils.defaultIfEmpty(new StringBuffer("abc"), new StringBuffer("NULL")).toString());
assertEquals("abc", s.toString());
assertEquals("NULL", StringUtils.defaultIfEmpty(new StringBuilder(""), new StringBuilder("NULL")).toString());
assertEquals("abc", StringUtils.defaultIfEmpty(new StringBuilder("abc"), new StringBuilder("NULL")).toString());
assertEquals("abc", s.toString());
assertEquals("NULL", StringUtils.defaultIfEmpty(null, "NULL"));
assertEquals("NULL", StringUtils.defaultIfEmpty("", "NULL"));
assertEquals("abc", StringUtils.defaultIfEmpty("abc", "NULL"));
assertEquals("NULL", StringUtils.getIfEmpty((String) null, () -> "NULL"));
assertEquals("NULL", StringUtils.getIfEmpty("", () -> "NULL"));
assertEquals("abc", StringUtils.getIfEmpty("abc", () -> "NULL"));
assertEquals(0, numberOfCalls.getValue());
assertEquals(1, numberOfCalls.getValue());
assertEquals(2, numberOfCalls.getValue());
assertEquals("", StringUtils.deleteWhitespace(""));
assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  "));
assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE));
assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE));
assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("  \u00A0  \t\t\n\n \u202F  "));
assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("\u00A0\u202F"));
assertEquals("test", StringUtils.deleteWhitespace("\u000Bt  \t\n\u0009e\rs\n\n   \tt"));
assertEquals("", StringUtils.difference("", ""));
assertEquals("abc", StringUtils.difference("", "abc"));
assertEquals("", StringUtils.difference("abc", ""));
assertEquals("i am a robot", StringUtils.difference(null, "i am a robot"));
assertEquals("i am a machine", StringUtils.difference("i am a machine", null));
assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot"));
assertEquals("", StringUtils.difference("abc", "abc"));
assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot"));
assertEquals(-1, StringUtils.indexOfDifference((String[]) null));
assertEquals(-1, StringUtils.indexOfDifference());
assertEquals(-1, StringUtils.indexOfDifference("abc"));
assertEquals(-1, StringUtils.indexOfDifference(null, null));
assertEquals(-1, StringUtils.indexOfDifference("", ""));
assertEquals(0, StringUtils.indexOfDifference("", null));
assertEquals(0, StringUtils.indexOfDifference("abc", null, null));
assertEquals(0, StringUtils.indexOfDifference(null, null, "abc"));
assertEquals(0, StringUtils.indexOfDifference("", "abc"));
assertEquals(0, StringUtils.indexOfDifference("abc", ""));
assertEquals(-1, StringUtils.indexOfDifference("abc", "abc"));
assertEquals(1, StringUtils.indexOfDifference("abc", "a"));
assertEquals(2, StringUtils.indexOfDifference("ab", "abxyz"));
assertEquals(2, StringUtils.indexOfDifference("abcde", "abxyz"));
assertEquals(0, StringUtils.indexOfDifference("abcde", "xyz"));
assertEquals(0, StringUtils.indexOfDifference("xyz", "abcde"));
assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot"));
assertEquals(-1, StringUtils.indexOfDifference(null, null));
assertEquals(0, StringUtils.indexOfDifference(null, "i am a robot"));
assertEquals(-1, StringUtils.indexOfDifference("", ""));
assertEquals(0, StringUtils.indexOfDifference("", "abc"));
assertEquals(0, StringUtils.indexOfDifference("abc", ""));
assertEquals(0, StringUtils.indexOfDifference("i am a machine", null));
assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot"));
assertEquals(-1, StringUtils.indexOfDifference("foo", "foo"));
assertEquals(0, StringUtils.indexOfDifference("i am a robot", "you are a robot"));
assertEquals("", StringUtils.EMPTY);
assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30"));
assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00"));
assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E"));
assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD"));
assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD"));
assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD"));
assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD"));
assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD"));       //fail LANG-858
assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); //fail LANG-858
assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, StringUtils.getBytes(null, (Charset) null));
assertArrayEquals(StringUtils.EMPTY.getBytes(), StringUtils.getBytes(StringUtils.EMPTY, (Charset) null));
assertArrayEquals(StringUtils.EMPTY.getBytes(StandardCharsets.US_ASCII),StringUtils.getBytes(StringUtils.EMPTY, StandardCharsets.US_ASCII));
assertArrayEquals(StringUtils.EMPTY.getBytes(), StringUtils.getBytes(StringUtils.EMPTY, (String) null));
assertArrayEquals(StringUtils.EMPTY.getBytes(StandardCharsets.US_ASCII.name()),StringUtils.getBytes(StringUtils.EMPTY, StandardCharsets.US_ASCII.name()));
assertEquals("", StringUtils.getCommonPrefix((String[]) null));
assertEquals("", StringUtils.getCommonPrefix());
assertEquals("abc", StringUtils.getCommonPrefix("abc"));
assertEquals("", StringUtils.getCommonPrefix(null, null));
assertEquals("", StringUtils.getCommonPrefix("", ""));
assertEquals("", StringUtils.getCommonPrefix("", null));
assertEquals("", StringUtils.getCommonPrefix("abc", null, null));
assertEquals("", StringUtils.getCommonPrefix(null, null, "abc"));
assertEquals("", StringUtils.getCommonPrefix("", "abc"));
assertEquals("", StringUtils.getCommonPrefix("abc", ""));
assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc"));
assertEquals("a", StringUtils.getCommonPrefix("abc", "a"));
assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz"));
assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz"));
assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz"));
assertEquals("", StringUtils.getCommonPrefix("xyz", "abcde"));
assertEquals("i am a ", StringUtils.getCommonPrefix("i am a machine", "i am a robot"));
assertEquals("", StringUtils.getDigits(""));
assertEquals("", StringUtils.getDigits("abc"));
assertEquals("1000", StringUtils.getDigits("1000$"));
assertEquals("12345", StringUtils.getDigits("123password45"));
assertEquals("5417543010", StringUtils.getDigits("(541) 754-3010"));
assertEquals("\u0967\u0968\u0969", StringUtils.getDigits("\u0967\u0968\u0969"));
assertEquals(0, StringUtils.getFuzzyDistance("", "", Locale.ENGLISH));
assertEquals(0, StringUtils.getFuzzyDistance("Workshop", "b", Locale.ENGLISH));
assertEquals(1, StringUtils.getFuzzyDistance("Room", "o", Locale.ENGLISH));
assertEquals(1, StringUtils.getFuzzyDistance("Workshop", "w", Locale.ENGLISH));
assertEquals(2, StringUtils.getFuzzyDistance("Workshop", "ws", Locale.ENGLISH));
assertEquals(4, StringUtils.getFuzzyDistance("Workshop", "wo", Locale.ENGLISH));
assertEquals(3, StringUtils.getFuzzyDistance("Apache Software Foundation", "asf", Locale.ENGLISH));
assertEquals(0.93d, StringUtils.getJaroWinklerDistance("frog", "fog"));
assertEquals(0.0d, StringUtils.getJaroWinklerDistance("fly", "ant"));
assertEquals(0.44d, StringUtils.getJaroWinklerDistance("elephant", "hippo"));
assertEquals(0.84d, StringUtils.getJaroWinklerDistance("dwayne", "duane"));
assertEquals(0.93d, StringUtils.getJaroWinklerDistance("ABC Corporation", "ABC Corp"));
assertEquals(0.95d, StringUtils.getJaroWinklerDistance("D N H Enterprises Inc", "D & H Enterprises, Inc."));
assertEquals(0.92d, StringUtils.getJaroWinklerDistance("My Gym Children's Fitness Center", "My Gym. Childrens Fitness"));
assertEquals(0.88d, StringUtils.getJaroWinklerDistance("PENNSYLVANIA", "PENNCISYLVNIA"));
assertEquals(0.63d, StringUtils.getJaroWinklerDistance("Haus Ingeborg", "Ingeborg Esser"));
assertEquals(0, StringUtils.getLevenshteinDistance("", ""));
assertEquals(1, StringUtils.getLevenshteinDistance("", "a"));
assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", ""));
assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog"));
assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant"));
assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo"));
assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant"));
assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz"));
assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo"));
assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo"));
assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0));
assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8));
assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7));
assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6));
assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0));
assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0));
assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 0));
assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 2));
assertEquals(-1, StringUtils.getLevenshteinDistance("aaa", "bbb", 2));
assertEquals(3, StringUtils.getLevenshteinDistance("aaa", "bbb", 3));
assertEquals(6, StringUtils.getLevenshteinDistance("aaaaaa", "b", 10));
assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 8));
assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 4));
assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 7));
assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 3));
assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 2));
assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 2));
assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "b", 6));
assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 1));
assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 1));
assertEquals(-1, StringUtils.getLevenshteinDistance("12345", "1234567", 1));
assertEquals(-1, StringUtils.getLevenshteinDistance("1234567", "12345", 1));
assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog", 1));
assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant", 3));
assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo", 7));
assertEquals(-1, StringUtils.getLevenshteinDistance("elephant", "hippo", 6));
assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant", 7));
assertEquals(-1, StringUtils.getLevenshteinDistance("hippo", "elephant", 6));
assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz", 8));
assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo", 8));
assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo", 1));
assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog", Integer.MAX_VALUE));
assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant", Integer.MAX_VALUE));
assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo", Integer.MAX_VALUE));
assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant", Integer.MAX_VALUE));
assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz", Integer.MAX_VALUE));
assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo", Integer.MAX_VALUE));
assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo", Integer.MAX_VALUE));
assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));
assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));
assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));
assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length - 1));
assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));
assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST, '/', 0, 1));
assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));
assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));
assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));
assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR));
assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
assertEquals("false;false", StringUtils.join(ARRAY_FALSE_FALSE, SEPARATOR_CHAR));
assertEquals("", StringUtils.join(EMPTY, SEPARATOR_CHAR));
assertEquals("false,true,false", StringUtils.join(ARRAY_FALSE_TRUE_FALSE, COMMA_SEPARATOR_CHAR));
assertEquals("true", StringUtils.join(ARRAY_FALSE_TRUE, SEPARATOR_CHAR, 1, 2));
assertEquals("1;2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR));
assertEquals("2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
assertEquals("1.0;2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR));
assertEquals("2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR));
assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR));
assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
assertEquals("1;2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR));
assertEquals("2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
assertEquals("1;2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR));
assertEquals("2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, ""));
assertEquals("", StringUtils.join(NULL_ARRAY_LIST, null));
assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, null));
assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, ""));
assertEquals("", StringUtils.join(MIXED_ARRAY_LIST, "", 0, MIXED_ARRAY_LIST.length - 1));
assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, delimiter));
assertEquals(String.join(delimiter, ARRAY_LIST), StringUtils.join(ARRAY_LIST, delimiter));
assertEquals(delimiter + delimiter + "foo", StringUtils.join(MIXED_ARRAY_LIST, delimiter));
assertEquals(String.join(delimiter, "foo", "2"), StringUtils.join(MIXED_TYPE_LIST, delimiter));
assertEquals(delimiter, StringUtils.join(MIXED_ARRAY_LIST, delimiter, 0, MIXED_ARRAY_LIST.length - 1));
assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, delimiter, 0, 1));
assertEquals(String.join(delimiter, "foo", "2"), StringUtils.join(MIXED_TYPE_LIST, delimiter, 0, 2));
assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, delimiter, 1, 2));
assertEquals("", StringUtils.join(MIXED_TYPE_LIST, delimiter, 2, 1));
assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR));
assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR));
assertEquals("foo", StringUtils.join(Collections.singleton("foo"), 'x'));
assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), ""));
assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x"));
assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null));
assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null));
assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null));
assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), ""));
assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR));
assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR));
assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR));
assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x'));
assertEquals("null", StringUtils.join(Arrays.asList(NULL_TO_STRING_LIST).iterator(), SEPARATOR_CHAR));
assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), ""));
assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), "x"));
assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), null));
assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null));
assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null));
assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), ""));
assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR));
assertEquals("null", StringUtils.join(Arrays.asList(NULL_TO_STRING_LIST).iterator(), SEPARATOR));
assertEquals(TEXT_LIST_NOSEP, StringUtils.join(STRING_LIST, ""));
assertEquals("", StringUtils.join(NULL_STRING_LIST, null));
assertEquals("", StringUtils.join(EMPTY_STRING_LIST, null));
assertEquals("", StringUtils.join(EMPTY_STRING_LIST, ""));
assertEquals("", StringUtils.join(MIXED_STRING_LIST, "", 0, MIXED_STRING_LIST.size()- 1));
assertEquals("/", StringUtils.join(MIXED_STRING_LIST, '/', 0, MIXED_STRING_LIST.size() - 1));
assertEquals("foo", StringUtils.join(MIXED_TYPE_OBJECT_LIST, '/', 0, 1));
assertEquals("foo/2", StringUtils.join(MIXED_TYPE_OBJECT_LIST, '/', 0, 2));
assertEquals("2", StringUtils.join(MIXED_TYPE_OBJECT_LIST, '/', 1, 2));
assertEquals("", StringUtils.join(MIXED_TYPE_OBJECT_LIST, '/', 2, 1));
assertEquals("", StringUtils.join(EMPTY_STRING_LIST, delimiter));
assertEquals(String.join(delimiter, STRING_LIST), StringUtils.join(STRING_LIST, delimiter));
assertEquals(delimiter + delimiter + "foo", StringUtils.join(MIXED_STRING_LIST, delimiter));
assertEquals(String.join(delimiter, "foo", "2"), StringUtils.join(MIXED_TYPE_OBJECT_LIST, delimiter));
assertEquals(delimiter, StringUtils.join(MIXED_STRING_LIST, delimiter, 0, MIXED_STRING_LIST.size() - 1));
assertEquals("foo", StringUtils.join(MIXED_TYPE_OBJECT_LIST, delimiter, 0, 1));
assertEquals(String.join(delimiter, "foo", "2"), StringUtils.join(MIXED_TYPE_OBJECT_LIST, delimiter, 0, 2));
assertEquals("2", StringUtils.join(MIXED_TYPE_OBJECT_LIST, delimiter, 1, 2));
assertEquals("", StringUtils.join(MIXED_TYPE_OBJECT_LIST, delimiter, 2, 1));
assertEquals("", StringUtils.join()); // empty array
assertEquals("", StringUtils.join((Object) null)); // => new Object[]{null}
assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST));
assertEquals("", StringUtils.join(NULL_ARRAY_LIST));
assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST));
assertEquals("abc", StringUtils.join("a", "b", "c"));
assertEquals("a", StringUtils.join(null, "a", ""));
assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST));
assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST));
assertEquals(expected, actual);
assertEquals("abc", StringUtils.join("a", "b", "c"));
assertEquals("a", StringUtils.join(null, "", "a"));
assertEquals("", StringUtils.joinWith(delimiter)); // empty array
assertEquals("", StringUtils.joinWith(delimiter, (Object[]) NULL_ARRAY_LIST));
assertEquals("null", StringUtils.joinWith(delimiter, NULL_TO_STRING_LIST)); // toString method prints 'null'
assertEquals(String.join(delimiter, "a", "b", "c"), StringUtils.joinWith(delimiter, "a", "b", "c"));
assertEquals(String.join(delimiter, "", "a", ""), StringUtils.joinWith(delimiter, null, "a", ""));
assertEquals(String.join(delimiter, "", "a", ""), StringUtils.joinWith(delimiter, "", "a", ""));
assertEquals("ab", StringUtils.joinWith(null, "a", "b"));
assertEquals("t", StringUtils.replaceChars("\u00DE", '\u00DE', 't'));
assertEquals("t", StringUtils.replaceChars("\u00FE", '\u00FE', 't'));
assertEquals("12", StringUtils.stripEnd("120.00", ".0"));
assertEquals("121", StringUtils.stripEnd("121.00", ".0"));
assertEquals("     ", StringUtils.leftPad("", 5));
assertEquals("  abc", StringUtils.leftPad("abc", 5));
assertEquals("abc", StringUtils.leftPad("abc", 2));
assertEquals("     ", StringUtils.leftPad("", 5, ' '));
assertEquals("  abc", StringUtils.leftPad("abc", 5, ' '));
assertEquals("xxabc", StringUtils.leftPad("abc", 5, 'x'));
assertEquals("\uffff\uffffabc", StringUtils.leftPad("abc", 5, '\uffff'));
assertEquals("abc", StringUtils.leftPad("abc", 2, ' '));
assertEquals("     ", StringUtils.leftPad("", 5, " "));
assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+"));
assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~"));
assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~"));
assertEquals("abc", StringUtils.leftPad("abc", 2, " "));
assertEquals("abc", StringUtils.leftPad("abc", -1, " "));
assertEquals("  abc", StringUtils.leftPad("abc", 5, null));
assertEquals("  abc", StringUtils.leftPad("abc", 5, ""));
assertEquals(0, StringUtils.length(CharBuffer.wrap("")));
assertEquals(1, StringUtils.length(CharBuffer.wrap("A")));
assertEquals(1, StringUtils.length(CharBuffer.wrap(" ")));
assertEquals(8, StringUtils.length(CharBuffer.wrap("ABCDEFGH")));
assertEquals(0, StringUtils.length(""));
assertEquals(1, StringUtils.length("A"));
assertEquals(1, StringUtils.length(" "));
assertEquals(8, StringUtils.length("ABCDEFGH"));
assertEquals(0, StringUtils.length(new StringBuffer("")));
assertEquals(0, StringUtils.length(new StringBuffer(StringUtils.EMPTY)));
assertEquals(1, StringUtils.length(new StringBuffer("A")));
assertEquals(1, StringUtils.length(new StringBuffer(" ")));
assertEquals(8, StringUtils.length(new StringBuffer("ABCDEFGH")));
assertEquals(0, StringUtils.length(new StringBuilder("")));
assertEquals(0, StringUtils.length(new StringBuilder(StringUtils.EMPTY)));
assertEquals(1, StringUtils.length(new StringBuilder("A")));
assertEquals(1, StringUtils.length(new StringBuilder(" ")));
assertEquals(8, StringUtils.length(new StringBuilder("ABCDEFGH")));
assertEquals("foo test thing", StringUtils.lowerCase("fOo test THING"), "lowerCase(String) failed");
assertEquals("", StringUtils.lowerCase(""), "lowerCase(empty-string) failed");
assertEquals("foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH),"lowerCase(String, Locale) failed");
assertEquals("", StringUtils.lowerCase("", Locale.ENGLISH), "lowerCase(empty-string, Locale) failed");
assertEquals("", StringUtils.normalizeSpace(""));
assertEquals("", StringUtils.normalizeSpace(" "));
assertEquals("", StringUtils.normalizeSpace("\t"));
assertEquals("", StringUtils.normalizeSpace("\n"));
assertEquals("", StringUtils.normalizeSpace("\u0009"));
assertEquals("", StringUtils.normalizeSpace("\u000B"));
assertEquals("", StringUtils.normalizeSpace("\u000C"));
assertEquals("", StringUtils.normalizeSpace("\u001C"));
assertEquals("", StringUtils.normalizeSpace("\u001D"));
assertEquals("", StringUtils.normalizeSpace("\u001E"));
assertEquals("", StringUtils.normalizeSpace("\u001F"));
assertEquals("", StringUtils.normalizeSpace("\f"));
assertEquals("", StringUtils.normalizeSpace("\r"));
assertEquals("a", StringUtils.normalizeSpace("  a  "));
assertEquals("a b c", StringUtils.normalizeSpace("  a  b   c  "));
assertEquals("a b c", StringUtils.normalizeSpace("a\t\f\r  b\u000B   c\n"));
assertEquals("a   b c", StringUtils.normalizeSpace("a\t\f\r  " + HARD_SPACE + HARD_SPACE + "b\u000B   c\n"));
assertEquals("b", StringUtils.normalizeSpace("\u0000b"));
assertEquals("b", StringUtils.normalizeSpace("b\u0000"));
assertEquals("", StringUtils.overlay("", null, 0, 0));
assertEquals("", StringUtils.overlay("", "", 0, 0));
assertEquals("zzzz", StringUtils.overlay("", "zzzz", 0, 0));
assertEquals("zzzz", StringUtils.overlay("", "zzzz", 2, 4));
assertEquals("zzzz", StringUtils.overlay("", "zzzz", -2, -4));
assertEquals("abef", StringUtils.overlay("abcdef", null, 2, 4));
assertEquals("abef", StringUtils.overlay("abcdef", null, 4, 2));
assertEquals("abef", StringUtils.overlay("abcdef", "", 2, 4));
assertEquals("abef", StringUtils.overlay("abcdef", "", 4, 2));
assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 2, 4));
assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 4, 2));
assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", -1, 4));
assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", 4, -1));
assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -2, -1));
assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -1, -2));
assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 4, 10));
assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 4));
assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 8, 10));
assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 8));
assertEquals("abc", StringUtils.prependIfMissing("abc", null), "prependIfMissing(abc,null)");
assertEquals("xyz", StringUtils.prependIfMissing("", "xyz"), "prependIfMissing(\"\",xyz)");
assertEquals("xyzabc", StringUtils.prependIfMissing("abc", "xyz"), "prependIfMissing(abc,xyz)");
assertEquals("xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz"), "prependIfMissing(xyzabc,xyz)");
assertEquals("xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz"), "prependIfMissing(XYZabc,xyz)");
assertEquals("abc", StringUtils.prependIfMissing("abc", null, (CharSequence[]) null), "prependIfMissing(abc,null,null)");
assertEquals("xyz", StringUtils.prependIfMissing("", "xyz", (CharSequence[]) null), "prependIfMissing(\"\",xyz,null)");
assertEquals("xyzabc", StringUtils.prependIfMissing("abc", "xyz", null), "prependIfMissing(abc,xyz,{null})");
assertEquals("abc", StringUtils.prependIfMissing("abc", "xyz", ""), "prependIfMissing(abc,xyz,\"\")");
assertEquals("xyzabc", StringUtils.prependIfMissing("abc", "xyz", "mno"), "prependIfMissing(abc,xyz,mno)");
assertEquals("xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz", "mno"), "prependIfMissing(xyzabc,xyz,mno)");
assertEquals("mnoabc", StringUtils.prependIfMissing("mnoabc", "xyz", "mno"), "prependIfMissing(mnoabc,xyz,mno)");
assertEquals("xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz", "mno"), "prependIfMissing(XYZabc,xyz,mno)");
assertEquals("xyzMNOabc", StringUtils.prependIfMissing("MNOabc", "xyz", "mno"), "prependIfMissing(MNOabc,xyz,mno)");
assertEquals("abc", StringUtils.prependIfMissingIgnoreCase("abc", null), "prependIfMissingIgnoreCase(abc,null)");
assertEquals("xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz"), "prependIfMissingIgnoreCase(\"\",xyz)");
assertEquals("xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz"), "prependIfMissingIgnoreCase(abc,xyz)");
assertEquals("xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz"), "prependIfMissingIgnoreCase(xyzabc,xyz)");
assertEquals("XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz"), "prependIfMissingIgnoreCase(XYZabc,xyz)");
assertEquals("abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null), "prependIfMissingIgnoreCase(abc,null,null)");
assertEquals("xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null), "prependIfMissingIgnoreCase(\"\",xyz,null)");
assertEquals("xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", null), "prependIfMissingIgnoreCase(abc,xyz,{null})");
assertEquals("abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", ""), "prependIfMissingIgnoreCase(abc,xyz,\"\")");
assertEquals("xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno"), "prependIfMissingIgnoreCase(abc,xyz,mno)");
assertEquals("xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno"), "prependIfMissingIgnoreCase(xyzabc,xyz,mno)");
assertEquals("mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno"), "prependIfMissingIgnoreCase(mnoabc,xyz,mno)");
assertEquals("XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno"), "prependIfMissingIgnoreCase(XYZabc,xyz,mno)");
assertEquals("MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno"), "prependIfMissingIgnoreCase(MNOabc,xyz,mno)");
assertEquals(SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)),"uncapitalize(capitalize(String)) failed");
assertEquals(SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)),"capitalize(uncapitalize(String)) failed");
assertEquals(FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)),"uncapitalize(capitalize(String)) failed");
assertEquals(FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)),"capitalize(uncapitalize(String)) failed");
assertEquals("", StringUtils.remove("", null));
assertEquals("", StringUtils.remove("", 'a'));
assertEquals("qeed", StringUtils.remove("queued", 'u'));
assertEquals("queued", StringUtils.remove("queued", 'z'));
assertEquals("", StringUtils.remove("", null));
assertEquals("", StringUtils.remove("", ""));
assertEquals("", StringUtils.remove("", "a"));
assertEquals("", StringUtils.remove("", null));
assertEquals("a", StringUtils.remove("a", null));
assertEquals("", StringUtils.remove("", ""));
assertEquals("a", StringUtils.remove("a", ""));
assertEquals("qd", StringUtils.remove("queued", "ue"));
assertEquals("queued", StringUtils.remove("queued", "zz"));
assertEquals("any", StringUtils.removeAll("any", null));
assertEquals("any", StringUtils.removeAll("any", ""));
assertEquals("", StringUtils.removeAll("any", ".*"));
assertEquals("", StringUtils.removeAll("any", ".+"));
assertEquals("", StringUtils.removeAll("any", ".?"));
assertEquals("A\nB", StringUtils.removeAll("A<__>\n<__>B", "<.*>"));
assertEquals("AB", StringUtils.removeAll("A<__>\n<__>B", "(?s)<.*>"));
assertEquals("ABC123", StringUtils.removeAll("ABCabc123abc", "[a-z]"));
assertEquals(StringUtils.removeEnd("", null), "");
assertEquals(StringUtils.removeEnd("", ""), "");
assertEquals(StringUtils.removeEnd("", "a"), "");
assertEquals(StringUtils.removeEnd("www.domain.com.", ".com"), "www.domain.com.");
assertEquals(StringUtils.removeEnd("www.domain.com", ".com"), "www.domain");
assertEquals(StringUtils.removeEnd("www.domain", ".com"), "www.domain");
assertEquals(StringUtils.removeEnd("domain.com", ""), "domain.com");
assertEquals(StringUtils.removeEnd("domain.com", null), "domain.com");
assertEquals(StringUtils.removeEndIgnoreCase("", null), "", "removeEndIgnoreCase(\"\", null)");
assertEquals(StringUtils.removeEndIgnoreCase("", ""), "", "removeEndIgnoreCase(\"\", \"\")");
assertEquals(StringUtils.removeEndIgnoreCase("", "a"), "", "removeEndIgnoreCase(\"\", \"a\")");
assertEquals(StringUtils.removeEndIgnoreCase("www.domain.com.", ".com"), "www.domain.com.", "removeEndIgnoreCase(\"www.domain.com.\", \".com\")");
assertEquals(StringUtils.removeEndIgnoreCase("www.domain.com", ".com"), "www.domain", "removeEndIgnoreCase(\"www.domain.com\", \".com\")");
assertEquals(StringUtils.removeEndIgnoreCase("www.domain", ".com"), "www.domain", "removeEndIgnoreCase(\"www.domain\", \".com\")");
assertEquals(StringUtils.removeEndIgnoreCase("domain.com", ""), "domain.com", "removeEndIgnoreCase(\"domain.com\", \"\")");
assertEquals(StringUtils.removeEndIgnoreCase("domain.com", null), "domain.com", "removeEndIgnoreCase(\"domain.com\", null)");
assertEquals(StringUtils.removeEndIgnoreCase("www.domain.com", ".COM"), "www.domain", "removeEndIgnoreCase(\"www.domain.com\", \".COM\")");
assertEquals(StringUtils.removeEndIgnoreCase("www.domain.COM", ".com"), "www.domain", "removeEndIgnoreCase(\"www.domain.COM\", \".com\")");
assertEquals("any", StringUtils.removeFirst("any", null));
assertEquals("any", StringUtils.removeFirst("any", ""));
assertEquals("", StringUtils.removeFirst("any", ".*"));
assertEquals("", StringUtils.removeFirst("any", ".+"));
assertEquals("bc", StringUtils.removeFirst("abc", ".?"));
assertEquals("A\n<__>B", StringUtils.removeFirst("A<__>\n<__>B", "<.*>"));
assertEquals("AB", StringUtils.removeFirst("A<__>\n<__>B", "(?s)<.*>"));
assertEquals("ABCbc123", StringUtils.removeFirst("ABCabc123", "[a-z]"));
assertEquals("ABC123abc", StringUtils.removeFirst("ABCabc123abc", "[a-z]+"));
assertEquals("", StringUtils.removeIgnoreCase("", null));
assertEquals("", StringUtils.removeIgnoreCase("", ""));
assertEquals("", StringUtils.removeIgnoreCase("", "a"));
assertEquals("", StringUtils.removeIgnoreCase("", null));
assertEquals("a", StringUtils.removeIgnoreCase("a", null));
assertEquals("", StringUtils.removeIgnoreCase("", ""));
assertEquals("a", StringUtils.removeIgnoreCase("a", ""));
assertEquals("qd", StringUtils.removeIgnoreCase("queued", "ue"));
assertEquals("queued", StringUtils.removeIgnoreCase("queued", "zz"));
assertEquals("qd", StringUtils.removeIgnoreCase("quEUed", "UE"));
assertEquals("queued", StringUtils.removeIgnoreCase("queued", "zZ"));
assertEquals("\u0130", StringUtils.removeIgnoreCase("\u0130x", "x"));
assertEquals("any", StringUtils.removePattern("any", null));
assertEquals("", StringUtils.removePattern("", ""));
assertEquals("", StringUtils.removePattern("", ".*"));
assertEquals("", StringUtils.removePattern("", ".+"));
assertEquals("AB", StringUtils.removePattern("A<__>\n<__>B", "<.*>"));
assertEquals("AB", StringUtils.removePattern("A<__>\\n<__>B", "<.*>"));
assertEquals("", StringUtils.removePattern("<A>x\\ny</A>", "<A>.*</A>"));
assertEquals("", StringUtils.removePattern("<A>\nxy\n</A>", "<A>.*</A>"));
assertEquals("ABC123", StringUtils.removePattern("ABCabc123", "[a-z]"));
assertEquals(StringUtils.removeStart("", '\0'), "");
assertEquals(StringUtils.removeStart("", 'a'), "");
assertEquals(StringUtils.removeStart("/path", '/'), "path");
assertEquals(StringUtils.removeStart("path", '/'), "path");
assertEquals(StringUtils.removeStart("path", '\0'), "path");
assertEquals(StringUtils.removeStart("", null), "");
assertEquals(StringUtils.removeStart("", ""), "");
assertEquals(StringUtils.removeStart("", "a"), "");
assertEquals(StringUtils.removeStart("www.domain.com", "www."), "domain.com");
assertEquals(StringUtils.removeStart("domain.com", "www."), "domain.com");
assertEquals(StringUtils.removeStart("domain.com", ""), "domain.com");
assertEquals(StringUtils.removeStart("domain.com", null), "domain.com");
assertEquals(StringUtils.removeStartIgnoreCase("", null), "", "removeStartIgnoreCase(\"\", null)");
assertEquals(StringUtils.removeStartIgnoreCase("", ""), "", "removeStartIgnoreCase(\"\", \"\")");
assertEquals(StringUtils.removeStartIgnoreCase("", "a"), "", "removeStartIgnoreCase(\"\", \"a\")");
assertEquals(StringUtils.removeStartIgnoreCase("www.domain.com", "www."), "domain.com", "removeStartIgnoreCase(\"www.domain.com\", \"www.\")");
assertEquals(StringUtils.removeStartIgnoreCase("domain.com", "www."), "domain.com", "removeStartIgnoreCase(\"domain.com\", \"www.\")");
assertEquals(StringUtils.removeStartIgnoreCase("domain.com", ""), "domain.com", "removeStartIgnoreCase(\"domain.com\", \"\")");
assertEquals(StringUtils.removeStartIgnoreCase("domain.com", null), "domain.com", "removeStartIgnoreCase(\"domain.com\", null)");
assertEquals(StringUtils.removeStartIgnoreCase("www.domain.com", "WWW."), "domain.com", "removeStartIgnoreCase(\"www.domain.com\", \"WWW.\")");
assertEquals("zzz", StringUtils.repeat('z', 3));
assertEquals("", StringUtils.repeat('z', 0));
assertEquals("", StringUtils.repeat('z', -2));
assertEquals("", StringUtils.repeat("ab", 0));
assertEquals("", StringUtils.repeat("", 3));
assertEquals("aaa", StringUtils.repeat("a", 3));
assertEquals("", StringUtils.repeat("a", -2));
assertEquals("ababab", StringUtils.repeat("ab", 3));
assertEquals("abcabcabc", StringUtils.repeat("abc", 3));
assertEquals("", StringUtils.repeat("", null, 2));
assertEquals("", StringUtils.repeat("ab", "", 0));
assertEquals("", StringUtils.repeat("", "", 2));
assertEquals("xx", StringUtils.repeat("", "x", 3));
assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3));
assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}), "");
assertEquals(StringUtils.replaceEach("aba", null, null), "aba");
assertEquals(StringUtils.replaceEach("aba", new String[0], null), "aba");
assertEquals(StringUtils.replaceEach("aba", null, new String[0]), "aba");
assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null), "aba");
assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}), "b");
assertEquals(StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}), "aba");
assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}), "wcte");
assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}), "dcte");
assertEquals("bcc", StringUtils.replaceEach("abc", new String[]{"a", "b"}, new String[]{"b", "c"}));
assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren",new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n","o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D","E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T","U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9"},new String[]{"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a","b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q","R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G","H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4"}));
assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{null}), "aba");
assertEquals(StringUtils.replaceEach("aba", new String[]{"a", "b"}, new String[]{"c", null}), "cbc");
assertEquals("", StringUtils.replaceEachRepeatedly("", new String[]{"a"}, new String[]{"b"}));
assertEquals("aba", StringUtils.replaceEachRepeatedly("aba", null, null));
assertEquals("aba", StringUtils.replaceEachRepeatedly("aba", new String[0], null));
assertEquals("aba", StringUtils.replaceEachRepeatedly("aba", null, new String[0]));
assertEquals("aba", StringUtils.replaceEachRepeatedly("aba", new String[0], null));
assertEquals("b", StringUtils.replaceEachRepeatedly("aba", new String[]{"a"}, new String[]{""}));
assertEquals("aba", StringUtils.replaceEachRepeatedly("aba", new String[]{null}, new String[]{"a"}));
assertEquals("wcte", StringUtils.replaceEachRepeatedly("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}));
assertEquals("tcte", StringUtils.replaceEachRepeatedly("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}));
assertEquals("blaan", StringUtils.replaceEachRepeatedly("blllaan", new String[]{"llaan"}, new String[]{"laan"}) );
assertEquals("", StringUtils.replace("", null, null));
assertEquals("", StringUtils.replace("", null, "any"));
assertEquals("", StringUtils.replace("", "any", null));
assertEquals("", StringUtils.replace("", "any", "any"));
assertEquals("FOO", StringUtils.replace("FOO", "", "any"));
assertEquals("FOO", StringUtils.replace("FOO", null, "any"));
assertEquals("FOO", StringUtils.replace("FOO", "F", null));
assertEquals("FOO", StringUtils.replace("FOO", null, null));
assertEquals("", StringUtils.replace("foofoofoo", "foo", ""));
assertEquals("barbarbar", StringUtils.replace("foofoofoo", "foo", "bar"));
assertEquals("farfarfar", StringUtils.replace("foofoofoo", "oo", "ar"));
assertEquals("", StringUtils.replace("", null, null, 2));
assertEquals("", StringUtils.replace("", null, "any", 2));
assertEquals("", StringUtils.replace("", "any", null, 2));
assertEquals("", StringUtils.replace("", "any", "any", 2));
assertSame(str, StringUtils.replace(str, "x", "", -1));
assertEquals("f", StringUtils.replace("oofoo", "o", "", -1));
assertEquals("oofoo", StringUtils.replace("oofoo", "o", "", 0));
assertEquals("ofoo", StringUtils.replace("oofoo", "o", "", 1));
assertEquals("foo", StringUtils.replace("oofoo", "o", "", 2));
assertEquals("fo", StringUtils.replace("oofoo", "o", "", 3));
assertEquals("f", StringUtils.replace("oofoo", "o", "", 4));
assertEquals("f", StringUtils.replace("oofoo", "o", "", -5));
assertEquals("f", StringUtils.replace("oofoo", "o", "", 1000));
assertEquals("any", StringUtils.replaceAll("any", null, ""));
assertEquals("any", StringUtils.replaceAll("any", "", null));
assertEquals("zzz", StringUtils.replaceAll("", "", "zzz"));
assertEquals("zzz", StringUtils.replaceAll("", ".*", "zzz"));
assertEquals("", StringUtils.replaceAll("", ".+", "zzz"));
assertEquals("ZZaZZbZZcZZ", StringUtils.replaceAll("abc", "", "ZZ"));
assertEquals("z\nz", StringUtils.replaceAll("<__>\n<__>", "<.*>", "z"));
assertEquals("z", StringUtils.replaceAll("<__>\n<__>", "(?s)<.*>", "z"));
assertEquals("ABC___123", StringUtils.replaceAll("ABCabc123", "[a-z]", "_"));
assertEquals("ABC_123", StringUtils.replaceAll("ABCabc123", "[^A-Z0-9]+", "_"));
assertEquals("ABC123", StringUtils.replaceAll("ABCabc123", "[^A-Z0-9]+", ""));
assertEquals("Lorem_ipsum_dolor_sit",StringUtils.replaceAll("Lorem ipsum  dolor   sit", "( +)([a-z]+)", "_$2"));
assertEquals("", StringUtils.replaceChars("", 'b', 'z'));
assertEquals("azcza", StringUtils.replaceChars("abcba", 'b', 'z'));
assertEquals("abcba", StringUtils.replaceChars("abcba", 'x', 'z'));
assertEquals("", StringUtils.replaceChars("", null, null));
assertEquals("", StringUtils.replaceChars("", "", null));
assertEquals("", StringUtils.replaceChars("", "a", null));
assertEquals("", StringUtils.replaceChars("", null, ""));
assertEquals("", StringUtils.replaceChars("", null, "x"));
assertEquals("abc", StringUtils.replaceChars("abc", null, null));
assertEquals("abc", StringUtils.replaceChars("abc", null, ""));
assertEquals("abc", StringUtils.replaceChars("abc", null, "x"));
assertEquals("abc", StringUtils.replaceChars("abc", "", null));
assertEquals("abc", StringUtils.replaceChars("abc", "", ""));
assertEquals("abc", StringUtils.replaceChars("abc", "", "x"));
assertEquals("ac", StringUtils.replaceChars("abc", "b", null));
assertEquals("ac", StringUtils.replaceChars("abc", "b", ""));
assertEquals("axc", StringUtils.replaceChars("abc", "b", "x"));
assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz"));
assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y"));
assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx"));
assertEquals("abcba", StringUtils.replaceChars("abcba", "z", "w"));
assertSame("abcba", StringUtils.replaceChars("abcba", "z", "w"));
assertEquals("jelly", StringUtils.replaceChars("hello", "ho", "jy"));
assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz"));
assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y"));
assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx"));
assertEquals("bcc", StringUtils.replaceChars("abc", "ab", "bc"));
assertEquals("q651.506bera", StringUtils.replaceChars("d216.102oren","abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789","nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234"));
assertEquals("any", StringUtils.replaceFirst("any", null, ""));
assertEquals("any", StringUtils.replaceFirst("any", "", null));
assertEquals("zzz", StringUtils.replaceFirst("", "", "zzz"));
assertEquals("zzz", StringUtils.replaceFirst("", ".*", "zzz"));
assertEquals("", StringUtils.replaceFirst("", ".+", "zzz"));
assertEquals("ZZabc", StringUtils.replaceFirst("abc", "", "ZZ"));
assertEquals("z\n<__>", StringUtils.replaceFirst("<__>\n<__>", "<.*>", "z"));
assertEquals("z", StringUtils.replaceFirst("<__>\n<__>", "(?s)<.*>", "z"));
assertEquals("ABC_bc123", StringUtils.replaceFirst("ABCabc123", "[a-z]", "_"));
assertEquals("ABC_123abc", StringUtils.replaceFirst("ABCabc123abc", "[^A-Z0-9]+", "_"));
assertEquals("ABC123abc", StringUtils.replaceFirst("ABCabc123abc", "[^A-Z0-9]+", ""));
assertEquals("Lorem_ipsum  dolor   sit",StringUtils.replaceFirst("Lorem ipsum  dolor   sit", "( +)([a-z]+)", "_$2"));
assertEquals("", StringUtils.replaceIgnoreCase("", null, null));
assertEquals("", StringUtils.replaceIgnoreCase("", null, "any"));
assertEquals("", StringUtils.replaceIgnoreCase("", "any", null));
assertEquals("", StringUtils.replaceIgnoreCase("", "any", "any"));
assertEquals("FOO", StringUtils.replaceIgnoreCase("FOO", "", "any"));
assertEquals("FOO", StringUtils.replaceIgnoreCase("FOO", null, "any"));
assertEquals("FOO", StringUtils.replaceIgnoreCase("FOO", "F", null));
assertEquals("FOO", StringUtils.replaceIgnoreCase("FOO", null, null));
assertEquals("", StringUtils.replaceIgnoreCase("foofoofoo", "foo", ""));
assertEquals("barbarbar", StringUtils.replaceIgnoreCase("foofoofoo", "foo", "bar"));
assertEquals("farfarfar", StringUtils.replaceIgnoreCase("foofoofoo", "oo", "ar"));
assertEquals("", StringUtils.replaceIgnoreCase("foofoofoo", "FOO", ""));
assertEquals("barbarbar", StringUtils.replaceIgnoreCase("fooFOOfoo", "foo", "bar"));
assertEquals("farfarfar", StringUtils.replaceIgnoreCase("foofOOfoo", "OO", "ar"));
assertEquals("", StringUtils.replaceIgnoreCase("", null, null, 2));
assertEquals("", StringUtils.replaceIgnoreCase("", null, "any", 2));
assertEquals("", StringUtils.replaceIgnoreCase("", "any", null, 2));
assertEquals("", StringUtils.replaceIgnoreCase("", "any", "any", 2));
assertSame(str, StringUtils.replaceIgnoreCase(str, "x", "", -1));
assertEquals("f", StringUtils.replaceIgnoreCase("oofoo", "o", "", -1));
assertEquals("oofoo", StringUtils.replaceIgnoreCase("oofoo", "o", "", 0));
assertEquals("ofoo", StringUtils.replaceIgnoreCase("oofoo", "o", "", 1));
assertEquals("foo", StringUtils.replaceIgnoreCase("oofoo", "o", "", 2));
assertEquals("fo", StringUtils.replaceIgnoreCase("oofoo", "o", "", 3));
assertEquals("f", StringUtils.replaceIgnoreCase("oofoo", "o", "", 4));
assertEquals("f", StringUtils.replaceIgnoreCase("oofoo", "o", "", -5));
assertEquals("f", StringUtils.replaceIgnoreCase("oofoo", "o", "", 1000));
assertEquals("f", StringUtils.replaceIgnoreCase("oofoo", "O", "", -1));
assertEquals("oofoo", StringUtils.replaceIgnoreCase("oofoo", "O", "", 0));
assertEquals("ofoo", StringUtils.replaceIgnoreCase("oofoo", "O", "", 1));
assertEquals("foo", StringUtils.replaceIgnoreCase("oofoo", "O", "", 2));
assertEquals("fo", StringUtils.replaceIgnoreCase("oofoo", "O", "", 3));
assertEquals("f", StringUtils.replaceIgnoreCase("oofoo", "O", "", 4));
assertEquals("f", StringUtils.replaceIgnoreCase("oofoo", "O", "", -5));
assertEquals("f", StringUtils.replaceIgnoreCase("oofoo", "O", "", 1000));
assertEquals("", StringUtils.replaceOnce("", null, null));
assertEquals("", StringUtils.replaceOnce("", null, "any"));
assertEquals("", StringUtils.replaceOnce("", "any", null));
assertEquals("", StringUtils.replaceOnce("", "any", "any"));
assertEquals("FOO", StringUtils.replaceOnce("FOO", "", "any"));
assertEquals("FOO", StringUtils.replaceOnce("FOO", null, "any"));
assertEquals("FOO", StringUtils.replaceOnce("FOO", "F", null));
assertEquals("FOO", StringUtils.replaceOnce("FOO", null, null));
assertEquals("foofoo", StringUtils.replaceOnce("foofoofoo", "foo", ""));
assertEquals("", StringUtils.replaceOnceIgnoreCase("", null, null));
assertEquals("", StringUtils.replaceOnceIgnoreCase("", null, "any"));
assertEquals("", StringUtils.replaceOnceIgnoreCase("", "any", null));
assertEquals("", StringUtils.replaceOnceIgnoreCase("", "any", "any"));
assertEquals("FOO", StringUtils.replaceOnceIgnoreCase("FOO", "", "any"));
assertEquals("FOO", StringUtils.replaceOnceIgnoreCase("FOO", null, "any"));
assertEquals("FOO", StringUtils.replaceOnceIgnoreCase("FOO", "F", null));
assertEquals("FOO", StringUtils.replaceOnceIgnoreCase("FOO", null, null));
assertEquals("foofoo", StringUtils.replaceOnceIgnoreCase("foofoofoo", "foo", ""));
assertEquals("Foofoo", StringUtils.replaceOnceIgnoreCase("FoOFoofoo", "foo", ""));
assertEquals("any", StringUtils.replacePattern("any", null, ""));
assertEquals("any", StringUtils.replacePattern("any", "", null));
assertEquals("zzz", StringUtils.replacePattern("", "", "zzz"));
assertEquals("zzz", StringUtils.replacePattern("", ".*", "zzz"));
assertEquals("", StringUtils.replacePattern("", ".+", "zzz"));
assertEquals("z", StringUtils.replacePattern("<__>\n<__>", "<.*>", "z"));
assertEquals("z", StringUtils.replacePattern("<__>\\n<__>", "<.*>", "z"));
assertEquals("X", StringUtils.replacePattern("<A>\nxy\n</A>", "<A>.*</A>", "X"));
assertEquals("ABC___123", StringUtils.replacePattern("ABCabc123", "[a-z]", "_"));
assertEquals("ABC_123", StringUtils.replacePattern("ABCabc123", "[^A-Z0-9]+", "_"));
assertEquals("ABC123", StringUtils.replacePattern("ABCabc123", "[^A-Z0-9]+", ""));
assertEquals("Lorem_ipsum_dolor_sit",StringUtils.replacePattern("Lorem ipsum  dolor   sit", "( +)([a-z]+)", "_$2"));
assertEquals("", StringUtils.reverse(""));
assertEquals("sdrawkcab", StringUtils.reverse("backwards"));
assertEquals("", StringUtils.reverseDelimited("", '.'));
assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.'));
assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.'));
assertEquals("", StringUtils.reverseDelimited("", '.'));
assertEquals("     ", StringUtils.rightPad("", 5));
assertEquals("abc  ", StringUtils.rightPad("abc", 5));
assertEquals("abc", StringUtils.rightPad("abc", 2));
assertEquals("abc", StringUtils.rightPad("abc", -1));
assertEquals("     ", StringUtils.rightPad("", 5, ' '));
assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' '));
assertEquals("abc", StringUtils.rightPad("abc", 2, ' '));
assertEquals("abc", StringUtils.rightPad("abc", -1, ' '));
assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x'));
assertEquals("     ", StringUtils.rightPad("", 5, " "));
assertEquals("abc-+-+", StringUtils.rightPad("abc", 7, "-+"));
assertEquals("abc-+~", StringUtils.rightPad("abc", 6, "-+~"));
assertEquals("abc-+", StringUtils.rightPad("abc", 5, "-+~"));
assertEquals("abc", StringUtils.rightPad("abc", 2, " "));
assertEquals("abc", StringUtils.rightPad("abc", -1, " "));
assertEquals("abc  ", StringUtils.rightPad("abc", 5, null));
assertEquals("abc  ", StringUtils.rightPad("abc", 5, ""));
assertEquals("", StringUtils.rotate("", 1));
assertEquals("abcdefg", StringUtils.rotate("abcdefg", 0));
assertEquals("fgabcde", StringUtils.rotate("abcdefg", 2));
assertEquals("cdefgab", StringUtils.rotate("abcdefg", -2));
assertEquals("abcdefg", StringUtils.rotate("abcdefg", 7));
assertEquals("abcdefg", StringUtils.rotate("abcdefg", -7));
assertEquals("fgabcde", StringUtils.rotate("abcdefg", 9));
assertEquals("cdefgab", StringUtils.rotate("abcdefg", -9));
assertEquals("efgabcd", StringUtils.rotate("abcdefg", 17));
assertEquals("defgabc", StringUtils.rotate("abcdefg", -17));
assertEquals(0, StringUtils.split("").length);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals(".c", res[2]);
assertEquals("a", res[0]);
assertEquals("a", res[0]);
assertEquals("b" + NON_WHITESPACE + "c", res[1]);
assertEquals(0, StringUtils.split("", '.').length);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals(" c", res[2]);
assertEquals("a", res[0]);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals("c", res[2]);
assertEquals(0, StringUtils.split("", ".").length);
assertEquals(0, StringUtils.split("", ".", 3).length);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults2.length, results.length);
assertEquals(expectedResults2[i], results[i]);
assertEquals(0, StringUtils.splitByCharacterType("").length);
assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length);
assertArrayEquals(null, StringUtils.splitByWholeSeparatorPreserveAllTokens(null, "."));
assertEquals(0, StringUtils.splitByWholeSeparatorPreserveAllTokens("", ".").length);
assertEquals(expected.length, actual.length);
assertEquals(expected[i], actual[i]);
assertEquals(expected.length, actual.length);
assertEquals(expected[i], actual[i]);
assertEquals(expected.length, actual.length);
assertEquals(expected[i], actual[i]);
assertArrayEquals(null, StringUtils.splitByWholeSeparatorPreserveAllTokens(null, ".", -1));
assertEquals(0, StringUtils.splitByWholeSeparatorPreserveAllTokens("", ".", -1).length);
assertEquals(expected.length, actual.length);
assertEquals(expected[i], actual[i]);
assertEquals(expected.length, actual.length);
assertEquals(expected[i], actual[i]);
assertEquals(expected.length, actual.length);
assertEquals(expected[i], actual[i]);
assertEquals(expected.length, actual.length);
assertEquals(expected[i], actual[i]);
assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, "."));
assertEquals(0, StringUtils.splitByWholeSeparator("", ".").length);
assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length);
assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]);
assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length);
assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]);
assertEquals(splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length);
assertEquals(splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i]);
assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".", 3));
assertEquals(0, StringUtils.splitByWholeSeparator("", ".", 3).length);
assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length);
assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]);
assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length);
assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]);
assertEquals(0, StringUtils.splitPreserveAllTokens("").length);
assertEquals("abc", res[0]);
assertEquals("def", res[1]);
assertEquals("abc", res[0]);
assertEquals("", res[1]);
assertEquals("def", res[2]);
assertEquals("", res[0]);
assertEquals("abc", res[1]);
assertEquals("", res[2]);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals(".c", res[2]);
assertEquals("", res[0]);
assertEquals("a", res[1]);
assertEquals("b", res[2]);
assertEquals(".c", res[3]);
assertEquals("a", res[0]);
assertEquals("", res[1]);
assertEquals("b", res[2]);
assertEquals("", res[3]);
assertEquals(".c", res[4]);
assertEquals("", res[0]);
assertEquals("a", res[1]);
assertEquals("", res[2]);
assertEquals("", res[3]);
assertEquals("", res[0]);
assertEquals("a", res[1]);
assertEquals("", res[2]);
assertEquals("b", res[3]);
assertEquals(WHITESPACE.length() + 1, res.length);
assertEquals("a", res[0]);
assertEquals("b" + NON_WHITESPACE + "c", res[WHITESPACE.length()]);
assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals(" c", res[2]);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals("", res[2]);
assertEquals(" c", res[3]);
assertEquals("", res[0]);
assertEquals("a", res[1]);
assertEquals("", res[2]);
assertEquals("", res[0]);
assertEquals("a", res[1]);
assertEquals("", res[2]);
assertEquals("", res[3]);
assertEquals("", res[0]);
assertEquals("", res[1]);
assertEquals("a", res[2]);
assertEquals("", res[3]);
assertEquals("", res[0]);
assertEquals("", res[1]);
assertEquals("a", res[2]);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals("c", res[2]);
assertEquals("a", res[0]);
assertEquals("", res[1]);
assertEquals("b", res[2]);
assertEquals("", res[3]);
assertEquals("c", res[4]);
assertEquals("", res[0]);
assertEquals("a", res[1]);
assertEquals("b", res[2]);
assertEquals("c", res[3]);
assertEquals("", res[0]);
assertEquals("", res[1]);
assertEquals("a", res[2]);
assertEquals("b", res[3]);
assertEquals("c", res[4]);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals("c", res[2]);
assertEquals("", res[3]);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals("c", res[2]);
assertEquals("", res[3]);
assertEquals("", res[4]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length);
assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals("", StringUtils.swapCase(""));
assertEquals("  ", StringUtils.swapCase("  "));
assertEquals("i", WordUtils.swapCase("I"));
assertEquals("I", WordUtils.swapCase("i"));
assertEquals("I AM HERE 123", StringUtils.swapCase("i am here 123"));
assertEquals("i aM hERE 123", StringUtils.swapCase("I Am Here 123"));
assertEquals("I AM here 123", StringUtils.swapCase("i am HERE 123"));
assertEquals("i am here 123", StringUtils.swapCase("I AM HERE 123"));
assertEquals(expect, WordUtils.swapCase(test));
assertEquals(expect, StringUtils.swapCase(test));
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, StringUtils.toCodePoints(""));
assertArrayEquals(expectedBytes, expectedString.getBytes());
assertEquals(expectedString, StringUtils.toEncodedString(expectedBytes, Charset.defaultCharset()));
assertEquals(expectedString, StringUtils.toEncodedString(expectedBytes, Charset.forName(encoding)));
assertEquals(expectedString, StringUtils.toEncodedString(expectedBytes, Charset.forName(encoding)));
assertArrayEquals(expectedBytes, expectedString.getBytes());
assertEquals(expectedString, StringUtils.toString(expectedBytes, null));
assertEquals(expectedString, StringUtils.toString(expectedBytes, SystemUtils.FILE_ENCODING));
assertEquals(expectedString, StringUtils.toString(expectedBytes, encoding));
assertEquals("", StringUtils.truncate("", 10));
assertEquals("abc", StringUtils.truncate("abcdefghij", 3));
assertEquals("abcdef", StringUtils.truncate("abcdefghij", 6));
assertEquals("", StringUtils.truncate("abcdefghij", 0));
assertEquals("abcdefghij", StringUtils.truncate("abcdefghijklmno", 10));
assertEquals("abcdefghijklmno", StringUtils.truncate("abcdefghijklmno", Integer.MAX_VALUE));
assertEquals("abcde", StringUtils.truncate("abcdefghijklmno", 5));
assertEquals("abc", StringUtils.truncate("abcdefghijklmno", 3));
assertEquals("", StringUtils.truncate("", 0, 10));
assertEquals("", StringUtils.truncate("", 2, 10));
assertEquals("abc", StringUtils.truncate("abcdefghij", 0, 3));
assertEquals("fghij", StringUtils.truncate("abcdefghij", 5, 6));
assertEquals("", StringUtils.truncate("abcdefghij", 0, 0));
assertEquals("peach", StringUtils.truncate(raspberry, 10, 15));
assertEquals("abcdefghij", StringUtils.truncate("abcdefghijklmno", 0, 10));
assertEquals("abcdefghijklmno", StringUtils.truncate("abcdefghijklmno", 0, Integer.MAX_VALUE));
assertEquals("bcdefghijk", StringUtils.truncate("abcdefghijklmno", 1, 10));
assertEquals("cdefghijkl", StringUtils.truncate("abcdefghijklmno", 2, 10));
assertEquals("defghijklm", StringUtils.truncate("abcdefghijklmno", 3, 10));
assertEquals("efghijklmn", StringUtils.truncate("abcdefghijklmno", 4, 10));
assertEquals("fghijklmno", StringUtils.truncate("abcdefghijklmno", 5, 10));
assertEquals("fghij", StringUtils.truncate("abcdefghijklmno", 5, 5));
assertEquals("fgh", StringUtils.truncate("abcdefghijklmno", 5, 3));
assertEquals("klm", StringUtils.truncate("abcdefghijklmno", 10, 3));
assertEquals("klmno", StringUtils.truncate("abcdefghijklmno", 10, Integer.MAX_VALUE));
assertEquals("n", StringUtils.truncate("abcdefghijklmno", 13, 1));
assertEquals("no", StringUtils.truncate("abcdefghijklmno", 13, Integer.MAX_VALUE));
assertEquals("o", StringUtils.truncate("abcdefghijklmno", 14, 1));
assertEquals("o", StringUtils.truncate("abcdefghijklmno", 14, Integer.MAX_VALUE));
assertEquals("", StringUtils.truncate("abcdefghijklmno", 15, 1));
assertEquals("", StringUtils.truncate("abcdefghijklmno", 15, Integer.MAX_VALUE));
assertEquals("", StringUtils.truncate("abcdefghijklmno", Integer.MAX_VALUE, Integer.MAX_VALUE));
assertEquals(FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP), "uncapitalize(String) failed");
assertEquals(FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP), "uncapitalize(string) failed");
assertEquals("", StringUtils.uncapitalize(""), "uncapitalize(empty-string) failed");
assertEquals("x", StringUtils.uncapitalize("X"), "uncapitalize(single-char-string) failed");
assertEquals("cat", StringUtils.uncapitalize("cat"));
assertEquals("cat", StringUtils.uncapitalize("Cat"));
assertEquals("cAT", StringUtils.uncapitalize("CAT"));
assertEquals("\uD83D\uDE30", StringEscapeUtils.unescapeCsv("\uD83D\uDE30"));
assertEquals("\uD800\uDC00", StringEscapeUtils.unescapeCsv("\uD800\uDC00"));
assertEquals("\uD834\uDD1E", StringEscapeUtils.unescapeCsv("\uD834\uDD1E"));
assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeCsv("\uDBFF\uDFFD"));
assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeHtml3("\uDBFF\uDFFD"));
assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeHtml4("\uDBFF\uDFFD"));
assertEquals("abc", StringUtils.unwrap("abc", null));
assertEquals("a", StringUtils.unwrap("a", "a"));
assertEquals("", StringUtils.unwrap("aa", "a"));
assertEquals("abc", StringUtils.unwrap("\'abc\'", '\''));
assertEquals("abc", StringUtils.unwrap("AabcA", 'A'));
assertEquals("AabcA", StringUtils.unwrap("AAabcAA", 'A'));
assertEquals("abc", StringUtils.unwrap("abc", 'b'));
assertEquals("#A", StringUtils.unwrap("#A", '#'));
assertEquals("A#", StringUtils.unwrap("A#", '#'));
assertEquals("ABA", StringUtils.unwrap("AABAA", 'A'));
assertEquals("abc", StringUtils.unwrap("abc", null));
assertEquals("abc", StringUtils.unwrap("abc", ""));
assertEquals("a", StringUtils.unwrap("a", "a"));
assertEquals("ababa", StringUtils.unwrap("ababa", "aba"));
assertEquals("", StringUtils.unwrap("aa", "a"));
assertEquals("abc", StringUtils.unwrap("\'abc\'", "\'"));
assertEquals("abc", StringUtils.unwrap("\"abc\"", "\""));
assertEquals("abc\"xyz", StringUtils.unwrap("\"abc\"xyz\"", "\""));
assertEquals("abc\"xyz\"", StringUtils.unwrap("\"abc\"xyz\"\"", "\""));
assertEquals("abc\'xyz\'", StringUtils.unwrap("\"abc\'xyz\'\"", "\""));
assertEquals("\"abc\'xyz\'\"", StringUtils.unwrap("AA\"abc\'xyz\'\"AA", "AA"));
assertEquals("\"abc\'xyz\'\"", StringUtils.unwrap("123\"abc\'xyz\'\"123", "123"));
assertEquals("AA\"abc\'xyz\'\"", StringUtils.unwrap("AA\"abc\'xyz\'\"", "AA"));
assertEquals("AA\"abc\'xyz\'\"AA", StringUtils.unwrap("AAA\"abc\'xyz\'\"AAA", "A"));
assertEquals("\"abc\'xyz\'\"AA", StringUtils.unwrap("\"abc\'xyz\'\"AA", "AA"));
assertEquals("FOO TEST THING", StringUtils.upperCase("fOo test THING"), "upperCase(String) failed");
assertEquals("", StringUtils.upperCase(""), "upperCase(empty-string) failed");
assertEquals("FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH),"upperCase(String, Locale) failed");
assertEquals("", StringUtils.upperCase("", Locale.ENGLISH),"upperCase(empty-string, Locale) failed");
assertEquals("", StringUtils.wrap("", CharUtils.NUL));
assertEquals("xabx", StringUtils.wrap("ab", 'x'));
assertEquals("\"ab\"", StringUtils.wrap("ab", '\"'));
assertEquals("\"\"ab\"\"", StringUtils.wrap("\"ab\"", '\"'));
assertEquals("'ab'", StringUtils.wrap("ab", '\''));
assertEquals("''abcd''", StringUtils.wrap("'abcd'", '\''));
assertEquals("'\"abcd\"'", StringUtils.wrap("\"abcd\"", '\''));
assertEquals("\"'abcd'\"", StringUtils.wrap("'abcd'", '\"'));
assertEquals("", StringUtils.wrap("", ""));
assertEquals("ab", StringUtils.wrap("ab", null));
assertEquals("xabx", StringUtils.wrap("ab", "x"));
assertEquals("\"ab\"", StringUtils.wrap("ab", "\""));
assertEquals("\"\"ab\"\"", StringUtils.wrap("\"ab\"", "\""));
assertEquals("'ab'", StringUtils.wrap("ab", "'"));
assertEquals("''abcd''", StringUtils.wrap("'abcd'", "'"));
assertEquals("'\"abcd\"'", StringUtils.wrap("\"abcd\"", "'"));
assertEquals("\"'abcd'\"", StringUtils.wrap("'abcd'", "\""));
assertEquals("", StringUtils.wrapIfMissing("", CharUtils.NUL));
assertEquals("xabx", StringUtils.wrapIfMissing("ab", 'x'));
assertEquals("\"ab\"", StringUtils.wrapIfMissing("ab", '\"'));
assertEquals("\"ab\"", StringUtils.wrapIfMissing("\"ab\"", '\"'));
assertEquals("'ab'", StringUtils.wrapIfMissing("ab", '\''));
assertEquals("'abcd'", StringUtils.wrapIfMissing("'abcd'", '\''));
assertEquals("'\"abcd\"'", StringUtils.wrapIfMissing("\"abcd\"", '\''));
assertEquals("\"'abcd'\"", StringUtils.wrapIfMissing("'abcd'", '\"'));
assertEquals("/x/", StringUtils.wrapIfMissing("x", '/'));
assertEquals("/x/y/z/", StringUtils.wrapIfMissing("x/y/z", '/'));
assertEquals("/x/y/z/", StringUtils.wrapIfMissing("/x/y/z", '/'));
assertEquals("/x/y/z/", StringUtils.wrapIfMissing("x/y/z/", '/'));
assertSame("/", StringUtils.wrapIfMissing("/", '/'));
assertSame("/x/", StringUtils.wrapIfMissing("/x/", '/'));
assertEquals("", StringUtils.wrapIfMissing("", "\0"));
assertEquals("xabx", StringUtils.wrapIfMissing("ab", "x"));
assertEquals("\"ab\"", StringUtils.wrapIfMissing("ab", "\""));
assertEquals("\"ab\"", StringUtils.wrapIfMissing("\"ab\"", "\""));
assertEquals("'ab'", StringUtils.wrapIfMissing("ab", "\'"));
assertEquals("'abcd'", StringUtils.wrapIfMissing("'abcd'", "\'"));
assertEquals("'\"abcd\"'", StringUtils.wrapIfMissing("\"abcd\"", "\'"));
assertEquals("\"'abcd'\"", StringUtils.wrapIfMissing("'abcd'", "\""));
assertEquals("/x/", StringUtils.wrapIfMissing("x", "/"));
assertEquals("/x/y/z/", StringUtils.wrapIfMissing("x/y/z", "/"));
assertEquals("/x/y/z/", StringUtils.wrapIfMissing("/x/y/z", "/"));
assertEquals("/x/y/z/", StringUtils.wrapIfMissing("x/y/z/", "/"));
assertEquals("/", StringUtils.wrapIfMissing("/", "/"));
assertEquals("ab/ab", StringUtils.wrapIfMissing("/", "ab"));
assertSame("ab/ab", StringUtils.wrapIfMissing("ab/ab", "ab"));
assertSame("//x//", StringUtils.wrapIfMissing("//x//", "//"));
assertEquals("a", StringUtils.toRootLowerCase("A"));
assertEquals("a", StringUtils.toRootLowerCase("a"));
assertNotEquals("title", "TITLE".toLowerCase(TURKISH));
assertEquals("title", "TITLE".toLowerCase(Locale.ROOT));
assertEquals("title", StringUtils.toRootLowerCase("TITLE"));
assertEquals("title", StringUtils.toRootLowerCase("TITLE"));
assertEquals("A", StringUtils.toRootUpperCase("a"));
assertEquals("A", StringUtils.toRootUpperCase("A"));
assertNotEquals("TITLE", "title".toUpperCase(TURKISH));
assertEquals("TITLE", "title".toUpperCase(Locale.ROOT));
assertEquals("TITLE", StringUtils.toRootUpperCase("title"));
assertEquals("TITLE", StringUtils.toRootUpperCase("title"));
assertEquals(res1, res2, "si : " + si + " sj : " + sj);
assertEquals(res1, res2, "si : " + si + " sj : " + sj);
assertEquals(res1, res2, "si : " + si + " sj : " + sj);
assertEquals(res1, res2, "si : " + si + " sj : " + sj);
assertEquals(res1, res2, "si : " + si + " sj : " + sj);
assertEquals("The validated expression is false", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG 6", ex.getMessage());
assertEquals("MSG 7.4", ex.getMessage());
assertEquals("MSG Object 1 Object 2", ex.getMessage());
assertSame("Hi", Validate.notNull("Hi"));
assertEquals("The validated object is null", ex.getMessage());
assertSame("Hi", Validate.notNull("Hi", "MSG"));
assertEquals("MSG", ex.getMessage());
assertSame(expected, Validate.notEmpty(expected));
assertEquals("The validated array is empty", ex.getMessage());
assertEquals("The validated array is empty", ex.getMessage());
assertSame(expected, Validate.notEmpty(expected, "MSG"));
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertSame(singleton, Validate.notEmpty(singleton));
assertEquals("The validated collection is empty", ex.getMessage());
assertEquals("The validated collection is empty", ex.getMessage());
assertSame(singleton, Validate.notEmpty(singleton, "MSG"));
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertSame(singletonMap, Validate.notEmpty(singletonMap));
assertEquals("The validated map is empty", ex.getMessage());
assertEquals("The validated map is empty", ex.getMessage());
assertSame(singletonMap, Validate.notEmpty(singletonMap, "MSG"));
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertSame("Hi", Validate.notEmpty("Hi"));
assertEquals("The validated character sequence is empty", ex.getMessage());
assertEquals("The validated character sequence is empty", ex.getMessage());
assertSame("Hi", Validate.notEmpty("Hi", "MSG"));
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertSame("abc", Validate.notBlank("abc"));
assertEquals("The validated character sequence is blank", ex.getMessage());
assertEquals("The validated character sequence is blank", ex.getMessage());
assertEquals("The validated character sequence is blank", ex.getMessage());
assertEquals("The validated character sequence is blank", ex.getMessage());
assertSame("abc", Validate.notBlank("abc", "MSG"));
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertSame(expected, Validate.noNullElements(expected));
assertEquals("array", ex.getMessage());
assertEquals("The validated array contains null element at index: 1", ex.getMessage());
assertSame(array, Validate.noNullElements(array, "MSG"));
assertEquals("array", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertSame(col, Validate.noNullElements(col));
assertEquals("iterable", ex.getMessage());
assertEquals("The validated collection contains null element at index: 0", ex.getMessage());
assertSame(col, Validate.noNullElements(col, "MSG"));
assertEquals("iterable", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertSame(array, Validate.validIndex(array, 0));
assertEquals("array", ex.getMessage());
assertEquals("The validated array index is invalid: -1", ex.getMessage());
assertEquals("The validated array index is invalid: 1", ex.getMessage());
assertSame(array, Validate.validIndex(array, 0, "MSG"));
assertEquals("array", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertSame(col, Validate.validIndex(col, 0));
assertEquals("collection", ex.getMessage());
assertEquals("The validated collection index is invalid: -1", ex.getMessage());
assertEquals("The validated collection index is invalid: 1", ex.getMessage());
assertSame(col, Validate.validIndex(col, 0, "MSG"));
assertEquals("collection", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertSame(str, Validate.validIndex(str, 0));
assertEquals("chars", ex.getMessage());
assertEquals("The validated character sequence index is invalid: -1", ex.getMessage());
assertEquals("The validated character sequence index is invalid: 1", ex.getMessage());
assertSame(str, Validate.validIndex(str, 0, "MSG"));
assertEquals("chars", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("The string hi does not match the pattern [0-9]*", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("The validated value is not a number", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("The value is invalid: Infinity", ex.getMessage());
assertEquals("The value is invalid: -Infinity", ex.getMessage());
assertEquals("The value is invalid: NaN", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("The value 0 is not in the specified inclusive range of 1 to 3", ex.getMessage());
assertEquals("The value 4 is not in the specified inclusive range of 1 to 3", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("The value 0 is not in the specified inclusive range of 1 to 3", ex.getMessage());
assertEquals("The value 4 is not in the specified inclusive range of 1 to 3", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("The value 0.01 is not in the specified inclusive range of 0.1 to 3.1", ex.getMessage());
assertEquals("The value 4.1 is not in the specified inclusive range of 0.1 to 3.1", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("The value 1 is not in the specified exclusive range of 1 to 3", ex.getMessage());
assertEquals("The value 3 is not in the specified exclusive range of 1 to 3", ex.getMessage());
assertEquals("The value 0 is not in the specified exclusive range of 1 to 3", ex.getMessage());
assertEquals("The value 4 is not in the specified exclusive range of 1 to 3", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("The value 1 is not in the specified exclusive range of 1 to 3", ex.getMessage());
assertEquals("The value 3 is not in the specified exclusive range of 1 to 3", ex.getMessage());
assertEquals("The value 0 is not in the specified exclusive range of 1 to 3", ex.getMessage());
assertEquals("The value 4 is not in the specified exclusive range of 1 to 3", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("The value 0.1 is not in the specified exclusive range of 0.1 to 3.1", ex.getMessage());
assertEquals("The value 3.1 is not in the specified exclusive range of 0.1 to 3.1", ex.getMessage());
assertEquals("The value 0.01 is not in the specified exclusive range of 0.1 to 3.1", ex.getMessage());
assertEquals("The value 4.1 is not in the specified exclusive range of 0.1 to 3.1", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("Expected type: java.util.List, actual: java.lang.String", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals("Error Name=Value", ex.getMessage());
assertEquals("Cannot assign a java.lang.String to a java.util.List", ex.getMessage());
assertEquals("Cannot assign a java.lang.String to a null type", ex.getMessage());
assertEquals("Cannot assign a null type to a java.util.List", ex.getMessage());
assertEquals("Cannot assign a null type to a null type", ex.getMessage());
assertEquals("MSG", ex.getMessage());
assertEquals(2, array.length);
assertEquals("foo", array[0]);
assertEquals("bar", array[1]);
assertEquals(2, array.length);
assertEquals(Integer.valueOf(42), array[0]);
assertEquals(Double.valueOf(Math.PI), array[1]);
assertArrayEquals(new boolean[]{true}, ArrayUtils.toPrimitive(new Boolean[]{true}));
assertArrayEquals(new char[]{'a'}, ArrayUtils.toPrimitive(new Character[]{'a'}));
assertArrayEquals(new byte[]{1}, ArrayUtils.toPrimitive(new Byte[]{1}));
assertArrayEquals(new int[]{}, ArrayUtils.toPrimitive(new Integer[]{}));
assertArrayEquals(new short[]{2}, ArrayUtils.toPrimitive(new Short[]{2}));
assertArrayEquals(new long[]{2, 3}, ArrayUtils.toPrimitive(new Long[]{2L, 3L}));
assertArrayEquals(new float[]{3.14f}, ArrayUtils.toPrimitive(new Float[]{3.14f}), 0.1f);
assertArrayEquals(new double[]{2.718}, ArrayUtils.toPrimitive(new Double[]{2.718}), 0.1);
assertArrayEquals(new boolean[]{true}, (boolean[]) ArrayUtils.toPrimitive((Object) new Boolean[]{true}));
assertArrayEquals(new char[]{'a'}, (char[]) ArrayUtils.toPrimitive((Object) new Character[]{'a'}));
assertArrayEquals(new byte[]{1}, (byte[]) ArrayUtils.toPrimitive((Object) new Byte[]{1}));
assertArrayEquals(new int[]{}, (int[]) ArrayUtils.toPrimitive((Object) new Integer[]{}));
assertArrayEquals(new short[]{2}, (short[]) ArrayUtils.toPrimitive((Object) new Short[]{2}));
assertArrayEquals(new long[]{2, 3}, (long[]) ArrayUtils.toPrimitive((Object) new Long[]{2L, 3L}));
assertArrayEquals(new float[]{3.14f}, (float[]) ArrayUtils.toPrimitive((Object) new Float[]{3.14f}), 0.1f);
assertArrayEquals(new double[]{2.718}, (double[]) ArrayUtils.toPrimitive((Object) new Double[]{2.718}), 0.1);
assertEquals(0, array.length);
assertEquals(StringUtils.EMPTY, ArrayUtils.get(array1, 0));
assertEquals(TestClass.class, componentType);
assertEquals(StringUtils.EMPTY, ArrayUtils.get(array1, 0, null));
assertEquals(defaultValue, ArrayUtils.get(array1, -1, defaultValue));
assertEquals(StringUtils.EMPTY, ArrayUtils.get(array1, 0, defaultValue));
assertEquals(defaultValue, ArrayUtils.get(array1, 1, defaultValue));
assertEquals(0, ArrayUtils.getLength(emptyObjectArray));
assertEquals(1, ArrayUtils.getLength(notEmptyObjectArray));
assertEquals(0, ArrayUtils.getLength(emptyIntArray));
assertEquals(0, ArrayUtils.getLength(emptyShortArray));
assertEquals(0, ArrayUtils.getLength(emptyCharArray));
assertEquals(0, ArrayUtils.getLength(emptyByteArray));
assertEquals(1, ArrayUtils.getLength(notEmptyByteArray));
assertEquals(0, ArrayUtils.getLength(emptyDoubleArray));
assertEquals(1, ArrayUtils.getLength(notEmptyDoubleArray));
assertEquals(0, ArrayUtils.getLength(emptyFloatArray));
assertEquals(0, ArrayUtils.getLength(emptyBooleanArray));
assertEquals(1, ArrayUtils.getLength(notEmptyBooleanArray));
assertEquals(ArrayUtils.hashCode(array1), ArrayUtils.hashCode(array1));
assertNotEquals(ArrayUtils.hashCode(array1), ArrayUtils.hashCode(array2));
assertEquals(ArrayUtils.hashCode(array3), ArrayUtils.hashCode(array3));
assertEquals(ArrayUtils.hashCode(array3), ArrayUtils.hashCode(array4));
assertEquals(ArrayUtils.hashCode(arrayB), ArrayUtils.hashCode(arrayA));
assertEquals(emptySet, ArrayUtils.indexesOf((Object[]) null, null));
assertEquals(emptySet, ArrayUtils.indexesOf(new Object[0], "0"));
assertEquals(testSet, ArrayUtils.indexesOf(array, "0"));
assertEquals(testSet, ArrayUtils.indexesOf(array, "2"));
assertEquals(testSet, ArrayUtils.indexesOf(array, "3"));
assertEquals(testSet, ArrayUtils.indexesOf(array, null));
assertEquals(emptySet, ArrayUtils.indexesOf(array, "notInArray"));
assertEquals(emptySet, ArrayUtils.indexesOf(array, true));
assertEquals(emptySet, ArrayUtils.indexesOf(array, true));
assertEquals(testSet, ArrayUtils.indexesOf(array, true));
assertEquals(testSet, ArrayUtils.indexesOf(array, false));
assertEquals(emptySet, ArrayUtils.indexesOf(array, false));
assertEquals(emptySet, ArrayUtils.indexesOf(array, true, 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, true, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, true, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, true, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, false, 1));
assertEquals(emptySet, ArrayUtils.indexesOf(array, false, 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, false, -1));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (byte) 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 3));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (byte) 99));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (byte) 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 0, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 1, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 2, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 3, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 3, -1));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (byte) 99, 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 'a'));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'a'));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'b'));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'c'));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'd'));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 'e'));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 'a', 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'a', 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'a', 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'a', -1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'b', 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'c', 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'd', 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 'd', 5));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 'e', 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 99));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (double) 0, (double) 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (double) 0, (double) 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (double) 0, 0.3));
assertEquals(testSet, ArrayUtils.indexesOf(array, 4.15, 2.0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1.00001324, 0.0001));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3, -1));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 99, 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (double) 0, 0, (double) 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (double) 0, 0, (double) 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (double) 0, 1, 0.3));
assertEquals(testSet, ArrayUtils.indexesOf(array, (double) 0, 0, 0.3));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0, 0.35));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 2, 0.35));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2, -1, 0.35));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 2, 3, 0.35));
assertEquals(testSet, ArrayUtils.indexesOf(array, 4.15, 0, 2.0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1.00001324, 0, 0.0001));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 99));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3, -1));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 99, 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3, -1));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 99, 0));
assertEquals(emptySet, ArrayUtils.indexesOf((long[]) null, 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 4));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3));
assertEquals(emptySet, ArrayUtils.indexesOf((long[]) null, 0, 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 4, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3, 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 3, 8));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (short) 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 3));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (short) 99));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (short) 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 0, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 1, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 2, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 3, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 3, -1));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (short) 99, 0));
assertEquals(emptySet, ArrayUtils.indexesOf(null, null, 2));
assertEquals(emptySet, ArrayUtils.indexesOf(new Object[0], "0", 0));
assertEquals(emptySet, ArrayUtils.indexesOf(null, "0", 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, "0", 8));
assertEquals(testSet, ArrayUtils.indexesOf(array, "0", 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, "1", 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, "1", 9));
assertEquals(testSet, ArrayUtils.indexesOf(array, "2", 3));
assertEquals(testSet, ArrayUtils.indexesOf(array, "2", 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, "3", 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, null, 0));
assertEquals(-1, ArrayUtils.indexOf(null, "0"));
assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0"));
assertEquals(0, ArrayUtils.indexOf(array, "0"));
assertEquals(1, ArrayUtils.indexOf(array, "1"));
assertEquals(2, ArrayUtils.indexOf(array, "2"));
assertEquals(3, ArrayUtils.indexOf(array, "3"));
assertEquals(4, ArrayUtils.indexOf(array, null));
assertEquals(-1, ArrayUtils.indexOf(array, "notInArray"));
assertEquals(-1, ArrayUtils.indexOf(array, true));
assertEquals(-1, ArrayUtils.indexOf(array, true));
assertEquals(0, ArrayUtils.indexOf(array, true));
assertEquals(1, ArrayUtils.indexOf(array, false));
assertEquals(-1, ArrayUtils.indexOf(array, false));
assertEquals(-1, ArrayUtils.indexOf(array, true, 2));
assertEquals(-1, ArrayUtils.indexOf(array, true, 2));
assertEquals(2, ArrayUtils.indexOf(array, true, 1));
assertEquals(-1, ArrayUtils.indexOf(array, false, 2));
assertEquals(1, ArrayUtils.indexOf(array, false, 0));
assertEquals(1, ArrayUtils.indexOf(array, false, -1));
assertEquals(-1, ArrayUtils.indexOf(array, false, 0));
assertEquals(-1, ArrayUtils.indexOf(array, false, -1));
assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0));
assertEquals(0, ArrayUtils.indexOf(array, (byte) 0));
assertEquals(1, ArrayUtils.indexOf(array, (byte) 1));
assertEquals(2, ArrayUtils.indexOf(array, (byte) 2));
assertEquals(3, ArrayUtils.indexOf(array, (byte) 3));
assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99));
assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2));
assertEquals(4, ArrayUtils.indexOf(array, (byte) 0, 2));
assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2));
assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2));
assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2));
assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, -1));
assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0));
assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6));
assertEquals(-1, ArrayUtils.indexOf(array, 'a'));
assertEquals(0, ArrayUtils.indexOf(array, 'a'));
assertEquals(1, ArrayUtils.indexOf(array, 'b'));
assertEquals(2, ArrayUtils.indexOf(array, 'c'));
assertEquals(3, ArrayUtils.indexOf(array, 'd'));
assertEquals(-1, ArrayUtils.indexOf(array, 'e'));
assertEquals(-1, ArrayUtils.indexOf(array, 'a', 2));
assertEquals(4, ArrayUtils.indexOf(array, 'a', 2));
assertEquals(-1, ArrayUtils.indexOf(array, 'b', 2));
assertEquals(2, ArrayUtils.indexOf(array, 'c', 2));
assertEquals(3, ArrayUtils.indexOf(array, 'd', 2));
assertEquals(3, ArrayUtils.indexOf(array, 'd', -1));
assertEquals(-1, ArrayUtils.indexOf(array, 'e', 0));
assertEquals(-1, ArrayUtils.indexOf(array, 'a', 6));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));
assertEquals(0, ArrayUtils.indexOf(array, (double) 0));
assertEquals(1, ArrayUtils.indexOf(array, (double) 1));
assertEquals(2, ArrayUtils.indexOf(array, (double) 2));
assertEquals(3, ArrayUtils.indexOf(array, (double) 3));
assertEquals(3, ArrayUtils.indexOf(array, (double) 3, -1));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 99));
assertEquals(0, ArrayUtils.indexOf(array, Double.NEGATIVE_INFINITY));
assertEquals(1, ArrayUtils.indexOf(array, Double.NaN));
assertEquals(2, ArrayUtils.indexOf(array, Double.POSITIVE_INFINITY));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));
assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0.3));
assertEquals(2, ArrayUtils.indexOf(array, 2.2, 0.35));
assertEquals(3, ArrayUtils.indexOf(array, 4.15, 2.0));
assertEquals(1, ArrayUtils.indexOf(array, 1.00001324, 0.0001));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));
assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 2));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 1, 2));
assertEquals(2, ArrayUtils.indexOf(array, (double) 2, 2));
assertEquals(3, ArrayUtils.indexOf(array, (double) 3, 2));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 99, 0));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 6));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, 0.3));
assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, 0.3));
assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, 0.3));
assertEquals(2, ArrayUtils.indexOf(array, 2.2, 0, 0.35));
assertEquals(3, ArrayUtils.indexOf(array, 4.15, 0, 2.0));
assertEquals(1, ArrayUtils.indexOf(array, 1.00001324, 0, 0.0001));
assertEquals(3, ArrayUtils.indexOf(array, 4.15, -1, 2.0));
assertEquals(1, ArrayUtils.indexOf(array, 1.00001324, -300, 0.0001));
assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));
assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));
assertEquals(0, ArrayUtils.indexOf(array, (float) 0));
assertEquals(1, ArrayUtils.indexOf(array, (float) 1));
assertEquals(2, ArrayUtils.indexOf(array, (float) 2));
assertEquals(3, ArrayUtils.indexOf(array, (float) 3));
assertEquals(-1, ArrayUtils.indexOf(array, (float) 99));
assertEquals(0, ArrayUtils.indexOf(array, Float.NEGATIVE_INFINITY));
assertEquals(1, ArrayUtils.indexOf(array, Float.NaN));
assertEquals(2, ArrayUtils.indexOf(array, Float.POSITIVE_INFINITY));
assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));
assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));
assertEquals(4, ArrayUtils.indexOf(array, (float) 0, 2));
assertEquals(-1, ArrayUtils.indexOf(array, (float) 1, 2));
assertEquals(2, ArrayUtils.indexOf(array, (float) 2, 2));
assertEquals(3, ArrayUtils.indexOf(array, (float) 3, 2));
assertEquals(3, ArrayUtils.indexOf(array, (float) 3, -1));
assertEquals(-1, ArrayUtils.indexOf(array, (float) 99, 0));
assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6));
assertEquals(-1, ArrayUtils.indexOf(array, 0));
assertEquals(0, ArrayUtils.indexOf(array, 0));
assertEquals(1, ArrayUtils.indexOf(array, 1));
assertEquals(2, ArrayUtils.indexOf(array, 2));
assertEquals(3, ArrayUtils.indexOf(array, 3));
assertEquals(-1, ArrayUtils.indexOf(array, 99));
assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));
assertEquals(4, ArrayUtils.indexOf(array, 0, 2));
assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));
assertEquals(2, ArrayUtils.indexOf(array, 2, 2));
assertEquals(3, ArrayUtils.indexOf(array, 3, 2));
assertEquals(3, ArrayUtils.indexOf(array, 3, -1));
assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));
assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));
assertEquals(-1, ArrayUtils.indexOf(array, 0));
assertEquals(0, ArrayUtils.indexOf(array, 0));
assertEquals(1, ArrayUtils.indexOf(array, 1));
assertEquals(2, ArrayUtils.indexOf(array, 2));
assertEquals(3, ArrayUtils.indexOf(array, 3));
assertEquals(-1, ArrayUtils.indexOf(array, 99));
assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));
assertEquals(4, ArrayUtils.indexOf(array, 0, 2));
assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));
assertEquals(2, ArrayUtils.indexOf(array, 2, 2));
assertEquals(3, ArrayUtils.indexOf(array, 3, 2));
assertEquals(3, ArrayUtils.indexOf(array, 3, -1));
assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));
assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));
assertEquals(-1, ArrayUtils.indexOf(array, (short) 0));
assertEquals(0, ArrayUtils.indexOf(array, (short) 0));
assertEquals(1, ArrayUtils.indexOf(array, (short) 1));
assertEquals(2, ArrayUtils.indexOf(array, (short) 2));
assertEquals(3, ArrayUtils.indexOf(array, (short) 3));
assertEquals(-1, ArrayUtils.indexOf(array, (short) 99));
assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 2));
assertEquals(4, ArrayUtils.indexOf(array, (short) 0, 2));
assertEquals(-1, ArrayUtils.indexOf(array, (short) 1, 2));
assertEquals(2, ArrayUtils.indexOf(array, (short) 2, 2));
assertEquals(3, ArrayUtils.indexOf(array, (short) 3, 2));
assertEquals(3, ArrayUtils.indexOf(array, (short) 3, -1));
assertEquals(-1, ArrayUtils.indexOf(array, (short) 99, 0));
assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 6));
assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0", 0));
assertEquals(-1, ArrayUtils.indexOf(null, "0", 2));
assertEquals(5, ArrayUtils.indexOf(array, "0", 2));
assertEquals(-1, ArrayUtils.indexOf(array, "1", 2));
assertEquals(2, ArrayUtils.indexOf(array, "2", 2));
assertEquals(3, ArrayUtils.indexOf(array, "3", 2));
assertEquals(4, ArrayUtils.indexOf(array, null, 2));
assertEquals(-1, ArrayUtils.indexOf(array, "notInArray", 2));
assertEquals(4, ArrayUtils.indexOf(array, null, -1));
assertEquals(-1, ArrayUtils.indexOf(array, null, 8));
assertEquals(-1, ArrayUtils.indexOf(array, "0", 8));
assertEquals(2, array.length);
assertEquals("foo", array[0]);
assertEquals("bar", array[1]);
assertEquals(0, array.length);
this.assertIsEquals(larray1, larray2, larray3);
this.assertIsEquals(iarray1, iarray2, iarray3);
this.assertIsEquals(sarray1, sarray2, sarray3);
this.assertIsEquals(farray1, farray2, farray3);
this.assertIsEquals(darray1, darray2, darray3);
this.assertIsEquals(byteArray1, byteArray2, byteArray3);
this.assertIsEquals(barray1, barray2, barray3);
assertEquals(-1, ArrayUtils.lastIndexOf(null, "0"));
assertEquals(5, ArrayUtils.lastIndexOf(array, "0"));
assertEquals(1, ArrayUtils.lastIndexOf(array, "1"));
assertEquals(2, ArrayUtils.lastIndexOf(array, "2"));
assertEquals(3, ArrayUtils.lastIndexOf(array, "3"));
assertEquals(4, ArrayUtils.lastIndexOf(array, null));
assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray"));
assertEquals(-1, ArrayUtils.lastIndexOf(array, true));
assertEquals(-1, ArrayUtils.lastIndexOf(array, true));
assertEquals(2, ArrayUtils.lastIndexOf(array, true));
assertEquals(1, ArrayUtils.lastIndexOf(array, false));
assertEquals(-1, ArrayUtils.lastIndexOf(array, false));
assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));
assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2));
assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1));
assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));
assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0));
assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0));
assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1));
assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2));
assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2));
assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2));
assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2));
assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));
assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a'));
assertEquals(4, ArrayUtils.lastIndexOf(array, 'a'));
assertEquals(1, ArrayUtils.lastIndexOf(array, 'b'));
assertEquals(2, ArrayUtils.lastIndexOf(array, 'c'));
assertEquals(3, ArrayUtils.lastIndexOf(array, 'd'));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a', 2));
assertEquals(0, ArrayUtils.lastIndexOf(array, 'a', 2));
assertEquals(1, ArrayUtils.lastIndexOf(array, 'b', 2));
assertEquals(2, ArrayUtils.lastIndexOf(array, 'c', 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', -1));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));
assertEquals(4, ArrayUtils.lastIndexOf(array, 'a', 88));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));
assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0));
assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1));
assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2));
assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));
assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 0.3));
assertEquals(2, ArrayUtils.lastIndexOf(array, 2.2, 0.35));
assertEquals(3, ArrayUtils.lastIndexOf(array, 4.15, 2.0));
assertEquals(1, ArrayUtils.lastIndexOf(array, 1.00001324, 0.0001));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));
assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 2));
assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1, 2));
assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, -1));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));
assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 88));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0));
assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, 0.3));
assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, 0.3));
assertEquals(2, ArrayUtils.lastIndexOf(array, 2.2, 3, 0.35));
assertEquals(3, ArrayUtils.lastIndexOf(array, 4.15, array.length, 2.0));
assertEquals(1, ArrayUtils.lastIndexOf(array, 1.00001324, array.length, 0.0001));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 4.15, -200, 2.0));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));
assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0));
assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1));
assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2));
assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));
assertEquals(0, ArrayUtils.lastIndexOf(array, (float) 0, 2));
assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1, 2));
assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, -1));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));
assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0, 88));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));
assertEquals(4, ArrayUtils.lastIndexOf(array, 0));
assertEquals(1, ArrayUtils.lastIndexOf(array, 1));
assertEquals(2, ArrayUtils.lastIndexOf(array, 2));
assertEquals(3, ArrayUtils.lastIndexOf(array, 3));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));
assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));
assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));
assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));
assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));
assertEquals(4, ArrayUtils.lastIndexOf(array, 0));
assertEquals(1, ArrayUtils.lastIndexOf(array, 1));
assertEquals(2, ArrayUtils.lastIndexOf(array, 2));
assertEquals(3, ArrayUtils.lastIndexOf(array, 3));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));
assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));
assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));
assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4));
assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0));
assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0));
assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1));
assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2));
assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2));
assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2));
assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2));
assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));
assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88));
assertEquals(-1, ArrayUtils.lastIndexOf(null, "0", 2));
assertEquals(0, ArrayUtils.lastIndexOf(array, "0", 2));
assertEquals(1, ArrayUtils.lastIndexOf(array, "1", 2));
assertEquals(2, ArrayUtils.lastIndexOf(array, "2", 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, "3", 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, "3", -1));
assertEquals(4, ArrayUtils.lastIndexOf(array, null, 5));
assertEquals(-1, ArrayUtils.lastIndexOf(array, null, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray", 5));
assertEquals(-1, ArrayUtils.lastIndexOf(array, null, -1));
assertEquals(5, ArrayUtils.lastIndexOf(array, "0", 88));
assertNotSame(empty, result);
assertNotSame(empty, result);
assertNotSame(empty, result);
assertNotSame(empty, result);
assertNotSame(empty, result);
assertNotSame(empty, result);
assertNotSame(empty, result);
assertNotSame(empty, result);
assertNotSame(empty, result);
assertNotSame(empty, result);
assertNotSame(empty, result);
assertNotSame(empty, result);
assertNotSame(empty, result);
assertNotSame(empty, result);
assertNotSame(empty, result);
assertNotSame(empty, result);
assertNotSame(empty, result);
assertNotSame(empty, result);
assertNotSame(empty, result);
assertEquals(array[0], str3);
assertEquals(array[1], str2);
assertEquals(array[2], str1);
assertEquals(array[0], str4);
assertEquals(array[1], str3);
assertEquals(array[2], str2);
assertEquals(array[3], str1);
assertEquals(array[0], 4);
assertEquals(array[1], 3);
assertEquals(array[2], 2);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[0]);
assertEquals(1, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(array[0], 'C');
assertEquals(array[1], 'f');
assertEquals(array[2], 'a');
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[0]);
assertEquals(1, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(0.5d, array[0]);
assertEquals(0.4d, array[1]);
assertEquals(0.3d, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[0]);
assertEquals(1, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(0.5f, array[0]);
assertEquals(0.4f, array[1]);
assertEquals(0.3f, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[0]);
assertEquals(1, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(array[0], 3);
assertEquals(array[1], 2);
assertEquals(array[2], 1);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[0]);
assertEquals(1, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(array[0], 3L);
assertEquals(array[1], 2L);
assertEquals(array[2], 1L);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[0]);
assertEquals(1, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals("3", array[0]);
assertEquals("2", array[1]);
assertEquals("1", array[2]);
assertEquals("2", array[0]);
assertEquals("1", array[1]);
assertEquals("3", array[2]);
assertEquals("3", array[0]);
assertEquals("2", array[1]);
assertEquals("1", array[2]);
assertEquals("3", array[0]);
assertEquals("2", array[1]);
assertEquals("1", array[2]);
assertEquals(array[0], 3);
assertEquals(array[1], 2);
assertEquals(array[2], 1);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[0]);
assertEquals(1, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals("1", array[0]);
assertEquals("2", array[1]);
assertEquals("3", array[2]);
assertEquals("4", array[3]);
assertEquals("1", array[0]);
assertEquals("2", array[1]);
assertEquals("3", array[2]);
assertEquals("4", array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals("4", array[0]);
assertEquals("1", array[1]);
assertEquals("2", array[2]);
assertEquals("3", array[3]);
assertEquals("1", array[0]);
assertEquals("2", array[1]);
assertEquals("3", array[2]);
assertEquals("4", array[3]);
assertEquals("4", array[0]);
assertEquals("1", array[1]);
assertEquals("2", array[2]);
assertEquals("3", array[3]);
assertEquals("3", array[0]);
assertEquals("4", array[1]);
assertEquals("1", array[2]);
assertEquals("2", array[3]);
assertEquals(1, array[0]);
assertEquals(3, array[1]);
assertEquals(2, array[2]);
assertEquals(4, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(4, array[2]);
assertEquals(3, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(3, array[1]);
assertEquals(2, array[2]);
assertEquals(4, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(4, array[2]);
assertEquals(3, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(3, array[1]);
assertEquals(2, array[2]);
assertEquals(4, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(4, array[2]);
assertEquals(3, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(3, array[1]);
assertEquals(2, array[2]);
assertEquals(4, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(4, array[2]);
assertEquals(3, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(3, array[1]);
assertEquals(2, array[2]);
assertEquals(4, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(4, array[2]);
assertEquals(3, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(3, array[1]);
assertEquals(2, array[2]);
assertEquals(4, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(4, array[2]);
assertEquals(3, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals("1", array[0]);
assertEquals("2", array[1]);
assertEquals("3", array[2]);
assertEquals("4", array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals("1", array[0]);
assertEquals("3", array[1]);
assertEquals("2", array[2]);
assertEquals("4", array[3]);
assertEquals("5", array[4]);
assertEquals("1", array[0]);
assertEquals("2", array[1]);
assertEquals("4", array[2]);
assertEquals("3", array[3]);
assertEquals("5", array[4]);
assertEquals(1, array[0]);
assertEquals(3, array[1]);
assertEquals(2, array[2]);
assertEquals(4, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(4, array[2]);
assertEquals(3, array[3]);
assertEquals(5, array[4]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(4, array[0]);
assertEquals(5, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(3, array[4]);
assertEquals(5, ArrayUtils.removeAllOccurrences(array1, true).length);
assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2),"empty array");
assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 4, 2), "start > end");
assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end");
assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 33, 4), "start overshoot, any end");
assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2),"empty array, object test");
assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 4, 1), "start > end, object test");
assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end, object test");
assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 8733, 4),"start overshoot, any end, object test");
assertSame(boolean.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), "boolean type");
assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2),"empty array");
assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 2), "start > end");
assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end");
assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 33, 4), "start overshoot, any end");
assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2),"empty array, object test");
assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 1), "start > end, object test");
assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end, object test");
assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 8733, 4),"start overshoot, any end, object test");
assertSame(byte.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), "byte type");
assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2),"empty array");
assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 4, 2), "start > end");
assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end");
assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 33, 4), "start overshoot, any end");
assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2),"empty array, object test");
assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 4, 1), "start > end, object test");
assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end, object test");
assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 8733, 4),"start overshoot, any end, object test");
assertSame(double.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), "double type");
assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2),"empty array");
assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 4, 2), "start > end");
assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end");
assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 33, 4), "start overshoot, any end");
assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2),"empty array, object test");
assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 4, 1), "start > end, object test");
assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end, object test");
assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 8733, 4),"start overshoot, any end, object test");
assertSame(float.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), "float type");
assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2), "empty array");
assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 4, 2), "start > end");
assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end");
assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 33, 4), "start overshoot, any end");
assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2),"empty array, object test");
assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 4, 1), "start > end, object test");
assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end, object test");
assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 8733, 4),"start overshoot, any end, object test");
assertSame(int.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), "int type");
assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2),"empty array");
assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 4, 2), "start > end");
assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end");
assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 33, 4), "start overshoot, any end");
assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2),"empty array, object test");
assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 4, 1), "start > end, object test");
assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end, object test");
assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 8733, 4),"start overshoot, any end, object test");
assertSame(long.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), "long type");
assertEquals("abcd", StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4)), "0 start, mid end");
assertEquals("abcdef", StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length)),"0 start, length end");
assertEquals("bcd", StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4)), "mid start, mid end");
assertEquals("bcdef", StringUtils.join(ArrayUtils.subarray(objectArray, 1, objectArray.length)),"mid start, length end");
assertEquals("", StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2)), "empty array");
assertEquals("", StringUtils.join(ArrayUtils.subarray(objectArray, 4, 2)), "start > end");
assertEquals("", StringUtils.join(ArrayUtils.subarray(objectArray, 3, 3)), "start == end");
assertEquals("abcd", StringUtils.join(ArrayUtils.subarray(objectArray, -2, 4)), "start undershoot, normal end");
assertEquals("", StringUtils.join(ArrayUtils.subarray(objectArray, 33, 4)), "start overshoot, any end");
assertEquals("cdef", StringUtils.join(ArrayUtils.subarray(objectArray, 2, 33)), "normal start, end overshoot");
assertEquals("abcdef", StringUtils.join(ArrayUtils.subarray(objectArray, -2, 12)),"start undershoot, end overshoot");
assertSame(Object.class, ArrayUtils.subarray(objectArray, 2, 4).getClass().getComponentType(), "Object type");
assertSame(Date.class, ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType(),"java.util.Date type");
assertNotSame(java.sql.Date.class, ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType(),"java.sql.Date type");
assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2),"empty array");
assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 4, 2), "start > end");
assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end");
assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 33, 4), "start overshoot, any end");
assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2),"empty array, object test");
assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 4, 1), "start > end, object test");
assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end, object test");
assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 8733, 4),"start overshoot, any end, object test");
assertSame(short.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), "short type");
assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2),"empty array");
assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 4, 2), "start > end");
assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end");
assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 33, 4), "start overshoot, any end");
assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2),"empty array, object test");
assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 4, 1), "start > end, object test");
assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end, object test");
assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 8733, 4),"start overshoot, any end, object test");
assertSame(char.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), "char type");
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertArrayEquals(new char[]{3, 2, 1}, array);
assertArrayEquals(new char[]{1, 2, 3}, array);
assertArrayEquals(new char[]{2, 1, 3}, array);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(0, array.length);
assertEquals(0, array.length);
assertEquals(0, array.length);
assertEquals(0, array.length);
assertEquals(0, array.length);
assertEquals(0, array.length);
assertEquals(0, array.length);
assertEquals(0, array.length);
assertEquals(0, array.length);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertArrayEquals(new int[]{2, 3, 1}, array);
assertArrayEquals(new int[]{2, 3, 1}, array);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals("3", array[0]);
assertEquals("2", array[1]);
assertEquals("1", array[2]);
assertEquals("3", array[0]);
assertEquals("4", array[1]);
assertEquals("1", array[2]);
assertEquals("2", array[3]);
assertEquals("3", array[0]);
assertEquals("4", array[1]);
assertEquals("1", array[2]);
assertEquals("2", array[3]);
assertEquals("3", array[0]);
assertEquals("4", array[1]);
assertEquals("5", array[2]);
assertEquals("2", array[3]);
assertEquals("1", array[4]);
assertEquals("3", array[0]);
assertEquals("4", array[1]);
assertEquals("5", array[2]);
assertEquals("2", array[3]);
assertEquals("1", array[4]);
assertEquals(0, array.length);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals("bar", map.get("foo"));
assertEquals("world", map.get("hello"));
assertEquals("bar", map.get("foo"));
assertEquals(Collections.emptyMap(), ArrayUtils.toMap(new Object[0]));
assertEquals(Collections.singletonMap("key", "value1"), map);
assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0]));
assertArrayEquals(new Boolean[]{Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}, ArrayUtils.toObject(new boolean[]{true, false, true}));
assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY,ArrayUtils.toObject(new byte[0]));
assertArrayEquals(new Byte[]{Byte.valueOf(Byte.MIN_VALUE),Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999)}, ArrayUtils.toObject(new byte[]{Byte.MIN_VALUE, Byte.MAX_VALUE,(byte) 9999999}));
assertSame(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY,ArrayUtils.toObject(new char[0]));
assertArrayEquals(new Character[]{Character.valueOf(Character.MIN_VALUE),Character.valueOf(Character.MAX_VALUE), Character.valueOf('0')}, ArrayUtils.toObject(new char[]{Character.MIN_VALUE, Character.MAX_VALUE,'0'}));
assertSame(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY,ArrayUtils.toObject(new double[0]));
assertArrayEquals(new Double[]{Double.valueOf(Double.MIN_VALUE),Double.valueOf(Double.MAX_VALUE),Double.valueOf(9999999)}, ArrayUtils.toObject(new double[]{Double.MIN_VALUE, Double.MAX_VALUE, 9999999}));
assertSame(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY,ArrayUtils.toObject(new float[0]));
assertArrayEquals(new Float[]{Float.valueOf(Float.MIN_VALUE),Float.valueOf(Float.MAX_VALUE),Float.valueOf(9999999)}, ArrayUtils.toObject(new float[]{Float.MIN_VALUE, Float.MAX_VALUE, 9999999}));
assertSame(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY,ArrayUtils.toObject(new int[0]));
assertArrayEquals(new Integer[]{Integer.valueOf(Integer.MIN_VALUE),Integer.valueOf(Integer.MAX_VALUE),Integer.valueOf(9999999)}, ArrayUtils.toObject(new int[]{Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}));
assertSame(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY,ArrayUtils.toObject(new long[0]));
assertArrayEquals(new Long[]{Long.valueOf(Long.MIN_VALUE),Long.valueOf(Long.MAX_VALUE),Long.valueOf(9999999)}, ArrayUtils.toObject(new long[]{Long.MIN_VALUE, Long.MAX_VALUE, 9999999}));
assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,ArrayUtils.toObject(new short[0]));
assertArrayEquals(new Short[]{Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE),Short.valueOf((short) 9999999)}, ArrayUtils.toObject(new short[]{Short.MIN_VALUE, Short.MAX_VALUE,(short) 9999999}));
assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0]));
assertArrayEquals(new boolean[]{true, false, true}, ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}));
assertArrayEquals(new boolean[]{true, false}, ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE, null}));
assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false));
assertArrayEquals(new boolean[]{true, false, true}, ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}, false));
assertArrayEquals(new boolean[]{true, false, false}, ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE, null, Boolean.FALSE}, false));
assertArrayEquals(new boolean[]{true, true, false}, ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE, null, Boolean.FALSE}, true));
assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0]));
assertArrayEquals(new byte[]{Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999}, ArrayUtils.toPrimitive(new Byte[]{Byte.valueOf(Byte.MIN_VALUE),Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999)}));
assertSame(ArrayUtils.EMPTY_BYTE_ARRAY,ArrayUtils.toPrimitive(new Byte[0], (byte) 1));
assertArrayEquals(new byte[]{Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999}, ArrayUtils.toPrimitive(new Byte[]{Byte.valueOf(Byte.MIN_VALUE),Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999)},Byte.MIN_VALUE));
assertArrayEquals(new byte[]{Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999}, ArrayUtils.toPrimitive(new Byte[]{Byte.valueOf(Byte.MIN_VALUE), null,Byte.valueOf((byte) 9999999)}, Byte.MAX_VALUE));
assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0]));
assertArrayEquals(new char[]{Character.MIN_VALUE, Character.MAX_VALUE, '0'}, ArrayUtils.toPrimitive(new Character[]{Character.valueOf(Character.MIN_VALUE),Character.valueOf(Character.MAX_VALUE), Character.valueOf('0')}));
assertSame(ArrayUtils.EMPTY_CHAR_ARRAY,ArrayUtils.toPrimitive(new Character[0], (char) 0));
assertArrayEquals(new char[]{Character.MIN_VALUE, Character.MAX_VALUE, '0'}, ArrayUtils.toPrimitive(new Character[]{Character.valueOf(Character.MIN_VALUE),Character.valueOf(Character.MAX_VALUE), Character.valueOf('0')},Character.MIN_VALUE));
assertArrayEquals(new char[]{Character.MIN_VALUE, Character.MAX_VALUE, '0'}, ArrayUtils.toPrimitive(new Character[]{Character.valueOf(Character.MIN_VALUE), null,Character.valueOf('0')}, Character.MAX_VALUE));
assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,ArrayUtils.toPrimitive(new Double[0]));
assertArrayEquals(new double[]{Double.MIN_VALUE, Double.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Double[]{Double.valueOf(Double.MIN_VALUE),Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)}));
assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,ArrayUtils.toPrimitive(new Double[0], 1));
assertArrayEquals(new double[]{Double.MIN_VALUE, Double.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Double[]{Double.valueOf(Double.MIN_VALUE),Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)}, 1));
assertArrayEquals(new double[]{Double.MIN_VALUE, Double.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Double[]{Double.valueOf(Double.MIN_VALUE),null, Double.valueOf(9999999)}, Double.MAX_VALUE));
assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,ArrayUtils.toPrimitive(new Float[0]));
assertArrayEquals(new float[]{Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Float[]{Float.valueOf(Float.MIN_VALUE),Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)}));
assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,ArrayUtils.toPrimitive(new Float[0], 1));
assertArrayEquals(new float[]{Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Float[]{Float.valueOf(Float.MIN_VALUE),Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)}, 1));
assertArrayEquals(new float[]{Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Float[]{Float.valueOf(Float.MIN_VALUE),null, Float.valueOf(9999999)}, Float.MAX_VALUE));
assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0]));
assertArrayEquals(new int[]{Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Integer[]{Integer.valueOf(Integer.MIN_VALUE),Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)}));
assertSame(ArrayUtils.EMPTY_INT_ARRAY,ArrayUtils.toPrimitive(new Integer[0], 1));
assertArrayEquals(new int[]{Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Integer[]{Integer.valueOf(Integer.MIN_VALUE),Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)}, 1));
assertArrayEquals(new int[]{Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Integer[]{Integer.valueOf(Integer.MIN_VALUE),null, Integer.valueOf(9999999)}, Integer.MAX_VALUE));
assertSame(ArrayUtils.EMPTY_LONG_ARRAY,ArrayUtils.toPrimitive(new Long[0]));
assertArrayEquals(new long[]{Long.MIN_VALUE, Long.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Long[]{Long.valueOf(Long.MIN_VALUE),Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999)}));
assertSame(ArrayUtils.EMPTY_LONG_ARRAY,ArrayUtils.toPrimitive(new Long[0], 1));
assertArrayEquals(new long[]{Long.MIN_VALUE, Long.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Long[]{Long.valueOf(Long.MIN_VALUE),Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999)}, 1));
assertArrayEquals(new long[]{Long.MIN_VALUE, Long.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Long[]{Long.valueOf(Long.MIN_VALUE),null, Long.valueOf(9999999)}, Long.MAX_VALUE));
assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0]));
assertArrayEquals(new short[]{Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999}, ArrayUtils.toPrimitive(new Short[]{Short.valueOf(Short.MIN_VALUE),Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999)}));
assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0],Short.MIN_VALUE));
assertArrayEquals(new short[]{Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999}, ArrayUtils.toPrimitive(new Short[]{Short.valueOf(Short.MIN_VALUE),Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999)}, Short.MIN_VALUE));
assertArrayEquals(new short[]{Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999}, ArrayUtils.toPrimitive(new Short[]{Short.valueOf(Short.MIN_VALUE), null,Short.valueOf((short) 9999999)}, Short.MAX_VALUE));
assertEquals("{}", ArrayUtils.toString(null));
assertEquals("{}", ArrayUtils.toString(new Object[0]));
assertEquals("{}", ArrayUtils.toString(new String[0]));
assertEquals("{<null>}", ArrayUtils.toString(new String[]{null}));
assertEquals("{pink,blue}", ArrayUtils.toString(new String[]{"pink", "blue"}));
assertEquals("<empty>", ArrayUtils.toString(null, "<empty>"));
assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>"));
assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>"));
assertEquals("{<null>}", ArrayUtils.toString(new String[]{null}, "<empty>"));
assertEquals("{pink,blue}", ArrayUtils.toString(new String[]{"pink", "blue"}, "<empty>"));
assertArrayEquals(new String[0], ArrayUtils.toStringArray(new Object[0]));
assertArrayEquals(new String[]{"1", "2", "3", "array", "test"}, ArrayUtils.toStringArray(array));
assertArrayEquals(new String[0], ArrayUtils.toStringArray(new Object[0], ""));
assertArrayEquals(new String[]{"1", "valueForNullElements", "test"},ArrayUtils.toStringArray(array, "valueForNullElements"));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 99));
assertSame(null, serEx.getMessage());
assertSame(null, serEx.getCause());
assertSame("Message", serEx.getMessage());
assertSame(null, serEx.getCause());
assertEquals("java.lang.Exception", serEx.getMessage());
assertSame(ex, serEx.getCause());
assertSame("Message", serEx.getMessage());
assertSame(ex, serEx.getCause());
assertEquals(testBytes.length, realBytes.length);
assertArrayEquals(realBytes, testBytes);
assertEquals(testBytes.length, realBytes.length);
assertArrayEquals(realBytes, testBytes);
assertEquals("java.io.IOException: " + SERIALIZE_IO_EXCEPTION_MESSAGE, e.getMessage());
assertEquals(iString, testMap.get("FOO"));
assertNotSame(iString, testMap.get("FOO"));
assertEquals(iInteger, testMap.get("BAR"));
assertNotSame(iInteger, testMap.get("BAR"));
assertEquals(value, SerializationUtils.deserialize(serialized));
assertEquals("java.lang.ClassNotFoundException: " + CLASS_NOT_FOUND_MESSAGE, se.getMessage());
assertEquals(testBytes.length, realBytes.length);
assertArrayEquals(realBytes, testBytes);
assertEquals(testBytes.length, realBytes.length);
assertArrayEquals(realBytes, testBytes);
assertEquals(iString, testMap.get("FOO"));
assertNotSame(iString, testMap.get("FOO"));
assertEquals(iInteger, testMap.get("BAR"));
assertNotSame(iInteger, testMap.get("BAR"));
assertEquals(iString, testMap.get("FOO"));
assertNotSame(iString, testMap.get("FOO"));
assertEquals(iInteger, testMap.get("BAR"));
assertNotSame(iInteger, testMap.get("BAR"));
assertEquals(primitiveType, clone);
assertEquals(System.getProperty("os.name"), StrLookup.systemPropertiesLookup().lookup("os.name"));
assertEquals(newOsName, sysLookup.lookup(osName), "Changed properties not detected");
assertEquals(newOsName, sysLookup.lookup(osName), "Changed properties not detected");
assertEquals("value", StrLookup.mapLookup(map).lookup("key"));
assertEquals("2", StrLookup.mapLookup(map).lookup("number"));
assertSame(matcher, StrMatcher.commaMatcher());
assertSame(matcher, StrMatcher.tabMatcher());
assertSame(matcher, StrMatcher.spaceMatcher());
assertSame(matcher, StrMatcher.splitMatcher());
assertSame(matcher, StrMatcher.trimMatcher());
assertSame(matcher, StrMatcher.singleQuoteMatcher());
assertSame(matcher, StrMatcher.doubleQuoteMatcher());
assertSame(matcher, StrMatcher.quoteMatcher());
assertSame(matcher, StrMatcher.noneMatcher());
assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher(""));
assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null));
assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher());
assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((char[]) null));
assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher(""));
assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher(null));
assertEquals("", WordUtils.wrap("", 20));
assertEquals("", WordUtils.wrap("", -1));
assertEquals(expected, WordUtils.wrap(input, 20));
assertEquals(expected, WordUtils.wrap(input, 20));
assertEquals(expected, WordUtils.wrap(input, 20));
assertEquals(expected, WordUtils.wrap(input, 7));
assertEquals("", WordUtils.wrap("", 20, "\n", false));
assertEquals("", WordUtils.wrap("", 20, "\n", true));
assertEquals("", WordUtils.wrap("", 20, null, false));
assertEquals("", WordUtils.wrap("", 20, null, true));
assertEquals("", WordUtils.wrap("", -1, null, false));
assertEquals("", WordUtils.wrap("", -1, null, true));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));
assertEquals(expected, WordUtils.wrap(input, 20, "<br />", false));
assertEquals(expected, WordUtils.wrap(input, 20, "<br />", true));
assertEquals(expected, WordUtils.wrap(input, 6, "\n", false));
assertEquals(expected, WordUtils.wrap(input, 2, "\n", false));
assertEquals(expected, WordUtils.wrap(input, -1, "\n", false));
assertEquals(expected, WordUtils.wrap(input, 20, null, false));
assertEquals(expected, WordUtils.wrap(input, 20, null, true));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));
assertEquals(expected, WordUtils.wrap(input, 30, "\n", false, "/"));
assertEquals(expected, WordUtils.wrap(input, 2, "\n", false, "/"));
assertEquals(expected, WordUtils.wrap(input, 9, "\n", true, "/"));
assertEquals(expected, WordUtils.wrap(input, 15, "\n", true, "/"));
assertEquals(expected, WordUtils.wrap(input, 15, "\n", true, "/"));
assertEquals("", WordUtils.capitalize(""));
assertEquals("  ", WordUtils.capitalize("  "));
assertEquals("I", WordUtils.capitalize("I") );
assertEquals("I", WordUtils.capitalize("i") );
assertEquals("I Am Here 123", WordUtils.capitalize("i am here 123") );
assertEquals("I Am Here 123", WordUtils.capitalize("I Am Here 123") );
assertEquals("I Am HERE 123", WordUtils.capitalize("i am HERE 123") );
assertEquals("I AM HERE 123", WordUtils.capitalize("I AM HERE 123") );
assertEquals("", WordUtils.capitalize(""));
assertEquals("  ", WordUtils.capitalize("  "));
assertEquals("I", WordUtils.capitalize("I", chars) );
assertEquals("I", WordUtils.capitalize("i", chars) );
assertEquals("I-Am Here+123", WordUtils.capitalize("i-am here+123", chars) );
assertEquals("I Am+Here-123", WordUtils.capitalize("I Am+Here-123", chars) );
assertEquals("I+Am-HERE 123", WordUtils.capitalize("i+am-HERE 123", chars) );
assertEquals("I-AM HERE+123", WordUtils.capitalize("I-AM HERE+123", chars) );
assertEquals("I aM.Fine", WordUtils.capitalize("i aM.fine", chars) );
assertEquals("I Am.fine", WordUtils.capitalize("i am.fine", null) );
assertEquals("", WordUtils.capitalizeFully(""));
assertEquals("  ", WordUtils.capitalizeFully("  "));
assertEquals("I", WordUtils.capitalizeFully("I") );
assertEquals("I", WordUtils.capitalizeFully("i") );
assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123") );
assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123") );
assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123") );
assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123") );
assertEquals("", WordUtils.capitalizeFully(""));
assertEquals("  ", WordUtils.capitalizeFully("  "));
assertEquals("I", WordUtils.capitalizeFully("I", chars) );
assertEquals("I", WordUtils.capitalizeFully("i", chars) );
assertEquals("I-Am Here+123", WordUtils.capitalizeFully("i-am here+123", chars) );
assertEquals("I Am+Here-123", WordUtils.capitalizeFully("I Am+Here-123", chars) );
assertEquals("I+Am-Here 123", WordUtils.capitalizeFully("i+am-HERE 123", chars) );
assertEquals("I-Am Here+123", WordUtils.capitalizeFully("I-AM HERE+123", chars) );
assertEquals("I am.Fine", WordUtils.capitalizeFully("i aM.fine", chars) );
assertEquals("I Am.fine", WordUtils.capitalizeFully("i am.fine", null) );
assertEquals("", WordUtils.uncapitalize(""));
assertEquals("  ", WordUtils.uncapitalize("  "));
assertEquals("i", WordUtils.uncapitalize("I") );
assertEquals("i", WordUtils.uncapitalize("i") );
assertEquals("i am here 123", WordUtils.uncapitalize("i am here 123") );
assertEquals("i am here 123", WordUtils.uncapitalize("I Am Here 123") );
assertEquals("i am hERE 123", WordUtils.uncapitalize("i am HERE 123") );
assertEquals("i aM hERE 123", WordUtils.uncapitalize("I AM HERE 123") );
assertEquals("", WordUtils.uncapitalize(""));
assertEquals("  ", WordUtils.uncapitalize("  "));
assertEquals("i", WordUtils.uncapitalize("I", chars) );
assertEquals("i", WordUtils.uncapitalize("i", chars) );
assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars) );
assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars) );
assertEquals("i-am+hERE 123", WordUtils.uncapitalize("i-am+HERE 123", chars) );
assertEquals("i aM-hERE+123", WordUtils.uncapitalize("I AM-HERE+123", chars) );
assertEquals("i AM.fINE", WordUtils.uncapitalize("I AM.FINE", chars) );
assertEquals("i aM.FINE", WordUtils.uncapitalize("I AM.FINE", null) );
assertEquals("", WordUtils.initials(""));
assertEquals("", WordUtils.initials("  "));
assertEquals("I", WordUtils.initials("I"));
assertEquals("i", WordUtils.initials("i"));
assertEquals("BJL", WordUtils.initials("Ben John Lee"));
assertEquals("BJL", WordUtils.initials("   Ben \n   John\tLee\t"));
assertEquals("BJ", WordUtils.initials("Ben J.Lee"));
assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee"));
assertEquals("iah1", WordUtils.initials("i am here 123"));
assertEquals("", WordUtils.initials("", array));
assertEquals("", WordUtils.initials("  ", array));
assertEquals("I", WordUtils.initials("I", array));
assertEquals("i", WordUtils.initials("i", array));
assertEquals("S", WordUtils.initials("SJC", array));
assertEquals("BJL", WordUtils.initials("Ben John Lee", array));
assertEquals("BJL", WordUtils.initials("   Ben \n   John\tLee\t", array));
assertEquals("BJ", WordUtils.initials("Ben J.Lee", array));
assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee", array));
assertEquals("KO", WordUtils.initials("Kay O'Murphy", array));
assertEquals("iah1", WordUtils.initials("i am here 123", array));
assertEquals("", WordUtils.initials("", array));
assertEquals("", WordUtils.initials("  ", array));
assertEquals("", WordUtils.initials("I", array));
assertEquals("", WordUtils.initials("i", array));
assertEquals("", WordUtils.initials("SJC", array));
assertEquals("", WordUtils.initials("Ben John Lee", array));
assertEquals("", WordUtils.initials("   Ben \n   John\tLee\t", array));
assertEquals("", WordUtils.initials("Ben J.Lee", array));
assertEquals("", WordUtils.initials(" Ben   John  . Lee", array));
assertEquals("", WordUtils.initials("Kay O'Murphy", array));
assertEquals("", WordUtils.initials("i am here 123", array));
assertEquals("", WordUtils.initials("", array));
assertEquals("", WordUtils.initials("  ", array));
assertEquals("I", WordUtils.initials("I", array));
assertEquals("i", WordUtils.initials("i", array));
assertEquals("S", WordUtils.initials("SJC", array));
assertEquals("BJL", WordUtils.initials("Ben John Lee", array));
assertEquals("BJ", WordUtils.initials("Ben J.Lee", array));
assertEquals("B\nJ", WordUtils.initials("   Ben \n   John\tLee\t", array));
assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee", array));
assertEquals("KO", WordUtils.initials("Kay O'Murphy", array));
assertEquals("iah1", WordUtils.initials("i am here 123", array));
assertEquals("", WordUtils.initials("", array));
assertEquals("", WordUtils.initials("  ", array));
assertEquals("I", WordUtils.initials("I", array));
assertEquals("i", WordUtils.initials("i", array));
assertEquals("S", WordUtils.initials("SJC", array));
assertEquals("BJL", WordUtils.initials("Ben John Lee", array));
assertEquals("BJL", WordUtils.initials("Ben J.Lee", array));
assertEquals("BJL", WordUtils.initials(" Ben   John  . Lee", array));
assertEquals("KO", WordUtils.initials("Kay O'Murphy", array));
assertEquals("iah1", WordUtils.initials("i am here 123", array));
assertEquals("", WordUtils.initials("", array));
assertEquals("", WordUtils.initials("  ", array));
assertEquals("I", WordUtils.initials("I", array));
assertEquals("i", WordUtils.initials("i", array));
assertEquals("S", WordUtils.initials("SJC", array));
assertEquals("BJL", WordUtils.initials("Ben John Lee", array));
assertEquals("BJL", WordUtils.initials("Ben J.Lee", array));
assertEquals("BJL", WordUtils.initials(" Ben   John  . Lee", array));
assertEquals("KOM", WordUtils.initials("Kay O'Murphy", array));
assertEquals("iah1", WordUtils.initials("i am here 123", array));
assertEquals("", WordUtils.initials("", array));
assertEquals(" ", WordUtils.initials("  ", array));
assertEquals("", WordUtils.initials("I", array));
assertEquals("i", WordUtils.initials("i", array));
assertEquals("C", WordUtils.initials("SJC", array));
assertEquals("Bh", WordUtils.initials("Ben John Lee", array));
assertEquals("B.", WordUtils.initials("Ben J.Lee", array));
assertEquals(" h", WordUtils.initials(" Ben   John  . Lee", array));
assertEquals("K", WordUtils.initials("Kay O'Murphy", array));
assertEquals("i2", WordUtils.initials("i am here 123", array));
assertEquals("", WordUtils.swapCase(""));
assertEquals("  ", WordUtils.swapCase("  "));
assertEquals("i", WordUtils.swapCase("I") );
assertEquals("I", WordUtils.swapCase("i") );
assertEquals("I AM HERE 123", WordUtils.swapCase("i am here 123") );
assertEquals("i aM hERE 123", WordUtils.swapCase("I Am Here 123") );
assertEquals("I AM here 123", WordUtils.swapCase("i am HERE 123") );
assertEquals("i am here 123", WordUtils.swapCase("I AM HERE 123") );
assertEquals(expect, WordUtils.swapCase(test));
assertEquals("\45", result, "Failed to unescape octal characters via the between method");
assertEquals("\377", result, "Failed to unescape octal characters via the between method");
assertEquals("\377 and", result, "Failed to unescape octal characters via the between method");
assertEquals("\37" + "8 and", result, "Failed to unescape octal characters via the between method");
assertEquals("\37" + "8", result, "Failed to unescape octal characters via the between method");
assertEquals("\1", result, "Failed to unescape octal characters via the between method");
assertEquals("\036", result, "Failed to unescape octal characters via the between method");
assertEquals("\036" + "5", result, "Failed to unescape octal characters via the between method");
assertEquals("\003", result, "Failed to unescape octal characters via the between method");
assertEquals("\000" + "3", result, "Failed to unescape octal characters via the between method");
assertEquals("\279", result, "Failed to unescape octal characters via the between method");
assertEquals("\\999", result, "Failed to ignore an out of range octal character via the between method");
assertEquals(3, result, "Incorrect code point consumption");
assertEquals("two", out.toString(), "Incorrect value");
assertEquals(3, result, "Incorrect code point consumption");
assertEquals("two", out.toString(), "Incorrect value");
assertEquals("\\u0041\\u0044FGZ", result, "Failed to escape Unicode characters via the below method");
assertEquals("AD\\u0046\\u0047Z", result, "Failed to escape Unicode characters via the between method");
assertEquals("ADF\\u0047\\u005A", result, "Failed to escape Unicode characters via the above method");
assertEquals("&#65;&#68;FGZ", result, "Failed to escape numeric entities via the below method");
assertEquals("AD&#70;&#71;Z", result, "Failed to escape numeric entities via the between method");
assertEquals("ADF&#71;&#90;", result, "Failed to escape numeric entities via the above method");
assertEquals(expected, result, "Failed to escape numeric entities supplementary characters");
assertEquals("G", uu.translate(input), "Failed to unescape Unicode characters with 'u+' notation");
assertEquals("G", result, "Failed to unescape Unicode characters with many 'u' characters");
assertEquals(expected, result, "Failed to unescape numeric entities supplementary characters");
assertEquals("Test &", neu.translate("Test &"), "Failed to ignore when last character is &");
assertEquals("Test &#", neu.translate("Test &#"), "Failed to ignore when last character is &");
assertEquals("Test &#x", neu.translate("Test &#x"), "Failed to ignore when last character is &");
assertEquals("Test &#X", neu.translate("Test &#X"), "Failed to ignore when last character is &");
assertEquals(expected, result, "Failed to support unfinished entities (i.e. missing semicolon)");
assertEquals(expected, result, "Failed to ignore unfinished entities (i.e. missing semicolon)");
assertNotSame(StrTokenizer.getCSVInstance(), tokenizer);
assertNotSame(StrTokenizer.getTSVInstance(), tokenizer);
assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));
assertEquals(expected[i], tokens[i],"token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'");
assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));
assertEquals(expected[i], tokens[i],"token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'");
assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));
assertEquals(expected[i], tokens[i],"token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'");
assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));
assertEquals(expected[i], tokens[i],"token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'");
assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));
assertEquals(expected[i], tokens[i],"token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'");
assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));
assertEquals(nextCount, expected.length, "could not cycle through entire token list" + " using the 'hasNext' and 'next' methods");
assertEquals(prevCount, expected.length, "could not cycle through entire token list" + " using the 'hasPrevious' and 'previous' methods");
assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));
assertEquals(expected[i], tokens[i],"token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'");
assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));
assertEquals(expected[i], tokens[i],"token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'");
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("c", tok.next());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("c", tok.next());
assertEquals("a", tok.next());
assertEquals("b\u0001", tok.next());
assertEquals("c", tok.next());
assertEquals("a", tok.next());
assertEquals("\"b\"", tok.next());
assertEquals("c", tok.next());
assertEquals("a", tok.next());
assertEquals("b'", tok.next());
assertEquals("c", tok.next());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("c", tok.next());
assertEquals("a:b:c", tok.next());
assertEquals("a", tok.next());
assertEquals("", tok.next());
assertEquals("b", tok.next());
assertEquals("c", tok.next());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("c", tok.next());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("c", tok.next());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("a", tok.next());
assertEquals("b'c", tok.next());
assertEquals("a", tok.next());
assertEquals("b c", tok.next());
assertEquals("d", tok.next());
assertEquals("a", tok.next());
assertEquals("bxc", tok.next());
assertEquals("d", tok.next());
assertEquals("a", tok.next());
assertEquals("b\"c:d", tok.next());
assertEquals("a", tok.next());
assertEquals("There's a reason here", tok.next());
assertEquals("b", tok.next());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("a", tok.next());
assertEquals("bc", tok.next());
assertEquals("a", tok.next());
assertEquals("bc", tok.next());
assertEquals("a", tok.next());
assertEquals("  bc  ", tok.next());
assertEquals("  ", tok.next());
assertEquals("a", tok.next());
assertEquals("bIGNOREcd", tok.next());
assertEquals(Arrays.asList(array), list);
assertEquals(0, tokenizer.size());
assertEquals(tok, tok.reset(""));
assertEquals(tok, tok.reset(new char[0]));
assertEquals(tok, tok.setDelimiterChar(' '));
assertEquals(tok, tok.setDelimiterString(" "));
assertEquals(tok, tok.setDelimiterMatcher(null));
assertEquals(tok, tok.setQuoteMatcher(null));
assertEquals(tok, tok.setIgnoredMatcher(null));
assertEquals(tok, tok.setTrimmerMatcher(null));
assertEquals(tok, tok.setEmptyTokenAsNull(false));
assertEquals(tok, tok.setIgnoreEmptyTokens(false));
assertEquals("a", tokenizer.nextToken());
assertEquals("a", tokenizer.nextToken());
assertEquals("b", tokenizer.nextToken());
assertEquals("a", clonedTokenizer.nextToken());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1));
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1));
assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1));
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1));
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1));
assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1));
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("c", tok.next());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("c", tok.next());
assertEquals("d", tok.next());
assertEquals("e", tok.next());
assertEquals("abc", tok.next());
assertEquals(-1, tokenizer.previousIndex());
assertEquals(0, tokenizer.nextIndex());
assertEquals("A", tokenizer.nextToken());
assertEquals(1, tokenizer.nextIndex());
assertEquals("b", tokenizer.nextToken());
assertEquals(2, tokenizer.nextIndex());
assertEquals("c", tokenizer.nextToken());
assertEquals(3, tokenizer.nextIndex());
assertEquals(3, tokenizer.nextIndex());
assertEquals("c", tokenizer.previousToken());
assertEquals(2, tokenizer.nextIndex());
assertEquals("b", tokenizer.previousToken());
assertEquals(1, tokenizer.nextIndex());
assertEquals("A", tokenizer.previousToken());
assertEquals(0, tokenizer.nextIndex());
assertEquals(0, tokenizer.nextIndex());
assertEquals(-1, tokenizer.previousIndex());
assertEquals(3, tokenizer.size());
assertEquals("a", tkn.next());
assertEquals("b", tkn.next());
assertEquals("c", tkn.next());
assertEquals("x", tkn.next());
assertEquals("y", tkn.next());
assertEquals("c", tkn.next());
assertEquals("b", tkn.next());
assertEquals("a", tkn.next());
assertEquals("StrTokenizer[not tokenized yet]", tkn.toString());
assertEquals("StrTokenizer[a, b, c, d, e]", tkn.toString());
assertEquals(parser, composite.getParser(), "Parser get method incorrectly implemented");
assertEquals(formatter, composite.getFormatter(), "Formatter get method incorrectly implemented");
assertEquals(testString, c.format(c.parseObject("01032005")));
assertEquals(testString, c.reformat("01032005"));
assertEquals(pattern, emf.toPattern(), "TOPATTERN");
assertEquals(emf.format(new Object[] {"foo", "bar"}), "Lower: foo Upper: BAR");
assertEquals(emf.format(new Object[] {"Foo", "Bar"}), "Lower: foo Upper: BAR");
assertEquals(emf.format(new Object[] {"FOO", "BAR"}), "Lower: foo Upper: BAR");
assertEquals(emf.format(new Object[] {"FOO", "bar"}), "Lower: foo Upper: BAR");
assertEquals(emf.format(new Object[] {"foo", "BAR"}), "Lower: foo Upper: BAR");
assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"}));
assertEquals(emf.format(new Object[] {"there", 3, "great"}), "Hi there, got 3, GREAT!");
assertEquals("Message without placeholders {}", emf.format(new Object[] {"DUMMY"}));
assertEquals("Message with placeholder 'DUMMY'", emf2.format(new Object[] {"DUMMY"}));
assertEquals(expectedPattern, emf.toPattern(), "pattern comparison for locale " + locale);
assertEquals(expected.toString(), emf.format(args), String.valueOf(locale));
//        assertPatterns(null, pattern, emf.toPattern());
//            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"}));
//            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"}));
//            assertPatterns(null, pattern, emf.toPattern());
//                assertEquals(lowExpected,  emf.format(lowArgs));
//                assertEquals(highExpected, emf.format(highArgs));
assertEquals(dateDefault.format(args), dateShort.format(args), "overridden date,short format");
assertEquals(pattern, dateShort.toPattern(), "overridden date,short pattern");
assertEquals(emf, emf, "same, equals()");
assertEquals(emf.hashCode(), emf.hashCode(), "same, hashcode()");
assertEquals(emf, other, "equal, equals()");
assertEquals(emf.hashCode(), other.hashCode(), "equal, hashcode()");
assertNotEquals(emf, other, "class, equals()");
assertEquals(emf.hashCode(), other.hashCode(), "class, hashcode()"); // same hashcode
assertNotEquals(emf, other, "pattern, equals()");
assertNotEquals(emf.hashCode(), other.hashCode(), "pattern, hashcode()");
assertNotEquals(emf, other, "registry, equals()");
assertNotEquals(emf.hashCode(), other.hashCode(), "registry, hashcode()");
assertNotEquals(emf, other, "locale, equals()");
assertEquals(emf.hashCode(), other.hashCode(), "locale, hashcode()"); // same hashcode
assertEquals(mf.format(args), emf.format(args), "format "    + buffer.toString());
assertEquals(mf.toPattern(), emf.toPattern(), "toPattern " + buffer.toString());
assertEquals("The quick brown fox jumps over the moon.", sub.replace("The ${animal} jumps over the ${target}."));
assertEquals("GBP12.50 charged", sub.replace("${code}${amount} charged"));
assertEquals("Amount is GBP12.50", sub.replace("Amount is ${code}${amount}"));
assertEquals("${animal} jumps", sub.replace("The ${animal} jumps over the ${target}.", 4, 15));
assertEquals("The mouse jumps over the lazy dog.",sub.replace("The ${animal.${species}} jumps over the ${target}."),"Wrong result (1)");
assertEquals("The fox jumps over the lazy dog.",sub.replace("The ${animal.${species}} jumps over the ${target}."),"Wrong result (2)");
assertEquals("The fox jumps over the lazy dog.",sub.replace("The ${unknown.animal.${unknown.species:-1}:-fox} jumps over the ${unknown.target:-lazy dog}."),"Wrong result (3)");
assertEquals("The ${animal.${species}} jumps over the lazy dog.",sub.replace("The ${animal.${species}} jumps over the ${target}."),"Wrong result (1)");
assertEquals("The ${animal.${species:-1}} jumps over the lazy dog.",sub.replace("The ${animal.${species:-1}} jumps over the ${target}."),"Wrong result (2)");
assertEquals("The white mouse jumps over the lazy dog.",sub.replace("The ${animal.${species.${color}}} jumps over the ${target}."),"Wrong result (1)");
assertEquals("The brown fox jumps over the lazy dog.",sub.replace("The ${animal.${species.${unknownColor:-brown}}} jumps over the ${target}."),"Wrong result (2)");
assertEquals("The fox jumps over the lazy dog. 1234567890.",sub.replace("The ${animal} jumps over the lazy ${target}. ${undefined.number:-1234567890}."));
assertEquals("The fox jumps over the lazy dog. 1234567890.",sub.replace("The ${animal} jumps over the lazy ${target}. ${undefined.number?:1234567890}."));
assertEquals("The fox jumps over the lazy dog. 1234567890.",sub.replace("The ${animal} jumps over the lazy ${target}. ${undefined.number||1234567890}."));
assertEquals("The fox jumps over the lazy dog. 1234567890.",sub.replace("The ${animal} jumps over the lazy ${target}. ${undefined.number!1234567890}."));
assertEquals("The fox jumps over the lazy dog. ${undefined.number!1234567890}.",sub.replace("The ${animal} jumps over the lazy ${target}. ${undefined.number!1234567890}."));
assertEquals("The fox jumps over the lazy dog. ${undefined.number!1234567890}.",sub.replace("The ${animal} jumps over the lazy ${target}. ${undefined.number!1234567890}."));
assertEquals("name", variableName);
assertEquals("Hi jakarta!", builder.toString());
assertEquals("Hi ${name}", sub.replace("Hi ${name}"));
assertEquals("Hi < commons", sub.replace("Hi $< <name>"));
assertEquals("Hi < commons", sub.replace("Hi !< <name>"));
assertEquals("Hi < commons", sub.replace("Hi !< <name2||commons>"));
assertSame(matcher, sub.getVariablePrefixMatcher());
assertSame(matcher, sub.getVariablePrefixMatcher());
assertSame(matcher, sub.getVariableSuffixMatcher());
assertSame(matcher, sub.getVariableSuffixMatcher());
assertSame(matcher, sub.getValueDelimiterMatcher());
assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map));
assertEquals("Hi commons!", StrSubstitutor.replace("Hi <name>!", map, "<", ">"));
assertEquals(buf.toString(), StrSubstitutor.replaceSystemProperties("Hi ${user.name}, you are "+ "working with ${os.name}, your home "+ "directory is ${user.home}."));
assertEquals(expected, actual);
assertEquals("It works!", StrSubstitutor.replace(org, props));
assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@"));
assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@"));
assertEquals("value ${escaped}", sub.replace(org));
assertEquals("value $${escaped}", sub.replace(org));
assertEquals(expectedResult, sub.replace(replaceTemplate));
assertEquals(expectedShortResult, sub.replace(replaceTemplate, 1, replaceTemplate.length() - 2));
assertEquals(expectedResult, sub.replace(chars));
assertEquals(expectedShortResult, sub.replace(chars, 1, chars.length - 2));
assertEquals(expectedResult, sub.replace(buf));
assertEquals(expectedShortResult, sub.replace(buf, 1, buf.length() - 2));
assertEquals(expectedResult, sub.replace(builder));
assertEquals(expectedShortResult, sub.replace(builder, 1, builder.length() - 2));
assertEquals(expectedResult, sub.replace(bld));
assertEquals(expectedShortResult, sub.replace(bld, 1, bld.length() - 2));
assertEquals(expectedResult, sub.replace(obj));
assertEquals(expectedResult, buf.toString());
assertEquals(expectedResult, buf.toString());  // expect full result as remainder is untouched
assertEquals(expectedResult, builder.toString());
assertEquals(expectedResult, builder.toString());  // expect full result as remainder is untouched
assertEquals(expectedResult, bld.toString());
assertEquals(expectedResult, bld.toString());  // expect full result as remainder is untouched
assertEquals(replaceTemplate, sub.replace(replaceTemplate));
assertEquals(replaceTemplate, bld.toString());
assertEquals("---" + SEP + "+++", sb.toString());
assertEquals("---#" + SEP, sb.toString());
assertEquals("", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("NULLNULL", sb.toString());
assertEquals("NULLNULLfoo", sb.toString());
assertEquals("NULLNULLfooNULL", sb.toString());
assertEquals("NULLNULLfooNULL", sb.toString());
assertEquals("NULLNULLfooNULLbar", sb.toString());
assertEquals("NULLNULLfooNULLbarNULL", sb.toString());
assertEquals("NULLNULLfooNULLbarNULLbaz", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foobaz", sb.toString());
assertEquals("foobazyes", sb.toString());
assertEquals("foobazyesSeq", sb.toString());
assertEquals("foobazyesSeqbld", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foobar", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foobar", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foobar", sb.toString());
assertEquals("foobarard", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foobar", sb.toString());
assertEquals("foobarard", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foobar", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foobar", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foobar", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foobar", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foobar", sb.toString());
assertEquals("true", sb.toString());
assertEquals("truefalse", sb.toString());
assertEquals("truefalse!", sb.toString());
assertEquals("0", sb.toString());
assertEquals("01", sb.toString());
assertEquals("012.3", sb.toString());
assertEquals("012.34.5", sb.toString());
assertEquals("Hello Alice" + SEP, sb.toString());
assertEquals(2, count[0]);  // appendNewLine() calls append(String)
assertEquals("" + SEP, sb.toString());
assertEquals(SEP + "foo" + SEP, sb.toString());
assertEquals(SEP + "foo" + SEP + "6" + SEP, sb.toString());
assertEquals("foo" + SEP, sb.toString());
assertEquals(2, count[0]);  // appendNewLine() calls append(String)
assertEquals("foo" + SEP, sb.toString());
assertEquals("foo" + SEP, sb.toString());
assertEquals("foo" + SEP, sb.toString());
assertEquals("foo" + SEP, sb.toString());
assertEquals("foo" + SEP, sb.toString());
assertEquals("foo" + SEP, sb.toString());
assertEquals("foo" + SEP, sb.toString());
assertEquals("foo" + SEP, sb.toString());
assertEquals("foo" + SEP, sb.toString());
assertEquals("true" + SEP, sb.toString());
assertEquals("false" + SEP, sb.toString());
assertEquals("0" + SEP, sb.toString());
assertEquals("1" + SEP, sb.toString());
assertEquals("2.3" + SEP, sb.toString());
assertEquals("4.5" + SEP, sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo-", sb.toString());
assertEquals("foo-----------------", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("o", sb.toString());
assertEquals("oo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("-foo", sb.toString());
assertEquals("-------foo", sb.toString());
assertEquals("-null", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("3", sb.toString());
assertEquals("23", sb.toString());
assertEquals("123", sb.toString());
assertEquals("-123", sb.toString());
assertEquals("-------123", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("f", sb.toString());
assertEquals("fo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo-", sb.toString());
assertEquals("foo-------", sb.toString());
assertEquals("null-", sb.toString());
assertEquals("f", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("1", sb.toString());
assertEquals("12", sb.toString());
assertEquals("123", sb.toString());
assertEquals("123-", sb.toString());
assertEquals("123-------", sb.toString());
assertEquals("Hi", sb.toString());
assertEquals("Hi", sb.toString());
assertEquals("Hi Alice", sb.toString());
assertEquals(expected, sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("foo,bar,baz", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("foo,,baz", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("foo,bar,baz", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("foo,,baz", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("foo,bar,baz", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("foo,,baz", sb.toString());
assertEquals("foo,null,baz", sb.toString());
assertEquals("foo,null,baz", sb.toString());
assertEquals("", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo,", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo,", sb.toString());
assertEquals(String.valueOf(startSeparator) + foo + standardSeparator, sb.toString());
assertEquals("", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo,", sb.toString());
assertEquals("foo,", sb.toString());
assertEquals("", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo,", sb.toString());
assertEquals("foo,", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("truebarbaz", sb.toString());
assertEquals("falsetruebarbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("!barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("0barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("1barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("2.3barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("4.5barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("nullbarbaz", sb.toString());
assertEquals("foonullbarbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("nullbarbaz", sb.toString());
assertEquals("foonullbarbaz", sb.toString());
assertEquals("nullfoonullbarbaz", sb.toString());
assertEquals("nullnullfoonullbarbaz", sb.toString());
assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1).toString());
assertEquals("fo", FormattableUtils.append("foo", new Formatter(), 0, -1, 2).toString());
assertEquals(" foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1).toString());
assertEquals("   foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1).toString());
assertEquals(" fo", FormattableUtils.append("foo", new Formatter(), 0, 3, 2).toString());
assertEquals("   fo", FormattableUtils.append("foo", new Formatter(), 0, 5, 2).toString());
assertEquals("foo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1).toString());
assertEquals("foo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1).toString());
assertEquals("fo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2).toString());
assertEquals("fo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2).toString());
assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, pad).toString());
assertEquals("fo", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, pad).toString());
assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, pad).toString());
assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, pad).toString());
assertEquals("_fo", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, pad).toString());
assertEquals("___fo", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, pad).toString());
assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, pad).toString());
assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, pad).toString());
assertEquals("fo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, pad).toString());
assertEquals("fo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, pad).toString());
assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, "*").toString());
assertEquals("f*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, "*").toString());
assertEquals(" foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, "*").toString());
assertEquals("   foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, "*").toString());
assertEquals(" f*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, "*").toString());
assertEquals("   f*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, "*").toString());
assertEquals("foo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, "*").toString());
assertEquals("foo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, "*").toString());
assertEquals("f* ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, "*").toString());
assertEquals("f*   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, "*").toString());
assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, "+*").toString());
assertEquals("+*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, "+*").toString());
assertEquals(" foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, "+*").toString());
assertEquals("   foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, "+*").toString());
assertEquals(" +*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, "+*").toString());
assertEquals("   +*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, "+*").toString());
assertEquals("foo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, "+*").toString());
assertEquals("foo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, "+*").toString());
assertEquals("+* ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, "+*").toString());
assertEquals("+*   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, "+*").toString());
assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, '_', "*").toString());
assertEquals("f*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, '_', "*").toString());
assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, '_', "*").toString());
assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, '_', "*").toString());
assertEquals("_f*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, '_', "*").toString());
assertEquals("___f*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, '_', "*").toString());
assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, '_', "*").toString());
assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, '_', "*").toString());
assertEquals("f*_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, '_', "*").toString());
assertEquals("f*___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', "*").toString());
assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, '_', "+*").toString());
assertEquals("+*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, '_', "+*").toString());
assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, '_', "+*").toString());
assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, '_', "+*").toString());
assertEquals("_+*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, '_', "+*").toString());
assertEquals("___+*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, '_', "+*").toString());
assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, '_', "+*").toString());
assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, '_', "+*").toString());
assertEquals("+*_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, '_', "+*").toString());
assertEquals("+*___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', "+*").toString());
assertSame(sb, sb.setNewLineText(null));
assertSame(sb, sb.setNullText(null));
assertSame(sb, sb.setLength(1));
assertSame(sb, sb.ensureCapacity(0));
assertSame(sb, sb.reverse());
assertEquals("Test 123", sb.toString());
assertEquals("Test 123", sb.toString());
assertEquals("Test 123", sb.toString());
assertEquals("#", sb.getNewLineText());
assertEquals("", sb.getNewLineText());
assertEquals("null", sb.getNullText());
assertEquals("NULL", sb.getNullText());
assertEquals("1234567890123456", sb.toString());
assertEquals("1234567890123456\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", sb.toString());
assertEquals("He", sb.toString());
assertEquals("He", sb.toString());
assertEquals("He\0", sb.toString());
assertEquals("bar", sb.toString());
assertEquals("bc", sb.toString());
assertEquals(0, a.length, "toCharArray() result is too large");
assertEquals(5, a.length, "toCharArray() result incorrect length");
assertArrayEquals("junit".toCharArray(), a, "toCharArray() result does not match");
assertEquals(5, a.length, "toCharArray(int, int) result incorrect length");
assertArrayEquals("junit".toCharArray(), a, "toCharArray(int, int) result does not match");
assertEquals(4, a.length, "toCharArray(int, int) result incorrect length");
assertArrayEquals("juni".toCharArray(), a, "toCharArray(int, int) result does not match");
assertEquals(4, a.length, "toCharArray(int, int) result incorrect length");
assertArrayEquals("juni".toCharArray(), a, "toCharArray(int, int) result does not match");
assertArrayEquals("junit".toCharArray(), a);
assertEquals("bc", sb.toString());
assertEquals("b", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("bcbccb", sb.toString());
assertEquals("bbb", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("abcba", sb.toString());
assertEquals("bcba", sb.toString());
assertEquals("bba", sb.toString());
assertEquals("ba", sb.toString());
assertEquals("", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("bcbccb", sb.toString());
assertEquals("bbb", sb.toString());
assertEquals("", sb.toString());
assertEquals("acba", sb.toString());
assertEquals("", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("bcbccba", sb.toString());
assertEquals("bbccba", sb.toString());
assertEquals("bccba", sb.toString());
assertEquals("abccba", sb.toString());
assertEquals("", sb.toString());
assertEquals("A0xA1A2yA3", sb.toString());
assertEquals("xy", sb.toString());
assertEquals("Ax1", sb.toString());
assertEquals("", sb.toString());
assertEquals("A0xA1A2yA3", sb.toString());
assertEquals("xA1A2yA3", sb.toString());
assertEquals("Ax1", sb.toString());
assertEquals("", sb.toString());
assertEquals("dbc", sb.toString());
assertEquals("aaabc", sb.toString());
assertEquals("bc", sb.toString());
assertEquals("b", sb.toString());
assertEquals("btext", sb.toString());
assertEquals("text", sb.toString());
assertEquals("anytext", sb1.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("dbcbccbd", sb.toString());
assertEquals("dececced", sb.toString());
assertEquals("defeffed", sb.toString());
assertEquals("defeffed", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("dbcbccba", sb.toString());
assertEquals("decbccba", sb.toString());
assertEquals("defbccba", sb.toString());
assertEquals("defbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("dbcbccbd", sb.toString());
assertEquals("bcbccb", sb.toString());
assertEquals("b-c-", sb.toString());
assertEquals("axbxcxbxa", sb.toString());
assertEquals("xbxxbx", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("dbcbccba", sb.toString());
assertEquals("bcbccba", sb.toString());
assertEquals("b-ccba", sb.toString());
assertEquals("axbxcba", sb.toString());
assertEquals("xbxb", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("dbcbccbd", sb.toString());
assertEquals("bcbccb", sb.toString());
assertEquals("b-c-", sb.toString());
assertEquals("axbxcxbxa", sb.toString());
assertEquals("xbxxbx", sb.toString());
assertEquals("***-******-***", sb.toString());
assertEquals("Dear 012345678901234567, hello 012345678901234567.", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("dbcbccba", sb.toString());
assertEquals("bcbccba", sb.toString());
assertEquals("b-ccba", sb.toString());
assertEquals("axbxcba", sb.toString());
assertEquals("xbxb", sb.toString());
assertEquals("***-A2A3-A4", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("xbcbccbx", sb.toString());
assertEquals("xbxcxx", sb.toString());
assertEquals("***-******-***", sb.toString());
assertEquals("", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("ab-c-a", sb.toString());
assertEquals("ab+++c+++a", sb.toString());
assertEquals("abca", sb.toString());
assertEquals("abca", sb.toString());
assertEquals("-x--y-", sb.toString());
assertEquals("aax--y-", sb.toString());
assertEquals("aax--y-", sb.toString());
assertEquals("aax--y-", sb.toString());
assertEquals("aaxa-ay-", sb.toString());
assertEquals("aaxaa-y-", sb.toString());
assertEquals("aaxaaaay-", sb.toString());
assertEquals("aaxaaaay-", sb.toString());
assertEquals("aaxaaaay-", sb.toString());
assertEquals("aaxaaaayaa", sb.toString());
assertEquals("aaxaaaayaa", sb.toString());
assertEquals("aaxaaaayaa", sb1.toString());
assertEquals("aaxaaaayaa", sb2.toString());
assertEquals("aaxaaaayaa", sb.toString());
assertEquals("-xaaaayaa", sb.toString());
assertEquals("-xaaaayaa", sb.toString());
assertEquals("-xaaaayaa", sb.toString());
assertEquals("-x-aayaa", sb.toString());
assertEquals("-x-aayaa", sb.toString());
assertEquals("-x--yaa", sb.toString());
assertEquals("-x--yaa", sb.toString());
assertEquals("-x--yaa", sb.toString());
assertEquals("-x--y-", sb.toString());
assertEquals("-x--y-", sb.toString());
assertEquals("aaxaaaayaa", sb1.toString());
assertEquals("-x--y-", sb.toString());
assertEquals("aaxaaaayaa", sb.toString());
assertEquals("-xaaaayaa", sb.toString());
assertEquals("-x-aayaa", sb.toString());
assertEquals("-x--yaa", sb.toString());
assertEquals("-x--y-", sb.toString());
assertEquals("-x--y-", sb.toString());
assertEquals("", sb.reverse().toString());
assertEquals("eurt", sb.reverse().toString());
assertEquals("true", sb.reverse().toString());
assertEquals("", sb.reverse().toString());
assertEquals("", sb.trim().toString());
assertEquals("a b c", sb.trim().toString());
assertEquals("a b c", sb.trim().toString());
assertEquals("a b c", sb.trim().toString());
assertEquals("a b c", sb.trim().toString());
assertEquals ("hello", sb.subSequence(0, 5));
assertEquals ("hello goodbye".subSequence(0, 6), sb.subSequence(0, 6));
assertEquals ("goodbye", sb.subSequence(6, 13));
assertEquals ("hello goodbye".subSequence(6, 13), sb.subSequence(6, 13));
assertEquals ("goodbye", sb.substring(6));
assertEquals ("hello goodbye".substring(6), sb.substring(6));
assertEquals ("hello goodbye", sb.substring(0));
assertEquals ("hello goodbye".substring(0), sb.substring(0));
assertEquals ("hello", sb.substring(0, 5));
assertEquals ("hello goodbye".substring(0, 6), sb.substring(0, 6));
assertEquals ("goodbye", sb.substring(6, 13));
assertEquals ("hello goodbye".substring(6, 13), sb.substring(6, 13));
assertEquals ("goodbye", sb.substring(6, 20));
assertEquals("goodbye", sb.midString(6, 7));
assertEquals("hello", sb.midString(0, 5));
assertEquals("hello", sb.midString(-5, 5));
assertEquals("", sb.midString(0, -1));
assertEquals("", sb.midString(20, 2));
assertEquals("hello", sb.midString(14, 22));
assertEquals("right", sb.rightString(5));
assertEquals("", sb.rightString(0));
assertEquals("", sb.rightString(-5));
assertEquals("left right", sb.rightString(15));
assertEquals("left", sb.leftString(4));
assertEquals("", sb.leftString(0));
assertEquals("", sb.leftString(-5));
assertEquals("left right", sb.leftString(15));
assertEquals("abab".indexOf('a'), sb.indexOf('a'));
assertEquals("abab".indexOf('b'), sb.indexOf('b'));
assertEquals("abab".indexOf('a', 1), sb.indexOf('a', 1));
assertEquals("abab".indexOf('b', 2), sb.indexOf('b', 2));
assertEquals ("abab".lastIndexOf('a'), sb.lastIndexOf('a'));
assertEquals ("abab".lastIndexOf('b'), sb.lastIndexOf('b'));
assertEquals("abab".lastIndexOf('a', 1), sb.lastIndexOf('a', 1));
assertEquals("abab".lastIndexOf('b', 2), sb.lastIndexOf('b', 2));
assertEquals(0, sb.indexOf("a"));
assertEquals("abab".indexOf("a"), sb.indexOf("a"));
assertEquals(0, sb.indexOf("ab"));
assertEquals("abab".indexOf("ab"), sb.indexOf("ab"));
assertEquals(1, sb.indexOf("b"));
assertEquals("abab".indexOf("b"), sb.indexOf("b"));
assertEquals(1, sb.indexOf("ba"));
assertEquals("abab".indexOf("ba"), sb.indexOf("ba"));
assertEquals(-1, sb.indexOf("z"));
assertEquals(0, sb.indexOf("a", -1));
assertEquals(0, sb.indexOf("a", 0));
assertEquals(2, sb.indexOf("a", 1));
assertEquals(2, sb.indexOf("a", 2));
assertEquals(-1, sb.indexOf("a", 3));
assertEquals(-1, sb.indexOf("a", 4));
assertEquals(-1, sb.indexOf("a", 5));
assertEquals(-1, sb.indexOf("abcdef", 0));
assertEquals(0, sb.indexOf("", 0));
assertEquals(1, sb.indexOf("", 1));
assertEquals ("abab".indexOf("a", 1), sb.indexOf("a", 1));
assertEquals(2, sb.indexOf("ab", 1));
assertEquals("abab".indexOf("ab", 1), sb.indexOf("ab", 1));
assertEquals(3, sb.indexOf("b", 2));
assertEquals("abab".indexOf("b", 2), sb.indexOf("b", 2));
assertEquals(1, sb.indexOf("ba", 1));
assertEquals("abab".indexOf("ba", 2), sb.indexOf("ba", 2));
assertEquals(-1, sb.indexOf("z", 2));
assertEquals(2, sb.indexOf("za", 0));
assertEquals(-1, sb.indexOf("za", 3));
assertEquals(2, sb.lastIndexOf("a"));
assertEquals("abab".lastIndexOf("a"), sb.lastIndexOf("a"));
assertEquals(2, sb.lastIndexOf("ab"));
assertEquals("abab".lastIndexOf("ab"), sb.lastIndexOf("ab"));
assertEquals(3, sb.lastIndexOf("b"));
assertEquals("abab".lastIndexOf("b"), sb.lastIndexOf("b"));
assertEquals(1, sb.lastIndexOf("ba"));
assertEquals("abab".lastIndexOf("ba"), sb.lastIndexOf("ba"));
assertEquals(-1, sb.lastIndexOf("z"));
assertEquals(-1, sb.lastIndexOf("a", -1));
assertEquals(0, sb.lastIndexOf("a", 0));
assertEquals(0, sb.lastIndexOf("a", 1));
assertEquals(2, sb.lastIndexOf("a", 2));
assertEquals(2, sb.lastIndexOf("a", 3));
assertEquals(2, sb.lastIndexOf("a", 4));
assertEquals(2, sb.lastIndexOf("a", 5));
assertEquals(-1, sb.lastIndexOf("abcdef", 3));
assertEquals("abab".lastIndexOf("", 3), sb.lastIndexOf("", 3));
assertEquals("abab".lastIndexOf("", 1), sb.lastIndexOf("", 1));
assertEquals("abab".lastIndexOf("a", 1), sb.lastIndexOf("a", 1));
assertEquals(0, sb.lastIndexOf("ab", 1));
assertEquals("abab".lastIndexOf("ab", 1), sb.lastIndexOf("ab", 1));
assertEquals(1, sb.lastIndexOf("b", 2));
assertEquals("abab".lastIndexOf("b", 2), sb.lastIndexOf("b", 2));
assertEquals(1, sb.lastIndexOf("ba", 2));
assertEquals("abab".lastIndexOf("ba", 2), sb.lastIndexOf("ba", 2));
assertEquals(-1, sb.lastIndexOf("z", 2));
assertEquals(2, sb.lastIndexOf("za", sb.length()));
assertEquals(-1, sb.lastIndexOf("za", 1));
assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a')));
assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a')));
assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b')));
assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher()));
assertEquals(4, sb.indexOf(StrMatcher.charMatcher('d')));
assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher()));
assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));
assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 0));
assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), -2));
assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), 0));
assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));
assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 20));
assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), -1));
assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 0));
assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 1));
assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 2));
assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 3));
assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 4));
assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 5));
assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 6));
assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), -2));
assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 0));
assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 2));
assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 4));
assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 20));
assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher(), 0));
assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a')));
assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a')));
assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b')));
assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher()));
assertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher('d')));
assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher()));
assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));
assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));
assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1));
assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2));
assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));
assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));
assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 20));
assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), -1));
assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 0));
assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 1));
assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 2));
assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 3));
assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 4));
assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 5));
assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 6));
assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), -2));
assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), 0));
assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 2));
assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 4));
assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 20));
assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher(), 0));
assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 6)); // A matches, 1 is outside bounds
assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 23)); // A matches, 2 is outside bounds
assertEquals("a", tokens1[0]);
assertEquals("b", tokens1[1]);
assertEquals("a", tokens2[0]);
assertEquals("b", tokens2[1]);
assertEquals("a", t.next());
assertEquals("b", t.next());
assertEquals("a", tokens3[0]);
assertEquals("b", tokens3[1]);
assertEquals("c", tokens3[2]);
assertEquals("d", tokens3[3]);
assertEquals("a", t.next());
assertEquals("b", t.next());
assertEquals("c", t.next());
assertEquals("d", t.next());
assertEquals("a b c d ", t.getContent());
assertEquals(9, reader.read(buf));
assertEquals("some text", new String(buf, 0, 9));
assertEquals(-1, reader.read());
assertEquals('s', reader.read());
assertEquals(3, reader.read(array, 0, 3));
assertEquals('o', array[0]);
assertEquals('m', array[1]);
assertEquals('e', array[2]);
assertEquals(1, reader.read(array, 1, 1));
assertEquals('o', array[0]);
assertEquals('o', array[1]);
assertEquals('e', array[2]);
assertEquals(' ', reader.read());
assertEquals(9, r.read(array, 0, 30));
assertEquals("basel", sb.toString());
assertEquals("baselin", sb.toString());
assertEquals("baseliner", sb.toString());
assertEquals("baseliner rout", sb.toString());
assertEquals("baseliner routing", sb.toString());
assertEquals("baseliner routing", sb.toString());
assertEquals("baseliner routing", sb.toString());
assertEquals("baseliner routing hi", sb.toString());
assertEquals("based", sb.toString());
assertNotEquals(sb1, Integer.valueOf(1));
assertNotEquals("abc", sb1);
assertEquals("abc", sb.toString());
assertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString());
assertEquals(new StringBuffer("junit").toString(), sb.toStringBuffer().toString());
assertEquals(new StringBuilder().toString(), sb.toStringBuilder().toString());
assertEquals(new StringBuilder("junit").toString(), sb.toStringBuilder().toString());
assertEquals("\nDo more stuff\neven more stuff\n", sb.toString());
assertEquals(-1, sb.indexOf("three"));
assertEquals(-1, sb.indexOf('h'), "The indexOf(char) method is looking beyond the end of the string");
assertEquals("**********", sb.toString(), "Failed to invoke appendFixedWidthPadRight correctly");
assertEquals("**********", sb.toString(), "Failed to invoke appendFixedWidthPadLeft correctly");
assertEquals("0123456789", sb1.toString());
assertEquals("12345678", sb2.toString());
assertEquals("Test 1234567890", writer.toString());
assertEquals("Test 1234567890", builder.toString());
assertEquals("Test 1234567890", buffer.toString());
assertEquals("Test 1234567890", buffer.toString());
Assertions.assertEquals(Charset.defaultCharset(), Charsets.toCharset((Charset) null));
Assertions.assertEquals(Charset.defaultCharset(), Charsets.toCharset(Charset.defaultCharset()));
Assertions.assertEquals(StandardCharsets.UTF_8, Charsets.toCharset(StandardCharsets.UTF_8));
Assertions.assertEquals(Charset.defaultCharset(), Charsets.toCharset((String) null));
Assertions.assertEquals(Charset.defaultCharset(), Charsets.toCharset(Charset.defaultCharset().name()));
Assertions.assertEquals(StandardCharsets.UTF_8, Charsets.toCharset("UTF-8"));
Assertions.assertEquals(Charset.defaultCharset().name(), Charsets.toCharsetName((String) null));
Assertions.assertEquals("UTF-8", Charsets.toCharsetName("UTF-8"));
assertEquals("", StringUtils.substring("", 0));
assertEquals("", StringUtils.substring("", 2));
assertEquals("", StringUtils.substring(SENTENCE, 80));
assertEquals("abc", StringUtils.substring("abc", -4));
assertEquals("abc", StringUtils.substring("abc", -3));
assertEquals("bc", StringUtils.substring("abc", -2));
assertEquals("c", StringUtils.substring("abc", -1));
assertEquals("abc", StringUtils.substring("abc", 0));
assertEquals("bc", StringUtils.substring("abc", 1));
assertEquals("c", StringUtils.substring("abc", 2));
assertEquals("", StringUtils.substring("abc", 3));
assertEquals("", StringUtils.substring("abc", 4));
assertEquals("", StringUtils.substring("", 0, 0));
assertEquals("", StringUtils.substring("", 1, 2));
assertEquals("", StringUtils.substring("", -2, -1));
assertEquals("", StringUtils.substring(SENTENCE, 8, 6));
assertEquals("o", StringUtils.substring(SENTENCE, -9, 3));
assertEquals("o", StringUtils.substring(SENTENCE, -9, -8));
assertEquals("", StringUtils.substring(SENTENCE, 2, 2));
assertEquals("b", StringUtils.substring("abc", -2, -1));
assertEquals("", StringUtils.left("", -1));
assertEquals("", StringUtils.left("", 0));
assertEquals("", StringUtils.left("", 2));
assertEquals("", StringUtils.left(FOOBAR, -1));
assertEquals("", StringUtils.left(FOOBAR, 0));
assertEquals("", StringUtils.right("", -1));
assertEquals("", StringUtils.right("", 0));
assertEquals("", StringUtils.right("", 2));
assertEquals("", StringUtils.right(FOOBAR, -1));
assertEquals("", StringUtils.right(FOOBAR, 0));
assertEquals("", StringUtils.mid("", 0, -1));
assertEquals("", StringUtils.mid("", 0, 0));
assertEquals("", StringUtils.mid("", 0, 2));
assertEquals("", StringUtils.mid(FOOBAR, 3, -1));
assertEquals("", StringUtils.mid(FOOBAR, 3, 0));
assertEquals("b", StringUtils.mid(FOOBAR, 3, 1));
assertEquals("", StringUtils.mid(FOOBAR, 9, 3));
assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", 'X'));
assertEquals("", StringUtils.substringBefore("", 0));
assertEquals("", StringUtils.substringBefore("", 'X'));
assertEquals("foo", StringUtils.substringBefore("foo", 0));
assertEquals("foo", StringUtils.substringBefore("foo", 'b'));
assertEquals("f", StringUtils.substringBefore("foot", 'o'));
assertEquals("", StringUtils.substringBefore("abc", 'a'));
assertEquals("a", StringUtils.substringBefore("abcba", 'b'));
assertEquals("ab", StringUtils.substringBefore("abc", 'c'));
assertEquals("abc", StringUtils.substringBefore("abc", 0));
assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX"));
assertEquals("", StringUtils.substringBefore("", null));
assertEquals("", StringUtils.substringBefore("", ""));
assertEquals("", StringUtils.substringBefore("", "XX"));
assertEquals("foo", StringUtils.substringBefore("foo", null));
assertEquals("foo", StringUtils.substringBefore("foo", "b"));
assertEquals("f", StringUtils.substringBefore("foot", "o"));
assertEquals("", StringUtils.substringBefore("abc", "a"));
assertEquals("a", StringUtils.substringBefore("abcba", "b"));
assertEquals("ab", StringUtils.substringBefore("abc", "c"));
assertEquals("", StringUtils.substringBefore("abc", ""));
assertEquals("abc", StringUtils.substringBefore("abc", "X"));
assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX"));
assertEquals("", StringUtils.substringAfter("", null));
assertEquals("", StringUtils.substringAfter("", ""));
assertEquals("", StringUtils.substringAfter("", "XX"));
assertEquals("", StringUtils.substringAfter("foo", null));
assertEquals("ot", StringUtils.substringAfter("foot", "o"));
assertEquals("bc", StringUtils.substringAfter("abc", "a"));
assertEquals("cba", StringUtils.substringAfter("abcba", "b"));
assertEquals("", StringUtils.substringAfter("abc", "c"));
assertEquals("abc", StringUtils.substringAfter("abc", ""));
assertEquals("", StringUtils.substringAfter("abc", "d"));
assertEquals("", StringUtils.substringAfter("", 0));
assertEquals("", StringUtils.substringAfter("", 'X'));
assertEquals("", StringUtils.substringAfter("foo", 0));
assertEquals("ot", StringUtils.substringAfter("foot", 'o'));
assertEquals("bc", StringUtils.substringAfter("abc", 'a'));
assertEquals("cba", StringUtils.substringAfter("abcba", 'b'));
assertEquals("", StringUtils.substringAfter("abc", 'c'));
assertEquals("", StringUtils.substringAfter("abc", 'd'));
assertEquals("fooXXbar", StringUtils.substringBeforeLast("fooXXbarXXbaz", "XX"));
assertEquals("", StringUtils.substringBeforeLast("", null));
assertEquals("", StringUtils.substringBeforeLast("", ""));
assertEquals("", StringUtils.substringBeforeLast("", "XX"));
assertEquals("foo", StringUtils.substringBeforeLast("foo", null));
assertEquals("foo", StringUtils.substringBeforeLast("foo", "b"));
assertEquals("fo", StringUtils.substringBeforeLast("foo", "o"));
assertEquals("abc\r\n", StringUtils.substringBeforeLast("abc\r\n", "d"));
assertEquals("abc", StringUtils.substringBeforeLast("abcdabc", "d"));
assertEquals("abcdabc", StringUtils.substringBeforeLast("abcdabcd", "d"));
assertEquals("a", StringUtils.substringBeforeLast("abc", "b"));
assertEquals("abc ", StringUtils.substringBeforeLast("abc \n", "\n"));
assertEquals("a", StringUtils.substringBeforeLast("a", null));
assertEquals("a", StringUtils.substringBeforeLast("a", ""));
assertEquals("", StringUtils.substringBeforeLast("a", "a"));
assertEquals("baz", StringUtils.substringAfterLast("fooXXbarXXbaz", "XX"));
assertEquals("", StringUtils.substringAfterLast("", null));
assertEquals("", StringUtils.substringAfterLast("", ""));
assertEquals("", StringUtils.substringAfterLast("", "a"));
assertEquals("", StringUtils.substringAfterLast("foo", null));
assertEquals("", StringUtils.substringAfterLast("foo", "b"));
assertEquals("t", StringUtils.substringAfterLast("foot", "o"));
assertEquals("bc", StringUtils.substringAfterLast("abc", "a"));
assertEquals("a", StringUtils.substringAfterLast("abcba", "b"));
assertEquals("", StringUtils.substringAfterLast("abc", "c"));
assertEquals("", StringUtils.substringAfterLast("", "d"));
assertEquals("", StringUtils.substringAfterLast("abc", ""));
assertEquals("", StringUtils.substringAfterLast("", 0));
assertEquals("", StringUtils.substringAfterLast("", 'a'));
assertEquals("", StringUtils.substringAfterLast("foo", 0));
assertEquals("", StringUtils.substringAfterLast("foo", 'b'));
assertEquals("t", StringUtils.substringAfterLast("foot", 'o'));
assertEquals("bc", StringUtils.substringAfterLast("abc", 'a'));
assertEquals("a", StringUtils.substringAfterLast("abcba", 'b'));
assertEquals("", StringUtils.substringAfterLast("abc", 'c'));
assertEquals("", StringUtils.substringAfterLast("", 'd'));
assertEquals("", StringUtils.substringBetween("", ""));
assertEquals("", StringUtils.substringBetween("    ", " "));
assertEquals("", StringUtils.substringBetween("abc", ""));
assertEquals("bc", StringUtils.substringBetween("abca", "a"));
assertEquals("bc", StringUtils.substringBetween("abcabca", "a"));
assertEquals("bar", StringUtils.substringBetween("\nbar\n", "\n"));
assertEquals("", StringUtils.substringBetween("", "", ""));
assertEquals("", StringUtils.substringBetween("foo", "", ""));
assertEquals("", StringUtils.substringBetween("    ", " ", "  "));
assertEquals("bar", StringUtils.substringBetween("<foo>bar</foo>", "<foo>", "</foo>") );
assertEquals("abc", StringUtils.substringBetween("yabczyabcz", "y", "z"));
assertEquals("one", results[0]);
assertEquals("two", results[1]);
assertEquals("three", results[2]);
assertEquals("one", results[0]);
assertEquals("two", results[1]);
assertEquals("one", results[0]);
assertEquals("two", results[1]);
assertEquals("one", results[0]);
assertEquals("three", results[0]);
assertEquals("hello", results[0]);
assertEquals(0, StringUtils.countMatches("blah", null));
assertEquals(0, StringUtils.countMatches(null, "DD"));
assertEquals(0, StringUtils.countMatches("x", ""));
assertEquals(0, StringUtils.countMatches("", ""));
assertEquals(3,StringUtils.countMatches("one long someone sentence of one", "one"));
assertEquals(0,StringUtils.countMatches("one long someone sentence of one", "two"));
assertEquals(4,StringUtils.countMatches("oooooooooooo", "ooo"));
assertEquals(0, StringUtils.countMatches(null, "?"));
assertEquals(0, StringUtils.countMatches("", "?"));
assertEquals(0, StringUtils.countMatches("abba", null));
assertEquals(0, StringUtils.countMatches("abba", ""));
assertEquals(2, StringUtils.countMatches("abba", "a"));
assertEquals(1, StringUtils.countMatches("abba", "ab"));
assertEquals(0, StringUtils.countMatches("abba", "xxx"));
assertEquals(1, StringUtils.countMatches("ababa", "aba"));
assertEquals(5, StringUtils.countMatches("one long someone sentence of one", ' '));
assertEquals(6, StringUtils.countMatches("one long someone sentence of one", 'o'));
assertEquals(4, StringUtils.countMatches("oooooooooooo", "ooo"));
assertEquals(-1, intRange.elementCompareTo(5));
assertEquals(0, intRange.elementCompareTo(10));
assertEquals(0, intRange.elementCompareTo(15));
assertEquals(0, intRange.elementCompareTo(20));
assertEquals(1, intRange.elementCompareTo(25));
assertEquals(byteRange, byteRange);
assertEquals(byteRange, byteRange2);
assertEquals(byteRange2, byteRange2);
assertEquals(byteRange, byteRange);
assertEquals(byteRange2, byteRange2);
assertEquals(byteRange3, byteRange3);
assertNotEquals(byteRange2, byteRange3);
assertNotEquals("Ni!", byteRange2);
assertEquals(intRange.getMinimum(), intRange.fit(Integer.MIN_VALUE));
assertEquals(intRange.getMinimum(), intRange.fit(intRange.getMinimum()));
assertEquals(intRange.getMaximum(), intRange.fit(Integer.MAX_VALUE));
assertEquals(intRange.getMaximum(), intRange.fit(intRange.getMaximum()));
assertEquals(20d, doubleRange.getMaximum(), 0.00001d);
assertEquals(10d, doubleRange.getMinimum(), 0.00001d);
assertEquals(byteRange.hashCode(), byteRange2.hashCode());
assertNotEquals(byteRange.hashCode(), byteRange3.hashCode());
assertEquals(intRange.hashCode(), intRange.hashCode());
assertSame(intRange, intRange.intersectionWith(intRange));
assertSame(byteRange, byteRange.intersectionWith(byteRange));
assertSame(longRange, longRange.intersectionWith(longRange));
assertSame(floatRange, floatRange.intersectionWith(floatRange));
assertSame(doubleRange, doubleRange.intersectionWith(doubleRange));
assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15)));
assertEquals("[10..20]", str);
assertEquals("[-20..-10]", Range.between(-20, -10).toString());
assertEquals("From 10 to 20", str);
assertEquals('A', CharUtils.toChar("A"));
assertEquals('B', CharUtils.toChar("BA"));
assertEquals('A', CharUtils.toChar("A", 'X'));
assertEquals('B', CharUtils.toChar("BA", 'X'));
assertEquals('X', CharUtils.toChar("", 'X'));
assertEquals(Character.valueOf('a'), CharUtils.toCharacterObject('a'));
assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a'));
assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject('a'));
assertEquals(Character.valueOf('a'), CharUtils.toCharacterObject("a"));
assertEquals(Character.valueOf('a'), CharUtils.toCharacterObject("abc"));
assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject("a"));
assertEquals(0, CharUtils.toIntValue(Character.valueOf('0')));
assertEquals(3, CharUtils.toIntValue(Character.valueOf('3')));
assertEquals(0, CharUtils.toIntValue(Character.valueOf('0'), -1));
assertEquals(3, CharUtils.toIntValue(Character.valueOf('3'), -1));
assertEquals(-1, CharUtils.toIntValue(Character.valueOf('A'), -1));
assertEquals("a", CharUtils.toString('a'));
assertEquals("A", CharUtils.toString(CHARACTER_A));
assertEquals("\\u0041", CharUtils.unicodeEscaped('A'));
assertEquals("\\u004c", CharUtils.unicodeEscaped('L'));
assertEquals("\\u0999", CharUtils.unicodeEscaped((char) 0x999));
assertEquals("\\u1001", CharUtils.unicodeEscaped((char) 0x1001));
assertEquals("\\u0041", CharUtils.unicodeEscaped(CHARACTER_A));
assertEquals(ArrayUtils.INDEX_NOT_FOUND, toString.indexOf(nonIncludeField));
assertEquals(ArrayUtils.INDEX_NOT_FOUND, toString.indexOf(nonIncludeValue));
assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());
assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());
assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).appendSuper("Integer@8888[%NULL%]").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());
assertEquals(baseStr + "[%NULL%,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[%NULL%]").append("a", "hello").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) null).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());
assertEquals(baseStr + "[a=%NULL%]", new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals(baseStr + "[a=%Integer%]", new ToStringBuilder(base).append("a", i3, false).toString());
assertEquals(baseStr + "[a=%SIZE=0%]", new ToStringBuilder(base).append("a", Collections.emptyList(), false).toString());
assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", Collections.emptyList(), true).toString());
assertEquals(baseStr + "[a=%SIZE=1%]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), false).toString());
assertEquals(baseStr + "[a=[3]]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), true).toString());
assertEquals(baseStr + "[a=%SIZE=2%]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), false).toString());
assertEquals(baseStr + "[a=[3, 4]]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), true).toString());
assertEquals(baseStr + "[a=%SIZE=0%]", new ToStringBuilder(base).append("a", Collections.emptyMap(), false).toString());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", Collections.emptyMap(), true).toString());
assertEquals(baseStr + "[a=%SIZE=1%]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), false).toString());
assertEquals(baseStr + "[a={k=v}]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), true).toString());
assertEquals(baseStr + "[a=%SIZE=0%]", new ToStringBuilder(base).append("a", (Object) new Integer[0], false).toString());
assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", (Object) new Integer[0], true).toString());
assertEquals(baseStr + "[a=%SIZE=1%]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, false).toString());
assertEquals(baseStr + "[a=[3]]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, true).toString());
assertEquals(baseStr + "[a=%SIZE=2%]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, false).toString());
assertEquals(baseStr + "[a=[3, 4]]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, true).toString());
assertEquals(pBaseStr + "[name=Suzy Queue,age=19,smoker=false]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals(baseStr + "[[%NULL%, 5, [3, 6]]]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[[%NULL%, 5, [3, 6]]]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[[1, 2, -3, 4]]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[[1, 2, -3, 4]]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[[[1, 2], %NULL%, [5]]]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[[[1, 2], %NULL%, [5]]]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("[", STYLE.getContentStart());
assertEquals("]", STYLE.getContentEnd());
assertEquals("=", STYLE.getFieldNameValueSeparator());
assertEquals(",", STYLE.getFieldSeparator());
assertEquals("%NULL%", STYLE.getNullText());
assertEquals("%SIZE=", STYLE.getSizeStartText());
assertEquals("%", STYLE.getSizeEndText());
assertEquals("%", STYLE.getSummaryObjectStartText());
assertEquals("%", STYLE.getSummaryObjectEndText());
assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());
assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());
assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());
assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", Collections.emptyList(), false).toString());
assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", Collections.emptyList(), true).toString());
assertEquals(baseStr + "[a=<size=1>]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), false).toString());
assertEquals(baseStr + "[a=[3]]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), true).toString());
assertEquals(baseStr + "[a=<size=2>]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), false).toString());
assertEquals(baseStr + "[a=[3, 4]]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), true).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", Collections.emptyMap(), false).toString());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", Collections.emptyMap(), true).toString());
assertEquals(baseStr + "[a=<size=1>]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), false).toString());
assertEquals(baseStr + "[a={k=v}]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), true).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new Integer[0], false).toString());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new Integer[0], true).toString());
assertEquals(baseStr + "[a=<size=1>]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, false).toString());
assertEquals(baseStr + "[a={3}]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, true).toString());
assertEquals(baseStr + "[a=<size=2>]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, false).toString());
assertEquals(baseStr + "[a={3,4}]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, true).toString());
assertEquals(pBaseStr + "[name=John Q. Public,age=45,smoker=true]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("", style.getArrayStart());
assertEquals("", style.getArrayEnd());
assertEquals("", style.getArraySeparator());
assertEquals("", style.getContentStart());
assertEquals("", style.getContentEnd());
assertEquals("", style.getFieldNameValueSeparator());
assertEquals("", style.getFieldSeparator());
assertEquals("", style.getNullText());
assertEquals("", style.getSizeStartText());
assertEquals("", style.getSizeEndText());
assertEquals("", style.getSummaryObjectStartText());
assertEquals("", style.getSummaryObjectEndText());
assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());
assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());
assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());
assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());
assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append("a", i3).toString());
assertEquals(baseStr + "[3,4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals(baseStr + "[<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());
assertEquals(baseStr + "[<size=0>]", new ToStringBuilder(base).append("a", Collections.emptyList(), false).toString());
assertEquals(baseStr + "[[]]", new ToStringBuilder(base).append("a", Collections.emptyList(), true).toString());
assertEquals(baseStr + "[<size=1>]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), false).toString());
assertEquals(baseStr + "[[3]]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), true).toString());
assertEquals(baseStr + "[<size=2>]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), false).toString());
assertEquals(baseStr + "[[3, 4]]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), true).toString());
assertEquals(baseStr + "[<size=0>]", new ToStringBuilder(base).append("a", Collections.emptyMap(), false).toString());
assertEquals(baseStr + "[{}]", new ToStringBuilder(base).append("a", Collections.emptyMap(), true).toString());
assertEquals(baseStr + "[<size=1>]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), false).toString());
assertEquals(baseStr + "[{k=v}]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), true).toString());
assertEquals(baseStr + "[<size=0>]", new ToStringBuilder(base).append("a", (Object) new Integer[0], false).toString());
assertEquals(baseStr + "[{}]", new ToStringBuilder(base).append("a", (Object) new Integer[0], true).toString());
assertEquals(baseStr + "[<size=1>]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, false).toString());
assertEquals(baseStr + "[{3}]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, true).toString());
assertEquals(baseStr + "[<size=2>]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, false).toString());
assertEquals(baseStr + "[{3,4}]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, true).toString());
assertEquals(pBaseStr + "[Ron Paul,72,false]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals(baseStr + "[3,4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(Boolean.class, diff.getType());
assertEquals(Boolean.TRUE, diff.getLeft());
assertArrayEquals(ArrayUtils.toObject(class1.booleanArrayField),(Object[]) diff.getLeft());
assertArrayEquals(ArrayUtils.toObject(class2.booleanArrayField),(Object[]) diff.getRight());
assertEquals(Byte.valueOf(class1.byteField), diff.getLeft());
assertEquals(Byte.valueOf(class2.byteField), diff.getRight());
assertArrayEquals(ArrayUtils.toObject(class1.byteArrayField),(Object[]) diff.getLeft());
assertArrayEquals(ArrayUtils.toObject(class2.byteArrayField),(Object[]) diff.getRight());
assertEquals(Character.valueOf(class1.charField), diff.getLeft());
assertEquals(Character.valueOf(class2.charField), diff.getRight());
assertArrayEquals(ArrayUtils.toObject(class1.charArrayField),(Object[]) diff.getLeft());
assertArrayEquals(ArrayUtils.toObject(class2.charArrayField),(Object[]) diff.getRight());
assertEquals("prop1.int", list.getDiffs().get(0).getFieldName());
assertEquals(Double.valueOf(class1.doubleField), diff.getLeft());
assertEquals(Double.valueOf(class2.doubleField), diff.getRight());
assertArrayEquals(ArrayUtils.toObject(class1.doubleArrayField),(Object[]) diff.getLeft());
assertArrayEquals(ArrayUtils.toObject(class2.doubleArrayField),(Object[]) diff.getRight());
assertEquals(Float.valueOf(class1.floatField), diff.getLeft());
assertEquals(Float.valueOf(class2.floatField), diff.getRight());
assertArrayEquals(ArrayUtils.toObject(class1.floatArrayField),(Object[]) diff.getLeft());
assertArrayEquals(ArrayUtils.toObject(class2.floatArrayField),(Object[]) diff.getRight());
assertEquals(Integer.valueOf(class1.intField), diff.getLeft());
assertEquals(Integer.valueOf(class2.intField), diff.getRight());
assertArrayEquals(ArrayUtils.toObject(class1.intArrayField),(Object[]) diff.getLeft());
assertArrayEquals(ArrayUtils.toObject(class2.intArrayField),(Object[]) diff.getRight());
assertEquals(Long.valueOf(class1.longField), diff.getLeft());
assertEquals(Long.valueOf(class2.longField), diff.getRight());
assertArrayEquals(ArrayUtils.toObject(class1.longArrayField),(Object[]) diff.getLeft());
assertArrayEquals(ArrayUtils.toObject(class2.longArrayField),(Object[]) diff.getRight());
assertEquals(class1.objectField, diff.getLeft());
assertEquals(class2.objectField, diff.getRight());
assertArrayEquals(class1.objectArrayField, (Object[]) diff.getLeft());
assertArrayEquals(class2.objectArrayField, (Object[]) diff.getRight());
assertNotSame(left.objectField, right.objectField);
assertEquals(left.objectField, right.objectField);
assertNotSame(left.objectField, right.objectField);
assertNotEquals(left.objectField, right.objectField);
assertSame(left.objectField, right.objectField);
assertEquals(left.objectField, right.objectField);
assertEquals(Short.valueOf(class1.shortField), diff.getLeft());
assertEquals(Short.valueOf(class2.shortField), diff.getRight());
assertArrayEquals(ArrayUtils.toObject(class1.shortArrayField),(Object[]) diff.getLeft());
assertArrayEquals(ArrayUtils.toObject(class2.shortArrayField),(Object[]) diff.getRight());
assertEquals(ToStringStyle.MULTI_LINE_STYLE, list.getToStringStyle());
assertThat(explicitTestAndNotEqual1.build().getNumberOfDiffs(), equalToOne);
assertThat(explicitTestAndNotEqual2.build().getNumberOfDiffs(), equalToOne);
assertThat(implicitTestAndEqual.build().getNumberOfDiffs(), equalToZero);
assertThat(implicitTestAndNotEqual.build().getNumberOfDiffs(), equalToOne);
assertThat(explicitTestAndEqual.build().getNumberOfDiffs(), equalToZero);
assertEquals("[]", new ToStringBuilder(base).toString());
assertEquals("[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());
assertEquals("[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());
assertEquals("[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());
assertEquals("[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());
assertEquals("[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals("[<null>]", new ToStringBuilder(base).append((Object) null).toString());
assertEquals("[3]", new ToStringBuilder(base).append(i3).toString());
assertEquals("[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals("[a=3]", new ToStringBuilder(base).append("a", i3).toString());
assertEquals("[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals("[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());
assertEquals("[a=<size=0>]", new ToStringBuilder(base).append("a", Collections.emptyList(), false).toString());
assertEquals("[a=[]]", new ToStringBuilder(base).append("a", Collections.emptyList(), true).toString());
assertEquals("[a=<size=1>]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), false).toString());
assertEquals("[a=[3]]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), true).toString());
assertEquals("[a=<size=2>]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), false).toString());
assertEquals("[a=[3, 4]]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), true).toString());
assertEquals("[a=<size=0>]", new ToStringBuilder(base).append("a", Collections.emptyMap(), false).toString());
assertEquals("[a={}]", new ToStringBuilder(base).append("a", Collections.emptyMap(), true).toString());
assertEquals("[a=<size=1>]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), false).toString());
assertEquals("[a={k=v}]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), true).toString());
assertEquals("[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new Integer[0], false).toString());
assertEquals("[a={}]", new ToStringBuilder(base).append("a", (Object) new Integer[0], true).toString());
assertEquals("[a=<size=1>]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, false).toString());
assertEquals("[a={3}]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, true).toString());
assertEquals("[a=<size=2>]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, false).toString());
assertEquals("[a={3,4}]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, true).toString());
assertEquals("[name=John Q. Public,age=45,smoker=true]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());
assertEquals("[3]", new ToStringBuilder(base).append(3L).toString());
assertEquals("[a=3]", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals("[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals("[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());
assertEquals("[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals("[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());
assertEquals("[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals("[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());
assertEquals("[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals("[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(expectedIterator.next(), iterator.next());
assertEquals("DiffResultTest.EmptyClass[test=false] differs from DiffResultTest.EmptyClass[test=true]",list.toString());
assertEquals(expectedOutput,list.toString(ToStringStyle.MULTI_LINE_STYLE));
assertEquals(ToStringStyle.DEFAULT_STYLE, diffResult.getToStringStyle());
assertEquals(left, diffResult.getLeft());
assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o1).build());
assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, o2).build());
assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o2).build());
assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, this).build());
assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, null).build());
assertEquals(Boolean.FALSE, new EqualsBuilder().append(null, o2).build());
assertEquals(Boolean.TRUE, new EqualsBuilder().append((Object) null, null).build());
assertEquals(baseStr + "[" + System.lineSeparator() + "]", new ToStringBuilder(base).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + System.lineSeparator() + "]").toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]").toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=hello" + System.lineSeparator() + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + System.lineSeparator() + "]").append("a", "hello").toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "  a=hello" + System.lineSeparator() + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]").append("a", "hello").toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=hello" + System.lineSeparator() + "]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]", new ToStringBuilder(base).append((Object) null).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  3" + System.lineSeparator() + "]", new ToStringBuilder(base).append(i3).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<null>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=3" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", i3).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=3" + System.lineSeparator() + "  b=4" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<Integer>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", i3, false).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<size=0>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Collections.emptyList(), false).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=[]" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Collections.emptyList(), true).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<size=1>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), false).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=[3]" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), true).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<size=2>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), false).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=[3, 4]" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), true).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<size=0>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Collections.emptyMap(), false).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a={}" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Collections.emptyMap(), true).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<size=1>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), false).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a={k=v}" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), true).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<size=0>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", (Object) new Integer[0], false).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a={}" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", (Object) new Integer[0], true).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<size=1>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, false).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a={3}" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, true).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<size=2>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, false).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a={3,4}" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, true).toString());
assertEquals(pBaseStr + "[" + System.lineSeparator() + "  name=Jane Doe" + System.lineSeparator() + "  age=25" + System.lineSeparator() + "  smoker=true" + System.lineSeparator() + "]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  3" + System.lineSeparator() + "]", new ToStringBuilder(base).append(3L).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=3" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=3" + System.lineSeparator() + "  b=4" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  {<null>,5,{3,6}}" + System.lineSeparator() + "]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  {<null>,5,{3,6}}" + System.lineSeparator() + "]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  {1,2,-3,4}" + System.lineSeparator() + "]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  {1,2,-3,4}" + System.lineSeparator() + "]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  {{1,2},<null>,{5}}" + System.lineSeparator() + "]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  {{1,2},<null>,{5}}" + System.lineSeparator() + "]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]", new ToStringBuilder(base).append((Object) array).toString());
UncheckedFuture.on(futures).forEach(f -> assertEquals(REPEAT, f.get().intValue()));
assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());
assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());
assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());
assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", emptyList, false).toString());
assertEquals(baseStr + "[a=java.util.ArrayList@" + Integer.toHexString(System.identityHashCode(emptyList)) + "{}]",new ToStringBuilder(base).append("a", emptyList, true).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<>(), false).toString());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<>(), true).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString());
assertEquals(pBaseStr + "[age=33,job=" + pJobStr + "[title=Manager],name=John Doe,smoker=false]",new ReflectionToStringBuilder(p, new RecursiveToStringStyle()).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("[stringField=string,summaryString=<String>]",new ReflectionToStringBuilder(this, ToStringStyle.NO_CLASS_NAME_STYLE).build());
assertEquals(17 * 37 + 0, new HashCodeBuilder(17, 37).append(true).toHashCode());
assertEquals(17 * 37 + 1, new HashCodeBuilder(17, 37).append(false).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((boolean[]) null).toHashCode());
assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte) 0).toHashCode());
assertEquals(17 * 37 + 123, new HashCodeBuilder(17, 37).append((byte) 123).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char) 0).toHashCode());
assertEquals(17 * 37 + 1234, new HashCodeBuilder(17, 37).append((char) 1234).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char[]) null).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(0d).toHashCode());
assertEquals(17 * 37 + (int) (l ^ l >> 32), new HashCodeBuilder(17, 37).append(d).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double[]) null).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(0f).toHashCode());
assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(0).toHashCode());
assertEquals(17 * 37 + 123456, new HashCodeBuilder(17, 37).append(123456).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(0L).toHashCode());
assertEquals(17 * 37 + (int) (123456789L ^ 123456789L >> 32), new HashCodeBuilder(17, 37).append(123456789L).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long[]) null).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).build().intValue());
assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).build().intValue());
assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0)));
assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456)));
assertEquals(((17 * 37 + 1) * 37 + 3) * 37 + 2, HashCodeBuilder.reflectionHashCode(x));
assertEquals(((17 * 37 + 1) * 37 + 3) * 37 + 2, HashCodeBuilder.reflectionHashCode(x, (String[]) null));
assertEquals(((17 * 37 + 1) * 37 + 3) * 37 + 2, HashCodeBuilder.reflectionHashCode(x));
assertEquals(((17 * 37 + 1) * 37 + 3) * 37 + 2, HashCodeBuilder.reflectionHashCode(x, "xxx"));
assertEquals((17 * 37 + 1) * 37 + 3, HashCodeBuilder.reflectionHashCode(x, "two"));
assertEquals((17 * 37 + 1) * 37 + 2, HashCodeBuilder.reflectionHashCode(x, "three"));
assertEquals(17 * 37 + 1, HashCodeBuilder.reflectionHashCode(x, "two", "three"));
assertEquals(17, HashCodeBuilder.reflectionHashCode(x, "one", "two", "three"));
assertEquals(17, HashCodeBuilder.reflectionHashCode(x, "one", "two", "three", "xxx"));
assertEquals(17 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0)));
assertEquals(17 * 37 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0), true));
assertEquals((17 * 37 + 7890) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890,0)));
assertEquals(((17 * 37 + 7890) * 37 + 0) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890, 0), true));
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short) 0).toHashCode());
assertEquals(17 * 37 + 12345, new HashCodeBuilder(17, 37).append((short) 12345).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals(17 * 37 + 19 * 41 + obj.hashCode(), new HashCodeBuilder(17, 37).appendSuper(new HashCodeBuilder(19, 41).append(obj).toHashCode()).toHashCode());
assertEquals(hcb.toHashCode(), hcb.hashCode(),"hashCode() is no longer returning the same value as toHashCode() - see LANG-520");
assertEquals(17 * 37 + 2, HashCodeBuilder.reflectionHashCode(one));
assertEquals(17, HashCodeBuilder.reflectionHashCode(two));
assertEquals("<null>", new ToStringBuilder(null).toString());
assertEquals("<null>", new ToStringBuilder(null, null).toString());
assertEquals("<null>", new ToStringBuilder(null, null, null).toString());
assertSame(ToStringStyle.NO_FIELD_NAMES_STYLE, ToStringBuilder.getDefaultStyle());
assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());
assertEquals(baseStr + "[value=5]", ToStringBuilder.reflectionToString(base));
assertEquals(this.toBaseString(c) + "[value=A]", ToStringBuilder.reflectionToString(c));
assertEquals(this.toBaseString(b) + "[value=true]", ToStringBuilder.reflectionToString(b));
assertEquals(this.toBaseString(b) + "[value=false]", ToStringBuilder.reflectionToString(b));
public void assertReflectionArray(final String expected, final Object actual) {if (actual == null) {// Until ToStringBuilder supports null objects.return;
assertEquals(expected, ToStringBuilder.reflectionToString(actual));
assertEquals(expected, ToStringBuilder.reflectionToString(actual, null));
assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, true));
assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, false));
assertEquals(baseString + "[{<null>,5,{3,6}}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseString + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseString + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseString + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseString + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseString + "[{A,2,_,D}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseString + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseString + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseString + "[{true,false,false}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseString + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseString + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseString + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseString + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseString + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseString + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseString + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseString + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseString + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));
assertEquals(expectedWithTransients, toStringWithTransients);
assertEquals(expectedWithoutTransients, toStringWithoutTransients);
assertEquals(baseString + "[a=a]", ToStringBuilder.reflectionToString(baseA));
assertEquals(baseString + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));
assertEquals(baseString + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));
assertEquals(baseString + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));
assertEquals(baseString + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));
assertEquals(baseString + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));
assertEquals(baseString + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));
assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));
assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));
assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));
assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));
assertEquals(baseString + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));
assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));
assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));
assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));
assertEquals(baseString + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));
assertEquals(toBaseString(outer) + "[inner=" + toBaseString(outer.inner) + "[]]", outer.toString());
assertEquals(this.toBaseString(objects) + "[{" + this.toBaseString(objects) + "}]",ToStringBuilder.reflectionToString(objects));
assertEquals(this.toBaseString(objects) + "[{{" + this.toBaseString(objects) + "}}]",ToStringBuilder.reflectionToString(objects));
assertEquals(this.toBaseString(objectsLevel2) + "[{{" + this.toBaseString(objectsLevel2) + "}}]",ToStringBuilder.reflectionToString(objectsLevel2));
assertEquals(basicToString+ "[{{"+ basicToString+ ","+ basicToString+ "},{"+ basicToString+ ","+ basicToString+ "}}]",ToStringBuilder.reflectionToString(objects));
assertEquals(this.toBaseString(simple) + "[o=" + this.toBaseString(simple) + "]", simple.toString());
assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + "]", test.toString());
assertEquals(this.toBaseString(test) + "[otherType=" + test.getOtherType().toString() + ",typeIsSelf=" + this.toBaseString(test)  + "]", test.toString());
assertEquals(this.toBaseString(a) + "[b=" + this.toBaseString(b) + "[a=" + this.toBaseString(a) + "]]",a.toString());
assertEquals(this.toBaseString(objects)+ "[{"+ this.toBaseString(simple)+ "[o="+ this.toBaseString(objects)+ "]"+ "}]",ToStringBuilder.reflectionToString(objects));
assertEquals(this.toBaseString(simple)+ "[o={"+ this.toBaseString(simple)+ "}]",ToStringBuilder.reflectionToString(simple));
assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());
assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals(baseStr + "[]", new ToStringBuilder(base).appendToString("Integer@8888[]").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendToString("Integer@8888[<null>]").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendToString("Integer@8888[]").append("a", "hello").toString());
assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendToString("Integer@8888[<null>]").append("a", "hello").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendToString(null).append("a", "hello").toString());
assertEquals(baseStr + "[" + toBaseString(objectToAppend1) + "]",new ToStringBuilder(base).appendAsObjectToString(objectToAppend1).toString());
assertEquals(baseStr + "[" + toBaseString(objectToAppend2) + "]",new ToStringBuilder(base).appendAsObjectToString(objectToAppend2).toString());
assertEquals(baseStr + "[" + toBaseString(objectToAppend3) + "]",new ToStringBuilder(base).appendAsObjectToString(objectToAppend3).toString());
assertEquals(baseStr + "[flags={true,false,false}]",new ToStringBuilder(base).append("flags", array).toString());
assertEquals(baseStr + "[flags=<null>]",new ToStringBuilder(base).append("flags", (boolean[]) null).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null).toString());
assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(null, array).toString());
assertEquals(baseStr + "[flags={true,false,false}]",new ToStringBuilder(base).append("flags", array, true).toString());
assertEquals(baseStr + "[length=<size=3>]",new ToStringBuilder(base).append("length", array, false).toString());
assertEquals(baseStr + "[flags=<null>]",new ToStringBuilder(base).append("flags", (boolean[]) null, true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());
assertEquals(baseStr + "[<size=3>]", new ToStringBuilder(base).append(null, array, false).toString());
assertEquals(baseStr + "[chars={A,2,_,D}]", new ToStringBuilder(base).append("chars", array).toString());
assertEquals(baseStr + "[letters={A,2,_,D}]", new ToStringBuilder(base).append("letters", array).toString());
assertEquals(baseStr + "[flags=<null>]",new ToStringBuilder(base).append("flags", (boolean[]) null).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null).toString());
assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(null, array).toString());
assertEquals(baseStr + "[chars={A,2,_,D}]", new ToStringBuilder(base).append("chars", array, true).toString());
assertEquals(baseStr + "[letters=<size=4>]",new ToStringBuilder(base).append("letters", array, false).toString());
assertEquals(baseStr + "[flags=<null>]",new ToStringBuilder(base).append("flags", (boolean[]) null, true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());
assertEquals(baseStr + "[<size=4>]", new ToStringBuilder(base).append(null, array, false).toString());
assertEquals(baseStr + "[values={1.0,2.9876,-3.00001,4.3}]",new ToStringBuilder(base).append("values", array).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null).toString());
assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(null, array).toString());
assertEquals(baseStr + "[values={1.0,2.9876,-3.00001,4.3}]",new ToStringBuilder(base).append("values", array, true).toString());
assertEquals(baseStr + "[length=<size=4>]",new ToStringBuilder(base).append("length", array, false).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null, true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());
assertEquals(baseStr + "[<size=4>]", new ToStringBuilder(base).append(null, array, false).toString());
assertEquals(baseStr + "[values={<null>,5,{3,6}}]",new ToStringBuilder(base).append("values", array).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(null, array).toString());
assertEquals(baseStr + "[values={<null>,5,{3,6}}]",new ToStringBuilder(base).append("values", array, true).toString());
assertEquals(baseStr + "[length=<size=3>]",new ToStringBuilder(base).append("length", array, false).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null, true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());
assertEquals(baseStr + "[<size=3>]", new ToStringBuilder(base).append(null, array, false).toString());
assertEquals(baseStr + "[values={1,2,-3,4}]", new ToStringBuilder(base).append("values", array).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(null, array).toString());
assertEquals(baseStr + "[values={1,2,-3,4}]",new ToStringBuilder(base).append("values", array, true).toString());
assertEquals(baseStr + "[length=<size=4>]",new ToStringBuilder(base).append("length", array, false).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null, true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());
assertEquals(baseStr + "[<size=4>]", new ToStringBuilder(base).append(null, array, false).toString());
assertEquals(baseStr + "[values={1,2,-3,4}]", new ToStringBuilder(base).append("values", array).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(null, array).toString());
assertEquals(baseStr + "[values={1,2,-3,4}]",new ToStringBuilder(base).append("values", array, true).toString());
assertEquals(baseStr + "[length=<size=4>]",new ToStringBuilder(base).append("length", array, false).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null, true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());
assertEquals(baseStr + "[<size=4>]", new ToStringBuilder(base).append(null, array, false).toString());
assertEquals(baseStr + "[values={1,2,-3,4}]", new ToStringBuilder(base).append("values", array).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(null, array).toString());
assertEquals(baseStr + "[values={1,2,-3,4}]",new ToStringBuilder(base).append("values", array, true).toString());
assertEquals(baseStr + "[length=<size=4>]",new ToStringBuilder(base).append("length", array, false).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null, true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());
assertEquals(baseStr + "[<size=4>]", new ToStringBuilder(base).append(null, array, false).toString());
assertEquals(baseStr + "[values={1,2,-3,4}]", new ToStringBuilder(base).append("values", array).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(null, array).toString());
assertEquals(baseStr + "[values={1,2,-3,4}]",new ToStringBuilder(base).append("values", array, true).toString());
assertEquals(baseStr + "[length=<size=4>]",new ToStringBuilder(base).append("length", array, false).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null, true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());
assertEquals(baseStr + "[<size=4>]", new ToStringBuilder(base).append(null, array, false).toString());
assertEquals(baseStr + "[values={1.0,2.9876,-3.00001,4.3}]",new ToStringBuilder(base).append("values", array).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null).toString());
assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(null, array).toString());
assertEquals(baseStr + "[values={1.0,2.9876,-3.00001,4.3}]",new ToStringBuilder(base).append("values", array, true).toString());
assertEquals(baseStr + "[length=<size=4>]",new ToStringBuilder(base).append("length", array, false).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null, true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());
assertEquals(baseStr + "[<size=4>]", new ToStringBuilder(base).append(null, array, false).toString());
assertEquals(ToStringStyle.DEFAULT_STYLE, stringBuilder1.getStyle());
assertEquals(ToStringStyle.DEFAULT_STYLE, stringBuilder2.getStyle());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());
assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<>(), false).toString());
assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<>(), true).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<>(), false).toString());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<>(), true).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).build());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).build());
assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).build());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).build());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).build());
assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).build());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<>(), false).build());
assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<>(), true).build());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<>(), false).build());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<>(), true).build());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).build());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).build());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3).append("b", 4).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((short) 3).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (short) 3).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (short) 3).append("b", (short) 4).toString());
assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString());
assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString());
assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString());
assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append(3.2).toString());
assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", 3.2).toString());
assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", 3.2).append("b", 4.3).toString());
assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString());
assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString());
assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString());
assertEquals(baseStr + "[true]", new ToStringBuilder(base).append(true).toString());
assertEquals(baseStr + "[a=true]", new ToStringBuilder(base).append("a", true).toString());
assertEquals(baseStr + "[a=true,b=false]", new ToStringBuilder(base).append("a", true).append("b", false).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(expected, a.toString());
assertEquals(this.toBaseString(instance1) + "[staticInt=12345,staticString=staticString]",ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[staticInt=12345,staticString=staticString]",ReflectionToStringBuilder.toString(instance1, null, true, true, SimpleReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[staticInt=12345,staticString=staticString]",this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[staticInt=12345,staticString=staticString]",this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString]",ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString,staticTransientInt=54321,staticTransientString=staticTransientString,transientInt=98765,transientString=transientString]",ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString]",this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString]",this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[staticInt2=67890,staticString2=staticString2]",ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[staticInt2=67890,staticString2=staticString2,staticInt=12345,staticString=staticString]",ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[staticInt2=67890,staticString2=staticString2,staticInt=12345,staticString=staticString]",this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[staticInt2=67890,staticString2=staticString2,staticInt=12345,staticString=staticString]",this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));
assertEquals(-1, testBuilder.toString().indexOf("testInt=31337"));
assertEqualsAndHashCodeContract(i1, i2, testTransients);
assertEqualsAndHashCodeContract(new TestFixture(2, 'c', "Test", (short) 2), new TestFixture(2, 'c', "Test", (short) 2), testTransients);
assertEqualsAndHashCodeContract(new AllTransientFixture(2, 'c', "Test", (short) 2),new AllTransientFixture(2, 'c', "Test", (short) 2),testTransients);
assertEqualsAndHashCodeContract(new SubTestFixture(2, 'c', "Test", (short) 2, "Same"),new SubTestFixture(2, 'c', "Test", (short) 2, "Same"),testTransients);
assertEqualsAndHashCodeContract(new SubAllTransientFixture(2, 'c', "Test", (short) 2, "Same"),new SubAllTransientFixture(2, 'c', "Test", (short) 2, "Same"),testTransients);
* Asserts that if {@code lhs} equals {@code rhs}* then their hash codes MUST be identical.** @param lhs The Left-Hand-Side of the equals test* @param rhs The Right-Hand-Side of the equals test* @param testTransients whether to test transient fields*/private void assertEqualsAndHashCodeContract(final Object lhs, final Object rhs, final boolean testTransients) {if (EqualsBuilder.reflectionEquals(lhs, rhs, testTransients)) {// test a couple of times for consistency.assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));
assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));
assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));
assertEquals(FIELD_NAME, booleanDiff.getFieldName());
assertEquals(Boolean.class, booleanDiff.getType());
assertEquals(String.format("[%s: %s, %s]", FIELD_NAME, booleanDiff.getLeft(),booleanDiff.getRight()), booleanDiff.toString());
assertEquals(0, CompareToBuilder.reflectionCompare(o1, o1));
assertEquals(0, CompareToBuilder.reflectionCompare(o1, o2));
assertXYZCompareOrder(x, y, z, true, excludeFields);
assertXYZCompareOrder(x, y, z, true, excludeFields);
assertXYZCompareOrder(x, y, z, true, null);
assertXYZCompareOrder(x, y, z, true, null);
private void assertXYZCompareOrder(final Object x, final Object y, final Object z, final boolean testTransients, final String[] excludeFields) {assertEquals(0, CompareToBuilder.reflectionCompare(x, x, testTransients, null, excludeFields));
assertEquals(0, CompareToBuilder.reflectionCompare(y, y, testTransients, null, excludeFields));
assertEquals(0, CompareToBuilder.reflectionCompare(z, z, testTransients, null, excludeFields));
assertReflectionCompareContract(to1, to1, to1, false, excludeFields);
assertReflectionCompareContract(to1, to2, to3, false, excludeFields);
assertReflectionCompareContract(tso1, tso1, tso1, false, excludeFields);
assertReflectionCompareContract(tso1, tso2, tso3, false, excludeFields);
assertReflectionCompareContract("1", "2", "3", false, excludeFields);
assertXYZCompareOrder(to1, to2, to3, true, null);
assertXYZCompareOrder(tso1, tso2, tso3, true, null);
private void assertReflectionCompareContract(final Object x, final Object y, final Object z, final boolean testTransients, final String[] excludeFields) {// signumassertEquals(reflectionCompareSignum(x, y, testTransients, excludeFields), -reflectionCompareSignum(y, x, testTransients, excludeFields));
assertEquals(reflectionCompareSignum(x, z, testTransients, excludeFields), -reflectionCompareSignum(y, z, testTransients, excludeFields));
assertEquals(0, new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison());
assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());
assertEquals(0, new CompareToBuilder().append(o1, o2).toComparison());
assertEquals(0, new CompareToBuilder().append((Object) null, null).toComparison());
assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build());
assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build());
assertEquals(Integer.valueOf(0), new CompareToBuilder().append((Object) null, null).build());
assertEquals(0, new CompareToBuilder().append(o1, o1, String.CASE_INSENSITIVE_ORDER).toComparison());
assertEquals(0, new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison());
assertEquals(0, new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison());
assertEquals(0, new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison());
assertEquals(0, new CompareToBuilder().append(null, null, String.CASE_INSENSITIVE_ORDER).toComparison());
assertEquals(0, new CompareToBuilder().append(o1, o1, null).toComparison());
assertEquals(0, new CompareToBuilder().append(o1, o2, null).toComparison());
assertEquals(0, new CompareToBuilder().append(null, null, null).toComparison());
assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());
assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());
assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());
assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());
assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());
assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());
assertEquals(0, new CompareToBuilder().append(Double.NaN, Double.NaN).toComparison());
assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());
assertEquals(0, new CompareToBuilder().append(Float.NaN, Float.NaN).toComparison());
assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());
assertEquals(0, new CompareToBuilder().append(o2, o2).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertEquals(0, new CompareToBuilder().append((Object[]) null, null).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertEquals(0, new CompareToBuilder().append((long[]) null, null).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertEquals(0, new CompareToBuilder().append((int[]) null, null).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertEquals(0, new CompareToBuilder().append((short[]) null, null).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertEquals(0, new CompareToBuilder().append((char[]) null, null).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertEquals(0, new CompareToBuilder().append((byte[]) null, null).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertEquals(0, new CompareToBuilder().append((double[]) null, null).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertEquals(0, new CompareToBuilder().append((float[]) null, null).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertEquals(0, new CompareToBuilder().append((boolean[]) null, null).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());
assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());
assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());
assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", Collections.emptyList(), false).toString());
assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", Collections.emptyList(), true).toString());
assertEquals(baseStr + "[a=<size=1>]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), false).toString());
assertEquals(baseStr + "[a=[3]]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), true).toString());
assertEquals(baseStr + "[a=<size=2>]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), false).toString());
assertEquals(baseStr + "[a=[3, 4]]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), true).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", Collections.emptyMap(), false).toString());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", Collections.emptyMap(), true).toString());
assertEquals(baseStr + "[a=<size=1>]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), false).toString());
assertEquals(baseStr + "[a={k=v}]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), true).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new Integer[0], false).toString());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new Integer[0], true).toString());
assertEquals(baseStr + "[a=<size=1>]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, false).toString());
assertEquals(baseStr + "[a={3}]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, true).toString());
assertEquals(baseStr + "[a=<size=2>]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, false).toString());
assertEquals(baseStr + "[a={3,4}]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, true).toString());
assertEquals(pBaseStr + "[name=John Doe,age=33,smoker=false]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(expected, toString(tx));
assertEquals(expected, toString(acc));
assertEquals("null", new ToStringBuilder(null).toString());
assertEquals("{}", new ToStringBuilder(base).toString());
assertEquals("{}",new ToStringBuilder(base).appendSuper("Integer@8888[" + System.lineSeparator() + "]").toString());
assertEquals("{}",new ToStringBuilder(base).appendSuper("Integer@8888[" + System.lineSeparator() + "  null"+ System.lineSeparator() + "]").toString());
assertEquals("{\"a\":\"hello\"}",new ToStringBuilder(base).appendSuper("Integer@8888[" + System.lineSeparator()+ "]").append("a", "hello").toString());
assertEquals("{\"a\":\"hello\"}",new ToStringBuilder(base).appendSuper("Integer@8888[" + System.lineSeparator()+ "  null" + System.lineSeparator()+ "]").append("a", "hello").toString());
assertEquals("{\"a\":\"hello\"}", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals("{\"a\":\"hello\",\"b\":\"world\"}", new ToStringBuilder(base).appendSuper("{\"a\":\"hello\"}").append("b", "world").toString());
assertEquals("{\"a\":\"A\"}", new ToStringBuilder(base).append("a", 'A').toString());
assertEquals("{\"a\":\"A\",\"b\":\"B\"}", new ToStringBuilder(base).append("a", 'A').append("b", 'B').toString());
assertEquals("{\"now\":\"" + now.toString() +"\"}", new ToStringBuilder(base).append("now", now).toString());
assertEquals("{\"now\":\"" + now.toString() +"\",\"after\":\"" + afterNow.toString() + "\"}", new ToStringBuilder(base).append("now", now).append("after", afterNow).toString());
assertEquals("{\"a\":null}",new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals("{\"a\":3}", new ToStringBuilder(base).append("a", i3).toString());
assertEquals("{\"a\":3,\"b\":4}",new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals("{\"a\":[]}",new ToStringBuilder(base).append("a", new ArrayList<>(),true).toString());
assertEquals("{\"a\":{}}",new ToStringBuilder(base).append("a",new HashMap<>(), true).toString());
assertEquals("{\"a\":[]}",new ToStringBuilder(base).append("a", (Object) new String[0],true).toString());
assertEquals("{\"a\":[1,2,3]}",new ToStringBuilder(base).append("a",(Object) new int[]{1, 2, 3}, true).toString());
assertEquals("{\"a\":[\"v\",\"x\",\"y\",\"z\"]}",new ToStringBuilder(base).append("a",(Object) new String[]{"v", "x", "y", "z"}, true).toString());
assertEquals(student.toString(), "{\"hobbies\":[\"BOOK\",\"SPORT\",\"MUSIC\"]}");
assertEquals(student.toString(), "{\"hobbies\":[]}");
assertEquals(student.toString(), "{\"hobbies\":null}");
assertEquals(teacher.toString(), "{\"hobbies\":[\"BOOK\",\"SPORT\",\"MUSIC\"]}");
assertEquals(teacher.toString(), "{\"hobbies\":[]}");
assertEquals(teacher.toString(), "{\"hobbies\":null}");
assertEquals(academyClass.toString(), "{\"students\":[{\"hobbies\":[\"BOOK\",\"MUSIC\"]},{\"hobbies\":[]},{\"hobbies\":[\"BOOK\"]}],\"teacher\":{\"hobbies\":[\"BOOK\",\"SPORT\",\"MUSIC\"]}}");
assertEquals("{\"name\":\"Jane Doe\",\"age\":25,\"smoker\":true}",new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());
assertEquals("{\"pid\":\"#1@Jane\",\"person\":{\"name\":\"Jane Doe\",\"age\":25,\"smoker\":true}}",new ToStringBuilder(nestP).append("pid", nestP.pid).append("person", nestP.person).toString());
assertEquals("{\"a\":3}", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals("{\"a\":3,\"b\":4}",new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals("{\"objectArray\":[null,5,[3,6]]}", toStringBuilder.append("objectArray", array).toString());
assertEquals("{\"longArray\":[1,2,-3,4]}", toStringBuilder.append("longArray", array).toString());
assertEquals("{\"intArray\":[1,2,-3,4]}", toStringBuilder.append("intArray", array).toString());
assertEquals("{\"byteArray\":[1,2,-3,4]}", toStringBuilder.append("byteArray", array).toString());
assertEquals("{\"shortArray\":[1,2,-3,4]}", toStringBuilder.append("shortArray", array).toString());
assertEquals("{\"doubleArray\":[1.0,2.0,-3.0,4.0]}", toStringBuilder.append("doubleArray", array).toString());
assertEquals("{\"floatArray\":[1.0,2.0,-3.0,4.0]}", toStringBuilder.append("floatArray", array).toString());
assertEquals("{\"charArray\":[\"1\",\"2\",\"3\",\"4\"]}", toStringBuilder.append("charArray", array).toString());
assertEquals("{\"booleanArray\":[true,false]}", toStringBuilder.append("booleanArray", array).toString());
assertEquals("{\"name\":\"Jane Doe\",\"age\":25,\"smoker\":true,\"groups\":['admin', 'manager', 'user']}",new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).append("groups", new Object() {@Overridepublic String toString() {return "['admin', 'manager', 'user']";
assertEquals("{\"name\":\"value\"}", new ToStringBuilder(base).append("name", "value").toString());
assertEquals("{\"name\":\"\"}", new ToStringBuilder(base).append("name", "").toString());
assertEquals("{\"name\":\"\\\"\"}", new ToStringBuilder(base).append("name", '"').toString());
assertEquals("{\"name\":\"\\\\\"}", new ToStringBuilder(base).append("name", '\\').toString());
assertEquals("{\"name\":\"Let's \\\"quote\\\" this\"}", new ToStringBuilder(base).append("name", "Let's \"quote\" this").toString());
assertEquals("{\"Let's \\\"quote\\\" this\":\"value\"}", new ToStringBuilder(base).append("Let's \"quote\" this", "value").toString());
assertEquals("{\"map\":{\"k1\":\"v1\",\"k2\":2}}",new ToStringBuilder(base).append("map", map).toString());
assertEquals("{\"object\":{\"pid\":\"dummy-text\",\"map\":{\"k1\":\"value1\",\"k2\":2}}}",new ToStringBuilder(base).append("object", object).toString());
assertEquals("{\"object\":{\"pid\":\"dummy-text\",\"map\":{\"k1\":\"v1\"," +"\"k2\":{\"k2.1\":\"v2.1\",\"k2.2\":\"v2.2\"}}}}",new ToStringBuilder(base).append("object", object).toString());
assertEquals("{\"map\":{\"k1\":\"v1\"}}",new ToStringBuilder(base).append("map", map).toString());
assertEquals("", new ToStringBuilder(base).toString());
assertEquals("", new ToStringBuilder(base).appendSuper("").toString());
assertEquals("<null>", new ToStringBuilder(base).appendSuper("<null>").toString());
assertEquals("hello", new ToStringBuilder(base).appendSuper("").append("a", "hello").toString());
assertEquals("<null>,hello", new ToStringBuilder(base).appendSuper("<null>").append("a", "hello").toString());
assertEquals("hello", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals("<null>", new ToStringBuilder(base).append((Object) null).toString());
assertEquals("3", new ToStringBuilder(base).append(i3).toString());
assertEquals("<null>", new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals("3", new ToStringBuilder(base).append("a", i3).toString());
assertEquals("3,4", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals("<Integer>", new ToStringBuilder(base).append("a", i3, false).toString());
assertEquals("<size=0>", new ToStringBuilder(base).append("a", Collections.emptyList(), false).toString());
assertEquals("[]", new ToStringBuilder(base).append("a", Collections.emptyList(), true).toString());
assertEquals("<size=1>", new ToStringBuilder(base).append("a", Collections.singletonList(i3), false).toString());
assertEquals("[3]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), true).toString());
assertEquals("<size=2>", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), false).toString());
assertEquals("[3, 4]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), true).toString());
assertEquals("<size=0>", new ToStringBuilder(base).append("a", Collections.emptyMap(), false).toString());
assertEquals("{}", new ToStringBuilder(base).append("a", Collections.emptyMap(), true).toString());
assertEquals("<size=1>", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), false).toString());
assertEquals("{k=v}", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), true).toString());
assertEquals("<size=0>", new ToStringBuilder(base).append("a", (Object) new Integer[0], false).toString());
assertEquals("{}", new ToStringBuilder(base).append("a", (Object) new Integer[0], true).toString());
assertEquals("<size=1>", new ToStringBuilder(base).append("a", (Object) new Integer[]{i3}, false).toString());
assertEquals("{3}", new ToStringBuilder(base).append("a", (Object) new Integer[]{i3}, true).toString());
assertEquals("<size=2>", new ToStringBuilder(base).append("a", (Object) new Integer[]{i3, i4}, false).toString());
assertEquals("{3,4}", new ToStringBuilder(base).append("a", (Object) new Integer[]{i3, i4}, true).toString());
assertEquals("Jane Q. Public,47,false", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());
assertEquals("3", new ToStringBuilder(base).append(3L).toString());
assertEquals("3", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals("3,4", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals("{<null>,5,{3,6}}", new ToStringBuilder(base).append(array).toString());
assertEquals("{<null>,5,{3,6}}", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("<null>", new ToStringBuilder(base).append(array).toString());
assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("{1,2,-3,4}", new ToStringBuilder(base).append(array).toString());
assertEquals("{1,2,-3,4}", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("<null>", new ToStringBuilder(base).append(array).toString());
assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString());
assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("<null>", new ToStringBuilder(base).append(array).toString());
assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString());
assertSame(e, new UncheckedIllegalAccessException(e).getCause());
assertSame(e, new UncheckedReflectiveOperationException(e).getCause());
assertEquals("", ExceptionUtils.getStackTrace(null), "Empty response.");
assertEquals(TEST_MESSAGE, exceptionContext.getMessage());
assertEquals(Exception.class.getName() + ": " + TEST_MESSAGE, exceptionContext.getRawMessage());
assertEquals(TEST_MESSAGE_2, exceptionContext.getRawMessage());
assertEquals(TEST_MESSAGE, exceptionContext.getMessage());
assertEquals(Exception.class.getName() + ": " + TEST_MESSAGE, exceptionContext.getRawMessage());
assertEquals(TEST_MESSAGE_2, exceptionContext.getRawMessage());
assertSame(e, new UncheckedException(e).getCause());
assertEquals("some value", exceptionContext.getFirstContextValue("test2"));
assertEquals(5, exceptionContext.getContextLabels().size());
assertEquals(5, exceptionContext.getContextLabels().size());
assertEquals(7, exceptionContext.getContextEntries().size());
assertEquals(6, exceptionContext.getContextLabels().size());
assertEquals(7, exceptionContext.getContextEntries().size());
assertEquals(6, exceptionContext.getContextLabels().size());
assertEquals(6, exceptionContext.getContextEntries().size());
assertEquals(6, exceptionContext.getContextLabels().size());
assertEquals("some value", exceptionContext.getFirstContextValue("test2"));
assertEquals("another", exceptionContext.getFirstContextValue("test2"));
assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null));
assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value"));
assertEquals("another", exceptionContext.getFirstContextValue("test2"));
assertEquals(5, exceptionContext.getContextEntries().size());
assertEquals(6, exceptionContext.getContextEntries().size());
assertEquals(5, exceptionContext.getContextEntries().size());
assertEquals(6, entries.size());
assertEquals("test1", entries.get(0).getKey());
assertEquals("test2", entries.get(1).getKey());
assertEquals("test Date", entries.get(2).getKey());
assertEquals("test Nbr", entries.get(3).getKey());
assertEquals("test Poorly written obj", entries.get(4).getKey());
assertEquals("test2", entries.get(5).getKey());
assertEquals(exceptionContext.getFormattedExceptionMessage(null), clone.getFormattedExceptionMessage(null));
assertEquals("", ExceptionUtils.getMessage(th));
assertEquals("IllegalArgumentException: Base", ExceptionUtils.getMessage(th));
assertEquals("ExceptionUtilsTest.ExceptionWithCause: Wrapper", ExceptionUtils.getMessage(th));
assertEquals("", ExceptionUtils.getRootCauseMessage(th));
assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th));
assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th));
assertEquals(1, ExceptionUtils.getThrowableCount(ioe));
assertEquals(1, ExceptionUtils.getThrowableCount(ioe));
assertSame(jdkNoCause, throwables.get(0));
assertSame(nested, throwables.get(0));
assertSame(withoutCause, throwables.get(1));
assertSame(cyclicCause, throwables.get(0));
assertSame(cyclicCause.getCause(), throwables.get(1));
assertSame(cyclicCause.getCause().getCause(), throwables.get(2));
assertSame(withCause, throwables.get(0));
assertSame(nested, throwables.get(1));
assertSame(withoutCause, throwables.get(2));
assertSame(withoutCause, throwables.get(0));
assertSame(null, ExceptionUtils.getCause(null));
assertSame(null, ExceptionUtils.getCause(withoutCause));
assertSame(withoutCause, ExceptionUtils.getCause(nested));
assertSame(nested, ExceptionUtils.getCause(withCause));
assertSame(null, ExceptionUtils.getCause(jdkNoCause));
assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause));
assertSame(cyclicCause.getCause().getCause(), ExceptionUtils.getCause(cyclicCause.getCause()));
assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause.getCause().getCause()));
assertSame(withoutCause, ExceptionUtils.getCause(notVisibleException));
assertSame(null, ExceptionUtils.getCause(null, null));
assertSame(null, ExceptionUtils.getCause(null, new String[0]));
assertSame(nested, ExceptionUtils.getCause(withCause, null));  // default names
assertSame(null, ExceptionUtils.getCause(withCause, new String[0]));
assertSame(null, ExceptionUtils.getCause(withCause, new String[]{null}));
assertSame(nested, ExceptionUtils.getCause(withCause, new String[]{"getCause"}));
assertSame(null, ExceptionUtils.getCause(withoutCause, null));
assertSame(null, ExceptionUtils.getCause(withoutCause, new String[0]));
assertSame(null, ExceptionUtils.getCause(withoutCause, new String[]{null}));
assertSame(null, ExceptionUtils.getCause(withoutCause, new String[]{"getCause"}));
assertSame(null, ExceptionUtils.getCause(withoutCause, new String[]{"getTargetException"}));
assertSame(null, ExceptionUtils.getRootCause(null));
assertSame(withoutCause, ExceptionUtils.getRootCause(withoutCause));
assertSame(withoutCause, ExceptionUtils.getRootCause(nested));
assertSame(withoutCause, ExceptionUtils.getRootCause(withCause));
assertSame(jdkNoCause, ExceptionUtils.getRootCause(jdkNoCause));
assertSame(cyclicCause.getCause().getCause(), ExceptionUtils.getRootCause(cyclicCause));
assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length);
assertEquals(0, ExceptionUtils.getRootCauseStackTraceList(null).size());
assertArrayEquals(new String[]{"org.apache.commons.lang3.exception.ExceptionUtilsTest$1","\tat org.apache.commons.lang3.exception.ExceptionUtilsTest.testgetStackFramesGappyPath(ExceptionUtilsTest.java:706)","\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)","\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)","\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)"}, actual);
assertEquals(0, ExceptionUtils.getThrowableCount(null));
assertEquals(1, ExceptionUtils.getThrowableCount(withoutCause));
assertEquals(2, ExceptionUtils.getThrowableCount(nested));
assertEquals(3, ExceptionUtils.getThrowableCount(withCause));
assertEquals(1, ExceptionUtils.getThrowableCount(jdkNoCause));
assertEquals(3, ExceptionUtils.getThrowableCount(cyclicCause));
assertSame(jdkNoCause, throwables.get(0));
assertSame(nested, throwables.get(0));
assertSame(withoutCause, throwables.get(1));
assertSame(cyclicCause, throwables.get(0));
assertSame(cyclicCause.getCause(), throwables.get(1));
assertSame(cyclicCause.getCause().getCause(), throwables.get(2));
assertSame(withCause, throwables.get(0));
assertSame(nested, throwables.get(1));
assertSame(withoutCause, throwables.get(2));
assertSame(withoutCause, throwables.get(0));
assertSame(jdkNoCause, throwables[0]);
assertSame(nested, throwables[0]);
assertSame(withoutCause, throwables[1]);
assertEquals(0, ExceptionUtils.getThrowables(null).length);
assertSame(cyclicCause, throwables[0]);
assertSame(cyclicCause.getCause(), throwables[1]);
assertSame(cyclicCause.getCause().getCause(), throwables[2]);
assertSame(withCause, throwables[0]);
assertSame(nested, throwables[1]);
assertSame(withoutCause, throwables[2]);
assertSame(withoutCause, throwables[0]);
assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null));
assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class));
assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class));
assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null));
assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class));
assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class));
assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null));
assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class));
assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class));
assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Throwable.class));
assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0));
assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0));
assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0));
assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0));
assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0));
assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0));
assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null));
assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));
assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0));
assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0));
assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1));
assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Throwable.class, 0));
assertEquals(-1, ExceptionUtils.indexOfType(null, null));
assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class));
assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));
assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class));
assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class));
assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class));
assertEquals(-1, ExceptionUtils.indexOfType(nested, null));
assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class));
assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class));
assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class));
assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));
assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class));
assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class));
assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class));
assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class));
assertEquals(0, ExceptionUtils.indexOfType(withCause, Throwable.class));
assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0));
assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0));
assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));
assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0));
assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0));
assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0));
assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0));
assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0));
assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0));
assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0));
assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));
assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));
assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0));
assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0));
assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1));
assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));
assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1));
assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9));
assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0));
assertEquals(0, ExceptionUtils.indexOfType(withCause, Throwable.class, 0));
assertEquals(0, writer.getBuffer().length());
assertEquals(1, ExceptionUtils.stream(jdkNoCause).count());
assertSame(jdkNoCause, ExceptionUtils.stream(jdkNoCause).toArray()[0]);
assertEquals(2, ExceptionUtils.stream(nested).count());
assertSame(nested, array[0]);
assertSame(withoutCause, array[1]);
assertSame(cyclicCause, throwables.get(0));
assertSame(cyclicCause.getCause(), throwables.get(1));
assertSame(cyclicCause.getCause().getCause(), throwables.get(2));
assertSame(withCause, throwables.get(0));
assertSame(nested, throwables.get(1));
assertSame(withoutCause, throwables.get(2));
assertSame(withoutCause, throwables.get(0));
assertSame(expected, actual);
assertEquals(withoutCause, ExceptionUtils.throwableOfThrowable(withoutCause, ExceptionWithoutCause.class));
assertEquals(nested, ExceptionUtils.throwableOfThrowable(nested, NestableException.class));
assertEquals(nested.getCause(), ExceptionUtils.throwableOfThrowable(nested, ExceptionWithoutCause.class));
assertEquals(withCause, ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithCause.class));
assertEquals(withCause.getCause(), ExceptionUtils.throwableOfThrowable(withCause, NestableException.class));
assertEquals(withCause.getCause().getCause(), ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithoutCause.class));
assertEquals(withoutCause, ExceptionUtils.throwableOfThrowable(withoutCause, ExceptionWithoutCause.class, 0));
assertEquals(nested, ExceptionUtils.throwableOfThrowable(nested, NestableException.class, 0));
assertEquals(nested.getCause(), ExceptionUtils.throwableOfThrowable(nested, ExceptionWithoutCause.class, 0));
assertEquals(withCause, ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithCause.class, 0));
assertEquals(withCause.getCause(), ExceptionUtils.throwableOfThrowable(withCause, NestableException.class, 0));
assertEquals(withCause.getCause().getCause(), ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithoutCause.class, 0));
assertEquals(withCause, ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithCause.class, -1));
assertEquals(withCause, ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithCause.class, 0));
assertEquals(withoutCause, ExceptionUtils.throwableOfType(withoutCause, ExceptionWithoutCause.class));
assertEquals(nested, ExceptionUtils.throwableOfType(nested, NestableException.class));
assertEquals(nested.getCause(), ExceptionUtils.throwableOfType(nested, ExceptionWithoutCause.class));
assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, ExceptionWithCause.class));
assertEquals(withCause.getCause(), ExceptionUtils.throwableOfType(withCause, NestableException.class));
assertEquals(withCause.getCause().getCause(), ExceptionUtils.throwableOfType(withCause, ExceptionWithoutCause.class));
assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, Exception.class));
assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, Throwable.class));
assertEquals(withoutCause, ExceptionUtils.throwableOfType(withoutCause, ExceptionWithoutCause.class, 0));
assertEquals(nested, ExceptionUtils.throwableOfType(nested, NestableException.class, 0));
assertEquals(nested.getCause(), ExceptionUtils.throwableOfType(nested, ExceptionWithoutCause.class, 0));
assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, ExceptionWithCause.class, 0));
assertEquals(withCause.getCause(), ExceptionUtils.throwableOfType(withCause, NestableException.class, 0));
assertEquals(withCause.getCause().getCause(), ExceptionUtils.throwableOfType(withCause, ExceptionWithoutCause.class, 0));
assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, ExceptionWithCause.class, -1));
assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, ExceptionWithCause.class, 0));
assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, Exception.class, 0));
assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, Throwable.class, 0));
assertEquals(EXCEPTION_MESSAGE, exception.getMessage(), WRONG_EXCEPTION_MESSAGE);
assertEquals(CAUSE_MESSAGE, cause.getMessage(), WRONG_CAUSE_MESSAGE);
assertEquals(EXCEPTION_MESSAGE, exception.getMessage(), WRONG_EXCEPTION_MESSAGE);
assertEquals(CAUSE_MESSAGE, cause.getMessage(), WRONG_CAUSE_MESSAGE);
assertSame(e, new UncheckedInterruptedException(e).getCause());
assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(StringUtils.EMPTY, 0));
assertEquals("012", CharSequenceUtils.subSequence("012", 0));
assertEquals("12", CharSequenceUtils.subSequence("012", 1));
assertEquals("2", CharSequenceUtils.subSequence("012", 2));
assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence("012", 3));
assertEquals(data.expected, stringCheck, id + " Failed test " + data);
assertArrayEquals(expected, CharSequenceUtils.toCharArray(builder));
assertArrayEquals(expected, CharSequenceUtils.toCharArray(builder.toString()));
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, CharSequenceUtils.toCharArray(null));
assertEquals(expected, CharSequenceUtils.lastIndexOf(cs, search, start));
assertEquals(a.toString().lastIndexOf(b.toString(), start),CharSequenceUtils.lastIndexOf(new WrapperString(a.toString()), new WrapperString(b.toString()), start),"testNewLastIndexOf fails! original : " + a + " seg : " + b + " start : " + start);
assertEquals(0, listeners.length);
assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType());
assertSame(empty, listenerSupport.getListeners());
assertEquals(1, listenerSupport.getListeners().length);
assertEquals(1, listenerSupport.getListeners().length);
assertSame(empty, listenerSupport.getListeners());
assertEquals(calledListeners.size(), 2);
assertSame(calledListeners.get(0), listener1);
assertSame(calledListeners.get(1), listener2);
assertEquals(listenerSupport.getListenerCount(), 10);
assertEquals(listenerSupport.getListenerCount(), 0);
assertEquals(0, listeners.length);
assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType());
assertSame(empty, listenerSupport.getListeners());
assertEquals(1, listenerSupport.getListeners().length);
assertEquals(2, listenerSupport.getListeners().length);
assertEquals(1, listenerSupport.getListeners().length);
assertSame(empty, listenerSupport.getListeners());
assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType());
assertEquals(1, listeners.length);
assertEquals(0, deserializedListenerSupport.getListeners().length);
assertEquals(0, handler.getEventCount("propertyChange"));
assertEquals(0, handler.getEventCount("propertyChange"));
assertEquals(1, handler.getEventCount("propertyChange"));
assertEquals("Class " + src.getClass().getName() + " does not have a public add" + ObjectChangeListener.class.getSimpleName() + " method which takes a parameter of type " + ObjectChangeListener.class.getName() + ".",e.getMessage());
assertEquals("Class " + src.getClass().getName() + " does not have a public add" + VetoableChangeListener.class.getSimpleName() + " method which takes a parameter of type " + VetoableChangeListener.class.getName() + ".",e.getMessage());
assertEquals(JAVA_0_9, get("0.9"), "0.9 failed");
assertEquals(JAVA_1_1, get("1.1"), "1.1 failed");
assertEquals(JAVA_1_2, get("1.2"), "1.2 failed");
assertEquals(JAVA_1_3, get("1.3"), "1.3 failed");
assertEquals(JAVA_1_4, get("1.4"), "1.4 failed");
assertEquals(JAVA_1_5, get("1.5"), "1.5 failed");
assertEquals(JAVA_1_6, get("1.6"), "1.6 failed");
assertEquals(JAVA_1_7, get("1.7"), "1.7 failed");
assertEquals(JAVA_1_8, get("1.8"), "1.8 failed");
assertEquals(JAVA_9, get("9"), "9 failed");
assertEquals(JAVA_10, get("10"), "10 failed");
assertEquals(JAVA_11, get("11"), "11 failed");
assertEquals(JAVA_12, get("12"), "12 failed");
assertEquals(JAVA_13, get("13"), "13 failed");
assertEquals(JAVA_14, get("14"), "14 failed");
assertEquals(JAVA_15, get("15"), "15 failed");
assertEquals(JAVA_16, get("16"), "16 failed");
assertEquals(JAVA_17, get("17"), "17 failed");
assertEquals(JAVA_18, get("18"), "18 failed");
assertEquals(JAVA_RECENT, get("1.10"), "1.10 failed");
assertEquals(get("1.5"), getJavaVersion("1.5"), "Wrapper method failed");
assertEquals(JAVA_RECENT, get("19"), "Unhandled"); // LANG-1384
assertEquals("1.2", JAVA_1_2.toString());
assertThat(new CustomCharSequence(FOO), IsNot.<CharSequence>not(FOO));
assertThat(FOO, IsNot.<CharSequence>not(new CustomCharSequence(FOO)));
assertEquals(new CustomCharSequence(FOO), new CustomCharSequence(FOO));
assertEquals(0, StringUtils.compare("abc", "abc"));
assertEquals(0, StringUtils.compare("abc", "abc", false));
assertEquals(0, StringUtils.compareIgnoreCase(null, null));
assertEquals(0, StringUtils.compareIgnoreCase("abc", "abc"));
assertEquals(0, StringUtils.compareIgnoreCase("abc", "ABC"));
assertEquals(0, StringUtils.compareIgnoreCase(null, null, false));
assertEquals(0, StringUtils.compareIgnoreCase("abc", "abc", false));
assertEquals(0, StringUtils.compareIgnoreCase("abc", "ABC", false));
assertEquals(-1, StringUtils.indexOf("", ' '));
assertEquals(0, StringUtils.indexOf("aabaabaa", 'a'));
assertEquals(2, StringUtils.indexOf("aabaabaa", 'b'));
assertEquals(2, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b'));
assertEquals(StringUtils.INDEX_NOT_FOUND, StringUtils.indexOf(new StringBuilder("aabaabaa"), -1738));
assertEquals(-1, StringUtils.indexOf("", ' ', 0));
assertEquals(-1, StringUtils.indexOf("", ' ', -1));
assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0));
assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0));
assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3));
assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9));
assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1));
assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b', 3));
assertEquals(-1, StringUtils.indexOf("", null));
assertEquals(0, StringUtils.indexOf("", ""));
assertEquals(0, StringUtils.indexOf("aabaabaa", "a"));
assertEquals(2, StringUtils.indexOf("aabaabaa", "b"));
assertEquals(1, StringUtils.indexOf("aabaabaa", "ab"));
assertEquals(0, StringUtils.indexOf("aabaabaa", ""));
assertEquals(2, StringUtils.indexOf(new StringBuilder("aabaabaa"), "b"));
assertEquals(-1, StringUtils.indexOf(null, "", 0));
assertEquals(-1, StringUtils.indexOf(null, "", -1));
assertEquals(-1, StringUtils.indexOf("", null, 0));
assertEquals(-1, StringUtils.indexOf("", null, -1));
assertEquals(0, StringUtils.indexOf("", "", 0));
assertEquals(0, StringUtils.indexOf("", "", -1));
assertEquals(0, StringUtils.indexOf("", "", 9));
assertEquals(0, StringUtils.indexOf("abc", "", 0));
assertEquals(0, StringUtils.indexOf("abc", "", -1));
assertEquals(3, StringUtils.indexOf("abc", "", 9));
assertEquals(3, StringUtils.indexOf("abc", "", 3));
assertEquals(0, StringUtils.indexOf("aabaabaa", "a", 0));
assertEquals(2, StringUtils.indexOf("aabaabaa", "b", 0));
assertEquals(1, StringUtils.indexOf("aabaabaa", "ab", 0));
assertEquals(5, StringUtils.indexOf("aabaabaa", "b", 3));
assertEquals(-1, StringUtils.indexOf("aabaabaa", "b", 9));
assertEquals(2, StringUtils.indexOf("aabaabaa", "b", -1));
assertEquals(2, StringUtils.indexOf("aabaabaa", "", 2));
assertEquals(7, StringUtils.indexOf("12345678", "8", 5));
assertEquals(7, StringUtils.indexOf("12345678", "8", 6));
assertEquals(7, StringUtils.indexOf("12345678", "8", 7)); // 7 is last index
assertEquals(-1, StringUtils.indexOf("12345678", "8", 8));
assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), "b", 3));
assertEquals(-1, StringUtils.indexOfAny("", (char[]) null));
assertEquals(-1, StringUtils.indexOfAny("", new char[0]));
assertEquals(-1, StringUtils.indexOfAny("", 'a', 'b'));
assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", (char[]) null));
assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", new char[0]));
assertEquals(0, StringUtils.indexOfAny("zzabyycdxx", 'z', 'a'));
assertEquals(3, StringUtils.indexOfAny("zzabyycdxx", 'b', 'y'));
assertEquals(-1, StringUtils.indexOfAny("ab", 'z'));
assertEquals(-1, StringUtils.indexOfAny(null, ""));
assertEquals(-1, StringUtils.indexOfAny(null, "ab"));
assertEquals(-1, StringUtils.indexOfAny("", (String) null));
assertEquals(-1, StringUtils.indexOfAny("", ""));
assertEquals(-1, StringUtils.indexOfAny("", "ab"));
assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", (String) null));
assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", ""));
assertEquals(0, StringUtils.indexOfAny("zzabyycdxx", "za"));
assertEquals(3, StringUtils.indexOfAny("zzabyycdxx", "by"));
assertEquals(-1, StringUtils.indexOfAny("ab", "z"));
assertEquals(-1, StringUtils.indexOfAny("", new String[0]));
assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {"llll"}));
assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] {""}));
assertEquals(0, StringUtils.indexOfAny("", new String[] {""}));
assertEquals(-1, StringUtils.indexOfAny("", new String[] {"a"}));
assertEquals(-1, StringUtils.indexOfAny("", new String[] {null}));
assertEquals(-1, StringUtils.indexOfAnyBut("", (char[]) null));
assertEquals(-1, StringUtils.indexOfAnyBut(""));
assertEquals(-1, StringUtils.indexOfAnyBut("", 'a', 'b'));
assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (char[]) null));
assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx"));
assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", 'z', 'a'));
assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", 'b', 'y'));
assertEquals(-1, StringUtils.indexOfAnyBut("aba", 'a', 'b'));
assertEquals(0, StringUtils.indexOfAnyBut("aba", 'z'));
assertEquals(-1, StringUtils.indexOfAnyBut(null, ""));
assertEquals(-1, StringUtils.indexOfAnyBut(null, "ab"));
assertEquals(-1, StringUtils.indexOfAnyBut("", (String) null));
assertEquals(-1, StringUtils.indexOfAnyBut("", ""));
assertEquals(-1, StringUtils.indexOfAnyBut("", "ab"));
assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (String) null));
assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", ""));
assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", "za"));
assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", "by"));
assertEquals(0, StringUtils.indexOfAnyBut("ab", "z"));
assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null));
assertEquals(-1, StringUtils.indexOfIgnoreCase(null, ""));
assertEquals(-1, StringUtils.indexOfIgnoreCase("", null));
assertEquals(0, StringUtils.indexOfIgnoreCase("", ""));
assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a"));
assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A"));
assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b"));
assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B"));
assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab"));
assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB"));
assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", ""));
assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", -1));
assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 0));
assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 1));
assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 2));
assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 3));
assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 4));
assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 5));
assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 6));
assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 7));
assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 8));
assertEquals(1, StringUtils.indexOfIgnoreCase("aab", "AB", 1));
assertEquals(5, StringUtils.indexOfIgnoreCase("aabaabaa", "", 5));
assertEquals(-1, StringUtils.indexOfIgnoreCase("ab", "AAB", 0));
assertEquals(-1, StringUtils.indexOfIgnoreCase("aab", "AAB", 1));
assertEquals(-1, StringUtils.indexOfIgnoreCase("abc", "", 9));
assertEquals(-1, StringUtils.lastIndexOf("", ' '));
assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a'));
assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b'));
assertEquals(5, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b'));
assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0));
assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1));
assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8));
assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8));
assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3));
assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9));
assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1));
assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0));
assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b', 2));
assertEquals(StringUtils.INDEX_NOT_FOUND, StringUtils.lastIndexOf(CharBuffer.wrap("[%{.c.0rro"), -1738, 982));
assertEquals(-1, StringUtils.lastIndexOf("", null));
assertEquals(-1, StringUtils.lastIndexOf("", "a"));
assertEquals(0, StringUtils.lastIndexOf("", ""));
assertEquals(8, StringUtils.lastIndexOf("aabaabaa", ""));
assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a"));
assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b"));
assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab"));
assertEquals(4, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "ab"));
assertEquals(-1, StringUtils.lastIndexOf(null, "", 0));
assertEquals(-1, StringUtils.lastIndexOf(null, "", -1));
assertEquals(-1, StringUtils.lastIndexOf("", null, 0));
assertEquals(-1, StringUtils.lastIndexOf("", null, -1));
assertEquals(0, StringUtils.lastIndexOf("", "", 0));
assertEquals(-1, StringUtils.lastIndexOf("", "", -1));
assertEquals(0, StringUtils.lastIndexOf("", "", 9));
assertEquals(0, StringUtils.lastIndexOf("abc", "", 0));
assertEquals(-1, StringUtils.lastIndexOf("abc", "", -1));
assertEquals(3, StringUtils.lastIndexOf("abc", "", 9));
assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a", 8));
assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 8));
assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab", 8));
assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 3));
assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 9));
assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", -1));
assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 0));
assertEquals(0, StringUtils.lastIndexOf("aabaabaa", "a", 0));
assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "a", -1));
assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 9));
assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 8));
assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 7)); // 7 is last index
assertEquals(-1, StringUtils.lastIndexOf("12345678", "8", 6));
assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 1));
assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 2));
assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 2));
assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 3));
assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "b", 3));
assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));   // test both types of ...
assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); // ... varargs invocation
assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence) null));   // test both types of ...
assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence[]) null)); // ... varargs invocation
assertEquals(-1, StringUtils.lastIndexOfAny("", new String[0]));
assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {"llll"}));
assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] {""}));
assertEquals(0, StringUtils.lastIndexOfAny("", new String[] {""}));
assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] {"a"}));
assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] {null}));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, ""));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "a"));
assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", ""));
assertEquals(8, StringUtils.lastIndexOfIgnoreCase("aabaabaa", ""));
assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "a"));
assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A"));
assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "b"));
assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B"));
assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "ab"));
assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB"));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("ab", "AAB"));
assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aab", "AAB"));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", 0));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", -1));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null, 0));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null, -1));
assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "", 0));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "", -1));
assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "", 9));
assertEquals(0, StringUtils.lastIndexOfIgnoreCase("abc", "", 0));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("abc", "", -1));
assertEquals(3, StringUtils.lastIndexOfIgnoreCase("abc", "", 9));
assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 8));
assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 8));
assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB", 8));
assertEquals(2, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 3));
assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 9));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", -1));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 0));
assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 0));
assertEquals(1, StringUtils.lastIndexOfIgnoreCase("aab", "AB", 1));
assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42) );
assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42) );
assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42) );
assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1) );
assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2) );
assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1) );
assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2) );
assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1) );
assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2) );
assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1) );
assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2) );
assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1));
assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1));
assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0));
assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0));
assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1));
assertEquals(0, StringUtils.ordinalIndexOf("", "", 1));
assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1));
assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1));
assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1));
assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1));
assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2));
assertEquals(0, StringUtils.ordinalIndexOf("", "", 2));
assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2));
assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2));
assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2));
assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2));
assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE));
assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE));
assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0));
assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1));
assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2));
assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3));
assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4));
assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5));
assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6));
assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7));
assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8));
assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9));
assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10));
assertEquals(0, StringUtils.ordinalIndexOf("aaaaaa", "aa", 1));
assertEquals(1, StringUtils.ordinalIndexOf("aaaaaa", "aa", 2));
assertEquals(2, StringUtils.ordinalIndexOf("aaaaaa", "aa", 3));
assertEquals(3, StringUtils.ordinalIndexOf("aaaaaa", "aa", 4));
assertEquals(4, StringUtils.ordinalIndexOf("aaaaaa", "aa", 5));
assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaa", "aa", 6));
assertEquals(0, StringUtils.ordinalIndexOf("ababab", "aba", 1));
assertEquals(2, StringUtils.ordinalIndexOf("ababab", "aba", 2));
assertEquals(-1, StringUtils.ordinalIndexOf("ababab", "aba", 3));
assertEquals(0, StringUtils.ordinalIndexOf("abababab", "abab", 1));
assertEquals(2, StringUtils.ordinalIndexOf("abababab", "abab", 2));
assertEquals(4, StringUtils.ordinalIndexOf("abababab", "abab", 3));
assertEquals(-1, StringUtils.ordinalIndexOf("abababab", "abab", 4));
assertEquals(0, StringUtils.ordinalIndexOf("abc", "ab", 1));
assertEquals(0, StringUtils.ordinalIndexOf("abaabaab", "ab", 1));
assertEquals(3, StringUtils.ordinalIndexOf("abaabaab", "ab", 2));
assertEquals(6, StringUtils.ordinalIndexOf("abaabaab", "ab", 3));
assertEquals(0, StringUtils.ordinalIndexOf("abababa", "aba", 1));
assertEquals(2, StringUtils.ordinalIndexOf("abababa", "aba", 2));
assertEquals(4, StringUtils.ordinalIndexOf("abababa", "aba", 3));
assertEquals(0, StringUtils.ordinalIndexOf("abababab", "abab", 1));
assertEquals(2, StringUtils.ordinalIndexOf("abababab", "abab", 2));
assertEquals(4, StringUtils.ordinalIndexOf("abababab", "abab", 3));
assertEquals(1, ThreadUtils.findThreadsByName(t4.getName(), threadGroup3.getName()).size());
assertEquals(0, ThreadUtils.findThreadsByName(t4.getName(), threadGroup2.getName()).size());
assertEquals(2, ThreadUtils.findThreadsByName(t11.getName(), threadGroup7.getName()).size());
assertEquals(0, ThreadUtils.findThreadsByName("some_thread_which_does_not_exist_18762ZucTT").size());
assertEquals(0, ThreadUtils.findThreadGroupsByName("some_thread_group_which_does_not_exist_18762ZucTTII").size());
assertEquals("system", systemThreadGroup.getName());
assertEquals(1, ThreadUtils.findThreadsByName("thread1_XXOOPP__").size());
assertEquals(1, ThreadUtils.findThreadsByName("thread1_XXOOPP__", "thread_group_DDZZ99__").size());
assertEquals(1, ThreadUtils.findThreadsByName("thread2_XXOOPP__", "thread_group_DDZZ99__").size());
assertEquals(0, ThreadUtils.findThreadsByName("thread1_XXOOPP__", "non_existent_thread_group_JJHHZZ__").size());
assertEquals(0, ThreadUtils.findThreadsByName("non_existent_thread_BBDDWW__", "thread_group_DDZZ99__").size());
assertEquals(1, ThreadUtils.findThreadGroupsByName("thread_group_DDZZ99__").size());
assertEquals(0, ThreadUtils.findThreadGroupsByName("non_existent_thread_group_JJHHZZ__").size());
assertSame(t1, ThreadUtils.findThreadById(t1.getId(), "thread_group_DDZZ99__"));
assertSame(t2, ThreadUtils.findThreadById(t2.getId(), "thread_group_DDZZ99__"));
assertEquals(1, ThreadUtils.findThreadsByName("thread1_XXOOPP__").size());
assertEquals(1, ThreadUtils.findThreadsByName("thread1_XXOOPP__", threadGroup).size());
assertEquals(1, ThreadUtils.findThreadsByName("thread2_XXOOPP__", threadGroup).size());
assertEquals(0, ThreadUtils.findThreadsByName("thread1_XXOOPP__", deadThreadGroup).size());
assertEquals(0, ThreadUtils.findThreadsByName("thread2_XXOOPP__", threadGroup).size());
assertEquals(1, ThreadUtils.findThreadsByName("thread2_XXOOLL__").size());
assertSame(t1, ThreadUtils.findThreadById(t1.getId()));
assertSame(t2, ThreadUtils.findThreadById(t2.getId()));
assertEquals(2, ThreadUtils.findThreadsByName("thread1_XXOOLL__").size());
assertEquals("apache", stringClone.getValue());
assertArrayEquals(new int[]{1}, ObjectUtils.clone(new int[]{1}));
assertEquals(NoSuchMethodException.class, e.getCause().getClass());
assertSame(foo, ObjectUtils.median(cmp, foo));
assertSame(bar, ObjectUtils.median(cmp, foo, bar));
assertSame(baz, ObjectUtils.median(cmp, foo, bar, baz));
assertSame(baz, ObjectUtils.median(cmp, foo, bar, baz, blah));
assertSame(blah, ObjectUtils.median(cmp, foo, bar, baz, blah, wah));
assertEquals(0, ObjectUtils.compare(nullValue, nullValue), "Null Null false");
assertEquals(0, ObjectUtils.compare(nullValue, nullValue, true), "Null Null true");
assertEquals(-1, ObjectUtils.compare(nullValue, one), "Null one false");
assertEquals(1, ObjectUtils.compare(nullValue, one, true), "Null one true");
assertEquals(1, ObjectUtils.compare(one, nullValue), "one Null false");
assertEquals(-1, ObjectUtils.compare(one, nullValue, true), "one Null true");
assertEquals(-1, ObjectUtils.compare(one, two), "one two false");
assertEquals(-1, ObjectUtils.compare(one, two, true), "one two true");
assertEquals((byte) 3, ObjectUtils.CONST((byte) 3), "CONST(byte)");
assertEquals((char) 3, ObjectUtils.CONST((char) 3), "CONST(char)");
assertEquals((short) 3, ObjectUtils.CONST((short) 3), "CONST(short)");
assertEquals(3, ObjectUtils.CONST(3), "CONST(int)");
assertEquals(3L, ObjectUtils.CONST(3L), "CONST(long)");
assertEquals(3f, ObjectUtils.CONST(3f), "CONST(float)");
assertEquals(3.0, ObjectUtils.CONST(3.0), "CONST(double)");
assertEquals("abc", ObjectUtils.CONST("abc"), "CONST(Object)");
assertSame(dflt, ObjectUtils.defaultIfNull(null, dflt), "dflt was not returned when o was null");
assertSame(o, ObjectUtils.defaultIfNull(o, dflt), "dflt was returned when o was not null");
assertSame(dflt, ObjectUtils.getIfNull(null, () -> dflt), "dflt was not returned when o was null");
assertSame(o, ObjectUtils.getIfNull(o, () -> dflt), "dflt was returned when o was not null");
assertSame(o, ObjectUtils.getIfNull(FOO, () -> dflt), "dflt was returned when o was not null");
assertSame(o, ObjectUtils.getIfNull("foo", () -> dflt), "dflt was returned when o was not null");
assertEquals(0, callsCounter.getValue());
assertEquals(1, callsCounter.getValue());
assertEquals("", ObjectUtils.firstNonNull(null, ""));
assertEquals("123", firstNonNullGenerics);
assertEquals("123", ObjectUtils.firstNonNull("123", null, "456", null));
assertSame(Boolean.TRUE, ObjectUtils.firstNonNull(Boolean.TRUE));
assertEquals("", ObjectUtils.getFirstNonNull(() -> null, () -> ""));
assertEquals("1", ObjectUtils.getFirstNonNull(() -> null, () -> "1", () -> "2", () -> null));
assertEquals("123", ObjectUtils.getFirstNonNull(() -> "123", () -> null, () -> "456"));
assertEquals("123", ObjectUtils.getFirstNonNull(() -> null, () -> "123", () -> fail("Supplier after first non-null value should not be evaluated")));
assertEquals(Boolean.TRUE, ObjectUtils.getFirstNonNull(() -> null, () -> Boolean.TRUE));
assertEquals("a".hashCode(), ObjectUtils.hashCode("a"));
assertEquals(Integer.toHexString(Objects.hashCode(i)), ObjectUtils.hashCodeHex(i));
assertEquals(Integer.toHexString(Objects.hashCode(zero)), ObjectUtils.hashCodeHex(zero));
assertEquals(Integer.toHexString(Objects.hashCode(null)), ObjectUtils.hashCodeHex(null));
assertEquals(1, ObjectUtils.hashCodeMulti(array));
assertEquals(list0.hashCode(), ObjectUtils.hashCodeMulti());
assertEquals(list1.hashCode(), ObjectUtils.hashCodeMulti("a"));
assertEquals(list2.hashCode(), ObjectUtils.hashCodeMulti("a", "b"));
assertEquals(list3.hashCode(), ObjectUtils.hashCodeMulti("a", "b", "c"));
assertEquals(1, ObjectUtils.hashCodeMulti(array));
assertEquals(Integer.toHexString(System.identityHashCode(i)), ObjectUtils.identityHashCodeHex(i));
assertEquals(Integer.toHexString(System.identityHashCode(zero)), ObjectUtils.identityHashCodeHex(zero));
assertEquals(Integer.toHexString(System.identityHashCode(null)), ObjectUtils.identityHashCodeHex(null));
assertEquals(expected, appendable.toString());
assertEquals(expected, ObjectUtils.identityToString(i));
assertEquals(expected, builder.toString());
assertEquals("java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)),ObjectUtils.identityToString(FOO));
assertEquals(expected, buffer.toString());
assertEquals(expected, builder.toString());
assertEquals(expected, builder.toString());
assertNotSame(nonNullComparable1, nonNullComparable2);
assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1));
assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, null));
assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1, null));
assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, nonNullComparable2));
assertSame(nonNullComparable2, ObjectUtils.max(nonNullComparable2, nonNullComparable1));
assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, minComparable));
assertSame(nonNullComparable1, ObjectUtils.max(minComparable, nonNullComparable1));
assertSame(nonNullComparable1, ObjectUtils.max(null, minComparable, null, nonNullComparable1));
assertEquals("foo", ObjectUtils.median("foo"));
assertEquals("bar", ObjectUtils.median("foo", "bar"));
assertEquals("baz", ObjectUtils.median("foo", "bar", "baz"));
assertEquals("baz", ObjectUtils.median("foo", "bar", "baz", "blah"));
assertEquals("blah", ObjectUtils.median("foo", "bar", "baz", "blah", "wah"));
assertEquals(Integer.valueOf(5),ObjectUtils.median(Integer.valueOf(1), Integer.valueOf(5), Integer.valueOf(10)));
assertEquals(Integer.valueOf(7),ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8),Integer.valueOf(9)));
assertEquals(Integer.valueOf(6),ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8)));
assertNotSame(nonNullComparable1, nonNullComparable2);
assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1));
assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null));
assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null));
assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2));
assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1));
assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable));
assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1));
assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable));
assertEquals("foo", ObjectUtils.mode("foo", "bar", "baz", "foo"));
assertEquals(Integer.valueOf(9),ObjectUtils.mode("foo", "bar", "baz", Integer.valueOf(9), Integer.valueOf(10), Integer.valueOf(9)));
assertSame(ObjectUtils.NULL, SerializationUtils.clone(ObjectUtils.NULL));
assertEquals("apache", stringClone.getValue()
assertEquals(message, e.getMessage());
assertEquals(message, e.getCause().getMessage());
assertEquals(message1, e.getMessage());
assertEquals(message2, e.getCause().getMessage());
assertEquals('b', Uncheck.get(stream::read).intValue());
assertEquals(1, Uncheck.apply(n -> stream.skip(n), 1).intValue());
assertEquals('b', Uncheck.get(stream::read).intValue());
assertEquals(1, Uncheck.apply((o, l) -> stream.read(buf, o, l), 0, 1).intValue());
assertEquals(1, Uncheck.apply((b, o, l) -> stream.read(b, o, l), buf, 0, 1).intValue());
assertEquals('a', Uncheck.get(() -> newInputStream().read()).intValue());
assertEquals('b', Uncheck.get(stream::read).intValue());
assertEquals(0, c.compare(lessFile, moreFile), "less,more");
assertEquals(0, c.compare(moreFile, lessFile), "more,less");
assertEquals("CompositeFileComparator{}", c.toString(), "toString");
assertEquals(0, c.compare(lessFile, moreFile), "less,more");
assertEquals(0, c.compare(moreFile, lessFile), "more,less");
assertEquals("CompositeFileComparator{}", c.toString(), "toString");
assertEquals(0, c.compare(equalFile1, equalFile2), "equal");
assertEquals(0, sensitive.compare(equalFile1, equalFile2), "sensitive file1 & file2 = 0");
assertEquals(0, insensitive.compare(equalFile1, equalFile2), "insensitive file1 & file2 = 0");
assertEquals(0, insensitive.compare(equalFile1, file3), "insensitive file1 & file3 = 0");
assertEquals(0, comparator.compare(equalFile1, equalFile2), "equal");
assertEquals(0, reverse.compare(equalFile1, equalFile2), "equal");
assertSame(lessFile, files[0], "equal");
assertSame(equalFile1, files[1], "less");
assertSame(moreFile, files[2], "more");
assertSame(lessFile, files.get(0), "equal");
assertSame(equalFile1, files.get(1), "less");
assertSame(moreFile, files.get(2), "more");
assertEquals(0, sensitive.compare(equalFile1, equalFile2), "sensitive file1 & file2 = 0");
assertEquals(0, insensitive.compare(equalFile1, equalFile2), "insensitive file1 & file2 = 0");
assertEquals(0, insensitive.compare(equalFile1, file3), "insensitive file1 & file3 = 0");
assertEquals(0, comparator.compare(smallerDir, largerDir), "sumDirectoryContents=false");
assertEquals(-1, SizeFileComparator.SIZE_SUMDIR_COMPARATOR.compare(smallerDir, largerDir), "less");
assertEquals(1, SizeFileComparator.SIZE_SUMDIR_REVERSE.compare(smallerDir, largerDir), "less");
assertEquals(0, sensitive.compare(equalFile1, equalFile2), "sensitive file1 & file2 = 0");
assertEquals(0, insensitive.compare(equalFile1, equalFile2), "insensitive file1 & file2 = 0");
assertEquals(0, insensitive.compare(equalFile1, file3), "insensitive file1 & file3 = 0");
/** Assert that the contents of two byte arrays are the same. */private void assertEqualContent(final byte[] b0, final byte[] b1) {assertArrayEquals(b0, b1, "Content not equal according to java.util.Arrays#equals()");
assertEquals(AppendableWriter.class, w.getClass());
assertEquals(StringBuilderWriter.class, w.getClass());
assertDoesNotThrow(() -> IOUtils.close((Closeable) null));
assertDoesNotThrow(() -> IOUtils.close(new StringReader("s")));
assertDoesNotThrow(() -> IOUtils.close(nullCloseable, null)); // null consumer
assertDoesNotThrow(() -> IOUtils.close(new StringReader("s"), null)); // null consumer
assertDoesNotThrow(() -> IOUtils.close(new ThrowOnCloseReader(new StringReader("s")), null)); // null consumer
assertDoesNotThrow(() -> IOUtils.close(nullCloseable, nullConsumer));
assertDoesNotThrow(() -> IOUtils.close(new StringReader("s"), nullConsumer));
assertDoesNotThrow(() -> IOUtils.close(new ThrowOnCloseReader(new StringReader("s")), nullConsumer));
assertDoesNotThrow(() -> IOUtils.close(nullCloseable, silentConsumer));
assertDoesNotThrow(() -> IOUtils.close(new StringReader("s"), silentConsumer));
assertDoesNotThrow(() -> IOUtils.close(new ThrowOnCloseReader(new StringReader("s")), silentConsumer));
assertDoesNotThrow(() -> IOUtils.close(nullCloseable, noisyConsumer)); // no throw
assertDoesNotThrow(() -> IOUtils.close(new StringReader("s"), noisyConsumer)); // no throw
assertDoesNotThrow(() -> IOUtils.close(nullCloseable, nullCloseable));
assertDoesNotThrow(() -> IOUtils.close(closeables));
assertDoesNotThrow(() -> IOUtils.close((Closeable[]) null));
assertDoesNotThrow(() -> IOUtils.close(new StringReader("s"), nullCloseable));
assertDoesNotThrow(() -> IOUtils.closeQuietly(closeable, null, closeable));
assertDoesNotThrow(() -> IOUtils.closeQuietly(Arrays.asList(closeable, null, closeable)));
assertDoesNotThrow(() -> IOUtils.closeQuietly(Stream.of(closeable, null, closeable)));
assertDoesNotThrow(() -> IOUtils.closeQuietly((Iterable<Closeable>) null));
assertDoesNotThrow(() -> {IOUtils.closeQuietly(BrokenInputStream.INSTANCE);
assertDoesNotThrow(() -> {IOUtils.closeQuietly(BrokenOutputStream.INSTANCE);
@SuppressWarnings("squid:S2699") // Suppress "Add at least one assertion to this test case"@Testpublic void testCloseQuietly_Selector() {Selector selector = null;
@SuppressWarnings("squid:S2699") // Suppress "Add at least one assertion to this test case"@Testpublic void testCloseQuietly_SelectorIOException() {final Selector selector = new SelectorAdapter() {@Overridepublic void close() throws IOException {throw new IOException();
@SuppressWarnings("squid:S2699") // Suppress "Add at least one assertion to this test case"@Testpublic void testCloseQuietly_SelectorNull() {final Selector selector = null;
@SuppressWarnings("squid:S2699") // Suppress "Add at least one assertion to this test case"@Testpublic void testCloseQuietly_SelectorTwice() {Selector selector = null;
assertDoesNotThrow(() -> IOUtils.closeQuietly((ServerSocket) null));
assertDoesNotThrow(() -> IOUtils.closeQuietly(new ServerSocket()));
assertDoesNotThrow(() -> {IOUtils.closeQuietly(new ServerSocket() {@Overridepublic void close() throws IOException {throw new IOException();
assertDoesNotThrow(() -> IOUtils.closeQuietly((Socket) null));
assertDoesNotThrow(() -> IOUtils.closeQuietly(new Socket()));
assertDoesNotThrow(() -> {IOUtils.closeQuietly(new Socket() {@Overridepublic synchronized void close() throws IOException {throw new IOException();
assertDoesNotThrow(() -> IOUtils.close((URLConnection) null));
assertDoesNotThrow(() -> IOUtils.close(new URL("https://www.apache.org/").openConnection()));
assertDoesNotThrow(() -> IOUtils.close(new URL("file:///").openConnection()));
assertEquals("\n", IOUtils.LINE_SEPARATOR_UNIX);
assertEquals("\r\n", IOUtils.LINE_SEPARATOR_WINDOWS);
assertEquals("\r\n", IOUtils.LINE_SEPARATOR);
assertEquals("\n", IOUtils.LINE_SEPARATOR);
assertEquals(size, IOUtils.consume(in), "consume()");
assertEquals(size, IOUtils.consume(in), "consume()");
assertEqualContent(result, bytes);
assertEquals("wxabcd1234", new String(buffer, 0, buffer.length, StandardCharsets.UTF_8));
assertEquals("wxabcd1234", new String(buffer));
assertEquals(fileSize, bytes.length);
assertEquals(fileSize, bytes.length);
assertEquals(fileSize, bytes.length);
assertEquals(fileSize, bytes.length);
assertEquals(fileSize, content.getBytes().length);
assertEquals(fileSize, content.getBytes().length);
assertEquals(fileSize, content.getBytes().length);
assertEquals(fileSize, content.getBytes().length);
@SuppressWarnings("squid:S2699") // Suppress "Add at least one assertion to this test case"@Testpublic void testResourceToString_NullCharset() throws Exception {IOUtils.resourceToString("/org/apache/commons/io//test-file-utf8.bin", null);
@SuppressWarnings("squid:S2699") // Suppress "Add at least one assertion to this test case"@Testpublic void testResourceToString_NullCharset_WithClassLoader() throws Exception {IOUtils.resourceToString("org/apache/commons/io/test-file-utf8.bin", null, ClassLoader.getSystemClassLoader());
private void assertMatch(final String text, final String wildcard, final boolean expected) {assertEquals(expected, FilenameUtils.wildcardMatch(text, wildcard), text + " " + wildcard);
assertMatch("log.txt", "log.txt", true);
assertMatch("log.txt1", "log.txt", false);
assertMatch("log.txt", "log.txt*", true);
assertMatch("log.txt", "log.txt*1", false);
assertMatch("log.txt", "*log.txt*", true);
assertMatch("log.txt", "*.txt", true);
assertMatch("txt.log", "*.txt", false);
assertMatch("config.ini", "*.ini", true);
assertMatch("config.txt.bak", "con*.txt", false);
assertMatch("log.txt9", "*.txt?", true);
assertMatch("log.txt", "*.txt?", false);
assertMatch("progtestcase.java~5~", "*test*.java~*~", true);
assertMatch("progtestcase.java;5~", "*test*.java~*~", false);
assertMatch("progtestcase.java~5", "*test*.java~*~", false);
assertMatch("log.txt", "log.*", true);
assertMatch("log.txt", "log?*", true);
assertMatch("log.txt12", "log.txt??", true);
assertMatch("log.log", "log**log", true);
assertMatch("log.log", "log**", true);
assertMatch("log.log", "log.**", true);
assertMatch("log.log", "**.log", true);
assertMatch("log.log", "**log", true);
assertMatch("log.log", "log*log", true);
assertMatch("log.log", "log*", true);
assertMatch("log.log", "log.*", true);
assertMatch("log.log", "*.log", true);
assertMatch("log.log", "*log", true);
assertMatch("log.log", "*log?", false);
assertMatch("log.log", "*log?*", true);
assertMatch("log.log.abc", "*log?abc", true);
assertMatch("log.log.abc.log.abc", "*log?abc", true);
assertMatch("log.log.abc.log.abc.d", "*log?abc?d", true);
assertEquals(WINDOWS, FilenameUtils.wildcardMatch("FOO", "*Foo", IOCase.SYSTEM));
assertEquals(WINDOWS, FilenameUtils.wildcardMatch("BARFOO", "*Foo", IOCase.SYSTEM));
assertEquals(WINDOWS, FilenameUtils.wildcardMatch("FOO", "Foo*", IOCase.SYSTEM));
assertEquals(WINDOWS, FilenameUtils.wildcardMatch("FOOBAR", "Foo*", IOCase.SYSTEM));
assertEquals(WINDOWS, FilenameUtils.wildcardMatchOnSystem("FOO", "*Foo"));
assertEquals(WINDOWS, FilenameUtils.wildcardMatchOnSystem("BARFOO", "*Foo"));
assertEquals(WINDOWS, FilenameUtils.wildcardMatchOnSystem("FOO", "Foo*"));
assertEquals(WINDOWS, FilenameUtils.wildcardMatchOnSystem("FOOBAR", "Foo*"));
assertArrayEquals(new String[] { "Ad", "*", "er" }, FilenameUtils.splitOnTokens("Ad*er"));
assertArrayEquals(new String[] { "Ad", "?", "er" }, FilenameUtils.splitOnTokens("Ad?er"));
assertArrayEquals(new String[] { "Test", "*", "?", "One" }, FilenameUtils.splitOnTokens("Test*?One"));
assertArrayEquals(new String[] { "Test", "?", "*", "One" }, FilenameUtils.splitOnTokens("Test?*One"));
assertArrayEquals(new String[] { "*" }, FilenameUtils.splitOnTokens("****"));
assertArrayEquals(new String[] { "*", "?", "?", "*" }, FilenameUtils.splitOnTokens("*??*"));
assertArrayEquals(new String[] { "*", "?", "*", "?", "*" }, FilenameUtils.splitOnTokens("*?**?*"));
assertArrayEquals(new String[] { "*", "?", "*", "?", "*" }, FilenameUtils.splitOnTokens("*?***?*"));
assertArrayEquals(new String[] { "h", "?", "?", "*" }, FilenameUtils.splitOnTokens("h??*"));
assertArrayEquals(new String[] { "" }, FilenameUtils.splitOnTokens(""));
assertEquals(0, in.available(), "Not all bytes were read");
assertEquals(inData.length, inSize, "Sizes differ");
assertArrayEquals(inData, inData2, "Content differs");
assertEquals(0, in.available(), "Not all bytes were read");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(size, IOUtils.copyLarge(in, out), "copyLarge()");
assertEquals(0, in.available(), "Not all bytes were read");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(0, in.available(), "Not all bytes were read");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(0, in.available(), "Not all bytes were read");
assertArrayEquals(inData, bytes, "Content differs");
assertEquals(0, in.available(), "Not all bytes were read");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(inData.length, count, "The number of characters returned by copy is wrong");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(size, IOUtils.copy(reader, (Appendable) writer));
assertEquals(size, IOUtils.copyLarge(reader, writer), "copy()");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertArrayEquals(inData, bytes, "Content differs");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(inData.length, count, "The number of characters returned by copy is wrong");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(-1, IOUtils.copy(reader, writer));
assertEquals(size, IOUtils.copyLarge(reader, writer), "copyLarge()");
assertArrayEquals(Files.readAllBytes(Paths.get("src/test/resources" + name)), Files.readAllBytes(path.get()));
assertArrayEquals(Files.readAllBytes(Paths.get("src/test/resources" + name)), baout.toByteArray());
assertEquals(listener, it.next(), "Added");
assertEquals("FileAlterationObserver[file='" + file.getPath() +  "', listeners=0]",observer.toString());
assertEquals("FileAlterationObserver[file='" + file.getPath() +  "', CanReadFileFilter, listeners=0]",observer.toString());
assertEquals(file, observer.getDirectory());
assertEquals(fe.getChildren(), SerializationUtils.roundtrip(fe).getChildren());
assertEquals(fe.getClass(), SerializationUtils.roundtrip(fe).getClass());
assertEquals(fe.getFile(), SerializationUtils.roundtrip(fe).getFile());
assertEquals(fe.getLastModified(), SerializationUtils.roundtrip(fe).getLastModified());
assertEquals(fe.getLastModifiedFileTime(), SerializationUtils.roundtrip(fe).getLastModifiedFileTime());
assertEquals(fe.getLength(), SerializationUtils.roundtrip(fe).getLength());
assertEquals(fe.getLevel(), SerializationUtils.roundtrip(fe).getLevel());
assertEquals(fe.getName(), SerializationUtils.roundtrip(fe).getName());
assertEquals(fe.getParent(), SerializationUtils.roundtrip(fe).getParent());
assertEquals(expected, actual);
assertEquals(expectedFt, actual.unwrap());
assertEquals(0, actual.compareTo(expectedFt));
assertEquals(expectedFt.hashCode(), actual.hashCode());
assertEquals(expectedFt.toInstant(), actual.toInstant());
assertEquals(expectedFt.toMillis(), actual.toMillis());
assertEquals(expectedFt.toString(), actual.toString());
assertEquals(123, monitor.getInterval(), "Interval");
assertEquals(observer, it.next(), "Added");
assertEquals(observer, iterator.next());
assertEquals(10000, monitor.getInterval(), "Interval");
assertEquals(interval, monitor.getInterval(), "Interval");
assertEquals(interval, monitor.getInterval(), "Interval");
assertEquals(dirCreate, listener.getCreatedDirectories().size(), label + ": No. of directories created");
assertEquals(dirChange, listener.getChangedDirectories().size(), label + ": No. of directories changed");
assertEquals(dirDelete, listener.getDeletedDirectories().size(), label + ": No. of directories deleted");
assertEquals(fileCreate, listener.getCreatedFiles().size(), label + ": No. of files created");
assertEquals(fileChange, listener.getChangedFiles().size(), label + ": No. of files changed");
assertEquals(fileDelete, listener.getDeletedFiles().size(), label + ": No. of files deleted");
assertEquals(1, visitor.getPathCounters().getFileCounter().get());
assertEquals(1, visitor.getPathCounters().getDirectoryCounter().get());
assertEquals(1, visitor.getFileList().size());
assertNotEquals(Counters.noopPathCounters(), visitor.getPathCounters());
CounterAssertions.assertZeroCounters(visitor.getPathCounters());
CounterAssertions.assertZeroCounters(visitor.getPathCounters());
assertNotEquals(Counters.noopPathCounters(), visitor.getPathCounters());
CounterAssertions.assertZeroCounters(visitor.getPathCounters());
CounterAssertions.assertZeroCounters(visitor.getPathCounters());
assertFiltering(filter1, oldFile, true);
assertFiltering(filter2, oldFile, true);
assertFiltering(filter3, oldFile, false);
assertFiltering(filter4, oldFile, true);
assertFiltering(filter5, oldFile, true);
assertFiltering(filter6, oldFile, false);
assertFiltering(filter7, oldFile, true);
assertFiltering(filter8, oldFile, true);
assertFiltering(filter9, oldFile, false);
assertFiltering(filter1, newFile, false);
assertFiltering(filter2, newFile, false);
assertFiltering(filter3, newFile, true);
assertFiltering(filter4, newFile, false);
assertFiltering(filter5, newFile, false);
assertFiltering(filter6, newFile, true);
assertFiltering(filter7, newFile, false);
assertFiltering(filter8, newFile, false);
assertFiltering(filter9, newFile, true);
assertFiltering(filter1, oldPath, true);
assertFiltering(filter2, oldPath, true);
assertFiltering(filter3, oldPath, false);
assertFiltering(filter4, oldPath, true);
assertFiltering(filter5, oldPath, true);
assertFiltering(filter6, oldPath, false);
assertFiltering(filter7, oldPath, true);
assertFiltering(filter8, oldPath, true);
assertFiltering(filter9, oldPath, false);
assertFiltering(filter1, newPath, false);
assertFiltering(filter2, newPath, false);
assertFiltering(filter3, newPath, true);
assertFiltering(filter4, newPath, false);
assertFiltering(filter5, newPath, false);
assertFiltering(filter6, newPath, true);
assertFiltering(filter7, newPath, false);
assertFiltering(filter8, newPath, false);
assertFiltering(filter9, newPath, true);
assertFiltering(trueFilter.and(trueFilter), new File("foo.test"), true);
assertFiltering(trueFilter.and(falseFilter), new File("foo.test"), false);
assertFiltering(falseFilter.and(trueFilter), new File("foo.test"), false);
assertFiltering(falseFilter.and(falseFilter), new File("foo.test"), false);
assertFiltering(new AndFileFilter(trueFilter, trueFilter), new File("foo.test"), true);
assertFiltering(new AndFileFilter(trueFilter, falseFilter), new File("foo.test"), false);
assertFiltering(new AndFileFilter(falseFilter, trueFilter), new File("foo.test"), false);
assertFiltering(new AndFileFilter(falseFilter, falseFilter), new File("foo.test"), false);
assertFiltering(new AndFileFilter(filters), new File("test"), false);
assertFiltering(new AndFileFilter(), new File("test"), false);
assertFiltering(new AndFileFilter(trueFilter, trueFilter, trueFilter), new File("foo.test"), true);
assertFiltering(new AndFileFilter(trueFilter, falseFilter, falseFilter), new File("foo.test"), false);
assertFiltering(new AndFileFilter(falseFilter, trueFilter, trueFilter), new File("foo.test"), false);
assertFiltering(new AndFileFilter(falseFilter, falseFilter, falseFilter), new File("foo.test"), false);
assertFiltering(new AndFileFilter(filters), new File("test"), false);
assertFiltering(new AndFileFilter(), new File("test"), false);
assertFiltering(CanExecuteFileFilter.CAN_EXECUTE, executablePath.get(), true);
assertFiltering(CanExecuteFileFilter.CAN_EXECUTE, executableFile, true);
assertFiltering(CanExecuteFileFilter.CANNOT_EXECUTE, executablePath.get(), false);
assertFiltering(CanExecuteFileFilter.CANNOT_EXECUTE, executableFile, false);
assertFiltering(CanReadFileFilter.CAN_READ, readOnlyFile, true);
assertFiltering(CanReadFileFilter.CAN_READ, readOnlyPath, true);
assertFiltering(CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
assertFiltering(CanReadFileFilter.CANNOT_READ, readOnlyPath, false);
assertFiltering(CanReadFileFilter.READ_ONLY, readOnlyFile, true);
assertFiltering(CanReadFileFilter.READ_ONLY, readOnlyPath, true);
assertFiltering(CanWriteFileFilter.CAN_WRITE, temporaryFolder, true);
assertFiltering(CanWriteFileFilter.CANNOT_WRITE, temporaryFolder, false);
assertFiltering(CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
assertFiltering(CanWriteFileFilter.CAN_WRITE, readOnlyPath, false);
assertFiltering(CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
assertFiltering(CanWriteFileFilter.CANNOT_WRITE, readOnlyPath, true);
assertFiltering(filter, testFile, false);
assertFiltering(filter, testFile, false);
assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.txt.bak"), false);
assertFiltering(filter, new File("log.txt").toPath(), true);
assertFiltering(filter, new File("log1.txt"), true);
assertFiltering(filter, new File("log12.txt"), false);
assertFiltering(filter, new File("log1.txt").toPath(), true);
assertFiltering(filter, new File("log12.txt").toPath(), false);
assertFiltering(filter, new File("openAB.102504"), true);
assertFiltering(filter, new File("openA.102504"), false);
assertFiltering(filter, new File("openXY.123103"), false);
//        assertFiltering(filter, new File("openAB.102504.old"), false);
assertFiltering(filter, new File("openAB.102504").toPath(), true);
assertFiltering(filter, new File("openA.102504").toPath(), false);
assertFiltering(filter, new File("openXY.123103").toPath(), false);
//        assertFiltering(filter, new File("openAB.102504.old").toPath(), false);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("Test.class"), true);
assertFiltering(filter, new File("Test.jsp"), false);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("Test.class").toPath(), true);
assertFiltering(filter, new File("Test.jsp").toPath(), false);
assertFiltering(listFilter, new File("Test.txt"), true);
assertFiltering(listFilter, new File("Test.xml"), true);
assertFiltering(listFilter, new File("Test.gif"), true);
assertFiltering(listFilter, new File("Test.bmp"), false);
assertFiltering(listFilter, new File("Test.txt").toPath(), true);
assertFiltering(listFilter, new File("Test.xml").toPath(), true);
assertFiltering(listFilter, new File("Test.gif").toPath(), true);
assertFiltering(listFilter, new File("Test.bmp").toPath(), false);
assertEquals(FileVisitResult.CONTINUE, listFilter.accept(txtPath, null));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(bmpPath, null));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(dirPath, null));
assertEquals(FileVisitResult.CONTINUE, listFilter.accept(txtPath, null));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(bmpPath, null));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(dirPath, null));
assertFiltering(filter, new File("src/"), true);
assertFiltering(filter, new File("src/").toPath(), true);
assertFiltering(filter, new File("src/main/java/"), true);
assertFiltering(filter, new File("src/main/java/").toPath(), true);
assertFiltering(filter, new File("pom.xml"), false);
assertFiltering(filter, new File("pom.xml").toPath(), false);
assertFiltering(filter, new File("imaginary"), false);
assertFiltering(filter, new File("imaginary").toPath(), false);
assertFiltering(filter, new File("imaginary/"), false);
assertFiltering(filter, new File("imaginary/").toPath(), false);
assertFiltering(filter, new File("LICENSE.txt"), false);
assertFiltering(filter, new File("LICENSE.txt").toPath(), false);
assertSame(DirectoryFileFilter.DIRECTORY, DirectoryFileFilter.INSTANCE);
assertFiltering(EmptyFileFilter.EMPTY, emptyDirFile, true);
assertFiltering(EmptyFileFilter.EMPTY, emptyDirPath, true);
assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyDirFile, false);
assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyDirPath, false);
assertFiltering(EmptyFileFilter.EMPTY, emptyFile, true);
assertFiltering(EmptyFileFilter.EMPTY, emptyPath, true);
assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyFile, false);
assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyPath, false);
assertFiltering(EmptyFileFilter.EMPTY, emptyDirFile, false);
assertFiltering(EmptyFileFilter.EMPTY, emptyDirPath, false);
assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyDirFile, true);
assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyDirPath, true);
assertFiltering(EmptyFileFilter.EMPTY, notEmptyFile, false);
assertFiltering(EmptyFileFilter.EMPTY, notEmptyPath, false);
assertFiltering(EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
assertFiltering(EmptyFileFilter.NOT_EMPTY, notEmptyPath, true);
assertFiltering(filter, new File("foo.test"), false);
assertFiltering(filter, new File("foo.test").toPath(), false);
assertFiltering(filter, new File("foo"), false);
assertFiltering(filter, new File("foo").toPath(), false);
assertFiltering(filter, (File) null, false);
assertFiltering(filter, (Path) null, false);
assertSame(FalseFileFilter.FALSE, FalseFileFilter.INSTANCE);
assertSame(TrueFileFilter.TRUE, FalseFileFilter.INSTANCE.negate());
assertSame(TrueFileFilter.INSTANCE, FalseFileFilter.INSTANCE.negate());
assertFooBarFileFiltering(new FileEqualsFileFilter(new File("foo")).or(new FileEqualsFileFilter(new File("bar"))));
assertFiltering(FileFilterUtils.and(trueFilter, trueFilter, trueFilter), new File("foo.test"), true);
assertFiltering(FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false);
assertFiltering(FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false);
assertFiltering(FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), false);
assertFiltering(FileFilterUtils.or(trueFilter, trueFilter), testFile, true);
assertFiltering(FileFilterUtils.or(trueFilter, trueFilter, falseFilter), testFile, true);
assertFiltering(FileFilterUtils.or(falseFilter, trueFilter), testFile, true);
assertFiltering(FileFilterUtils.or(falseFilter, falseFilter, falseFilter), testFile, false);
assertFiltering(filter, new File("src/"), false);
assertFiltering(filter, new File("src/").toPath(), false);
assertFiltering(filter, new File("src/java/"), false);
assertFiltering(filter, new File("src/java/").toPath(), false);
assertFiltering(filter, new File("pom.xml"), true);
assertFiltering(filter, new File("pom.xml").toPath(), true);
assertFiltering(filter, new File("imaginary"), false);
assertFiltering(filter, new File("imaginary").toPath(), false);
assertFiltering(filter, new File("imaginary/"), false);
assertFiltering(filter, new File("imaginary/").toPath(), false);
assertFiltering(filter, new File("LICENSE.txt"), true);
assertFiltering(filter, new File("LICENSE.txt").toPath(), true);
assertEquals(1, filtered.length);
assertEquals(fileA, filtered[0]);
assertEquals(1, filtered.length);
assertEquals(fileA, filtered[0]);
assertEquals(1, filtered.length);
assertEquals(fileA, filtered[0]);
assertEquals(1, filtered.length);
assertEquals(fileA, filtered[0]);
assertEquals(0, filtered.length);
assertEquals(1, filteredList.size());
assertEquals(null, filteredList.get(0));
assertEquals(0, filteredList.size());
assertEquals(0, filtered.length);
assertEquals(0, filteredSet.size());
assertFiltering(HiddenFileFilter.HIDDEN, hiddenDirFile, hiddenDirFile.isHidden());
assertFiltering(HiddenFileFilter.HIDDEN, hiddenDirPath, hiddenDirFile.isHidden());
assertFiltering(HiddenFileFilter.VISIBLE, hiddenDirFile, !hiddenDirFile.isHidden());
assertFiltering(HiddenFileFilter.VISIBLE, hiddenDirPath, !hiddenDirFile.isHidden());
assertFiltering(HiddenFileFilter.HIDDEN, temporaryFolder, false);
assertFiltering(HiddenFileFilter.HIDDEN, path, false);
assertFiltering(HiddenFileFilter.VISIBLE, temporaryFolder, true);
assertFiltering(HiddenFileFilter.VISIBLE, path, true);
assertFiltering(filter, classAFile, true);
assertFiltering(filter, classAPath, true);
assertFiltering(filter, xmlBFile, false);
assertFiltering(filter, xmlBPath, false);
assertFiltering(filter, emptyFile, false);
assertFiltering(filter, emptyPath, false);
assertFiltering(filter, dirFile, false);
assertFiltering(filter, dirPath, false);
assertFiltering(filter, classAFile, true);
assertFiltering(filter, classAPath, true);
assertFiltering(filter, xmlBFile, false);
assertFiltering(filter, xmlBPath, false);
assertFiltering(filter, emptyFile, false);
assertFiltering(filter, emptyPath, false);
assertFiltering(filter, dirFile, false);
assertFiltering(filter, dirPath, false);
assertFiltering(filter, tarFileA, true);
assertFiltering(filter, randomFileB, false);
assertFiltering(filter, dir, false);
assertFiltering(filter, tarFileA, true);
assertFiltering(filter, randomFileB, false);
assertFiltering(filter, dir, false);
assertFiltering(filter, classFileA, false);
assertFiltering(filter, xmlFileB, true);
assertFiltering(filter, dir, false);
assertFiltering(filter, classFileA, false);
assertFiltering(filter, xmlFileB, true);
assertFiltering(filter, dir, false);
assertFiltering(filter, tarFileA, true);
assertFiltering(filter, randomFileB, false);
assertFiltering(filter, dir, false);
assertFiltering(filter, tarFileA, true);
assertFiltering(filter, randomFileB, false);
assertFiltering(filter, dir, false);
assertFiltering(filter1, file, false);
assertFiltering(filter2, file, false);
assertFiltering(filter1, file, true);
assertFiltering(filter2, file, true);
assertFiltering(filter1, file, true);
assertFiltering(filter2, file, false);
assertFiltering(filter1, file, true);
assertFiltering(filter2, file, false);
assertSame(DirectoryFileFilter.DIRECTORY, FileFilterUtils.makeDirectoryOnly(null));
assertFiltering(filter, fileA, false);
assertFiltering(filter, fileB, true);
assertFiltering(filter, fileA, false);
assertFiltering(filter, fileB, false);
assertSame(FileFileFilter.INSTANCE, FileFilterUtils.makeFileOnly(null));
assertFiltering(filter, fileA, false);
assertFiltering(filter, fileB, false);
assertFiltering(filter, fileA, false);
assertFiltering(filter, fileB, true);
assertFiltering(filter1, file, false);
assertFiltering(filter2, file, false);
assertFiltering(filter1, file, true);
assertFiltering(filter2, file, true);
assertFiltering(filter1, file, true);
assertFiltering(filter2, file, false);
assertFiltering(filter1, file, true);
assertFiltering(filter2, file, false);
assertFooBarFileFiltering(new NameFileFilter("foo", "bar"));
assertFiltering(filter, new File("foo.test"), false);
assertFiltering(filter, new File("foo"), false);
assertFiltering(filter.negate(), new File("foo"), true);
assertFiltering(filter, (File) null, false);
assertFiltering(new OrFileFilter(trueFilter, trueFilter), testFile, true);
assertFiltering(new OrFileFilter(trueFilter, falseFilter), testFile, true);
assertFiltering(new OrFileFilter(falseFilter, trueFilter), testFile, true);
assertFiltering(new OrFileFilter(falseFilter, falseFilter), testFile, false);
assertFiltering(new OrFileFilter(), testFile, false);
assertFiltering(new OrFileFilter(trueFilter, trueFilter), testPath, true);
assertFiltering(new OrFileFilter(trueFilter, falseFilter), testPath, true);
assertFiltering(new OrFileFilter(falseFilter, trueFilter), testPath, true);
assertFiltering(new OrFileFilter(falseFilter, falseFilter), testPath, false);
assertFiltering(new OrFileFilter(), testPath, false);
assertFiltering(falseFilter.or(trueFilter), testPath, true);
assertFiltering(orFilter, testFile, true);
assertFiltering(orFilter, testPath, true);
assertEquals(orFilter.getFileFilters(), filters);
assertFiltering(orFilter, testFile, false);
assertFiltering(orFilter, testPath, false);
assertFiltering(orFilter, testFile, true);
assertFiltering(orFilter, testPath, true);
assertEquals(FileVisitResult.CONTINUE, orFilter.accept(testPath, null));
assertEquals(FileVisitResult.TERMINATE, orFilter.accept(testPath, null));
assertFooBarFileFiltering(new PathEqualsFileFilter(Paths.get("foo")).or(new PathEqualsFileFilter(Paths.get("bar"))));
assertFiltering(filter, new File("foo.test"), true);
assertFiltering(filter, new File("FOO.test"), false); // case-sensitive
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("bar"), true);
assertFiltering(filter, new File("food/"), true);
assertFiltering(filter, new File("foo.test").toPath(), true);
assertFiltering(filter, new File("FOO.test").toPath(), false); // case-sensitive
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("bar").toPath(), true);
assertFiltering(filter, new File("food/").toPath(), true);
assertFiltering(filter, new File("barred\\"), true);
assertFiltering(filter, new File("test"), false);
assertFiltering(filter, new File("fo_o.test"), false);
assertFiltering(filter, new File("abar.exe"), false);
assertFiltering(filter, new File("barred\\").toPath(), true);
assertFiltering(filter, new File("test").toPath(), false);
assertFiltering(filter, new File("fo_o.test").toPath(), false);
assertFiltering(filter, new File("abar.exe").toPath(), false);
assertFiltering(filter, new File("test"), true);
assertFiltering(filter, new File("fred"), false);
assertFiltering(filter, new File("test").toPath(), true);
assertFiltering(filter, new File("fred").toPath(), false);
assertEquals(FileVisitResult.CONTINUE, filter.accept(testPath, null));
assertEquals(FileVisitResult.TERMINATE, filter.accept(fredPath, null));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(testPath, null));
assertEquals(FileVisitResult.CONTINUE, listFilter.accept(fredPath, null));
assertFiltering(filter, new File("foo.test1"), true);
assertFiltering(filter, new File("bar.test1"), true);
assertFiltering(filter, new File("FOO.test1"), true); // case-insensitive
assertFiltering(filter, new File("BAR.test1"), true); // case-insensitive
assertFiltering(filter, new File("foo.test2"), false);
assertFiltering(filter, new File("bar.test2"), true);
assertFiltering(filter, new File("FOO.test2"), false); // case-insensitive
assertFiltering(filter, new File("BAR.test2"), true); // case-insensitive
assertFiltering(filter, new File("foo.test3"), true);
assertFiltering(filter, new File("bar.test3"), true);
assertFiltering(filter, new File("FOO.test3"), true); // case-insensitive
assertFiltering(filter, new File("BAR.test3"), true); // case-insensitive
assertFiltering(filter, new File("foo.test2"), false);
assertFiltering(filter, new File("bar.test2"), true);
assertFiltering(filter, new File("FOO.test2"), false); // case-insensitive
assertFiltering(filter, new File("BAR.test2"), true); // case-insensitive
assertFiltering(filter1, smallFile, false);
assertFiltering(filter2, smallFile, false);
assertFiltering(filter3, smallFile, true);
assertFiltering(filter1, largeFile, true);
assertFiltering(filter2, largeFile, true);
assertFiltering(filter3, largeFile, false);
assertFiltering(filter4, smallFile, false);
assertFiltering(filter4, largeFile, false);
assertFiltering(filter5, smallFile, true);
assertFiltering(filter5, largeFile, false);
assertFiltering(filter6, smallFile, false);
assertFiltering(filter6, largeFile, true);
assertFiltering(filter7, smallFile, true);
assertFiltering(filter7, largeFile, true);
assertFiltering(filter8, largeFile, true);
assertFiltering(filter1, smallFile, false);
assertFiltering(filter2, smallFile, false);
assertFiltering(filter3, smallFile, true);
assertFiltering(filter1, largeFile, true);
assertFiltering(filter2, largeFile, true);
assertFiltering(filter3, largeFile, false);
assertFiltering(filter4, smallFile, false);
assertFiltering(filter4, largeFile, false);
assertFiltering(filter5, smallFile, true);
assertFiltering(filter5, largeFile, false);
assertFiltering(filter6, smallFile, false);
assertFiltering(filter6, largeFile, true);
assertFiltering(filter7, smallFile, true);
assertFiltering(filter7, largeFile, true);
assertFiltering(filter8, largeFile, true);
assertFiltering(filter, new File("fred.tes"), true);
assertFiltering(filter, new File("fred.est"), true);
assertFiltering(filter, new File("fred.EST"), false); // case-sensitive
assertFiltering(filter, new File("fred.exe"), false);
assertFiltering(filter, new File("fred.tes").toPath(), true);
assertFiltering(filter, new File("fred.est").toPath(), true);
assertFiltering(filter, new File("fred.EST").toPath(), false); // case-sensitive
assertFiltering(filter, new File("fred.exe").toPath(), false);
assertFiltering(filter, new File("fred"), false);
assertFiltering(filter, new File(".tes"), true);
assertFiltering(filter, new File("fred.test"), true);
assertFiltering(filter, new File("fred").toPath(), false);
assertFiltering(filter, new File(".tes").toPath(), true);
assertFiltering(filter, new File("fred.test").toPath(), true);
assertFiltering(filter, new File("test"), true);
assertFiltering(filter, new File("fred"), false);
assertFiltering(filter, new File("test").toPath(), true);
assertFiltering(filter, new File("fred").toPath(), false);
assertEquals(FileVisitResult.CONTINUE, filter.accept(testPath, null));
assertEquals(FileVisitResult.TERMINATE, filter.accept(fredPath, null));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(testPath, null));
assertEquals(FileVisitResult.CONTINUE, listFilter.accept(fredPath, null));
assertFiltering(filter, new File("foo.tes"), true);
assertFiltering(filter, new File("foo.est"), true);
assertFiltering(filter, new File("foo.EST"), true); // case-sensitive
assertFiltering(filter, new File("foo.TES"), true); // case-sensitive
assertFiltering(filter, new File("foo.exe"), false);
assertFiltering(filter, new File("test"), true);
assertFiltering(filter, new File("TEST"), true);
assertFiltering(filter, new File("bar.tes"), true);
assertFiltering(filter, new File("bar.est"), true);
assertFiltering(filter, new File("bar.EST"), true); // case-sensitive
assertFiltering(filter, new File("bar.TES"), true); // case-sensitive
assertFiltering(filter, new File("bar.exe"), false);
assertFiltering(filter, new File("test"), true);
assertFiltering(filter, new File("TEST"), true);
assertFiltering(filter, new File("foo.test"), true);
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, (File) null, true);
assertFiltering(filter, new File("foo.test").toPath(), true);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, (Path) null, true);
assertSame(TrueFileFilter.TRUE, TrueFileFilter.INSTANCE);
assertSame(FalseFileFilter.FALSE, TrueFileFilter.INSTANCE.negate());
assertSame(FalseFileFilter.INSTANCE, TrueFileFilter.INSTANCE.negate());
assertEquals(0, visitor.getPathCounters().getFileCounter().get());
assertEquals(0, visitor.getPathCounters().getByteCounter().get());
assertNotEquals(Counters.noopPathCounters(), visitor.getPathCounters());
CounterAssertions.assertZeroCounters(visitor.getPathCounters());
assertEquals(invoked[i - 1], filters[i].isInvoked(), "test " + testNumber + " filter " + i + " invoked");
public static void assertFileFiltering(final int testNumber, final IOFileFilter filter, final File file, final boolean expected) {assertEquals(expected, filter.accept(file),"test " + testNumber + " Filter(File) " + filter.getClass().getName() + " not " + expected + " for " + file);
public static void assertFilenameFiltering(final int testNumber, final IOFileFilter filter, final File file, final boolean expected) {// Assumes file has a parent and is not passed as nullassertEquals(expected, filter.accept(file.getParentFile(), file.getName()),"test " + testNumber + " Filter(File, String) " + filter.getClass().getName() + " not " + expected + " for " + file);
public static void assertFiltering(final int testNumber, final IOFileFilter filter, final File file, final boolean expected) {// Note. This only tests the (File, String) version if the parent of//       the File passed in is not nullassertEquals(expected, filter.accept(file),"test " + testNumber + " Filter(File) " + filter.getClass().getName() + " not " + expected + " for " + file);
assertEquals(expected, filter.accept(file.toPath(), null),"test " + testNumber + " Filter(File) " + filter.getClass().getName() + " not " + expected + " for " + file);
assertEquals(expected, filter.accept(file.getParentFile(), file.getName()),"test " + testNumber + " Filter(File, String) " + filter.getClass().getName() + " not " + expected + " for " + file);
assertEquals(expected, filter.accept(file),"test " + testNumber + " Filter(File, String) " + filter.getClass().getName() + " not " + expected + " for null");
assertEquals(invoked[i - 1], filters[i].isInvoked(), "test " + testNumber + " filter " + i + " invoked");
assertEquals(i, fileFilter.getFileFilters().size(), "file filters count: ");
assertEquals(i + 1, fileFilter.getFileFilters().size(), "file filters count: ");
assertEquals(filters.size(), fileFilter.getFileFilters().size(), "file filters count");
assertFileFiltering(i, filter, this.file, fileResults);
assertFilenameFiltering(i, filter, this.file, filenameResults);
assertFileFiltering(i, filter, this.file, fileResults);
assertFilenameFiltering(i, filter, this.file, filenameResults);
assertFileFiltering(1, (IOFileFilter) fileFilter, file, false);
assertFilenameFiltering(1, (IOFileFilter) fileFilter, file, false);
assertEquals(0, fileFilter.getFileFilters().size(), "file filters count");
assertFiltering(filter, new File("log.txt"), true);
assertFiltering(filter, new File("log.TXT"), false);
assertFiltering(filter, new File("log.txt").toPath(), true);
assertFiltering(filter, new File("log.TXT").toPath(), false);
assertFiltering(filter, new File("log.txt"), true);
assertFiltering(filter, new File("log.TXT"), false);
assertFiltering(filter, new File("log.txt").toPath(), true);
assertFiltering(filter, new File("log.TXT").toPath(), false);
assertFiltering(filter, new File("log.txt"), true);
assertFiltering(filter, new File("log.TXT"), true);
assertFiltering(filter, new File("log.txt").toPath(), true);
assertFiltering(filter, new File("log.TXT").toPath(), true);
assertFiltering(filter, new File("log.txt"), true);
assertFiltering(filter, new File("log.TXT"), WINDOWS);
assertFiltering(filter, new File("log.txt").toPath(), true);
assertFiltering(filter, new File("log.TXT").toPath(), WINDOWS);
assertFiltering(filter, new File("log.txt"), true);
assertFiltering(filter, new File("log.TXT"), false);
assertFiltering(filter, new File("log.txt").toPath(), true);
assertFiltering(filter, new File("log.TXT").toPath(), false);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("Test.class"), true);
assertFiltering(filter, new File("Test.jsp"), false);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("Test.class").toPath(), true);
assertFiltering(filter, new File("Test.jsp").toPath(), false);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("Test.JAVA"), false);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("Test.JAVA").toPath(), false);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("Test.JAVA"), true);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("Test.JAVA").toPath(), true);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("Test.JAVA").toPath(), WINDOWS);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("Test.JAVA"), false);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("Test.JAVA").toPath(), false);
assertFiltering(listFilter, new File("Test.txt"), true);
assertFiltering(listFilter, new File("Test.xml"), true);
assertFiltering(listFilter, new File("Test.gif"), true);
assertFiltering(listFilter, new File("Test.bmp"), false);
assertFiltering(listFilter, new File("Test.txt").toPath(), true);
assertFiltering(listFilter, new File("Test.xml").toPath(), true);
assertFiltering(listFilter, new File("Test.gif").toPath(), true);
assertFiltering(listFilter, new File("Test.bmp").toPath(), false);
assertEquals(FileVisitResult.CONTINUE, listFilter.accept(txtFile.toPath(), null));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(bmpFile.toPath(), null));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(dirFile.toPath(), null));
assertEquals(FileVisitResult.CONTINUE, listFilter.accept(txtPath, null));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(bmpPath, null));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(dirPath, null));
public void assertFiltering(final IOFileFilter filter, final File file, final boolean expected) {// Note. This only tests the (File, String) version if the parent of//       the File passed in is not nullassertEquals(expected, filter.accept(file),"Filter(File) " + filter.getClass().getName() + " not " + expected + " for " + file);
assertEquals(expected, filter.accept(file.getParentFile(), file.getName()),"Filter(File, String) " + filter.getClass().getName() + " not " + expected + " for " + file);
assertEquals(expected, filter.accept(file),"Filter(File, String) " + filter.getClass().getName() + " not " + expected + " for null");
public void assertFiltering(final IOFileFilter filter, final Path path, final boolean expected) {// Note. This only tests the (Path, Path) version if the parent of// the Path passed in is not nullfinal FileVisitResult expectedFileVisitResult = AbstractFileFilter.toDefaultFileVisitResult(expected);
assertEquals(expectedFileVisitResult, filter.accept(path, null),"Filter(Path) " + filter.getClass().getName() + " not " + expectedFileVisitResult + " for " + path);
assertEquals(expectedFileVisitResult, filter.accept(path, null),"Filter(Path, Path) " + filter.getClass().getName() + " not " + expectedFileVisitResult + " for "+ path);
assertEquals(expectedFileVisitResult, filter.accept(path, null),"Filter(Path, Path) " + filter.getClass().getName() + " not " + expectedFileVisitResult + " for null");
private RegexFileFilter assertSerializable(final RegexFileFilter serializable) throws IOException {try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {oos.writeObject(serializable);
assertSerializable(filter);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("test-10.java"), true);
assertFiltering(filter, new File("test-.java"), false);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("test-10.java").toPath(), true);
assertFiltering(filter, new File("test-.java").toPath(), false);
assertSerializable(filter);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("test.java"), true);
assertFiltering(filter, new File("tEST.java"), false);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("test.java").toPath(), true);
assertFiltering(filter, new File("tEST.java").toPath(), false);
assertSerializable(filter);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("test.java"), true);
assertFiltering(filter, new File("tEST.java"), true);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("test.java").toPath(), true);
assertFiltering(filter, new File("tEST.java").toPath(), true);
assertSerializable(filter);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("test.java"), true);
assertFiltering(filter, new File("tEST.java"), true);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("test.java").toPath(), true);
assertFiltering(filter, new File("tEST.java").toPath(), true);
assertSerializable(filter);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("test.java"), true);
assertFiltering(filter, new File("tEST.java"), true);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("test.java").toPath(), true);
assertFiltering(filter, new File("tEST.java").toPath(), true);
assertFiltering(assertSerializable(new RegexFileFilter(patternStr)), path, true);
assertFiltering(assertSerializable(new RegexFileFilter(Pattern.compile(patternStr), (Function<Path, String> & Serializable) Path::toString)), path,false);
assertEquals(simpleEmptyFileFilter, andFileFilter.getFileFilters());
assertEquals(simpleNonEmptyFilter, andFileFilter.getFileFilters());
assertEquals(FileVisitResult.TERMINATE, SymbolicLinkFileFilter.INSTANCE.accept(PathUtils.current(), null));
void assertFiltering(final IOFileFilter filter, final File file, final boolean expected) {// Note. This only tests the (File, String) version if the parent of// the File passed in is not nullassertEquals(expected, filter.accept(file), "Filter(File) " + filter.getClass().getName() + " not " + expected + " for " + file);
assertEquals(expected, filter.accept(file.getParentFile(), file.getName()),"Filter(File, String) " + filter.getClass().getName() + " not " + expected + " for " + file);
assertEquals(expected, filter.accept(file), "Filter(File, String) " + filter.getClass().getName() + " not " + expected + " for null");
void assertFiltering(final IOFileFilter filter, final Path path, final boolean expected) {// Note. This only tests the (Path, Path) version if the parent of// the File passed in is not nullfinal FileVisitResult expectedFileVisitResult = AbstractFileFilter.toDefaultFileVisitResult(expected);
assertEquals(expectedFileVisitResult, filter.accept(path, null),"Filter(Path) " + filter.getClass().getName() + " not " + expectedFileVisitResult + " for " + path);
assertEquals(expectedFileVisitResult, filter.accept(path, null),"Filter(Path, Path) " + filter.getClass().getName() + " not " + expectedFileVisitResult + " for " + path);
assertEquals(expectedFileVisitResult, filter.accept(path, null),"Filter(Path, Path) " + filter.getClass().getName() + " not " + expectedFileVisitResult + " for null");
void assertFooBarFileFiltering(IOFileFilter filter) {assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("bar"), true);
assertFiltering(filter, new File("fred"), false);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("bar").toPath(), true);
assertFiltering(filter, new File("fred").toPath(), false);
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("bar"), true);
assertFiltering(filter, new File("FOO"), false);
assertFiltering(filter, new File("BAR"), false);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("bar").toPath(), true);
assertFiltering(filter, new File("FOO").toPath(), false);
assertFiltering(filter, new File("BAR").toPath(), false);
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("bar"), true);
assertFiltering(filter, new File("FOO"), true);
assertFiltering(filter, new File("BAR"), true);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("bar").toPath(), true);
assertFiltering(filter, new File("FOO").toPath(), true);
assertFiltering(filter, new File("BAR").toPath(), true);
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("bar"), true);
assertFiltering(filter, new File("FOO"), WINDOWS);
assertFiltering(filter, new File("BAR"), WINDOWS);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("bar").toPath(), true);
assertFiltering(filter, new File("FOO").toPath(), WINDOWS);
assertFiltering(filter, new File("BAR").toPath(), WINDOWS);
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("bar"), true);
assertFiltering(filter, new File("FOO"), false);
assertFiltering(filter, new File("BAR"), false);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("bar").toPath(), true);
assertFiltering(filter, new File("FOO").toPath(), false);
assertFiltering(filter, new File("BAR").toPath(), false);
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("bar"), true);
assertFiltering(filter, new File("fred"), false);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("bar").toPath(), true);
assertFiltering(filter, new File("fred").toPath(), false);
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("FOO"), false); // case-sensitive
assertFiltering(filter, new File("barfoo"), false);
assertFiltering(filter, new File("foobar"), false);
assertFiltering(filter, new File("fred"), false);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("FOO").toPath(), false); // case-sensitive
assertFiltering(filter, new File("barfoo").toPath(), false);
assertFiltering(filter, new File("foobar").toPath(), false);
assertFiltering(filter, new File("fred").toPath(), false);
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("FOO"), true); // case-insensitive
assertFiltering(filter, new File("barfoo"), false);
assertFiltering(filter, new File("foobar"), false);
assertFiltering(filter, new File("fred"), false);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("FOO").toPath(), true); // case-insensitive
assertFiltering(filter, new File("barfoo").toPath(), false);
assertFiltering(filter, new File("foobar").toPath(), false);
assertFiltering(filter, new File("fred").toPath(), false);
assertEquals(contents, PathUtils.readString(symLink, charset));
assertEquals(permissions, Files.getPosixFilePermissions(file), file::toString);
assertEquals(permissions, Files.getPosixFilePermissions(testDir), testDir::toString);
* Assert that the content of a file is equal to that in a byte[].** @param b0   the expected contents* @param file the file to check* @throws IOException If an I/O error occurs while reading the file contents*/public static void assertEqualContent(final byte[] b0, final File file) throws IOException {assertEqualContent(b0, file.toPath());
* Assert that the content of a file is equal to that in a byte[].** @param b0   the expected contents* @param file the file to check* @throws IOException If an I/O error occurs while reading the file contents*/public static void assertEqualContent(final byte[] b0, final Path file) throws IOException {int count = 0, numRead = 0;
assertEquals(b0.length, count, "Different number of bytes: ");
assertEquals(b0[i], b1[i], "byte " + i + " differs");
* Assert that the content of a file is equal to that in a char[].** @param c0   the expected contents* @param file the file to check* @throws IOException If an I/O error occurs while reading the file contents*/public static void assertEqualContent(final char[] c0, final File file) throws IOException {assertEqualContent(c0, file.toPath());
* Assert that the content of a file is equal to that in a char[].** @param c0   the expected contents* @param file the file to check* @throws IOException If an I/O error occurs while reading the file contents*/public static void assertEqualContent(final char[] c0, final Path file) throws IOException {int count = 0, numRead = 0;
assertEquals(c0.length, count, "Different number of chars: ");
assertEquals(c0[i], c1[i], "char " + i + " differs");
assertArrayEquals(buf0, buf1, "The files " + f0 + " and " + f1 + " have different content");
assertEqualContent(referenceFile, file);
assertEquals(SEP + "a", FilenameUtils.concat(null, "/a"));
assertEquals("f" + SEP, FilenameUtils.concat("", "f/"));
assertEquals("f", FilenameUtils.concat("", "f"));
assertEquals("a" + SEP + "f" + SEP, FilenameUtils.concat("a/", "f/"));
assertEquals("a" + SEP + "f", FilenameUtils.concat("a", "f"));
assertEquals("a" + SEP + "b" + SEP + "f" + SEP, FilenameUtils.concat("a/b/", "f/"));
assertEquals("a" + SEP + "b" + SEP + "f", FilenameUtils.concat("a/b", "f"));
assertEquals("a" + SEP + "f" + SEP, FilenameUtils.concat("a/b/", "../f/"));
assertEquals("a" + SEP + "f", FilenameUtils.concat("a/b", "../f"));
assertEquals("a" + SEP + "c" + SEP + "g" + SEP, FilenameUtils.concat("a/b/../c/", "f/../g/"));
assertEquals("a" + SEP + "c" + SEP + "g", FilenameUtils.concat("a/b/../c", "f/../g"));
assertEquals("a" + SEP + "c.txt" + SEP + "f", FilenameUtils.concat("a/c.txt", "f"));
assertEquals(SEP + "f" + SEP, FilenameUtils.concat("", "/f/"));
assertEquals(SEP + "f", FilenameUtils.concat("", "/f"));
assertEquals(SEP + "f" + SEP, FilenameUtils.concat("a/", "/f/"));
assertEquals(SEP + "f", FilenameUtils.concat("a", "/f"));
assertEquals(SEP + "c" + SEP + "d", FilenameUtils.concat("a/b/", "/c/d"));
assertEquals("C:c" + SEP + "d", FilenameUtils.concat("a/b/", "C:c/d"));
assertEquals("C:" + SEP + "c" + SEP + "d", FilenameUtils.concat("a/b/", "C:/c/d"));
assertEquals("~" + SEP + "c" + SEP + "d", FilenameUtils.concat("a/b/", "~/c/d"));
assertEquals("~user" + SEP + "c" + SEP + "d", FilenameUtils.concat("a/b/", "~user/c/d"));
assertEquals("~" + SEP, FilenameUtils.concat("a/b/", "~"));
assertEquals("~user" + SEP, FilenameUtils.concat("a/b/", "~user"));
assertEquals(WINDOWS, FilenameUtils.equals("file.txt", "FILE.TXT", true, IOCase.SYSTEM));
assertEquals(WINDOWS, FilenameUtils.equalsNormalizedOnSystem("file.txt", "FILE.TXT"));
assertEquals(WINDOWS, FilenameUtils.equalsOnSystem("file.txt", "FILE.TXT"));
assertEquals("noseperator", FilenameUtils.getBaseName("noseperator.inthispath"));
assertEquals("c", FilenameUtils.getBaseName("a/b/c.txt"));
assertEquals("c", FilenameUtils.getBaseName("a/b/c"));
assertEquals("", FilenameUtils.getBaseName("a/b/c/"));
assertEquals("c", FilenameUtils.getBaseName("a\\b\\c"));
assertEquals("file.txt", FilenameUtils.getBaseName("file.txt.bak"));
assertEquals("ext", FilenameUtils.getExtension("file.ext"));
assertEquals("", FilenameUtils.getExtension("README"));
assertEquals("com", FilenameUtils.getExtension("domain.dot.com"));
assertEquals("jpeg", FilenameUtils.getExtension("image.jpeg"));
assertEquals("", FilenameUtils.getExtension("a.b/c"));
assertEquals("txt", FilenameUtils.getExtension("a.b/c.txt"));
assertEquals("", FilenameUtils.getExtension("a/b/c"));
assertEquals("", FilenameUtils.getExtension("a.b\\c"));
assertEquals("txt", FilenameUtils.getExtension("a.b\\c.txt"));
assertEquals("", FilenameUtils.getExtension("a\\b\\c"));
assertEquals("", FilenameUtils.getExtension("C:\\temp\\foo.bar\\README"));
assertEquals("ext", FilenameUtils.getExtension("../filename.ext"));
throw new AssertionError("Expected Exception");
assertEquals("NTFS ADS separator (':') in file name is forbidden.", e.getMessage());
assertEquals("txt", FilenameUtils.getExtension("foo.exe:bar.txt"));
assertEquals("", FilenameUtils.getFullPath("noseperator.inthispath"));
assertEquals("a/b/", FilenameUtils.getFullPath("a/b/c.txt"));
assertEquals("a/b/", FilenameUtils.getFullPath("a/b/c"));
assertEquals("a/b/c/", FilenameUtils.getFullPath("a/b/c/"));
assertEquals("a\\b\\", FilenameUtils.getFullPath("a\\b\\c"));
assertEquals("", FilenameUtils.getFullPath(""));
assertEquals("C:", FilenameUtils.getFullPath("C:"));
assertEquals("", FilenameUtils.getFullPath("C:"));
assertEquals("C:/", FilenameUtils.getFullPath("C:/"));
assertEquals("//server/", FilenameUtils.getFullPath("//server/"));
assertEquals("~/", FilenameUtils.getFullPath("~"));
assertEquals("~/", FilenameUtils.getFullPath("~/"));
assertEquals("~user/", FilenameUtils.getFullPath("~user"));
assertEquals("~user/", FilenameUtils.getFullPath("~user/"));
assertEquals("a/b/", FilenameUtils.getFullPath("a/b/c.txt"));
assertEquals("/a/b/", FilenameUtils.getFullPath("/a/b/c.txt"));
assertEquals("C:", FilenameUtils.getFullPath("C:a"));
assertEquals("C:a/b/", FilenameUtils.getFullPath("C:a/b/c.txt"));
assertEquals("C:/a/b/", FilenameUtils.getFullPath("C:/a/b/c.txt"));
assertEquals("//server/a/b/", FilenameUtils.getFullPath("//server/a/b/c.txt"));
assertEquals("~/a/b/", FilenameUtils.getFullPath("~/a/b/c.txt"));
assertEquals("~user/a/b/", FilenameUtils.getFullPath("~user/a/b/c.txt"));
assertEquals("", FilenameUtils.getFullPathNoEndSeparator("noseperator.inthispath"));
assertEquals("a/b", FilenameUtils.getFullPathNoEndSeparator("a/b/c.txt"));
assertEquals("a/b", FilenameUtils.getFullPathNoEndSeparator("a/b/c"));
assertEquals("a/b/c", FilenameUtils.getFullPathNoEndSeparator("a/b/c/"));
assertEquals("a\\b", FilenameUtils.getFullPathNoEndSeparator("a\\b\\c"));
assertEquals("", FilenameUtils.getFullPathNoEndSeparator(""));
assertEquals("C:", FilenameUtils.getFullPathNoEndSeparator("C:"));
assertEquals("", FilenameUtils.getFullPathNoEndSeparator("C:"));
assertEquals("C:/", FilenameUtils.getFullPathNoEndSeparator("C:/"));
assertEquals("//server/", FilenameUtils.getFullPathNoEndSeparator("//server/"));
assertEquals("~", FilenameUtils.getFullPathNoEndSeparator("~"));
assertEquals("~/", FilenameUtils.getFullPathNoEndSeparator("~/"));
assertEquals("~user", FilenameUtils.getFullPathNoEndSeparator("~user"));
assertEquals("~user/", FilenameUtils.getFullPathNoEndSeparator("~user/"));
assertEquals("a/b", FilenameUtils.getFullPathNoEndSeparator("a/b/c.txt"));
assertEquals("/a/b", FilenameUtils.getFullPathNoEndSeparator("/a/b/c.txt"));
assertEquals("C:", FilenameUtils.getFullPathNoEndSeparator("C:a"));
assertEquals("C:a/b", FilenameUtils.getFullPathNoEndSeparator("C:a/b/c.txt"));
assertEquals("C:/a/b", FilenameUtils.getFullPathNoEndSeparator("C:/a/b/c.txt"));
assertEquals("//server/a/b", FilenameUtils.getFullPathNoEndSeparator("//server/a/b/c.txt"));
assertEquals("~/a/b", FilenameUtils.getFullPathNoEndSeparator("~/a/b/c.txt"));
assertEquals("~user/a/b", FilenameUtils.getFullPathNoEndSeparator("~user/a/b/c.txt"));
assertEquals("/", FilenameUtils.getFullPathNoEndSeparator("/"));
assertEquals("\\", FilenameUtils.getFullPathNoEndSeparator("\\"));
assertEquals("/", FilenameUtils.getFullPathNoEndSeparator("/abc"));
assertEquals("\\", FilenameUtils.getFullPathNoEndSeparator("\\abc"));
assertEquals("/abc", FilenameUtils.getFullPathNoEndSeparator("/abc/xyz"));
assertEquals("\\abc", FilenameUtils.getFullPathNoEndSeparator("\\abc\\xyz"));
assertEquals("noseperator.inthispath", FilenameUtils.getName("noseperator.inthispath"));
assertEquals("c.txt", FilenameUtils.getName("a/b/c.txt"));
assertEquals("c", FilenameUtils.getName("a/b/c"));
assertEquals("", FilenameUtils.getName("a/b/c/"));
assertEquals("c", FilenameUtils.getName("a\\b\\c"));
assertEquals("", FilenameUtils.getPath("noseperator.inthispath"));
assertEquals("", FilenameUtils.getPath("/noseperator.inthispath"));
assertEquals("", FilenameUtils.getPath("\\noseperator.inthispath"));
assertEquals("a/b/", FilenameUtils.getPath("a/b/c.txt"));
assertEquals("a/b/", FilenameUtils.getPath("a/b/c"));
assertEquals("a/b/c/", FilenameUtils.getPath("a/b/c/"));
assertEquals("a\\b\\", FilenameUtils.getPath("a\\b\\c"));
assertEquals("", FilenameUtils.getPath(""));
assertEquals("", FilenameUtils.getPath("C:"));
assertEquals("", FilenameUtils.getPath("C:/"));
assertEquals("", FilenameUtils.getPath("//server/"));
assertEquals("", FilenameUtils.getPath("~"));
assertEquals("", FilenameUtils.getPath("~/"));
assertEquals("", FilenameUtils.getPath("~user"));
assertEquals("", FilenameUtils.getPath("~user/"));
assertEquals("a/b/", FilenameUtils.getPath("a/b/c.txt"));
assertEquals("a/b/", FilenameUtils.getPath("/a/b/c.txt"));
assertEquals("", FilenameUtils.getPath("C:a"));
assertEquals("a/b/", FilenameUtils.getPath("C:a/b/c.txt"));
assertEquals("a/b/", FilenameUtils.getPath("C:/a/b/c.txt"));
assertEquals("a/b/", FilenameUtils.getPath("//server/a/b/c.txt"));
assertEquals("a/b/", FilenameUtils.getPath("~/a/b/c.txt"));
assertEquals("a/b/", FilenameUtils.getPath("~user/a/b/c.txt"));
assertEquals("", FilenameUtils.getPath("noseperator.inthispath"));
assertEquals("", FilenameUtils.getPathNoEndSeparator("/noseperator.inthispath"));
assertEquals("", FilenameUtils.getPathNoEndSeparator("\\noseperator.inthispath"));
assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("a/b/c.txt"));
assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("a/b/c"));
assertEquals("a/b/c", FilenameUtils.getPathNoEndSeparator("a/b/c/"));
assertEquals("a\\b", FilenameUtils.getPathNoEndSeparator("a\\b\\c"));
assertEquals("", FilenameUtils.getPathNoEndSeparator(""));
assertEquals("", FilenameUtils.getPathNoEndSeparator("C:"));
assertEquals("", FilenameUtils.getPathNoEndSeparator("C:/"));
assertEquals("", FilenameUtils.getPathNoEndSeparator("//server/"));
assertEquals("", FilenameUtils.getPathNoEndSeparator("~"));
assertEquals("", FilenameUtils.getPathNoEndSeparator("~/"));
assertEquals("", FilenameUtils.getPathNoEndSeparator("~user"));
assertEquals("", FilenameUtils.getPathNoEndSeparator("~user/"));
assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("a/b/c.txt"));
assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("/a/b/c.txt"));
assertEquals("", FilenameUtils.getPathNoEndSeparator("C:a"));
assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("C:a/b/c.txt"));
assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("C:/a/b/c.txt"));
assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("//server/a/b/c.txt"));
assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("~/a/b/c.txt"));
assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("~user/a/b/c.txt"));
assertEquals("", FilenameUtils.getPrefix(""));
assertEquals("\\", FilenameUtils.getPrefix("\\"));
assertEquals("C:", FilenameUtils.getPrefix("C:"));
assertEquals("", FilenameUtils.getPrefix("C:"));
assertEquals("C:\\", FilenameUtils.getPrefix("C:\\"));
assertEquals("//server/", FilenameUtils.getPrefix("//server/"));
assertEquals("~/", FilenameUtils.getPrefix("~"));
assertEquals("~/", FilenameUtils.getPrefix("~/"));
assertEquals("~user/", FilenameUtils.getPrefix("~user"));
assertEquals("~user/", FilenameUtils.getPrefix("~user/"));
assertEquals("", FilenameUtils.getPrefix("a\\b\\c.txt"));
assertEquals("\\", FilenameUtils.getPrefix("\\a\\b\\c.txt"));
assertEquals("C:\\", FilenameUtils.getPrefix("C:\\a\\b\\c.txt"));
assertEquals("\\\\server\\", FilenameUtils.getPrefix("\\\\server\\a\\b\\c.txt"));
assertEquals("", FilenameUtils.getPrefix("a/b/c.txt"));
assertEquals("/", FilenameUtils.getPrefix("/a/b/c.txt"));
assertEquals("C:/", FilenameUtils.getPrefix("C:/a/b/c.txt"));
assertEquals("//server/", FilenameUtils.getPrefix("//server/a/b/c.txt"));
assertEquals("~/", FilenameUtils.getPrefix("~/a/b/c.txt"));
assertEquals("~user/", FilenameUtils.getPrefix("~user/a/b/c.txt"));
assertEquals("", FilenameUtils.getPrefix("a\\b\\c.txt"));
assertEquals("\\", FilenameUtils.getPrefix("\\a\\b\\c.txt"));
assertEquals("~\\", FilenameUtils.getPrefix("~\\a\\b\\c.txt"));
assertEquals("~user\\", FilenameUtils.getPrefix("~user\\a\\b\\c.txt"));
assertEquals(-1, FilenameUtils.getPrefixLength(null));
assertEquals(-1, FilenameUtils.getPrefixLength(":"));
assertEquals(-1, FilenameUtils.getPrefixLength("1:\\a\\b\\c.txt"));
assertEquals(-1, FilenameUtils.getPrefixLength("1:"));
assertEquals(-1, FilenameUtils.getPrefixLength("1:a"));
assertEquals(-1, FilenameUtils.getPrefixLength("\\\\\\a\\b\\c.txt"));
assertEquals(-1, FilenameUtils.getPrefixLength("\\\\a"));
assertEquals(0, FilenameUtils.getPrefixLength(""));
assertEquals(1, FilenameUtils.getPrefixLength("\\"));
assertEquals(2, FilenameUtils.getPrefixLength("C:"));
assertEquals(0, FilenameUtils.getPrefixLength("C:"));
assertEquals(3, FilenameUtils.getPrefixLength("C:\\"));
assertEquals(9, FilenameUtils.getPrefixLength("//server/"));
assertEquals(2, FilenameUtils.getPrefixLength("~"));
assertEquals(2, FilenameUtils.getPrefixLength("~/"));
assertEquals(6, FilenameUtils.getPrefixLength("~user"));
assertEquals(6, FilenameUtils.getPrefixLength("~user/"));
assertEquals(0, FilenameUtils.getPrefixLength("a\\b\\c.txt"));
assertEquals(1, FilenameUtils.getPrefixLength("\\a\\b\\c.txt"));
assertEquals(2, FilenameUtils.getPrefixLength("C:a\\b\\c.txt"));
assertEquals(3, FilenameUtils.getPrefixLength("C:\\a\\b\\c.txt"));
assertEquals(9, FilenameUtils.getPrefixLength("\\\\server\\a\\b\\c.txt"));
assertEquals(0, FilenameUtils.getPrefixLength("a/b/c.txt"));
assertEquals(1, FilenameUtils.getPrefixLength("/a/b/c.txt"));
assertEquals(3, FilenameUtils.getPrefixLength("C:/a/b/c.txt"));
assertEquals(9, FilenameUtils.getPrefixLength("//server/a/b/c.txt"));
assertEquals(2, FilenameUtils.getPrefixLength("~/a/b/c.txt"));
assertEquals(6, FilenameUtils.getPrefixLength("~user/a/b/c.txt"));
assertEquals(0, FilenameUtils.getPrefixLength("a\\b\\c.txt"));
assertEquals(1, FilenameUtils.getPrefixLength("\\a\\b\\c.txt"));
assertEquals(2, FilenameUtils.getPrefixLength("~\\a\\b\\c.txt"));
assertEquals(6, FilenameUtils.getPrefixLength("~user\\a\\b\\c.txt"));
assertEquals(9, FilenameUtils.getPrefixLength("//server/a/b/c.txt"));
assertEquals(-1, FilenameUtils.getPrefixLength("\\\\\\a\\b\\c.txt"));
assertEquals(-1, FilenameUtils.getPrefixLength("///a/b/c.txt"));
assertEquals(1, FilenameUtils.getPrefixLength("/:foo"));
assertEquals(1, FilenameUtils.getPrefixLength("/:/"));
assertEquals(1, FilenameUtils.getPrefixLength("/:::::::.txt"));
assertEquals(12, FilenameUtils.getPrefixLength("\\\\127.0.0.1\\a\\b\\c.txt"));
assertEquals(6, FilenameUtils.getPrefixLength("\\\\::1\\a\\b\\c.txt"));
assertEquals(21, FilenameUtils.getPrefixLength("\\\\server.example.org\\a\\b\\c.txt"));
assertEquals(10, FilenameUtils.getPrefixLength("\\\\server.\\a\\b\\c.txt"));
assertEquals(-1, FilenameUtils.getPrefixLength("\\\\-server\\a\\b\\c.txt"));
assertEquals(-1, FilenameUtils.getPrefixLength("\\\\.\\a\\b\\c.txt"));
assertEquals(-1, FilenameUtils.getPrefixLength("\\\\..\\a\\b\\c.txt"));
assertEquals(-1, FilenameUtils.indexOfExtension(null));
assertEquals(-1, FilenameUtils.indexOfExtension("file"));
assertEquals(4, FilenameUtils.indexOfExtension("file.txt"));
assertEquals(13, FilenameUtils.indexOfExtension("a.txt/b.txt/c.txt"));
assertEquals(-1, FilenameUtils.indexOfExtension("a/b/c"));
assertEquals(-1, FilenameUtils.indexOfExtension("a\\b\\c"));
assertEquals(-1, FilenameUtils.indexOfExtension("a/b.notextension/c"));
assertEquals(-1, FilenameUtils.indexOfExtension("a\\b.notextension\\c"));
throw new AssertionError("Expected Exception");
assertEquals("NTFS ADS separator (':') in file name is forbidden.", e.getMessage());
assertEquals(11, FilenameUtils.indexOfExtension("foo.exe:bar.txt"));
assertEquals(-1, FilenameUtils.indexOfLastSeparator(null));
assertEquals(-1, FilenameUtils.indexOfLastSeparator("noseperator.inthispath"));
assertEquals(3, FilenameUtils.indexOfLastSeparator("a/b/c"));
assertEquals(3, FilenameUtils.indexOfLastSeparator("a\\b\\c"));
assertEquals("a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("a\\b/c.txt"));
assertEquals("" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\a\\b/c.txt"));
assertEquals("C:" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("C:\\a\\b/c.txt"));
assertEquals("" + SEP + "" + SEP + "server" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\server\\a\\b/c.txt"));
assertEquals("~" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("~\\a\\b/c.txt"));
assertEquals("~user" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("~user\\a\\b/c.txt"));
assertEquals("a" + SEP + "c", FilenameUtils.normalize("a/b/../c"));
assertEquals("c", FilenameUtils.normalize("a/b/../../c"));
assertEquals("c" + SEP, FilenameUtils.normalize("a/b/../../c/"));
assertEquals("a" + SEP, FilenameUtils.normalize("a/b/.."));
assertEquals("a" + SEP, FilenameUtils.normalize("a/b/../"));
assertEquals("", FilenameUtils.normalize("a/b/../.."));
assertEquals("", FilenameUtils.normalize("a/b/../../"));
assertEquals("a" + SEP + "d", FilenameUtils.normalize("a/b/../c/../d"));
assertEquals("a" + SEP + "d" + SEP, FilenameUtils.normalize("a/b/../c/../d/"));
assertEquals("a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("a/b//d"));
assertEquals("a" + SEP + "b" + SEP, FilenameUtils.normalize("a/b/././."));
assertEquals("a" + SEP + "b" + SEP, FilenameUtils.normalize("a/b/./././"));
assertEquals("a" + SEP, FilenameUtils.normalize("./a/"));
assertEquals("a", FilenameUtils.normalize("./a"));
assertEquals("", FilenameUtils.normalize("./"));
assertEquals("", FilenameUtils.normalize("."));
assertEquals("", FilenameUtils.normalize(""));
assertEquals(SEP + "a", FilenameUtils.normalize("/a"));
assertEquals(SEP + "a" + SEP, FilenameUtils.normalize("/a/"));
assertEquals(SEP + "a" + SEP + "c", FilenameUtils.normalize("/a/b/../c"));
assertEquals(SEP + "c", FilenameUtils.normalize("/a/b/../../c"));
assertEquals(SEP + "a" + SEP, FilenameUtils.normalize("/a/b/.."));
assertEquals(SEP + "", FilenameUtils.normalize("/a/b/../.."));
assertEquals(SEP + "a" + SEP + "d", FilenameUtils.normalize("/a/b/../c/../d"));
assertEquals(SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("/a/b//d"));
assertEquals(SEP + "a" + SEP + "b" + SEP, FilenameUtils.normalize("/a/b/././."));
assertEquals(SEP + "a", FilenameUtils.normalize("/./a"));
assertEquals(SEP + "", FilenameUtils.normalize("/./"));
assertEquals(SEP + "", FilenameUtils.normalize("/."));
assertEquals(SEP + "", FilenameUtils.normalize("/"));
assertEquals("~" + SEP + "a", FilenameUtils.normalize("~/a"));
assertEquals("~" + SEP + "a" + SEP, FilenameUtils.normalize("~/a/"));
assertEquals("~" + SEP + "a" + SEP + "c", FilenameUtils.normalize("~/a/b/../c"));
assertEquals("~" + SEP + "c", FilenameUtils.normalize("~/a/b/../../c"));
assertEquals("~" + SEP + "a" + SEP, FilenameUtils.normalize("~/a/b/.."));
assertEquals("~" + SEP + "", FilenameUtils.normalize("~/a/b/../.."));
assertEquals("~" + SEP + "a" + SEP + "d", FilenameUtils.normalize("~/a/b/../c/../d"));
assertEquals("~" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("~/a/b//d"));
assertEquals("~" + SEP + "a" + SEP + "b" + SEP, FilenameUtils.normalize("~/a/b/././."));
assertEquals("~" + SEP + "a", FilenameUtils.normalize("~/./a"));
assertEquals("~" + SEP, FilenameUtils.normalize("~/./"));
assertEquals("~" + SEP, FilenameUtils.normalize("~/."));
assertEquals("~" + SEP, FilenameUtils.normalize("~/"));
assertEquals("~" + SEP, FilenameUtils.normalize("~"));
assertEquals("~user" + SEP + "a", FilenameUtils.normalize("~user/a"));
assertEquals("~user" + SEP + "a" + SEP, FilenameUtils.normalize("~user/a/"));
assertEquals("~user" + SEP + "a" + SEP + "c", FilenameUtils.normalize("~user/a/b/../c"));
assertEquals("~user" + SEP + "c", FilenameUtils.normalize("~user/a/b/../../c"));
assertEquals("~user" + SEP + "a" + SEP, FilenameUtils.normalize("~user/a/b/.."));
assertEquals("~user" + SEP + "", FilenameUtils.normalize("~user/a/b/../.."));
assertEquals("~user" + SEP + "a" + SEP + "d", FilenameUtils.normalize("~user/a/b/../c/../d"));
assertEquals("~user" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("~user/a/b//d"));
assertEquals("~user" + SEP + "a" + SEP + "b" + SEP, FilenameUtils.normalize("~user/a/b/././."));
assertEquals("~user" + SEP + "a", FilenameUtils.normalize("~user/./a"));
assertEquals("~user" + SEP + "", FilenameUtils.normalize("~user/./"));
assertEquals("~user" + SEP + "", FilenameUtils.normalize("~user/."));
assertEquals("~user" + SEP, FilenameUtils.normalize("~user/"));
assertEquals("~user" + SEP, FilenameUtils.normalize("~user"));
assertEquals("C:" + SEP + "a", FilenameUtils.normalize("C:/a"));
assertEquals("C:" + SEP + "a" + SEP, FilenameUtils.normalize("C:/a/"));
assertEquals("C:" + SEP + "a" + SEP + "c", FilenameUtils.normalize("C:/a/b/../c"));
assertEquals("C:" + SEP + "c", FilenameUtils.normalize("C:/a/b/../../c"));
assertEquals("C:" + SEP + "a" + SEP, FilenameUtils.normalize("C:/a/b/.."));
assertEquals("C:" + SEP + "", FilenameUtils.normalize("C:/a/b/../.."));
assertEquals("C:" + SEP + "a" + SEP + "d", FilenameUtils.normalize("C:/a/b/../c/../d"));
assertEquals("C:" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("C:/a/b//d"));
assertEquals("C:" + SEP + "a" + SEP + "b" + SEP, FilenameUtils.normalize("C:/a/b/././."));
assertEquals("C:" + SEP + "a", FilenameUtils.normalize("C:/./a"));
assertEquals("C:" + SEP + "", FilenameUtils.normalize("C:/./"));
assertEquals("C:" + SEP + "", FilenameUtils.normalize("C:/."));
assertEquals("C:" + SEP + "", FilenameUtils.normalize("C:/"));
assertEquals("C:" + "a", FilenameUtils.normalize("C:a"));
assertEquals("C:" + "a" + SEP, FilenameUtils.normalize("C:a/"));
assertEquals("C:" + "a" + SEP + "c", FilenameUtils.normalize("C:a/b/../c"));
assertEquals("C:" + "c", FilenameUtils.normalize("C:a/b/../../c"));
assertEquals("C:" + "a" + SEP, FilenameUtils.normalize("C:a/b/.."));
assertEquals("C:" + "", FilenameUtils.normalize("C:a/b/../.."));
assertEquals("C:" + "a" + SEP + "d", FilenameUtils.normalize("C:a/b/../c/../d"));
assertEquals("C:" + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("C:a/b//d"));
assertEquals("C:" + "a" + SEP + "b" + SEP, FilenameUtils.normalize("C:a/b/././."));
assertEquals("C:" + "a", FilenameUtils.normalize("C:./a"));
assertEquals("C:" + "", FilenameUtils.normalize("C:./"));
assertEquals("C:" + "", FilenameUtils.normalize("C:."));
assertEquals("C:" + "", FilenameUtils.normalize("C:"));
assertEquals(SEP + SEP + "server" + SEP + "a", FilenameUtils.normalize("//server/a"));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP, FilenameUtils.normalize("//server/a/"));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "c", FilenameUtils.normalize("//server/a/b/../c"));
assertEquals(SEP + SEP + "server" + SEP + "c", FilenameUtils.normalize("//server/a/b/../../c"));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP, FilenameUtils.normalize("//server/a/b/.."));
assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalize("//server/a/b/../.."));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "d", FilenameUtils.normalize("//server/a/b/../c/../d"));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("//server/a/b//d"));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "b" + SEP, FilenameUtils.normalize("//server/a/b/././."));
assertEquals(SEP + SEP + "server" + SEP + "a", FilenameUtils.normalize("//server/./a"));
assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalize("//server/./"));
assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalize("//server/."));
assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalize("//server/"));
assertEquals(SEP + SEP + "127.0.0.1" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\127.0.0.1\\a\\b\\c.txt"));
assertEquals(SEP + SEP + "::1" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\::1\\a\\b\\c.txt"));
assertEquals(SEP + SEP + "1::" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\1::\\a\\b\\c.txt"));
assertEquals(SEP + SEP + "server.example.org" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\server.example.org\\a\\b\\c.txt"));
assertEquals(SEP + SEP + "server.sub.example.org" + SEP + "a" + SEP + "b" + SEP + "c.txt",FilenameUtils.normalize("\\\\server.sub.example.org\\a\\b\\c.txt"));
assertEquals(SEP + SEP + "server." + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\server.\\a\\b\\c.txt"));
assertEquals(SEP + SEP + "1::127.0.0.1" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\1::127.0.0.1\\a\\b\\c.txt"));
assertEquals(SEP + SEP + "127.0.0.256" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\127.0.0.256\\a\\b\\c.txt"));
assertEquals(SEP + SEP + "127.0.0.01" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\127.0.0.01\\a\\b\\c.txt"));
assertEquals("a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("a\\b/c.txt"));
assertEquals("" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("\\a\\b/c.txt"));
assertEquals("C:" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("C:\\a\\b/c.txt"));
assertEquals("" + SEP + "" + SEP + "server" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("\\\\server\\a\\b/c.txt"));
assertEquals("~" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("~\\a\\b/c.txt"));
assertEquals("~user" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("~user\\a\\b/c.txt"));
assertEquals("C:" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("C:\\\\a\\\\b\\\\c.txt"));
assertEquals("a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("a/b/../c"));
assertEquals("c", FilenameUtils.normalizeNoEndSeparator("a/b/../../c"));
assertEquals("c", FilenameUtils.normalizeNoEndSeparator("a/b/../../c/"));
assertEquals("a", FilenameUtils.normalizeNoEndSeparator("a/b/.."));
assertEquals("a", FilenameUtils.normalizeNoEndSeparator("a/b/../"));
assertEquals("", FilenameUtils.normalizeNoEndSeparator("a/b/../.."));
assertEquals("", FilenameUtils.normalizeNoEndSeparator("a/b/../../"));
assertEquals("a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("a/b/../c/../d"));
assertEquals("a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("a/b/../c/../d/"));
assertEquals("a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("a/b//d"));
assertEquals("a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("a/b/././."));
assertEquals("a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("a/b/./././"));
assertEquals("a", FilenameUtils.normalizeNoEndSeparator("./a/"));
assertEquals("a", FilenameUtils.normalizeNoEndSeparator("./a"));
assertEquals("", FilenameUtils.normalizeNoEndSeparator("./"));
assertEquals("", FilenameUtils.normalizeNoEndSeparator("."));
assertEquals("", FilenameUtils.normalizeNoEndSeparator(""));
assertEquals(SEP + "a", FilenameUtils.normalizeNoEndSeparator("/a"));
assertEquals(SEP + "a", FilenameUtils.normalizeNoEndSeparator("/a/"));
assertEquals(SEP + "a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("/a/b/../c"));
assertEquals(SEP + "c", FilenameUtils.normalizeNoEndSeparator("/a/b/../../c"));
assertEquals(SEP + "a", FilenameUtils.normalizeNoEndSeparator("/a/b/.."));
assertEquals(SEP + "", FilenameUtils.normalizeNoEndSeparator("/a/b/../.."));
assertEquals(SEP + "a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("/a/b/../c/../d"));
assertEquals(SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("/a/b//d"));
assertEquals(SEP + "a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("/a/b/././."));
assertEquals(SEP + "a", FilenameUtils.normalizeNoEndSeparator("/./a"));
assertEquals(SEP + "", FilenameUtils.normalizeNoEndSeparator("/./"));
assertEquals(SEP + "", FilenameUtils.normalizeNoEndSeparator("/."));
assertEquals(SEP + "", FilenameUtils.normalizeNoEndSeparator("/"));
assertEquals("~" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~/a"));
assertEquals("~" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~/a/"));
assertEquals("~" + SEP + "a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("~/a/b/../c"));
assertEquals("~" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("~/a/b/../../c"));
assertEquals("~" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~/a/b/.."));
assertEquals("~" + SEP + "", FilenameUtils.normalizeNoEndSeparator("~/a/b/../.."));
assertEquals("~" + SEP + "a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("~/a/b/../c/../d"));
assertEquals("~" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("~/a/b//d"));
assertEquals("~" + SEP + "a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("~/a/b/././."));
assertEquals("~" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~/./a"));
assertEquals("~" + SEP, FilenameUtils.normalizeNoEndSeparator("~/./"));
assertEquals("~" + SEP, FilenameUtils.normalizeNoEndSeparator("~/."));
assertEquals("~" + SEP, FilenameUtils.normalizeNoEndSeparator("~/"));
assertEquals("~" + SEP, FilenameUtils.normalizeNoEndSeparator("~"));
assertEquals("~user" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~user/a"));
assertEquals("~user" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~user/a/"));
assertEquals("~user" + SEP + "a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("~user/a/b/../c"));
assertEquals("~user" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("~user/a/b/../../c"));
assertEquals("~user" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~user/a/b/.."));
assertEquals("~user" + SEP + "", FilenameUtils.normalizeNoEndSeparator("~user/a/b/../.."));
assertEquals("~user" + SEP + "a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("~user/a/b/../c/../d"));
assertEquals("~user" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("~user/a/b//d"));
assertEquals("~user" + SEP + "a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("~user/a/b/././."));
assertEquals("~user" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~user/./a"));
assertEquals("~user" + SEP + "", FilenameUtils.normalizeNoEndSeparator("~user/./"));
assertEquals("~user" + SEP + "", FilenameUtils.normalizeNoEndSeparator("~user/."));
assertEquals("~user" + SEP, FilenameUtils.normalizeNoEndSeparator("~user/"));
assertEquals("~user" + SEP, FilenameUtils.normalizeNoEndSeparator("~user"));
assertEquals("C:" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("C:/a"));
assertEquals("C:" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("C:/a/"));
assertEquals("C:" + SEP + "a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("C:/a/b/../c"));
assertEquals("C:" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("C:/a/b/../../c"));
assertEquals("C:" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("C:/a/b/.."));
assertEquals("C:" + SEP + "", FilenameUtils.normalizeNoEndSeparator("C:/a/b/../.."));
assertEquals("C:" + SEP + "a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("C:/a/b/../c/../d"));
assertEquals("C:" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("C:/a/b//d"));
assertEquals("C:" + SEP + "a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("C:/a/b/././."));
assertEquals("C:" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("C:/./a"));
assertEquals("C:" + SEP + "", FilenameUtils.normalizeNoEndSeparator("C:/./"));
assertEquals("C:" + SEP + "", FilenameUtils.normalizeNoEndSeparator("C:/."));
assertEquals("C:" + SEP + "", FilenameUtils.normalizeNoEndSeparator("C:/"));
assertEquals("C:" + "a", FilenameUtils.normalizeNoEndSeparator("C:a"));
assertEquals("C:" + "a", FilenameUtils.normalizeNoEndSeparator("C:a/"));
assertEquals("C:" + "a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("C:a/b/../c"));
assertEquals("C:" + "c", FilenameUtils.normalizeNoEndSeparator("C:a/b/../../c"));
assertEquals("C:" + "a", FilenameUtils.normalizeNoEndSeparator("C:a/b/.."));
assertEquals("C:" + "", FilenameUtils.normalizeNoEndSeparator("C:a/b/../.."));
assertEquals("C:" + "a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("C:a/b/../c/../d"));
assertEquals("C:" + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("C:a/b//d"));
assertEquals("C:" + "a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("C:a/b/././."));
assertEquals("C:" + "a", FilenameUtils.normalizeNoEndSeparator("C:./a"));
assertEquals("C:" + "", FilenameUtils.normalizeNoEndSeparator("C:./"));
assertEquals("C:" + "", FilenameUtils.normalizeNoEndSeparator("C:."));
assertEquals("C:" + "", FilenameUtils.normalizeNoEndSeparator("C:"));
assertEquals(SEP + SEP + "server" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("//server/a"));
assertEquals(SEP + SEP + "server" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("//server/a/"));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("//server/a/b/../c"));
assertEquals(SEP + SEP + "server" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("//server/a/b/../../c"));
assertEquals(SEP + SEP + "server" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("//server/a/b/.."));
assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalizeNoEndSeparator("//server/a/b/../.."));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("//server/a/b/../c/../d"));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("//server/a/b//d"));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("//server/a/b/././."));
assertEquals(SEP + SEP + "server" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("//server/./a"));
assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalizeNoEndSeparator("//server/./"));
assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalizeNoEndSeparator("//server/."));
assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalizeNoEndSeparator("//server/"));
assertEquals("/a/c", FilenameUtils.normalizeNoEndSeparator("/a/b/../c/", true));
assertEquals("/a/c", FilenameUtils.normalizeNoEndSeparator("\\a\\b\\..\\c\\", true));
assertEquals("\\a\\c", FilenameUtils.normalizeNoEndSeparator("/a/b/../c/", false));
assertEquals("\\a\\c", FilenameUtils.normalizeNoEndSeparator("\\a\\b\\..\\c\\", false));
assertEquals("/a/c/", FilenameUtils.normalize("/a/b/../c/", true));
assertEquals("/a/c/", FilenameUtils.normalize("\\a\\b\\..\\c\\", true));
assertEquals("\\a\\c\\", FilenameUtils.normalize("/a/b/../c/", false));
assertEquals("\\a\\c\\", FilenameUtils.normalize("\\a\\b\\..\\c\\", false));
assertEquals("file", FilenameUtils.removeExtension("file.ext"));
assertEquals("README", FilenameUtils.removeExtension("README"));
assertEquals("domain.dot", FilenameUtils.removeExtension("domain.dot.com"));
assertEquals("image", FilenameUtils.removeExtension("image.jpeg"));
assertEquals("a.b/c", FilenameUtils.removeExtension("a.b/c"));
assertEquals("a.b/c", FilenameUtils.removeExtension("a.b/c.txt"));
assertEquals("a/b/c", FilenameUtils.removeExtension("a/b/c"));
assertEquals("a.b\\c", FilenameUtils.removeExtension("a.b\\c"));
assertEquals("a.b\\c", FilenameUtils.removeExtension("a.b\\c.txt"));
assertEquals("a\\b\\c", FilenameUtils.removeExtension("a\\b\\c"));
assertEquals("C:\\temp\\foo.bar\\README", FilenameUtils.removeExtension("C:\\temp\\foo.bar\\README"));
assertEquals("../filename", FilenameUtils.removeExtension("../filename.ext"));
assertEquals("\\a\\b\\c", FilenameUtils.separatorsToSystem("\\a\\b\\c"));
assertEquals("\\a\\b\\c.txt", FilenameUtils.separatorsToSystem("\\a\\b\\c.txt"));
assertEquals("\\a\\b\\c", FilenameUtils.separatorsToSystem("\\a\\b/c"));
assertEquals("\\a\\b\\c", FilenameUtils.separatorsToSystem("/a/b/c"));
assertEquals("D:\\a\\b\\c", FilenameUtils.separatorsToSystem("D:/a/b/c"));
assertEquals("/a/b/c", FilenameUtils.separatorsToSystem("/a/b/c"));
assertEquals("/a/b/c.txt", FilenameUtils.separatorsToSystem("/a/b/c.txt"));
assertEquals("/a/b/c", FilenameUtils.separatorsToSystem("/a/b\\c"));
assertEquals("/a/b/c", FilenameUtils.separatorsToSystem("\\a\\b\\c"));
assertEquals("D:/a/b/c", FilenameUtils.separatorsToSystem("D:\\a\\b\\c"));
assertEquals("/a/b/c", FilenameUtils.separatorsToUnix("/a/b/c"));
assertEquals("/a/b/c.txt", FilenameUtils.separatorsToUnix("/a/b/c.txt"));
assertEquals("/a/b/c", FilenameUtils.separatorsToUnix("/a/b\\c"));
assertEquals("/a/b/c", FilenameUtils.separatorsToUnix("\\a\\b\\c"));
assertEquals("D:/a/b/c", FilenameUtils.separatorsToUnix("D:\\a\\b\\c"));
assertEquals("\\a\\b\\c", FilenameUtils.separatorsToWindows("\\a\\b\\c"));
assertEquals("\\a\\b\\c.txt", FilenameUtils.separatorsToWindows("\\a\\b\\c.txt"));
assertEquals("\\a\\b\\c", FilenameUtils.separatorsToWindows("\\a\\b/c"));
assertEquals("\\a\\b\\c", FilenameUtils.separatorsToWindows("/a/b/c"));
assertEquals("D:\\a\\b\\c", FilenameUtils.separatorsToWindows("D:/a/b/c"));
assertEquals(0, IOCase.SENSITIVE.checkCompareTo("ABC", "ABC"));
assertEquals(0, IOCase.INSENSITIVE.checkCompareTo("ABC", "ABC"));
assertEquals(0, IOCase.INSENSITIVE.checkCompareTo("ABC", "abc"));
assertEquals(0, IOCase.INSENSITIVE.checkCompareTo("abc", "ABC"));
assertEquals(0, IOCase.SYSTEM.checkCompareTo("ABC", "ABC"));
assertEquals(WINDOWS, IOCase.SYSTEM.checkCompareTo("ABC", "abc") == 0);
assertEquals(WINDOWS, IOCase.SYSTEM.checkCompareTo("abc", "ABC") == 0);
assertEquals(0, IOCase.SENSITIVE.checkCompareTo("ABC", "ABC"));
assertEquals(0, IOCase.SENSITIVE.checkCompareTo("", ""));
assertEquals(WINDOWS, IOCase.SYSTEM.checkEndsWith("ABC", "Bc"));
assertEquals(WINDOWS, IOCase.SYSTEM.checkEquals("ABC", "Abc"));
assertEquals(1,  IOCase.SENSITIVE.checkIndexOf("ABC", 0, "BC"));
assertEquals(-1, IOCase.SENSITIVE.checkIndexOf("ABC", 0, "Bc"));
assertEquals(1, IOCase.INSENSITIVE.checkIndexOf("ABC", 0, "BC"));
assertEquals(1, IOCase.INSENSITIVE.checkIndexOf("ABC", 0, "Bc"));
assertEquals(1, IOCase.SYSTEM.checkIndexOf("ABC", 0, "BC"));
assertEquals(WINDOWS ? 1 : -1, IOCase.SYSTEM.checkIndexOf("ABC", 0, "Bc"));
assertEquals(0,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "A"));
assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 1, "A"));
assertEquals(0,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "AB"));
assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 1, "AB"));
assertEquals(0,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "ABC"));
assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 1, "ABC"));
assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "D"));
assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 3, "D"));
assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 4, "D"));
assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "DE"));
assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 3, "DE"));
assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 4, "DE"));
assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "DEF"));
assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 3, "DEF"));
assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 4, "DEF"));
assertEquals(9,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "J"));
assertEquals(9,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 8, "J"));
assertEquals(9,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 9, "J"));
assertEquals(8,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "IJ"));
assertEquals(8,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 8, "IJ"));
assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 9, "IJ"));
assertEquals(7,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 6, "HIJ"));
assertEquals(7,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 7, "HIJ"));
assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 8, "HIJ"));
assertEquals(-1,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "DED"));
assertEquals(-1,   IOCase.SENSITIVE.checkIndexOf("DEF", 0, "ABCDEFGHIJ"));
assertEquals(WINDOWS, IOCase.SYSTEM.checkRegionMatches("ABC", 0, "Ab"));
assertEquals(WINDOWS, IOCase.SYSTEM.checkStartsWith("ABC", "Ab"));
assertEquals(IOCase.SENSITIVE, IOCase.forName("Sensitive"));
assertEquals(IOCase.INSENSITIVE, IOCase.forName("Insensitive"));
assertEquals(IOCase.SYSTEM, IOCase.forName("System"));
assertEquals("Sensitive", IOCase.SENSITIVE.getName());
assertEquals("Insensitive", IOCase.INSENSITIVE.getName());
assertEquals("System", IOCase.SYSTEM.getName());
assertEquals(!WINDOWS, IOCase.SYSTEM.isCaseSensitive());
assertEquals(!WINDOWS, IOCase.isCaseSensitive(IOCase.SYSTEM));
assertSame(IOCase.SENSITIVE, serialize(IOCase.SENSITIVE));
assertSame(IOCase.INSENSITIVE, serialize(IOCase.INSENSITIVE));
assertSame(IOCase.SYSTEM, serialize(IOCase.SYSTEM));
assertEquals("Sensitive", IOCase.SENSITIVE.toString());
assertEquals("Insensitive", IOCase.INSENSITIVE.toString());
assertEquals("System", IOCase.SYSTEM.toString());
assertCounts(1, 1, 0, PathUtils.deleteDirectory(tempDirPath));
assertCounts(1, 1, 0, PathUtils.deleteDirectory(tempDirPath, options));
assertCounts(1, 1, 1, PathUtils.deleteDirectory(tempDirPath));
assertCounts(3, 2, 2, PathUtils.deleteDirectory(tempDirPath));
assertCounts(1, 0, 0, PathUtils.deleteDirectory(tempDirPath));
assertCounts(1, 0, 0, visitFileTree);
assertArrayEquals(EXPECTED_COPY_OPTIONS, visitFileTree.getCopyOptions());
assertEquals(sourceDir.get(), ((PathWrapper) visitFileTree.getSourceDirectory()).get());
assertEquals(sourceDir, visitFileTree.getSourceDirectory());
assertEquals(targetDir, visitFileTree.getTargetDirectory());
assertEquals(targetDir, visitFileTree.getTargetDirectory());
assertEquals(visitFileTree, supplier.get());
assertEquals(visitFileTree.hashCode(), supplier.get().hashCode());
assertEquals(visitFileTree, visitFileTree);
assertEquals(visitFileTree.hashCode(), visitFileTree.hashCode());
assertNotEquals(visitFileTree, "not");
assertNotEquals(visitFileTree, CountingPathVisitor.withLongCounters());
assertCounts(1, 0, 0, visitFileTree);
assertArrayEquals(EXPECTED_COPY_OPTIONS, visitFileTree.getCopyOptions());
assertEquals(sourceDir, visitFileTree.getSourceDirectory());
assertEquals(targetDir, visitFileTree.getTargetDirectory());
assertEquals(visitFileTree, supplier.get());
assertEquals(visitFileTree.hashCode(), supplier.get().hashCode());
assertEquals(visitFileTree, visitFileTree);
assertEquals(visitFileTree.hashCode(), visitFileTree.hashCode());
assertCounts(1, 1, 0, visitFileTree);
assertArrayEquals(EXPECTED_COPY_OPTIONS, visitFileTree.getCopyOptions());
assertEquals(sourceDir, visitFileTree.getSourceDirectory());
assertEquals(targetDir, visitFileTree.getTargetDirectory());
assertEquals(visitFileTree, supplier.get());
assertEquals(visitFileTree.hashCode(), supplier.get().hashCode());
assertEquals(visitFileTree, visitFileTree);
assertEquals(visitFileTree.hashCode(), visitFileTree.hashCode());
assertCounts(1, 1, 1, visitFileTree);
assertArrayEquals(EXPECTED_COPY_OPTIONS, visitFileTree.getCopyOptions());
assertEquals(sourceDir, visitFileTree.getSourceDirectory());
assertEquals(targetDir, visitFileTree.getTargetDirectory());
assertCounts(3, 2, 2, visitFileTree);
assertArrayEquals(EXPECTED_COPY_OPTIONS, visitFileTree.getCopyOptions());
assertEquals(sourceDir, visitFileTree.getSourceDirectory());
assertEquals(targetDir, visitFileTree.getTargetDirectory());
assertEquals(1, accPathVisitor.getFileList().size());
assertEquals(1, accPathVisitor.getFileList().size());
assertEquals(2, accPathVisitor.getFileList().size());
assertCounts(1, marker - 1, 0, accPathVisitor.getPathCounters());
assertEquals(marker - 1, accPathVisitor.getFileList().size());
assertCounter(0, counter, "");
assertEquals(old + 1, byteCounter.get());
assertEquals(0, byteCounter.get());
assertEquals(old + 1, byteCounter.get());
assertEquals(0, byteCounter.get());
assertEquals(parsedFileTime, FileTimes.toFileTime(parsedDate));
assertEquals(ntfsMillis, FileTimes.toNtfsTime(parsed));
assertEquals(parsedDate, FileTimes.toDate(parsedFileTime));
assertEquals(ntfsTime, FileTimes.toNtfsTime(parsed));
assertEquals(Instant.EPOCH.minusMillis(millis), FileTimes.minusMillis(FileTimes.EPOCH, millis).toInstant());
assertEquals(Instant.EPOCH, FileTimes.minusMillis(FileTimes.EPOCH, 0).toInstant());
assertEquals(Instant.EPOCH.minusNanos(millis), FileTimes.minusNanos(FileTimes.EPOCH, millis).toInstant());
assertEquals(Instant.EPOCH, FileTimes.minusNanos(FileTimes.EPOCH, 0).toInstant());
assertEquals(Instant.EPOCH.minusSeconds(seconds), FileTimes.minusSeconds(FileTimes.EPOCH, seconds).toInstant());
assertEquals(Instant.EPOCH, FileTimes.minusSeconds(FileTimes.EPOCH, 0).toInstant());
assertEquals(Instant.parse(instant), FileTimes.ntfsTimeToDate(ntfsTime).toInstant());
assertEquals(parsed, FileTimes.ntfsTimeToFileTime(ntfsTime));
assertEquals(Instant.EPOCH.plusMillis(millis), FileTimes.plusMillis(FileTimes.EPOCH, millis).toInstant());
assertEquals(Instant.EPOCH, FileTimes.plusMillis(FileTimes.EPOCH, 0).toInstant());
assertEquals(Instant.EPOCH.plusNanos(millis), FileTimes.plusNanos(FileTimes.EPOCH, millis).toInstant());
assertEquals(Instant.EPOCH, FileTimes.plusNanos(FileTimes.EPOCH, 0).toInstant());
assertEquals(Instant.EPOCH.plusSeconds(seconds), FileTimes.plusSeconds(FileTimes.EPOCH, seconds).toInstant());
assertEquals(Instant.EPOCH, FileTimes.plusSeconds(FileTimes.EPOCH, 0).toInstant());
assertEquals(Files.size(sourceFile), Files.size(targetFile));
assertEquals(Files.size(sourceFile), Files.size(targetFile));
assertEquals(tempDirPath.getParent(), PathUtils.createParentDirectories(tempDirPath));
assertEquals(parent, PathUtils.createParentDirectories(path));
assertEquals(path.getParent(), PathUtils.createParentDirectories(path, (LinkOption) null));
assertEquals(tempDirPath, PathUtils.createParentDirectories(tempDirPath.resolve("child")));
assertEquals(Files.readSymbolicLink(symlinkedDir), newDirFollowed);
assertEquals(fromMillis, PathUtils.getLastModifiedFileTime(getNonExistantPath(), fromMillis));
assertEquals(tempDirectory, PathUtils.getTempDirectory());
assertEquals(PATH_FIXTURE, path.getFileName().toString());
assertArrayEquals(ArrayUtils.addAll(BYTE_ARRAY_FIXTURE, BYTE_ARRAY_FIXTURE), Files.readAllBytes(file));
assertArrayEquals(BYTE_ARRAY_FIXTURE, Files.readAllBytes(file));
assertEquals(isPosix, PathUtils.readAttributes(current(), PosixFileAttributes.class) != null);
assertEquals(expected, PathUtils.readString(path, StandardCharsets.UTF_8));
assertEquals(expected, PathUtils.readString(path, null));
assertEquals(regularFile, Files.isReadable(resolved));
assertEquals(executable, Files.isExecutable(resolved));
assertEquals(hidden, Files.isHidden(resolved));
assertEquals(directory, Files.isDirectory(resolved));
assertEquals(symbolicLink, Files.isSymbolicLink(resolved));
assertEquals(regularFile, Files.isReadable(resolved));
assertEquals(executable, Files.isExecutable(resolved));
assertEquals(hidden, Files.isHidden(resolved));
assertEquals(directory, Files.isDirectory(resolved));
assertEquals(symbolicLink, Files.isSymbolicLink(resolved));
assertEquals(0, Files.size(file), "Created empty file.");
assertEquals(1, Files.size(file), "Wrote one byte to file");
assertEquals(y2k, getLastModifiedMillis(file), "Bad test: set lastModified set incorrect value");
assertEquals(1, Files.size(file), "FileUtils.touch() didn't empty the file.");
assertNotEquals(y2k, getLastModifiedMillis(file), "FileUtils.touch() changed lastModified");
TestUtils.assertEqualContent(text, file);
assertCounts(0, 1, 0, PathUtils.deleteFile(tempDir.resolve(fileName)));
assertCounts(0, 1, 1, PathUtils.deleteFile(tempDir.resolve(fileName)));
assertCounts(0, 1, 1, PathUtils.deleteFile(resolved, StandardDeleteOption.OVERRIDE_READ_ONLY));
Assertions.assertEquals(CountingPathVisitor.withBigIntegerCounters(), visitor);
assertCounts(1, 0, 0, PathUtils.visitFileTree(visitor, tempDir.get()));
assertCounts(1, 1, 0, PathUtils.visitFileTree(visitor,"src/test/resources/org/apache/commons/io/dirs-1-file-size-0"));
assertCounts(1, 1, 1, PathUtils.visitFileTree(visitor,"src/test/resources/org/apache/commons/io/dirs-1-file-size-1"));
assertCounts(3, 2, 2, PathUtils.visitFileTree(visitor,"src/test/resources/org/apache/commons/io/dirs-2-file-size-2"));
assertCounts(0, 1, 0, PathUtils.delete(tempDirPath.resolve(fileName)));
assertCounts(0, 1, 0, PathUtils.delete(tempDirPath.resolve(fileName), options));
assertCounts(0, 1, 1, PathUtils.delete(tempDirPath.resolve(fileName)));
assertCounts(0, 1, 1, PathUtils.delete(tempDirPath.resolve(fileName), options));
assertCounts(0, 0, 0, PathUtils.deleteFile(tempDirPath.resolve("file-does-not-exist.bin")));
Assertions.assertEquals(counter1, counter2);
Assertions.assertNotEquals(counter1, counter2);
Assertions.assertEquals(counter1, counter2);
Assertions.assertEquals(counter1, counter2);
Assertions.assertNotEquals(counter1, counter2);
Assertions.assertEquals(counter1, counter2);
Assertions.assertEquals(counter1, counter2);
Assertions.assertNotEquals(counter1, counter2);
Assertions.assertEquals(counter1, counter2);
Assertions.assertEquals(counter1, counter2);
Assertions.assertNotEquals(counter1, counter2);
Assertions.assertEquals(counter1, counter2);
Assertions.assertEquals(counter1.hashCode(), counter2.hashCode());
Assertions.assertNotEquals(counter1.hashCode(), counter2.hashCode());
Assertions.assertEquals(counter1.hashCode(), counter2.hashCode());
Assertions.assertEquals(counter1.hashCode(), counter2.hashCode());
Assertions.assertNotEquals(counter1.hashCode(), counter2.hashCode());
Assertions.assertEquals(counter1.hashCode(), counter2.hashCode());
assertCounts(1, 1, 0, PathUtils.visitFileTree(visitor, tempDir));
assertCounts(1, 1, 1, PathUtils.visitFileTree(visitor, tempDir));
assertCounts(1, 1, 1, PathUtils.visitFileTree(visitor, tempDir));
assertCounts(3, 2, 2, PathUtils.visitFileTree(visitor, tempDir));
assertCounts(1, 1, 0, PathUtils.cleanDirectory(tempDir));
assertCounts(1, 1, 1, PathUtils.cleanDirectory(tempDir));
assertCounts(3, 2, 2, PathUtils.cleanDirectory(tempDir));
assertCounts(1, 0, 0, PathUtils.cleanDirectory(tempDir));
assertCounts(1, 1, 0, visitFileTree);
assertSame(visitor, visitFileTree);
assertNotEquals(visitFileTree, CleaningPathVisitor.withLongCounters());
assertNotEquals(visitFileTree.hashCode(), CleaningPathVisitor.withLongCounters().hashCode());
assertEquals(visitFileTree, visitFileTree);
assertEquals(visitFileTree.hashCode(), visitFileTree.hashCode());
assertCounts(1, 1, 1, visitFileTree);
assertSame(visitor, visitFileTree);
assertNotEquals(visitFileTree, CleaningPathVisitor.withLongCounters());
assertNotEquals(visitFileTree.hashCode(), CleaningPathVisitor.withLongCounters().hashCode());
assertEquals(visitFileTree, visitFileTree);
assertEquals(visitFileTree.hashCode(), visitFileTree.hashCode());
assertCounts(1, 1, 1, visitFileTree);
assertSame(visitor, visitFileTree);
assertNotEquals(visitFileTree, CleaningPathVisitor.withLongCounters());
assertNotEquals(visitFileTree.hashCode(), CleaningPathVisitor.withLongCounters().hashCode());
assertEquals(visitFileTree, visitFileTree);
assertEquals(visitFileTree.hashCode(), visitFileTree.hashCode());
assertCounts(3, 2, 2, visitFileTree);
assertSame(visitor, visitFileTree);
assertNotEquals(visitFileTree, CleaningPathVisitor.withLongCounters());
assertNotEquals(visitFileTree.hashCode(), CleaningPathVisitor.withLongCounters().hashCode());
assertEquals(visitFileTree, visitFileTree);
assertEquals(visitFileTree.hashCode(), visitFileTree.hashCode());
assertEquals(scheme, FileSystemProviders.installed().getFileSystemProvider(uri).getScheme());
assertEquals(0, FilesUncheck.copy(NullInputStream.INSTANCE, NEW_FILE_PATH, PathUtils.EMPTY_COPY_OPTIONS));
assertEquals(0, FilesUncheck.copy(FILE_PATH_EMPTY, NullOutputStream.INSTANCE));
assertEquals(TARGET_PATH, FilesUncheck.createDirectories(TARGET_PATH, EMPTY_FILE_ATTRIBUTES_ARRAY));
assertEquals(NEW_DIR_PATH, FilesUncheck.createDirectory(NEW_DIR_PATH, EMPTY_FILE_ATTRIBUTES_ARRAY));
assertEquals(NEW_FILE_PATH, FilesUncheck.createFile(NEW_FILE_PATH, EMPTY_FILE_ATTRIBUTES_ARRAY));
assertEquals(NEW_FILE_PATH_LINK, FilesUncheck.createLink(NEW_FILE_PATH_LINK, FILE_PATH_EMPTY));
assertEquals(NEW_FILE_PATH_LINK, FilesUncheck.createSymbolicLink(NEW_FILE_PATH_LINK, FILE_PATH_EMPTY));
assertEquals(TARGET_PATH, FilesUncheck.createTempDirectory(TARGET_PATH, PREFIX, EMPTY_FILE_ATTRIBUTES_ARRAY).getParent());
assertEquals(PathUtils.getTempDirectory(), FilesUncheck.createTempDirectory(PREFIX, EMPTY_FILE_ATTRIBUTES_ARRAY).getParent());
assertEquals(TARGET_PATH, FilesUncheck.createTempFile(TARGET_PATH, PREFIX, SUFFIX, EMPTY_FILE_ATTRIBUTES_ARRAY).getParent());
assertEquals(PathUtils.getTempDirectory(), FilesUncheck.createTempFile(PREFIX, SUFFIX, EMPTY_FILE_ATTRIBUTES_ARRAY).getParent());
assertEquals(0L, FilesUncheck.getAttribute(FILE_PATH_EMPTY, "basic:size", LinkOption.NOFOLLOW_LINKS));
assertEquals(0, FilesUncheck.lines(FILE_PATH_EMPTY).count());
assertEquals(0, FilesUncheck.lines(FILE_PATH_EMPTY, StandardCharsets.UTF_8).count());
assertEquals(1, FilesUncheck.list(Paths.get("src/test/resources/org/apache/commons/io/dirs-1-file-size-0")).count());
assertEquals(tempFile2, FilesUncheck.move(tempFile1, tempFile2, StandardCopyOption.REPLACE_EXISTING));
assertEquals("test", FilesUncheck.readAllLines(tempPath, StandardCharsets.UTF_8).get(0));
assertEquals("test", FilesUncheck.readAllLines(tempPath).get(0));
assertEquals(0, Uncheck.get(() -> {try (SeekableByteChannel c = FilesUncheck.newByteChannel(FILE_PATH_EMPTY, StandardOpenOption.READ)) {return c.size();
assertEquals(0, Uncheck.get(() -> {try (SeekableByteChannel c = FilesUncheck.newByteChannel(FILE_PATH_EMPTY, options, EMPTY_FILE_ATTRIBUTES_ARRAY)) {return c.size();
directoryStream.forEach(e -> assertEquals(TARGET_PATH, e.getParent()));
directoryStream.forEach(e -> assertEquals(TARGET_PATH, e.getParent()));
directoryStream.forEach(e -> assertEquals(TARGET_PATH, e.getParent()));
assertEquals(0, Uncheck.get(() -> {try (InputStream in = FilesUncheck.newInputStream(FILE_PATH_EMPTY, StandardOpenOption.READ)) {return in.available();
assertEquals("test", FilesUncheck.readAllLines(tempPath).get(0));
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, FilesUncheck.readAllBytes(FILE_PATH_EMPTY));
assertArrayEquals(new byte[] {'a'}, FilesUncheck.readAllBytes(FILE_PATH_A));
assertEquals(Collections.emptyList(), FilesUncheck.readAllLines(FILE_PATH_EMPTY));
assertEquals(Arrays.asList("a"), FilesUncheck.readAllLines(FILE_PATH_A));
assertEquals(Collections.emptyList(), FilesUncheck.readAllLines(FILE_PATH_EMPTY, StandardCharsets.UTF_8));
assertEquals(Arrays.asList("a"), FilesUncheck.readAllLines(FILE_PATH_A, StandardCharsets.UTF_8));
assertEquals(FILE_PATH_EMPTY, FilesUncheck.setAttribute(FILE_PATH_EMPTY, "basic:lastModifiedTime", ft, LinkOption.NOFOLLOW_LINKS));
assertEquals(FILE_PATH_EMPTY, FilesUncheck.setLastModifiedTime(FILE_PATH_EMPTY, ft));
assertEquals(FILE_PATH_EMPTY, FilesUncheck.setOwner(FILE_PATH_EMPTY, owner));
assertEquals(FILE_PATH_EMPTY, FilesUncheck.setPosixFilePermissions(FILE_PATH_EMPTY, posixFilePermissions));
assertEquals(0, FilesUncheck.size(FILE_PATH_EMPTY));
assertEquals(1, FilesUncheck.size(FILE_PATH_A));
assertEquals(TARGET_PATH, FilesUncheck.walkFileTree(TARGET_PATH, NoopPathVisitor.INSTANCE));
assertEquals(TARGET_PATH, FilesUncheck.walkFileTree(TARGET_PATH, new HashSet<>(), 1, NoopPathVisitor.INSTANCE));
assertEquals(1, FilesUncheck.walk(TARGET_PATH, 0, FileVisitOption.FOLLOW_LINKS).count());
assertEquals(tempFile, FilesUncheck.write(tempFile, "test".getBytes(), StandardOpenOption.TRUNCATE_EXISTING));
assertEquals(tempFile, FilesUncheck.write(tempFile, Arrays.asList("test"), StandardCharsets.UTF_8, StandardOpenOption.TRUNCATE_EXISTING));
assertEquals(tempFile, FilesUncheck.write(tempFile, Arrays.asList("test"), StandardOpenOption.TRUNCATE_EXISTING));
public class CounterAssertions {static void assertCounter(final long expected, final Counter actual, final String message) {assertEquals(expected, actual.get(), message);
assertEquals(Long.valueOf(expected), actual.getLong(), message);
assertEquals(BigInteger.valueOf(expected), actual.getBigInteger(), message);
static void assertCounts(final long expectedDirCount, final long expectedFileCount, final long expectedByteCount,final CountingPathVisitor actualVisitor) {assertCounts(expectedDirCount, expectedFileCount, expectedByteCount, actualVisitor.getPathCounters());
static void assertCounts(final long expectedDirCount, final long expectedFileCount, final long expectedByteCount,final PathCounters actualPathCounters) {assertCounter(expectedDirCount, actualPathCounters.getDirectoryCounter(), "getDirectoryCounter");
assertCounter(expectedFileCount, actualPathCounters.getFileCounter(), "getFileCounter");
assertCounter(expectedByteCount, actualPathCounters.getByteCounter(), "getByteCounter");
public static void assertZeroCounters(final PathCounters pathCounters) {assertCounts(0, 0, 0, pathCounters);
assertEquals(Counters.longPathCounters(), pathCounters);
assertEquals(pathFilter, streamFilter.getPathFilter());
assertEquals(PATH_FIXTURE, path.getFileName().toString());
assertEquals(pathFilter, streamFilter.getPathFilter());
stream.forEach(path -> assertNotEquals(PATH_FIXTURE, path.getFileName().toString()));
assertEquals(0, theInstance.getTrackCount());
assertEquals(1, theInstance.getTrackCount());
assertEquals(0, theInstance.getTrackCount());
assertEquals(0, theInstance.getTrackCount());
assertEquals(1, theInstance.getTrackCount());
assertEquals(0, theInstance.getTrackCount());
assertEquals(0, theInstance.getTrackCount());
assertEquals(1, theInstance.getTrackCount());
assertEquals(0, theInstance.getTrackCount());
assertEquals(0, theInstance.getTrackCount(), "3-Track Count");
assertEquals(1, theInstance.getTrackCount(), "4-Track Count");
assertEquals(0, theInstance.getTrackCount(), "10-Track Count");
assertEquals(0, theInstance.getTrackCount());
assertEquals(1, theInstance.getTrackCount());
assertEquals(0, theInstance.getTrackCount());
assertEquals(0, theInstance.getTrackCount());
assertEquals(0, theInstance.getTrackCount());
assertEquals(1, theInstance.getTrackCount());
assertEquals(0, theInstance.getTrackCount());
private void assertData(final byte[] expected, final byte[] actual, final int len) {assertEquals(expected.length, len, "length");
assertEquals(expected[ii], actual[ii], "byte " + ii);
assertEquals("X", doc.getFirstChild().getNodeName());
assertEquals("X", doc.getFirstChild().getNodeName());
del.assertCloseCalled();
assertEquals(ByteOrderMark.UTF_8, in.getBOM(), "getBOM");
assertEquals(ByteOrderMark.UTF_8, in.getBOM(), "getBOM");
assertEquals(ByteOrderMark.UTF_8, in.getBOM(), "getBOM");
assertEquals(ByteOrderMark.UTF_16BE, in.getBOM(), "getBOM");
assertEquals(ByteOrderMark.UTF_16LE, in.getBOM(), "getBOM");
assertEquals(ByteOrderMark.UTF_32BE, in.getBOM(), "getBOM");
assertEquals(ByteOrderMark.UTF_32LE, in.getBOM(), "getBOM");
assertEquals(ByteOrderMark.UTF_8, in.getBOM(), "getBOM");
assertEquals(ByteOrderMark.UTF_8, in.getBOM(), "getBOM");
assertData(new byte[] { 'A', 'B' }, buf, in.read(buf, 0, 2));
assertData(new byte[] { 'C' }, buf, in.read(buf, 0, 2));
assertData(new byte[] { 'A', 'B' }, buf, in.read(buf, 0, 2));
assertData(new byte[] { 'C' }, buf, in.read(buf, 0, 2));
assertData(new byte[] { (byte) 0xEF, (byte) 0xBB, (byte) 0xBF, 'A', 'B' }, buf, len);
assertEquals(empty.length, is.available());
assertEquals(one.length, is.available());
assertEquals(some.length, is.available());
assertEquals(empty.length, is.available());
assertEquals(one.length, is.available());
assertEquals(some.length, is.available());
assertEquals(some.length - 1, is.available());
assertEquals(some.length - 10, is.available());
assertEquals(empty.length, is.available());
assertEquals(one.length, is.available());
assertEquals(one.length - 1, is.available());
assertEquals(some.length, is.available());
assertEquals(some.length - 1, is.available());
assertEquals(some.length - 10, is.available());
assertEquals(some.length, is.available());
assertEquals(xmlReader.getDefaultEncoding(), alternateEnc);
// we can not assert things here because UTF-8, US-ASCII and// ISO-8859-1 look alike for the chars used for detection// (niallp 2010-10-06 - I re-instated the check below - the tests(6) passed)final String enc = alternateEnc != null ? alternateEnc : streamEnc;
assertEquals(xmlReader.getEncoding(), enc);
assertEquals(xmlReader.getEncoding().substring(0, streamEnc.length()), streamEnc);
assertEquals(xmlReader.getEncoding(), UTF_8);
assertEquals(xmlReader.getEncoding(), encoding, "Check encoding");
assertEquals(xml, IOUtils.toString(xmlReader), "Check content");
assertEquals(xmlReader.getEncoding(), shouldBe);
// we can not assert things here because UTF-8, US-ASCII and// ISO-8859-1 look alike for the chars used for detection// (niallp 2010-10-06 - I re-instated the check below and removed the 2 tests that failed)assertEquals(xmlReader.getEncoding(), streamEnc);
assertEquals(xmlReader.getEncoding().substring(0, streamEnc.length()), streamEnc);
assertEquals(xml, IOUtils.toString(xmlReader), "Check content");
assertEquals(xmlReader.getEncoding(), encoding);
assertEquals(xmlReader.getEncoding().substring(0, encoding.length()), encoding);
assertEquals(xmlReader.getEncoding(), encoding, "Check encoding");
assertEquals(xml, IOUtils.toString(xmlReader), "Check content");
assertEquals(xmlReader.getEncoding(), UTF_8);
assertEquals(xmlReader.getEncoding(), UTF_8);
assertEquals(xmlReader.getEncoding(), encoding);
assertEquals(xmlReader.getEncoding(), encoding);
assertEquals(xmlReader.getEncoding(), encoding);
assertEquals(size, file.length());
@SuppressWarnings("squid:S2699") // Suppress "Add at least one assertion to this test case"public void testBufferBreak() throws Exception {final long delay = 50;
assertEquals(1, listener.initialized, "Expected init to be called");
assertEquals(0, listener.rotated, "fileRotated should be not be called");
assertEquals(0, listener.reachedEndOfFile, "end of file never reached");
assertEquals(4, lines.size(), "line count");
assertEquals("CRLF", lines.get(0), "line 1");
assertEquals("LF", lines.get(1), "line 2");
assertEquals("CR", lines.get(2), "line 3");
assertEquals("CRCR\r", lines.get(3), "line 4");
@SuppressWarnings("squid:S2699") // Suppress "Add at least one assertion to this test case"public void testLongFile() throws Exception {final long delay = 50;
assertEquals(lines.size(), tailerlines.size(), "line count");
assertEquals(1, listener.initialized, "Expected init to be called");
assertEquals(0, listener.rotated, "fileRotated should be not be called");
assertEquals(0, listener.reachedEndOfFile, "end of file never reached");
assertEquals(1, listener.initialized, "Expected init to be called");
assertEquals(0, listener.rotated, "fileRotated should be not be called");
assertEquals(0, listener.reachedEndOfFile, "end of file never reached");
assertEquals(2, lines.size(), "1 line count");
assertEquals("Line one", lines.get(0), "1 line 1");
assertEquals("Line two", lines.get(1), "1 line 2");
assertEquals(1, lines.size(), "2 line count");
assertEquals("Line three", lines.get(0), "2 line 3");
assertEquals(3, lines.size(), "3 line count");
assertEquals("Line one", lines.get(0), "3 line 1");
assertEquals("Line two", lines.get(1), "3 line 2");
assertEquals("Line three", lines.get(2), "3 line 3");
assertEquals(1, lines.size(), "4 line count");
assertEquals("Line four", lines.get(0), "4 line 3");
assertEquals(0, listener.getLines().size(), "4 line count");
assertEquals(1, listener.initialized, "Expected init to be called");
// assertEquals(0 , listener.notFound, "fileNotFound should not be called"); // there is a window when it might be
assertEquals(1, listener.rotated, "fileRotated should be called");
assertEquals(0, lines.size(), "1 line count");
assertEquals(1, lines.size(), "1 line count");
assertEquals("Line one", lines.get(0), "1 line 1");
assertEquals(listener.getLines(), Lists.newArrayList("foo"), "lines");
assertEquals(expected[i], actual[i], "Compare[" +i + "]");
assertEquals(expected.charAt(i), (char)reader.read(), "Read[" + i + "] of '" + expected + "'");
assertEquals('F', reader.read());
assertEquals('o', reader.read());
assertEquals('o', reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals('o', reader.read());
assertEquals('o', reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals(2, reader.read(chars));
assertEquals(3, reader.read(chars));
assertEquals(1, reader.read(chars));
assertEquals(-1, reader.read(chars));
assertEquals(2, reader.read(chars));
assertEquals(2, reader.read(chars));
assertEquals(-1, reader.read(chars));
assertEquals(-1, reader.read(chars));
assertEquals(3, reader.read(chars, 3, 3));
assertEquals(3, reader.read(chars, 0, 3));
assertEquals(-1, reader.read(chars));
assertEquals(2, reader.read(chars, 3, 2));
assertEquals(2, reader.read(chars, 0, 3));
assertEquals(-1, reader.read(chars));
assertEquals('F', reader.read());
assertEquals('o', reader.read());
assertEquals('o', reader.read());
assertEquals('B', reader.read());
assertEquals('a', reader.read());
assertEquals('r', reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals('F', reader.read());
assertEquals('o', reader.read());
assertEquals('o', reader.read());
assertEquals('B', reader.read());
assertEquals('a', reader.read());
assertEquals('r', reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals('F', reader.read());
assertEquals('o', reader.read());
assertEquals('o', reader.read());
assertEquals('B', reader.read());
assertEquals('a', reader.read());
assertEquals('r', reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, subReader.read());
assertEquals("FooBar", new CharSequenceReader("FooBar").toString());
assertEquals("FooBar", new CharSequenceReader("xFooBarx", 1, 7).toString());
assertEquals(-1, stream.read(), "read()");
assertEquals(-1, stream.read(), "read()");
assertEquals(element, stream.read(), "read()");
assertEquals(-1, stream.read(), "read()");
assertEquals(data.length, total, "read(b)");
assertEquals(-1, stream.read(b), "read(b)");
assertEquals(data.length, total, "read(b, off, len)");
assertEquals(-1, stream.read(b, 0, b.length), "read(b, off, len)");
assertEqualsAndNoLineBreaks("987654321", reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks("123456789", reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks("987654321", lines.get(0));
assertEqualsAndNoLineBreaks("123456789", lines.get(1));
assertEquals("123456789" + System.lineSeparator() + "987654321" + System.lineSeparator(), lines);
assertEquals((byte) result, buffer[i]);
assertEquals((byte) result, buffer[i]);
assertEquals(readBuffer, observer.buffer);
assertEquals(0, observer.offset);
assertEquals(readBuffer.length, observer.length);
assertEquals(readBuffer, observer.buffer);
assertEquals(1, observer.offset);
assertEquals(res, observer.length);
assertEquals(observer0, ois.getObservers().get(0));
assertEquals(observer0, ois.getObservers().get(0));
assertEquals(observer1, ois.getObservers().get(1));
assertEquals(IOUtils.DEFAULT_BUFFER_SIZE,IOUtils.copy(ois, NullOutputStream.INSTANCE, bufferSize));
assertEquals(IOUtils.DEFAULT_BUFFER_SIZE, lengthObserver.getTotal());
assertEquals(1, methodCountObserver.getClosedCount());
assertEquals(1, methodCountObserver.getFinishedCount());
assertEquals(0, methodCountObserver.getErrorCount());
assertEquals(0, methodCountObserver.getDataCount());
assertEquals(buffer.length / bufferSize, methodCountObserver.getDataBufferCount());
assertEquals(0, input.read(), "Read 1");
assertEquals(1, input.read(), "Read 2");
assertEquals("No position has been marked", e.getMessage(), "No Mark IOException message");
assertEquals(position, input.read(), "Read Before Mark [" + position + "]");
assertEquals(position + i, input.read(), "Read After Mark [" + i + "]");
assertEquals(position + i, input.read(), "Read After Reset [" + i + "]");
assertEquals("Marked position [" + position + "] is no longer valid - passed the read limit [" + readlimit + "]", e.getMessage(),"Read limit IOException message");
assertEquals(MARK_RESET_NOT_SUPPORTED, e.getMessage(), "mark() error message");
assertEquals(MARK_RESET_NOT_SUPPORTED, e.getMessage(), "reset() error message");
assertEquals(size - i, input.available(), "Check Size [" + i + "]");
assertEquals(i, input.read(), "Check Value [" + i + "]");
assertEquals(0, input.available(), "Available after contents all read");
assertEquals(-1, input.read(), "End of File");
assertEquals(0, input.available(), "Available after End of File");
assertEquals("Read after end of file", e.getMessage());
assertEquals(size, input.available(), "Available after close");
assertEquals(bytes.length, count1, "Read 1");
assertEquals(i, bytes[i], "Check Bytes 1");
assertEquals(5, count2, "Read 2");
assertEquals(count1 + i, bytes[i], "Check Bytes 2");
assertEquals(-1, count3, "Read 3 (EOF)");
assertEquals("Read after end of file", e.getMessage());
assertEquals(lth, count5, "Read 5");
assertEquals(i, bytes[i], "Check Bytes 2");
assertEquals(0, input.read(), "Read 1");
assertEquals(1, input.read(), "Read 2");
assertEquals(5, input.skip(5), "Skip 1");
assertEquals(7, input.read(), "Read 3");
assertEquals(2, input.skip(5), "Skip 2"); // only 2 left to skip
assertEquals(-1, input.skip(5), "Skip 3 (EOF)"); // End of file
assertEquals("Skip after end of file", e.getMessage(), "Skip after EOF IOException message");
assertEquals(exception, e2);
assertEquals(exception, e2);
assertEquals(exception, e2);
assertEquals(-1, reader.read());
assertEquals(-1, reader.read(new char[1]));
assertEquals(-1, reader.read(new char[1], 0, 1));
assertEquals('a', reader.read());
assertEquals(1, reader.read(buffer));
assertEquals(1, reader.read(buffer, 0, 1));
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals('b', reader.read());
assertEquals(-1, reader.read());
assertEquals('a', reader.read());
assertEquals(-1, reader.read());
assertEquals('a', reader.read());
assertEquals('b', reader.read());
assertEquals(-1, reader.read());
assertEquals("aacacd", new String(buff, 0, charCount));
assertEquals("ababcabcd", new String(buff, 0, charCount));
assertEquals("aacacd", output.toString());
assertEquals("ababcabcd", output.toString());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals('b', reader.read());
assertEquals(-1, reader.read());
assertEquals('a', reader.read());
assertEquals(-1, reader.read());
assertEquals('b', reader.read());
assertEquals(-1, reader.read());
assertEquals('a', reader.read());
assertEquals(-1, reader.read());
assertEquals('a', reader.read());
assertEquals('b', reader.read());
assertTimeoutPreemptively(Duration.ofMillis(500), () -> {try (StringBuilderWriter output = new StringBuilderWriter();
assertEquals('0', uncheckedReader.read());
assertEquals(c, ucStringReader.read());
assertEquals('0', uncheckedReader.read());
assertEquals('1', uncheckedReader.read());
assertEquals(IOUtils.EOF, uncheckedReader.read());
assertEquals(IOUtils.EOF, uncheckedReader.read());
assertEquals(1, uncheckedReader.read(array));
assertEquals('0', array[0]);
assertEquals(1, uncheckedReader.read(array));
assertEquals('1', array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array));
assertEquals(0, array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array));
assertEquals(0, array[0]);
assertEquals(1, uncheckedReader.read(array, 0, 1));
assertEquals('0', array[0]);
assertEquals(1, uncheckedReader.read(array, 0, 1));
assertEquals('1', array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array, 0, 1));
assertEquals(0, array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array, 0, 1));
assertEquals(0, array[0]);
assertEquals(1, uncheckedReader.read(buffer));
assertEquals(1, uncheckedReader.read(buffer));
assertEquals(IOUtils.EOF, uncheckedReader.read(buffer));
assertEquals(0, uncheckedReader.read(buffer));
assertEquals("01", uncheckedReader.readLine());
assertEquals(IOUtils.EOF, uncheckedReader.read());
assertEquals(IOUtils.EOF, uncheckedReader.read());
assertEquals(randomBytes[i], (byte) inputStream.read());
assertEquals(randomBytes.length, inputStream.skip(randomBytes.length + 1));
assertEquals(randomBytes[i], (byte) inputStream.read());
assertEquals(randomBytes[i], (byte) inputStream.read());
assertEquals(randomBytes[i], (byte) inputStream.read());
assertEquals(randomBytes[i], (byte) inputStream.read());
assertEquals(randomBytes[i], readBytes[j]);
assertEquals(randomByte, (byte) inputStream.read());
assertEquals(randomBytes[i], (byte) inputStream.read());
assertEquals(randomBytes[i], (byte) inputStream.read());
assertEquals(-1, cis.read(), "read()");
assertEquals( Double.longBitsToDouble(0x0807060504030201L), this.sdis.readDouble(), 0 );
assertEquals( 0x01, this.sdis.readUnsignedByte() );
assertEquals(0, reader.read(), "Read 1");
assertEquals(1, reader.read(), "Read 2");
assertEquals("No position has been marked", e.getMessage(), "No Mark IOException message");
assertEquals(position, reader.read(), "Read Before Mark [" + position + "]");
assertEquals(position + i, reader.read(), "Read After Mark [" + i + "]");
assertEquals(position + i, reader.read(), "Read After Reset [" + i + "]");
assertEquals("Marked position [" + position + "] is no longer valid - passed the read limit [" + readlimit + "]", e.getMessage(),"Read limit IOException message");
assertEquals(MARK_RESET_NOT_SUPPORTED, e.getMessage(), "mark() error message");
assertEquals(MARK_RESET_NOT_SUPPORTED, e.getMessage(), "reset() error message");
assertEquals(i, reader.read(), "Check Value [" + i + "]");
assertEquals(-1, reader.read(), "End of File");
assertEquals("Read after end of file", e.getMessage());
assertEquals(0, reader.getPosition(), "Available after close");
assertEquals(chars.length, count1, "Read 1");
assertEquals(i, chars[i], "Check Chars 1");
assertEquals(5, count2, "Read 2");
assertEquals(count1 + i, chars[i], "Check Chars 2");
assertEquals(-1, count3, "Read 3 (EOF)");
assertEquals("Read after end of file", e.getMessage());
assertEquals(lth, count5, "Read 5");
assertEquals(i, chars[i], "Check Chars 3");
assertEquals(0, reader.read(), "Read 1");
assertEquals(1, reader.read(), "Read 2");
assertEquals(5, reader.skip(5), "Skip 1");
assertEquals(7, reader.read(), "Read 3");
assertEquals(2, reader.skip(5), "Skip 2"); // only 2 left to skip
assertEquals(-1, reader.skip(5), "Skip 3 (EOF)"); // End of file
assertEquals("Skip after end of file", e.getMessage(), "Skip after EOF IOException message");
assertEquals(expected[i], actual[i], "Compare[" + i + "]");
assertEquals(expected.charAt(i), (char) reader.read(), "Read[" + i + "] of '" + expected + "'");
assertEquals(-1, reader.read());
assertEquals('F', reader.read());
assertEquals('o', reader.read());
assertEquals('o', reader.read());
assertEquals('B', reader.read());
assertEquals('a', reader.read());
assertEquals('r', reader.read());
assertEquals(2, reader.read(chars));
assertEquals(3, reader.read(chars));
assertEquals(1, reader.read(chars));
assertEquals(-1, reader.read(chars));
assertEquals(3, reader.read(chars, 3, 3));
assertEquals(3, reader.read(chars, 0, 3));
assertEquals(-1, reader.read(chars));
assertEquals('F', reader.read());
assertEquals('B', reader.read());
assertEquals('F', reader.read());
assertEquals('B', reader.read());
assertEquals('0', reader.read());
assertEquals('1', reader.read());
assertEquals('2', reader.read());
assertEquals('3', reader.read());
assertEquals('F', reader.read());
assertEquals('B', reader.read());
assertEquals(Arrays.toString(expected), Arrays.toString(actual));
assertEquals(Charset.defaultCharset(), in.getCharsetEncoder().charset());
assertEquals(Charset.defaultCharset(), in.getCharsetEncoder().charset());
assertEquals(Charset.defaultCharset(), in.getCharsetEncoder().charset());
assertEquals(0, inputStream.read(bytes, 0, 0));
assertEquals(inStr.length(), inputStream.read(bytes, 0, inStr.length() + 1));
assertEquals(0, inputStream.read(bytes, 0, 0));
assertEquals(0, inputStream.read(bytes, 0, 0));
assertEquals(-1, inputStream.read(bytes, 0, 1));
assertEquals(0, inputStream.read(bytes, 0, 0));
assertEquals(-1, inputStream.read(bytes, 0, 1));
assertEquals(offset, expected.length);
assertEquals(expected[offset], buffer[bufferOffset]);
assertEquals(expected, XmlStreamReader.isAppXml(mime), "Mime=[" + mime + "]");
assertEquals(expected, XmlStreamReader.getContentTypeEncoding(httpContentType), "ContentTypeEncoding=[" + httpContentType + "]");
assertEquals(expected, XmlStreamReader.getContentTypeMime(httpContentType), "ContentTypeMime=[" + httpContentType + "]");
assertEquals(expected, encoding, builder.toString());
assertEquals(bomEnc, e.getBomEncoding(), "bomEnc");
assertEquals(xmlGuessEnc, e.getXmlGuessEncoding(), "xmlGuessEnc");
assertEquals(xmlEnc, e.getXmlEncoding(), "xmlEnc");
assertEquals(XmlStreamReader.getContentTypeEncoding(httpContentType), e.getContentTypeEncoding(),"ContentTypeEncoding");
assertEquals(XmlStreamReader.getContentTypeMime(httpContentType), e.getContentTypeMime(), "ContentTypeMime");
assertEquals(expected, encoding, builder.toString());
assertEquals(bomEnc, e.getBomEncoding(), "bomEnc");
assertEquals(xmlGuessEnc, e.getXmlGuessEncoding(), "xmlGuessEnc");
assertEquals(xmlEnc, e.getXmlEncoding(), "xmlEnc");
assertEquals(expected, XmlStreamReader.isTextXml(mime), "Mime=[" + mime + "]");
assertTimeout(TIMEOUT, () -> testLineNumberReaderAndFileReaderLastLine(STRING_END_NO_EOL));
assertTimeout(TIMEOUT, () -> testLineNumberReaderAndFileReaderLastLine(STRING_END_EOL));
assertTimeout(TIMEOUT, () -> testLineNumberReader(new StringReader(STRING_END_NO_EOL)));
assertTimeout(TIMEOUT, () -> testLineNumberReader(new StringReader(STRING_END_EOL)));
assertTimeout(TIMEOUT, () -> {final BoundedReader mr = new BoundedReader(sr, 3);
assertEquals('a', tee.read());
assertEquals('b', tee.read());
assertEquals('b', tee.read());
assertEquals('c', tee.read());
assertEquals(-1, tee.read());
assertEquals("abbc", output.toString(ASCII));
assertEquals('a', tee.read());
assertEquals('b', tee.read());
assertEquals('c', tee.read());
assertEquals(-1, tee.read());
assertEquals("abc", output.toString(ASCII));
assertEquals("", output.toString(ASCII));
assertEquals('a', tee.read());
assertEquals("a", output.toString(ASCII));
assertEquals(3, tee.read(buffer));
assertEquals(-1, tee.read(buffer));
assertEquals("abc", output.toString(ASCII));
assertEquals(3, tee.read(buffer, 4, 4));
assertEquals(-1, tee.read(buffer, 4, 4));
assertEquals("abc", output.toString(ASCII));
assertEquals('a', tee.read());
assertEquals('c', tee.read());
assertEquals(-1, tee.read());
assertEquals("ac", output.toString(ASCII));
private void assertStreamOutput(final byte[] toCycle, final byte[] expected) throws IOException {final byte[] actual = new byte[expected.length];
assertArrayEquals(expected, actual);
assertEquals(expected.length, actualReadBytes);
assertStreamOutput(input, expected);
assertStreamOutput(contentToCycle, expectedOutput);
assertEquals(expected.length, actual.length, msg + " length");
assertEquals(expected[i], actual[i], msg + " byte[" + i + "]");
assertEquals(helloWorld[i], bounded.read(), "limit = length byte[" + i + "]");
assertEquals(-1, bounded.read(), "limit = length end");
assertEquals(helloWorld[i], bounded.read(), "limit > length byte[" + i + "]");
assertEquals(-1, bounded.read(), "limit > length end");
assertEquals(hello[i], bounded.read(), "limit < length byte[" + i + "]");
assertEquals(-1, bounded.read(), "limit < length end");
assertEquals(exception, e2);
assertEquals(exception, e2);
assertEquals(exception, e2);
assertEquals(-1, stream.read(new byte[1]));
assertEquals(-1, stream.read(new byte[1], 0, 1));
assertEquals(1, stream.read(buffer));
assertEquals(1, stream.read(buffer, 0, 1));
assertEquals(available - 1, r.skip(available - 1)); // skip all but one
assertEquals(available, r.read(buff, 0, available));
assertEquals(available - 1, r.skip(available - 1)); // skip all but one
assertEquals(expected.length, offset, "EOF: offset should equal length for charset " + charsetName);
assertEquals(expected[offset], buffer[bufferOffset], "bytes should agree for " + charsetName);
assertArrayEquals(data1, data2, "bufferSize=" + bufferSize + " dataSize=" + dataSize);
assertEquals(Charset.defaultCharset(), in.getCharsetEncoder().charset());
assertEquals(Charset.defaultCharset(), in.getCharsetEncoder().charset());
assertEquals(b, (byte) read, "Should agree with input");
assertEquals("01", IOUtils.toString(input, Charset.defaultCharset()));
assertEquals("01", IOUtils.toString(input, Charset.defaultCharset()));
assertArrayEquals(expect, messageDigestInputStream.getMessageDigest().digest());
assertEquals('a', tee.read());
assertEquals('b', tee.read());
assertEquals('b', tee.read());
assertEquals('c', tee.read());
assertEquals(-1, tee.read());
assertEquals("abbc", output.toString());
assertEquals('a', tee.read());
assertEquals('b', tee.read());
assertEquals('c', tee.read());
assertEquals(-1, tee.read());
assertEquals("abc", output.toString());
assertEquals("", output.toString());
assertEquals('a', tee.read());
assertEquals("a", output.toString());
assertEquals(3, tee.read(buffer));
assertEquals(-1, tee.read(buffer));
assertEquals("abc", output.toString());
assertEquals(3, tee.read(buffer, 4, 4));
assertEquals(-1, tee.read(buffer, 4, 4));
assertEquals("abc", output.toString());
assertEquals(3, tee.read(buffer));
assertEquals(-1, tee.read(buffer));
assertEquals("abc", output.toString());
assertEquals('a', tee.read());
assertEquals('c', tee.read());
assertEquals(-1, tee.read());
assertEquals("ac", output.toString());
private void assertStreamOutput(final byte[] toCycle, final byte[] expected) throws IOException {final byte[] actual = new byte[expected.length];
assertArrayEquals(expected, actual);
assertEquals(expected.length, actualReadBytes);
assertStreamOutput(input, expected);
assertStreamOutput(contentToCycle, expectedOutput);
assertEquals(lineFromBufferedReader, line);
assertEquals(0, lineStack.size(), "Stack should be empty");
assertEquals(c, ucStringReader.read());
assertEquals('0', uncheckedReader.read());
assertEquals('1', uncheckedReader.read());
assertEquals(IOUtils.EOF, uncheckedReader.read());
assertEquals(IOUtils.EOF, uncheckedReader.read());
assertEquals(1, uncheckedReader.read(array));
assertEquals('0', array[0]);
assertEquals(1, uncheckedReader.read(array));
assertEquals('1', array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array));
assertEquals(0, array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array));
assertEquals(0, array[0]);
assertEquals(1, uncheckedReader.read(array, 0, 1));
assertEquals('0', array[0]);
assertEquals(1, uncheckedReader.read(array, 0, 1));
assertEquals('1', array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array, 0, 1));
assertEquals(0, array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array, 0, 1));
assertEquals(0, array[0]);
assertEquals(1, uncheckedReader.read(buffer));
assertEquals(1, uncheckedReader.read(buffer));
assertEquals(IOUtils.EOF, uncheckedReader.read(buffer));
assertEquals(0, uncheckedReader.read(buffer));
assertEquals("Broken input stream", thrown.getMessage());
assertEquals(1, suppressed.length);
assertEquals(IOException.class, suppressed[0].getClass());
assertEquals("Broken input stream", suppressed[0].getMessage());
assertEquals(-1, cr.read(new char[10], 0, 10), "read(cbuf, off, len)");
assertEquals(file, inputStream.getRandomAccessFile());
assertEquals('e', inputStream.read());
assertEquals('e', inputStream.read());
assertEquals(dataLen, inputStream.read(buffer));
assertArrayEquals("A Test Line.".getBytes(StandardCharsets.ISO_8859_1), buffer);
assertEquals(DATA_FILE_LEN - dataLen, inputStream.available());
assertEquals(DATA_FILE_LEN - dataLen, inputStream.availableLong());
assertEquals(dataLen, inputStream.read(buffer, 0, dataLen));
assertArrayEquals("A Test Line.".getBytes(StandardCharsets.ISO_8859_1), buffer);
assertEquals(DATA_FILE_LEN - dataLen, inputStream.available());
assertEquals(DATA_FILE_LEN - dataLen, inputStream.availableLong());
assertEquals(0, inputStream.skip(Integer.MIN_VALUE));
assertEquals('e', inputStream.read());
assertEquals(avail, inputStream.skip(inputStream.availableLong()));
assertEquals(DATA_FILE_LEN, file.getFilePointer());
assertEquals(-1, shielded.read(cbuf, 0, 10), "read(cbuf, off, len)");
assertEquals(data.length(), original.read(cbuf, 0, 10), "read(cbuf, off, len)");
assertEquals(textResult, text);
assertEquals(size, cis.getByteCount(), "getByteCount()");
assertEquals(size, cis.resetByteCount(), "resetByteCount()");
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals('b', reader.read());
assertEquals(-1, reader.read());
assertEquals('a', reader.read());
assertEquals(-1, reader.read());
assertTimeoutPreemptively(Duration.ofMillis(500), () -> {try (StringBuilderWriter output = new StringBuilderWriter();
assertEquals("aacacd", new String(buff, 0, charCount));
assertEquals("aacacd", output.toString());
assertEquals("Broken reader", thrown.getMessage());
assertEquals(1, suppressed.length);
assertEquals(IOException.class, suppressed[0].getClass());
assertEquals("Broken reader", suppressed[0].getMessage());
assertEquals('0', uncheckedReader.read());
assertEquals('1', uncheckedReader.read());
assertEquals(IOUtils.EOF, uncheckedReader.read());
assertEquals(IOUtils.EOF, uncheckedReader.read());
assertEquals(1, uncheckedReader.read(array));
assertEquals('0', array[0]);
assertEquals(1, uncheckedReader.read(array));
assertEquals('1', array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array));
assertEquals(0, array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array));
assertEquals(0, array[0]);
assertEquals(1, uncheckedReader.read(array, 0, 1));
assertEquals('0', array[0]);
assertEquals(1, uncheckedReader.read(array, 0, 1));
assertEquals('1', array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array, 0, 1));
assertEquals(0, array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array, 0, 1));
assertEquals(0, array[0]);
assertArrayEquals(expectedData, IOUtils.toByteArray(inputStream));
assertArrayEquals(expectedData, IOUtils.toByteArray(inputStream));
assertArrayEquals(expectedData, new byte[] {(byte) b1, (byte) b2});
assertArrayEquals(Arrays.copyOfRange(expectedData, 1, expectedData.length), data);
assertArrayEquals(Arrays.copyOfRange(expectedData, 8, expectedData.length), data);
assertArrayEquals(expectedData, IOUtils.toByteArray(inputStream));
assertArrayEquals(Arrays.copyOfRange(expectedData, 11, expectedData.length), data);
assertArrayEquals(Arrays.copyOfRange(expectedData, 10, expectedData.length), data);
assertArrayEquals(expectedData, IOUtils.toByteArray(inputStream));
static void assertEqualsAndNoLineBreaks(final String expected, final String actual) {assertEqualsAndNoLineBreaks(null, expected, actual);
assertEquals(expected, actual, msg);
private void assertFileWithShrinkingTestLines(final ReversedLinesFileReader reversedLinesFileReader) throws IOException {String line = null;
assertEqualsAndNoLineBreaks("Line " + lineCount + " is not matching", TEST_LINE.substring(0, lineCount), line);
assertEqualsAndNoLineBreaks("987654321", reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks("123456789", reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks(TEST_LINE_GBK_2, reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks(TEST_LINE_GBK_1, reversedLinesFileReader.readLine());
assertFileWithShrinkingTestLines(reversedLinesFileReader);
assertEqualsAndNoLineBreaks("", reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks("" + i, reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks(TEST_LINE_SHIFT_JIS2, reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks(TEST_LINE_SHIFT_JIS1, reversedLinesFileReader.readLine());
assertFileWithShrinkingTestLines(reversedLinesFileReader);
assertFileWithShrinkingTestLines(reversedLinesFileReader);
assertFileWithShrinkingTestLines(reversedLinesFileReader);
assertFileWithShrinkingTestLines(reversedLinesFileReader);
assertFileWithShrinkingTestLines(reversedLinesFileReader);
assertFileWithShrinkingTestLines(reversedLinesFileReader);
assertEqualsAndNoLineBreaks(TEST_LINE_WINDOWS_31J_2, reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks(TEST_LINE_WINDOWS_31J_1, reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks(TEST_LINE_X_WINDOWS_949_2, reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks(TEST_LINE_X_WINDOWS_949_1, reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks(TEST_LINE_X_WINDOWS_950_2, reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks(TEST_LINE_X_WINDOWS_950_1, reversedLinesFileReader.readLine());
assertEquals(buffer[i] & 0xFF, b, "byte at index " + i + " should be equal");
assertEquals(buffer.length, i, "Should have read all the bytes");
assertEquals(-1, shielded.read(), "read()");
assertEquals(data[0], original.read(), "read()");
assertEquals("\r", CR.getString());
assertArrayEquals("\r".getBytes(StandardCharsets.ISO_8859_1), CR.getBytes(StandardCharsets.ISO_8859_1));
assertEquals("\r\n", CRLF.getString());
assertArrayEquals("\r\n".getBytes(StandardCharsets.ISO_8859_1), CRLF.getBytes(StandardCharsets.ISO_8859_1));
assertEquals("\n", LF.getString());
assertArrayEquals("\n".getBytes(StandardCharsets.ISO_8859_1), LF.getBytes(StandardCharsets.ISO_8859_1));
assertEquals(1, realInner.list().length);
// assert contents of the real directory were removed including the symlinkFileUtils.deleteDirectory(realOuter);
assertEquals(1, randomDirectory.list().length, "Contents of sym link should not have been removed");
assertEquals(1, realInner.list().length);
// assert contents of the real directory were removed including the symlinkFileUtils.deleteDirectory(realOuter);
assertEquals(1, randomDirectory.list().length, "Contents of sym link should not have been removed");
assertEquals(1, realInner.list().length);
assertEquals(2, realInner.list().length);
// assert the real directory were removed including the symlinkFileUtils.deleteDirectory(realOuter);
assertEquals(1, realInner.list().length);
// assert only the symlink is deleted, but not followedFileUtils.deleteDirectory(symlinkParentDirectory);
assertEquals(1, randomDirectory.list().length, "Contents of sym link should not have been removed");
assertEquals(1, realInner.list().length);
// assert only the symlink is deleted, but not followedFileUtils.deleteDirectory(symlinkParentDirectory);
assertEquals(1, randomDirectory.list().length, "Contents of sym link should not have been removed");
assertEquals(2, nested.list().length);
assertEquals(0, nested.list().length);
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertArrayEquals(inData, bytes, "Content differs");
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertArrayEquals(inData, bytes, "Content differs");
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertArrayEquals(inData, bytes, "Content differs");
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertArrayEquals(inData, bytes, "Content differs");
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(expected, actual);
private void assertSerialization(final ObjectInputStream ois) throws ClassNotFoundException, IOException {final MoreComplexObject copy = (MoreComplexObject) ois.readObject();
assertEquals(original.toString(), copy.toString(), "Expecting same data after deserializing");
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(inputStream).accept(MoreComplexObject.class).accept("java.*","[Ljava.*")));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(inputStream).accept(MoreComplexObject.class, ArrayList.class, Random.class).accept("java.lang.*","[Ljava.lang.*")));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(inputStream).accept("*").reject(blacklist)));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(ALWAYS_TRUE));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(Pattern.compile(".*MockSerializedClass.*")));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept("org.apache.commons.io.*"));
private void assertSerialization(final ObjectInputStream ois) throws ClassNotFoundException, IOException {final MockSerializedClass result = (MockSerializedClass) ois.readObject();
assertEquals(testObject, result);
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class, Integer.class));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept("*MockSerializedClass","*Integer"));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(Integer.class, MockSerializedClass.class));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept("*Integer","*MockSerializedClass"));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class));
assertEquals(free, kb, acceptableDelta);
assertEquals(free / 2d, kb, acceptableDelta);
assertEquals((double) bytes / 1024, kb, acceptableDelta);
assertEquals(54321L, fsu.freeSpaceOS("", 2, false, NEG_1_TIMEOUT));
assertEquals(12345L, fsu.freeSpaceOS("", 2, true, NEG_1_TIMEOUT));
assertEquals(12345L, fsu.freeSpaceOS("", 1, false, NEG_1_TIMEOUT));
assertEquals(12345L / 1024, fsu.freeSpaceOS("", 1, true, NEG_1_TIMEOUT));
assertEquals(1472504L, fsu.freeSpaceUnix("/home/users/s", false, false, NEG_1_TIMEOUT));
assertEquals(1472504L, fsu.freeSpaceUnix("/home/users/s", true, false, NEG_1_TIMEOUT));
assertEquals(15770L, fsu.freeSpaceUnix("/", false, false, NEG_1_TIMEOUT));
assertEquals(15770L, fsu.freeSpaceUnix("/", true, false, NEG_1_TIMEOUT));
assertEquals(189416L, fsu.freeSpaceUnix("/", true, false, NEG_1_TIMEOUT));
assertEquals(481163L, fsu.freeSpaceUnix("/dev/dsk/x0x0x0x0", true, false, NEG_1_TIMEOUT));
assertEquals(189416L, fsu.freeSpaceUnix("/", false, false, NEG_1_TIMEOUT));
assertEquals(41411551232L, fsu.freeSpaceWindows("", NEG_1_TIMEOUT));
assertEquals(41411551232L, fsu.freeSpaceWindows("C:", NEG_1_TIMEOUT));
assertEquals(41411551232L, fsu.freeSpaceWindows("", NEG_1_TIMEOUT));
assertEquals(141411551232L, fsu.freeSpaceWindows("", NEG_1_TIMEOUT));
assertEquals(1232L, fsu.freeSpaceWindows("", NEG_1_TIMEOUT));
assertEquals(41411551232L, fsu.freeSpaceWindows("\"C:\\somedir\"", NEG_1_TIMEOUT));
assertEquals(41411551232L, fsu.freeSpaceWindows("C:\\somedir", NEG_1_TIMEOUT));
assertEquals(cause, sqlExceptionList.getCause());
assertEquals(cause, sqlExceptionList.getCause(0));
assertEquals(list, sqlExceptionList.getCauseList());
assertEquals(list, sqlExceptionList.getCauseList(EOFException.class));
assertEquals(cause, sqlExceptionList.getCause(0, EOFException.class));
assertEquals("Hello", sqlExceptionList.getMessage());
assertEquals(cause, sqlExceptionList.getCause());
assertEquals(cause, sqlExceptionList.getCause(0));
assertEquals(list, sqlExceptionList.getCauseList());
assertEquals(list, sqlExceptionList.getCauseList(EOFException.class));
assertEquals(cause, sqlExceptionList.getCause(0, EOFException.class));
assertEquals("A", new IOExceptionList("A", Collections.emptyList()).getMessage());
assertEquals("A", new IOExceptionList("A", null).getMessage());
private void assertContentMatchesAfterCopyURLToFileFor(final String resourceName, final File destination) throws IOException {FileUtils.copyURLToFile(getClass().getResource(resourceName), destination);
assertNotEquals(getLastModifiedMillis(testFile), lastModified1, "Should have changed source date");
assertEquals(expectedFilesAndDirs.size(), filesCount, actualFiles::toString);
assertEquals("0 bytes", FileUtils.byteCountToDisplaySize(BigInteger.ZERO));
assertEquals("1 bytes", FileUtils.byteCountToDisplaySize(BigInteger.ONE));
assertEquals("1023 bytes", FileUtils.byteCountToDisplaySize(b1023));
assertEquals("1 KB", FileUtils.byteCountToDisplaySize(KB1));
assertEquals("1 KB", FileUtils.byteCountToDisplaySize(b1025));
assertEquals("1023 KB", FileUtils.byteCountToDisplaySize(MB1.subtract(BigInteger.ONE)));
assertEquals("1 MB", FileUtils.byteCountToDisplaySize(MB1));
assertEquals("1 MB", FileUtils.byteCountToDisplaySize(MB1.add(BigInteger.ONE)));
assertEquals("1023 MB", FileUtils.byteCountToDisplaySize(GB1.subtract(BigInteger.ONE)));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(GB1));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(GB1.add(BigInteger.ONE)));
assertEquals("2 GB", FileUtils.byteCountToDisplaySize(GB2));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(GB2.subtract(BigInteger.ONE)));
assertEquals("1 TB", FileUtils.byteCountToDisplaySize(TB1));
assertEquals("1 PB", FileUtils.byteCountToDisplaySize(PB1));
assertEquals("1 EB", FileUtils.byteCountToDisplaySize(EB1));
assertEquals("7 EB", FileUtils.byteCountToDisplaySize(Long.MAX_VALUE));
assertEquals("63 KB", FileUtils.byteCountToDisplaySize(BigInteger.valueOf(Character.MAX_VALUE)));
assertEquals("31 KB", FileUtils.byteCountToDisplaySize(BigInteger.valueOf(Short.MAX_VALUE)));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(BigInteger.valueOf(Integer.MAX_VALUE)));
assertEquals("0 bytes", FileUtils.byteCountToDisplaySize(0));
assertEquals("1 bytes", FileUtils.byteCountToDisplaySize(1));
assertEquals("1023 bytes", FileUtils.byteCountToDisplaySize(1023));
assertEquals("1 KB", FileUtils.byteCountToDisplaySize(1024));
assertEquals("1 KB", FileUtils.byteCountToDisplaySize(1025));
assertEquals("1023 KB", FileUtils.byteCountToDisplaySize(1024 * 1023));
assertEquals("1 MB", FileUtils.byteCountToDisplaySize(1024 * 1024));
assertEquals("1 MB", FileUtils.byteCountToDisplaySize(1024 * 1025));
assertEquals("1023 MB", FileUtils.byteCountToDisplaySize(1024 * 1024 * 1023));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(1024 * 1024 * 1024));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(1024 * 1024 * 1025));
assertEquals("2 GB", FileUtils.byteCountToDisplaySize(1024L * 1024 * 1024 * 2));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(1024 * 1024 * 1024 * 2 - 1));
assertEquals("1 TB", FileUtils.byteCountToDisplaySize(1024L * 1024 * 1024 * 1024));
assertEquals("1 PB", FileUtils.byteCountToDisplaySize(1024L * 1024 * 1024 * 1024 * 1024));
assertEquals("1 EB", FileUtils.byteCountToDisplaySize(1024L * 1024 * 1024 * 1024 * 1024 * 1024));
assertEquals("7 EB", FileUtils.byteCountToDisplaySize(Long.MAX_VALUE));
assertEquals("63 KB", FileUtils.byteCountToDisplaySize(Character.MAX_VALUE));
assertEquals("31 KB", FileUtils.byteCountToDisplaySize(Short.MAX_VALUE));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(Integer.MAX_VALUE));
assertEquals("0 bytes", FileUtils.byteCountToDisplaySize(Integer.valueOf(0)));
assertEquals("1 bytes", FileUtils.byteCountToDisplaySize(Integer.valueOf(1)));
assertEquals("1023 bytes", FileUtils.byteCountToDisplaySize(Integer.valueOf(1023)));
assertEquals("1 KB", FileUtils.byteCountToDisplaySize(Integer.valueOf(1024)));
assertEquals("1 KB", FileUtils.byteCountToDisplaySize(Integer.valueOf(1025)));
assertEquals("1023 KB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024 * 1023)));
assertEquals("1 MB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024 * 1024)));
assertEquals("1 MB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024 * 1025)));
assertEquals("1023 MB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024 * 1024 * 1023)));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024 * 1024 * 1024)));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024 * 1024 * 1025)));
assertEquals("2 GB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024L * 1024 * 1024 * 2)));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024 * 1024 * 1024 * 2 - 1)));
assertEquals("1 TB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024L * 1024 * 1024 * 1024)));
assertEquals("1 PB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024L * 1024 * 1024 * 1024 * 1024)));
assertEquals("1 EB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024L * 1024 * 1024 * 1024 * 1024 * 1024)));
assertEquals("7 EB", FileUtils.byteCountToDisplaySize(Long.valueOf(Long.MAX_VALUE)));
assertEquals("63 KB", FileUtils.byteCountToDisplaySize(Integer.valueOf(Character.MAX_VALUE)));
assertEquals("31 KB", FileUtils.byteCountToDisplaySize(Short.valueOf(Short.MAX_VALUE)));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(Integer.valueOf(Integer.MAX_VALUE)));
assertSame(testChecksum, resultChecksum);
assertEquals(expectedValue, resultValue);
assertEquals(expectedValue, resultValue);
assertEquals(expectedValue, resultValue);
assertEquals(sizeLong1, sizeLong2, "Size should not change");
assertEquals(sizeLong1, sizeBig.longValue(), "longSize should equal BigSize");
assertEquals("parent", files.get(0).getName());
assertEquals("child", files.get(1).getName());
assertEquals("file3.txt", files.get(2).getName());
//        assertEquals(files.length, urls.length);
assertNotEquals(DATE1, getLastModifiedMillis(target));
assertNotEquals(DATE2, getLastModifiedMillis(targetDirectory));
assertNotEquals(DATE3, getLastModifiedMillis(targetFile));
assertEquals(DATE1, getLastModifiedMillis(target));
assertEquals(DATE2, getLastModifiedMillis(targetDirectory));
assertEquals(DATE3, getLastModifiedMillis(targetFile));
assertEquals(DATE1, getLastModifiedMillis(target));
assertEquals(DATE2, getLastModifiedMillis(targetDirectory));
assertEquals(DATE3, getLastModifiedMillis(targetFile));
assertEquals(DATE1, getLastModifiedMillis(target));
assertEquals(DATE2, getLastModifiedMillis(targetDirectory));
assertEquals(DATE3, getLastModifiedMillis(targetFile));
assertEquals(expectedCount, LIST_WALKER.list(grandParentDir).size());
assertEquals(expectedSize, FileUtils.sizeOfDirectory(grandParentDir));
assertEquals(srcSize, FileUtils.sizeOfDirectory(actualDestDir), "Check size");
assertEquals(srcSize, FileUtils.sizeOfDirectory(destDir));
assertEquals(expectedCount, LIST_WALKER.list(grandParentDir).size());
assertEquals(expectedSize, FileUtils.sizeOfDirectory(grandParentDir));
assertEquals(sizeOfSrcDirectory, FileUtils.sizeOfDirectory(destDir), "Check size");
assertEquals(expectedCount, latestFiles.size());
assertEquals(expectedSize, FileUtils.sizeOfDirectory(grandParentDir));
assertEquals(parFiles.size(), newFilePaths.size());
assertEquals(testFile1Size, destination.length(), "Check Full copy");
assertEquals(getLastModifiedMillis(testFile1), getLastModifiedMillis(destination), "Check last modified date preserved");
assertEquals(testFile1Size, destination.length(), "Check Full copy");
assertEquals(FileUtils.lastModified(testFile1), FileUtils.lastModified(destination), "Check last modified date preserved");
assertEquals(testFile2Size, destination.length(), "Check Full copy");
assertEquals(getLastModifiedMillis(testFile1) , getLastModifiedMillis(destination), "Check last modified date preserved");
assertEquals(testFile2Size, destination.length(), "Check Full copy");
assertEquals(FileUtils.lastModified(testFile1), FileUtils.lastModified(destination), "Check last modified date preserved");
assertEquals(testFile1Size, destFile.length(), "Check Full copy");
assertNotEquals(unexpectedMillis, destLastModMillis,"Check last modified date not same as input, delta " + deltaMillis);
assertEquals(largeFile.length(), destination.length(), "Check Full copy");
assertEquals(testFile1Size, destination.size(), "Check Full copy size");
assertArrayEquals(expected, destination.toByteArray(), "Check Full copy");
assertEquals(testFile1Size, destFile1.length(), "Check Full Copy");
assertEquals(testFile2Size, destFile2.length(), "Check Full Copy");
assertEquals(testFile1Size, destination.length(), "Check Full Copy");
assertEquals(testFile1Size, destFile1.length(), "Check Full Copy");
assertEquals(testFile2Size, destFile2.length(), "Check Full Copy");
assertContentMatchesAfterCopyURLToFileFor("/java/lang/Object.class", file);
assertContentMatchesAfterCopyURLToFileFor("/java/lang/Object.class", file);
assertContentMatchesAfterCopyURLToFileFor("/java/lang/Object.class", file);
assertContentMatchesAfterCopyURLToFileFor("/java/lang/String.class", file);
assertEquals(0, FileUtils.sizeOfDirectory(Paths.get("src/test/resources/org/apache/commons/io/dirs-1-file-size-0").toFile()));
assertEquals(1, FileUtils.sizeOfDirectory(Paths.get("src/test/resources/org/apache/commons/io/dirs-1-file-size-1").toFile()));
assertEquals(2, FileUtils.sizeOfDirectory(Paths.get("src/test/resources/org/apache/commons/io/dirs-2-file-size-2").toFile()));
assertEquals(8, FileUtils.sizeOfDirectory(Paths.get("src/test/resources/org/apache/commons/io/dirs-2-file-size-4").toFile()));
assertEquals("", FileUtils.decodeUrl(""));
assertEquals("foo", FileUtils.decodeUrl("foo"));
assertEquals("+", FileUtils.decodeUrl("+"));
assertEquals("% ", FileUtils.decodeUrl("%25%20"));
assertEquals("%20", FileUtils.decodeUrl("%2520"));
assertEquals("jar:file:/C:/dir/sub dir/1.0/foo-1.0.jar!/org/Bar.class", FileUtils.decodeUrl("jar:file:/C:/dir/sub%20dir/1.0/foo-1.0.jar!/org/Bar.class"));
assertEquals("\u00E4\u00F6\u00FC\u00DF", FileUtils.decodeUrl("%C3%A4%C3%B6%C3%BC%C3%9F"));
assertEquals(" ", FileUtils.decodeUrl(" "));
assertEquals("\u00E4\u00F6\u00FC\u00DF", FileUtils.decodeUrl("\u00E4\u00F6\u00FC\u00DF"));
assertEquals("%", FileUtils.decodeUrl("%"));
assertEquals("% ", FileUtils.decodeUrl("%%20"));
assertEquals("%2", FileUtils.decodeUrl("%2"));
assertEquals("%2G", FileUtils.decodeUrl("%2G"));
assertEquals(testFile1, FileUtils.delete(testFile1));
assertEquals(filename, file2contents, "Second file's contents correct");
assertEquals("This is a test", contents, "FileUtils.fileRead()");
assertEquals(expected_A, FileUtils.getFile("src"), "A");
assertEquals(expected_B, FileUtils.getFile("src", "main"), "B");
assertEquals(expected_C, FileUtils.getFile("src", "main", "java"), "C");
assertEquals(expected_A, FileUtils.getFile(parent, "src"), "A");
assertEquals(expected_B, FileUtils.getFile(parent, "src", "main"), "B");
assertEquals(expected_C, FileUtils.getFile(parent, "src", "main", "java"), "C");
assertEquals(tempDirectory, FileUtils.getTempDirectory());
assertEquals(System.getProperty("java.io.tmpdir"), FileUtils.getTempDirectoryPath());
assertEquals(userDirectory, FileUtils.getUserDirectory());
assertEquals(System.getProperty("user.home"), FileUtils.getUserDirectoryPath());
assertEquals(SystemUtils.IS_OS_WINDOWS, sourceFile.toFile().canExecute());
assertEquals(expectedFileNames.size(), fileSizes.length);
assertEquals(expectedFileNames.size(), matchedFileNames.size());
assertEquals(expectedFileNames, actualFileNames);
assertEquals(expectedFileNames.length, actualFiles.size(), actualFiles::toString);
assertEquals(foundFileNames.size(), expectedFileNames.length, foundFileNames::toString);
assertEquals(expected, destLastMod, "Check last modified date same as input, delta " + delta);
assertNotEquals(unexpectedMillis, destLastModMillis,"Check last modified date not same as input, delta " + deltaMillis);
assertEquals(fixture, FileUtils.readFileToString(file));
assertEquals("Hello /u1234", data);
assertEquals(0, FileUtils.sizeOf(file));
assertEquals(testFile1Size, FileUtils.sizeOf(testFile1), "Unexpected files size");
assertEquals(TEST_DIRECTORY_SIZE, FileUtils.sizeOf(tempDirFile), "Unexpected directory size");
assertEquals(BigInteger.ZERO, FileUtils.sizeOfAsBigInteger(file));
assertEquals(BigInteger.valueOf(testFile1Size), FileUtils.sizeOfAsBigInteger(testFile1),"Unexpected files size");
assertEquals(TEST_DIRECTORY_SIZE_BI, FileUtils.sizeOfAsBigInteger(tempDirFile),"Unexpected directory size");
assertEquals(TEST_DIRECTORY_SIZE, FileUtils.sizeOfDirectory(file), "Unexpected directory size");
assertEquals(TEST_DIRECTORY_SIZE_BI, FileUtils.sizeOfDirectoryAsBigInteger(file), "Unexpected directory size");
assertEquals(TEST_DIRECTORY_SIZE_GT_ZERO_BI, FileUtils.sizeOfDirectoryAsBigInteger(file), "Unexpected directory size");
assertEquals("both are 100 % true", file.toString());
assertEquals(urls.length, files.length);
assertEquals(urls.length, files.length);
assertEquals(0, file.length(), "Created empty file.");
assertEquals(1, file.length(), "Wrote one byte to file");
assertEquals(y2k, getLastModifiedMillis(file), "Bad test: set lastModified set incorrect value");
assertEquals(1, file.length(), "FileUtils.touch() didn't empty the file.");
assertNotEquals(y2k, getLastModifiedMillis(file), "FileUtils.touch() changed lastModified");
assertEquals(files.length, urls.length);
assertEquals(expected, actual);
assertEquals(expected, actual);
TestUtils.assertEqualContent(data, file);
assertEquals(expected, actual);
assertEquals(expected, actual);
TestUtils.assertEqualContent(writtenData, file);
assertEquals(expected, actual);
assertEquals(expected, actual);
TestUtils.assertEqualContent(text, file);
TestUtils.assertEqualContent(text, file);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(0, file.length(), "Sizes differ");
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
TestUtils.assertEqualContent(text, file);
TestUtils.assertEqualContent(text, file);
TestUtils.assertEqualContent(text, file);
assertEquals(expected, actual);
assertEquals(expected, actual);
TestUtils.assertEqualContent(text, file);
TestUtils.assertEqualContent(text, file);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(exception, e2);
assertEquals(exception, e2);
assertEquals(exception, e2);
assertEquals(3, buffer.getBuilder().length());
assertEquals('a', buffer.getBuilder().charAt(0));
assertEquals('b', buffer.getBuilder().charAt(1));
assertEquals('c', buffer.getBuilder().charAt(2));
assertEquals(charset, writerCharset);
assertArrayEquals(xml.getBytes(encodingName), xmlContent);
assertEquals(expected.size(), actual.size(), "Sizes are not equal");
assertEquals(refString, baoutString, "ASCII decoded String must be equal");
assertSame(baos1.toByteArray(), baos2.toByteArray());
assertEquals(data.length, buffered.available());
assertArrayEquals(data, IOUtils.toByteArray(buffered));
assertEquals(0, buffered.available());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(expected.toString(), sbw1.toString(), "ProxyCollectionWriter.write(int)");
assertEquals(expected.toString(), sbw2.toString(), "ProxyCollectionWriter.write(int)");
assertEquals(expected.toString(), sbw1.toString(), "ProxyCollectionWriter.write(char[])");
assertEquals(expected.toString(), sbw2.toString(), "ProxyCollectionWriter.write(char[])");
assertEquals(expected.toString(), sbw1.toString(), "TeeOutputStream.write(byte[], int, int)");
assertEquals(expected.toString(), sbw2.toString(), "TeeOutputStream.write(byte[], int, int)");
assertEquals(expected.toString(), sbw1.toString(), "ProxyCollectionWriter.append(char)");
assertEquals(expected.toString(), sbw2.toString(), "ProxyCollectionWriter.append(char)");
assertEquals(expected.toString(), sbw1.toString(), "ProxyCollectionWriter.append(CharSequence)");
assertEquals(expected.toString(), sbw2.toString(), "ProxyCollectionWriter.write(CharSequence)");
assertEquals(expected.toString(), sbw1.toString(), "ProxyCollectionWriter.append(CharSequence, int, int)");
assertEquals(expected.toString(), sbw2.toString(), "ProxyCollectionWriter.append(CharSequence, int, int)");
assertEquals("c", writer.toString());
assertEquals("ABC", writer.toString());
assertEquals("BC", writer.toString());
assertEquals("ABC", writer.toString());
assertEquals("BC", writer.toString());
assertEquals("A", writer.toString());
assertEquals("ABC", writer.toString());
assertEquals("BC", writer.toString());
assertEquals(0, writer.getBuffer().length());
assertEquals("abc", writer.toString());
assertEquals("abc", writer.toString());
assertEquals("Broken output stream", thrown.getMessage());
assertEquals(1, suppressed.length);
assertEquals(IOException.class, suppressed[0].getClass());
assertEquals("Broken output stream", suppressed[0].getMessage());
assertEquals("F", out.getAppendable().toString());
assertEquals(testData, out.getAppendable().toString());
private void assertByteArrayEquals(final String msg, final byte[] array, final int start, final int end) {for (int i = start; i < end; i++) {
assertByteArrayEquals("CountingOutputStream.write(int)", baos.toByteArray(), 0, 20);
assertEquals(cos.getCount(), 20, "CountingOutputStream.getCount()");
assertByteArrayEquals("CountingOutputStream.write(byte[])", baos.toByteArray(), 0, 30);
assertEquals(cos.getCount(), 30, "CountingOutputStream.getCount()");
assertByteArrayEquals("CountingOutputStream.write(byte[], int, int)", baos.toByteArray(), 0, 35);
assertEquals(cos.getCount(), 35, "CountingOutputStream.getCount()");
assertEquals(count, 35, "CountingOutputStream.resetCount()");
assertByteArrayEquals("CountingOutputStream.write(int)", baos.toByteArray(), 35, 45);
assertEquals(cos.getCount(), 10, "CountingOutputStream.getCount()");
assertEquals(size, cos.getByteCount(), "getByteCount()");
assertEquals(size, cos.resetByteCount(), "resetByteCount()");
private void assertByteArrayEquals(final String msg, final byte[] array1, final byte[] array2) {assertEquals(array1.length, array2.length, msg + ": array size mismatch");
assertEquals(array1[i], array2[i], msg + ": array[ " + i + "] mismatch");
assertByteArrayEquals("TeeOutputStream.write(int)", expected.toByteArray(), baos1.toByteArray());
assertByteArrayEquals("TeeOutputStream.write(int)", expected.toByteArray(), baos2.toByteArray());
assertByteArrayEquals("TeeOutputStream.write(byte[])", expected.toByteArray(), baos1.toByteArray());
assertByteArrayEquals("TeeOutputStream.write(byte[])", expected.toByteArray(), baos2.toByteArray());
assertByteArrayEquals("TeeOutputStream.write(byte[], int, int)", expected.toByteArray(),baos1.toByteArray());
assertByteArrayEquals("TeeOutputStream.write(byte[], int, int)", expected.toByteArray(),baos2.toByteArray());
assertEquals("ab", appendableString.toString());
assertEquals("ab", appendableString.toString());
assertEquals("ab", appendableString.toString());
assertEquals(exception, e.getCause());
assertEquals(exception, e.getCause());
assertEquals(exception, e.getCause());
assertEquals("ab", UncheckedAppendable.on(new StringWriter(2).append("ab")).toString());
assertEquals(exception, e2);
assertEquals(exception, e2);
assertEquals(exception, e2);
assertEquals(exception.getClass(), InterruptedIOException.class);
assertArrayEquals(testBytes, IOUtils.toByteArray(is));
assertEquals(testBytes.length, resultBytes.length);
assertArrayEquals(resultBytes, testBytes);
assertEquals(testBytes.length, resultBytes.length);
assertArrayEquals(resultBytes, testBytes);
assertArrayEquals(testBytes, IOUtils.toByteArray(is));
assertEquals(tempDir.getPath(), dfos.getFile().getParent(), "Check dir");
assertArrayEquals(testBytes, copiedBytes);
assertArrayEquals(testBytes, copiedBytes);
assertEquals(testBytes.length, fis.available());
assertEquals(testBytes.length, fis.read(resultBytes));
assertArrayEquals(resultBytes, testBytes);
assertEquals(-1, fis.read(resultBytes));
assertEquals("F", out.getAppendable().toString());
assertEquals(testData + "null", out.getAppendable().toString());
assertEquals(testData.substring(1, 3) + "ul", out.getAppendable().toString());
assertEquals(testData, out.getAppendable().toString());
assertEquals("F", out.getAppendable().toString());
assertEquals(testData, out.getAppendable().toString());
assertEquals("Broken writer", thrown.getMessage());
assertEquals(1, suppressed.length);
assertEquals(IOException.class, suppressed[0].getClass());
assertEquals("Broken writer", suppressed[0].getMessage());
assertEquals("Foo", writer.toString());
assertEquals("FooBar", writer.toString());
assertEquals("BarFoo", writer.toString());
assertEquals("Foo", writer.toString());
assertEquals("Foo", writer.toString());
assertEquals("FooBar", writer.toString());
assertSame(builder, writer.getBuilder());
assertEquals("FooBar", writer.toString());
assertEquals("F", writer.toString());
assertEquals("Fo", writer.toString());
assertEquals("Foo", writer.toString());
assertEquals("Foo", writer.toString());
assertEquals("FooBar", writer.toString());
assertEquals("Bar", writer.toString());
assertEquals("BarFoo", writer.toString());
assertEquals("Foo", writer.toString());
assertEquals("FooBar", writer.toString());
assertEquals("Bar", writer.toString());
assertEquals("BarFoo", writer.toString());
assertEquals(1, original.getBuilder().length());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(expected.toString(), sbw1.toString(), "TeeWriter.write(int)");
assertEquals(expected.toString(), sbw2.toString(), "TeeWriter.write(int)");
assertEquals(expected.toString(), sbw1.toString(), "TeeWriter.write(char[])");
assertEquals(expected.toString(), sbw2.toString(), "TeeWriter.write(char[])");
assertEquals(expected.toString(), sbw1.toString(), "TeeOutputStream.write(byte[], int, int)");
assertEquals(expected.toString(), sbw2.toString(), "TeeOutputStream.write(byte[], int, int)");
assertEquals(expected.toString(), sbw1.toString(), "TeeWriter.append(char)");
assertEquals(expected.toString(), sbw2.toString(), "TeeWriter.append(char)");
assertEquals(expected.toString(), sbw1.toString(), "TeeWriter.append(CharSequence)");
assertEquals(expected.toString(), sbw2.toString(), "TeeWriter.append(CharSequence)");
assertEquals(expected.toString(), sbw1.toString(), "TeeWriter.append(CharSequence, int, int)");
assertEquals(expected.toString(), sbw2.toString(), "TeeWriter.append(CharSequence, int, int)");
assertEquals(cancelName, cancel.getFile().getName(), "File:  " + cancelName);
assertEquals(5, cancel.getDepth(), "Depth: " + cancelName);
assertEquals(cancelName, cancel.getFile().getName(), "File:  " + cancelName);
assertEquals(3, cancel.getDepth(), "Depth: " + cancelName);
assertEquals(cancelName, lastFile.getName(), "Suppress:  " + cancelName);
assertEquals(1 + dirs.length + ioFiles.length + outputFiles.length, results.size(), "Result Size");
assertEquals(1, results.size(), "[A] Result Size");
assertEquals(2, results.size(), "[B] Result Size");
assertEquals(4, results.size(), "[C] Result Size");
assertEquals(1 + dirs.length + ioFiles.length, results.size(), "[D] Result Size");
assertEquals(1 + dirs.length + ioFiles.length, results.size(), "[DirAndFile1] Result Size");
assertEquals(1 + dirs.length, resultDirs.size(), "[DirAndFile3] Result Size");
assertEquals(ioFiles.length, resultFiles.size(), "[DirAndFile4] Result Size");
assertEquals(0, results.size(), "Result Size");
assertEquals(1, results.size(), "Result Size");
assertEquals(1, results.size(), "Result Size");
assertEquals(cancelName, last.getName());
assertEquals(5, cancel.getDepth(), "Depth: " + cancelName);
assertEquals(cancelName, cancel.getFile().getName(), "File:  " + cancelName);
assertEquals(3, cancel.getDepth(), "Depth: " + cancelName);
assertEquals(cancelName, lastFile.getName(), "Suppress:  " + cancelName);
assertEquals("a", Optional.of("a").map(IOFunction.identity().asFunction()).get());
assertEquals("ABC", tri.apply(ref1, ref2, ref3));
assertEquals(Character.valueOf('a'), ref1.get());
assertEquals(Short.valueOf((short) 1), ref2.get());
assertEquals("z", ref3.get());
assertEquals(BigInteger.TEN, tri.andThen(after).apply(ref1, ref2, ref3));
assertEquals(Character.valueOf('b'), ref1.get());
assertEquals(Short.valueOf((short) 2), ref2.get());
assertEquals("zz", ref3.get());
assertEquals("A1", ref.get());
assertEquals("A1b", ref.get());
assertEquals("B2bb2B", ref.get());
assertEquals("A1", ref.get());
assertEquals("B12B", ref.get());
assertEquals("a1", ref.get());
assertEquals("12", ref.get());
assertEquals("12", ref.get());
assertEquals("12", ref.get());
assertDoesNotThrow(() -> IOUtils.close(nullCloseable, noopConsumer));
assertDoesNotThrow(() -> IOUtils.close(new StringReader("s"), noopConsumer));
assertDoesNotThrow(() -> IOUtils.close(new ThrowOnCloseReader(new StringReader("s")), noopConsumer));
assertEquals("a", Optional.of("a").map(IOUnaryOperator.identity().asUnaryOperator()).get());
assertEquals("a", Optional.of("a").map(IOUnaryOperator.identity().asFunction()).get());
assertEquals(IOUnaryOperator.identity(), IOUnaryOperator.identity());
assertEquals(TestConstants.ABS_PATH_A, Stream.of(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A).reduce(MAX_BY_BO).get());
assertEquals(TestConstants.ABS_PATH_A, Stream.of(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A).reduce(MIN_BY_BO).get());
assertEquals(TestConstants.ABS_PATH_A, Stream.of(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A).reduce(MAX_BY_BO).get());
assertEquals(TestConstants.ABS_PATH_B, asBiFunction.apply(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_B));
assertEquals(TestConstants.ABS_PATH_B, asBinaryOperator.apply(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_B));
assertEquals(TestConstants.ABS_PATH_A, Stream.of(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A).reduce(asBinaryOperator).get());
assertEquals(TestConstants.ABS_PATH_B, Stream.of(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_B).reduce(asBinaryOperator).get());
assertEquals(TestConstants.ABS_PATH_B, Stream.of(TestConstants.ABS_PATH_B, TestConstants.ABS_PATH_A).reduce(asBinaryOperator).get());
assertEquals(TestConstants.ABS_PATH_A, Stream.of(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A).reduce(MIN_BY_BO).get());
assertEquals(TestConstants.ABS_PATH_A, asBiFunction.apply(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_B));
assertEquals(TestConstants.ABS_PATH_A, asBinaryOperator.apply(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_B));
assertEquals(TestConstants.ABS_PATH_A, Stream.of(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A).reduce(asBinaryOperator).get());
assertEquals(TestConstants.ABS_PATH_A, Stream.of(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_B).reduce(asBinaryOperator).get());
assertEquals(TestConstants.ABS_PATH_A, Stream.of(TestConstants.ABS_PATH_B, TestConstants.ABS_PATH_A).reduce(asBinaryOperator).get());
assertEquals(expected, Files.list(current).reduce(REAL_PATH_BO).get());
assertEquals(0, REAL_PATH_COMP.asComparator().compare(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A));
assertEquals(0, REAL_PATH_COMP.compare(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A));
assertEquals(0, PATH_SIZE_COMP.compare(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A));
assertEquals("new1", ref1.get());
assertEquals("new2", ref2.get());
assertEquals("new1", ref1.get());
assertEquals("new1", ref1.get());
assertEquals("new2", ref2.get());
assertEquals("new3", ref3.get());
assertEquals("new0", Uncheck.apply((t, u) -> {TestUtils.compareAndSetThrows(ref1, t);
assertEquals("new1", ref1.get());
assertEquals("new2", ref2.get());
assertEquals("new1", ref1.get());
assertEquals("new0", Uncheck.apply((t, u, v, w) -> {TestUtils.compareAndSetThrows(ref1, t);
assertEquals("new1", ref1.get());
assertEquals("new2", ref2.get());
assertEquals("new3", ref3.get());
assertEquals("new4", ref4.get());
assertEquals("new0", Uncheck.apply((t, u, v) -> {TestUtils.compareAndSetThrows(ref1, t);
assertEquals("new1", ref1.get());
assertEquals("new2", ref2.get());
assertEquals("new3", ref3.get());
assertEquals("new1", Uncheck.get(() -> TestUtils.compareAndSetThrows(ref1, "new1")));
assertEquals("new1", ref1.get());
assertEquals("new1", ref1.get());
assertEquals("new1", ref1.get());
assertEquals("A1", ref.get());
assertEquals("B22B", ref.get());
assertEquals("a1", ref.get());
assertEquals(true, isDirectory.apply(PathUtils.current(), PathUtils.EMPTY_LINK_OPTION_ARRAY));
assertEquals(false, andThen.apply(PathUtils.current(), PathUtils.EMPTY_LINK_OPTION_ARRAY));
assertEquals(true, isDirectory.apply(PathUtils.current(), PathUtils.EMPTY_LINK_OPTION_ARRAY));
assertNotEquals(0L, map.get("1"));
assertEquals(IOPredicate.alwaysFalse(), IOPredicate.alwaysFalse());
assertSame(IOPredicate.alwaysFalse(), IOPredicate.alwaysFalse());
assertEquals(IOPredicate.alwaysTrue(), IOPredicate.alwaysTrue());
assertSame(IOPredicate.alwaysTrue(), IOPredicate.alwaysTrue());
assertEquals("ABCD", quad.apply(ref1, ref2, ref3, ref4));
assertEquals(Byte.valueOf("1"), ref1.get());
assertEquals(Short.valueOf((short) 1), ref2.get());
assertEquals("z", ref3.get());
assertEquals(Long.valueOf(2), ref4.get());
assertEquals(BigInteger.TEN, quad.andThen(after).apply(ref1, ref2, ref3, ref4));
assertEquals(Byte.valueOf("2"), ref1.get());
assertEquals(Short.valueOf((short) 2), ref2.get());
assertEquals("zz", ref3.get());
assertEquals(Long.valueOf(3), ref4.get());
assertEquals("new1", getThrowsNone(() -> TestUtils.compareAndSetThrows(ref1, "new1")));
assertEquals("new1", ref1.get());
assertNotEquals(TestConstants.THROWING_IO_SUPPLIER.asSupplier(), TestConstants.THROWING_IO_SUPPLIER.asSupplier());
assertEquals("new1", getThrows(() -> TestUtils.compareAndSetThrows(ref1, "new1")));
assertEquals("new1", ref1.get());
assertEquals(1, realInner.list().length);
// assert contents of the real directory were removed including the symlinkFileUtils.cleanDirectory(realOuter);
assertEquals(0, realOuter.list().length);
assertEquals(1, randomDirectory.list().length, "Contents of sym link should not have been removed");
assertEquals(1, realInner.list().length);
// assert contents of the real directory were removed including the symlinkFileUtils.cleanDirectory(symlinkParentDirectory);// should clean the contents of this but not recurse into other links
assertEquals(0, symlinkParentDirectory.list().length);
assertEquals(0, realParent.list().length);
assertEquals(1, randomDirectory.list().length, "Contents of sym link should not have been removed");
assertEquals(1, realInner.list().length);
assertEquals(2, realInner.list().length);
// assert contents of the real directory were removed including the symlinkFileUtils.cleanDirectory(realOuter);
assertEquals(0, realOuter.list().length);
assertEquals(DATA1, getInput(T1), "Data1");
assertEquals(DATA2, getInput(T2), "Data2");
assertEquals(DATA3, getInput(T3), "Data3");
assertEquals(DATA4, getInput(T4), "Data4");
assertEquals(DATA1, getOutput(T1), "Data1");
assertEquals(DATA2, getOutput(T2), "Data2");
assertEquals(DATA3, getOutput(T3), "Data3");
assertEquals(DATA4, getOutput(T4), "Data4");
private static void assertExceptionTypeAndMessage(final File srcDir, final File destDir,final Class<? extends Exception> expectedExceptionType, final String expectedMessage) {try {FileUtils.copyDirectoryToDirectory(srcDir, destDir);
assertEquals(expectedExceptionType, e.getClass());
assertEquals(expectedMessage, msg);
private void assertAclEntryList(final Path sourcePath, final Path destPath) throws IOException {assertEquals(PathUtils.getAclEntryList(sourcePath), PathUtils.getAclEntryList(destPath));
assertExceptionTypeAndMessage(srcDir, destDir, IllegalArgumentException.class, expectedMessage);
assertExceptionTypeAndMessage(srcDir.toFile(), destDir, IllegalArgumentException.class, expectedMessage);
assertExceptionTypeAndMessage(srcDir, destDir, NullPointerException.class, "destinationDir");
assertExceptionTypeAndMessage(srcDir, destinationDirectory, NullPointerException.class, "sourceDir");
assertAclEntryList(sourcePath.get(), destPath);
assertAclEntryList(sourcePath.get(), destPath);
assertAclEntryList(sourcePath.get(), destPath);
assertAclEntryList(sourcePath.get(), destPath);
assertEquals(wantedResult, FileUtils.isFileNewer(file, fileTime), () -> description + " - FileTime");
assertEquals(wantedResult, FileUtils.isFileNewer(file, fileTime.toInstant()), () -> description + " - Instant");
assertEquals(fileTime, Files.getLastModifiedTime(temporaryFile.toPath()), "The temporary file hasn't the right last modification date");
assertEquals(wantedResult, FileUtils.isFileNewer(file, temporaryFile), () -> description + " - file");
assertEquals(ByteOrder.BIG_ENDIAN, parseByteOrder("BIG_ENDIAN"));
assertEquals(ByteOrder.LITTLE_ENDIAN, parseByteOrder("LITTLE_ENDIAN"));
assertEquals(-1, exception.getIndex());
assertEquals(0, exception.getIndex());
assertEquals(e, exception.getCause());
assertEquals(0, tempDirFile.list().length);
assertEquals(0, tempDirFile.list().length);
assertEquals(1, tempDirFile.list().length);
assertEquals(0, tempDirFile.list().length);
assertEquals(2, tempDirFile.list().length);
assertEquals(0, tempDirFile.list().length);
assertEquals("Unknown I/O error listing contents of directory: " + tempDirFile.getAbsolutePath(), e.getMessage());
assertEquals("FileDeleteStrategy[Normal]", FileDeleteStrategy.NORMAL.toString());
assertEquals("FileDeleteStrategy[Force]", FileDeleteStrategy.FORCE.toString());
private void assertLines(final List<String> lines, final LineIterator iterator) {try {for (int i = 0; i < lines.size(); i++) {
assertEquals(lines.get(i), line, "nextLine() line " + i);
assertEquals(lines.get(idx), line, "Comparing line " + idx);
assertEquals(idx, lines.size(), "Line Count doesn't match");
assertEquals(lines.get(idx), line, "Comparing line " + idx);
assertEquals(9, lines.size(), "Line Count doesn't match");
assertEquals(9, idx, "Line Count doesn't match");
assertEquals(6, actualLines, "Line Count doesn't match");
assertLines(lines, iterator);
assertLines(lines, iterator);
assertLines(lines, iterator);
assertEquals(lines.get(i), line, "next() line " + i);
assertEquals(TEST_BOM_1, TEST_BOM_1, "test1 equals");
assertEquals(TEST_BOM_2, TEST_BOM_2, "test2 equals");
assertEquals(TEST_BOM_3, TEST_BOM_3, "test3 equals");
assertNotEquals(TEST_BOM_1, new Object(), "Object not equal");
assertNotEquals(TEST_BOM_1, new ByteOrderMark("1a", 2), "test1-1 not equal");
assertNotEquals(TEST_BOM_1, new ByteOrderMark("1b", 1, 2), "test1-2 not test2");
assertNotEquals(TEST_BOM_2, new ByteOrderMark("2", 1, 1), "test2 not equal");
assertNotEquals(TEST_BOM_3, new ByteOrderMark("3", 1, 2, 4), "test3 not equal");
assertArrayEquals(TEST_BOM_1.getBytes(), new byte[]{(byte) 1}, "test1 bytes");
assertArrayEquals(TEST_BOM_1.getBytes(), new byte[]{(byte) 1}, "test1 bytes");
assertArrayEquals(TEST_BOM_2.getBytes(), new byte[]{(byte) 1, (byte) 2}, "test1 bytes");
assertArrayEquals(TEST_BOM_3.getBytes(), new byte[]{(byte) 1, (byte) 2, (byte) 3}, "test1 bytes");
assertEquals("test1", TEST_BOM_1.getCharsetName(), "test1 name");
assertEquals("test2", TEST_BOM_2.getCharsetName(), "test2 name");
assertEquals("test3", TEST_BOM_3.getCharsetName(), "test3 name");
assertEquals(1, TEST_BOM_1.get(0), "test1 get(0)");
assertEquals(1, TEST_BOM_2.get(0), "test2 get(0)");
assertEquals(2, TEST_BOM_2.get(1), "test2 get(1)");
assertEquals(1, TEST_BOM_3.get(0), "test3 get(0)");
assertEquals(2, TEST_BOM_3.get(1), "test3 get(1)");
assertEquals(3, TEST_BOM_3.get(2), "test3 get(2)");
assertEquals(bomClassHash + 1, TEST_BOM_1.hashCode(), "hash test1 ");
assertEquals(bomClassHash + 3, TEST_BOM_2.hashCode(), "hash test2 ");
assertEquals(bomClassHash + 6, TEST_BOM_3.hashCode(), "hash test3 ");
assertEquals(1, TEST_BOM_1.length(), "test1 length");
assertEquals(2, TEST_BOM_2.length(), "test2 length");
assertEquals(3, TEST_BOM_3.length(), "test3 length");
assertEquals("ByteOrderMark[test1: 0x1]",          TEST_BOM_1.toString(), "test1 ");
assertEquals("ByteOrderMark[test2: 0x1,0x2]",      TEST_BOM_2.toString(), "test2 ");
assertEquals("ByteOrderMark[test3: 0x1,0x2,0x3]",  TEST_BOM_3.toString(), "test3 ");
assertEquals( d1, EndianUtils.readSwappedDouble( input ), 0.0 );
assertEquals( 0x01020304, EndianUtils.readSwappedInteger( bytes, 0 ) );
assertEquals( 0x01020304, EndianUtils.readSwappedInteger( input ) );
assertEquals( 0x0102030405060708L, EndianUtils.readSwappedLong( bytes, 0 ) );
assertEquals( 0x0102, EndianUtils.readSwappedShort( bytes, 0 ) );
assertEquals( 0x0000000001020304L, EndianUtils.readSwappedUnsignedInteger( bytes, 0 ) );
assertEquals( 0x0000000001020304L, EndianUtils.readSwappedUnsignedInteger( input ) );
assertEquals( 0x00000102, EndianUtils.readSwappedUnsignedShort( bytes, 0 ) );
assertEquals( 0x00000102, EndianUtils.readSwappedUnsignedShort( input ) );
assertEquals( 0xabcdef10, EndianUtils.swapInteger( 0x10efcdab ) );
assertEquals( 0x01020304, EndianUtils.swapInteger( EndianUtils.swapInteger( 0x01020304 ) ) );
assertEquals(expected, actual, "readSwappedUnsignedInteger(byte[], int) was incorrect");
assertEquals(expected, actual, "readSwappedUnsignedInteger(InputStream) was incorrect");
