assertArrayEquals(array1, ArraySorter.sort(array2));
assertArrayEquals(array1, ArraySorter.sort(array2));
assertArrayEquals(array1, ArraySorter.sort(array2, String::compareTo));
assertArrayEquals(array1, ArraySorter.sort(array2));
assertArrayEquals(array1, ArraySorter.sort(array2));
assertArrayEquals(array1, ArraySorter.sort(array2));
assertArrayEquals(array1, ArraySorter.sort(array2));
assertArrayEquals(array1, ArraySorter.sort(array2));
assertArrayEquals(array1, ArraySorter.sort(array2));
assertEquals(5d, result, 0.01d);
assertEquals(5d, mutableDouble.doubleValue(), 0.01d);
assertEquals(10d, result, 0.01d);
assertEquals(10d, mutableDouble.doubleValue(), 0.01d);
assertEquals(2.1d, mutNum.doubleValue(), 0.01d);
assertEquals(2.1d, mutNum.doubleValue(), 0.01d);
assertEquals(0, mutNum.compareTo(new MutableDouble(0d)));
assertEquals(+1, mutNum.compareTo(new MutableDouble(-1d)));
assertEquals(-1, mutNum.compareTo(new MutableDouble(1d)));
assertThrows(NullPointerException.class, () -> mutNum.compareTo(null));
assertThrows(NullPointerException.class, () -> new MutableDouble((Number) null));
assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);
assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d);
assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d);
assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d);
assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d);
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(0d, result, 0.01d);
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(mutNumA, mutNumA);
assertEquals(mutNumA, mutNumB);
assertEquals(mutNumB, mutNumA);
assertEquals(mutNumB, mutNumB);
assertNotEquals(mutNumA, mutNumC);
assertNotEquals(mutNumB, mutNumC);
assertEquals(mutNumC, mutNumC);
assertNotEquals(null, mutNumA);
assertNotEquals(mutNumA, Double.valueOf(0d));
assertNotEquals("0", mutNumA);
assertEquals(0.5d, result, 0.01d);
assertEquals(2.5d, mutableDouble.doubleValue(), 0.01d);
assertEquals(0.5d, result, 0.01d);
assertEquals(1.5d, mutableDouble.doubleValue(), 0.01d);
assertEquals(1d, result, 0.01d);
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(1d, result, 0.01d);
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);
assertEquals(Double.valueOf(0), new MutableDouble().getValue());
assertEquals(1d, mutNum.doubleValue(), 0.0001d);
assertEquals(Double.valueOf(1d), mutNum.getValue());
assertEquals(2d, mutNum.doubleValue(), 0.0001d);
assertEquals(Double.valueOf(2d), mutNum.getValue());
assertEquals(3d, mutNum.doubleValue(), 0.0001d);
assertEquals(Double.valueOf(3d), mutNum.getValue());
assertEquals(mutNumA.hashCode(), mutNumA.hashCode());
assertEquals(mutNumA.hashCode(), mutNumB.hashCode());
assertNotEquals(mutNumA.hashCode(), mutNumC.hashCode());
assertEquals(mutNumA.hashCode(), Double.valueOf(0d).hashCode());
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals(2d, result, 0.01d);
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertTrue(mutNum.isNaN());
assertTrue(mutNum.isInfinite());
assertTrue(mutNum.isInfinite());
assertEquals(1.7F, mutNum.floatValue());
assertEquals(1.7, mutNum.doubleValue());
assertEquals( (byte) 1, mutNum.byteValue() );
assertEquals( (short) 1, mutNum.shortValue() );
assertEquals( 1, mutNum.intValue() );
assertEquals( 1L, mutNum.longValue() );
assertThrows(NullPointerException.class, () -> mutNum.setValue(null));
assertEquals(0.1d, mutNum.doubleValue(), 0.01d);
assertEquals(0.1d, mutNum.doubleValue(), 0.01d);
assertEquals(Double.valueOf(0d), new MutableDouble(0d).toDouble());
assertEquals(Double.valueOf(12.3d), new MutableDouble(12.3d).toDouble());
assertEquals("0.0", new MutableDouble(0d).toString());
assertEquals("10.0", new MutableDouble(10d).toString());
assertEquals("-123.0", new MutableDouble(-123d).toString());
assertEquals((short) 1, result);
assertEquals((short) 1, mutableShort.shortValue());
assertEquals((short) 1, result);
assertEquals((short) 1, mutableShort.shortValue());
assertEquals((short) 2, mutNum.shortValue());
assertEquals((short) 2, mutNum.shortValue());
assertEquals((short) 0, mutNum.compareTo(new MutableShort((short) 0)));
assertEquals((short) +1, mutNum.compareTo(new MutableShort((short) -1)));
assertEquals((short) -1, mutNum.compareTo(new MutableShort((short) 1)));
assertThrows(NullPointerException.class, () -> mutNum.compareTo(null));
assertEquals((short) 0, new MutableShort().shortValue());
assertEquals((short) 1, new MutableShort((short) 1).shortValue());
assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue());
assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue());
assertEquals((short) 2, new MutableShort("2").shortValue());
assertThrows(NullPointerException.class, () -> new MutableShort((Number) null));
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(0, result);
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(mutNumA, mutNumA);
assertEquals(mutNumA, mutNumB);
assertEquals(mutNumB, mutNumA);
assertEquals(mutNumB, mutNumB);
assertNotEquals(mutNumA, mutNumC);
assertNotEquals(mutNumB, mutNumC);
assertEquals(mutNumC, mutNumC);
assertNotEquals(null, mutNumA);
assertNotEquals(mutNumA, Short.valueOf((short) 0));
assertNotEquals("0", mutNumA);
assertEquals((short) 0, result);
assertEquals((short) 1, mutableShort.shortValue());
assertEquals((short) 0, result);
assertEquals((short) 1, mutableShort.shortValue());
assertEquals(1, result);
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(1, result);
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals((short) 0, new MutableShort().shortValue());
assertEquals(Short.valueOf((short) 0), new MutableShort().getValue());
assertEquals((short) 1, mutNum.shortValue());
assertEquals(Short.valueOf((short) 1), mutNum.getValue());
assertEquals((short) 2, mutNum.shortValue());
assertEquals(Short.valueOf((short) 2), mutNum.getValue());
assertEquals((short) 3, mutNum.shortValue());
assertEquals(Short.valueOf((short) 3), mutNum.getValue());
assertThrows(NullPointerException.class, () -> mutNum.setValue(null));
assertEquals(mutNumA.hashCode(), mutNumA.hashCode());
assertEquals(mutNumA.hashCode(), mutNumB.hashCode());
assertNotEquals(mutNumA.hashCode(), mutNumC.hashCode());
assertEquals(mutNumA.hashCode(), Short.valueOf((short) 0).hashCode());
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals(2, result);
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals(1.0F, mutNum.floatValue());
assertEquals(1.0, mutNum.doubleValue());
assertEquals( (byte) 1, mutNum.byteValue() );
assertEquals( (short) 1, mutNum.shortValue() );
assertEquals( 1, mutNum.intValue() );
assertEquals( 1L, mutNum.longValue() );
assertEquals((short) 0, mutNum.shortValue());
assertEquals((short) 0, mutNum.shortValue());
assertEquals(Short.valueOf((short) 0), new MutableShort((short) 0).toShort());
assertEquals(Short.valueOf((short) 123), new MutableShort((short) 123).toShort());
assertEquals("0", new MutableShort((short) 0).toString());
assertEquals("10", new MutableShort((short) 10).toString());
assertEquals("-123", new MutableShort((short) -123).toString());
assertEquals(0, mutBool.compareTo(new MutableBoolean(false)));
assertEquals(-1, mutBool.compareTo(new MutableBoolean(true)));
assertEquals(+1, mutBool.compareTo(new MutableBoolean(false)));
assertEquals(0, mutBool.compareTo(new MutableBoolean(true)));
assertThrows(NullPointerException.class, () -> mutBool.compareTo(null));
assertThrows(NullPointerException.class, () -> new MutableBoolean(null));
assertFalse(new MutableBoolean().booleanValue());
assertTrue(new MutableBoolean(true).booleanValue());
assertFalse(new MutableBoolean(false).booleanValue());
assertTrue(new MutableBoolean(Boolean.TRUE).booleanValue());
assertFalse(new MutableBoolean(Boolean.FALSE).booleanValue());
assertEquals(mutBoolA, mutBoolA);
assertEquals(mutBoolA, mutBoolB);
assertEquals(mutBoolB, mutBoolA);
assertEquals(mutBoolB, mutBoolB);
assertNotEquals(mutBoolA, mutBoolC);
assertNotEquals(mutBoolB, mutBoolC);
assertEquals(mutBoolC, mutBoolC);
assertNotEquals(null, mutBoolA);
assertNotEquals(mutBoolA, Boolean.FALSE);
assertNotEquals("false", mutBoolA);
assertFalse(new MutableBoolean().booleanValue());
assertEquals(Boolean.FALSE, new MutableBoolean().getValue());
assertEquals(Boolean.FALSE, mutBool.toBoolean());
assertFalse(mutBool.booleanValue());
assertTrue(mutBool.isFalse());
assertFalse(mutBool.isTrue());
assertEquals(Boolean.TRUE, mutBool.toBoolean());
assertTrue(mutBool.booleanValue());
assertFalse(mutBool.isFalse());
assertTrue(mutBool.isTrue());
assertFalse(mutBool.booleanValue());
assertTrue(mutBool.booleanValue());
assertFalse(mutBool.booleanValue());
assertTrue(mutBool.booleanValue());
assertEquals(mutBoolA.hashCode(), mutBoolA.hashCode());
assertEquals(mutBoolA.hashCode(), mutBoolB.hashCode());
assertNotEquals(mutBoolA.hashCode(), mutBoolC.hashCode());
assertEquals(mutBoolA.hashCode(), Boolean.FALSE.hashCode());
assertEquals(mutBoolC.hashCode(), Boolean.TRUE.hashCode());
assertThrows(NullPointerException.class, () -> mutBool.setValue(null));
assertEquals(Boolean.FALSE.toString(), new MutableBoolean(false).toString());
assertEquals(Boolean.TRUE.toString(), new MutableBoolean(true).toString());
assertEquals(1L, result);
assertEquals(1L, mutableLong.longValue());
assertEquals(1L, result);
assertEquals(1L, mutableLong.longValue());
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals(0, mutNum.compareTo(new MutableLong(0)));
assertEquals(+1, mutNum.compareTo(new MutableLong(-1)));
assertEquals(-1, mutNum.compareTo(new MutableLong(1)));
assertThrows(NullPointerException.class, () -> mutNum.compareTo(null));
assertThrows(NullPointerException.class, () -> new MutableLong((Number) null));
assertEquals(0, new MutableLong().longValue());
assertEquals(1, new MutableLong(1).longValue());
assertEquals(2, new MutableLong(Long.valueOf(2)).longValue());
assertEquals(3, new MutableLong(new MutableLong(3)).longValue());
assertEquals(2, new MutableLong("2").longValue());
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(0, result);
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(mutNumA, mutNumA);
assertEquals(mutNumA, mutNumB);
assertEquals(mutNumB, mutNumA);
assertEquals(mutNumB, mutNumB);
assertNotEquals(mutNumA, mutNumC);
assertNotEquals(mutNumB, mutNumC);
assertEquals(mutNumC, mutNumC);
assertNotEquals(null, mutNumA);
assertNotEquals(mutNumA, Long.valueOf(0));
assertNotEquals("0", mutNumA);
assertEquals(0L, result);
assertEquals(1L, mutableLong.longValue());
assertEquals(0L, result);
assertEquals(1L, mutableLong.longValue());
assertEquals(1, result);
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(1, result);
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals(0, new MutableLong().longValue());
assertEquals(Long.valueOf(0), new MutableLong().getValue());
assertEquals(1, mutNum.longValue());
assertEquals(Long.valueOf(1), mutNum.getValue());
assertEquals(2, mutNum.longValue());
assertEquals(Long.valueOf(2), mutNum.getValue());
assertEquals(3, mutNum.longValue());
assertEquals(Long.valueOf(3), mutNum.getValue());
assertEquals(mutNumA.hashCode(), mutNumA.hashCode());
assertEquals(mutNumA.hashCode(), mutNumB.hashCode());
assertNotEquals(mutNumA.hashCode(), mutNumC.hashCode());
assertEquals(mutNumA.hashCode(), Long.valueOf(0).hashCode());
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals(2, result);
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals(1.0F, mutNum.floatValue());
assertEquals(1.0, mutNum.doubleValue());
assertEquals( (byte) 1, mutNum.byteValue() );
assertEquals( (short) 1, mutNum.shortValue() );
assertEquals( 1, mutNum.intValue() );
assertEquals( 1L, mutNum.longValue() );
assertThrows(NullPointerException.class, () -> mutNum.setValue(null));
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(Long.valueOf(0L), new MutableLong(0L).toLong());
assertEquals(Long.valueOf(123L), new MutableLong(123L).toLong());
assertEquals("0", new MutableLong(0).toString());
assertEquals("10", new MutableLong(10).toString());
assertEquals("-123", new MutableLong(-123).toString());
assertEquals(7.5f, result, 0.01f);
assertEquals(7.5f, mutableFloat.floatValue(), 0.01f);
assertEquals(1.5f, result, 0.01f);
assertEquals(1.5f, mutableFloat.floatValue(), 0.01f);
assertEquals(2.1f, mutNum.floatValue(), 0.01f);
assertEquals(2.1f, mutNum.floatValue(), 0.01f);
assertEquals(0, mutNum.compareTo(new MutableFloat(0f)));
assertEquals(+1, mutNum.compareTo(new MutableFloat(-1f)));
assertEquals(-1, mutNum.compareTo(new MutableFloat(1f)));
assertThrows(NullPointerException.class, () -> mutNum.compareTo(null));
assertThrows(NullPointerException.class, () -> new MutableFloat((Number) null));
assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);
assertEquals(1f, new MutableFloat(1f).floatValue(), 0.0001f);
assertEquals(2f, new MutableFloat(Float.valueOf(2f)).floatValue(), 0.0001f);
assertEquals(3f, new MutableFloat(new MutableFloat(3f)).floatValue(), 0.0001f);
assertEquals(2f, new MutableFloat("2.0").floatValue(), 0.0001f);
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(0f, result, 0.01f);
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(mutNumA, mutNumA);
assertEquals(mutNumA, mutNumB);
assertEquals(mutNumB, mutNumA);
assertEquals(mutNumB, mutNumB);
assertNotEquals(mutNumA, mutNumC);
assertNotEquals(mutNumB, mutNumC);
assertEquals(mutNumC, mutNumC);
assertNotEquals(null, mutNumA);
assertNotEquals(mutNumA, Float.valueOf(0f));
assertNotEquals("0", mutNumA);
assertEquals(7.75f, result, 0.01f);
assertEquals(10f, mutableFloat.floatValue(), 0.01f);
assertEquals(1.25f, result, 0.01f);
assertEquals(2f, mutableFloat.floatValue(), 0.01f);
assertEquals(1f, result, 0.01f);
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(1f, result, 0.01f);
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);
assertEquals(Float.valueOf(0), new MutableFloat().getValue());
assertEquals(1f, mutNum.floatValue(), 0.0001f);
assertEquals(Float.valueOf(1f), mutNum.getValue());
assertEquals(2f, mutNum.floatValue(), 0.0001f);
assertEquals(Float.valueOf(2f), mutNum.getValue());
assertEquals(3f, mutNum.floatValue(), 0.0001f);
assertEquals(Float.valueOf(3f), mutNum.getValue());
assertEquals(mutNumA.hashCode(), mutNumA.hashCode());
assertEquals(mutNumA.hashCode(), mutNumB.hashCode());
assertNotEquals(mutNumA.hashCode(), mutNumC.hashCode());
assertEquals(mutNumA.hashCode(), Float.valueOf(0f).hashCode());
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals(2f, result, 0.01f);
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertTrue(mutNum.isNaN());
assertTrue(mutNum.isInfinite());
assertTrue(mutNum.isInfinite());
assertEquals( 1, mutNum.intValue() );
assertEquals( 1.7, mutNum.doubleValue(), 0.00001 );
assertEquals( (byte) 1, mutNum.byteValue() );
assertEquals( (short) 1, mutNum.shortValue() );
assertEquals( 1, mutNum.intValue() );
assertEquals( 1L, mutNum.longValue() );
assertThrows(NullPointerException.class, () -> mutNum.setValue(null));
assertEquals(0.1f, mutNum.floatValue(), 0.01f);
assertEquals(0.1f, mutNum.floatValue(), 0.01f);
assertEquals(Float.valueOf(0f), new MutableFloat(0f).toFloat());
assertEquals(Float.valueOf(12.3f), new MutableFloat(12.3f).toFloat());
assertEquals("0.0", new MutableFloat(0f).toString());
assertEquals("10.0", new MutableFloat(10f).toString());
assertEquals("-123.0", new MutableFloat(-123f).toString());
assertEquals((byte) 1, result);
assertEquals((byte) 1, mutableByte.byteValue());
assertEquals((byte) 1, result);
assertEquals((byte) 1, mutableByte.byteValue());
assertEquals((byte) 2, mutNum.byteValue());
assertEquals((byte) 2, mutNum.byteValue());
assertEquals((byte) 0, mutNum.compareTo(new MutableByte((byte) 0)));
assertEquals((byte) +1, mutNum.compareTo(new MutableByte((byte) -1)));
assertEquals((byte) -1, mutNum.compareTo(new MutableByte((byte) 1)));
assertThrows(NullPointerException.class, () -> mutNum.compareTo(null));
assertThrows(NullPointerException.class, () -> new MutableByte((Number) null));
assertEquals((byte) 0, new MutableByte().byteValue());
assertEquals((byte) 1, new MutableByte((byte) 1).byteValue());
assertEquals((byte) 2, new MutableByte(Byte.valueOf((byte) 2)).byteValue());
assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue());
assertEquals((byte) 2, new MutableByte("2").byteValue());
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(0, result);
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(mutNumA, mutNumA);
assertEquals(mutNumA, mutNumB);
assertEquals(mutNumB, mutNumA);
assertEquals(mutNumB, mutNumB);
assertNotEquals(mutNumA, mutNumC);
assertNotEquals(mutNumB, mutNumC);
assertEquals(mutNumC, mutNumC);
assertNotEquals(null, mutNumA);
assertNotEquals(mutNumA, Byte.valueOf((byte) 0));
assertNotEquals("0", mutNumA);
assertEquals((byte) 0, result);
assertEquals((byte) 1, mutableByte.byteValue());
assertEquals((byte) 0, result);
assertEquals((byte) 1, mutableByte.byteValue());
assertEquals(1, result);
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(1, result);
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals((byte) 0, new MutableByte().byteValue());
assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue());
assertEquals((byte) 1, mutNum.byteValue());
assertEquals(Byte.valueOf((byte) 1), mutNum.getValue());
assertEquals((byte) 2, mutNum.byteValue());
assertEquals(Byte.valueOf((byte) 2), mutNum.getValue());
assertEquals((byte) 3, mutNum.byteValue());
assertEquals(Byte.valueOf((byte) 3), mutNum.getValue());
assertEquals(mutNumA.hashCode(), mutNumA.hashCode());
assertEquals(mutNumA.hashCode(), mutNumB.hashCode());
assertNotEquals(mutNumA.hashCode(), mutNumC.hashCode());
assertEquals(mutNumA.hashCode(), Byte.valueOf((byte) 0).hashCode());
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals(2, result);
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals(1.0F, mutNum.floatValue());
assertEquals(1.0, mutNum.doubleValue());
assertEquals( (byte) 1, mutNum.byteValue() );
assertEquals( (short) 1, mutNum.shortValue() );
assertEquals( 1, mutNum.intValue() );
assertEquals( 1L, mutNum.longValue() );
assertThrows(NullPointerException.class, () -> mutNum.setValue(null));
assertEquals((byte) 0, mutNum.byteValue());
assertEquals((byte) 0, mutNum.byteValue());
assertEquals(Byte.valueOf((byte) 0), new MutableByte((byte) 0).toByte());
assertEquals(Byte.valueOf((byte) 123), new MutableByte((byte) 123).toByte());
assertEquals("0", new MutableByte((byte) 0).toString());
assertEquals("10", new MutableByte((byte) 10).toString());
assertEquals("-123", new MutableByte((byte) -123).toString());
assertEquals(1, result);
assertEquals(1, mutableInteger.intValue());
assertEquals(1, result);
assertEquals(1, mutableInteger.intValue());
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals(0, mutNum.compareTo(new MutableInt(0)));
assertEquals(+1, mutNum.compareTo(new MutableInt(-1)));
assertEquals(-1, mutNum.compareTo(new MutableInt(1)));
assertThrows(NullPointerException.class, () -> mutNum.compareTo(null));
assertThrows(NullPointerException.class, () -> new MutableInt((Number) null));
assertEquals(0, new MutableInt().intValue());
assertEquals(1, new MutableInt(1).intValue());
assertEquals(2, new MutableInt(Integer.valueOf(2)).intValue());
assertEquals(3, new MutableInt(new MutableLong(3)).intValue());
assertEquals(2, new MutableInt("2").intValue());
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(0, result);
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(numA, numA);
assertEquals(numA, numB);
assertEquals(numB, numA);
assertEquals(numB, numB);
assertNotEquals(numA, numC);
assertNotEquals(numB, numC);
assertEquals(numC, numC);
assertNotEquals(null, numA);
assertNotEquals(numA, Integer.valueOf(0));
assertNotEquals("0", numA);
assertEquals(0, result);
assertEquals(1, mutableInteger.intValue());
assertEquals(0, result);
assertEquals(1, mutableInteger.intValue());
assertEquals(1, result);
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(1, result);
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals(0, new MutableInt().intValue());
assertEquals(Integer.valueOf(0), new MutableInt().getValue());
assertEquals(1, mutNum.intValue());
assertEquals(Integer.valueOf(1), mutNum.getValue());
assertEquals(2, mutNum.intValue());
assertEquals(Integer.valueOf(2), mutNum.getValue());
assertEquals(3, mutNum.intValue());
assertEquals(Integer.valueOf(3), mutNum.getValue());
assertEquals(mutNumA.hashCode(), mutNumA.hashCode());
assertEquals(mutNumA.hashCode(), mutNumB.hashCode());
assertNotEquals(mutNumA.hashCode(), mutNumC.hashCode());
assertEquals(mutNumA.hashCode(), Integer.valueOf(0).hashCode());
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals(2, result);
assertEquals(2, mutNum.intValue());
assertEquals(2L, mutNum.longValue());
assertEquals( (byte) 1, mutNum.byteValue() );
assertEquals( (short) 1, mutNum.shortValue() );
assertEquals(1.0F, mutNum.floatValue());
assertEquals(1.0, mutNum.doubleValue());
assertEquals( 1L, mutNum.longValue() );
assertThrows(NullPointerException.class, () -> mutNum.setValue(null));
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(0, mutNum.intValue());
assertEquals(0L, mutNum.longValue());
assertEquals(Integer.valueOf(0), new MutableInt(0).toInteger());
assertEquals(Integer.valueOf(123), new MutableInt(123).toInteger());
assertEquals("0", new MutableInt(0).toString());
assertEquals("10", new MutableInt(10).toString());
assertEquals("-123", new MutableInt(-123).toString());
assertNull(new MutableObject<String>().getValue());
assertSame(i, new MutableObject<>(i).getValue());
assertSame("HI", new MutableObject<>("HI").getValue());
assertSame(null, new MutableObject<>(null).getValue());
assertEquals(mutNumA, mutNumA);
assertEquals(mutNumA, mutNumB);
assertEquals(mutNumB, mutNumA);
assertEquals(mutNumB, mutNumB);
assertNotEquals(mutNumA, mutNumC);
assertNotEquals(mutNumB, mutNumC);
assertEquals(mutNumC, mutNumC);
assertNotEquals(mutNumA, mutNumD);
assertEquals(mutNumD, mutNumD);
assertNotEquals(null, mutNumA);
assertNotEquals(mutNumA, new Object());
assertNotEquals("0", mutNumA);
assertNull(new MutableObject<>().getValue());
assertSame("HELLO", mutNum.getValue());
assertSame(null, mutNum.getValue());
assertEquals(mutNumA.hashCode(), mutNumA.hashCode());
assertEquals(mutNumA.hashCode(), mutNumB.hashCode());
assertNotEquals(mutNumA.hashCode(), mutNumC.hashCode());
assertNotEquals(mutNumA.hashCode(), mutNumD.hashCode());
assertEquals(mutNumA.hashCode(), "ALPHA".hashCode());
assertEquals(0, mutNumD.hashCode());
assertEquals("HI", new MutableObject<>("HI").toString());
assertEquals("10.0", new MutableObject<>(Double.valueOf(10)).toString());
assertEquals("null", new MutableObject<>(null).toString());
assertNotNull(new LocaleUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(LocaleUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(LocaleUtils.class.getModifiers()));
private static void assertValidToLocale(final String language) {final Locale locale = LocaleUtils.toLocale(language);
assertNotNull(locale, "valid locale");
assertEquals(language, locale.getLanguage());
assertTrue(locale.getCountry() == null || locale.getCountry().isEmpty());
assertTrue(locale.getVariant() == null || locale.getVariant().isEmpty());
private static void assertValidToLocale(final String localeString, final String language, final String country) {final Locale locale = LocaleUtils.toLocale(localeString);
assertNotNull(locale, "valid locale");
assertEquals(language, locale.getLanguage());
assertEquals(country, locale.getCountry());
assertTrue(locale.getVariant() == null || locale.getVariant().isEmpty());
private static void assertValidToLocale(final String localeString, final String language,final String country, final String variant) {final Locale locale = LocaleUtils.toLocale(localeString);
assertNotNull(locale, "valid locale");
assertEquals(language, locale.getLanguage());
assertEquals(country, locale.getCountry());
assertEquals(variant, locale.getVariant());
assertNull(LocaleUtils.toLocale((String) null));
assertEquals(Locale.getDefault(), LocaleUtils.toLocale((Locale) null));
assertEquals(Locale.getDefault(), LocaleUtils.toLocale(Locale.getDefault()));
assertEquals(actualLocale, LocaleUtils.toLocale(actualLocale));
assertNull(LocaleUtils.toLocale((String) null));
assertValidToLocale("us");
assertValidToLocale("fr");
assertValidToLocale("de");
assertValidToLocale("zh");
assertValidToLocale("qq");
assertValidToLocale("");
assertThrows(IllegalArgumentException.class, () -> LocaleUtils.toLocale("Us"), "Should fail if not lowercase");
assertThrows(IllegalArgumentException.class, () -> LocaleUtils.toLocale("uS"), "Should fail if not lowercase");
assertThrows(IllegalArgumentException.class, () -> LocaleUtils.toLocale("u#"), "Should fail if not lowercase");
assertThrows(IllegalArgumentException.class, () -> LocaleUtils.toLocale("u"), "Must be 2 chars if less than 5");
assertThrows(IllegalArgumentException.class, () -> LocaleUtils.toLocale("uu_U"), "Must be 2 chars if less than 5");
assertValidToLocale("us_EN", "us", "EN");
assertValidToLocale("us-EN", "us", "EN");
assertValidToLocale("us_ZH", "us", "ZH");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("us_En"),"Should fail second part not uppercase");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("us_en"),"Should fail second part not uppercase");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("us_eN"),"Should fail second part not uppercase");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("uS_EN"),"Should fail first part not lowercase");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("us_E3"),"Should fail second part not uppercase");
assertValidToLocale("us_EN_A", "us", "EN", "A");
assertValidToLocale("us-EN-A", "us", "EN", "A");
assertValidToLocale("us_EN_a", "us", "EN", "a");
assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFsafdFDsdfF");
assertValidToLocale("us_EN_a", "us", "EN", "A");
assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFSAFDFDSDFF");
assertThrows(IllegalArgumentException.class, () -> LocaleUtils.toLocale("us_EN-a"), "Should fail as no consistent delimiter");
assertThrows(IllegalArgumentException.class, () -> LocaleUtils.toLocale("uu_UU_"), "Must be 3, 5 or 7+ in length");
private static void assertLocaleLookupList(final Locale locale, final Locale defaultLocale, final Locale[] expected) {final List<Locale> localeList = defaultLocale == null ?LocaleUtils.localeLookupList(locale) :LocaleUtils.localeLookupList(locale, defaultLocale);
assertEquals(expected.length, localeList.size());
assertEquals(Arrays.asList(expected), localeList);
assertUnmodifiableCollection(localeList);
assertLocaleLookupList(null, null, new Locale[0]);
assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ});
assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});
assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});
assertLocaleLookupList(LOCALE_EN_US, null,new Locale[] {LOCALE_EN_US,LOCALE_EN});
assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,new Locale[] {LOCALE_EN_US_ZZZZ,LOCALE_EN_US,LOCALE_EN});
assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ,new Locale[]{LOCALE_QQ});
assertLocaleLookupList(LOCALE_EN, LOCALE_EN,new Locale[]{LOCALE_EN});
assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US,new Locale[]{LOCALE_EN_US,LOCALE_EN});
assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ,new Locale[] {LOCALE_EN_US,LOCALE_EN,LOCALE_QQ});
assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ,new Locale[] {LOCALE_EN_US,LOCALE_EN,LOCALE_QQ_ZZ});
assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,new Locale[] {LOCALE_EN_US_ZZZZ,LOCALE_EN_US,LOCALE_EN});
assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ,new Locale[] {LOCALE_EN_US_ZZZZ,LOCALE_EN_US,LOCALE_EN});
assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ,new Locale[] {LOCALE_EN_US_ZZZZ,LOCALE_EN_US,LOCALE_EN,LOCALE_QQ});
assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ,new Locale[] {LOCALE_EN_US_ZZZZ,LOCALE_EN_US,LOCALE_EN,LOCALE_QQ_ZZ});
assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN,new Locale[] {LOCALE_FR_CA,LOCALE_FR,LOCALE_EN});
assertNotNull(list);
assertSame(list, list2);
assertUnmodifiableCollection(list);
assertEquals(jdkLocaleList, list);
assertNotNull(set);
assertSame(set, set2);
assertUnmodifiableCollection(set);
assertEquals(jdkLocaleSet, set);
assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN));
assertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US));
assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ));
assertEquals(set.contains(LOCALE_FR), LocaleUtils.isAvailableLocale(LOCALE_FR));
assertEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isAvailableLocale(LOCALE_FR_CA));
assertEquals(set.contains(LOCALE_QQ), LocaleUtils.isAvailableLocale(LOCALE_QQ));
assertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ));
assertNotNull(locale);
assertEquals(str, locale.getLanguage());
assertTrue(StringUtils.isBlank(locale.getCountry()));
assertEquals(new Locale(str), locale);
private static void assertLanguageByCountry(final String country, final String[] languages) {final List<Locale> list = LocaleUtils.languagesByCountry(country);
assertNotNull(list);
assertSame(list, list2);
assertTrue(locale.getVariant() == null|| locale.getVariant().isEmpty());
assertEquals(country, locale.getCountry());
assertTrue(found, "Could not find language: " + language + " for country: " + country);
assertUnmodifiableCollection(list);
assertLanguageByCountry(null, new String[0]);
assertLanguageByCountry("GB", new String[]{"en"});
assertLanguageByCountry("ZZ", new String[0]);
assertLanguageByCountry("CH", new String[]{"fr", "de", "it"});
private static void assertCountriesByLanguage(final String language, final String[] countries) {final List<Locale> list = LocaleUtils.countriesByLanguage(language);
assertNotNull(list);
assertSame(list, list2);
assertTrue(locale.getVariant() == null|| locale.getVariant().isEmpty());
assertEquals(language, locale.getLanguage());
assertTrue(found, "Could not find language: " + country + " for country: " + language);
assertUnmodifiableCollection(list);
assertCountriesByLanguage(null, new String[0]);
assertCountriesByLanguage("de", new String[]{"DE", "CH", "AT", "LU"});
assertCountriesByLanguage("zz", new String[0]);
assertCountriesByLanguage("it", new String[]{"IT", "CH"});
private static void assertUnmodifiableCollection(final Collection<?> coll) {assertThrows(UnsupportedOperationException.class, () -> coll.add(null));
assertValidToLocale("fr__P", "fr", "", "P");
assertValidToLocale("fr__POSIX", "fr", "", "POSIX");
assertValidToLocale("en_001", "en", "001");
assertValidToLocale("en_150", "en", "150");
assertValidToLocale("ar_001", "ar", "001");
assertValidToLocale("en_001_GB", "en", "001", "GB");
assertValidToLocale("en_150_US", "en", "150", "US");
assertValidToLocale("_GB", "", "GB", "");
assertValidToLocale("_GB_P", "", "GB", "P");
assertValidToLocale("_GB_POSIX", "", "GB", "POSIX");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("_G"),"Must be at least 3 chars if starts with underscore");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("_Gb"),"Must be uppercase if starts with underscore");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("_gB"),"Must be uppercase if starts with underscore");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("_1B"),"Must be letter if starts with underscore");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("_G1"),"Must be letter if starts with underscore");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("_GB_"),"Must be at least 5 chars if starts with underscore");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("_GBAP"),"Must have underscore after the country if starts with underscore and is at least 5 chars");
assertThrows(IllegalArgumentException.class, () -> LocaleUtils.toLocale(str));
assertEquals(actualLocale, loc);
assertTrue(Modifier.isPublic(CharSet.class.getModifiers()));
assertFalse(Modifier.isFinal(CharSet.class.getModifiers()));
assertSame(CharSet.EMPTY, CharSet.getInstance( (String) null));
assertSame(CharSet.EMPTY, CharSet.getInstance(""));
assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("a-zA-Z"));
assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("A-Za-z"));
assertSame(CharSet.ASCII_ALPHA_LOWER, CharSet.getInstance("a-z"));
assertSame(CharSet.ASCII_ALPHA_UPPER, CharSet.getInstance("A-Z"));
assertSame(CharSet.ASCII_NUMERIC, CharSet.getInstance("0-9"));
assertNull(CharSet.getInstance((String[]) null));
assertEquals("[]", CharSet.getInstance(new String[0]).toString());
assertEquals("[]", CharSet.getInstance(new String[] {null}).toString());
assertEquals("[a-e]", CharSet.getInstance(new String[] {"a-e"}).toString());
assertEquals("[]", set.toString());
assertEquals(0, array.length);
assertEquals("[]", set.toString());
assertEquals(0, array.length);
assertEquals("[a]", set.toString());
assertEquals(1, array.length);
assertEquals("a", array[0].toString());
assertEquals("[^a]", set.toString());
assertEquals(1, array.length);
assertEquals("^a", array[0].toString());
assertEquals("[a-e]", set.toString());
assertEquals(1, array.length);
assertEquals("a-e", array[0].toString());
assertEquals("[^a-e]", set.toString());
assertEquals(1, array.length);
assertEquals("^a-e", array[0].toString());
assertEquals(3, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.is('a')));
assertTrue(ArrayUtils.contains(array, CharRange.is('b')));
assertTrue(ArrayUtils.contains(array, CharRange.is('c')));
assertEquals(2, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'c')));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));
assertEquals(2, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.is('a')));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));
assertEquals(2, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.is('a')));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));
assertEquals(4, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.is('a')));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('m', 'p')));
assertTrue(ArrayUtils.contains(array, CharRange.is('z')));
assertEquals(3, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));
assertTrue(ArrayUtils.contains(array, CharRange.is('b')));
assertTrue(ArrayUtils.contains(array, CharRange.is('c')));
assertEquals(3, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.is('b')));
assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));
assertTrue(ArrayUtils.contains(array, CharRange.is('c')));
assertEquals(4, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.is('d')));
assertTrue(ArrayUtils.contains(array, CharRange.is('b')));
assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));
assertTrue(ArrayUtils.contains(array, CharRange.is('c')));
assertEquals(2, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.isNot('b')));
assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));
assertEquals(3, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('a', 'c')));
assertTrue(ArrayUtils.contains(array, CharRange.isNot('z')));
assertTrue(ArrayUtils.contains(array, CharRange.is('b')));
assertEquals(1, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.is('-')));
assertEquals(1, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.is('-')));
assertEquals(1, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.is('-')));
assertEquals(1, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.is('-')));
assertEquals(2, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.is('-')));
assertTrue(ArrayUtils.contains(array, CharRange.is('a')));
assertEquals(2, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.is('a')));
assertTrue(ArrayUtils.contains(array, CharRange.is('-')));
assertEquals(1, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '-')));
assertEquals(1, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.isIn('-', 'a')));
assertEquals(1, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); // "^"
assertEquals(1, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); // "^^"
assertEquals(2, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); // "^^"
assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); // "^"
assertEquals(1, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); // "^^" x2
assertEquals(2, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); // "a"
assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); // "^"
assertEquals(2, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); // "^a"
assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); // "-"
assertEquals(1, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); // "^^-c"
assertEquals(1, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); // "^c-^"
assertEquals(2, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); // "^c-^"
assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); // "d"
assertEquals(2, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); // "^^"
assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); // "-"
assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '^'))); // "a-^"
assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); // "c"
assertFalse(set.contains('b'));
assertTrue(set.contains('^'));
assertTrue(set.contains('_')); // between ^ and a
assertTrue(set.contains('c'));
assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('a', '^'))); // "^a-^"
assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); // "c"
assertTrue(set.contains('b'));
assertFalse(set.contains('^'));
assertFalse(set.contains('_')); // between ^ and a
assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', ' '))); // "a- "
assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('-', ' '))); // "^-- "
assertTrue(set.contains('#'));
assertTrue(set.contains('^'));
assertTrue(set.contains('a'));
assertTrue(set.contains('*'));
assertTrue(set.contains('A'));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('^', 'b'))); // "^-b"
assertTrue(set.contains('b'));
assertTrue(set.contains('_')); // between ^ and a
assertFalse(set.contains('A'));
assertTrue(set.contains('^'));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('^', 'b'))); // "b-^"
assertTrue(set.contains('b'));
assertTrue(set.contains('^'));
assertTrue(set.contains('a')); // between ^ and b
assertFalse(set.contains('c'));
assertNotEquals(null, abc);
assertEquals(abc, abc);
assertEquals(abc, abc2);
assertNotEquals(abc, atoc);
assertNotEquals(abc, notatoc);
assertNotEquals(atoc, abc);
assertEquals(atoc, atoc);
assertEquals(atoc, atoc2);
assertNotEquals(atoc, notatoc);
assertNotEquals(notatoc, abc);
assertNotEquals(notatoc, atoc);
assertEquals(notatoc, notatoc);
assertEquals(notatoc, notatoc2);
assertEquals(abc.hashCode(), abc.hashCode());
assertEquals(abc.hashCode(), abc2.hashCode());
assertEquals(atoc.hashCode(), atoc.hashCode());
assertEquals(atoc.hashCode(), atoc2.hashCode());
assertEquals(notatoc.hashCode(), notatoc.hashCode());
assertEquals(notatoc.hashCode(), notatoc2.hashCode());
assertFalse(btod.contains('a'));
assertTrue(btod.contains('b'));
assertTrue(btod.contains('c'));
assertTrue(btod.contains('d'));
assertFalse(btod.contains('e'));
assertFalse(bcd.contains('a'));
assertTrue(bcd.contains('b'));
assertTrue(bcd.contains('c'));
assertTrue(bcd.contains('d'));
assertFalse(bcd.contains('e'));
assertFalse(bd.contains('a'));
assertTrue(bd.contains('b'));
assertFalse(bd.contains('c'));
assertTrue(bd.contains('d'));
assertFalse(bd.contains('e'));
assertTrue(notbtod.contains('a'));
assertFalse(notbtod.contains('b'));
assertFalse(notbtod.contains('c'));
assertFalse(notbtod.contains('d'));
assertTrue(notbtod.contains('e'));
assertFalse(dtob.contains('a'));
assertTrue(dtob.contains('b'));
assertTrue(dtob.contains('c'));
assertTrue(dtob.contains('d'));
assertFalse(dtob.contains('e'));
assertEquals("[b-d]", dtob.toString());
assertEquals(1, array.length);
assertEquals(set, SerializationUtils.clone(set));
assertEquals(set, SerializationUtils.clone(set));
assertEquals(set, SerializationUtils.clone(set));
assertEquals(0, array.length);
assertEquals(2, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'z')));
assertTrue(ArrayUtils.contains(array, CharRange.isIn('A', 'Z')));
assertEquals(1, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'z')));
assertEquals(1, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.isIn('A', 'Z')));
assertEquals(1, array.length);
assertTrue(ArrayUtils.contains(array, CharRange.isIn('0', '9')));
assertFalse(CharSet.getInstance("^a-c").contains('a'));
assertTrue(CharSet.getInstance("^a-c").contains('d'));
assertTrue(CharSet.getInstance("^^a-c").contains('a'));
assertFalse(CharSet.getInstance("^^a-c").contains('^'));
assertTrue(CharSet.getInstance("^a-cd-f").contains('d'));
assertTrue(CharSet.getInstance("a-c^").contains('^'));
assertTrue(CharSet.getInstance("^", "a-c").contains('^'));
Assertions.assertEquals(String.format("%s[%s]", classLoader, url), ClassLoaderUtils.toString(classLoader));
Assertions.assertEquals(String.format("%s[%s]", urlClassLoader, url),ClassLoaderUtils.toString(urlClassLoader));
assertEquals(0, Conversion.hexDigitToInt('0'));
assertEquals(1, Conversion.hexDigitToInt('1'));
assertEquals(2, Conversion.hexDigitToInt('2'));
assertEquals(3, Conversion.hexDigitToInt('3'));
assertEquals(4, Conversion.hexDigitToInt('4'));
assertEquals(5, Conversion.hexDigitToInt('5'));
assertEquals(6, Conversion.hexDigitToInt('6'));
assertEquals(7, Conversion.hexDigitToInt('7'));
assertEquals(8, Conversion.hexDigitToInt('8'));
assertEquals(9, Conversion.hexDigitToInt('9'));
assertEquals(10, Conversion.hexDigitToInt('A'));
assertEquals(10, Conversion.hexDigitToInt('a'));
assertEquals(11, Conversion.hexDigitToInt('B'));
assertEquals(11, Conversion.hexDigitToInt('b'));
assertEquals(12, Conversion.hexDigitToInt('C'));
assertEquals(12, Conversion.hexDigitToInt('c'));
assertEquals(13, Conversion.hexDigitToInt('D'));
assertEquals(13, Conversion.hexDigitToInt('d'));
assertEquals(14, Conversion.hexDigitToInt('E'));
assertEquals(14, Conversion.hexDigitToInt('e'));
assertEquals(15, Conversion.hexDigitToInt('F'));
assertEquals(15, Conversion.hexDigitToInt('f'));
assertThrows(IllegalArgumentException.class, () -> Conversion.hexDigitToInt('G'));
assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0'));
assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1'));
assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2'));
assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3'));
assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4'));
assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5'));
assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6'));
assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7'));
assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8'));
assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9'));
assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A'));
assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a'));
assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B'));
assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b'));
assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C'));
assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c'));
assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D'));
assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d'));
assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E'));
assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e'));
assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F'));
assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f'));
assertThrows(IllegalArgumentException.class, () -> Conversion.hexDigitMsb0ToInt('G'));
assertArrayEquals(new boolean[]{false, false, false, false}, Conversion.hexDigitToBinary('0'));
assertArrayEquals(new boolean[]{true, false, false, false}, Conversion.hexDigitToBinary('1'));
assertArrayEquals(new boolean[]{false, true, false, false}, Conversion.hexDigitToBinary('2'));
assertArrayEquals(new boolean[]{true, true, false, false}, Conversion.hexDigitToBinary('3'));
assertArrayEquals(new boolean[]{false, false, true, false}, Conversion.hexDigitToBinary('4'));
assertArrayEquals(new boolean[]{true, false, true, false}, Conversion.hexDigitToBinary('5'));
assertArrayEquals(new boolean[]{false, true, true, false}, Conversion.hexDigitToBinary('6'));
assertArrayEquals(new boolean[]{true, true, true, false}, Conversion.hexDigitToBinary('7'));
assertArrayEquals(new boolean[]{false, false, false, true}, Conversion.hexDigitToBinary('8'));
assertArrayEquals(new boolean[]{true, false, false, true}, Conversion.hexDigitToBinary('9'));
assertArrayEquals(new boolean[]{false, true, false, true}, Conversion.hexDigitToBinary('A'));
assertArrayEquals(new boolean[]{false, true, false, true}, Conversion.hexDigitToBinary('a'));
assertArrayEquals(new boolean[]{true, true, false, true}, Conversion.hexDigitToBinary('B'));
assertArrayEquals(new boolean[]{true, true, false, true}, Conversion.hexDigitToBinary('b'));
assertArrayEquals(new boolean[]{false, false, true, true}, Conversion.hexDigitToBinary('C'));
assertArrayEquals(new boolean[]{false, false, true, true}, Conversion.hexDigitToBinary('c'));
assertArrayEquals(new boolean[]{true, false, true, true}, Conversion.hexDigitToBinary('D'));
assertArrayEquals(new boolean[]{true, false, true, true}, Conversion.hexDigitToBinary('d'));
assertArrayEquals(new boolean[]{false, true, true, true}, Conversion.hexDigitToBinary('E'));
assertArrayEquals(new boolean[]{false, true, true, true}, Conversion.hexDigitToBinary('e'));
assertArrayEquals(new boolean[]{true, true, true, true}, Conversion.hexDigitToBinary('F'));
assertArrayEquals(new boolean[]{true, true, true, true}, Conversion.hexDigitToBinary('f'));
assertThrows(IllegalArgumentException.class, () -> Conversion.hexDigitToBinary('G'));
assertArrayEquals(new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBinary('0'));
assertArrayEquals(new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBinary('1'));
assertArrayEquals(new boolean[]{false, false, true, false}, Conversion.hexDigitMsb0ToBinary('2'));
assertArrayEquals(new boolean[]{false, false, true, true}, Conversion.hexDigitMsb0ToBinary('3'));
assertArrayEquals(new boolean[]{false, true, false, false}, Conversion.hexDigitMsb0ToBinary('4'));
assertArrayEquals(new boolean[]{false, true, false, true}, Conversion.hexDigitMsb0ToBinary('5'));
assertArrayEquals(new boolean[]{false, true, true, false}, Conversion.hexDigitMsb0ToBinary('6'));
assertArrayEquals(new boolean[]{false, true, true, true}, Conversion.hexDigitMsb0ToBinary('7'));
assertArrayEquals(new boolean[]{true, false, false, false}, Conversion.hexDigitMsb0ToBinary('8'));
assertArrayEquals(new boolean[]{true, false, false, true}, Conversion.hexDigitMsb0ToBinary('9'));
assertArrayEquals(new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBinary('A'));
assertArrayEquals(new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBinary('a'));
assertArrayEquals(new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBinary('B'));
assertArrayEquals(new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBinary('b'));
assertArrayEquals(new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBinary('C'));
assertArrayEquals(new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBinary('c'));
assertArrayEquals(new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBinary('D'));
assertArrayEquals(new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBinary('d'));
assertArrayEquals(new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBinary('E'));
assertArrayEquals(new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBinary('e'));
assertArrayEquals(new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBinary('F'));
assertArrayEquals(new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBinary('f'));
assertThrows(IllegalArgumentException.class, () -> Conversion.hexDigitMsb0ToBinary('G'));
assertEquals('0', Conversion.binaryToHexDigit(new boolean[]{false, false, false, false}));
assertEquals('1', Conversion.binaryToHexDigit(new boolean[]{true, false, false, false}));
assertEquals('2', Conversion.binaryToHexDigit(new boolean[]{false, true, false, false}));
assertEquals('3', Conversion.binaryToHexDigit(new boolean[]{true, true, false, false}));
assertEquals('4', Conversion.binaryToHexDigit(new boolean[]{false, false, true, false}));
assertEquals('5', Conversion.binaryToHexDigit(new boolean[]{true, false, true, false}));
assertEquals('6', Conversion.binaryToHexDigit(new boolean[]{false, true, true, false}));
assertEquals('7', Conversion.binaryToHexDigit(new boolean[]{true, true, true, false}));
assertEquals('8', Conversion.binaryToHexDigit(new boolean[]{false, false, false, true}));
assertEquals('9', Conversion.binaryToHexDigit(new boolean[]{true, false, false, true}));
assertEquals('a', Conversion.binaryToHexDigit(new boolean[]{false, true, false, true}));
assertEquals('b', Conversion.binaryToHexDigit(new boolean[]{true, true, false, true}));
assertEquals('c', Conversion.binaryToHexDigit(new boolean[]{false, false, true, true}));
assertEquals('d', Conversion.binaryToHexDigit(new boolean[]{true, false, true, true}));
assertEquals('e', Conversion.binaryToHexDigit(new boolean[]{false, true, true, true}));
assertEquals('f', Conversion.binaryToHexDigit(new boolean[]{true, true, true, true}));
assertEquals('1', Conversion.binaryToHexDigit(new boolean[]{true}));
assertEquals('f', Conversion.binaryToHexDigit(new boolean[]{true, true, true, true, true}));
assertThrows(IllegalArgumentException.class, () -> Conversion.binaryToHexDigit(new boolean[]{}));
assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0));
assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1));
assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2));
assertEquals('5', Conversion.binaryToHexDigit(longArray, 0));
assertEquals('2', Conversion.binaryToHexDigit(longArray, 1));
assertEquals('9', Conversion.binaryToHexDigit(longArray, 2));
assertEquals('c', Conversion.binaryToHexDigit(longArray, 3));
assertEquals('6', Conversion.binaryToHexDigit(longArray, 4));
assertEquals('3', Conversion.binaryToHexDigit(longArray, 5));
assertEquals('1', Conversion.binaryToHexDigit(longArray, 6));
assertEquals('0',Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false}));
assertEquals('1',Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, true}));
assertEquals('2',Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, false}));
assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, true}));
assertEquals('4',Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, false}));
assertEquals('5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, true}));
assertEquals('6', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, true, false}));
assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, true, true}));
assertEquals('8',Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, false, false}));
assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, false, true}));
assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, true, false}));
assertEquals('b', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, true, true}));
assertEquals('c', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, false, false}));
assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, false, true}));
assertEquals('e', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, true, false}));
assertEquals('f', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, true, true}));
assertThrows(IllegalArgumentException.class, () -> Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{}));
// assertEquals('6', Conversion.BinaryToHexDigitMsb0(shortArray, 0));
// assertEquals('3', Conversion.BinaryToHexDigitMsb0(shortArray, 1));
// assertEquals('1', Conversion.BinaryToHexDigitMsb0(shortArray, 2));
assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(shortArray, 0));
assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(longArray, 0));
assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(longArray, 1));
assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(longArray, 2));
assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(longArray, 3));
// assertEquals('6', Conversion.BinaryToHexDigitMsb0(longArray, 4));
// assertEquals('3', Conversion.BinaryToHexDigitMsb0(longArray, 5));
// assertEquals('1', Conversion.BinaryToHexDigitMsb0(longArray, 6));
assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 0));
assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 1));
assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 2));
assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 3));
assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 4));
// assertEquals('7', Conversion.BinaryToHexDigitMsb0(longArray, 5));
// assertEquals('3', Conversion.BinaryToHexDigitMsb0(longArray, 6));
// assertEquals('1', Conversion.BinaryToHexDigitMsb0(longArray, 7));
assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(javaDocCheck, 3));
assertEquals('0', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, false, false}));
assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, false, true}));
assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, true, false}));
assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, true, true}));
assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, false, false}));
assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, false, true}));
assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, true, false}));
assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, true, true}));
assertEquals('8', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, false, false}));
assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, false, true}));
assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, true, false}));
assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, true, true}));
assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, false, false}));
assertEquals('d', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, false, true}));
assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, true, false}));
assertEquals('f', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, true, true}));
assertEquals('4',Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, false, false, false, false, false, false, false, false, false,false, false, true, false, false}));
assertThrows(IllegalArgumentException.class, () -> Conversion.binaryBeMsb0ToHexDigit(new boolean[]{}));
assertEquals('5',Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, false, false, false, false, false, false, false, false, false,true, false, true, false, false}, 2));
assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0));
assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1));
assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2));
assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0));
assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1));
assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2));
assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3));
assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 4));
assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 5));
assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 6));
assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 7));
assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 0));
assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 1));
assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 2));
assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 3));
assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 4));
assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 5));
assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 6));
assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 7));
assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 8));
assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 9));
assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 10));
assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 11));
assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 12));
assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 13));
assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 14));
assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 15));
assertEquals(Conversion.binaryToHexDigit(a, k),Conversion.binaryBeMsb0ToHexDigit(b, k));
assertThrows(IndexOutOfBoundsException.class,() -> Conversion.binaryBeMsb0ToHexDigit(new boolean[8], index));
assertEquals('0', Conversion.intToHexDigit(0));
assertEquals('1', Conversion.intToHexDigit(1));
assertEquals('2', Conversion.intToHexDigit(2));
assertEquals('3', Conversion.intToHexDigit(3));
assertEquals('4', Conversion.intToHexDigit(4));
assertEquals('5', Conversion.intToHexDigit(5));
assertEquals('6', Conversion.intToHexDigit(6));
assertEquals('7', Conversion.intToHexDigit(7));
assertEquals('8', Conversion.intToHexDigit(8));
assertEquals('9', Conversion.intToHexDigit(9));
assertEquals('a', Conversion.intToHexDigit(10));
assertEquals('b', Conversion.intToHexDigit(11));
assertEquals('c', Conversion.intToHexDigit(12));
assertEquals('d', Conversion.intToHexDigit(13));
assertEquals('e', Conversion.intToHexDigit(14));
assertEquals('f', Conversion.intToHexDigit(15));
assertThrows(IllegalArgumentException.class, () -> Conversion.intToHexDigit(16));
assertEquals('0', Conversion.intToHexDigitMsb0(0));
assertEquals('8', Conversion.intToHexDigitMsb0(1));
assertEquals('4', Conversion.intToHexDigitMsb0(2));
assertEquals('c', Conversion.intToHexDigitMsb0(3));
assertEquals('2', Conversion.intToHexDigitMsb0(4));
assertEquals('a', Conversion.intToHexDigitMsb0(5));
assertEquals('6', Conversion.intToHexDigitMsb0(6));
assertEquals('e', Conversion.intToHexDigitMsb0(7));
assertEquals('1', Conversion.intToHexDigitMsb0(8));
assertEquals('9', Conversion.intToHexDigitMsb0(9));
assertEquals('5', Conversion.intToHexDigitMsb0(10));
assertEquals('d', Conversion.intToHexDigitMsb0(11));
assertEquals('3', Conversion.intToHexDigitMsb0(12));
assertEquals('b', Conversion.intToHexDigitMsb0(13));
assertEquals('7', Conversion.intToHexDigitMsb0(14));
assertEquals('f', Conversion.intToHexDigitMsb0(15));
assertThrows(IllegalArgumentException.class, () -> Conversion.intToHexDigitMsb0(16));
assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 0, 0L, 0, 0));
assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 1, 0L, 0, 0));
assertEquals(0x00000000CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 1));
assertEquals(0x0F123456CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 2));
assertEquals(0x000000000F123456L, Conversion.intArrayToLong(src, 1, 0L, 0, 1));
assertEquals(0x123456789ABCDEF0L, Conversion.intArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0));
assertEquals(0x1234567878000000L, Conversion.intArrayToLong(src, 2, 0x123456789ABCDEF0L, 0, 1));
// assertEquals(0x0F12345678000000L, Conversion.intsToLong(src, 1, 0x123456789ABCDEF0L, 32, 2));
assertEquals(0x0000000000000000L, Conversion.shortArrayToLong(src, 0, 0L, 0, 0));
assertEquals(0x000000000000CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 1));
assertEquals(0x00000000F0C1CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 2));
assertEquals(0x780034560F12F0C1L, Conversion.shortArrayToLong(src, 1, 0L, 0, 4));
assertEquals(0x123456789ABCDEF0L, Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0));
assertEquals(0x123456CDF1BCDEF0L,Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1));
assertEquals(0x123478003456DEF0L,Conversion.shortArrayToLong(src, 3, 0x123456789ABCDEF0L, 16, 2));
assertEquals(0x0000000000000000L, Conversion.byteArrayToLong(src, 0, 0L, 0, 0));
assertEquals(0x00000000000000CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 1));
assertEquals(0x00000000C1F0F1CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 4));
assertEquals(0x000000000FC1F0F1L, Conversion.byteArrayToLong(src, 1, 0L, 0, 4));
assertEquals(0x123456789ABCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0));
assertEquals(0x12345678CDBCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1));
assertEquals(0x123456789A7856F0L, Conversion.byteArrayToLong(src, 7, 0x123456789ABCDEF0L, 8, 2));
assertEquals(0x00000000, Conversion.shortArrayToInt(src, 0, 0, 0, 0));
assertEquals(0x0000CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 1));
assertEquals(0xF0C1CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 2));
assertEquals(0x0F12F0C1, Conversion.shortArrayToInt(src, 1, 0, 0, 2));
assertEquals(0x12345678, Conversion.shortArrayToInt(src, 0, 0x12345678, 0, 0));
assertEquals(0xCDF15678, Conversion.shortArrayToInt(src, 0, 0x12345678, 16, 1));
// assertEquals(0x34567800, Conversion.ShortArrayToInt(src, 3, 0x12345678, 16, 2));
assertEquals(0x00000000, Conversion.byteArrayToInt(src, 0, 0, 0, 0));
assertEquals(0x000000CD, Conversion.byteArrayToInt(src, 0, 0, 0, 1));
assertEquals(0xC1F0F1CD, Conversion.byteArrayToInt(src, 0, 0, 0, 4));
assertEquals(0x0FC1F0F1, Conversion.byteArrayToInt(src, 1, 0, 0, 4));
assertEquals(0x12345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 0, 0));
assertEquals(0xCD345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 24, 1));
// assertEquals(0x56341278, Conversion.ByteArrayToInt(src, 5, 0x01234567, 8, 4));
assertEquals((short) 0x0000, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 0));
assertEquals((short) 0x00CD, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 1));
assertEquals((short) 0xF1CD, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 2));
assertEquals((short) 0xF0F1, Conversion.byteArrayToShort(src, 1, (short) 0, 0, 2));
assertEquals((short) 0x1234, Conversion.byteArrayToShort(src, 0, (short) 0x1234, 0, 0));
assertEquals((short) 0xCD34, Conversion.byteArrayToShort(src, 0, (short) 0x1234, 8, 1));
// assertEquals((short) 0x5678, Conversion.ByteArrayToShort(src, 7, (short) 0x0123, 8,// 2));
assertEquals(0x0000000000000000L, Conversion.hexToLong(src, 0, 0L, 0, 0));
assertEquals(0x000000000000000CL, Conversion.hexToLong(src, 0, 0L, 0, 1));
assertEquals(0x000000001C0F1FDCL, Conversion.hexToLong(src, 0, 0L, 0, 8));
assertEquals(0x0000000001C0F1FDL, Conversion.hexToLong(src, 1, 0L, 0, 8));
assertEquals(0x123456798ABCDEF0L, Conversion.hexToLong(src, 0, 0x123456798ABCDEF0L, 0, 0));
assertEquals(0x1234567876BCDEF0L, Conversion.hexToLong(src, 15, 0x123456798ABCDEF0L, 24, 3));
assertEquals(0x00000000, Conversion.hexToInt(src, 0, 0, 0, 0));
assertEquals(0x0000000C, Conversion.hexToInt(src, 0, 0, 0, 1));
assertEquals(0x1C0F1FDC, Conversion.hexToInt(src, 0, 0, 0, 8));
assertEquals(0x01C0F1FD, Conversion.hexToInt(src, 1, 0, 0, 8));
assertEquals(0x12345679, Conversion.hexToInt(src, 0, 0x12345679, 0, 0));
assertEquals(0x87645679, Conversion.hexToInt(src, 15, 0x12345679, 20, 3));
assertEquals((short) 0x0000, Conversion.hexToShort(src, 0, (short) 0, 0, 0));
assertEquals((short) 0x000C, Conversion.hexToShort(src, 0, (short) 0, 0, 1));
assertEquals((short) 0x1FDC, Conversion.hexToShort(src, 0, (short) 0, 0, 4));
assertEquals((short) 0xF1FD, Conversion.hexToShort(src, 1, (short) 0, 0, 4));
assertEquals((short) 0x1234, Conversion.hexToShort(src, 0, (short) 0x1234, 0, 0));
assertEquals((short) 0x8764, Conversion.hexToShort(src, 15, (short) 0x1234, 4, 3));
assertEquals((byte) 0x00, Conversion.hexToByte(src, 0, (byte) 0, 0, 0));
assertEquals((byte) 0x0C, Conversion.hexToByte(src, 0, (byte) 0, 0, 1));
assertEquals((byte) 0xDC, Conversion.hexToByte(src, 0, (byte) 0, 0, 2));
assertEquals((byte) 0xFD, Conversion.hexToByte(src, 1, (byte) 0, 0, 2));
assertEquals((byte) 0x34, Conversion.hexToByte(src, 0, (byte) 0x34, 0, 0));
assertEquals((byte) 0x84, Conversion.hexToByte(src, 17, (byte) 0x34, 4, 1));
assertEquals(0x0000000000000000L, Conversion.binaryToLong(src, 0, 0L, 0, 0));
assertEquals(0x000000000000000CL, Conversion.binaryToLong(src, 0, 0L, 0, 1 * 4));
assertEquals(0x000000001C0F1FDCL, Conversion.binaryToLong(src, 0, 0L, 0, 8 * 4));
assertEquals(0x0000000001C0F1FDL, Conversion.binaryToLong(src, 1 * 4, 0L, 0, 8 * 4));
assertEquals(0x123456798ABCDEF0L, Conversion.binaryToLong(src, 0, 0x123456798ABCDEF0L, 0, 0));
assertEquals(0x1234567876BCDEF0L,Conversion.binaryToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4));
assertEquals(0x00000000, Conversion.binaryToInt(src, 0 * 4, 0, 0, 0 * 4));
assertEquals(0x0000000C, Conversion.binaryToInt(src, 0 * 4, 0, 0, 1 * 4));
assertEquals(0x1C0F1FDC, Conversion.binaryToInt(src, 0 * 4, 0, 0, 8 * 4));
assertEquals(0x01C0F1FD, Conversion.binaryToInt(src, 1 * 4, 0, 0, 8 * 4));
assertEquals(0x12345679, Conversion.binaryToInt(src, 0 * 4, 0x12345679, 0, 0 * 4));
assertEquals(0x87645679, Conversion.binaryToInt(src, 15 * 4, 0x12345679, 20, 3 * 4));
assertEquals((short) 0x0000, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 0 * 4));
assertEquals((short) 0x000C, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 1 * 4));
assertEquals((short) 0x1FDC, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 4 * 4));
assertEquals((short) 0xF1FD, Conversion.binaryToShort(src, 1 * 4, (short) 0, 0, 4 * 4));
assertEquals((short) 0x1234, Conversion.binaryToShort(src, 0 * 4, (short) 0x1234, 0, 0 * 4));
assertEquals((short) 0x8764, Conversion.binaryToShort(src, 15 * 4, (short) 0x1234, 4, 3 * 4));
assertEquals((byte) 0x00, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 0 * 4));
assertEquals((byte) 0x0C, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 1 * 4));
assertEquals((byte) 0xDC, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 2 * 4));
assertEquals((byte) 0xFD, Conversion.binaryToByte(src, 1 * 4, (byte) 0, 0, 2 * 4));
assertEquals((byte) 0x34, Conversion.binaryToByte(src, 0 * 4, (byte) 0x34, 0, 0 * 4));
assertEquals((byte) 0x84, Conversion.binaryToByte(src, 17 * 4, (byte) 0x34, 4, 1 * 4));
assertArrayEquals(new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[]{}, 0, 0));
assertArrayEquals(new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 100, new int[]{}, 0, 0));
assertArrayEquals(new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[]{}, 100, 0));
assertArrayEquals(new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF},Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 0));
assertArrayEquals(new int[]{0x90ABCDEF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF},Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 1));
assertArrayEquals(new int[]{0x90ABCDEF, 0x12345678, 0xFFFFFFFF, 0xFFFFFFFF},Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 2));
// assertArrayEquals(new// int[]{0x90ABCDEF, 0x12345678, 0x90ABCDEF, 0x12345678}, Conversion.longToIntArray(0x1234567890ABCDEFL,// 0, new int[]{-1, -1, -1, -1}, 0, 4));//rejected by assertion
// assertArrayEquals(new// int[]{0xFFFFFFFF, 0x90ABCDEF, 0x12345678, 0x90ABCDEF}, Conversion.longToIntArray(0x1234567890ABCDEFL,// 0, new int[]{-1, -1, -1, -1}, 1, 3));
assertArrayEquals(new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0x12345678},Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 2, 2));
assertArrayEquals(new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0xFFFFFFFF},Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF},Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 3, 1));
assertArrayEquals(new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x4855E6F7, 0xFFFFFFFF},Conversion.longToIntArray(0x1234567890ABCDEFL, 1, new int[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x242AF37B, 0xFFFFFFFF},Conversion.longToIntArray(0x1234567890ABCDEFL, 2, new int[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x121579BD, 0xFFFFFFFF},Conversion.longToIntArray(0x1234567890ABCDEFL, 3, new int[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x890ABCDE, 0xFFFFFFFF},Conversion.longToIntArray(0x1234567890ABCDEFL, 4, new int[]{-1, -1, -1, -1}, 2, 1));
// assertArrayEquals(new// int[]{0x4855E6F7, 0x091A2B3C, 0x4855E6F7, 0x091A2B3C}, Conversion.longToIntArray(0x1234567890ABCDEFL,// 1, new int[]{-1, -1, -1, -1}, 0, 4));//rejected by assertion
assertArrayEquals(new int[]{0x091A2B3C},Conversion.longToIntArray(0x1234567890ABCDEFL, 33, new int[]{0}, 0, 1));
assertArrayEquals(new short[]{},Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 0, 0));
assertArrayEquals(new short[]{},Conversion.longToShortArray(0x0000000000000000L, 100, new short[]{}, 0, 0));
assertArrayEquals(new short[]{},Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 100, 0));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF},Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 0));
assertArrayEquals(new short[]{(short) 0xCDEF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF},Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 1));
assertArrayEquals(new short[]{(short) 0xCDEF, (short) 0x90AB, (short) 0xFFFF, (short) 0xFFFF},Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 2));
assertArrayEquals(new short[]{(short) 0xCDEF, (short) 0x90AB, (short) 0x5678, (short) 0xFFFF},Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 3));
assertArrayEquals(new short[]{(short) 0xCDEF, (short) 0x90AB, (short) 0x5678, (short) 0x1234},Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 4));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xCDEF, (short) 0x90AB, (short) 0x5678},Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 1, 3));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF, (short) 0x90AB},Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 2, 2));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF, (short) 0xFFFF},Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF},Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 3, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0xE6F7, (short) 0xFFFF},Conversion.longToShortArray(0x1234567890ABCDEFL, 1, new short[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0xF37B, (short) 0xFFFF},Conversion.longToShortArray(0x1234567890ABCDEFL, 2, new short[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0x79BD, (short) 0xFFFF},Conversion.longToShortArray(0x1234567890ABCDEFL, 3, new short[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0xBCDE, (short) 0xFFFF},Conversion.longToShortArray(0x1234567890ABCDEFL, 4, new short[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new short[]{(short) 0xE6F7, (short) 0x4855, (short) 0x2B3C, (short) 0x091A},Conversion.longToShortArray(0x1234567890ABCDEFL, 1, new short[]{-1, -1, -1, -1}, 0, 4));
assertArrayEquals(new short[]{(short) 0x2B3C},Conversion.longToShortArray(0x1234567890ABCDEFL, 33, new short[]{0}, 0, 1));
assertArrayEquals(new short[]{}, Conversion.intToShortArray(0x00000000, 0, new short[]{}, 0, 0));
assertArrayEquals(new short[]{}, Conversion.intToShortArray(0x00000000, 100, new short[]{}, 0, 0));
assertArrayEquals(new short[]{}, Conversion.intToShortArray(0x00000000, 0, new short[]{}, 100, 0));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF},Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 0));
assertArrayEquals(new short[]{(short) 0x5678, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF},Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 1));
assertArrayEquals(new short[]{(short) 0x5678, (short) 0x1234, (short) 0xFFFF, (short) 0xFFFF},Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 2));
// assertArrayEquals(new// short[]{(short) 0x5678, (short) 0x1234, (short) 0x5678, (short) 0xFFFF}, Conversion.intToShortArray(0x12345678,// 0, new short[]{-1, -1, -1, -1}, 0, 3));//rejected by assertion
// assertArrayEquals(new// short[]{(short) 0x5678, (short) 0x1234, (short) 0x5678, (short) 0x1234}, Conversion.intToShortArray(0x12345678,// 0, new short[]{-1, -1, -1, -1}, 0, 4));
// assertArrayEquals(new// short[]{(short) 0xFFFF, (short) 0x5678, (short) 0x1234, (short) 0x5678}, Conversion.intToShortArray(0x12345678,// 0, new short[]{-1, -1, -1, -1}, 1, 3));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0x5678, (short) 0x1234},Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 2, 2));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0x5678, (short) 0xFFFF},Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0x5678},Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 3, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0x2B3C, (short) 0xFFFF},Conversion.intToShortArray(0x12345678, 1, new short[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0x159E, (short) 0xFFFF},Conversion.intToShortArray(0x12345678, 2, new short[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0x8ACF, (short) 0xFFFF},Conversion.intToShortArray(0x12345678, 3, new short[]{-1, -1, -1, -1}, 2, 1));
assertArrayEquals(new short[]{(short) 0xFFFF, (short) 0xFFFF, (short) 0x4567, (short) 0xFFFF},Conversion.intToShortArray(0x12345678, 4, new short[]{-1, -1, -1, -1}, 2, 1));
// assertArrayEquals(new// short[]{(short) 0xE6F7, (short) 0x4855, (short) 0x2B3C, (short) 0x091A}, Conversion.intToShortArray(0x12345678,// 1, new short[]{-1, -1, -1, -1}, 0, 4));//rejected by assertion
// assertArrayEquals(new// short[]{(short) 0x2B3C}, Conversion.intToShortArray(0x12345678, 33, new// short[]{0}, 0, 1));//rejected by assertion
assertArrayEquals(new short[]{(short) 0x091A},Conversion.intToShortArray(0x12345678, 17, new short[]{0}, 0, 1));
assertArrayEquals(new byte[]{},Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0));
assertArrayEquals(new byte[]{},Conversion.longToByteArray(0x0000000000000000L, 100, new byte[]{}, 0, 0));
assertArrayEquals(new byte[]{},Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 100, 0));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 0));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 2));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 4));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56,(byte) 0x34, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 7));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56,(byte) 0x34, (byte) 0x12, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 8));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 1));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 2));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB,(byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB,(byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB,(byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12},Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8));
assertArrayEquals(new byte[]{(byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 1, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));
assertArrayEquals(new byte[]{(byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 2, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0x5E, (byte) 0x85,(byte) 0xC4, (byte) 0xB3, (byte) 0xA2, (byte) 0x91, (byte) 0x00},Conversion.longToByteArray(0x1234567890ABCDEFL, 5, new byte[]{-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8));
// assertArrayEquals(new// byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xC4, (byte) 0xB3, (byte) 0xA2, (byte) 0x91, (byte) 0x00, (byte) 0x00}, Conversion.longToByteArray(0x1234567890ABCDEFL, 13, new// byte[]{-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8));//rejected by assertion
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xC4,(byte) 0xB3, (byte) 0xA2, (byte) 0x91, (byte) 0x00, (byte) 0xFF},Conversion.longToByteArray(0x1234567890ABCDEFL, 13, new byte[]{-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7));
assertArrayEquals(new byte[]{}, Conversion.intToByteArray(0x00000000, 0, new byte[]{}, 0, 0));
assertArrayEquals(new byte[]{}, Conversion.intToByteArray(0x00000000, 100, new byte[]{}, 0, 0));
assertArrayEquals(new byte[]{}, Conversion.intToByteArray(0x00000000, 0, new byte[]{}, 100, 0));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 0));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 2));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 4));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 1));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 2));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB,(byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));
assertArrayEquals(new byte[]{(byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 1, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));
assertArrayEquals(new byte[]{(byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 2, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0x5E, (byte) 0x85,(byte) 0xFC, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 5, new byte[]{-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));
// assertArrayEquals(new// byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xFC, (byte) 0x00, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF}, Conversion.intToByteArray(0x90ABCDEF, 13, new// byte[]{-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));//rejected by assertion
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xFC,(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},Conversion.intToByteArray(0x90ABCDEF, 13, new byte[]{-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 3));
assertArrayEquals(new byte[]{}, Conversion.shortToByteArray((short) 0x0000, 0, new byte[]{}, 0, 0));
assertArrayEquals(new byte[]{}, Conversion.shortToByteArray((short) 0x0000, 100, new byte[]{}, 0, 0));
assertArrayEquals(new byte[]{}, Conversion.shortToByteArray((short) 0x0000, 0, new byte[]{}, 100, 0));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1}, 0, 0));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1}, 0, 1));
assertArrayEquals(new byte[]{(byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1}, 0, 2));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1}, 3, 1));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF,(byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[]{-1, -1, -1, -1, -1, -1, -1}, 3, 2));
assertArrayEquals(new byte[]{(byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 1, new byte[]{-1, -1, -1, -1, -1, -1, -1}, 0, 1));
assertArrayEquals(new byte[]{(byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 2, new byte[]{-1, -1, -1, -1, -1, -1, -1}, 0, 1));
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0xFE, (byte) 0xFF,(byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 5, new byte[]{-1, 0, -1, -1, -1, -1, -1}, 3, 2));
// assertArrayEquals(new// byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 13, new// byte[]{-1, 0, -1, -1, -1, -1, -1}, 3, 2));//rejected by assertion
assertArrayEquals(new byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0xFE, (byte) 0xFF, (byte) 0xFF,(byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 13, new byte[]{-1, 0, -1, -1, -1, -1, -1}, 3, 1));
assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 0, 0));
assertEquals("", Conversion.longToHex(0x0000000000000000L, 100, "", 0, 0));
assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 100, 0));
assertEquals("ffffffffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 0));
assertEquals("3fffffffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 0, 1));
assertEquals("feffffffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 2));
assertEquals("fedcffffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 4));
assertEquals("fedcba098765432fffffffff",Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 15));
assertEquals("fedcba0987654321ffffffff",Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 16));
assertEquals("fff3ffffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 3, 1));
assertEquals("ffffefffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 2));
assertEquals("ffffedcfffffffffffffffff",Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 4));
assertEquals("ffffedcba098765432ffffff",Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 15));
assertEquals("ffffedcba0987654321fffff",Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 16));
assertEquals("7fffffffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDEFL, 1, "ffffffffffffffffffffffff", 0, 1));
assertEquals("bfffffffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDEFL, 2, "ffffffffffffffffffffffff", 0, 1));
assertEquals("fffdb975121fca86420fffff",Conversion.longToHex(0x1234567890ABCDEFL, 3, "ffffffffffffffffffffffff", 3, 16));
// assertEquals("ffffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 4, "ffffffffffffffffffffffff", 3, 16));//rejected
// by assertionassertEquals("fffedcba0987654321ffffff",Conversion.longToHex(0x1234567890ABCDEFL, 4, "ffffffffffffffffffffffff", 3, 15));
assertEquals("fedcba0987654321", Conversion.longToHex(0x1234567890ABCDEFL, 0, "", 0, 16));
assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.longToHex(0x1234567890ABCDEFL, 0, "", 1, 8));
assertEquals("", Conversion.intToHex(0x00000000, 0, "", 0, 0));
assertEquals("", Conversion.intToHex(0x00000000, 100, "", 0, 0));
assertEquals("", Conversion.intToHex(0x00000000, 0, "", 100, 0));
assertEquals("ffffffffffffffffffffffff",Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 0));
assertEquals("3fffffffffffffffffffffff",Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 0, 1));
assertEquals("feffffffffffffffffffffff",Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 2));
assertEquals("fedcffffffffffffffffffff",Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 4));
assertEquals("fedcba0fffffffffffffffff",Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 7));
assertEquals("fedcba09ffffffffffffffff",Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 8));
assertEquals("fff3ffffffffffffffffffff",Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 3, 1));
assertEquals("ffffefffffffffffffffffff",Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 2));
assertEquals("ffffedcfffffffffffffffff",Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 4));
assertEquals("ffffedcba0ffffffffffffff",Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 7));
assertEquals("ffffedcba09fffffffffffff",Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 8));
assertEquals("7fffffffffffffffffffffff",Conversion.intToHex(0x90ABCDEF, 1, "ffffffffffffffffffffffff", 0, 1));
assertEquals("bfffffffffffffffffffffff",Conversion.intToHex(0x90ABCDEF, 2, "ffffffffffffffffffffffff", 0, 1));
assertEquals("fffdb97512ffffffffffffff",Conversion.intToHex(0x90ABCDEF, 3, "ffffffffffffffffffffffff", 3, 8));
// assertEquals("ffffffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF,// 4, "ffffffffffffffffffffffff", 3, 8));//rejected by assertion
assertEquals("fffedcba09ffffffffffffff",Conversion.intToHex(0x90ABCDEF, 4, "ffffffffffffffffffffffff", 3, 7));
assertEquals("fedcba09", Conversion.intToHex(0x90ABCDEF, 0, "", 0, 8));
assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.intToHex(0x90ABCDEF, 0, "", 1, 8));
assertEquals("", Conversion.shortToHex((short) 0x0000, 0, "", 0, 0));
assertEquals("", Conversion.shortToHex((short) 0x0000, 100, "", 0, 0));
assertEquals("", Conversion.shortToHex((short) 0x0000, 0, "", 100, 0));
assertEquals("ffffffffffffffffffffffff",Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 0));
assertEquals("3fffffffffffffffffffffff",Conversion.shortToHex((short) 0xCDE3, 0, "ffffffffffffffffffffffff", 0, 1));
assertEquals("feffffffffffffffffffffff",Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 2));
assertEquals("fedfffffffffffffffffffff",Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 3));
assertEquals("fedcffffffffffffffffffff",Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 4));
assertEquals("fff3ffffffffffffffffffff",Conversion.shortToHex((short) 0xCDE3, 0, "ffffffffffffffffffffffff", 3, 1));
assertEquals("ffffefffffffffffffffffff",Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 3, 2));
assertEquals("7fffffffffffffffffffffff",Conversion.shortToHex((short) 0xCDEF, 1, "ffffffffffffffffffffffff", 0, 1));
assertEquals("bfffffffffffffffffffffff",Conversion.shortToHex((short) 0xCDEF, 2, "ffffffffffffffffffffffff", 0, 1));
assertEquals("fffdb9ffffffffffffffffff",Conversion.shortToHex((short) 0xCDEF, 3, "ffffffffffffffffffffffff", 3, 4));
// assertEquals("ffffffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF,// 4, "ffffffffffffffffffffffff", 3, 4));//rejected by assertion
assertEquals("fffedcffffffffffffffffff",Conversion.shortToHex((short) 0xCDEF, 4, "ffffffffffffffffffffffff", 3, 3));
assertEquals("fedc", Conversion.shortToHex((short) 0xCDEF, 0, "", 0, 4));
assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.shortToHex((short) 0xCDEF, 0, "", 1, 4));
assertEquals("", Conversion.byteToHex((byte) 0x00, 0, "", 0, 0));
assertEquals("", Conversion.byteToHex((byte) 0x00, 100, "", 0, 0));
assertEquals("", Conversion.byteToHex((byte) 0x00, 0, "", 100, 0));
assertEquals("00000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 0));
assertEquals("f0000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 1));
assertEquals("fe000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 2));
assertEquals("000f0", Conversion.byteToHex((byte) 0xEF, 0, "00000", 3, 1));
assertEquals("000fe", Conversion.byteToHex((byte) 0xEF, 0, "00000", 3, 2));
assertEquals("70000", Conversion.byteToHex((byte) 0xEF, 1, "00000", 0, 1));
assertEquals("b0000", Conversion.byteToHex((byte) 0xEF, 2, "00000", 0, 1));
assertEquals("000df", Conversion.byteToHex((byte) 0xEF, 3, "00000", 3, 2));
// assertEquals("00000", Conversion.byteToHex((byte) 0xEF, 4, "00000", 3, 2));//rejected by
// assertionassertEquals("000e0", Conversion.byteToHex((byte) 0xEF, 4, "00000", 3, 1));
assertEquals("fe", Conversion.byteToHex((byte) 0xEF, 0, "", 0, 2));
assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.byteToHex((byte) 0xEF, 0, "", 1, 2));
assertArrayEquals(new boolean[]{},Conversion.longToBinary(0x0000000000000000L, 0, new boolean[]{}, 0, 0));
assertArrayEquals(new boolean[]{},Conversion.longToBinary(0x0000000000000000L, 100, new boolean[]{}, 0, 0));
assertArrayEquals(new boolean[]{},Conversion.longToBinary(0x0000000000000000L, 0, new boolean[]{}, 100, 0));
assertArrayEquals(new boolean[69],Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 0));
assertArrayEquals(new boolean[]{true, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 1));
assertArrayEquals(new boolean[]{true, true, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 2));
assertArrayEquals(new boolean[]{true, true, true, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 3));
assertArrayEquals(new boolean[]{true, true, true, true, false, true, true, true, true, false, true, true,false, false, true, true, true, true, false, true, false, true, false, true,false, false, false, false, true, false, false, true, false, false, false,true, true, true, true, false, false, true, true, false, true, false, true,false, false, false, true, false, true, true, false, false, false, true, false,false, true, false, false, false, false, false, false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 63));
assertArrayEquals(new boolean[]{true, true, true, true, false, true, true, true, true, false, true, true,false, false, true, true, true, true, false, true, false, true, false, true,false, false, false, false, true, false, false, true, false, false, false,true, true, true, true, false, false, true, true, false, true, false, true,false, false, false, true, false, true, true, false, false, false, true, false,false, true, false, false, false, false, false, false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 64));
assertArrayEquals(new boolean[]{false, false, true, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false,false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 1));
assertArrayEquals(new boolean[]{false, false, true, true, true, true, false, true, true, true, true, false,true, true, false, false, true, true, true, true, false, true, false, true,false, true, false, false, false, false, true, false, false, true, false,false, false, true, true, true, true, false, false, true, true, false, true,false, true, false, false, false, true, false, true, true, false, false, false,true, false, false, true, false, false, false, false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 64));
assertArrayEquals(new boolean[]{true, true, true, false, true, true, true, true, false, true, true, false,false, true, true, true, true, false, true, false, true, false, true, false,false, false, false, true, false, false, true, false, false, false, true, true,true, true, false, false, true, true, false, true, false, true, false, false,false, true, false, true, true, false, false, false, true, false, false, true,false, false, false, false, false, false, false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 1, new boolean[69], 0, 63));
assertArrayEquals(new boolean[]{true, true, false, true, true, true, true, false, true, true, false, false,true, true, true, true, false, true, false, true, false, true, false, false,false, false, true, false, false, true, false, false, false, true, true, true,true, false, false, true, true, false, true, false, true, false, false, false,true, false, true, true, false, false, false, true, false, false, true, false,false, false, false, false, false, false, false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 0, 62));
// assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,// true, true, false, true, true, false, false, true, true, true, true, false, true,// false, true, false, true, false, false, false, false, true, false, false, true,// false, false, false, true, true, true, true, false, false, true, true, false, true,// false, true, false, false, false, true, false, true, true, false, false, false, true,// false, false, true, false, false, false// , false, false, false, false}, Conversion.longToBinary(0x1234567890ABCDEFL, 2, new// boolean[69], 3, 63));//rejected by assertion
assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true, true, true, false, true,true, false, false, true, true, true, true, false, true, false, true, false,true, false, false, false, false, true, false, false, true, false, false,false, true, true, true, true, false, false, true, true, false, true, false,true, false, false, false, true, false, true, true, false, false, false, true,false, false, true, false, false, false, false, false, false, false},Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 3, 62));
assertArrayEquals(new boolean[]{}, Conversion.intToBinary(0x00000000, 0, new boolean[]{}, 0, 0));
assertArrayEquals(new boolean[]{}, Conversion.intToBinary(0x00000000, 100, new boolean[]{}, 0, 0));
assertArrayEquals(new boolean[]{}, Conversion.intToBinary(0x00000000, 0, new boolean[]{}, 100, 0));
assertArrayEquals(new boolean[69], Conversion.intToBinary(0x90ABCDEF, 0, new boolean[69], 0, 0));
assertArrayEquals(new boolean[]{true, false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false, false,false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 1));
assertArrayEquals(new boolean[]{true, true, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false, false,false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 2));
assertArrayEquals(new boolean[]{true, true, true, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false, false,false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 3));
assertArrayEquals(new boolean[]{true, true, true, true, false, true, true, true, true, false, true, true,false, false, true, true, true, true, false, true, false, true, false, true,false, false, false, false, true, false, false, false, false, false, false,false, false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 31));
assertArrayEquals(new boolean[]{true, true, true, true, false, true, true, true, true, false, true, true,false, false, true, true, true, true, false, true, false, true, false, true,false, false, false, false, true, false, false, true, false, false, false,false, false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 32));
assertArrayEquals(new boolean[]{false, false, true, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false, false, false,false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 1));
assertArrayEquals(new boolean[]{false, false, true, true, true, true, false, true, true, true, true, false,true, true, false, false, true, true, true, true, false, true, false, true,false, true, false, false, false, false, true, false, false, true, false,false, false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 32));
assertArrayEquals(new boolean[]{true, true, true, false, true, true, true, true, false, true, true, false,false, true, true, true, true, false, true, false, true, false, true, false,false, false, false, true, false, false, true, false, false, false, false,false, false}, Conversion.intToBinary(0x90ABCDEF, 1, new boolean[37], 0, 31));
assertArrayEquals(new boolean[]{true, true, false, true, true, true, true, false, true, true, false, false,true, true, true, true, false, true, false, true, false, true, false, false,false, false, true, false, false, true, false, false, false, false, false,false, false}, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 0, 30));
// assertArrayEquals(new boolean[]{false, false, false, true, true, false, true,// true,// true, true, false, true, true, false, false, true, true, true, true, false, true,// false, true, false, true, false, false, false, false, true, false, false, false,// false, false, false, false}, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37],// 3, 31));//rejected by assertion
assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true, true, true, false, true,true, false, false, true, true, true, true, false, true, false, true, false,true, false, false, false, false, true, false, false, true, false, false,false, false}, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 3, 30));
assertArrayEquals(new boolean[]{}, Conversion.shortToBinary((short) 0x0000, 0, new boolean[]{}, 0, 0));
assertArrayEquals(new boolean[]{},Conversion.shortToBinary((short) 0x0000, 100, new boolean[]{}, 0, 0));
assertArrayEquals(new boolean[]{},Conversion.shortToBinary((short) 0x0000, 0, new boolean[]{}, 100, 0));
assertArrayEquals(new boolean[69], Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[69], 0, 0));
assertArrayEquals(new boolean[]{true, false, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 1));
assertArrayEquals(new boolean[]{true, true, false, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 2));
assertArrayEquals(new boolean[]{true, true, true, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 3));
assertArrayEquals(new boolean[]{true, true, true, true, false, true, true, true, true, false, true, true,false, false, true, false, false, false, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 15));
assertArrayEquals(new boolean[]{true, true, true, true, false, true, true, true, true, false, true, true,false, false, true, true, false, false, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 16));
assertArrayEquals(new boolean[]{false, false, true, false, false, false, false, false, false, false, false,false, false, false, false, false, false, false, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 2, 1));
assertArrayEquals(new boolean[]{false, false, true, true, true, true, false, true, true, true, true, false,true, true, false, false, true, true, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 2, 16));
assertArrayEquals(new boolean[]{true, true, true, false, true, true, true, true, false, true, true, false,false, true, true, false, false, false, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 1, new boolean[21], 0, 15));
assertArrayEquals(new boolean[]{true, true, false, true, true, true, true, false, true, true, false, false,true, true, false, false, false, false, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21], 0, 14));
// assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,// true, true, false, true, true, false, false, true, false, false, false, false,// false}, Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21],// 3, 15));//rejected by
// assertionassertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true, true, true, false, true,true, false, false, true, true, false, false, false, false},Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21], 3, 14));
assertArrayEquals(new boolean[]{}, Conversion.byteToBinary((byte) 0x00, 0, new boolean[]{}, 0, 0));
assertArrayEquals(new boolean[]{}, Conversion.byteToBinary((byte) 0x00, 100, new boolean[]{}, 0, 0));
assertArrayEquals(new boolean[]{}, Conversion.byteToBinary((byte) 0x00, 0, new boolean[]{}, 100, 0));
assertArrayEquals(new boolean[69], Conversion.byteToBinary((byte) 0xEF, 0, new boolean[69], 0, 0));
assertArrayEquals(new boolean[]{true, false, false, false, false, false, false, false, false, false, false, false,false}, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 1));
assertArrayEquals(new boolean[]{true, false, false, false, false, false, false, false, false, false, false, false,false}, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 2));
assertArrayEquals(new boolean[]{true, false, true, false, false, false, false, false, false, false, false, false,false}, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 3));
assertArrayEquals(new boolean[]{true, false, true, false, true, false, false, false, false, false, false, false,false}, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 7));
assertArrayEquals(new boolean[]{true, false, true, false, true, false, false, true, false, false, false, false,false}, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 8));
assertArrayEquals(new boolean[]{false, false, true, false, false, false, false, false, false, false, false, false,false}, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 2, 1));
assertArrayEquals(new boolean[]{false, false, true, false, true, false, true, false, false, true, false, false,false}, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 2, 8));
assertArrayEquals(new boolean[]{false, true, false, true, false, false, true, false, false, false, false, false,false}, Conversion.byteToBinary((byte) 0x95, 1, new boolean[13], 0, 7));
assertArrayEquals(new boolean[]{true, false, true, false, false, true, false, false, false, false, false, false,false}, Conversion.byteToBinary((byte) 0x95, 2, new boolean[13], 0, 6));
// assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,// false, false, false, false, false}, Conversion.byteToBinary((byte) 0x95, 2, new// boolean[13], 3, 7));//rejected by assertion
assertArrayEquals(new boolean[]{false, false, false, true, false, true, false, false, true, false, false, false,false}, Conversion.byteToBinary((byte) 0x95, 2, new boolean[13], 3, 6));
assertArrayEquals(new byte[]{(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,(byte) 0xff, (byte) 0xff}, Conversion.uuidToByteArray(new UUID(0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL), new byte[16], 0, 16));
assertArrayEquals(new byte[]{(byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee,(byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55,(byte) 0x66, (byte) 0x77}, Conversion.uuidToByteArray(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 0, 16));
assertArrayEquals(new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x88, (byte) 0x99, (byte) 0xaa,(byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x00,(byte) 0x00, (byte) 0x00}, Conversion.uuidToByteArray(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 4, 8));
assertArrayEquals(new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc,(byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33,(byte) 0x00, (byte) 0x00}, Conversion.uuidToByteArray(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 2, 12));
assertEquals(new UUID(0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL),Conversion.byteArrayToUuid(new byte[]{(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff}, 0));
assertEquals(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L),Conversion.byteArrayToUuid(new byte[]{(byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd,(byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33,(byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77}, 0));
assertEquals(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L),Conversion.byteArrayToUuid(new byte[]{0, 0, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd,(byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33,(byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77}, 2));
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertTrue(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertTrue(SystemUtils.IS_JAVA_1_9);
assertTrue(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertTrue(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertTrue(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertTrue(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertTrue(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertTrue(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertTrue(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertTrue(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertTrue(SystemUtils.IS_JAVA_17);
assertFalse(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_JAVA_1_1);
assertFalse(SystemUtils.IS_JAVA_1_2);
assertFalse(SystemUtils.IS_JAVA_1_3);
assertFalse(SystemUtils.IS_JAVA_1_4);
assertFalse(SystemUtils.IS_JAVA_1_5);
assertFalse(SystemUtils.IS_JAVA_1_6);
assertFalse(SystemUtils.IS_JAVA_1_7);
assertFalse(SystemUtils.IS_JAVA_1_8);
assertFalse(SystemUtils.IS_JAVA_1_9);
assertFalse(SystemUtils.IS_JAVA_9);
assertFalse(SystemUtils.IS_JAVA_10);
assertFalse(SystemUtils.IS_JAVA_11);
assertFalse(SystemUtils.IS_JAVA_12);
assertFalse(SystemUtils.IS_JAVA_13);
assertFalse(SystemUtils.IS_JAVA_14);
assertFalse(SystemUtils.IS_JAVA_15);
assertFalse(SystemUtils.IS_JAVA_16);
assertFalse(SystemUtils.IS_JAVA_17);
assertTrue(SystemUtils.IS_JAVA_18);
assertFalse(SystemUtils.IS_OS_WINDOWS);
assertFalse(SystemUtils.IS_OS_UNIX);
assertFalse(SystemUtils.IS_OS_SOLARIS);
assertFalse(SystemUtils.IS_OS_LINUX);
assertFalse(SystemUtils.IS_OS_MAC_OSX);
assertFalse(SystemUtils.IS_OS_UNIX);
assertTrue(SystemUtils.IS_OS_WINDOWS);
assertTrue(SystemUtils.IS_OS_SOLARIS);
assertTrue(SystemUtils.IS_OS_UNIX);
assertFalse(SystemUtils.IS_OS_WINDOWS);
assertTrue(SystemUtils.IS_OS_LINUX);
assertTrue(SystemUtils.IS_OS_UNIX);
assertFalse(SystemUtils.IS_OS_WINDOWS);
assertTrue(SystemUtils.IS_OS_MAC_OSX);
assertTrue(SystemUtils.IS_OS_UNIX);
assertFalse(SystemUtils.IS_OS_WINDOWS);
assertTrue(SystemUtils.IS_OS_OS2);
assertFalse(SystemUtils.IS_OS_UNIX);
assertFalse(SystemUtils.IS_OS_WINDOWS);
assertTrue(SystemUtils.IS_OS_SUN_OS);
assertTrue(SystemUtils.IS_OS_UNIX);
assertFalse(SystemUtils.IS_OS_WINDOWS);
assertTrue(SystemUtils.IS_OS_FREE_BSD);
assertTrue(SystemUtils.IS_OS_UNIX);
assertFalse(SystemUtils.IS_OS_WINDOWS);
assertFalse(SystemUtils.IS_OS_ZOS);
assertFalse(SystemUtils.IS_OS_WINDOWS);
assertTrue(SystemUtils.IS_OS_ZOS);
assertEquals(System.getProperty("user.name"), SystemUtils.USER_NAME);
assertNotNull(new SystemUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(SystemUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(SystemUtils.class.getModifiers()));
assertNull(expected);
assertEquals("DEFAULT", value);
assertEquals(expected, value);
assertEquals(expected, hostName);
assertNotNull(dir);
assertTrue(dir.exists());
assertNotNull(dir);
assertTrue(dir.exists());
assertNotNull(dir);
assertTrue(dir.exists());
assertNotNull(dir);
assertTrue(dir.exists());
assertEquals(System.getProperty("user.name"), SystemUtils.getUserName());
assertEquals(System.getProperty("user.name", "foo"), SystemUtils.getUserName("foo"));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_3));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_4));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_5));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_6));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_7));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_9));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_10));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_11));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_12));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_13));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_3));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_4));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_5));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_6));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_7));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_9));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_10));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_11));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_12));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_13));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_3));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_4));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_5));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_6));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_7));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_9));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_10));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_11));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_12));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_13));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_3));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_4));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_5));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_6));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_7));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_9));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_10));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_11));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_12));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_13));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_3));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_4));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_5));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_6));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_7));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_9));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_10));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_11));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_12));
assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_13));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_3));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_4));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_5));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_6));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_7));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_9));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_10));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_11));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_12));
assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_13));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_1));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_2));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_3));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_4));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_5));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_6));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_7));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_1_8));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_9));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_10));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_11));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_12));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_13));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_1));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_2));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_3));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_4));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_5));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_6));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_7));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_8));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_9));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_10));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_11));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_12));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_13));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_1));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_2));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_3));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_4));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_5));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_6));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_7));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_8));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_9));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_10));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_11));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_12));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_13));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_1));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_2));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_3));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_4));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_5));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_6));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_7));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_8));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_9));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_10));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_11));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_12));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_13));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_1));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_2));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_3));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_4));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_5));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_6));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_7));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_8));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_9));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_10));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_11));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_12));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_13));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_1));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_2));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_3));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_4));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_5));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_6));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_7));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_1_8));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_9));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_10));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_11));
assertFalse(SystemUtils.isJavaVersionAtMost(JAVA_12));
assertTrue(SystemUtils.isJavaVersionAtMost(JAVA_13));
assertNotNull(expectedStringValueWithDefault);
assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS);
assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless());
assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless());
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7"));
assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.8"));
assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "9"));
assertFalse(SystemUtils.isOSNameMatch(osName, "Windows"));
assertFalse(SystemUtils.isOSNameMatch(osName, "Windows"));
assertTrue(SystemUtils.isOSNameMatch(osName, "Windows"));
assertTrue(SystemUtils.isOSNameMatch(osName, "Windows"));
assertFalse(SystemUtils.isOSNameMatch(osName, "Windows"));
assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1"));
assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1"));
assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1"));
assertTrue(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1"));
assertTrue(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1"));
assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1"));
assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.1"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.1"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.1"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.1.1"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.10"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.10.1"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.1"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.1.1"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.10"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.10.1"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.1"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.1.1"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.10"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.10.1"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.1"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.1.1"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.10"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.10.1"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.1"));
assertFalse(SystemUtils.isOSVersionMatch(osVersion, "10.1.1"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.10"));
assertTrue(SystemUtils.isOSVersionMatch(osVersion, "10.10.1"));
assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class)));
assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class)));
assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class)));
assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class)));
assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class)));
assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field4.getAnnotation(NestAnnotation.class)));
assertFalse(AnnotationUtils.equals(field4.getAnnotation(NestAnnotation.class), field1.getAnnotation(TestAnnotation.class)));
assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null));
assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class)));
assertTrue(AnnotationUtils.equals(null, null));
assertTrue(AnnotationUtils.isValidAnnotationMemberType(type));
assertTrue(AnnotationUtils.isValidAnnotationMemberType(Array.newInstance(type, 0).getClass()));
assertFalse(AnnotationUtils.isValidAnnotationMemberType(type));
assertFalse(AnnotationUtils.isValidAnnotationMemberType(Array.newInstance(type, 0).getClass()));
assertTimeoutPreemptively(Duration.ofSeconds(666L), () -> {final Test real = getClass().getDeclaredMethod("testGeneratedAnnotationEquivalentToRealAnnotation").getAnnotation(Test.class);
assertEquals(real, generated);
assertNotEquals(generated, real);
assertTrue(AnnotationUtils.equals(generated, real));
assertTrue(AnnotationUtils.equals(real, generated));
assertNotEquals(generated, generated2);
assertNotEquals(generated2, generated);
assertTrue(AnnotationUtils.equals(generated, generated2));
assertTrue(AnnotationUtils.equals(generated2, generated));
assertTimeoutPreemptively(Duration.ofSeconds(666L), () -> {final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class);
assertEquals(test.hashCode(), AnnotationUtils.hashCode(test));
assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1));
assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3));
assertTimeoutPreemptively(Duration.ofSeconds(666L), () -> {final TestMethodAnnotation testAnnotation =getClass().getDeclaredMethod("testToString").getAnnotation(TestMethodAnnotation.class);
assertTrue(annotationString.startsWith("@org.apache.commons.lang3.AnnotationUtilsTest$TestMethodAnnotation("));
assertTrue(annotationString.endsWith(")"));
assertTrue(annotationString.contains("expected=class org.apache.commons.lang3.AnnotationUtilsTest$TestMethodAnnotation$None"));
assertTrue(annotationString.contains("timeout=666000"));
assertTrue(annotationString.contains(", "));
assertTrue(StringUtils.startsWith(null, null), "startsWith(null, null)");
assertFalse(StringUtils.startsWith(FOOBAR, null), "startsWith(FOOBAR, null)");
assertFalse(StringUtils.startsWith(null, FOO), "startsWith(null, FOO)");
assertTrue(StringUtils.startsWith(FOOBAR, ""), "startsWith(FOOBAR, \"\")");
assertTrue(StringUtils.startsWith(foobar, foo), "startsWith(foobar, foo)");
assertTrue(StringUtils.startsWith(FOOBAR, FOO), "startsWith(FOOBAR, FOO)");
assertFalse(StringUtils.startsWith(foobar, FOO), "startsWith(foobar, FOO)");
assertFalse(StringUtils.startsWith(FOOBAR, foo), "startsWith(FOOBAR, foo)");
assertFalse(StringUtils.startsWith(foo, foobar), "startsWith(foo, foobar)");
assertFalse(StringUtils.startsWith(bar, foobar), "startsWith(foo, foobar)");
assertFalse(StringUtils.startsWith(foobar, bar), "startsWith(foobar, bar)");
assertFalse(StringUtils.startsWith(FOOBAR, BAR), "startsWith(FOOBAR, BAR)");
assertFalse(StringUtils.startsWith(foobar, BAR), "startsWith(foobar, BAR)");
assertFalse(StringUtils.startsWith(FOOBAR, bar), "startsWith(FOOBAR, bar)");
assertTrue(StringUtils.startsWithIgnoreCase(null, null), "startsWithIgnoreCase(null, null)");
assertFalse(StringUtils.startsWithIgnoreCase(FOOBAR, null), "startsWithIgnoreCase(FOOBAR, null)");
assertFalse(StringUtils.startsWithIgnoreCase(null, FOO), "startsWithIgnoreCase(null, FOO)");
assertTrue(StringUtils.startsWithIgnoreCase(FOOBAR, ""), "startsWithIgnoreCase(FOOBAR, \"\")");
assertTrue(StringUtils.startsWithIgnoreCase(foobar, foo), "startsWithIgnoreCase(foobar, foo)");
assertTrue(StringUtils.startsWithIgnoreCase(FOOBAR, FOO), "startsWithIgnoreCase(FOOBAR, FOO)");
assertTrue(StringUtils.startsWithIgnoreCase(foobar, FOO), "startsWithIgnoreCase(foobar, FOO)");
assertTrue(StringUtils.startsWithIgnoreCase(FOOBAR, foo), "startsWithIgnoreCase(FOOBAR, foo)");
assertFalse(StringUtils.startsWithIgnoreCase(foo, foobar), "startsWithIgnoreCase(foo, foobar)");
assertFalse(StringUtils.startsWithIgnoreCase(bar, foobar), "startsWithIgnoreCase(foo, foobar)");
assertFalse(StringUtils.startsWithIgnoreCase(foobar, bar), "startsWithIgnoreCase(foobar, bar)");
assertFalse(StringUtils.startsWithIgnoreCase(FOOBAR, BAR), "startsWithIgnoreCase(FOOBAR, BAR)");
assertFalse(StringUtils.startsWithIgnoreCase(foobar, BAR), "startsWithIgnoreCase(foobar, BAR)");
assertFalse(StringUtils.startsWithIgnoreCase(FOOBAR, bar), "startsWithIgnoreCase(FOOBAR, bar)");
assertFalse(StringUtils.startsWithAny(null, (String[]) null));
assertFalse(StringUtils.startsWithAny(null, "abc"));
assertFalse(StringUtils.startsWithAny("abcxyz", (String[]) null));
assertFalse(StringUtils.startsWithAny("abcxyz"));
assertTrue(StringUtils.startsWithAny("abcxyz", "abc"));
assertTrue(StringUtils.startsWithAny("abcxyz", null, "xyz", "abc"));
assertFalse(StringUtils.startsWithAny("abcxyz", null, "xyz", "abcd"));
assertTrue(StringUtils.startsWithAny("abcxyz", ""));
assertFalse(StringUtils.startsWithAny("abcxyz", null, "xyz", "ABCX"));
assertFalse(StringUtils.startsWithAny("ABCXYZ", null, "xyz", "abc"));
assertTrue(StringUtils.startsWithAny("abcxyz", new StringBuilder("xyz"), new StringBuffer("abc")), "StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))");
assertTrue(StringUtils.startsWithAny(new StringBuffer("abcxyz"), new StringBuilder("xyz"), new StringBuffer("abc")), "StringUtils.startsWithAny(StringBuffer(abcxyz), StringBuilder(xyz), StringBuffer(abc))");
assertTrue(StringUtils.endsWith(null, null), "endsWith(null, null)");
assertFalse(StringUtils.endsWith(FOOBAR, null), "endsWith(FOOBAR, null)");
assertFalse(StringUtils.endsWith(null, FOO), "endsWith(null, FOO)");
assertTrue(StringUtils.endsWith(FOOBAR, ""), "endsWith(FOOBAR, \"\")");
assertFalse(StringUtils.endsWith(foobar, foo), "endsWith(foobar, foo)");
assertFalse(StringUtils.endsWith(FOOBAR, FOO), "endsWith(FOOBAR, FOO)");
assertFalse(StringUtils.endsWith(foobar, FOO), "endsWith(foobar, FOO)");
assertFalse(StringUtils.endsWith(FOOBAR, foo), "endsWith(FOOBAR, foo)");
assertFalse(StringUtils.endsWith(foo, foobar), "endsWith(foo, foobar)");
assertFalse(StringUtils.endsWith(bar, foobar), "endsWith(foo, foobar)");
assertTrue(StringUtils.endsWith(foobar, bar), "endsWith(foobar, bar)");
assertTrue(StringUtils.endsWith(FOOBAR, BAR), "endsWith(FOOBAR, BAR)");
assertFalse(StringUtils.endsWith(foobar, BAR), "endsWith(foobar, BAR)");
assertFalse(StringUtils.endsWith(FOOBAR, bar), "endsWith(FOOBAR, bar)");
assertTrue(StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B4"),"endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B4)");
assertFalse(StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B3\u0394"),"endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B3\u0394)");
assertTrue(StringUtils.endsWithIgnoreCase(null, null), "endsWithIgnoreCase(null, null)");
assertFalse(StringUtils.endsWithIgnoreCase(FOOBAR, null), "endsWithIgnoreCase(FOOBAR, null)");
assertFalse(StringUtils.endsWithIgnoreCase(null, FOO), "endsWithIgnoreCase(null, FOO)");
assertTrue(StringUtils.endsWithIgnoreCase(FOOBAR, ""), "endsWithIgnoreCase(FOOBAR, \"\")");
assertFalse(StringUtils.endsWithIgnoreCase(foobar, foo), "endsWithIgnoreCase(foobar, foo)");
assertFalse(StringUtils.endsWithIgnoreCase(FOOBAR, FOO), "endsWithIgnoreCase(FOOBAR, FOO)");
assertFalse(StringUtils.endsWithIgnoreCase(foobar, FOO), "endsWithIgnoreCase(foobar, FOO)");
assertFalse(StringUtils.endsWithIgnoreCase(FOOBAR, foo), "endsWithIgnoreCase(FOOBAR, foo)");
assertFalse(StringUtils.endsWithIgnoreCase(foo, foobar), "endsWithIgnoreCase(foo, foobar)");
assertFalse(StringUtils.endsWithIgnoreCase(bar, foobar), "endsWithIgnoreCase(foo, foobar)");
assertTrue(StringUtils.endsWithIgnoreCase(foobar, bar), "endsWithIgnoreCase(foobar, bar)");
assertTrue(StringUtils.endsWithIgnoreCase(FOOBAR, BAR), "endsWithIgnoreCase(FOOBAR, BAR)");
assertTrue(StringUtils.endsWithIgnoreCase(foobar, BAR), "endsWithIgnoreCase(foobar, BAR)");
assertTrue(StringUtils.endsWithIgnoreCase(FOOBAR, bar), "endsWithIgnoreCase(FOOBAR, bar)");
assertTrue(StringUtils.endsWithIgnoreCase("abcdef", "def"));
assertTrue(StringUtils.endsWithIgnoreCase("ABCDEF", "def"));
assertFalse(StringUtils.endsWithIgnoreCase("ABCDEF", "cde"));
assertTrue(StringUtils.endsWithIgnoreCase("\u03B1\u03B2\u03B3\u03B4", "\u0394"),"endsWith(\u03B1\u03B2\u03B3\u03B4, \u0394)");
assertFalse(StringUtils.endsWithIgnoreCase("\u03B1\u03B2\u03B3\u03B4", "\u0393"),"endsWith(\u03B1\u03B2\u03B3\u03B4, \u0393)");
assertFalse(StringUtils.endsWithAny(null, (String) null), "StringUtils.endsWithAny(null, null)");
assertFalse(StringUtils.endsWithAny(null, "abc"), "StringUtils.endsWithAny(null, new String[] {abc})");
assertFalse(StringUtils.endsWithAny("abcxyz", (String) null), "StringUtils.endsWithAny(abcxyz, null)");
assertTrue(StringUtils.endsWithAny("abcxyz", ""), "StringUtils.endsWithAny(abcxyz, new String[] {\"\"})");
assertTrue(StringUtils.endsWithAny("abcxyz", "xyz"), "StringUtils.endsWithAny(abcxyz, new String[] {xyz})");
assertTrue(StringUtils.endsWithAny("abcxyz", null, "xyz", "abc"), "StringUtils.endsWithAny(abcxyz, new String[] {null, xyz, abc})");
assertFalse(StringUtils.endsWithAny("defg", null, "xyz", "abc"), "StringUtils.endsWithAny(defg, new String[] {null, xyz, abc})");
assertTrue(StringUtils.endsWithAny("abcXYZ", "def", "XYZ"));
assertFalse(StringUtils.endsWithAny("abcXYZ", "def", "xyz"));
assertTrue(StringUtils.endsWithAny("abcXYZ", "def", "YZ"));
* assertFalse(StringUtils.endsWithAny("abcXYZ", null)); // replace with specific types to avoid warning
assertFalse(StringUtils.endsWithAny("abcXYZ", (CharSequence) null));
assertFalse(StringUtils.endsWithAny("abcXYZ", (CharSequence[]) null));
assertTrue(StringUtils.endsWithAny("abcXYZ", ""));
assertTrue(StringUtils.endsWithAny("abcxyz", new StringBuilder("abc"), new StringBuffer("xyz")), "StringUtils.endsWithAny(abcxyz, StringBuilder(abc), StringBuffer(xyz))");
assertTrue(StringUtils.endsWithAny(new StringBuffer("abcxyz"), new StringBuilder("abc"), new StringBuffer("xyz")), "StringUtils.endsWithAny(StringBuffer(abcxyz), StringBuilder(abc), StringBuffer(xyz))");
assertEquals(6, output.size());
assertEquals(i+1, output.get(i).intValue());
final NumberFormatException thrown = assertThrows(NumberFormatException.class, testMethod);
assertEquals("For input string: \"4 \"", thrown.getMessage());
assertEquals(6, output.size());
assertEquals(i+1, output.get(i).intValue());
assertNotNull(array);
assertEquals(3, array.length);
assertEquals("2", array[0]);
assertEquals("3", array[1]);
assertEquals("1", array[2]);
final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, testMethod);
assertThat(thrown.getMessage(), is(nullValue()));
final OutOfMemoryError oomeThrown = assertThrows(OutOfMemoryError.class, oomeTestMethod);
assertThat(oomeThrown.getMessage(), is(nullValue()));
final UndeclaredThrowableException seThrown = assertThrows(UndeclaredThrowableException.class, seTestMethod);
assertAll(() -> assertThat(seThrown.getMessage(), is(nullValue())),() -> assertThat(seThrown.getCause(), is(equalTo(se))));
assertEvenNumbers(output);
private void assertEvenNumbers(final List<Integer> output) {assertEquals(3, output.size());
assertEquals((i+1)*2, output.get(i).intValue());
assertEvenNumbers(output);
final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, testMethod);
assertThat(thrown.getMessage(), is(equalTo("Invalid argument: " + 5)));
final OutOfMemoryError thrown = assertThrows(OutOfMemoryError.class, testMethod);
assertThat(thrown.getMessage(), is(nullValue()));
final UndeclaredThrowableException thrown = assertThrows(UndeclaredThrowableException.class, testMethod);
assertAll(() -> assertThat(thrown.getMessage(), is(nullValue())),() -> assertThat(thrown.getCause(), is(equalTo(se))));
private void assertGetClassReturnsClass(final Class<?> c) throws Exception {assertEquals(c, ClassUtils.getClass(c.getName()));
private void assertGetClassThrowsClassNotFound(final String className) {assertGetClassThrowsException(className, ClassNotFoundException.class);
private void assertGetClassThrowsException(final String className, final Class<? extends Exception> exceptionType) {assertThrows(exceptionType, () -> ClassUtils.getClass(className),"ClassUtils.getClass() should fail with an exception of type " + exceptionType.getName() + " when given class name \"" + className + "\".");
private void assertGetClassThrowsNullPointerException(final String className) {assertGetClassThrowsException(className, NullPointerException.class);
assertEquals(0, result.size());
assertEquals(3, result.size());
assertEquals("java.lang.String", result.get(0));
assertNull(result.get(1));
assertEquals(OBJECT_CANONICAL_NAME, result.get(2));
assertThrows(ClassCastException.class, () -> ClassUtils.convertClassesToClassNames(list), "Should not have been able to convert list");
assertNull(ClassUtils.convertClassesToClassNames(null));
assertEquals(0, result.size());
assertEquals(3, result.size());
assertEquals(String.class, result.get(0));
assertNull(result.get(1));
assertEquals(Object.class, result.get(2));
assertThrows(ClassCastException.class, () -> ClassUtils.convertClassNamesToClasses(list), "Should not have been able to convert list");
assertNull(ClassUtils.convertClassNamesToClasses(null));
assertEquals("", ClassUtils.getAbbreviatedName((Class<?>) null, 1));
assertEquals("j.l.String", ClassUtils.getAbbreviatedName(String.class, 1));
assertEquals("j.l.String", ClassUtils.getAbbreviatedName(String.class, 5));
assertEquals("o.a.c.l.ClassUtils", ClassUtils.getAbbreviatedName(ClassUtils.class, 18));
assertEquals("j.lang.String", ClassUtils.getAbbreviatedName(String.class, 13));
assertEquals("j.lang.String", ClassUtils.getAbbreviatedName(String.class, 15));
assertEquals("java.lang.String", ClassUtils.getAbbreviatedName(String.class, 20));
assertThrows(IllegalArgumentException.class, () -> ClassUtils.getAbbreviatedName(String.class, -10));
assertThrows(IllegalArgumentException.class, () -> ClassUtils.getAbbreviatedName(String.class, 0));
assertEquals("", ClassUtils.getAbbreviatedName((String) null, 1));
assertEquals("", ClassUtils.getAbbreviatedName("", 1));
assertEquals("WithoutPackage", ClassUtils.getAbbreviatedName("WithoutPackage", 1));
assertEquals("j.l.String", ClassUtils.getAbbreviatedName("java.lang.String", 1));
assertEquals("o.a.c.l.ClassUtils", ClassUtils.getAbbreviatedName("org.apache.commons.lang3.ClassUtils", 18));
assertEquals("org.apache.commons.lang3.ClassUtils",ClassUtils.getAbbreviatedName("org.apache.commons.lang3.ClassUtils", "org.apache.commons.lang3.ClassUtils".length()));
assertEquals("o.a.c.l.ClassUtils", ClassUtils.getAbbreviatedName("o.a.c.l.ClassUtils", 18));
assertEquals("o..c.l.ClassUtils", ClassUtils.getAbbreviatedName("o..c.l.ClassUtils", 18));
assertEquals(".", ClassUtils.getAbbreviatedName(".", 18));
assertEquals(".", ClassUtils.getAbbreviatedName(".", 1));
assertEquals("..", ClassUtils.getAbbreviatedName("..", 1));
assertEquals("...", ClassUtils.getAbbreviatedName("...", 2));
assertEquals("...", ClassUtils.getAbbreviatedName("...", 3));
assertEquals("java.lang.String", ClassUtils.getAbbreviatedName("java.lang.String", Integer.MAX_VALUE));
assertEquals("j.lang.String", ClassUtils.getAbbreviatedName("java.lang.String", "j.lang.String".length()));
assertEquals("j.l.String", ClassUtils.getAbbreviatedName("java.lang.String", "j.lang.String".length() - 1));
assertEquals("j.l.String", ClassUtils.getAbbreviatedName("java.lang.String", "j.l.String".length()));
assertEquals("j.l.String", ClassUtils.getAbbreviatedName("java.lang.String", "j.l.String".length() - 1));
Assertions.assertSame(className, ClassUtils.getAbbreviatedName(className, className.length() + 1));
Assertions.assertSame(className, ClassUtils.getAbbreviatedName(className, className.length()));
assertEquals(6, list.size());
assertEquals(IB.class, list.get(0));
assertEquals(IC.class, list.get(1));
assertEquals(ID.class, list.get(2));
assertEquals(IE.class, list.get(3));
assertEquals(IF.class, list.get(4));
assertEquals(IA.class, list.get(5));
assertNull(ClassUtils.getAllInterfaces(null));
assertEquals(2, list.size());
assertEquals(CX.class, list.get(0));
assertEquals(Object.class, list.get(1));
assertNull(ClassUtils.getAllSuperclasses(null));
assertEquals("org.apache.commons.lang3.ClassUtils", ClassUtils.getCanonicalName(ClassUtils.class));
assertEquals("java.util.Map.Entry", ClassUtils.getCanonicalName(Map.Entry.class));
assertEquals("", ClassUtils.getCanonicalName((Class<?>) null));
assertEquals("java.lang.String[]", ClassUtils.getCanonicalName(String[].class));
assertEquals("java.util.Map.Entry[]", ClassUtils.getCanonicalName(Map.Entry[].class));
assertEquals("boolean", ClassUtils.getCanonicalName(boolean.class));
assertEquals("byte", ClassUtils.getCanonicalName(byte.class));
assertEquals("char", ClassUtils.getCanonicalName(char.class));
assertEquals("short", ClassUtils.getCanonicalName(short.class));
assertEquals("int", ClassUtils.getCanonicalName(int.class));
assertEquals("long", ClassUtils.getCanonicalName(long.class));
assertEquals("float", ClassUtils.getCanonicalName(float.class));
assertEquals("double", ClassUtils.getCanonicalName(double.class));
assertEquals("boolean[]", ClassUtils.getCanonicalName(boolean[].class));
assertEquals("byte[]", ClassUtils.getCanonicalName(byte[].class));
assertEquals("char[]", ClassUtils.getCanonicalName(char[].class));
assertEquals("short[]", ClassUtils.getCanonicalName(short[].class));
assertEquals("int[]", ClassUtils.getCanonicalName(int[].class));
assertEquals("long[]", ClassUtils.getCanonicalName(long[].class));
assertEquals("float[]", ClassUtils.getCanonicalName(float[].class));
assertEquals("double[]", ClassUtils.getCanonicalName(double[].class));
assertEquals("java.lang.String[][]", ClassUtils.getCanonicalName(String[][].class));
assertEquals("java.lang.String[][][]", ClassUtils.getCanonicalName(String[][][].class));
assertEquals("java.lang.String[][][][]", ClassUtils.getCanonicalName(String[][][][].class));
assertEquals(StringUtils.EMPTY, ClassUtils.getCanonicalName(new Object() {// empty}.getClass()));
assertEquals(StringUtils.EMPTY, ClassUtils.getCanonicalName(Named.class));
assertEquals("org.apache.commons.lang3.ClassUtilsTest.Inner", ClassUtils.getCanonicalName(Inner.class));
assertEquals("org.apache.commons.lang3.ClassUtils", ClassUtils.getCanonicalName(ClassUtils.class, "X"));
assertEquals("java.util.Map.Entry", ClassUtils.getCanonicalName(Map.Entry.class, "X"));
assertEquals("X", ClassUtils.getCanonicalName((Class<?>) null, "X"));
assertEquals("java.lang.String[]", ClassUtils.getCanonicalName(String[].class, "X"));
assertEquals("java.util.Map.Entry[]", ClassUtils.getCanonicalName(Map.Entry[].class, "X"));
assertEquals("boolean", ClassUtils.getCanonicalName(boolean.class, "X"));
assertEquals("byte", ClassUtils.getCanonicalName(byte.class, "X"));
assertEquals("char", ClassUtils.getCanonicalName(char.class, "X"));
assertEquals("short", ClassUtils.getCanonicalName(short.class, "X"));
assertEquals("int", ClassUtils.getCanonicalName(int.class, "X"));
assertEquals("long", ClassUtils.getCanonicalName(long.class, "X"));
assertEquals("float", ClassUtils.getCanonicalName(float.class, "X"));
assertEquals("double", ClassUtils.getCanonicalName(double.class, "X"));
assertEquals("boolean[]", ClassUtils.getCanonicalName(boolean[].class, "X"));
assertEquals("byte[]", ClassUtils.getCanonicalName(byte[].class, "X"));
assertEquals("char[]", ClassUtils.getCanonicalName(char[].class, "X"));
assertEquals("short[]", ClassUtils.getCanonicalName(short[].class, "X"));
assertEquals("int[]", ClassUtils.getCanonicalName(int[].class, "X"));
assertEquals("long[]", ClassUtils.getCanonicalName(long[].class, "X"));
assertEquals("float[]", ClassUtils.getCanonicalName(float[].class, "X"));
assertEquals("double[]", ClassUtils.getCanonicalName(double[].class, "X"));
assertEquals("java.lang.String[][]", ClassUtils.getCanonicalName(String[][].class, "X"));
assertEquals("java.lang.String[][][]", ClassUtils.getCanonicalName(String[][][].class, "X"));
assertEquals("java.lang.String[][][][]", ClassUtils.getCanonicalName(String[][][][].class, "X"));
assertEquals("X", ClassUtils.getCanonicalName(new Object() {// empty}.getClass(), "X"));
assertEquals("X", ClassUtils.getCanonicalName(Named.class, "X"));
assertEquals("org.apache.commons.lang3.ClassUtilsTest.Inner", ClassUtils.getCanonicalName(Inner.class, "X"));
assertEquals("X", ClassUtils.getCanonicalName((Object) null, "X"));
assertEquals(OBJECT_CANONICAL_NAME, ClassUtils.getCanonicalName(new Object()));
// assertEquals("org.apache.commons.lang3.ClassUtils", ClassUtils.getName(ClassLoader.class, "@"));
assertEquals("org.apache.commons.lang3.ClassUtils", ClassUtils.getName(ClassUtils.class));
assertEquals("java.util.Map$Entry", ClassUtils.getName(Map.Entry.class));
assertEquals("", ClassUtils.getName((Class<?>) null));
assertEquals("[Ljava.lang.String;", ClassUtils.getName(String[].class));
assertEquals("[Ljava.util.Map$Entry;", ClassUtils.getName(Map.Entry[].class));
assertEquals("boolean", ClassUtils.getName(boolean.class));
assertEquals("byte", ClassUtils.getName(byte.class));
assertEquals("char", ClassUtils.getName(char.class));
assertEquals("short", ClassUtils.getName(short.class));
assertEquals("int", ClassUtils.getName(int.class));
assertEquals("long", ClassUtils.getName(long.class));
assertEquals("float", ClassUtils.getName(float.class));
assertEquals("double", ClassUtils.getName(double.class));
assertEquals("[Z", ClassUtils.getName(boolean[].class));
assertEquals("[B", ClassUtils.getName(byte[].class));
assertEquals("[C", ClassUtils.getName(char[].class));
assertEquals("[S", ClassUtils.getName(short[].class));
assertEquals("[I", ClassUtils.getName(int[].class));
assertEquals("[J", ClassUtils.getName(long[].class));
assertEquals("[F", ClassUtils.getName(float[].class));
assertEquals("[D", ClassUtils.getName(double[].class));
assertEquals("[[Ljava.lang.String;", ClassUtils.getName(String[][].class));
assertEquals("[[[Ljava.lang.String;", ClassUtils.getName(String[][][].class));
assertEquals("[[[[Ljava.lang.String;", ClassUtils.getName(String[][][][].class));
assertEquals("org.apache.commons.lang3.ClassUtilsTest$3", ClassUtils.getName(new Object() {// empty}.getClass()));
assertEquals("org.apache.commons.lang3.ClassUtilsTest$3Named", ClassUtils.getName(Named.class));
assertEquals("org.apache.commons.lang3.ClassUtilsTest$Inner", ClassUtils.getName(Inner.class));
assertEquals(OBJECT_CANONICAL_NAME, ClassUtils.getName(new Object()));
assertEquals("org.apache.commons.lang3.ClassUtils", ClassUtils.getName(new ClassUtils(), "<null>"));
assertEquals("org.apache.commons.lang3.ClassUtilsTest$Inner", ClassUtils.getName(new Inner(), "<null>"));
assertEquals("java.lang.String", ClassUtils.getName("hello", "<null>"));
assertEquals("<null>", ClassUtils.getName(null, "<null>"));
assertEquals("org.apache.commons.lang3.ClassUtilsTest$4", ClassUtils.getName(new Object() {// empty}, "<null>"));
assertEquals("org.apache.commons.lang3.ClassUtilsTest$4Named", ClassUtils.getName(new Named(), "<null>"));
assertEquals("org.apache.commons.lang3.ClassUtilsTest$Inner", ClassUtils.getName(new Inner(), "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(ClassUtils.class));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(ClassUtils[].class));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(ClassUtils[][].class));
assertEquals("", ClassUtils.getPackageCanonicalName(int[].class));
assertEquals("", ClassUtils.getPackageCanonicalName(int[][].class));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object() {// empty}.getClass()));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(Named.class));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(Inner.class));
assertEquals(StringUtils.EMPTY, ClassUtils.getPackageCanonicalName((Class<?>) null));
assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0], "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], "<null>"));
assertEquals("", ClassUtils.getPackageCanonicalName(new int[0], "<null>"));
assertEquals("", ClassUtils.getPackageCanonicalName(new int[0][0], "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object() {// empty}, "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Named(), "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Inner(), "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtils"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtils[]"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtils[][]"));
assertEquals("", ClassUtils.getPackageCanonicalName("[I"));
assertEquals("", ClassUtils.getPackageCanonicalName("[[I"));
assertEquals("", ClassUtils.getPackageCanonicalName("int[]"));
assertEquals("", ClassUtils.getPackageCanonicalName("int[][]"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner"));
assertEquals("java.lang", ClassUtils.getPackageName(String.class));
assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));
assertEquals("", ClassUtils.getPackageName((Class<?>) null));
assertEquals("java.lang", ClassUtils.getPackageName(String[].class));
assertEquals("", ClassUtils.getPackageName(boolean[].class));
assertEquals("", ClassUtils.getPackageName(byte[].class));
assertEquals("", ClassUtils.getPackageName(char[].class));
assertEquals("", ClassUtils.getPackageName(short[].class));
assertEquals("", ClassUtils.getPackageName(int[].class));
assertEquals("", ClassUtils.getPackageName(long[].class));
assertEquals("", ClassUtils.getPackageName(float[].class));
assertEquals("", ClassUtils.getPackageName(double[].class));
assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));
assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));
assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Object() {// empty}.getClass()));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(Named.class));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new ClassUtils(), "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Inner(), "<null>"));
assertEquals("<null>", ClassUtils.getPackageName(null, "<null>"));
assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(ClassUtils.class.getName()));
assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class.getName()));
assertEquals("", ClassUtils.getPackageName((String) null));
assertEquals("", ClassUtils.getPackageName(""));
assertEquals("ClassUtils", ClassUtils.getShortCanonicalName(ClassUtils.class));
assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName(ClassUtils[].class));
assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName(ClassUtils[][].class));
assertEquals("int[]", ClassUtils.getShortCanonicalName(int[].class));
assertEquals("int[][]", ClassUtils.getShortCanonicalName(int[][].class));
assertEquals("ClassUtilsTest.8", ClassUtils.getShortCanonicalName(new Object() {// empty}.getClass()));
assertEquals("ClassUtilsTest.8Named", ClassUtils.getShortCanonicalName(Named.class));
assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName(Inner.class));
assertEquals(StringUtils.EMPTY, ClassUtils.getShortCanonicalName((Class<?>) null));
assertEquals("<null>", ClassUtils.getShortCanonicalName(null, "<null>"));
assertEquals("ClassUtils", ClassUtils.getShortCanonicalName(new ClassUtils(), "<null>"));
assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName(new ClassUtils[0], "<null>"));
assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName(new ClassUtils[0][0], "<null>"));
assertEquals("int[]", ClassUtils.getShortCanonicalName(new int[0], "<null>"));
assertEquals("int[][]", ClassUtils.getShortCanonicalName(new int[0][0], "<null>"));
assertEquals("ClassUtilsTest.9", ClassUtils.getShortCanonicalName(new Object() {// empty}, "<null>"));
assertEquals("ClassUtilsTest.9Named", ClassUtils.getShortCanonicalName(new Named(), "<null>"));
assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName(new Inner(), "<null>"));
assertEquals("", ClassUtils.getShortCanonicalName((String) null));
assertEquals("Map.Entry", ClassUtils.getShortCanonicalName(java.util.Map.Entry.class.getName()));
assertEquals("Entry", ClassUtils.getShortCanonicalName(java.util.Map.Entry.class.getCanonicalName()));
assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils"));
assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;"));
assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;"));
assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]"));
assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]"));
assertEquals("int[]", ClassUtils.getShortCanonicalName("[I"));
assertEquals("int[]", ClassUtils.getShortCanonicalName(int[].class.getCanonicalName()));
assertEquals("int[]", ClassUtils.getShortCanonicalName(int[].class.getName()));
assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I"));
assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]"));
assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]"));
assertEquals("int[]", int[].class.getCanonicalName());
assertEquals("[I", int[].class.getName());
assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6"));
assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named"));
assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner"));
assertEquals("org.apache.commons.lang3.ClassUtilsTest$10", new org.apache.commons.lang3.ClassUtilsTest() {}.getClass().getName());
assertNull(new org.apache.commons.lang3.ClassUtilsTest() {}.getClass().getCanonicalName());
assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));
assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));
assertEquals("", ClassUtils.getShortClassName((Class<?>) null));
assertEquals("String[]", ClassUtils.getShortClassName(String[].class));
assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));
assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));
assertEquals("byte", ClassUtils.getShortClassName(byte.class));
assertEquals("char", ClassUtils.getShortClassName(char.class));
assertEquals("short", ClassUtils.getShortClassName(short.class));
assertEquals("int", ClassUtils.getShortClassName(int.class));
assertEquals("long", ClassUtils.getShortClassName(long.class));
assertEquals("float", ClassUtils.getShortClassName(float.class));
assertEquals("double", ClassUtils.getShortClassName(double.class));
assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));
assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));
assertEquals("char[]", ClassUtils.getShortClassName(char[].class));
assertEquals("short[]", ClassUtils.getShortClassName(short[].class));
assertEquals("int[]", ClassUtils.getShortClassName(int[].class));
assertEquals("long[]", ClassUtils.getShortClassName(long[].class));
assertEquals("float[]", ClassUtils.getShortClassName(float[].class));
assertEquals("double[]", ClassUtils.getShortClassName(double[].class));
assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));
assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));
assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));
assertEquals("ClassUtilsTest.12", ClassUtils.getShortClassName(new Object() {// empty}.getClass()));
assertEquals("ClassUtilsTest.10Named", ClassUtils.getShortClassName(Named.class));
assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(Inner.class));
assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>"));
assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>"));
assertEquals("String", ClassUtils.getShortClassName("hello", "<null>"));
assertEquals("<null>", ClassUtils.getShortClassName(null, "<null>"));
assertEquals("ClassUtilsTest.13", ClassUtils.getShortClassName(new Object() {// empty}, "<null>"));
assertEquals("ClassUtilsTest.11Named", ClassUtils.getShortClassName(new Named(), "<null>"));
assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>"));
assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class.getName()));
assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class.getName()));
assertEquals("", ClassUtils.getShortClassName((String) null));
assertEquals("", ClassUtils.getShortClassName(""));
assertEquals("ClassUtils", ClassUtils.getSimpleName(ClassUtils.class));
assertEquals("Entry", ClassUtils.getSimpleName(Map.Entry.class));
assertEquals("", ClassUtils.getSimpleName(null));
assertEquals("String[]", ClassUtils.getSimpleName(String[].class));
assertEquals("Entry[]", ClassUtils.getSimpleName(Map.Entry[].class));
assertEquals("boolean", ClassUtils.getSimpleName(boolean.class));
assertEquals("byte", ClassUtils.getSimpleName(byte.class));
assertEquals("char", ClassUtils.getSimpleName(char.class));
assertEquals("short", ClassUtils.getSimpleName(short.class));
assertEquals("int", ClassUtils.getSimpleName(int.class));
assertEquals("long", ClassUtils.getSimpleName(long.class));
assertEquals("float", ClassUtils.getSimpleName(float.class));
assertEquals("double", ClassUtils.getSimpleName(double.class));
assertEquals("boolean[]", ClassUtils.getSimpleName(boolean[].class));
assertEquals("byte[]", ClassUtils.getSimpleName(byte[].class));
assertEquals("char[]", ClassUtils.getSimpleName(char[].class));
assertEquals("short[]", ClassUtils.getSimpleName(short[].class));
assertEquals("int[]", ClassUtils.getSimpleName(int[].class));
assertEquals("long[]", ClassUtils.getSimpleName(long[].class));
assertEquals("float[]", ClassUtils.getSimpleName(float[].class));
assertEquals("double[]", ClassUtils.getSimpleName(double[].class));
assertEquals("String[][]", ClassUtils.getSimpleName(String[][].class));
assertEquals("String[][][]", ClassUtils.getSimpleName(String[][][].class));
assertEquals("String[][][][]", ClassUtils.getSimpleName(String[][][][].class));
assertEquals("", ClassUtils.getSimpleName(new Object() {// empty}.getClass()));
assertEquals("Named", ClassUtils.getSimpleName(Named.class));
assertEquals("ClassUtils", ClassUtils.getSimpleName(new ClassUtils()));
assertEquals("Inner", ClassUtils.getSimpleName(new Inner()));
assertEquals("String", ClassUtils.getSimpleName("hello"));
assertEquals(StringUtils.EMPTY, ClassUtils.getSimpleName(null));
assertEquals(StringUtils.EMPTY, ClassUtils.getSimpleName(null));
assertEquals("ClassUtils", ClassUtils.getSimpleName(new ClassUtils(), "<null>"));
assertEquals("Inner", ClassUtils.getSimpleName(new Inner(), "<null>"));
assertEquals("String", ClassUtils.getSimpleName("hello", "<null>"));
assertEquals("<null>", ClassUtils.getSimpleName(null, "<null>"));
assertNull(ClassUtils.getSimpleName(null, null));
assertFalse(ClassUtils.isAssignable((Class<?>) null, null));
assertFalse(ClassUtils.isAssignable(String.class, null));
assertTrue(ClassUtils.isAssignable(null, Object.class));
assertTrue(ClassUtils.isAssignable(null, Integer.class));
assertFalse(ClassUtils.isAssignable(null, Integer.TYPE));
assertTrue(ClassUtils.isAssignable(String.class, Object.class));
assertTrue(ClassUtils.isAssignable(String.class, String.class));
assertFalse(ClassUtils.isAssignable(Object.class, String.class));
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.class));
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Object.class));
assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE));
assertTrue(ClassUtils.isAssignable(Integer.class, Object.class));
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));
assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class));
assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class));
assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Object.class));
assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));
assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class));
assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));
assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class));
assertFalse(ClassUtils.isAssignable((Class<?>) null, null, true));
assertFalse(ClassUtils.isAssignable(String.class, null, true));
assertTrue(ClassUtils.isAssignable(null, Object.class, true));
assertTrue(ClassUtils.isAssignable(null, Integer.class, true));
assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, true));
assertTrue(ClassUtils.isAssignable(String.class, Object.class, true));
assertTrue(ClassUtils.isAssignable(String.class, String.class, true));
assertFalse(ClassUtils.isAssignable(Object.class, String.class, true));
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.class, true));
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Object.class, true));
assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE, true));
assertTrue(ClassUtils.isAssignable(Integer.class, Object.class, true));
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, true));
assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, true));
assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, true));
assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));
assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class, true));
assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, true));
assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, true));
assertFalse(ClassUtils.isAssignable(array1, array2));
assertFalse(ClassUtils.isAssignable(null, array2));
assertTrue(ClassUtils.isAssignable(null, array0));
assertTrue(ClassUtils.isAssignable(array0, array0));
assertTrue(ClassUtils.isAssignable(array0, (Class<?>[]) null)); // explicit cast to avoid warning
assertTrue(ClassUtils.isAssignable(null, (Class<?>[]) null)); // explicit cast to avoid warning
assertFalse(ClassUtils.isAssignable(array1, array1s));
assertTrue(ClassUtils.isAssignable(array1s, array1s));
assertTrue(ClassUtils.isAssignable(array1s, array1));
assertTrue(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers));
assertTrue(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives));
assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1));
assertFalse(ClassUtils.isAssignable(arrayWrappers, array1));
assertTrue(ClassUtils.isAssignable(arrayPrimitives, array2));
assertTrue(ClassUtils.isAssignable(arrayWrappers, array2));
assertFalse(ClassUtils.isAssignable(array1, array2, true));
assertFalse(ClassUtils.isAssignable(null, array2, true));
assertTrue(ClassUtils.isAssignable(null, array0, true));
assertTrue(ClassUtils.isAssignable(array0, array0, true));
assertTrue(ClassUtils.isAssignable(array0, null, true));
assertTrue(ClassUtils.isAssignable((Class[]) null, null, true));
assertFalse(ClassUtils.isAssignable(array1, array1s, true));
assertTrue(ClassUtils.isAssignable(array1s, array1s, true));
assertTrue(ClassUtils.isAssignable(array1s, array1, true));
assertTrue(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, true));
assertTrue(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, true));
assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, true));
assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, true));
assertTrue(ClassUtils.isAssignable(arrayPrimitives, array2, true));
assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, true));
assertFalse(ClassUtils.isAssignable(array1, array2, false));
assertFalse(ClassUtils.isAssignable(null, array2, false));
assertTrue(ClassUtils.isAssignable(null, array0, false));
assertTrue(ClassUtils.isAssignable(array0, array0, false));
assertTrue(ClassUtils.isAssignable(array0, null, false));
assertTrue(ClassUtils.isAssignable((Class[]) null, null, false));
assertFalse(ClassUtils.isAssignable(array1, array1s, false));
assertTrue(ClassUtils.isAssignable(array1s, array1s, false));
assertTrue(ClassUtils.isAssignable(array1s, array1, false));
assertFalse(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, false));
assertFalse(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, false));
assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, false));
assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, false));
assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, false));
assertFalse(ClassUtils.isAssignable(arrayPrimitives, array2, false));
assertFalse(ClassUtils.isAssignable(Byte.class, Character.TYPE), "byte -> char");
assertTrue(ClassUtils.isAssignable(Byte.class, Byte.TYPE), "byte -> byte");
assertTrue(ClassUtils.isAssignable(Byte.class, Short.TYPE), "byte -> short");
assertTrue(ClassUtils.isAssignable(Byte.class, Integer.TYPE), "byte -> int");
assertTrue(ClassUtils.isAssignable(Byte.class, Long.TYPE), "byte -> long");
assertTrue(ClassUtils.isAssignable(Byte.class, Float.TYPE), "byte -> float");
assertTrue(ClassUtils.isAssignable(Byte.class, Double.TYPE), "byte -> double");
assertFalse(ClassUtils.isAssignable(Byte.class, Boolean.TYPE), "byte -> boolean");
assertFalse(ClassUtils.isAssignable(Short.class, Character.TYPE), "short -> char");
assertFalse(ClassUtils.isAssignable(Short.class, Byte.TYPE), "short -> byte");
assertTrue(ClassUtils.isAssignable(Short.class, Short.TYPE), "short -> short");
assertTrue(ClassUtils.isAssignable(Short.class, Integer.TYPE), "short -> int");
assertTrue(ClassUtils.isAssignable(Short.class, Long.TYPE), "short -> long");
assertTrue(ClassUtils.isAssignable(Short.class, Float.TYPE), "short -> float");
assertTrue(ClassUtils.isAssignable(Short.class, Double.TYPE), "short -> double");
assertFalse(ClassUtils.isAssignable(Short.class, Boolean.TYPE), "short -> boolean");
assertTrue(ClassUtils.isAssignable(Character.class, Character.TYPE), "char -> char");
assertFalse(ClassUtils.isAssignable(Character.class, Byte.TYPE), "char -> byte");
assertFalse(ClassUtils.isAssignable(Character.class, Short.TYPE), "char -> short");
assertTrue(ClassUtils.isAssignable(Character.class, Integer.TYPE), "char -> int");
assertTrue(ClassUtils.isAssignable(Character.class, Long.TYPE), "char -> long");
assertTrue(ClassUtils.isAssignable(Character.class, Float.TYPE), "char -> float");
assertTrue(ClassUtils.isAssignable(Character.class, Double.TYPE), "char -> double");
assertFalse(ClassUtils.isAssignable(Character.class, Boolean.TYPE), "char -> boolean");
assertFalse(ClassUtils.isAssignable(Integer.class, Character.TYPE), "int -> char");
assertFalse(ClassUtils.isAssignable(Integer.class, Byte.TYPE), "int -> byte");
assertFalse(ClassUtils.isAssignable(Integer.class, Short.TYPE), "int -> short");
assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE), "int -> int");
assertTrue(ClassUtils.isAssignable(Integer.class, Long.TYPE), "int -> long");
assertTrue(ClassUtils.isAssignable(Integer.class, Float.TYPE), "int -> float");
assertTrue(ClassUtils.isAssignable(Integer.class, Double.TYPE), "int -> double");
assertFalse(ClassUtils.isAssignable(Integer.class, Boolean.TYPE), "int -> boolean");
assertFalse(ClassUtils.isAssignable(Long.class, Character.TYPE), "long -> char");
assertFalse(ClassUtils.isAssignable(Long.class, Byte.TYPE), "long -> byte");
assertFalse(ClassUtils.isAssignable(Long.class, Short.TYPE), "long -> short");
assertFalse(ClassUtils.isAssignable(Long.class, Integer.TYPE), "long -> int");
assertTrue(ClassUtils.isAssignable(Long.class, Long.TYPE), "long -> long");
assertTrue(ClassUtils.isAssignable(Long.class, Float.TYPE), "long -> float");
assertTrue(ClassUtils.isAssignable(Long.class, Double.TYPE), "long -> double");
assertFalse(ClassUtils.isAssignable(Long.class, Boolean.TYPE), "long -> boolean");
assertFalse(ClassUtils.isAssignable(Float.class, Character.TYPE), "float -> char");
assertFalse(ClassUtils.isAssignable(Float.class, Byte.TYPE), "float -> byte");
assertFalse(ClassUtils.isAssignable(Float.class, Short.TYPE), "float -> short");
assertFalse(ClassUtils.isAssignable(Float.class, Integer.TYPE), "float -> int");
assertFalse(ClassUtils.isAssignable(Float.class, Long.TYPE), "float -> long");
assertTrue(ClassUtils.isAssignable(Float.class, Float.TYPE), "float -> float");
assertTrue(ClassUtils.isAssignable(Float.class, Double.TYPE), "float -> double");
assertFalse(ClassUtils.isAssignable(Float.class, Boolean.TYPE), "float -> boolean");
assertFalse(ClassUtils.isAssignable(Double.class, Character.TYPE), "double -> char");
assertFalse(ClassUtils.isAssignable(Double.class, Byte.TYPE), "double -> byte");
assertFalse(ClassUtils.isAssignable(Double.class, Short.TYPE), "double -> short");
assertFalse(ClassUtils.isAssignable(Double.class, Integer.TYPE), "double -> int");
assertFalse(ClassUtils.isAssignable(Double.class, Long.TYPE), "double -> long");
assertFalse(ClassUtils.isAssignable(Double.class, Float.TYPE), "double -> float");
assertTrue(ClassUtils.isAssignable(Double.class, Double.TYPE), "double -> double");
assertFalse(ClassUtils.isAssignable(Double.class, Boolean.TYPE), "double -> boolean");
assertFalse(ClassUtils.isAssignable(Boolean.class, Character.TYPE), "boolean -> char");
assertFalse(ClassUtils.isAssignable(Boolean.class, Byte.TYPE), "boolean -> byte");
assertFalse(ClassUtils.isAssignable(Boolean.class, Short.TYPE), "boolean -> short");
assertFalse(ClassUtils.isAssignable(Boolean.class, Integer.TYPE), "boolean -> int");
assertFalse(ClassUtils.isAssignable(Boolean.class, Long.TYPE), "boolean -> long");
assertFalse(ClassUtils.isAssignable(Boolean.class, Float.TYPE), "boolean -> float");
assertFalse(ClassUtils.isAssignable(Boolean.class, Double.TYPE), "boolean -> double");
assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE), "boolean -> boolean");
assertFalse(ClassUtils.isAssignable((Class<?>) null, null, false));
assertFalse(ClassUtils.isAssignable(String.class, null, false));
assertTrue(ClassUtils.isAssignable(null, Object.class, false));
assertTrue(ClassUtils.isAssignable(null, Integer.class, false));
assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, false));
assertTrue(ClassUtils.isAssignable(String.class, Object.class, false));
assertTrue(ClassUtils.isAssignable(String.class, String.class, false));
assertFalse(ClassUtils.isAssignable(Object.class, String.class, false));
assertFalse(ClassUtils.isAssignable(Integer.TYPE, Integer.class, false));
assertFalse(ClassUtils.isAssignable(Integer.TYPE, Object.class, false));
assertFalse(ClassUtils.isAssignable(Integer.class, Integer.TYPE, false));
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, false));
assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, false));
assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, false));
assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Object.class, false));
assertFalse(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, false));
assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class, false));
assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, false));
assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, false));
assertFalse(ClassUtils.isAssignable(Byte.class, Character.TYPE, true), "byte -> char");
assertTrue(ClassUtils.isAssignable(Byte.class, Byte.TYPE, true), "byte -> byte");
assertTrue(ClassUtils.isAssignable(Byte.class, Short.TYPE, true), "byte -> short");
assertTrue(ClassUtils.isAssignable(Byte.class, Integer.TYPE, true), "byte -> int");
assertTrue(ClassUtils.isAssignable(Byte.class, Long.TYPE, true), "byte -> long");
assertTrue(ClassUtils.isAssignable(Byte.class, Float.TYPE, true), "byte -> float");
assertTrue(ClassUtils.isAssignable(Byte.class, Double.TYPE, true), "byte -> double");
assertFalse(ClassUtils.isAssignable(Byte.class, Boolean.TYPE, true), "byte -> boolean");
assertFalse(ClassUtils.isAssignable(Short.class, Character.TYPE, true), "short -> char");
assertFalse(ClassUtils.isAssignable(Short.class, Byte.TYPE, true), "short -> byte");
assertTrue(ClassUtils.isAssignable(Short.class, Short.TYPE, true), "short -> short");
assertTrue(ClassUtils.isAssignable(Short.class, Integer.TYPE, true), "short -> int");
assertTrue(ClassUtils.isAssignable(Short.class, Long.TYPE, true), "short -> long");
assertTrue(ClassUtils.isAssignable(Short.class, Float.TYPE, true), "short -> float");
assertTrue(ClassUtils.isAssignable(Short.class, Double.TYPE, true), "short -> double");
assertFalse(ClassUtils.isAssignable(Short.class, Boolean.TYPE, true), "short -> boolean");
assertTrue(ClassUtils.isAssignable(Character.class, Character.TYPE, true), "char -> char");
assertFalse(ClassUtils.isAssignable(Character.class, Byte.TYPE, true), "char -> byte");
assertFalse(ClassUtils.isAssignable(Character.class, Short.TYPE, true), "char -> short");
assertTrue(ClassUtils.isAssignable(Character.class, Integer.TYPE, true), "char -> int");
assertTrue(ClassUtils.isAssignable(Character.class, Long.TYPE, true), "char -> long");
assertTrue(ClassUtils.isAssignable(Character.class, Float.TYPE, true), "char -> float");
assertTrue(ClassUtils.isAssignable(Character.class, Double.TYPE, true), "char -> double");
assertFalse(ClassUtils.isAssignable(Character.class, Boolean.TYPE, true), "char -> boolean");
assertFalse(ClassUtils.isAssignable(Integer.class, Character.TYPE, true), "int -> char");
assertFalse(ClassUtils.isAssignable(Integer.class, Byte.TYPE, true), "int -> byte");
assertFalse(ClassUtils.isAssignable(Integer.class, Short.TYPE, true), "int -> short");
assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE, true), "int -> int");
assertTrue(ClassUtils.isAssignable(Integer.class, Long.TYPE, true), "int -> long");
assertTrue(ClassUtils.isAssignable(Integer.class, Float.TYPE, true), "int -> float");
assertTrue(ClassUtils.isAssignable(Integer.class, Double.TYPE, true), "int -> double");
assertFalse(ClassUtils.isAssignable(Integer.class, Boolean.TYPE, true), "int -> boolean");
assertFalse(ClassUtils.isAssignable(Long.class, Character.TYPE, true), "long -> char");
assertFalse(ClassUtils.isAssignable(Long.class, Byte.TYPE, true), "long -> byte");
assertFalse(ClassUtils.isAssignable(Long.class, Short.TYPE, true), "long -> short");
assertFalse(ClassUtils.isAssignable(Long.class, Integer.TYPE, true), "long -> int");
assertTrue(ClassUtils.isAssignable(Long.class, Long.TYPE, true), "long -> long");
assertTrue(ClassUtils.isAssignable(Long.class, Float.TYPE, true), "long -> float");
assertTrue(ClassUtils.isAssignable(Long.class, Double.TYPE, true), "long -> double");
assertFalse(ClassUtils.isAssignable(Long.class, Boolean.TYPE, true), "long -> boolean");
assertFalse(ClassUtils.isAssignable(Float.class, Character.TYPE, true), "float -> char");
assertFalse(ClassUtils.isAssignable(Float.class, Byte.TYPE, true), "float -> byte");
assertFalse(ClassUtils.isAssignable(Float.class, Short.TYPE, true), "float -> short");
assertFalse(ClassUtils.isAssignable(Float.class, Integer.TYPE, true), "float -> int");
assertFalse(ClassUtils.isAssignable(Float.class, Long.TYPE, true), "float -> long");
assertTrue(ClassUtils.isAssignable(Float.class, Float.TYPE, true), "float -> float");
assertTrue(ClassUtils.isAssignable(Float.class, Double.TYPE, true), "float -> double");
assertFalse(ClassUtils.isAssignable(Float.class, Boolean.TYPE, true), "float -> boolean");
assertFalse(ClassUtils.isAssignable(Double.class, Character.TYPE, true), "double -> char");
assertFalse(ClassUtils.isAssignable(Double.class, Byte.TYPE, true), "double -> byte");
assertFalse(ClassUtils.isAssignable(Double.class, Short.TYPE, true), "double -> short");
assertFalse(ClassUtils.isAssignable(Double.class, Integer.TYPE, true), "double -> int");
assertFalse(ClassUtils.isAssignable(Double.class, Long.TYPE, true), "double -> long");
assertFalse(ClassUtils.isAssignable(Double.class, Float.TYPE, true), "double -> float");
assertTrue(ClassUtils.isAssignable(Double.class, Double.TYPE, true), "double -> double");
assertFalse(ClassUtils.isAssignable(Double.class, Boolean.TYPE, true), "double -> boolean");
assertFalse(ClassUtils.isAssignable(Boolean.class, Character.TYPE, true), "boolean -> char");
assertFalse(ClassUtils.isAssignable(Boolean.class, Byte.TYPE, true), "boolean -> byte");
assertFalse(ClassUtils.isAssignable(Boolean.class, Short.TYPE, true), "boolean -> short");
assertFalse(ClassUtils.isAssignable(Boolean.class, Integer.TYPE, true), "boolean -> int");
assertFalse(ClassUtils.isAssignable(Boolean.class, Long.TYPE, true), "boolean -> long");
assertFalse(ClassUtils.isAssignable(Boolean.class, Float.TYPE, true), "boolean -> float");
assertFalse(ClassUtils.isAssignable(Boolean.class, Double.TYPE, true), "boolean -> double");
assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true), "boolean -> boolean");
assertFalse(ClassUtils.isAssignable(Byte.TYPE, Character.TYPE), "byte -> char");
assertTrue(ClassUtils.isAssignable(Byte.TYPE, Byte.TYPE), "byte -> byte");
assertTrue(ClassUtils.isAssignable(Byte.TYPE, Short.TYPE), "byte -> short");
assertTrue(ClassUtils.isAssignable(Byte.TYPE, Integer.TYPE), "byte -> int");
assertTrue(ClassUtils.isAssignable(Byte.TYPE, Long.TYPE), "byte -> long");
assertTrue(ClassUtils.isAssignable(Byte.TYPE, Float.TYPE), "byte -> float");
assertTrue(ClassUtils.isAssignable(Byte.TYPE, Double.TYPE), "byte -> double");
assertFalse(ClassUtils.isAssignable(Byte.TYPE, Boolean.TYPE), "byte -> boolean");
assertFalse(ClassUtils.isAssignable(Short.TYPE, Character.TYPE), "short -> char");
assertFalse(ClassUtils.isAssignable(Short.TYPE, Byte.TYPE), "short -> byte");
assertTrue(ClassUtils.isAssignable(Short.TYPE, Short.TYPE), "short -> short");
assertTrue(ClassUtils.isAssignable(Short.TYPE, Integer.TYPE), "short -> int");
assertTrue(ClassUtils.isAssignable(Short.TYPE, Long.TYPE), "short -> long");
assertTrue(ClassUtils.isAssignable(Short.TYPE, Float.TYPE), "short -> float");
assertTrue(ClassUtils.isAssignable(Short.TYPE, Double.TYPE), "short -> double");
assertFalse(ClassUtils.isAssignable(Short.TYPE, Boolean.TYPE), "short -> boolean");
assertTrue(ClassUtils.isAssignable(Character.TYPE, Character.TYPE), "char -> char");
assertFalse(ClassUtils.isAssignable(Character.TYPE, Byte.TYPE), "char -> byte");
assertFalse(ClassUtils.isAssignable(Character.TYPE, Short.TYPE), "char -> short");
assertTrue(ClassUtils.isAssignable(Character.TYPE, Integer.TYPE), "char -> int");
assertTrue(ClassUtils.isAssignable(Character.TYPE, Long.TYPE), "char -> long");
assertTrue(ClassUtils.isAssignable(Character.TYPE, Float.TYPE), "char -> float");
assertTrue(ClassUtils.isAssignable(Character.TYPE, Double.TYPE), "char -> double");
assertFalse(ClassUtils.isAssignable(Character.TYPE, Boolean.TYPE), "char -> boolean");
assertFalse(ClassUtils.isAssignable(Integer.TYPE, Character.TYPE), "int -> char");
assertFalse(ClassUtils.isAssignable(Integer.TYPE, Byte.TYPE), "int -> byte");
assertFalse(ClassUtils.isAssignable(Integer.TYPE, Short.TYPE), "int -> short");
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE), "int -> int");
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Long.TYPE), "int -> long");
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Float.TYPE), "int -> float");
assertTrue(ClassUtils.isAssignable(Integer.TYPE, Double.TYPE), "int -> double");
assertFalse(ClassUtils.isAssignable(Integer.TYPE, Boolean.TYPE), "int -> boolean");
assertFalse(ClassUtils.isAssignable(Long.TYPE, Character.TYPE), "long -> char");
assertFalse(ClassUtils.isAssignable(Long.TYPE, Byte.TYPE), "long -> byte");
assertFalse(ClassUtils.isAssignable(Long.TYPE, Short.TYPE), "long -> short");
assertFalse(ClassUtils.isAssignable(Long.TYPE, Integer.TYPE), "long -> int");
assertTrue(ClassUtils.isAssignable(Long.TYPE, Long.TYPE), "long -> long");
assertTrue(ClassUtils.isAssignable(Long.TYPE, Float.TYPE), "long -> float");
assertTrue(ClassUtils.isAssignable(Long.TYPE, Double.TYPE), "long -> double");
assertFalse(ClassUtils.isAssignable(Long.TYPE, Boolean.TYPE), "long -> boolean");
assertFalse(ClassUtils.isAssignable(Float.TYPE, Character.TYPE), "float -> char");
assertFalse(ClassUtils.isAssignable(Float.TYPE, Byte.TYPE), "float -> byte");
assertFalse(ClassUtils.isAssignable(Float.TYPE, Short.TYPE), "float -> short");
assertFalse(ClassUtils.isAssignable(Float.TYPE, Integer.TYPE), "float -> int");
assertFalse(ClassUtils.isAssignable(Float.TYPE, Long.TYPE), "float -> long");
assertTrue(ClassUtils.isAssignable(Float.TYPE, Float.TYPE), "float -> float");
assertTrue(ClassUtils.isAssignable(Float.TYPE, Double.TYPE), "float -> double");
assertFalse(ClassUtils.isAssignable(Float.TYPE, Boolean.TYPE), "float -> boolean");
assertFalse(ClassUtils.isAssignable(Double.TYPE, Character.TYPE), "double -> char");
assertFalse(ClassUtils.isAssignable(Double.TYPE, Byte.TYPE), "double -> byte");
assertFalse(ClassUtils.isAssignable(Double.TYPE, Short.TYPE), "double -> short");
assertFalse(ClassUtils.isAssignable(Double.TYPE, Integer.TYPE), "double -> int");
assertFalse(ClassUtils.isAssignable(Double.TYPE, Long.TYPE), "double -> long");
assertFalse(ClassUtils.isAssignable(Double.TYPE, Float.TYPE), "double -> float");
assertTrue(ClassUtils.isAssignable(Double.TYPE, Double.TYPE), "double -> double");
assertFalse(ClassUtils.isAssignable(Double.TYPE, Boolean.TYPE), "double -> boolean");
assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Character.TYPE), "boolean -> char");
assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Byte.TYPE), "boolean -> byte");
assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Short.TYPE), "boolean -> short");
assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Integer.TYPE), "boolean -> int");
assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Long.TYPE), "boolean -> long");
assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Float.TYPE), "boolean -> float");
assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Double.TYPE), "boolean -> double");
assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE), "boolean -> boolean");
assertTrue(ClassUtils.isInnerClass(Inner.class));
assertTrue(ClassUtils.isInnerClass(Map.Entry.class));
assertTrue(ClassUtils.isInnerClass(new Cloneable() {// empty}.getClass()));
assertFalse(ClassUtils.isInnerClass(this.getClass()));
assertFalse(ClassUtils.isInnerClass(String.class));
assertFalse(ClassUtils.isInnerClass(null));
assertEquals("firstEntry", map.firstEntry().getValue());
assertEquals(Character.class, map.firstEntry().getKey());
assertEquals("lastEntry", map.lastEntry().getValue());
assertEquals(String.class, map.lastEntry().getKey());
assertEquals("null", map.get(null));
assertNotNull(new ClassUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(ClassUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(ClassUtils.class.getModifiers()));
assertEquals(int[].class, ClassUtils.getClass("int[]"));
assertEquals(long[].class, ClassUtils.getClass("long[]"));
assertEquals(short[].class, ClassUtils.getClass("short[]"));
assertEquals(byte[].class, ClassUtils.getClass("byte[]"));
assertEquals(char[].class, ClassUtils.getClass("char[]"));
assertEquals(float[].class, ClassUtils.getClass("float[]"));
assertEquals(double[].class, ClassUtils.getClass("double[]"));
assertEquals(boolean[].class, ClassUtils.getClass("boolean[]"));
assertEquals(String[].class, ClassUtils.getClass("java.lang.String[]"));
assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass("java.util.Map.Entry[]"));
assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass("java.util.Map$Entry[]"));
assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass("[Ljava.util.Map.Entry;"));
assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass("[Ljava.util.Map$Entry;"));
assertEquals(int[][].class, ClassUtils.getClass("int[][]"));
assertEquals(long[][].class, ClassUtils.getClass("long[][]"));
assertEquals(short[][].class, ClassUtils.getClass("short[][]"));
assertEquals(byte[][].class, ClassUtils.getClass("byte[][]"));
assertEquals(char[][].class, ClassUtils.getClass("char[][]"));
assertEquals(float[][].class, ClassUtils.getClass("float[][]"));
assertEquals(double[][].class, ClassUtils.getClass("double[][]"));
assertEquals(boolean[][].class, ClassUtils.getClass("boolean[][]"));
assertEquals(String[][].class, ClassUtils.getClass("java.lang.String[][]"));
assertGetClassThrowsClassNotFound("bool");
assertGetClassThrowsClassNotFound("bool[]");
assertGetClassThrowsClassNotFound("integer[]");
assertGetClassThrowsNullPointerException(null);
assertGetClassThrowsClassNotFound("[][][]");
assertGetClassThrowsClassNotFound("[[]");
assertGetClassThrowsClassNotFound("[");
assertGetClassThrowsClassNotFound("java.lang.String][");
assertGetClassThrowsClassNotFound(".hello.world");
assertGetClassThrowsClassNotFound("hello..world");
assertEquals(int.class, ClassUtils.getClass("int"));
assertEquals(long.class, ClassUtils.getClass("long"));
assertEquals(short.class, ClassUtils.getClass("short"));
assertEquals(byte.class, ClassUtils.getClass("byte"));
assertEquals(char.class, ClassUtils.getClass("char"));
assertEquals(float.class, ClassUtils.getClass("float"));
assertEquals(double.class, ClassUtils.getClass("double"));
assertEquals(boolean.class, ClassUtils.getClass("boolean"));
assertEquals(void.class, ClassUtils.getClass("void"));
assertGetClassReturnsClass(String[].class);
assertGetClassReturnsClass(int[].class);
assertGetClassReturnsClass(long[].class);
assertGetClassReturnsClass(short[].class);
assertGetClassReturnsClass(byte[].class);
assertGetClassReturnsClass(char[].class);
assertGetClassReturnsClass(float[].class);
assertGetClassReturnsClass(double[].class);
assertGetClassReturnsClass(boolean[].class);
assertGetClassReturnsClass(String[][].class);
assertGetClassReturnsClass(int[][].class);
assertGetClassReturnsClass(long[][].class);
assertGetClassReturnsClass(short[][].class);
assertGetClassReturnsClass(byte[][].class);
assertGetClassReturnsClass(char[][].class);
assertGetClassReturnsClass(float[][].class);
assertGetClassReturnsClass(double[][].class);
assertGetClassReturnsClass(boolean[][].class);
assertEquals(CX.class, componentType);
assertNull(ClassUtils.getComponentType(null));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested"));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested"));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested"));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested"));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested", true));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested", true));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested", true));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested", true));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(classLoader, "org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested"));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(classLoader, "org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested"));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(classLoader, "org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested"));
assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(classLoader, "org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested"));
assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers()));
assertTrue((Boolean) isEmptyMethod.invoke(set));
assertEquals(Object.class.getMethod("toString"), toStringMethod);
assertEquals(StringParameterizedChild.class, iter.next());
assertEquals(GenericParent.class, iter.next());
assertEquals(Object.class, iter.next());
assertFalse(iter.hasNext());
assertEquals(StringParameterizedChild.class, iter.next());
assertEquals(GenericParent.class, iter.next());
assertEquals(GenericConsumer.class, iter.next());
assertEquals(Object.class, iter.next());
assertFalse(iter.hasNext());
assertTrue(ClassUtils.isPrimitiveOrWrapper(Boolean.class), "Boolean.class");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Byte.class), "Byte.class");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Character.class), "Character.class");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Short.class), "Short.class");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Integer.class), "Integer.class");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Long.class), "Long.class");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Double.class), "Double.class");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Float.class), "Float.class");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Boolean.TYPE), "boolean");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Byte.TYPE), "byte");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Character.TYPE), "char");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Short.TYPE), "short");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Integer.TYPE), "int");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Long.TYPE), "long");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Double.TYPE), "double");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Float.TYPE), "float");
assertTrue(ClassUtils.isPrimitiveOrWrapper(Void.TYPE), "Void.TYPE");
assertFalse(ClassUtils.isPrimitiveOrWrapper(null), "null");
assertFalse(ClassUtils.isPrimitiveOrWrapper(Void.class), "Void.class");
assertFalse(ClassUtils.isPrimitiveOrWrapper(String.class), "String.class");
assertFalse(ClassUtils.isPrimitiveOrWrapper(this.getClass()), "this.getClass()");
assertTrue(ClassUtils.isPrimitiveWrapper(Boolean.class), "Boolean.class");
assertTrue(ClassUtils.isPrimitiveWrapper(Byte.class), "Byte.class");
assertTrue(ClassUtils.isPrimitiveWrapper(Character.class), "Character.class");
assertTrue(ClassUtils.isPrimitiveWrapper(Short.class), "Short.class");
assertTrue(ClassUtils.isPrimitiveWrapper(Integer.class), "Integer.class");
assertTrue(ClassUtils.isPrimitiveWrapper(Long.class), "Long.class");
assertTrue(ClassUtils.isPrimitiveWrapper(Double.class), "Double.class");
assertTrue(ClassUtils.isPrimitiveWrapper(Float.class), "Float.class");
assertFalse(ClassUtils.isPrimitiveWrapper(Boolean.TYPE), "boolean");
assertFalse(ClassUtils.isPrimitiveWrapper(Byte.TYPE), "byte");
assertFalse(ClassUtils.isPrimitiveWrapper(Character.TYPE), "char");
assertFalse(ClassUtils.isPrimitiveWrapper(Short.TYPE), "short");
assertFalse(ClassUtils.isPrimitiveWrapper(Integer.TYPE), "int");
assertFalse(ClassUtils.isPrimitiveWrapper(Long.TYPE), "long");
assertFalse(ClassUtils.isPrimitiveWrapper(Double.TYPE), "double");
assertFalse(ClassUtils.isPrimitiveWrapper(Float.TYPE), "float");
assertFalse(ClassUtils.isPrimitiveWrapper(null), "null");
assertFalse(ClassUtils.isPrimitiveWrapper(Void.class), "Void.class");
assertFalse(ClassUtils.isPrimitiveWrapper(Void.TYPE), "Void.TYPE");
assertFalse(ClassUtils.isPrimitiveWrapper(String.class), "String.class");
assertFalse(ClassUtils.isPrimitiveWrapper(this.getClass()), "this.getClass()");
//        assertNull("null -> null", ClassUtils.primitivesToWrappers(null)); // generates warning
assertNull(ClassUtils.primitivesToWrappers((Class<?>[]) null), "null -> null"); // equivalent cast to avoid warning
assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(), "empty -> empty");
assertArrayEquals(new Class<?>[] {null}, castNull, "(Class<?>) null -> [null]");
assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY), "empty -> empty");
assertEquals(expectedWrapper, wrappers[i], primitive + " -> " + expectedWrapper);
assertNotSame(noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives), "unmodified");
assertEquals(Boolean.class, ClassUtils.primitiveToWrapper(Boolean.TYPE), "boolean -> Boolean.class");
assertEquals(Byte.class, ClassUtils.primitiveToWrapper(Byte.TYPE), "byte -> Byte.class");
assertEquals(Character.class, ClassUtils.primitiveToWrapper(Character.TYPE), "char -> Character.class");
assertEquals(Short.class, ClassUtils.primitiveToWrapper(Short.TYPE), "short -> Short.class");
assertEquals(Integer.class, ClassUtils.primitiveToWrapper(Integer.TYPE), "int -> Integer.class");
assertEquals(Long.class, ClassUtils.primitiveToWrapper(Long.TYPE), "long -> Long.class");
assertEquals(Double.class, ClassUtils.primitiveToWrapper(Double.TYPE), "double -> Double.class");
assertEquals(Float.class, ClassUtils.primitiveToWrapper(Float.TYPE), "float -> Float.class");
assertEquals(String.class, ClassUtils.primitiveToWrapper(String.class), "String.class -> String.class");
assertEquals(ClassUtils.class, ClassUtils.primitiveToWrapper(ClassUtils.class), "ClassUtils.class -> ClassUtils.class");
assertEquals(Void.TYPE, ClassUtils.primitiveToWrapper(Void.TYPE), "Void.TYPE -> Void.TYPE");
assertNull(ClassUtils.primitiveToWrapper(null), "null -> null");
assertThrows(IllegalAccessException.class, () -> isEmptyMethod.invoke(set));
//        assertNull(ClassUtils.toClass(null)); // generates warning
assertNull(ClassUtils.toClass((Object[]) null)); // equivalent explicit cast
assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(), "empty -> empty");
assertArrayEquals(new Object[] {null}, castNull, "(Object) null -> [null]");
assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY));
assertArrayEquals(new Class[] {String.class, Integer.class, Double.class}, ClassUtils.toClass("Test", Integer.valueOf(1), Double.valueOf(99d)));
assertArrayEquals(new Class[] {String.class, null, Double.class}, ClassUtils.toClass("Test", null, Double.valueOf(99d)));
assertEquals(int[].class, ClassUtils.getClass(" int [ ] "));
assertEquals(long[].class, ClassUtils.getClass("\rlong\t[\n]\r"));
assertEquals(short[].class, ClassUtils.getClass("\tshort                \t\t[]"));
assertEquals(byte[].class, ClassUtils.getClass("byte[\t\t\n\r]   "));
assertEquals(classes.length, primitives.length, "Wrong length of result array");
assertEquals(expectedPrimitive, primitives[i], classes[i] + " -> " + expectedPrimitive);
assertArrayEquals(empty, ClassUtils.wrappersToPrimitives(empty), "Wrong result for empty input");
//        assertNull("Wrong result for null input", ClassUtils.wrappersToPrimitives(null)); // generates warning
assertNull(ClassUtils.wrappersToPrimitives((Class<?>[]) null), "Wrong result for null input"); // equivalent cast
assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.wrappersToPrimitives(), "empty -> empty");
assertArrayEquals(new Class<?>[] {null}, castNull, "(Class<?>) null -> [null]");
assertFalse(wrapperCls.isPrimitive(), "Still primitive");
assertEquals(primitive, ClassUtils.wrapperToPrimitive(wrapperCls), wrapperCls + " -> " + primitive);
assertNull(ClassUtils.wrapperToPrimitive(String.class), "Wrong result for non wrapper class");
assertNull(ClassUtils.wrapperToPrimitive(null), "Wrong result for null class");
assertFalse(eightFbs.equals(bs), "AND failed to clear bits");
assertTrue(bs.get(3), "AND failed to maintain set bits");
assertFalse(bs.get(i), "Failed to clear extra bits in the receiver BitSet");
assertFalse(eightFbs.equals(bs), "AND failed to clear bits");
assertTrue(bs.get(3), "AND failed to maintain set bits");
assertFalse(bs.get(i), "Failed to clear extra bits in the receiver BitSet");
assertEquals("{0, 1, 4, 6, 7}", bs.toString(), "Incorrect bitset after andNot");
assertEquals(0, bs.size(), "Incorrect size");
assertEquals("{0, 1, 4, 6, 7}", bs.toString(), "Incorrect bitset after andNot");
assertEquals(0, bs.size(), "Incorrect size");
assertEquals(48, bs.cardinality(), "cardinality() returned wrong value");
assertEquals(452, bs.cardinality(), "cardinality() returned wrong value");
assertEquals(0, bs.cardinality(), "cardinality() returned wrong value");
assertEquals(500, bs.cardinality(), "cardinality() returned wrong value");
assertFalse(eightFbs.get(i), "Clear didn't clear bit " + i);
assertEquals(0, eightFbs.length(), "Test1: Wrong length");
assertEquals(0, bs.length(), "Test2: Wrong length");
assertTrue(bs.isEmpty(), "Test2: isEmpty() returned incorrect value");
assertEquals(0, bs.cardinality(), "Test2: cardinality() returned incorrect value");
assertFalse(eightFbs.get(7), "Failed to clear bit");
assertTrue(eightFbs.get(i), "Clear cleared incorrect bits");
assertFalse(eightFbs.get(165), "Failed to clear bit");
assertThrows(IndexOutOfBoundsException.class, () -> eightFbs.clear(-1));
assertEquals(0, bs.length(), "Test1: Wrong length,");
assertEquals(0, bs.size(), "Test1: Wrong size,");
assertEquals(0, bs.length(), "Test2: Wrong length,");
assertEquals(0, bs.size(), "Test2: Wrong size,");
assertEquals(0, bs.length(), "Test3: Wrong length,");
assertEquals(0, bs.size(), "Test3: Wrong size,");
assertEquals(0, bs.size(), "Test4: Wrong size,");
assertEquals(0, bs.length(), "Test4: Wrong length,");
assertEquals(64, bs.size(), "Test5: Wrong size,");
assertEquals(26, bs.length(), "Test5: Wrong length,");
assertEquals(64, bs.size(), "Test6: Wrong size,");
assertEquals(26, bs.length(), "Test6: Wrong length,");
assertEquals(64, bs.size(), "Test7: Wrong size,");
assertEquals(0, bs.length(), "Test7: Wrong length,");
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(bs.get(i), "Shouldn't have cleared bit " + i);
assertFalse(bs.get(i), "Failed to clear bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(bs.get(i), "Shouldn't have cleared bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertEquals(64, bs.size(), "Failed to grow BitSet");
assertTrue(bs.get(i), "Shouldn't have cleared bit " + i);
assertFalse(bs.get(i), "Failed to clear bit " + i);
assertTrue(!bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Failed to clear bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Failed to clear bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(bs.get(i), "Shouldn't have cleared bit " + i);
assertFalse(bs.get(i), "Failed to clear bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(bs.get(i), "Shouldn't have cleared bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(bs.get(i), "Shouldn't have cleared bit " + i);
assertFalse(bs.get(i), "failed to clear bit " + i);
assertTrue(bs.get(i), "Shouldn't have cleared bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertThrows(IndexOutOfBoundsException.class, () -> newInstance(10).clear(-1, 3),"Test1: Attempt to flip with negative index failed to generate exception");
assertThrows(IndexOutOfBoundsException.class, () -> newInstance(10).clear(2, -1),"Test2: Attempt to flip with negative index failed to generate exception");
assertTrue(bs.get(2), "Bit got cleared incorrectly ");
assertThrows(IndexOutOfBoundsException.class, () -> newInstance(10).clear(4, 2),"Test4: Attempt to flip with illegal args failed to generate exception");
assertEquals(0, bs.length(), "Test1: Wrong length,");
assertEquals(0, bs.size(), "Test1: Wrong size,");
assertEquals(0, bs.length(), "Test2: Wrong length,");
assertEquals(0, bs.size(), "Test2: Wrong size,");
assertEquals(0, bs.length(), "Test3: Wrong length,");
assertEquals(0, bs.size(), "Test3: Wrong size,");
assertEquals(0, bs.length(), "Test4: Wrong length,");
assertEquals(0, bs.size(), "Test4: Wrong size,");
assertEquals(26, bs.length(), "Test5: Wrong length,");
assertEquals(64, bs.size(), "Test5: Wrong size,");
assertEquals(26, bs.length(), "Test6: Wrong length,");
assertEquals(64, bs.size(), "Test6: Wrong size,");
assertEquals(64, bs.size(), "Test7: Wrong size,");
assertEquals(26, bs.length(), "Test7: Wrong length,");
assertEquals(64, bs.size(), "Test8: Wrong size,");
assertEquals(26, bs.length(), "Test8: Wrong length,");
assertEquals(64, bs.size(), "Test9: Wrong size,");
assertEquals(0, bs.length(), "Test9: Wrong length,");
assertFalse(eightFbs.get(7), "Failed to clear bit");
assertTrue(eightFbs.get(i), "Clear cleared incorrect bits");
assertFalse(eightFbs.get(165), "Failed to clear bit");
assertThrows(IndexOutOfBoundsException.class, () -> eightFbs.clear(-1));
assertEquals(0, bs.length(), "Test1: Wrong length,");
assertEquals(0, bs.size(), "Test1: Wrong size,");
assertEquals(0, bs.length(), "Test2: Wrong length,");
assertEquals(0, bs.size(), "Test2: Wrong size,");
assertEquals(0, bs.length(), "Test3: Wrong length,");
assertEquals(0, bs.size(), "Test3: Wrong size,");
assertEquals(0, bs.size(), "Test4: Wrong size,");
assertEquals(0, bs.length(), "Test4: Wrong length,");
assertEquals(64, bs.size(), "Test5: Wrong size,");
assertEquals(26, bs.length(), "Test5: Wrong length,");
assertEquals(64, bs.size(), "Test6: Wrong size,");
assertEquals(26, bs.length(), "Test6: Wrong length,");
assertEquals(64, bs.size(), "Test7: Wrong size,");
assertEquals(0, bs.length(), "Test7: Wrong length,");
assertEquals(bs, eightFbs, "clone failed to return equal BitSet");
assertEquals(64, bs.size(), "Create FluentBitSet of incorrect size");
assertEquals("{}", bs.toString(), "New FluentBitSet had invalid string representation");
assertEquals(128, bs.size(), "Create FluentBitSet of incorrect size");
assertEquals("{}", bs.toString(), "New FluentBitSet had invalid string representation: " + bs.toString());
assertEquals(128, bs.size(), "Failed to round FluentBitSet element size");
assertThrows(NegativeArraySizeException.class, () -> newInstance(-9));
assertEquals(eightFbs, eightFbs, "Same FluentBitSet returned false");
assertEquals(bs, eightFbs, "Identical FluentBitSet returned false");
assertFalse(eightFbs.equals(bs), "Different BitSets returned true");
assertFalse(eightFbs.equals(null), "Different BitSets returned true");
assertFalse(eightFbs.equals(new Object()), "Different BitSets returned true");
assertFalse(eightFbs.equals(bs), "Different sized FluentBitSet with higher bit set returned true");
assertTrue(eightFbs.equals(bs), "Different sized FluentBitSet with higher bits not set returned false");
assertFalse(bs.get(8), "Failed to flip bit");
assertTrue(bs.get(9), "Failed to flip bit");
assertTrue(bs.get(10), "Failed to flip bit");
assertTrue(bs.get(8), "Failed to flip bit");
assertFalse(bs.get(9), "Failed to flip bit");
assertFalse(bs.get(10), "Failed to flip bit");
assertThrows(IndexOutOfBoundsException.class, () -> newInstance().flip(-1), "Attempt to flip at negative index failed to generate exception");
assertEquals(192, bs.size(), "Failed to grow BitSet");
assertTrue(bs.get(128), "Failed to flip bit");
assertTrue(bs.get(i), "Test1: Incorrectly flipped bit" + i);
assertEquals(i + 1, bs.length(), "Incorrect length");
assertTrue(!bs.get(j), "Test2: Incorrectly flipped bit" + j);
assertTrue(!bs.get(j), "Test3: Incorrectly flipped bit" + j);
assertEquals(0, bs0.size(), "Test1: Wrong size");
assertEquals(0, bs0.length(), "Test1: Wrong length");
assertEquals(bs0.size(), 64, "Test2: Wrong size");
assertEquals(1, bs0.length(), "Test2: Wrong length");
assertEquals(64, bs0.size(), "Test3: Wrong size");
assertEquals(64, bs0.length(), "Test3: Wrong length");
assertTrue(!eightFbs.get(7), "Failed to flip bit 7");
assertTrue(eightFbs.get(i), "Flip flipped incorrect bits");
assertTrue(eightFbs.get(127), "Failed to flip bit 127");
assertTrue(!eightFbs.get(127), "Failed to flip bit 127");
assertTrue(!bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(7), "Failed to flip bit 7");
assertTrue(bs.get(8), "Failed to flip bit 8");
assertTrue(bs.get(9), "Failed to flip bit 9");
assertFalse(bs.get(10), "Failed to flip bit 10");
assertTrue(!bs.get(i), "Shouldn't have flipped bit " + i);
assertEquals(64, bs.size(), "Failed to grow BitSet");
assertTrue(!bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(7), "Failed to flip bit 7");
assertTrue(bs.get(8), "Failed to flip bit 8");
assertTrue(bs.get(9), "Failed to flip bit 9");
assertFalse(bs.get(10), "Failed to flip bit 10");
assertTrue(bs.get(i), "failed to flip bit " + i);
assertFalse(bs.get(64), "Shouldn't have flipped bit 64");
assertTrue(bs.get(i), "Failed to flip bit " + i);
assertFalse(bs.get(64), "Shouldn't have flipped bit 64");
assertTrue(bs.get(i), "Failed to flip bit " + i);
assertFalse(bs.get(65), "Shouldn't have flipped bit 65");
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(bs.get(7), "Shouldn't have flipped bit 7");
assertFalse(bs.get(8), "Shouldn't have flipped bit 8");
assertTrue(bs.get(9), "Failed to flip bit 9");
assertFalse(bs.get(10), "Failed to flip bit 10");
assertTrue(bs.get(i), "failed to flip bit " + i);
assertFalse(bs.get(72), "Failed to flip bit 72");
assertTrue(bs.get(73), "Failed to flip bit 73");
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(bs.get(110), "Shouldn't have flipped bit 110");
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have flipped bit " + i);
assertTrue(bs.get(7), "Shouldn't have flipped bit 7");
assertFalse(bs.get(8), "Shouldn't have flipped bit 8");
assertTrue(bs.get(9), "Failed to flip bit 9");
assertFalse(bs.get(10), "Failed to flip bit 10");
assertTrue(bs.get(i), "failed to flip bit " + i);
assertFalse(bs.get(72), "Failed to flip bit 72");
assertTrue(bs.get(i), "failed to flip bit " + i);
assertFalse(bs.get(110), "Failed to flip bit 110");
assertTrue(bs.get(i), "failed to flip bit " + i);
assertFalse(bs.get(181), "Failed to flip bit 181");
assertTrue(bs.get(i), "failed to flip bit " + i);
assertFalse(bs.get(219), "Shouldn't have flipped bit 219");
assertTrue(bs.get(220), "Shouldn't have flipped bit 220");
assertTrue(!bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(eightFbs.get(99), "Get returned true for index out of range");
assertTrue(eightFbs.get(3), "Get returned false for set value");
assertFalse(bs.get(0), "Get returned true for a non set value");
assertThrows(IndexOutOfBoundsException.class, () -> newInstance().get(-1), "Attempt to get at negative index failed to generate exception");
assertFalse(bs.get(64), "Access greater than size");
assertTrue(bs.get(63), "Test highest bit");
assertEquals(0, bs.length(), "Test1: Wrong length,");
assertEquals(0, bs.size(), "Test1: Wrong size,");
assertEquals(0, bs.length(), "Test2: Wrong length,");
assertEquals(0, bs.size(), "Test2: Wrong size,");
assertEquals(0, bs.length(), "Test3: Wrong length,");
assertEquals(0, bs.size(), "Test3: Wrong size,");
assertEquals(correctbs, resultbs, "Test1: Returned incorrect BitSet");
assertEquals(correctbs, resultbs, "Test2: Returned incorrect BitSet");
assertEquals(correctbs, resultbs, "Test3: Returned incorrect BitSet");
assertEquals(correctbs, resultbs, "Test4: Returned incorrect BitSet");
assertEquals(correctbs, resultbs, "Test5: Returned incorrect BitSet");
assertEquals(correctbs, resultbs, "Test6: Returned incorrect BitSet");
assertEquals(bs.get(0, bs.size()), bs, "equality principle 1 ");
assertEquals(correctbs, resultbs, "Test7: Returned incorrect BitSet");
assertEquals(resultbs, bs2, "equality principle 2 ");
assertEquals(resultbs, bs2, "equality principle 3 ");
assertEquals(0, bs.length(), "Test1: Wrong length,");
assertEquals(0, bs.size(), "Test1: Wrong size,");
assertEquals(0, bs.length(), "Test2: Wrong length,");
assertEquals(0, bs.size(), "Test2: Wrong size,");
assertEquals(0, bs.length(), "Test3: Wrong length,");
assertEquals(0, bs.size(), "Test3: Wrong size,");
assertEquals(0, bs.length(), "Test4: Wrong length,");
assertEquals(0, bs.size(), "Test4: Wrong size,");
assertEquals(26, bs.length(), "Test5: Wrong length,");
assertEquals(64, bs.size(), "Test5: Wrong size,");
assertEquals(26, bs.length(), "Test6: Wrong length,");
assertEquals(64, bs.size(), "Test6: Wrong size,");
assertEquals(64, bs.size(), "Test7: Wrong size,");
assertEquals(26, bs.length(), "Test7: Wrong length,");
assertEquals(64, bs.size(), "Test8: Wrong size,");
assertEquals(26, bs.length(), "Test8: Wrong length,");
assertEquals(64, bs.size(), "Test9: Wrong size,");
assertEquals(26, bs.length(), "Test9: Wrong length,");
assertEquals(bs.bitSet().hashCode(), bs.hashCode(), "BitSet returns wrong hash value");
assertEquals(97, bs.hashCode(), "BitSet returns wrong hash value");
assertFalse(bs.intersects(bs2), "Test1: intersects() returned incorrect value");
assertFalse(bs2.intersects(bs), "Test1: intersects() returned incorrect value");
assertFalse(bs.intersects(bs2), "Test2: intersects() returned incorrect value");
assertFalse(bs2.intersects(bs), "Test2: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2), "Test3: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs), "Test3: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2), "Test4: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs), "Test4: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2), "Test5: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs), "Test5: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2), "Test6: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs), "Test6: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2), "Test7: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs), "Test7: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2), "Test8: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs), "Test8: intersects() returned incorrect value");
assertFalse(bs.intersects(bs2), "Test9: intersects() returned incorrect value");
assertFalse(bs2.intersects(bs), "Test9: intersects() returned incorrect value");
assertFalse(bs.intersects(bs2.bitSet()), "Test1: intersects() returned incorrect value");
assertFalse(bs2.intersects(bs.bitSet()), "Test1: intersects() returned incorrect value");
assertFalse(bs.intersects(bs2.bitSet()), "Test2: intersects() returned incorrect value");
assertFalse(bs2.intersects(bs.bitSet()), "Test2: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2.bitSet()), "Test3: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs.bitSet()), "Test3: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2.bitSet()), "Test4: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs.bitSet()), "Test4: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2.bitSet()), "Test5: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs.bitSet()), "Test5: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2.bitSet()), "Test6: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs.bitSet()), "Test6: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2.bitSet()), "Test7: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs.bitSet()), "Test7: intersects() returned incorrect value");
assertTrue(bs.intersects(bs2.bitSet()), "Test8: intersects() returned incorrect value");
assertTrue(bs2.intersects(bs.bitSet()), "Test8: intersects() returned incorrect value");
assertFalse(bs.intersects(bs2.bitSet()), "Test9: intersects() returned incorrect value");
assertFalse(bs2.intersects(bs.bitSet()), "Test9: intersects() returned incorrect value");
assertTrue(bs.isEmpty(), "Test: isEmpty() returned wrong value");
assertFalse(bs.isEmpty(), "Test0: isEmpty() returned wrong value");
assertFalse(bs.isEmpty(), "Test1: isEmpty() returned wrong value");
assertFalse(bs.isEmpty(), "Test2: isEmpty() returned wrong value");
assertFalse(bs.isEmpty(), "Test3: isEmpty() returned wrong value");
assertFalse(bs.isEmpty(), "Test4: isEmpty() returned wrong value");
assertEquals(0, bs.length(), "BitSet returned wrong length");
assertEquals(6, bs.length(), "BitSet returned wrong length");
assertEquals(11, bs.length(), "BitSet returned wrong length");
assertEquals(433, bs.length(), "BitSet returned wrong length");
assertEquals(433, bs.length(), "BitSet returned wrong length");
assertEquals(5, bs.nextClearBit(0), "nextClearBit() returned the wrong value");
assertEquals(5, bs.nextClearBit(5), "nextClearBit() returned the wrong value");
assertEquals(32, bs.nextClearBit(6), "nextClearBit() returned the wrong value");
assertEquals(32, bs.nextClearBit(32), "nextClearBit() returned the wrong value");
assertEquals(63, bs.nextClearBit(33), "nextClearBit() returned the wrong value");
assertEquals(63, bs.nextClearBit(63), "nextClearBit() returned the wrong value");
assertEquals(64, bs.nextClearBit(64), "nextClearBit() returned the wrong value");
assertEquals(71, bs.nextClearBit(65), "nextClearBit() returned the wrong value");
assertEquals(71, bs.nextClearBit(71), "nextClearBit() returned the wrong value");
assertEquals(72, bs.nextClearBit(72), "nextClearBit() returned the wrong value");
assertEquals(127, bs.nextClearBit(110), "nextClearBit() returned the wrong value");
assertEquals(127, bs.nextClearBit(127), "nextClearBit() returned the wrong value");
assertEquals(128, bs.nextClearBit(128), "nextClearBit() returned the wrong value");
assertEquals(193, bs.nextClearBit(130), "nextClearBit() returned the wrong value");
assertEquals(193, bs.nextClearBit(191), "nextClearBit() returned the wrong value");
assertEquals(193, bs.nextClearBit(192), "nextClearBit() returned the wrong value");
assertEquals(193, bs.nextClearBit(193), "nextClearBit() returned the wrong value");
assertEquals(450, bs.nextClearBit(194), "nextClearBit() returned the wrong value");
assertEquals(450, bs.nextClearBit(255), "nextClearBit() returned the wrong value");
assertEquals(450, bs.nextClearBit(256), "nextClearBit() returned the wrong value");
assertEquals(450, bs.nextClearBit(450), "nextClearBit() returned the wrong value");
assertEquals(512, bs.nextClearBit(451), "nextClearBit() returned the wrong value");
assertEquals(512, bs.nextClearBit(511), "nextClearBit() returned the wrong value");
assertEquals(512, bs.nextClearBit(512), "nextClearBit() returned the wrong value");
assertEquals(513, bs.nextClearBit(513), "nextClearBit() returned the wrong value");
assertEquals(800, bs.nextClearBit(800), "nextClearBit() returned the wrong value");
assertEquals(5, bs.nextSetBit(0), "nextSetBit() returned the wrong value");
assertEquals(5, bs.nextSetBit(5), "nextSetBit() returned the wrong value");
assertEquals(32, bs.nextSetBit(6), "nextSetBit() returned the wrong value");
assertEquals(32, bs.nextSetBit(32), "nextSetBit() returned the wrong value");
assertEquals(63, bs.nextSetBit(33), "nextSetBit() returned the wrong value");
assertEquals(63, bs.nextSetBit(63), "nextSetBit() returned the wrong value");
assertEquals(64, bs.nextSetBit(64), "nextSetBit() returned the wrong value");
assertEquals(71, bs.nextSetBit(65), "nextSetBit() returned the wrong value");
assertEquals(71, bs.nextSetBit(71), "nextSetBit() returned the wrong value");
assertEquals(72, bs.nextSetBit(72), "nextSetBit() returned the wrong value");
assertEquals(127, bs.nextSetBit(110), "nextSetBit() returned the wrong value");
assertEquals(127, bs.nextSetBit(127), "nextSetBit() returned the wrong value");
assertEquals(128, bs.nextSetBit(128), "nextSetBit() returned the wrong value");
assertEquals(193, bs.nextSetBit(130), "nextSetBit() returned the wrong value");
assertEquals(193, bs.nextSetBit(191), "nextSetBit() returned the wrong value");
assertEquals(193, bs.nextSetBit(192), "nextSetBit() returned the wrong value");
assertEquals(193, bs.nextSetBit(193), "nextSetBit() returned the wrong value");
assertEquals(450, bs.nextSetBit(194), "nextSetBit() returned the wrong value");
assertEquals(450, bs.nextSetBit(255), "nextSetBit() returned the wrong value");
assertEquals(450, bs.nextSetBit(256), "nextSetBit() returned the wrong value");
assertEquals(450, bs.nextSetBit(450), "nextSetBit() returned the wrong value");
assertEquals(-1, bs.nextSetBit(451), "nextSetBit() returned the wrong value");
assertEquals(-1, bs.nextSetBit(511), "nextSetBit() returned the wrong value");
assertEquals(-1, bs.nextSetBit(512), "nextSetBit() returned the wrong value");
assertEquals(-1, bs.nextSetBit(800), "nextSetBit() returned the wrong value");
assertTrue(bs.get(i), "OR failed to set bits");
assertTrue(bs.get(i), "OR(0) failed to set bits");
assertFalse(bs.get(5), "OR set a bit which should be off");
assertTrue(bs.get(i), "OR failed to set bits");
assertTrue(bs.get(i), "OR(0) failed to set bits");
assertFalse(bs.get(5), "OR set a bit which should be off");
assertTrue(bs.get(i), "OR failed to set bits");
assertTrue(bs.get(i), "OR(0) failed to set bits");
assertFalse(bs.get(5), "OR set a bit which should be off");
assertEquals(1, bs.previousClearBit(1), "previousClearBit");
assertEquals(-1, bs.previousSetBit(1), "previousSetBit");
assertTrue(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "Failed to set bit " + i);
assertTrue(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertEquals(64, bs.size(), "Failed to grow BitSet");
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "Failed to set bit " + i);
assertFalse(bs.get(64), "Shouldn't have set bit 64");
assertTrue(bs.get(i), "Failed to set bit " + i);
assertFalse(bs.get(64), "Shouldn't have set bit 64");
assertTrue(bs.get(i), "Failed to set bit " + i);
assertFalse(bs.get(65), "Shouldn't have set bit 65");
assertTrue(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "Failed to set bit " + i);
assertTrue(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "Shouldn't have set flipped " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "failed to set bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(255), "Shouldn't have flipped bit 255");
assertFalse(bs.get(2), "Bit got set incorrectly ");
assertTrue(!eightFbs.get(3) && !eightFbs.get(4) && !eightFbs.get(5), "Should have set bits 3, 4, and 5 to false");
assertTrue(eightFbs.get(3) && eightFbs.get(4) && eightFbs.get(5), "Should have set bits 3, 4, and 5 to true");
assertTrue(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "Failed to set bit " + i);
assertTrue(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertEquals(128, bs.size(), "Failed to grow BitSet");
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "Failed to set bit " + i);
assertFalse(bs.get(65), "Shouldn't have set bit 64");
assertTrue(bs.get(i), "Failed to set bit " + i);
assertFalse(bs.get(65), "Shouldn't have set bit 64");
assertTrue(bs.get(i), "Failed to set bit " + i);
assertFalse(bs.get(66), "Shouldn't have set bit 65");
assertTrue(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "Failed to set bit " + i);
assertTrue(bs.get(i), "Shouldn't have flipped bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "Shouldn't have set flipped " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(i), "failed to set bit " + i);
assertFalse(bs.get(i), "Shouldn't have set bit " + i);
assertTrue(bs.get(255), "Shouldn't have flipped bit 255");
assertFalse(bs.get(3), "Bit got set incorrectly ");
assertTrue(bs.get(8), "Failed to set bit");
assertEquals(192, bs.size(), "Failed to grow BitSet");
assertTrue(bs.get(128), "Failed to set bit");
assertTrue(bs.get(i), "Incorrectly set");
assertEquals(i + 1, bs.length(), "Incorrect length");
assertFalse(bs.get(j), "Incorrectly set bit " + j);
assertFalse(bs.get(j), "Incorrectly set bit " + j);
assertEquals(0, bs.length(), "Test1: Wrong length");
assertEquals(1, bs.length(), "Test2: Wrong length");
assertTrue(bs.get(8), "Failed to set bit");
assertEquals(192, bs.size(), "Failed to grow BitSet");
assertTrue(bs.get(128), "Failed to set bit");
assertTrue(bs.get(i), "Incorrectly set");
assertEquals(i + 1, bs.length(), "Incorrect length");
assertFalse(bs.get(j), "Incorrectly set bit " + j);
assertFalse(bs.get(j), "Incorrectly set bit " + j);
assertEquals(0, bs.length(), "Test1: Wrong length");
assertEquals(1, bs.length(), "Test2: Wrong length");
assertFalse(eightFbs.get(5), "Should have set bit 5 to true");
assertTrue(eightFbs.get(5), "Should have set bit 5 to false");
assertEquals(64, eightFbs.size(), "Returned incorrect size");
assertTrue(eightFbs.size() >= 129, "Returned incorrect size");
assertEquals(64, eightFbs.size(), "Returned incorrect size");
assertTrue(eightFbs.size() >= 129, "Returned incorrect size");
assertEquals(0, bs.stream().count(), "stream");
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, bs.toByteArray(), "stream");
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, bs.toLongArray(), "stream");
assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", eightFbs.toString(), "Returned incorrect string representation");
assertEquals("{0, 1, 3, 4, 5, 6, 7}", eightFbs.toString(), "Returned incorrect string representation");
assertFalse(bs.get(i), "XOR failed to clear bits");
assertTrue(bs.get(i), "XOR failed to set bits");
assertTrue(bs.get(i), "XOR(0) failed to set bits");
assertEquals("{63}", bs.toString(), "Test highest bit");
assertFalse(bs.get(i), "XOR failed to clear bits");
assertTrue(bs.get(i), "XOR failed to set bits");
assertTrue(bs.get(i), "XOR(0) failed to set bits");
assertEquals("{63}", bs.toString(), "Test highest bit");
Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(Testable::test, testable, ise));
assertSame(ise, e);
e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(Testable::test, testable, error));
assertSame(error, e);
e = assertThrows(UncheckedIOException.class, () -> Functions.accept(Testable::test, testable, ioe));
assertNotNull(t);
assertSame(ioe, t);
Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(Testable::test, testable));
assertSame(ise, e);
e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(Testable::test, testable));
assertSame(error, e);
e = assertThrows(UncheckedIOException.class, () -> Functions.accept(Testable::test, testable));
assertNotNull(t);
assertSame(ioe, t);
Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(testable::testDouble, 1d));
assertSame(ise, e);
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(testable::testDouble, 1d));
assertSame(error, e);
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(UncheckedIOException.class, () -> Functions.accept(testable::testDouble, 1d));
assertNotNull(t);
assertSame(ioe, t);
assertNull(testable.getAcceptedPrimitiveObject1());
assertEquals(1, testable.getAcceptedPrimitiveObject1());
Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(testable::testInt, 1));
assertSame(ise, e);
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(testable::testInt, 1));
assertSame(error, e);
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(UncheckedIOException.class, () -> Functions.accept(testable::testInt, 1));
assertNotNull(t);
assertSame(ioe, t);
assertNull(testable.getAcceptedPrimitiveObject1());
assertEquals(1, testable.getAcceptedPrimitiveObject1());
Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(testable::testLong, 1L));
assertSame(ise, e);
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(testable::testLong, 1L));
assertSame(error, e);
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(UncheckedIOException.class, () -> Functions.accept(testable::testLong, 1L));
assertNotNull(t);
assertSame(ioe, t);
assertNull(testable.getAcceptedPrimitiveObject1());
assertEquals(1, testable.getAcceptedPrimitiveObject1());
Throwable e = assertThrows(IllegalStateException.class,() -> Functions.accept(testable::testObjDouble, "X", 1d));
assertSame(ise, e);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(testable::testObjDouble, "X", 1d));
assertSame(error, e);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(UncheckedIOException.class, () -> Functions.accept(testable::testObjDouble, "X", 1d));
assertNotNull(t);
assertSame(ioe, t);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertEquals("X", testable.getAcceptedObject());
assertEquals(1d, testable.getAcceptedPrimitiveObject1());
Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(testable::testObjInt, "X", 1));
assertSame(ise, e);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(testable::testObjInt, "X", 1));
assertSame(error, e);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(UncheckedIOException.class, () -> Functions.accept(testable::testObjInt, "X", 1));
assertNotNull(t);
assertSame(ioe, t);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertEquals("X", testable.getAcceptedObject());
assertEquals(1, testable.getAcceptedPrimitiveObject1());
Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(testable::testObjLong, "X", 1L));
assertSame(ise, e);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(testable::testObjLong, "X", 1L));
assertSame(error, e);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(UncheckedIOException.class, () -> Functions.accept(testable::testObjLong, "X", 1L));
assertNotNull(t);
assertSame(ioe, t);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertEquals("X", testable.getAcceptedObject());
assertEquals(1L, testable.getAcceptedPrimitiveObject1());
Throwable e = assertThrows(IllegalStateException.class,() -> Functions.apply(Testable::testAsInteger, testable, ise));
assertSame(ise, e);
e = assertThrows(OutOfMemoryError.class, () -> Functions.apply(Testable::testAsInteger, testable, error));
assertSame(error, e);
e = assertThrows(UncheckedIOException.class, () -> Functions.apply(Testable::testAsInteger, testable, ioe));
assertNotNull(t);
assertSame(ioe, t);
assertNotNull(i);
assertEquals(0, i.intValue());
Throwable e = assertThrows(IllegalStateException.class,() -> Functions.apply(Testable::testAsInteger, testable));
assertSame(ise, e);
e = assertThrows(OutOfMemoryError.class, () -> Functions.apply(Testable::testAsInteger, testable));
assertSame(error, e);
e = assertThrows(UncheckedIOException.class, () -> Functions.apply(Testable::testAsInteger, testable));
assertNotNull(t);
assertSame(ioe, t);
assertNotNull(i);
assertEquals(0, i.intValue());
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, callable::call);
assertNotNull(cause);
assertTrue(cause instanceof SomeException);
assertEquals("Odd Invocation: 1", cause.getMessage());
assertNotNull(instance);
Throwable e = assertThrows(IllegalStateException.class, () -> consumer.accept(testable));
assertSame(ise, e);
e = assertThrows(OutOfMemoryError.class, () -> consumer.accept(testable));
assertSame(error, e);
e = assertThrows(UncheckedIOException.class, () -> consumer.accept(testable));
assertNotNull(t);
assertSame(ioe, t);
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, runnable::run);
assertNotNull(cause);
assertTrue(cause instanceof SomeException);
assertEquals("Odd Invocation: 1", cause.getMessage());
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, supplier::get);
assertNotNull(cause);
assertTrue(cause instanceof SomeException);
assertEquals("Odd Invocation: 1", cause.getMessage());
assertNotNull(supplier.get());
Throwable e = assertThrows(IllegalStateException.class, () -> consumer.accept(testable, ise));
assertSame(ise, e);
e = assertThrows(OutOfMemoryError.class, () -> consumer.accept(testable, error));
assertSame(error, e);
e = assertThrows(UncheckedIOException.class, () -> consumer.accept(testable, ioe));
assertNotNull(t);
assertSame(ioe, t);
Throwable e = assertThrows(IllegalStateException.class, () -> biFunction.apply(testable, ise));
assertSame(ise, e);
e = assertThrows(OutOfMemoryError.class, () -> biFunction.apply(testable, error));
assertSame(error, e);
e = assertThrows(UncheckedIOException.class, () -> biFunction.apply(testable, ioe));
assertNotNull(t);
assertSame(ioe, t);
assertEquals(0, biFunction.apply(testable, null).intValue());
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> predicate.test(null, null));
assertNotNull(cause);
assertTrue(cause instanceof SomeException);
assertEquals("Odd Invocation: 1", cause.getMessage());
assertNotNull(instance);
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> Functions.run(FailureOnOddInvocations::new));
assertNotNull(cause);
assertTrue(cause instanceof SomeException);
assertEquals("Odd Invocation: 1", cause.getMessage());
assertNotNull(instance);
Throwable e = assertThrows(IllegalStateException.class, () -> function.apply(ise));
assertSame(ise, e);
e = assertThrows(OutOfMemoryError.class, () -> function.apply(error));
assertSame(error, e);
e = assertThrows(UncheckedIOException.class, () -> function.apply(ioe));
assertNotNull(t);
assertSame(ioe, t);
assertEquals(0, function.apply(null).intValue());
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> Functions.run(FailureOnOddInvocations::new));
assertNotNull(cause);
assertTrue(cause instanceof SomeException);
assertEquals("Odd Invocation: 1", cause.getMessage());
assertNotNull(instance);
Throwable e = assertThrows(IllegalStateException.class, () -> Functions.get(testable::testAsInteger));
assertSame(ise, e);
e = assertThrows(OutOfMemoryError.class, () -> Functions.get(testable::testAsInteger));
assertSame(error, e);
e = assertThrows(UncheckedIOException.class, () -> Functions.get(testable::testAsInteger));
assertNotNull(t);
assertSame(ioe, t);
assertNotNull(i);
assertEquals(0, i.intValue());
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> predicate.test(null));
assertNotNull(cause);
assertTrue(cause instanceof SomeException);
assertEquals("Odd Invocation: 1", cause.getMessage());
assertNotNull(instance);
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> Functions.run(FailureOnOddInvocations::new));
assertNotNull(cause);
assertTrue(cause instanceof SomeException);
assertEquals("Odd Invocation: 1", cause.getMessage());
Throwable e = assertThrows(IllegalStateException.class,() -> Functions.tryWithResources(() -> consumer.accept(ise), co::close));
assertSame(ise, e);
assertTrue(co.isClosed());
e = assertThrows(OutOfMemoryError.class,() -> Functions.tryWithResources(() -> consumer.accept(error), co::close));
assertSame(error, e);
assertTrue(co.isClosed());
final UncheckedIOException uioe = assertThrows(UncheckedIOException.class,() -> Functions.tryWithResources(() -> consumer.accept(ioe), co::close));
assertSame(ioe, cause);
assertTrue(co.isClosed());
assertTrue(co.isClosed());
assertArrayEquals(array, result);
assertNotSame(array, result);
assertNull(ArrayUtils.insert(42, null, array));
assertArrayEquals(new boolean[0], ArrayUtils.insert(0, new boolean[0], null));
assertNull(ArrayUtils.insert(42, (boolean[]) null, null));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(-1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(array.length + 1, array, array));
assertArrayEquals(new boolean[]{false, true, false, true}, ArrayUtils.insert(0, array, false));
assertArrayEquals(new boolean[]{true, false, false, true}, ArrayUtils.insert(1, array, false));
assertArrayEquals(new boolean[]{true, false, true, false}, ArrayUtils.insert(array.length, array, false));
assertArrayEquals(new boolean[]{false, true, false, true, false, true}, ArrayUtils.insert(0, array, values));
assertArrayEquals(new boolean[]{true, false, true, false, false, true}, ArrayUtils.insert(1, array, values));
assertArrayEquals(new boolean[]{true, false, true, false, true, false}, ArrayUtils.insert(array.length, array, values));
assertArrayEquals(array, result);
assertNotSame(array, result);
assertNull(ArrayUtils.insert(42, null, array));
assertArrayEquals(new byte[0], ArrayUtils.insert(0, new byte[0], null));
assertNull(ArrayUtils.insert(42, (byte[]) null, null));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(-1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(array.length + 1, array, array));
assertArrayEquals(new byte[]{0, 1, 2, 3}, ArrayUtils.insert(0, array, (byte) 0));
assertArrayEquals(new byte[]{1, 0, 2, 3}, ArrayUtils.insert(1, array, (byte) 0));
assertArrayEquals(new byte[]{1, 2, 3, 0}, ArrayUtils.insert(array.length, array, (byte) 0));
assertArrayEquals(new byte[]{4, 5, 6, 1, 2, 3}, ArrayUtils.insert(0, array, values));
assertArrayEquals(new byte[]{1, 4, 5, 6, 2, 3}, ArrayUtils.insert(1, array, values));
assertArrayEquals(new byte[]{1, 2, 3, 4, 5, 6}, ArrayUtils.insert(array.length, array, values));
assertArrayEquals(array, result);
assertNotSame(array, result);
assertNull(ArrayUtils.insert(42, null, array));
assertArrayEquals(new char[0], ArrayUtils.insert(0, new char[0], null));
assertNull(ArrayUtils.insert(42, (char[]) null, null));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(-1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(array.length + 1, array, array));
assertArrayEquals(new char[]{'z', 'a', 'b', 'c'}, ArrayUtils.insert(0, array, 'z'));
assertArrayEquals(new char[]{'a', 'z', 'b', 'c'}, ArrayUtils.insert(1, array, 'z'));
assertArrayEquals(new char[]{'a', 'b', 'c', 'z'}, ArrayUtils.insert(array.length, array, 'z'));
assertArrayEquals(new char[]{'d', 'e', 'f', 'a', 'b', 'c'}, ArrayUtils.insert(0, array, values));
assertArrayEquals(new char[]{'a', 'd', 'e', 'f', 'b', 'c'}, ArrayUtils.insert(1, array, values));
assertArrayEquals(new char[]{'a', 'b', 'c', 'd', 'e', 'f'}, ArrayUtils.insert(array.length, array, values));
assertArrayEquals(array, result, delta);
assertNotSame(array, result);
assertNull(ArrayUtils.insert(42, null, array));
assertArrayEquals(new double[0], ArrayUtils.insert(0, new double[0], null), delta);
assertNull(ArrayUtils.insert(42, (double[]) null, null));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(-1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(array.length + 1, array, array));
assertArrayEquals(new double[]{0, 1, 2, 3}, ArrayUtils.insert(0, array, 0), delta);
assertArrayEquals(new double[]{1, 0, 2, 3}, ArrayUtils.insert(1, array, 0), delta);
assertArrayEquals(new double[]{1, 2, 3, 0}, ArrayUtils.insert(array.length, array, 0), delta);
assertArrayEquals(new double[]{4, 5, 6, 1, 2, 3}, ArrayUtils.insert(0, array, values), delta);
assertArrayEquals(new double[]{1, 4, 5, 6, 2, 3}, ArrayUtils.insert(1, array, values), delta);
assertArrayEquals(new double[]{1, 2, 3, 4, 5, 6}, ArrayUtils.insert(array.length, array, values), delta);
assertArrayEquals(array, result, delta);
assertNotSame(array, result);
assertNull(ArrayUtils.insert(42, null, array));
assertArrayEquals(new float[0], ArrayUtils.insert(0, new float[0], null), delta);
assertNull(ArrayUtils.insert(42, (float[]) null, null));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(-1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(array.length + 1, array, array));
assertArrayEquals(new float[]{0, 1, 2, 3}, ArrayUtils.insert(0, array, 0), delta);
assertArrayEquals(new float[]{1, 0, 2, 3}, ArrayUtils.insert(1, array, 0), delta);
assertArrayEquals(new float[]{1, 2, 3, 0}, ArrayUtils.insert(array.length, array, 0), delta);
assertArrayEquals(new float[]{4, 5, 6, 1, 2, 3}, ArrayUtils.insert(0, array, values), delta);
assertArrayEquals(new float[]{1, 4, 5, 6, 2, 3}, ArrayUtils.insert(1, array, values), delta);
assertArrayEquals(new float[]{1, 2, 3, 4, 5, 6}, ArrayUtils.insert(array.length, array, values), delta);
assertArrayEquals(array, result);
assertNotSame(array, result);
assertNull(ArrayUtils.insert(42, null, array));
assertArrayEquals(new String[0], ArrayUtils.insert(0, new String[0], (String[]) null));
assertNull(ArrayUtils.insert(42, null, (String[]) null));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(-1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(array.length + 1, array, array));
assertArrayEquals(new String[]{"z", "a", "b", "c"}, ArrayUtils.insert(0, array, "z"));
assertArrayEquals(new String[]{"a", "z", "b", "c"}, ArrayUtils.insert(1, array, "z"));
assertArrayEquals(new String[]{"a", "b", "c", "z"}, ArrayUtils.insert(array.length, array, "z"));
assertArrayEquals(new String[]{"d", "e", "f", "a", "b", "c"}, ArrayUtils.insert(0, array, values));
assertArrayEquals(new String[]{"a", "d", "e", "f", "b", "c"}, ArrayUtils.insert(1, array, values));
assertArrayEquals(new String[]{"a", "b", "c", "d", "e", "f"}, ArrayUtils.insert(array.length, array, values));
assertArrayEquals(array, result);
assertNotSame(array, result);
assertNull(ArrayUtils.insert(42, null, array));
assertArrayEquals(new int[0], ArrayUtils.insert(0, new int[0], null));
assertNull(ArrayUtils.insert(42, (int[]) null, null));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(-1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(array.length + 1, array, array));
assertArrayEquals(new int[]{0, 1, 2, 3}, ArrayUtils.insert(0, array, 0));
assertArrayEquals(new int[]{1, 0, 2, 3}, ArrayUtils.insert(1, array, 0));
assertArrayEquals(new int[]{1, 2, 3, 0}, ArrayUtils.insert(array.length, array, 0));
assertArrayEquals(new int[]{4, 5, 6, 1, 2, 3}, ArrayUtils.insert(0, array, values));
assertArrayEquals(new int[]{1, 4, 5, 6, 2, 3}, ArrayUtils.insert(1, array, values));
assertArrayEquals(new int[]{1, 2, 3, 4, 5, 6}, ArrayUtils.insert(array.length, array, values));
assertArrayEquals(array, result);
assertNotSame(array, result);
assertNull(ArrayUtils.insert(42, null, array));
assertArrayEquals(new long[0], ArrayUtils.insert(0, new long[0], null));
assertNull(ArrayUtils.insert(42, (long[]) null, null));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(-1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(array.length + 1, array, array));
assertArrayEquals(new long[]{0, 1, 2, 3}, ArrayUtils.insert(0, array, 0));
assertArrayEquals(new long[]{1, 0, 2, 3}, ArrayUtils.insert(1, array, 0));
assertArrayEquals(new long[]{1, 2, 3, 0}, ArrayUtils.insert(array.length, array, 0));
assertArrayEquals(new long[]{4, 5, 6, 1, 2, 3}, ArrayUtils.insert(0, array, values));
assertArrayEquals(new long[]{1, 4, 5, 6, 2, 3}, ArrayUtils.insert(1, array, values));
assertArrayEquals(new long[]{1, 2, 3, 4, 5, 6}, ArrayUtils.insert(array.length, array, values));
assertArrayEquals(array, result);
assertNotSame(array, result);
assertNull(ArrayUtils.insert(42, null, array));
assertArrayEquals(new short[0], ArrayUtils.insert(0, new short[0], null));
assertNull(ArrayUtils.insert(42, (short[]) null, null));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(-1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(array.length + 1, array, array));
assertArrayEquals(new short[]{0, 1, 2, 3}, ArrayUtils.insert(0, array, (short) 0));
assertArrayEquals(new short[]{1, 0, 2, 3}, ArrayUtils.insert(1, array, (short) 0));
assertArrayEquals(new short[]{1, 2, 3, 0}, ArrayUtils.insert(array.length, array, (short) 0));
assertArrayEquals(new short[]{4, 5, 6, 1, 2, 3}, ArrayUtils.insert(0, array, values));
assertArrayEquals(new short[]{1, 4, 5, 6, 2, 3}, ArrayUtils.insert(1, array, values));
assertArrayEquals(new short[]{1, 2, 3, 4, 5, 6}, ArrayUtils.insert(array.length, array, values));
assertThrows(NullPointerException.class, () -> Triple.ofNonNull(null, null, null));
assertThrows(NullPointerException.class, () -> Triple.ofNonNull(null, null, "z"));
assertThrows(NullPointerException.class, () -> Triple.ofNonNull(null, "y", "z"));
assertThrows(NullPointerException.class, () -> Triple.ofNonNull("x", null, null));
assertThrows(NullPointerException.class, () -> Triple.ofNonNull("x", "y", null));
assertEquals("x", pair.getLeft());
assertEquals("y", pair.getMiddle());
assertEquals("z", pair.getRight());
assertEquals(0, triple1.compareTo(triple1));
assertTrue(triple1.compareTo(triple2) < 0);
assertEquals(0, triple2.compareTo(triple2));
assertTrue(triple2.compareTo(triple1) > 0);
assertEquals(0, triple1.compareTo(triple1));
assertTrue(triple1.compareTo(triple2) < 0);
assertEquals(0, triple2.compareTo(triple2));
assertTrue(triple2.compareTo(triple1) > 0);
assertEquals(0, triple1.compareTo(triple1));
assertTrue(triple1.compareTo(triple2) < 0);
assertEquals(0, triple2.compareTo(triple2));
assertTrue(triple2.compareTo(triple1) > 0);
assertEquals(0, triple1.compareTo(triple1));
assertTrue(triple1.compareTo(triple2) < 0);
assertEquals(0, triple2.compareTo(triple2));
assertTrue(triple2.compareTo(triple1) > 0);
assertEquals(triple, triple2);
assertEquals(triple.hashCode(), triple2.hashCode());
assertTrue(set.contains(triple2));
assertEquals(0, empty.length);
assertEquals(0, empty.length);
assertEquals("         (Key,Something,Value)", String.format("%1$30s", triple));
assertEquals("(Key,Something,Value)", String.format("%1$s", triple));
assertEquals("(Key,Something,Value)", triple.toString());
assertEquals("Test created on " + "04-25-2011", triple.toString("Test created on %3$tm-%3$td-%3$tY"));
assertTrue(triple instanceof ImmutableTriple<?, ?, ?>);
assertEquals(0, ((ImmutableTriple<Integer, String, Boolean>) triple).left.intValue());
assertEquals("foo", ((ImmutableTriple<Integer, String, Boolean>) triple).middle);
assertEquals(Boolean.TRUE, ((ImmutableTriple<Integer, String, Boolean>) triple).right);
assertTrue(triple2 instanceof ImmutableTriple<?, ?, ?>);
assertNull(((ImmutableTriple<Object, String, Long>) triple2).left);
assertEquals("bar", ((ImmutableTriple<Object, String, Long>) triple2).middle);
assertEquals(Long.valueOf(200L), ((ImmutableTriple<Object, String, Long>) triple2).right);
assertEquals(0, pair1.compareTo(pair1));
assertTrue(pair1.compareTo(pair2) < 0);
assertEquals(0, pair2.compareTo(pair2));
assertTrue(pair2.compareTo(pair1) > 0);
assertEquals(0, pair1.compareTo(pair1));
assertTrue(pair1.compareTo(pair2) < 0);
assertEquals(0, pair2.compareTo(pair2));
assertTrue(pair2.compareTo(pair1) > 0);
assertEquals(pair, pair2);
assertEquals(pair.hashCode(), pair2.hashCode());
assertTrue(set.contains(pair2));
assertNotEquals(pair, pair2);
assertNotEquals(pair.hashCode(), pair2.hashCode());
assertEquals(0, empty.length);
assertEquals(0, empty.length);
assertEquals("         (Key,Value)", String.format("%1$20s", pair));
assertEquals("(Key,Value)", String.format("%1$s", pair));
assertEquals(pair, entry);
assertEquals(pair.hashCode(), entry.hashCode());
assertThrows(NullPointerException.class, () -> Pair.ofNonNull(null, null));
assertThrows(NullPointerException.class, () -> Pair.ofNonNull(null, "x"));
assertThrows(NullPointerException.class, () -> Pair.ofNonNull("x", null));
assertEquals("x", pair.getLeft());
assertEquals("y", pair.getRight());
assertEquals(entry.getKey(), pair.getLeft());
assertEquals(entry.getValue(), pair.getRight());
assertTrue(pair instanceof ImmutablePair<?, ?>);
assertEquals(0, ((ImmutablePair<Integer, String>) pair).left.intValue());
assertEquals("foo", ((ImmutablePair<Integer, String>) pair).right);
assertTrue(pair2 instanceof ImmutablePair<?, ?>);
assertNull(((ImmutablePair<Object, String>) pair2).left);
assertEquals("bar", ((ImmutablePair<Object, String>) pair2).right);
assertNull(pair3.getLeft());
assertNull(pair3.getRight());
assertEquals("(Key,Value)", pair.toString());
assertEquals("Test created on " + "04-25-2011", pair.toString("Test created on %2$tm-%2$td-%2$tY"));
assertEquals(0, nowPair.left.intValue());
assertEquals(0, nowPair.getLeft().intValue());
assertEquals("foo", nowPair.right);
assertEquals("foo", nowPair.getRight());
assertEquals(oldPair, nowPair);
assertNull(nowPair2.left);
assertNull(nowPair2.getLeft());
assertEquals("bar", nowPair2.right);
assertEquals("bar", nowPair2.getRight());
assertEquals("A", pair1.getLeft());
assertEquals("B", pair2.getLeft());
assertEquals(0, pair1.compareTo(pair1));
assertTrue(pair1.compareTo(pair2) < 0);
assertEquals(0, pair2.compareTo(pair2));
assertTrue(pair2.compareTo(pair1) > 0);
assertEquals("A", pair1.getRight());
assertEquals("B", pair2.getRight());
assertEquals(0, pair1.compareTo(pair1));
assertTrue(pair1.compareTo(pair2) < 0);
assertEquals(0, pair2.compareTo(pair2));
assertTrue(pair2.compareTo(pair1) > 0);
assertEquals(0, empty.length);
assertEquals(0, empty.length);
assertEquals(ImmutablePair.of(null, "foo"), ImmutablePair.of(null, "foo"));
assertNotEquals(ImmutablePair.of("foo", 0), ImmutablePair.of("foo", null));
assertNotEquals(ImmutablePair.of("foo", "bar"), ImmutablePair.of("xyz", "bar"));
assertEquals(p, p);
assertNotEquals(p, new Object());
assertEquals(ImmutablePair.of(null, "foo").hashCode(), ImmutablePair.of(null, "foo").hashCode());
assertEquals(ImmutablePair.nullPair(), ImmutablePair.nullPair());
assertNull(ImmutablePair.nullPair().getKey());
assertNull(ImmutablePair.nullPair().getLeft());
assertNull(ImmutablePair.nullPair().getRight());
assertSame(ImmutablePair.nullPair(), ImmutablePair.nullPair());
// How do we assert that?final ImmutablePair<String, String> pair = ImmutablePair.nullPair();
assertNotNull(pair);
assertNull(ImmutablePair.nullPair().getValue());
assertThrows(NullPointerException.class, () -> ImmutablePair.ofNonNull(null, null));
assertThrows(NullPointerException.class, () -> ImmutablePair.ofNonNull(null, "x"));
assertThrows(NullPointerException.class, () -> ImmutablePair.ofNonNull("x", null));
assertEquals("x", pair.left);
assertEquals("y", pair.right);
assertEquals(entry.getKey(), pair.getLeft());
assertEquals(entry.getValue(), pair.getRight());
assertEquals(0, pair.left.intValue());
assertEquals(0, pair.getLeft().intValue());
assertEquals("foo", pair.right);
assertEquals("foo", pair.getRight());
assertNull(pair2.left);
assertNull(pair2.getLeft());
assertEquals("bar", pair2.right);
assertEquals("bar", pair2.getRight());
assertNull(pair3.left);
assertNull(pair3.right);
assertEquals(origPair, deserializedPair);
assertEquals(origPair.hashCode(), deserializedPair.hashCode());
assertEquals("(null,null)", ImmutablePair.of(null, null).toString());
assertEquals("(null,two)", ImmutablePair.of(null, "two").toString());
assertEquals("(one,null)", ImmutablePair.of("one", null).toString());
assertEquals("(one,two)", ImmutablePair.of("one", "two").toString());
assertEquals("(Key,null)", pair.toString());
assertEquals("(null,Value)", pair.toString());
assertEquals(value1, map.get(key1));
assertEquals(value1, map.get(ImmutablePair.of(o1, o2)));
assertEquals(item, entry.getKey());
assertEquals(item.getLeft() + "" + item.getRight(), entry.getValue());
assertThrows(UnsupportedOperationException.class, () -> pair.setValue("any"));
assertEquals(0, nowPair.left.intValue());
assertEquals(0, nowPair.getLeft().intValue());
assertEquals("foo", nowPair.right);
assertEquals("foo", nowPair.getRight());
assertEquals(oldPair, nowPair);
assertNull(nowPair2.left);
assertNull(nowPair2.getLeft());
assertEquals("bar", nowPair2.right);
assertEquals("bar", nowPair2.getRight());
assertNull(pair.getLeft());
assertNull(pair.getRight());
assertEquals(0, empty.length);
assertEquals(0, empty.length);
assertEquals(MutablePair.of(null, "foo"), MutablePair.of(null, "foo"));
assertNotEquals(MutablePair.of("foo", 0), MutablePair.of("foo", null));
assertNotEquals(MutablePair.of("foo", "bar"), MutablePair.of("xyz", "bar"));
assertEquals(p, p);
assertNotEquals(p, new Object());
assertEquals(MutablePair.of(null, "foo").hashCode(), MutablePair.of(null, "foo").hashCode());
assertEquals(42, pair.getLeft().intValue());
assertEquals("bar", pair.getRight());
assertThrows(NullPointerException.class, () -> MutablePair.ofNonNull(null, null));
assertThrows(NullPointerException.class, () -> MutablePair.ofNonNull(null, "x"));
assertThrows(NullPointerException.class, () -> MutablePair.ofNonNull("x", null));
assertEquals("x", pair.left);
assertEquals("y", pair.right);
assertEquals(entry.getKey(), pair.getLeft());
assertEquals(entry.getValue(), pair.getRight());
assertEquals(0, pair.getLeft().intValue());
assertEquals("foo", pair.getRight());
assertNull(pair2.getLeft());
assertEquals("bar", pair2.getRight());
assertNull(pair3.left);
assertNull(pair3.right);
assertEquals(origPair, deserializedPair);
assertEquals(origPair.hashCode(), deserializedPair.hashCode());
assertEquals("(null,null)", MutablePair.of(null, null).toString());
assertEquals("(null,two)", MutablePair.of(null, "two").toString());
assertEquals("(one,null)", MutablePair.of("one", null).toString());
assertEquals("(one,two)", MutablePair.of("one", "two").toString());
assertEquals(0, triple.left.intValue());
assertEquals(0, triple.getLeft().intValue());
assertEquals("foo", triple.middle);
assertEquals("foo", triple.getMiddle());
assertEquals(Boolean.TRUE, triple.right);
assertEquals(Boolean.TRUE, triple.getRight());
assertNull(triple2.left);
assertNull(triple2.getLeft());
assertEquals("bar", triple2.middle);
assertEquals("bar", triple2.getMiddle());
assertEquals(Integer.valueOf(42), triple2.right);
assertEquals(Integer.valueOf(42), triple2.getRight());
assertEquals(0, empty.length);
assertEquals(0, empty.length);
assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42));
assertNotEquals(ImmutableTriple.of("foo", 0, Boolean.TRUE), ImmutableTriple.of("foo", null, null));
assertNotEquals(ImmutableTriple.of("foo", "bar", "baz"), ImmutableTriple.of("xyz", "bar", "blo"));
assertEquals(p, p);
assertNotEquals(p, new Object());
assertEquals(ImmutableTriple.of(null, "foo", Boolean.TRUE).hashCode(), ImmutableTriple.of(null, "foo", Boolean.TRUE).hashCode());
assertEquals(ImmutableTriple.nullTriple(), ImmutableTriple.nullTriple());
assertNull(ImmutableTriple.nullTriple().getLeft());
assertNull(ImmutableTriple.nullTriple().getMiddle());
assertNull(ImmutableTriple.nullTriple().getRight());
assertSame(ImmutableTriple.nullTriple(), ImmutableTriple.nullTriple());
// How do we assert that?final ImmutableTriple<String, String, String> triple = ImmutableTriple.nullTriple();
assertNotNull(triple);
assertThrows(NullPointerException.class, () -> ImmutableTriple.ofNonNull(null, null, null));
assertThrows(NullPointerException.class, () -> ImmutableTriple.ofNonNull(null, null, "z"));
assertThrows(NullPointerException.class, () -> ImmutableTriple.ofNonNull(null, "y", "z"));
assertThrows(NullPointerException.class, () -> ImmutableTriple.ofNonNull("x", null, null));
assertThrows(NullPointerException.class, () -> ImmutableTriple.ofNonNull("x", "y", null));
assertEquals("x", pair.left);
assertEquals("y", pair.middle);
assertEquals("z", pair.right);
assertEquals(origTriple, deserializedTriple);
assertEquals(origTriple.hashCode(), deserializedTriple.hashCode());
assertEquals("(null,null,null)", ImmutableTriple.of(null, null, null).toString());
assertEquals("(null,two,null)", ImmutableTriple.of(null, "two", null).toString());
assertEquals("(one,null,null)", ImmutableTriple.of("one", null, null).toString());
assertEquals("(one,two,null)", ImmutableTriple.of("one", "two", null).toString());
assertEquals("(null,two,three)", ImmutableTriple.of(null, "two", "three").toString());
assertEquals("(one,null,three)", ImmutableTriple.of("one", null, "three").toString());
assertEquals("(one,two,three)", MutableTriple.of("one", "two", "three").toString());
assertEquals(0, triple.left.intValue());
assertEquals(0, triple.getLeft().intValue());
assertEquals("foo", triple.middle);
assertEquals("foo", triple.getMiddle());
assertEquals(Boolean.FALSE, triple.right);
assertEquals(Boolean.FALSE, triple.getRight());
assertNull(triple2.left);
assertNull(triple2.getLeft());
assertEquals("bar", triple2.middle);
assertEquals("bar", triple2.getMiddle());
assertEquals(Boolean.TRUE, triple2.right);
assertEquals(Boolean.TRUE, triple2.getRight());
assertEquals(value1, map.get(key1));
assertEquals(value1, map.get(ImmutableTriple.of(o1, o2, o3)));
assertEquals(item, entry.getKey());
assertEquals(item.getLeft() + "" + item.getMiddle() + "" + item.getRight(), entry.getValue());
assertThrows(NullPointerException.class, () -> MutableTriple.ofNonNull(null, null, null));
assertThrows(NullPointerException.class, () -> MutableTriple.ofNonNull(null, null, "z"));
assertThrows(NullPointerException.class, () -> MutableTriple.ofNonNull(null, "y", "z"));
assertThrows(NullPointerException.class, () -> MutableTriple.ofNonNull("x", null, null));
assertThrows(NullPointerException.class, () -> MutableTriple.ofNonNull("x", "y", null));
assertEquals("x", pair.left);
assertEquals("y", pair.middle);
assertEquals("z", pair.right);
assertEquals(0, triple.getLeft().intValue());
assertEquals("foo", triple.getMiddle());
assertEquals(Boolean.FALSE, triple.getRight());
assertNull(triple2.getLeft());
assertEquals("bar", triple2.getMiddle());
assertEquals("hello", triple2.getRight());
assertNull(triple.getLeft());
assertNull(triple.getMiddle());
assertNull(triple.getRight());
assertEquals(0, empty.length);
assertEquals(0, empty.length);
assertEquals(MutableTriple.of(null, "foo", "baz"), MutableTriple.of(null, "foo", "baz"));
assertNotEquals(MutableTriple.of("foo", 0, Boolean.TRUE), MutableTriple.of("foo", null, Boolean.TRUE));
assertNotEquals(MutableTriple.of("foo", "bar", "baz"), MutableTriple.of("xyz", "bar", "baz"));
assertNotEquals(MutableTriple.of("foo", "bar", "baz"), MutableTriple.of("foo", "bar", "blo"));
assertEquals(p, p);
assertNotEquals(p, new Object());
assertEquals(MutableTriple.of(null, "foo", "baz").hashCode(), MutableTriple.of(null, "foo", "baz").hashCode());
assertEquals(42, triple.getLeft().intValue());
assertEquals("bar", triple.getMiddle());
assertEquals(Boolean.FALSE, triple.getRight());
assertEquals(origTriple, deserializedTriple);
assertEquals(origTriple.hashCode(), deserializedTriple.hashCode());
assertEquals("(null,null,null)", MutableTriple.of(null, null, null).toString());
assertEquals("(null,two,null)", MutableTriple.of(null, "two", null).toString());
assertEquals("(one,null,null)", MutableTriple.of("one", null, null).toString());
assertEquals("(one,two,null)", MutableTriple.of("one", "two", null).toString());
assertEquals("(null,two,three)", MutableTriple.of(null, "two", "three").toString());
assertEquals("(one,null,three)", MutableTriple.of("one", null, "three").toString());
assertEquals("(one,two,three)", MutableTriple.of("one", "two", "three").toString());
assertEquals(0, triple.getLeft().intValue());
assertEquals("foo", triple.getMiddle());
assertEquals(Boolean.TRUE, triple.getRight());
assertNull(triple2.getLeft());
assertEquals("bar", triple2.getMiddle());
assertEquals("hello", triple2.getRight());
assertNull(ArrayUtils.setAll(null, nullIntFunction));
assertArrayEquals(null, ArrayUtils.setAll(null, nullIntFunction));
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.setAll(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, nullIntFunction));
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils.setAll(ArrayUtils.EMPTY_OBJECT_ARRAY, nullIntFunction));
assertSame(array, array2);
assertEquals(i, array[i].intValue());
assertNull(ArrayUtils.setAll(null, nullSupplier));
assertArrayEquals(null, ArrayUtils.setAll(null, nullSupplier));
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.setAll(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, nullSupplier));
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils.setAll(ArrayUtils.EMPTY_OBJECT_ARRAY, nullSupplier));
assertSame(array, array2);
assertEquals(StringUtils.EMPTY, s);
assertEquals(FOO, StringUtils.trim(FOO + "  "));
assertEquals(FOO, StringUtils.trim(" " + FOO + "  "));
assertEquals(FOO, StringUtils.trim(" " + FOO));
assertEquals(FOO, StringUtils.trim(FOO + ""));
assertEquals("", StringUtils.trim(" \t\r\n\b "));
assertEquals("", StringUtils.trim(StringUtilsTest.TRIMMABLE));
assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trim(StringUtilsTest.NON_TRIMMABLE));
assertEquals("", StringUtils.trim(""));
assertNull(StringUtils.trim(null));
assertEquals(FOO, StringUtils.trimToNull(FOO + "  "));
assertEquals(FOO, StringUtils.trimToNull(" " + FOO + "  "));
assertEquals(FOO, StringUtils.trimToNull(" " + FOO));
assertEquals(FOO, StringUtils.trimToNull(FOO + ""));
assertNull(StringUtils.trimToNull(" \t\r\n\b "));
assertNull(StringUtils.trimToNull(StringUtilsTest.TRIMMABLE));
assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToNull(StringUtilsTest.NON_TRIMMABLE));
assertNull(StringUtils.trimToNull(""));
assertNull(StringUtils.trimToNull(null));
assertEquals(FOO, StringUtils.trimToEmpty(FOO + "  "));
assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO + "  "));
assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO));
assertEquals(FOO, StringUtils.trimToEmpty(FOO + ""));
assertEquals("", StringUtils.trimToEmpty(" \t\r\n\b "));
assertEquals("", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE));
assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE));
assertEquals("", StringUtils.trimToEmpty(""));
assertEquals("", StringUtils.trimToEmpty(null));
assertNull(StringUtils.strip(null));
assertEquals("", StringUtils.strip(""));
assertEquals("", StringUtils.strip("        "));
assertEquals("abc", StringUtils.strip("  abc  "));
assertEquals(StringUtilsTest.NON_WHITESPACE,StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));
assertNull(StringUtils.stripToNull(null));
assertNull(StringUtils.stripToNull(""));
assertNull(StringUtils.stripToNull("        "));
assertNull(StringUtils.stripToNull(StringUtilsTest.WHITESPACE));
assertEquals("ab c", StringUtils.stripToNull("  ab c  "));
assertEquals(StringUtilsTest.NON_WHITESPACE,StringUtils.stripToNull(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));
assertEquals("", StringUtils.stripToEmpty(null));
assertEquals("", StringUtils.stripToEmpty(""));
assertEquals("", StringUtils.stripToEmpty("        "));
assertEquals("", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE));
assertEquals("ab c", StringUtils.stripToEmpty("  ab c  "));
assertEquals(StringUtilsTest.NON_WHITESPACE,StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));
assertNull(StringUtils.strip(null, null));
assertEquals("", StringUtils.strip("", null));
assertEquals("", StringUtils.strip("        ", null));
assertEquals("abc", StringUtils.strip("  abc  ", null));
assertEquals(StringUtilsTest.NON_WHITESPACE,StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));
assertNull(StringUtils.strip(null, ""));
assertEquals("", StringUtils.strip("", ""));
assertEquals("        ", StringUtils.strip("        ", ""));
assertEquals("  abc  ", StringUtils.strip("  abc  ", ""));
assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, ""));
assertNull(StringUtils.strip(null, " "));
assertEquals("", StringUtils.strip("", " "));
assertEquals("", StringUtils.strip("        ", " "));
assertEquals("abc", StringUtils.strip("  abc  ", " "));
assertNull(StringUtils.strip(null, "ab"));
assertEquals("", StringUtils.strip("", "ab"));
assertEquals("        ", StringUtils.strip("        ", "ab"));
assertEquals("  abc  ", StringUtils.strip("  abc  ", "ab"));
assertEquals("c", StringUtils.strip("abcabab", "ab"));
assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, ""));
assertNull(StringUtils.stripStart(null, null));
assertEquals("", StringUtils.stripStart("", null));
assertEquals("", StringUtils.stripStart("        ", null));
assertEquals("abc  ", StringUtils.stripStart("  abc  ", null));
assertEquals(StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE,StringUtils.stripStart(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));
assertNull(StringUtils.stripStart(null, ""));
assertEquals("", StringUtils.stripStart("", ""));
assertEquals("        ", StringUtils.stripStart("        ", ""));
assertEquals("  abc  ", StringUtils.stripStart("  abc  ", ""));
assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, ""));
assertNull(StringUtils.stripStart(null, " "));
assertEquals("", StringUtils.stripStart("", " "));
assertEquals("", StringUtils.stripStart("        ", " "));
assertEquals("abc  ", StringUtils.stripStart("  abc  ", " "));
assertNull(StringUtils.stripStart(null, "ab"));
assertEquals("", StringUtils.stripStart("", "ab"));
assertEquals("        ", StringUtils.stripStart("        ", "ab"));
assertEquals("  abc  ", StringUtils.stripStart("  abc  ", "ab"));
assertEquals("cabab", StringUtils.stripStart("abcabab", "ab"));
assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, ""));
assertNull(StringUtils.stripEnd(null, null));
assertEquals("", StringUtils.stripEnd("", null));
assertEquals("", StringUtils.stripEnd("        ", null));
assertEquals("  abc", StringUtils.stripEnd("  abc  ", null));
assertEquals(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE,StringUtils.stripEnd(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));
assertNull(StringUtils.stripEnd(null, ""));
assertEquals("", StringUtils.stripEnd("", ""));
assertEquals("        ", StringUtils.stripEnd("        ", ""));
assertEquals("  abc  ", StringUtils.stripEnd("  abc  ", ""));
assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, ""));
assertNull(StringUtils.stripEnd(null, " "));
assertEquals("", StringUtils.stripEnd("", " "));
assertEquals("", StringUtils.stripEnd("        ", " "));
assertEquals("  abc", StringUtils.stripEnd("  abc  ", " "));
assertNull(StringUtils.stripEnd(null, "ab"));
assertEquals("", StringUtils.stripEnd("", "ab"));
assertEquals("        ", StringUtils.stripEnd("        ", "ab"));
assertEquals("  abc  ", StringUtils.stripEnd("  abc  ", "ab"));
assertEquals("abc", StringUtils.stripEnd("abcabab", "ab"));
assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, ""));
assertNull(StringUtils.stripAll((String[]) null));
assertArrayEquals(empty, StringUtils.stripAll()); // empty array
assertArrayEquals(new String[]{null}, StringUtils.stripAll((String) null)); // == new String[]{null}
assertArrayEquals(empty, StringUtils.stripAll(empty));
assertArrayEquals(foo, StringUtils.stripAll(fooSpace));
assertNull(StringUtils.stripAll(null, null));
assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null));
assertArrayEquals(foo, StringUtils.stripAll(fooDots, "."));
assertEquals("Cue", StringUtils.stripAccents(cue), "Failed to strip accents from " + cue);
assertEquals("AAAAAACEEEEIIIINOOOOOUUUUY",StringUtils.stripAccents(lots),"Failed to strip accents from " + lots);
assertNull(StringUtils.stripAccents(null), "Failed null safety");
assertEquals("", StringUtils.stripAccents(""), "Failed empty String");
assertEquals("control", StringUtils.stripAccents("control"), "Failed to handle non-accented text");
assertEquals("eclair", StringUtils.stripAccents("\u00E9clair"), "Failed to handle easy example");
assertEquals("ALOSZZCN aloszzcn", StringUtils.stripAccents("\u0104\u0141\u00D3\u015A\u017B\u0179\u0106\u0143 "+ "\u0105\u0142\u00F3\u015B\u017C\u017A\u0107\u0144"));
assertEquals(input, StringUtils.stripAccents(input), "Failed to handle non-accented text");
assertNotNull(new StringEscapeUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(StringEscapeUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(StringEscapeUtils.class.getModifiers()));
assertNull(StringEscapeUtils.escapeJava(null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.ESCAPE_JAVA.translate(null, null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.ESCAPE_JAVA.translate("", null));
assertEscapeJava("empty string", "", "");
assertEscapeJava(FOO, FOO);
assertEscapeJava("tab", "\\t", "\t");
assertEscapeJava("backslash", "\\\\", "\\");
assertEscapeJava("single quote should not be escaped", "'", "'");
assertEscapeJava("\\\\\\b\\t\\r", "\\\b\t\r");
assertEscapeJava("\\u1234", "\u1234");
assertEscapeJava("\\u0234", "\u0234");
assertEscapeJava("\\u00EF", "\u00ef");
assertEscapeJava("\\u0001", "\u0001");
assertEscapeJava("Should use capitalized Unicode hex", "\\uABCD", "\uabcd");
assertEscapeJava("He didn't say, \\\"stop!\\\"","He didn't say, \"stop!\"");
assertEscapeJava("non-breaking space", "This space is non-breaking:" + "\\u00A0","This space is non-breaking:\u00a0");
assertEscapeJava("\\uABCD\\u1234\\u012C","\uABCD\u1234\u012C");
assertEquals(expected, actual);
private void assertEscapeJava(final String escaped, final String original) throws IOException {assertEscapeJava(null, escaped, original);
private void assertEscapeJava(String message, final String expected, final String original) throws IOException {final String converted = StringEscapeUtils.escapeJava(original);
assertEquals(expected, converted, message);
assertEquals(expected, writer.toString());
assertNull(StringEscapeUtils.unescapeJava(null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.UNESCAPE_JAVA.translate(null, null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.UNESCAPE_JAVA.translate("", null));
assertThrows(RuntimeException.class, () -> StringEscapeUtils.unescapeJava("\\u02-3"));
assertUnescapeJava("", "");
assertUnescapeJava("test", "test");
assertUnescapeJava("\ntest\b", "\\ntest\\b");
assertUnescapeJava("\u123425foo\ntest\b", "\\u123425foo\\ntest\\b");
assertUnescapeJava("'\foo\teste\r", "\\'\\foo\\teste\\r");
assertUnescapeJava("", "\\");
assertUnescapeJava("lowercase Unicode", "\uABCDx", "\\uabcdx");
assertUnescapeJava("uppercase Unicode", "\uABCDx", "\\uABCDx");
assertUnescapeJava("Unicode as final character", "\uABCD", "\\uabcd");
private void assertUnescapeJava(final String unescaped, final String original) throws IOException {assertUnescapeJava(null, unescaped, original);
private void assertUnescapeJava(final String message, final String unescaped, final String original) throws IOException {final String expected = unescaped;
assertEquals(expected, actual,"unescape(String) failed" +(message == null ? "" : (": " + message)) +": expected '" + StringEscapeUtils.escapeJava(expected) +// we escape this so we can see it in the error message"' actual '" + StringEscapeUtils.escapeJava(actual) + "'");
assertEquals(unescaped, writer.toString());
assertNull(StringEscapeUtils.escapeEcmaScript(null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(null, null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.ESCAPE_ECMASCRIPT.translate("", null));
assertEquals("He didn\\'t say, \\\"stop!\\\"", StringEscapeUtils.escapeEcmaScript("He didn't say, \"stop!\""));
assertEquals("document.getElementById(\\\"test\\\").value = \\'<script>alert(\\'aaa\\');<\\/script>\\';",
assertNull(StringEscapeUtils.escapeEcmaScript(null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.UNESCAPE_ECMASCRIPT.translate(null, null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.UNESCAPE_ECMASCRIPT.translate("", null));
assertEquals("He didn't say, \"stop!\"", StringEscapeUtils.unescapeEcmaScript("He didn\\'t say, \\\"stop!\\\""));
assertEquals("document.getElementById(\"test\").value = '<script>alert('aaa');</script>';",
assertEquals(expected, StringEscapeUtils.escapeHtml4(original), message);
assertEquals(expected, actual, message);
assertEquals(expected, StringEscapeUtils.unescapeHtml4(original), message);
assertEquals(expected, actual, message);
assertEquals("Fran\u00E7ais", StringEscapeUtils.unescapeHtml4("Fran\u00E7ais"), "funny chars pass through OK");
assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml4("Hello&;World"));
assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml4("Hello&#;World"));
assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml4("Hello&# ;World"));
assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml4("Hello&##;World"));
assertEquals("\u0080\u009F", StringEscapeUtils.unescapeHtml4("&#x80;&#x9F;"), "hex number unescape");
assertEquals("\u0080\u009F", StringEscapeUtils.unescapeHtml4("&#X80;&#X9F;"), "hex number unescape");
assertEquals(expected, StringEscapeUtils.unescapeHtml4(escapedC1 + escapedC2), "hex number unescape index " + (int) i);
assertEquals("&zzzz;", StringEscapeUtils.unescapeHtml4("&zzzz;"));
assertEquals("&Beta;", StringEscapeUtils.escapeHtml4("\u0392"));
assertEquals("\u0392", StringEscapeUtils.unescapeHtml4("&Beta;"));
assertEquals("&lt;abc&gt;", StringEscapeUtils.escapeXml("<abc>"));
assertEquals("<abc>", StringEscapeUtils.unescapeXml("&lt;abc&gt;"));
assertEquals("\u00A1", StringEscapeUtils.escapeXml("\u00A1"), "XML should not escape >0x7f values");
assertEquals("\u00A0", StringEscapeUtils.unescapeXml("&#160;"), "XML should be able to unescape >0x7f values");
assertEquals("\u00A0", StringEscapeUtils.unescapeXml("&#0160;"),
assertEquals("\u00A0", StringEscapeUtils.unescapeXml("&#00160;"),
assertEquals("\u00A0", StringEscapeUtils.unescapeXml("&#000160;"),
assertEquals("ain't", StringEscapeUtils.unescapeXml("ain&apos;t"));
assertEquals("ain&apos;t", StringEscapeUtils.escapeXml("ain't"));
assertEquals("", StringEscapeUtils.escapeXml(""));
assertNull(StringEscapeUtils.escapeXml(null));
assertNull(StringEscapeUtils.unescapeXml(null));
assertEquals("&lt;abc&gt;", sw.toString(), "XML was escaped incorrectly");
assertEquals("<abc>", sw.toString(), "XML was unescaped incorrectly");
assertEquals("a&lt;b&gt;c&quot;d&apos;e&amp;f", StringEscapeUtils.escapeXml10("a<b>c\"d'e&f"));
assertEquals("a\tb\rc\nd", StringEscapeUtils.escapeXml10("a\tb\rc\nd"), "XML 1.0 should not escape \t \n \r");
assertEquals("ab", StringEscapeUtils.escapeXml10("a\u0000\u0001\u0008\u000b\u000c\u000e\u001fb"),"XML 1.0 should omit most #x0-x8 | #xb | #xc | #xe-#x19");
assertEquals("a\ud7ff  \ue000b", StringEscapeUtils.escapeXml10("a\ud7ff\ud800 \udfff \ue000b"),"XML 1.0 should omit #xd800-#xdfff");
assertEquals("a\ufffdb", StringEscapeUtils.escapeXml10("a\ufffd\ufffe\uffffb"),"XML 1.0 should omit #xfffe | #xffff");
assertEquals("a\u007e&#127;&#132;\u0085&#134;&#159;\u00a0b",
assertEquals("a&lt;b&gt;c&quot;d&apos;e&amp;f", StringEscapeUtils.escapeXml11("a<b>c\"d'e&f"));
assertEquals("a\tb\rc\nd", StringEscapeUtils.escapeXml11("a\tb\rc\nd"), "XML 1.1 should not escape \t \n \r");
assertEquals("ab", StringEscapeUtils.escapeXml11("a\u0000b"), "XML 1.1 should omit #x0");
assertEquals("a&#1;&#8;&#11;&#12;&#14;&#31;b",
assertEquals("a\u007e&#127;&#132;\u0085&#134;&#159;\u00a0b",
assertEquals("a\ud7ff  \ue000b", StringEscapeUtils.escapeXml11("a\ud7ff\ud800 \udfff \ue000b"),"XML 1.1 should omit #xd800-#xdfff");
assertEquals("a\ufffdb", StringEscapeUtils.escapeXml11("a\ufffd\ufffe\uffffb"),"XML 1.1 should omit #xfffe | #xffff");
assertEquals("&#144308;", escapeXml.translate("\uD84C\uDFB4"),
assertEquals("a b c &#144308;", escapeXml.translate("a b c \uD84C\uDFB4"),
assertEquals("&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8;", escapeXml.translate("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008"));
assertEquals("\t", escapeXml.translate("\t")); // 0x9
assertEquals("\n", escapeXml.translate("\n")); // 0xA
assertEquals("&#11;&#12;", escapeXml.translate("\u000B\u000C"));
assertEquals("\r", escapeXml.translate("\r")); // 0xD
assertEquals("Hello World! Ain&apos;t this great?", escapeXml.translate("Hello World! Ain't this great?"));
assertEquals("&#14;&#15;&#24;&#25;", escapeXml.translate("\u000E\u000F\u0018\u0019"));
assertEquals("\uD84C\uDFB4", StringEscapeUtils.unescapeXml("&#144308;"),
assertEquals("a b c \uD84C\uDFB4", StringEscapeUtils.unescapeXml("a b c &#144308;"),
assertEquals("<P&O>", StringEscapeUtils.unescapeHtml4("&lt;P&O&gt;"));
assertEquals("test & <", StringEscapeUtils.unescapeHtml4("test & &lt;"));
assertEquals("<P&O>", StringEscapeUtils.unescapeXml("&lt;P&O&gt;"));
assertEquals("test & <", StringEscapeUtils.unescapeXml("test & &lt;"));
assertEquals("& &", StringEscapeUtils.unescapeHtml4("& &amp;"));
assertEquals("foo.bar",            StringEscapeUtils.escapeCsv("foo.bar"));
assertEquals("\"foo,bar\"",        StringEscapeUtils.escapeCsv("foo,bar"));
assertEquals("\"foo\nbar\"",       StringEscapeUtils.escapeCsv("foo\nbar"));
assertEquals("\"foo\rbar\"",       StringEscapeUtils.escapeCsv("foo\rbar"));
assertEquals("\"foo\"\"bar\"",     StringEscapeUtils.escapeCsv("foo\"bar"));
assertEquals("foo\uD84C\uDFB4bar", StringEscapeUtils.escapeCsv("foo\uD84C\uDFB4bar"));
assertEquals("",   StringEscapeUtils.escapeCsv(""));
assertNull(StringEscapeUtils.escapeCsv(null));
assertEquals(expected, writer.toString());
assertThrows(IllegalStateException.class, () -> StringEscapeUtils.ESCAPE_CSV.translate("foo", -1, writer));
assertEquals("foo.bar",              StringEscapeUtils.unescapeCsv("foo.bar"));
assertEquals("foo,bar",              StringEscapeUtils.unescapeCsv("\"foo,bar\""));
assertEquals("foo\nbar",             StringEscapeUtils.unescapeCsv("\"foo\nbar\""));
assertEquals("foo\rbar",             StringEscapeUtils.unescapeCsv("\"foo\rbar\""));
assertEquals("foo\"bar",             StringEscapeUtils.unescapeCsv("\"foo\"\"bar\""));
assertEquals("foo\uD84C\uDFB4bar",   StringEscapeUtils.unescapeCsv("foo\uD84C\uDFB4bar"));
assertEquals("",   StringEscapeUtils.unescapeCsv(""));
assertNull(StringEscapeUtils.unescapeCsv(null));
assertEquals("\"foo.bar\"",          StringEscapeUtils.unescapeCsv("\"foo.bar\""));
assertEquals(expected, writer.toString());
assertThrows(IllegalStateException.class, () -> StringEscapeUtils.UNESCAPE_CSV.translate("foo", -1, writer));
assertEquals(original, escaped, "High Unicode should not have been escaped");
assertEquals(original, unescaped, "High Unicode should have been unchanged");
//        assertEquals( "High Unicode should have been unescaped", original, unescapedFromEntity);
assertEquals(original, escaped,"Hiragana character Unicode behavior should not be being escaped by escapeHtml4");
assertEquals(escaped, unescaped, "Hiragana character Unicode behavior has changed - expected no unescaping");
assertTrue(escaped.endsWith("}]"), escaped);
assertTrue(escaped.endsWith("\"valueCode\\\":\\\"\\\"}]"), escaped);
assertEquals(input, escaped);
assertEquals(bellsTest, valueTest);
assertNull(StringEscapeUtils.escapeJson(null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.ESCAPE_JSON.translate(null, null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.ESCAPE_JSON.translate("", null));
assertEquals("He didn't say, \\\"stop!\\\"", StringEscapeUtils.escapeJson("He didn't say, \"stop!\""));
assertEquals(expected, StringEscapeUtils.escapeJson(input));
assertNull(StringEscapeUtils.unescapeJson(null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.UNESCAPE_JSON.translate(null, null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.UNESCAPE_JSON.translate("", null));
assertEquals("He didn't say, \"stop!\"", StringEscapeUtils.unescapeJson("He didn't say, \\\"stop!\\\""));
assertEquals(expected, StringEscapeUtils.unescapeJson(input));
assertArrayEquals(new boolean[]{false}, newArray);
assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new boolean[]{true}, newArray);
assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new boolean[]{false, true, false, true}, newArray);
assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new byte[]{0}, newArray);
assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new byte[]{1}, newArray);
assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new byte[]{0, 1, 2, 3}, newArray);
assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new byte[]{4, 1, 2, 3}, newArray);
assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new char[]{0}, newArray);
assertEquals(Character.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new char[]{1}, newArray);
assertEquals(Character.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new char[]{0, 1, 2, 3}, newArray);
assertEquals(Character.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new char[]{4, 1, 2, 3}, newArray);
assertEquals(Character.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new double[]{0}, newArray);
assertEquals(Double.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new double[]{1}, newArray);
assertEquals(Double.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new double[]{0, 1, 2, 3}, newArray);
assertEquals(Double.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new double[]{4, 1, 2, 3}, newArray);
assertEquals(Double.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new float[]{0}, newArray);
assertEquals(Float.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new float[]{1}, newArray);
assertEquals(Float.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new float[]{0, 1, 2, 3}, newArray);
assertEquals(Float.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new float[]{4, 1, 2, 3}, newArray);
assertEquals(Float.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new int[]{0}, newArray);
assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new int[]{1}, newArray);
assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new int[]{0, 1, 2, 3}, newArray);
assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new int[]{4, 1, 2, 3}, newArray);
assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new long[]{0}, newArray);
assertEquals(Long.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new long[]{1}, newArray);
assertEquals(Long.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new long[]{0, 1, 2, 3}, newArray);
assertEquals(Long.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new long[]{4, 1, 2, 3}, newArray);
assertEquals(Long.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new String[]{"a"}, newArray);
assertArrayEquals(new Object[]{"a"}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new String[]{"a"}, newStringArray);
assertArrayEquals(new Object[]{"a"}, newStringArray);
assertEquals(String.class, newStringArray.getClass().getComponentType());
assertArrayEquals(new String[] { null, "a", "b", "c" }, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new String[] { "d", "a", "b", "c" }, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new Number[] { Float.valueOf(3), Integer.valueOf(1), Double.valueOf(2) }, newArray);
assertEquals(Number.class, newArray.getClass().getComponentType());
assertArrayEquals(new Float[] { Float.valueOf(3) }, newArray);
assertEquals(Float.class, newArray.getClass().getComponentType());
assertArrayEquals(new short[]{0}, newArray);
assertEquals(Short.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new short[]{1}, newArray);
assertEquals(Short.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new short[]{0, 1, 2, 3}, newArray);
assertEquals(Short.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new short[]{4, 1, 2, 3}, newArray);
assertEquals(Short.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, newArray);
assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new boolean[]{true}, newArray);
assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new boolean[]{true, false, true, false}, newArray);
assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new byte[]{0}, newArray);
assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new byte[]{1}, newArray);
assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new byte[]{1, 2, 3, 0}, newArray);
assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new byte[]{1, 2, 3, 4}, newArray);
assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new char[]{0}, newArray);
assertEquals(Character.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new char[]{1}, newArray);
assertEquals(Character.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new char[]{1, 2, 3, 0}, newArray);
assertEquals(Character.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new char[]{1, 2, 3, 4}, newArray);
assertEquals(Character.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new double[]{0}, newArray);
assertEquals(Double.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new double[]{1}, newArray);
assertEquals(Double.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new double[]{1, 2, 3, 0}, newArray);
assertEquals(Double.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new double[]{1, 2, 3, 4}, newArray);
assertEquals(Double.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new float[]{0}, newArray);
assertEquals(Float.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new float[]{1}, newArray);
assertEquals(Float.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new float[]{1, 2, 3, 0}, newArray);
assertEquals(Float.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new float[]{1, 2, 3, 4}, newArray);
assertEquals(Float.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new int[]{0}, newArray);
assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new int[]{1}, newArray);
assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new int[]{1, 2, 3, 0}, newArray);
assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new int[]{1, 2, 3, 4}, newArray);
assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new long[]{0}, newArray);
assertEquals(Long.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new long[]{1}, newArray);
assertEquals(Long.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new long[]{1, 2, 3, 0}, newArray);
assertEquals(Long.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new long[]{1, 2, 3, 4}, newArray);
assertEquals(Long.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new String[]{"a"}, newArray);
assertArrayEquals(new Object[]{"a"}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new String[]{"a"}, newStringArray);
assertArrayEquals(new Object[]{"a"}, newStringArray);
assertEquals(String.class, newStringArray.getClass().getComponentType());
assertArrayEquals(new String[]{"a", "b", "c", null}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new String[]{"a", "b", "c", "d"}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new Number[]{Integer.valueOf(1), Double.valueOf(2), Float.valueOf(3)}, newArray);
assertEquals(Number.class, newArray.getClass().getComponentType());
assertArrayEquals(new Float[]{Float.valueOf(3)}, newArray);
assertEquals(Float.class, newArray.getClass().getComponentType());
assertArrayEquals(new short[]{0}, newArray);
assertEquals(Short.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new short[]{1}, newArray);
assertEquals(Short.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new short[]{1, 2, 3, 0}, newArray);
assertEquals(Short.TYPE, newArray.getClass().getComponentType());
assertArrayEquals(new short[]{1, 2, 3, 4}, newArray);
assertEquals(Short.TYPE, newArray.getClass().getComponentType());
assertNull(ArrayUtils.addAll(null, (Object[]) null));
assertNotSame(stringArray1, newArray);
assertArrayEquals(stringArray1, newArray);
assertArrayEquals(new String[]{"a", "b", "c"}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertNotSame(stringArray2, newArray);
assertArrayEquals(stringArray2, newArray);
assertArrayEquals(new String[]{"1", "2", "3"}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, newArray);
assertArrayEquals(new String[]{}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, newArray);
assertArrayEquals(new String[]{}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, newArray);
assertArrayEquals(new String[]{}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new String[]{null, null}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new boolean[]{true, false, false, true}, ArrayUtils.addAll(new boolean[]{true, false}, false, true));
assertArrayEquals(new boolean[]{false, true}, ArrayUtils.addAll(null, new boolean[]{false, true}));
assertArrayEquals(new boolean[]{true, false}, ArrayUtils.addAll(new boolean[]{true, false}, null));
assertArrayEquals(new char[]{'a', 'b', 'c', 'd'}, ArrayUtils.addAll(new char[]{'a', 'b'}, 'c', 'd'));
assertArrayEquals(new char[]{'c', 'd'}, ArrayUtils.addAll(null, new char[]{'c', 'd'}));
assertArrayEquals(new char[]{'a', 'b'}, ArrayUtils.addAll(new char[]{'a', 'b'}, null));
assertArrayEquals(new byte[]{(byte) 0, (byte) 1, (byte) 2, (byte) 3}, ArrayUtils.addAll(new byte[]{(byte) 0, (byte) 1}, (byte) 2, (byte) 3));
assertArrayEquals(new byte[]{(byte) 2, (byte) 3}, ArrayUtils.addAll(null, new byte[]{(byte) 2, (byte) 3}));
assertArrayEquals(new byte[]{(byte) 0, (byte) 1}, ArrayUtils.addAll(new byte[]{(byte) 0, (byte) 1}, null));
assertArrayEquals(new short[]{(short) 10, (short) 20, (short) 30, (short) 40}, ArrayUtils.addAll(new short[]{(short) 10, (short) 20}, (short) 30, (short) 40));
assertArrayEquals(new short[]{(short) 30, (short) 40}, ArrayUtils.addAll(null, new short[]{(short) 30, (short) 40}));
assertArrayEquals(new short[]{(short) 10, (short) 20}, ArrayUtils.addAll(new short[]{(short) 10, (short) 20}, null));
assertArrayEquals(new int[]{1, 1000, -1000, -1}, ArrayUtils.addAll(new int[]{1, 1000}, -1000, -1));
assertArrayEquals(new int[]{-1000, -1}, ArrayUtils.addAll(null, new int[]{-1000, -1}));
assertArrayEquals(new int[]{1, 1000}, ArrayUtils.addAll(new int[]{1, 1000}, null));
assertArrayEquals(new long[]{1L, -1L, 1000L, -1000L}, ArrayUtils.addAll(new long[]{1L, -1L}, 1000L, -1000L));
assertArrayEquals(new long[]{1000L, -1000L}, ArrayUtils.addAll(null, new long[]{1000L, -1000L}));
assertArrayEquals(new long[]{1L, -1L}, ArrayUtils.addAll(new long[]{1L, -1L}, null));
assertArrayEquals(new float[]{10.5f, 10.1f, 1.6f, 0.01f}, ArrayUtils.addAll(new float[]{10.5f, 10.1f}, 1.6f, 0.01f));
assertArrayEquals(new float[]{1.6f, 0.01f}, ArrayUtils.addAll(null, new float[]{1.6f, 0.01f}));
assertArrayEquals(new float[]{10.5f, 10.1f}, ArrayUtils.addAll(new float[]{10.5f, 10.1f}, null));
assertArrayEquals(new double[]{Math.PI, -Math.PI, 0, 9.99}, ArrayUtils.addAll(new double[]{Math.PI, -Math.PI}, 0, 9.99));
assertArrayEquals(new double[]{0, 9.99}, ArrayUtils.addAll(null, new double[]{0, 9.99}));
assertArrayEquals(new double[]{Math.PI, -Math.PI}, ArrayUtils.addAll(new double[]{Math.PI, -Math.PI}, null));
assertArrayEquals(new String[]{"a"}, newArray);
assertArrayEquals(new Object[]{"a"}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new String[]{null, "a", "b", "c"}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new String[]{"a", null, "b", "c"}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new String[]{"a", "b", "c", null}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertArrayEquals(new String[]{"a", "b", "c", "d"}, newArray);
assertEquals(String.class, newArray.getClass().getComponentType());
assertEquals(String.class, newArray.getClass().getComponentType());
assertNotNull(result);
assertEquals(4, result.length);
assertEquals("1", result[0]);
assertEquals("2", result[1]);
assertEquals("3", result[2]);
assertEquals("4", result[3]);
assertNotNull(result2);
assertEquals(4, result2.length);
assertEquals("1", result2[0]);
assertEquals("2", result2[1]);
assertEquals("4", result2[2]);
assertEquals("5", result2[3]);
assertArrayEquals(new boolean[]{true}, booleanArray);
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( null, -1, true));
assertEquals("Index: -1, Length: 0", e.getMessage());
assertArrayEquals(new boolean[]{false, true}, booleanArray);
assertArrayEquals(new boolean[]{false, true}, booleanArray);
assertArrayEquals(new boolean[]{true, true, false}, booleanArray);
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add(new boolean[] { true, false }, 4, true));
assertEquals("Index: 4, Length: 2", e.getMessage());
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add(new boolean[] { true, false }, -1, true));
assertEquals("Index: -1, Length: 2", e.getMessage());
assertArrayEquals(new char[]{'a'}, charArray);
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( (char[]) null, -1, 'a' ));
assertEquals("Index: -1, Length: 0", e.getMessage());
assertArrayEquals(new char[]{'b', 'a'}, charArray);
assertArrayEquals(new char[]{'c', 'a', 'b'}, charArray);
assertArrayEquals(new char[]{'a', 'k', 'b'}, charArray);
assertArrayEquals(new char[]{'a', 't', 'b', 'c'}, charArray);
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new char[] { 'a', 'b' }, 4, 'c'));
assertEquals("Index: 4, Length: 2", e.getMessage());
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new char[] { 'a', 'b' }, -1, 'c'));
assertEquals("Index: -1, Length: 2", e.getMessage());
assertArrayEquals(new short[]{2, 1}, shortArray);
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( (short[]) null, -1, (short) 2));
assertEquals("Index: -1, Length: 0", e.getMessage());
assertArrayEquals(new short[]{2, 6, 10}, shortArray);
assertArrayEquals(new short[]{-4, 2, 6}, shortArray);
assertArrayEquals(new short[]{2, 6, 1, 3}, shortArray);
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new short[] { 2, 6 }, 4, (short) 10));
assertEquals("Index: 4, Length: 2", e.getMessage());
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new short[] { 2, 6 }, -1, (short) 10));
assertEquals("Index: -1, Length: 2", e.getMessage());
assertArrayEquals(new byte[]{2, 1}, byteArray);
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( (byte[]) null, -1, (byte) 2));
assertEquals("Index: -1, Length: 0", e.getMessage());
assertArrayEquals(new byte[]{2, 6, 3}, byteArray);
assertArrayEquals(new byte[]{1, 2, 6}, byteArray);
assertArrayEquals(new byte[]{2, 6, 1, 3}, byteArray);
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new byte[] { 2, 6 }, 4, (byte) 3));
assertEquals("Index: 4, Length: 2", e.getMessage());
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new byte[] { 2, 6 }, -1, (byte) 3));
assertEquals("Index: -1, Length: 2", e.getMessage());
assertArrayEquals(new int[]{2, 1}, intArray);
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( (int[]) null, -1, 2));
assertEquals("Index: -1, Length: 0", e.getMessage());
assertArrayEquals(new int[]{2, 6, 10}, intArray);
assertArrayEquals(new int[]{-4, 2, 6}, intArray);
assertArrayEquals(new int[]{2, 6, 1, 3}, intArray);
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new int[] { 2, 6 }, 4, 10));
assertEquals("Index: 4, Length: 2", e.getMessage());
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new int[] { 2, 6 }, -1, 10));
assertEquals("Index: -1, Length: 2", e.getMessage());
assertArrayEquals(new long[]{2L, 1L}, longArray);
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( (long[]) null, -1, 2L));
assertEquals("Index: -1, Length: 0", e.getMessage());
assertArrayEquals(new long[]{2L, 6L, 10L}, longArray);
assertArrayEquals(new long[]{-4L, 2L, 6L}, longArray);
assertArrayEquals(new long[]{2L, 6L, 1L, 3L}, longArray);
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new long[] { 2L, 6L }, 4, 10L));
assertEquals("Index: 4, Length: 2", e.getMessage());
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new long[] { 2L, 6L }, -1, 10L));
assertEquals("Index: -1, Length: 2", e.getMessage());
assertArrayEquals(new float[]{2.2f, 1.1f}, floatArray);
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( (float[]) null, -1, 2.2f));
assertEquals("Index: -1, Length: 0", e.getMessage());
assertArrayEquals(new float[]{2.3f, 6.4f, 10.5f}, floatArray);
assertArrayEquals(new float[]{-4.8f, 2.6f, 6.7f}, floatArray);
assertArrayEquals(new float[]{2.9f, 6.0f, 1.0f, 0.3f}, floatArray);
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new float[] { 2.3f, 6.4f }, 4, 10.5f));
assertEquals("Index: 4, Length: 2", e.getMessage());
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new float[] { 2.3f, 6.4f }, -1, 10.5f));
assertEquals("Index: -1, Length: 2", e.getMessage());
assertArrayEquals(new double[]{2.2, 1.1}, doubleArray);
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add(null, -1, 2.2));
assertEquals("Index: -1, Length: 0", e.getMessage());
assertArrayEquals(new double[]{2.3, 6.4, 10.5}, doubleArray);
assertArrayEquals(new double[]{-4.8, 2.6, 6.7}, doubleArray);
assertArrayEquals(new double[]{2.9, 6.0, 1.0, 0.3}, doubleArray);
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new double[] { 2.3, 6.4 }, 4, 10.5));
assertEquals("Index: 4, Length: 2", e.getMessage());
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new double[] { 2.3, 6.4 }, -1, 10.5));
assertEquals("Index: -1, Length: 2", e.getMessage());
assertEquals(2, n.length);
assertEquals(Number.class, n.getClass().getComponentType());
assertThrows(IllegalArgumentException.class,() -> ArrayUtils.addAll(new Integer[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)}));
assertThrows(IllegalArgumentException.class, () -> ArrayUtils.add(stringArray, aString));
assertThrows(IllegalArgumentException.class, () -> ArrayUtils.add(stringArray, 0, aString));
assertCorrect("Issue in (String)", nie, message, null, null);
assertCorrect("Issue in (Throwable)", nie, nested.toString(), nested, null);
assertCorrect("Issue in (String, Throwable)", nie, message, nested, null);
assertCorrect("Issue in (String, String)", nie, message, null, code);
assertCorrect("Issue in (Throwable, String)", nie, nested.toString(), nested, code);
assertCorrect("Issue in (String, Throwable, String)", nie, message, nested, code);
assertNull(new NotImplementedException().getCode());
private void assertCorrect(final String assertMessage, final NotImplementedException nie, final String message, final Throwable nested, final String code) {assertNotNull(nie, assertMessage + ": target is null");
assertEquals(message, nie.getMessage(), assertMessage + ": Message not equal");
assertEquals(nested, nie.getCause(), assertMessage + ": Nested throwable not equal");
assertEquals(code, nie.getCode(), assertMessage + ": Code not equal");
private void assertEvenNumbers(final List<Integer> output) {assertEquals(3, output.size());
assertEquals((i + 1) * 2, output.get(i).intValue());
assertEvenNumbers(output);
final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, testMethod);
assertThat(thrown.getMessage(), is(equalTo("Invalid argument: " + 5)));
final OutOfMemoryError thrown = assertThrows(OutOfMemoryError.class, testMethod);
assertThat(thrown.getMessage(), is(nullValue()));
final UndeclaredThrowableException thrown = assertThrows(UndeclaredThrowableException.class, testMethod);
assertAll(() -> assertThat(thrown.getMessage(), is(nullValue())), () -> assertThat(thrown.getCause(), is(equalTo(se))));
final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, testMethod);
assertThat(thrown.getMessage(), is(nullValue()));
final OutOfMemoryError oomeThrown = assertThrows(OutOfMemoryError.class, oomeTestMethod);
assertThat(oomeThrown.getMessage(), is(nullValue()));
final UndeclaredThrowableException seThrown = assertThrows(UndeclaredThrowableException.class, seTestMethod);
assertAll(() -> assertThat(seThrown.getMessage(), is(nullValue())), () -> assertThat(seThrown.getCause(), is(equalTo(se))));
assertEquals(2, Streams.instancesOf(String.class, Arrays.asList("A", "B")).collect(Collectors.toList()).size());
assertEquals(2, Streams.instancesOf(String.class, Arrays.asList(null, "A", null, "B", null)).collect(Collectors.toList()).size());
assertEquals(0, Streams.instancesOf(String.class, Arrays.asList(null, null)).collect(Collectors.toList()).size());
assertEquals(2, Streams.instancesOf(String.class, objects).collect(Collectors.toList()).size());
assertEquals(2, Streams.nonNull(Arrays.asList("A", "B")).collect(Collectors.toList()).size());
assertEquals(2, Streams.nonNull(Arrays.asList(null, "A", null, "B", null)).collect(Collectors.toList()).size());
assertEquals(0, Streams.nonNull(Arrays.asList(null, null)).collect(Collectors.toList()).size());
assertEquals(0, Streams.nonNull(input).collect(Collectors.toList()).size());
assertEquals(0, Streams.of((Object[]) null).count());
assertEquals(1, Streams.of("foo").count());
assertEquals(2, Streams.of("foo", "bar").count());
assertEquals(2, Streams.of(Arrays.asList("A", "B")).collect(Collectors.toList()).size());
assertEquals(0, Streams.of(input).collect(Collectors.toList()).size());
assertEquals(0, Streams.of(table.elements()).count());
assertEquals(1, Streams.of(table.elements()).count());
assertEquals(2, Streams.of(table.elements()).count());
assertTrue(collect.contains("One"));
assertTrue(collect.contains("Two"));
assertEquals(2, collect.size());
assertEquals(2, Streams.of((Iterable<String>) Arrays.asList("A", "B")).collect(Collectors.toList()).size());
assertEquals(0, Streams.of(input).collect(Collectors.toList()).size());
assertEquals(2, Streams.of(Arrays.asList("A", "B").iterator()).collect(Collectors.toList()).size());
assertEquals(0, Streams.of(input).collect(Collectors.toList()).size());
assertEvenNumbers(output);
assertEquals(6, output.size());
assertEquals(i + 1, output.get(i).intValue());
assertEquals(6, output.size());
assertEquals(i + 1, output.get(i).intValue());
final NumberFormatException thrown = assertThrows(NumberFormatException.class, testMethod);
assertEquals("For input string: \"4 \"", thrown.getMessage());
assertEquals(6, Streams.stream(input).collect(Collectors.toList()).size());
assertEquals(0, Streams.stream(input).collect(Collectors.toList()).size());
assertNotNull(array);
assertEquals(3, array.length);
assertEquals("2", array[0]);
assertEquals("3", array[1]);
assertEquals("1", array[2]);
assertEquals("", Stream.of().collect(JOINING_0));
assertEquals("1", Stream.of(_1L).collect(JOINING_0));
assertEquals("12", Stream.of(_1L, _2L).collect(JOINING_0));
assertEquals("123", Stream.of(_1L, _2L, _3L).collect(JOINING_0));
assertEquals("1null3", Stream.of(_1L, null, _3L).collect(JOINING_0));
assertEquals("12", Stream.of(new AtomicLong(1), new AtomicLong(2)).collect(JOINING_0));
assertEquals("12", Stream.of(new Fixture(1), new Fixture(2)).collect(JOINING_0));
assertEquals("", Stream.of().collect(JOINING_1));
assertEquals("1", Stream.of(_1L).collect(JOINING_1));
assertEquals("1-2", Stream.of(_1L, _2L).collect(JOINING_1));
assertEquals("1-2-3", Stream.of(_1L, _2L, _3L).collect(JOINING_1));
assertEquals("1-null-3", Stream.of(_1L, null, _3L).collect(JOINING_1));
assertEquals("1-2", Stream.of(new AtomicLong(1), new AtomicLong(2)).collect(JOINING_1));
assertEquals("1-2", Stream.of(new Fixture(1), new Fixture(2)).collect(JOINING_1));
assertEquals("<>", Stream.of().collect(JOINING_3));
assertEquals("<1>", Stream.of(_1L).collect(JOINING_3));
assertEquals("<1-2>", Stream.of(_1L, _2L).collect(JOINING_3));
assertEquals("<1-2-3>", Stream.of(_1L, _2L, _3L).collect(JOINING_3));
assertEquals("<1-null-3>", Stream.of(_1L, null, _3L).collect(JOINING_3));
assertEquals("<1-2>", Stream.of(new AtomicLong(1), new AtomicLong(2)).collect(JOINING_3));
assertEquals("<1-2>", Stream.of(new Fixture(1), new Fixture(2)).collect(JOINING_3));
assertEquals("<>", Stream.of().collect(JOINING_4));
assertEquals("<1>", Stream.of(_1L).collect(JOINING_4));
assertEquals("<1-2>", Stream.of(_1L, _2L).collect(JOINING_4));
assertEquals("<1-2-3>", Stream.of(_1L, _2L, _3L).collect(JOINING_4));
assertEquals("<1-null-3>", Stream.of(_1L, null, _3L).collect(JOINING_4));
assertEquals("<1-NUL-3>", Stream.of(_1L, null, _3L).collect(JOINING_4_NUL));
assertEquals("<1-2>", Stream.of(new AtomicLong(1), new AtomicLong(2)).collect(JOINING_4));
assertEquals("<1-2>", Stream.of(new Fixture(1), new Fixture(2)).collect(JOINING_4));
assertEquals("", Stream.of().collect(JOINING_0));
assertEquals("1", Stream.of("1").collect(JOINING_0));
assertEquals("12", Stream.of("1", "2").collect(JOINING_0));
assertEquals("123", Stream.of("1", "2", "3").collect(JOINING_0));
assertEquals("1null3", Stream.of("1", null, "3").collect(JOINING_0));
assertEquals("", Stream.of().collect(JOINING_1));
assertEquals("1", Stream.of("1").collect(JOINING_1));
assertEquals("1-2", Stream.of("1", "2").collect(JOINING_1));
assertEquals("1-2-3", Stream.of("1", "2", "3").collect(JOINING_1));
assertEquals("1-null-3", Stream.of("1", null, "3").collect(JOINING_1));
assertEquals("<>", Stream.of().collect(JOINING_3));
assertEquals("<1>", Stream.of("1").collect(JOINING_3));
assertEquals("<1-2>", Stream.of("1", "2").collect(JOINING_3));
assertEquals("<1-2-3>", Stream.of("1", "2", "3").collect(JOINING_3));
assertEquals("<1-null-3>", Stream.of("1", null, "3").collect(JOINING_3));
assertEquals("<>", Stream.of().collect(JOINING_4));
assertEquals("<1>", Stream.of("1").collect(JOINING_4));
assertEquals("<1-2>", Stream.of("1", "2").collect(JOINING_4));
assertEquals("<1-2-3>", Stream.of("1", "2", "3").collect(JOINING_4));
assertEquals("<1-null-3>", Stream.of("1", null, "3").collect(JOINING_4));
assertEquals("<1-NUL-3>", Stream.of("1", null, "3").collect(JOINING_4_NUL));
assertArrayEquals(new int[] {0, 1}, IntStreams.range(2).toArray());
assertArrayEquals(new int[] {0, 1, 2}, IntStreams.rangeClosed(2).toArray());
assertTrue(TypeUtils.equals(String.class, new TypeLiteral<String>() {}.value));
assertTrue(TypeUtils.equals(TypeUtils.parameterize(List.class, String.class),new TypeLiteral<List<String>>() {}.value));
assertTrue(TypeUtils.equals(String.class, stringType.getType()));
assertTrue(TypeUtils.equals(TypeUtils.parameterize(List.class, String.class), listOfStringType.getType()));
assertEquals(new TypeLiteral<String>() {}, new TypeLiteral<String>() {});
assertEquals(new TypeLiteral<List<String>>() {}, new TypeLiteral<List<String>>() {});
assertNotEquals(new TypeLiteral<String>() {}, new TypeLiteral<List<String>>() {});
assertThrows(NullPointerException.class, () -> new TypeLiteral() {});
assertEquals(a.getLeft(), b.getLeft());
assertArrayEquals(a.getRight(), b.getRight());
assertNotNull(MethodUtils.class.newInstance());
assertEquals("Byte...", TestBean.varOverload((byte) 1, (byte) 2));
assertEquals("Short...", TestBean.varOverload((short) 1, (short) 2));
assertEquals("Integer...", TestBean.varOverload(1, 2));
assertEquals("Long...", TestBean.varOverload(1L, 2L));
assertEquals("Float...", TestBean.varOverload(1f, 2f));
assertEquals("Double...", TestBean.varOverload(1d, 2d));
assertEquals("Character...", TestBean.varOverload('a', 'b'));
assertEquals("String...", TestBean.varOverload("a", "b"));
assertEquals("Boolean...", TestBean.varOverload(true, false));
assertEquals("Object...", TestBean.varOverload(1, "s"));
assertEquals("Object...", TestBean.varOverload(1, true));
assertEquals("Object...", TestBean.varOverload(1.1, true));
assertEquals("Object...", TestBean.varOverload('c', true));
assertEquals("Number...", TestBean.varOverload(1, 1.1));
assertEquals("Number...", TestBean.varOverload(1, 1L));
assertEquals("Number...", TestBean.varOverload(1d, 1f));
assertEquals("Number...", TestBean.varOverload((short) 1, (byte) 1));
assertEquals("Object...", TestBean.varOverload(1, 'c'));
assertEquals("Object...", TestBean.varOverload('c', "s"));
assertEquals("Byte...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", (byte) 1, (byte) 2));
assertEquals("Short...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", (short) 1, (short) 2));
assertEquals("Integer...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1, 2));
assertEquals("Long...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1L, 2L));
assertEquals("Float...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1f, 2f));
assertEquals("Double...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1d, 2d));
assertEquals("Character...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 'a', 'b'));
assertEquals("String...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", "a", "b"));
assertEquals("Boolean...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", true, false));
assertEquals("Object...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1, "s"));
assertEquals("Object...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1, true));
assertEquals("Object...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1.1, true));
assertEquals("Object...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 'c', true));
assertEquals("Number...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1, 1.1));
assertEquals("Number...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1, 1L));
assertEquals("Number...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1d, 1f));
assertEquals("Number...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", (short) 1, (byte) 1));
assertEquals("Object...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 1, 'c'));
assertEquals("Object...", MethodUtils.invokeStaticMethod(TestBean.class,"varOverload", 'c', "s"));
assertEquals("Object...", MethodUtils.invokeStaticMethod(TestBean.class, "varOverload",(Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));
assertEquals("Number...", MethodUtils.invokeStaticMethod(TestBean.class, "numOverload",(Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));
assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo",(Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));
assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo"));
assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo",(Object[]) null));
assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo",null, null));
assertEquals("foo(String)", MethodUtils.invokeMethod(testBean, "foo",""));
assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo",new Object()));
assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo",Boolean.TRUE));
assertEquals("foo(Integer)", MethodUtils.invokeMethod(testBean, "foo",NumberUtils.INTEGER_ONE));
assertEquals("foo(int)", MethodUtils.invokeMethod(testBean, "foo",NumberUtils.BYTE_ONE));
assertEquals("foo(long)", MethodUtils.invokeMethod(testBean, "foo",NumberUtils.LONG_ONE));
assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo",NumberUtils.DOUBLE_ONE));
assertEquals("foo(String...)", MethodUtils.invokeMethod(testBean, "foo","a", "b", "c"));
assertEquals("foo(String...)", MethodUtils.invokeMethod(testBean, "foo","a", "b", "c"));
assertEquals("foo(int, String...)", MethodUtils.invokeMethod(testBean, "foo",5, "a", "b", "c"));
assertEquals("foo(long...)", MethodUtils.invokeMethod(testBean, "foo",1L, 2L));
assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeMethod(testBean, "foo", 1, 2));
assertEquals("String...", MethodUtils.invokeMethod(testBean, "varOverload","a", null, "c"));
assertEquals("String...", MethodUtils.invokeMethod(testBean, "varOverload","a", "b", null));
assertEquals("Boolean...", MethodUtils.invokeMethod(testBean, "varOverload",new Object[] {null}));
assertEquals("Object...", MethodUtils.invokeMethod(testBean, "varOverload",(Object[]) null));
assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo",(Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));
assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo"));
assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo",(Object[]) null));
assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo",null, null));
assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean,"foo", ""));
assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean,"foo", new Object()));
assertEquals("foo(Integer)", MethodUtils.invokeExactMethod(testBean,"foo", NumberUtils.INTEGER_ONE));
assertEquals("foo(double)", MethodUtils.invokeExactMethod(testBean,"foo", new Object[]{NumberUtils.DOUBLE_ONE},new Class[]{Double.TYPE}));
assertThrows(NoSuchMethodException.class,() -> MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.BYTE_ONE));
assertThrows(NoSuchMethodException.class,() -> MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.LONG_ONE));
assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeExactMethod(testBean, "foo", Boolean.TRUE));
assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class,"bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));
assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class,"bar", (Object[]) null));
assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class,"bar", null, null));
assertEquals("bar(String)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", ""));
assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", new Object()));
assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", Boolean.TRUE));
assertEquals("bar(Integer)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE));
assertEquals("bar(int)", MethodUtils.invokeStaticMethod(TestBean.class,"bar", NumberUtils.BYTE_ONE));
assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.DOUBLE_ONE));
assertEquals("bar(String...)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", "a", "b"));
assertEquals("bar(long...)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", 1L, 2L));
assertEquals("bar(int, String...)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE, "a", "b"));
assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeStaticMethod(TestBean.class, "does_not_exist"));
assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class,"bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));
assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class,"bar", (Object[]) null));
assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class,"bar", null, null));
assertEquals("bar(String)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", ""));
assertEquals("bar(Object)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object()));
assertEquals("bar(Integer)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE));
assertEquals("bar(double)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object[]{NumberUtils.DOUBLE_ONE},new Class[]{Double.TYPE}));
assertThrows(NoSuchMethodException.class,() -> MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE));
assertThrows(NoSuchMethodException.class,() -> MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE));
assertThrows(NoSuchMethodException.class,() -> MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", Boolean.TRUE));
assertNotSame(accessibleMethod, method);
assertSame(Mutable.class, accessibleMethod.getDeclaringClass());
assertNotNull(expected);
assertNull(actual);
assertSame(Mutable.class, accessibleMethod.getDeclaringClass());
assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(MutableObject.class.getMethod("getValue",ArrayUtils.EMPTY_CLASS_ARRAY)).getDeclaringClass());
assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(MutableObject.class, "getValue", ArrayUtils.EMPTY_CLASS_ARRAY).getDeclaringClass());
assertNull(actual);
assertTrue(expected.hasNext());
assertEquals(md.declaringClass, m.getDeclaringClass());
assertEquals(md.name, m.getName());
assertEquals(md.parameterTypes.length, m.getParameterTypes().length);
assertTrue(TypeUtils.equals(md.parameterTypes[i], m.getGenericParameterTypes()[i]));
assertFalse(expected.hasNext());
assertTrue(expected.hasNext());
assertEquals(md.declaringClass, m.getDeclaringClass());
assertEquals(md.name, m.getName());
assertEquals(md.parameterTypes.length, m.getParameterTypes().length);
assertTrue(TypeUtils.equals(md.parameterTypes[i], m.getGenericParameterTypes()[i]));
assertFalse(expected.hasNext());
assertArrayEquals(new Method[0], MethodUtils.getMethodsWithAnnotation(Object.class, Annotated.class));
assertEquals(2, methodsWithAnnotation.length);
assertThat(methodsWithAnnotation, hasItemInArray(MethodUtilsTest.class.getMethod("testGetMethodsWithAnnotation")));
assertThat(methodsWithAnnotation, hasItemInArray(MethodUtilsTest.class.getMethod("testGetMethodsListWithAnnotation")));
assertArrayEquals(new Method[0], MethodUtils.getMethodsWithAnnotation(Object.class, Annotated.class,true, true));
assertEquals(4, methodsWithAnnotation.length);
assertEquals("PublicChild", methodsWithAnnotation[0].getDeclaringClass().getSimpleName());
assertEquals("PublicChild", methodsWithAnnotation[1].getDeclaringClass().getSimpleName());
assertTrue(methodsWithAnnotation[0].getName().endsWith("AnnotatedMethod"));
assertTrue(methodsWithAnnotation[1].getName().endsWith("AnnotatedMethod"));
assertEquals("Foo.doIt",methodsWithAnnotation[2].getDeclaringClass().getSimpleName() + '.' +methodsWithAnnotation[2].getName());
assertEquals("Parent.parentProtectedAnnotatedMethod",methodsWithAnnotation[3].getDeclaringClass().getSimpleName() + '.' +methodsWithAnnotation[3].getName());
assertArrayEquals(new Method[0], MethodUtils.getMethodsWithAnnotation(Object.class, Annotated.class,false, true));
assertEquals(2, methodsWithAnnotation.length);
assertEquals("PublicChild", methodsWithAnnotation[0].getDeclaringClass().getSimpleName());
assertEquals("PublicChild", methodsWithAnnotation[1].getDeclaringClass().getSimpleName());
assertTrue(methodsWithAnnotation[0].getName().endsWith("AnnotatedMethod"));
assertTrue(methodsWithAnnotation[1].getName().endsWith("AnnotatedMethod"));
assertArrayEquals(new Method[0], MethodUtils.getMethodsWithAnnotation(Object.class, Annotated.class,true, false));
assertEquals(2, methodsWithAnnotation.length);
assertEquals("PublicChild.publicAnnotatedMethod",methodsWithAnnotation[0].getDeclaringClass().getSimpleName() + '.' +methodsWithAnnotation[0].getName());
assertEquals("Foo.doIt",methodsWithAnnotation[1].getDeclaringClass().getSimpleName() + '.' +methodsWithAnnotation[1].getName());
assertArrayEquals(new Method[0], MethodUtils.getMethodsWithAnnotation(Object.class, Annotated.class,false, false));
assertEquals(1, methodsWithAnnotation.length);
assertEquals("PublicChild.publicAnnotatedMethod",methodsWithAnnotation[0].getDeclaringClass().getSimpleName() + '.' +methodsWithAnnotation[0].getName());
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentNotAnnotatedMethod"),Annotated.class, true, true));
assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("doIt"), Annotated.class,true, true));
assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentProtectedAnnotatedMethod"),Annotated.class, true, true));
assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getDeclaredMethod("privateAnnotatedMethod"),Annotated.class, true, true));
assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("publicAnnotatedMethod"),Annotated.class, true, true));
assertNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod("parentNotAnnotatedMethod", String.class),Annotated.class, true, true));
assertNotNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod("parentProtectedAnnotatedMethod", String.class),Annotated.class, true, true));
assertNotNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getDeclaredMethod("privateAnnotatedMethod", String.class),Annotated.class, true, true));
assertNotNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod("publicAnnotatedMethod", String.class),Annotated.class, true, true));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentNotAnnotatedMethod"),Annotated.class, false, true));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("doIt"), Annotated.class,false, true));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentProtectedAnnotatedMethod"),Annotated.class, false, true));
assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getDeclaredMethod("privateAnnotatedMethod"),Annotated.class, false, true));
assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("publicAnnotatedMethod"),Annotated.class, false, true));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentNotAnnotatedMethod"),Annotated.class, true, false));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("doIt"), Annotated.class,true, false));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentProtectedAnnotatedMethod"),Annotated.class, true, false));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getDeclaredMethod("privateAnnotatedMethod"),Annotated.class, true, false));
assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("publicAnnotatedMethod"),Annotated.class, true, false));
assertNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod("parentNotAnnotatedMethod", String.class),Annotated.class, true, false));
assertNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod("parentProtectedAnnotatedMethod", String.class),Annotated.class, true, false));
assertNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getDeclaredMethod("privateAnnotatedMethod", String.class),Annotated.class, true, false));
assertNotNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod("publicAnnotatedMethod", String.class),Annotated.class, true, false));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentNotAnnotatedMethod"),Annotated.class, false, false));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("doIt"), Annotated.class,false, false));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentProtectedAnnotatedMethod"),Annotated.class, false, false));
assertNull(MethodUtils.getAnnotation(PublicChild.class.getDeclaredMethod("privateAnnotatedMethod"),Annotated.class, false, false));
assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("publicAnnotatedMethod"),Annotated.class, false, false));
assertThrows(NullPointerException.class, () -> MethodUtils.getMethodsWithAnnotation(FieldUtilsTest.class, null));
assertThrows(NullPointerException.class, () -> MethodUtils.getMethodsWithAnnotation(null, Annotated.class));
assertThrows(NullPointerException.class, () -> MethodUtils.getMethodsWithAnnotation(null, null));
assertEquals(0, MethodUtils.getMethodsListWithAnnotation(Object.class, Annotated.class).size());
assertEquals(2, methodWithAnnotation.size());
assertThat(methodWithAnnotation, hasItems(MethodUtilsTest.class.getMethod("testGetMethodsWithAnnotation"),MethodUtilsTest.class.getMethod("testGetMethodsListWithAnnotation")));
assertThrows(NullPointerException.class, () -> MethodUtils.getMethodsListWithAnnotation(FieldUtilsTest.class, null));
assertThrows(NullPointerException.class, () -> MethodUtils.getMethodsListWithAnnotation(null, Annotated.class));
assertThrows(NullPointerException.class, () -> MethodUtils.getMethodsListWithAnnotation(null, null));
assertThrows(NullPointerException.class,() -> MethodUtils.getAnnotation(FieldUtilsTest.class.getDeclaredMethods()[0], null, true, true));
assertThrows(NullPointerException.class, () -> MethodUtils.getAnnotation(null, Annotated.class, true, true));
assertThrows(NullPointerException.class, () -> MethodUtils.getAnnotation(null, null, true, true));
assertNotNull(m, "could not find any matches for " + methodName+ " (" + (requestTypes == null ? null : toString(requestTypes)) + ")");
assertArrayEquals(actualTypes, m.getParameterTypes(), toString(m.getParameterTypes()) + " not equals " + toString(actualTypes));
assertArrayEquals(new int[]{1, 2}, actual);
assertEquals("privateStringStuff()", MethodUtils.invokeMethod(testBean, true, "privateStringStuff"));
assertEquals("privateStringStuff(Integer)", MethodUtils.invokeMethod(testBean, true, "privateStringStuff", 5));
assertEquals("privateStringStuff(double)", MethodUtils.invokeMethod(testBean, true, "privateStringStuff", 5.0d));
assertEquals("privateStringStuff(String)", MethodUtils.invokeMethod(testBean, true, "privateStringStuff", "Hi There"));
assertEquals("privateStringStuff(Object)", MethodUtils.invokeMethod(testBean, true, "privateStringStuff", new Date()));
assertEquals(-1, distanceMethod.invoke(null, new Class[]{String.class}, new Class[]{Date.class}));
assertEquals(0, distanceMethod.invoke(null, new Class[]{Date.class}, new Class[]{Date.class}));
assertEquals(1, distanceMethod.invoke(null, new Class[]{Integer.class}, new Class[]{ClassUtils.wrapperToPrimitive(Integer.class)}));
assertEquals(2, distanceMethod.invoke(null, new Class[]{Integer.class}, new Class[]{Object.class}));
assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod"),GetMatchingMethodClass.class.getMethod("testMethod"));
assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod", Long.TYPE),GetMatchingMethodClass.class.getMethod("testMethod", Long.TYPE));
assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod", Long.class),GetMatchingMethodClass.class.getMethod("testMethod", Long.class));
assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod", (Class<?>) null),GetMatchingMethodClass.class.getMethod("testMethod", Long.class));
assertThrows(IllegalStateException.class,() -> MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod2", (Class<?>) null));
assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod3", Long.TYPE, Long.class),GetMatchingMethodClass.class.getMethod("testMethod3", Long.TYPE, Long.class));
assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod3", Long.class, Long.TYPE),GetMatchingMethodClass.class.getMethod("testMethod3", Long.class, Long.TYPE));
assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod3", null, Long.TYPE),GetMatchingMethodClass.class.getMethod("testMethod3", Long.class, Long.TYPE));
assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod3", Long.TYPE, null),GetMatchingMethodClass.class.getMethod("testMethod3", Long.TYPE, Long.class));
assertThrows(IllegalStateException.class,() -> MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod4", null, null));
assertEquals(str, toString);
assertArrayEquals(args, varArgs);
assertNotNull(MethodUtils.class.newInstance());
assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class,(Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString());
assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class,(Object[]) null).toString());
assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString());
assertEquals("(String)", ConstructorUtils.invokeConstructor(TestBean.class, "").toString());
assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString());
assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString());
assertEquals("(Integer)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString());
assertEquals("(int)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toString());
assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).toString());
assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).toString());
assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString());
assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) null).toString());
assertEquals("(String)", ConstructorUtils.invokeExactConstructor(TestBean.class, "").toString());
assertEquals("(Object)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object()).toString());
assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString());
assertEquals("(double)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE },new Class[] { Double.TYPE }).toString());
assertThrows(NoSuchMethodException.class,() -> ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.BYTE_ONE));
assertThrows(NoSuchMethodException.class,() -> ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.LONG_ONE));
assertThrows(NoSuchMethodException.class,() -> ConstructorUtils.invokeExactConstructor(TestBean.class, Boolean.TRUE));
assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class.getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));
assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class.getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));
assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.PublicInnerClass.class));
assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class,ArrayUtils.EMPTY_CLASS_ARRAY));
assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class, ArrayUtils.EMPTY_CLASS_ARRAY));
assertArrayEquals(actualTypes, c.getParameterTypes(), toString(c.getParameterTypes()) + " not equals " + toString(actualTypes));
assertArrayEquals(new String[]{"2", "3"}, testBean.varArgs);
assertNotNull(InheritanceUtils.class.newInstance());
assertEquals(1, InheritanceUtils.distance(AnotherChild.class, AnotherParent.class));
assertEquals(1, InheritanceUtils.distance(Grandchild.class, AnotherChild.class));
assertEquals(2, InheritanceUtils.distance(Grandchild.class, AnotherParent.class));
assertEquals(3, InheritanceUtils.distance(Grandchild.class, Object.class));
assertEquals(0, InheritanceUtils.distance(AnotherChild.class, AnotherChild.class));
assertEquals(0, InheritanceUtils.distance(Object.class, Object.class));
assertEquals(-1, InheritanceUtils.distance(null, Object.class));
assertEquals(-1, InheritanceUtils.distance(Object.class, null));
assertEquals(-1, InheritanceUtils.distance(null, null));
assertEquals(-1, InheritanceUtils.distance(Boolean.class, String.class));
assertEquals(-1, InheritanceUtils.distance(Object.class, Grandchild.class));
assertNotNull(new FieldUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(FieldUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(FieldUtils.class.getModifiers()));
assertEquals(Foo.class, FieldUtils.getField(PublicChild.class, "VALUE").getDeclaringClass());
assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "s").getDeclaringClass());
assertNull(FieldUtils.getField(PublicChild.class, "b"));
assertNull(FieldUtils.getField(PublicChild.class, "i"));
assertNull(FieldUtils.getField(PublicChild.class, "d"));
assertEquals(Foo.class, FieldUtils.getField(PubliclyShadowedChild.class, "VALUE").getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "s").getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "b").getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "i").getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "d").getDeclaringClass());
assertEquals(Foo.class, FieldUtils.getField(PrivatelyShadowedChild.class, "VALUE").getDeclaringClass());
assertEquals(parentClass, FieldUtils.getField(PrivatelyShadowedChild.class, "s").getDeclaringClass());
assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, "b"));
assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, "i"));
assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, "d"));
assertThrows(NullPointerException.class, () -> FieldUtils.getField(null, "none"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getField(PublicChild.class, null));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getField(PublicChild.class, ""));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getField(PublicChild.class, " "));
assertEquals(PublicChild.class, FieldUtils.getField(PublicChild.class, "VALUE", true).getDeclaringClass());
assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "s", true).getDeclaringClass());
assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "b", true).getDeclaringClass());
assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "i", true).getDeclaringClass());
assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "d", true).getDeclaringClass());
assertEquals(Foo.class, FieldUtils.getField(PubliclyShadowedChild.class, "VALUE", true).getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "s", true).getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "b", true).getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "i", true).getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "d", true).getDeclaringClass());
assertEquals(Foo.class, FieldUtils.getField(PrivatelyShadowedChild.class, "VALUE", true).getDeclaringClass());
assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "s", true).getDeclaringClass());
assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "b", true).getDeclaringClass());
assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "i", true).getDeclaringClass());
assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "d", true).getDeclaringClass());
assertThrows(NullPointerException.class, () -> FieldUtils.getField(null, "none", true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getField(PublicChild.class, null, true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getField(PublicChild.class, "", true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getField(PublicChild.class, " ", true));
assertArrayEquals(new Field[0], FieldUtils.getAllFields(Object.class));
assertArrayEquals(fieldsNumber, sort(FieldUtils.getAllFields(Number.class)));
assertArrayEquals(sort(ArrayUtils.addAll(fieldsInteger, fieldsNumber)), sort(FieldUtils.getAllFields(Integer.class)));
assertEquals(expected, allFields.length, Arrays.toString(allFields));
assertEquals(0, FieldUtils.getAllFieldsList(Object.class).size());
assertEquals(fieldsNumber, FieldUtils.getAllFieldsList(Number.class));
assertEquals(new HashSet<>(allFieldsInteger), new HashSet<>(FieldUtils.getAllFieldsList(Integer.class)));
assertEquals(expected, allFields.size(), allFields.toString());
assertArrayEquals(new Field[0], FieldUtils.getFieldsWithAnnotation(Object.class, Annotated.class));
assertArrayEquals(annotatedFields,sort(FieldUtils.getFieldsWithAnnotation(FieldUtilsTest.class, Annotated.class)));
assertThrows(NullPointerException.class, () -> FieldUtils.getFieldsWithAnnotation(FieldUtilsTest.class, null));
assertThrows(NullPointerException.class, () -> FieldUtils.getFieldsWithAnnotation(null, Annotated.class));
assertThrows(NullPointerException.class, () -> FieldUtils.getFieldsWithAnnotation(null, null));
assertEquals(0, FieldUtils.getFieldsListWithAnnotation(Object.class, Annotated.class).size());
assertEquals(annotatedFields.size(), fieldUtilsTestAnnotatedFields.size());
assertTrue(fieldUtilsTestAnnotatedFields.contains(annotatedFields.get(0)));
assertTrue(fieldUtilsTestAnnotatedFields.contains(annotatedFields.get(1)));
assertThrows(NullPointerException.class, () -> FieldUtils.getFieldsListWithAnnotation(FieldUtilsTest.class, null));
assertThrows(NullPointerException.class, () -> FieldUtils.getFieldsListWithAnnotation(null, Annotated.class));
assertThrows(NullPointerException.class, () -> FieldUtils.getFieldsListWithAnnotation(null, null));
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "VALUE"));
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "s"));
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "b"));
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "i"));
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "d"));
assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "VALUE"));
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "s").getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "b").getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "i").getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "d").getDeclaringClass());
assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "VALUE"));
assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "s"));
assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "b"));
assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "i"));
assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "d"));
assertThrows(NullPointerException.class, () -> FieldUtils.getDeclaredField(null, "none"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getDeclaredField(PublicChild.class, null));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getDeclaredField(PublicChild.class, ""));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getDeclaredField(PublicChild.class, " "));
assertEquals(PublicChild.class, FieldUtils.getDeclaredField(PublicChild.class, "VALUE", true).getDeclaringClass());
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "s", true));
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "b", true));
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "i", true));
assertNull(FieldUtils.getDeclaredField(PublicChild.class, "d", true));
assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "VALUE", true));
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "s", true).getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "b", true).getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "i", true).getDeclaringClass());
assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "d", true).getDeclaringClass());
assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "VALUE", true));
assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "s", true).getDeclaringClass());
assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "b", true).getDeclaringClass());
assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "i", true).getDeclaringClass());
assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "d", true).getDeclaringClass());
assertThrows(NullPointerException.class, () -> FieldUtils.getDeclaredField(null, "none", true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getDeclaredField(PublicChild.class, null, true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getDeclaredField(PublicChild.class, "", true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getDeclaredField(PublicChild.class, " ", true));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE")));
assertThrows(NullPointerException.class, () -> FieldUtils.readStaticField(null));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE")));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readStaticField(nonStaticField));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE")));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(PublicChild.class, "VALUE")));
assertThrows(NullPointerException.class, () -> FieldUtils.readStaticField(null, true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readStaticField(nonStaticField));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE"));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE"));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE"));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(PublicChild.class, "VALUE"));
assertThrows(NullPointerException.class,() -> FieldUtils.readStaticField(null, "none"),"null class should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readStaticField(Foo.class, null),"null field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readStaticField(Foo.class, ""),"empty field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readStaticField(Foo.class, " "),"blank field name should cause an IllegalArgumentException");
assertThrows(NullPointerException.class,() -> FieldUtils.readStaticField(Foo.class, "does_not_exist"),"a field that doesn't exist should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readStaticField(PublicChild.class, "s"),"non-static field should cause an IllegalArgumentException");
assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE", true));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE", true));
assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE", true));
assertEquals("child", FieldUtils.readStaticField(PublicChild.class, "VALUE", true));
assertThrows(NullPointerException.class,() -> FieldUtils.readStaticField(null, "none", true),"null class should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readStaticField(Foo.class, null, true),"null field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readStaticField(Foo.class, "", true),"empty field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readStaticField(Foo.class, " ", true),"blank field name should cause an IllegalArgumentException");
assertThrows(NullPointerException.class,() -> FieldUtils.readStaticField(Foo.class, "does_not_exist", true),"a field that doesn't exist should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readStaticField(PublicChild.class, "s", false),"non-static field should cause an IllegalArgumentException");
assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, "VALUE"));
assertThrows(NullPointerException.class, () -> FieldUtils.readDeclaredStaticField(PublicChild.class, "VALUE"));
assertThrows(NullPointerException.class,() -> FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, "VALUE"));
assertThrows(NullPointerException.class,() -> FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, "VALUE"));
assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, "VALUE", true));
assertEquals("child", FieldUtils.readDeclaredStaticField(PublicChild.class, "VALUE", true));
assertThrows(NullPointerException.class,() -> FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, "VALUE", true));
assertThrows(NullPointerException.class,() -> FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, "VALUE", true));
assertEquals("s", FieldUtils.readField(parentS, publicChild));
assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild));
assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild));
assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild));
assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild));
assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild));
assertEquals(I0, FieldUtils.readField(parentI, publicChild));
assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild));
assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild));
assertEquals(D0, FieldUtils.readField(parentD, publicChild));
assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild));
assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild));
assertThrows(NullPointerException.class,() -> FieldUtils.readField(null, publicChild),"a null field should cause an IllegalArgumentException");
assertEquals("s", FieldUtils.readField(parentS, publicChild, true));
assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild, true));
assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild, true));
assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild, true));
assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild, true));
assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild, true));
assertEquals(I0, FieldUtils.readField(parentI, publicChild, true));
assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild, true));
assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild, true));
assertEquals(D0, FieldUtils.readField(parentD, publicChild, true));
assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild, true));
assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild, true));
assertThrows(NullPointerException.class,() -> FieldUtils.readField(null, publicChild, true),"a null field should cause an IllegalArgumentException");
assertEquals("s", FieldUtils.readField(publicChild, "s"));
assertEquals("ss", FieldUtils.readField(publiclyShadowedChild, "s"));
assertEquals("s", FieldUtils.readField(privatelyShadowedChild, "s"));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readField(publicChild, null),"a null field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readField(publicChild, ""),"an empty field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readField(publicChild, " "),"a blank field name should cause an IllegalArgumentException");
assertThrows(NullPointerException.class,() -> FieldUtils.readField((Object) null, "none"),"a null target should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readField(publicChild, "b"));
assertEquals(Boolean.TRUE, FieldUtils.readField(publiclyShadowedChild, "b"));
assertThrows( IllegalArgumentException.class, () -> FieldUtils.readField(privatelyShadowedChild, "b"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readField(publicChild, "i"));
assertEquals(I1, FieldUtils.readField(publiclyShadowedChild, "i"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readField(privatelyShadowedChild, "i"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readField(publicChild, "d"));
assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, "d"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readField(privatelyShadowedChild, "d"));
assertEquals("s", FieldUtils.readField(publicChild, "s", true));
assertEquals("ss", FieldUtils.readField(publiclyShadowedChild, "s", true));
assertEquals("ss", FieldUtils.readField(privatelyShadowedChild, "s", true));
assertEquals(Boolean.FALSE, FieldUtils.readField(publicChild, "b", true));
assertEquals(Boolean.TRUE, FieldUtils.readField(publiclyShadowedChild, "b", true));
assertEquals(Boolean.TRUE, FieldUtils.readField(privatelyShadowedChild, "b", true));
assertEquals(I0, FieldUtils.readField(publicChild, "i", true));
assertEquals(I1, FieldUtils.readField(publiclyShadowedChild, "i", true));
assertEquals(I1, FieldUtils.readField(privatelyShadowedChild, "i", true));
assertEquals(D0, FieldUtils.readField(publicChild, "d", true));
assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, "d", true));
assertEquals(D1, FieldUtils.readField(privatelyShadowedChild, "d", true));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readField(publicChild, null, true),"a null field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readField(publicChild, "", true),"an empty field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readField(publicChild, " ", true),"a blank field name should cause an IllegalArgumentException");
assertThrows(NullPointerException.class,() -> FieldUtils.readField((Object) null, "none", true),"a null target should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readDeclaredField(publicChild, null),"a null field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readDeclaredField(publicChild, ""),"an empty field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readDeclaredField(publicChild, " "),"a blank field name should cause an IllegalArgumentException");
assertThrows(NullPointerException.class,() -> FieldUtils.readDeclaredField(null, "none"),"a null target should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(publicChild, "s"));
assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(privatelyShadowedChild, "s"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(publicChild, "b"));
assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(privatelyShadowedChild, "b"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(publicChild, "i"));
assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(privatelyShadowedChild, "i"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(publicChild, "d"));
assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(privatelyShadowedChild, "d"));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readDeclaredField(publicChild, null, true),"a null field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readDeclaredField(publicChild, "", true),"an empty field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readDeclaredField(publicChild, " ", true),"a blank field name should cause an IllegalArgumentException");
assertThrows(NullPointerException.class,() -> FieldUtils.readDeclaredField(null, "none", true),"a null target should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(publicChild, "s", true));
assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s", true));
assertEquals("ss", FieldUtils.readDeclaredField(privatelyShadowedChild, "s", true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(publicChild, "b", true));
assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b", true));
assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b", true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(publicChild, "i", true));
assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i", true));
assertEquals(I1, FieldUtils.readDeclaredField(privatelyShadowedChild, "i", true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(publicChild, "d", true));
assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d", true));
assertEquals(D1, FieldUtils.readDeclaredField(privatelyShadowedChild, "d", true));
assertEquals("new", StaticContainer.mutablePublic);
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("mutableProtected"), "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("mutablePackage"), "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("mutablePrivate"), "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("IMMUTABLE_PUBLIC"), "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("IMMUTABLE_PROTECTED"), "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("IMMUTABLE_PACKAGE"), "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("IMMUTABLE_PRIVATE"), "new"));
assertEquals("new", StaticContainer.mutablePublic);
assertEquals("new", StaticContainer.getMutableProtected());
assertEquals("new", StaticContainer.getMutablePackage());
assertEquals("new", StaticContainer.getMutablePrivate());
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("IMMUTABLE_PUBLIC"), "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("IMMUTABLE_PROTECTED"), "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("IMMUTABLE_PACKAGE"), "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("IMMUTABLE_PRIVATE"), "new", true));
assertEquals("new", StaticContainer.mutablePublic);
assertThrows(NullPointerException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"));
assertEquals("new", StaticContainer.mutablePublic);
assertEquals("new", StaticContainer.getMutableProtected());
assertEquals("new", StaticContainer.getMutablePackage());
assertEquals("new", StaticContainer.getMutablePrivate());
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new", true));
assertEquals("new", StaticContainer.mutablePublic);
assertThrows(NullPointerException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new"));
assertEquals("new", StaticContainer.mutablePublic);
assertEquals("new", StaticContainer.getMutableProtected());
assertEquals("new", StaticContainer.getMutablePackage());
assertEquals("new", StaticContainer.getMutablePrivate());
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new", true));
assertEquals("S", field.get(publicChild));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeField(parentClass.getDeclaredField("b"), publicChild, Boolean.TRUE));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeField(parentClass.getDeclaredField("i"), publicChild, Integer.valueOf(Integer.MAX_VALUE)));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeField(parentClass.getDeclaredField("d"), publicChild, Double.valueOf(Double.MAX_VALUE)));
assertEquals("S", field.get(publicChild));
assertEquals(Boolean.TRUE, field.get(publicChild));
assertEquals(Integer.valueOf(Integer.MAX_VALUE), field.get(publicChild));
assertEquals(Double.valueOf(Double.MAX_VALUE), field.get(publicChild));
assertEquals("S", FieldUtils.readField(publicChild, "s"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.writeField(publicChild, "b", Boolean.TRUE));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.writeField(publicChild, "i", Integer.valueOf(1)));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.writeField(publicChild, "d", Double.valueOf(1.0)));
assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s"));
assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b"));
assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i"));
assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d"));
assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s"));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeField(privatelyShadowedChild, "i", Integer.valueOf(1)));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeField(privatelyShadowedChild, "d", Double.valueOf(1.0)));
assertEquals("S", FieldUtils.readField(publicChild, "s", true));
assertEquals(Boolean.TRUE, FieldUtils.readField(publicChild, "b", true));
assertEquals(Integer.valueOf(1), FieldUtils.readField(publicChild, "i", true));
assertEquals(Double.valueOf(1.0), FieldUtils.readField(publicChild, "d", true));
assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s", true));
assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b", true));
assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i", true));
assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d", true));
assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s", true));
assertEquals(Boolean.FALSE, FieldUtils.readField(privatelyShadowedChild, "b", true));
assertEquals(Integer.valueOf(0), FieldUtils.readField(privatelyShadowedChild, "i", true));
assertEquals(Double.valueOf(0.0), FieldUtils.readField(privatelyShadowedChild, "d", true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.writeDeclaredField(publicChild, "s", "S"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.writeDeclaredField(publicChild, "b", Boolean.TRUE));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeDeclaredField(publicChild, "i", Integer.valueOf(1)));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeDeclaredField(publicChild, "d", Double.valueOf(1.0)));
assertEquals("S", FieldUtils.readDeclaredField(publiclyShadowedChild, "s"));
assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b"));
assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, "i"));
assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, "d"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.writeDeclaredField(privatelyShadowedChild, "s", "S"));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeDeclaredField(privatelyShadowedChild, "b", Boolean.TRUE));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeDeclaredField(privatelyShadowedChild, "i", Integer.valueOf(1)));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeDeclaredField(privatelyShadowedChild, "d", Double.valueOf(1.0)));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.writeDeclaredField(publicChild, "s", "S", true));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeDeclaredField(publicChild, "b", Boolean.TRUE, true));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeDeclaredField(publicChild, "i", Integer.valueOf(1), true));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeDeclaredField(publicChild, "d", Double.valueOf(1.0), true));
assertEquals("S", FieldUtils.readDeclaredField(publiclyShadowedChild, "s", true));
assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b", true));
assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, "i", true));
assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, "d", true));
assertEquals("S", FieldUtils.readDeclaredField(privatelyShadowedChild, "s", true));
assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b", true));
assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(privatelyShadowedChild, "i", true));
assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(privatelyShadowedChild, "d", true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getField(Ambig.class, "VALUE"));
assertFalse(field.isAccessible());
assertTrue(Modifier.isFinal(field.getModifiers()));
assertFalse(Modifier.isFinal(field.getModifiers()));
assertFalse(field.isAccessible());
assertFalse(field.isAccessible());
assertTrue(Modifier.isFinal(field.getModifiers()));
assertFalse(Modifier.isFinal(field.getModifiers()));
assertFalse(field.isAccessible());
assertFalse(field.isAccessible());
assertTrue(Modifier.isFinal(field.getModifiers()));
assertTrue(Modifier.isFinal(field.getModifiers()));
assertFalse(field.isAccessible());
assertFalse(field.isAccessible());
assertTrue(Modifier.isFinal(field.getModifiers()));
assertTrue(Modifier.isFinal(field.getModifiers()));
assertFalse(field.isAccessible());
assertTrue(exception.getCause() instanceof NoSuchFieldException);
public void delegateBooleanAssertion(final Type[] types, final int i2, final int i1, final boolean expected) {final Type type1 = types[i1];
assertTrue(isAssignable,"[" + i1 + ", " + i2 + "]: From "+ String.valueOf(type2) + " to "+ String.valueOf(type1));
assertFalse(isAssignable,"[" + i1 + ", " + i2 + "]: From "+ String.valueOf(type2) + " to "+ String.valueOf(type1));
assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod("m0").getGenericReturnType()));
assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod("m1").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m2").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m3").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m4").getGenericReturnType()));
assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod("m5").getGenericReturnType()));
assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod("m6").getGenericReturnType()));
assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod("m7").getGenericReturnType()));
assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod("m8").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m9").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m10").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m11").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m12").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m13").getGenericReturnType()));
assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod("m14").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m15").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m16").getGenericReturnType()));
assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod("m17").getGenericReturnType()));
assertTrue(typeVarAssigns.containsKey(treeSetTypeVar));
assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns.get(treeSetTypeVar));
assertTrue(TypeUtils.equals(expected, actual));
assertEquals("java.lang.Comparable<? extends java.lang.Integer>[]", actual.toString());
assertNull(TypeUtils.getArrayComponentType(types[0]));
assertNull(TypeUtils.getArrayComponentType(types[1]));
assertNull(TypeUtils.getArrayComponentType(types[2]));
assertNull(TypeUtils.getArrayComponentType(types[3]));
assertNull(TypeUtils.getArrayComponentType(types[4]));
assertNull(TypeUtils.getArrayComponentType(types[5]));
assertNull(TypeUtils.getArrayComponentType(types[6]));
assertEquals(types[0], TypeUtils.getArrayComponentType(types[7]));
assertEquals(types[1], TypeUtils.getArrayComponentType(types[8]));
assertEquals(types[2], TypeUtils.getArrayComponentType(types[9]));
assertEquals(types[3], TypeUtils.getArrayComponentType(types[10]));
assertEquals(types[4], TypeUtils.getArrayComponentType(types[11]));
assertEquals(types[5], TypeUtils.getArrayComponentType(types[12]));
assertEquals(types[6], TypeUtils.getArrayComponentType(types[13]));
assertEquals(boolean.class, TypeUtils.getArrayComponentType(boolean[].class));
assertEquals(byte.class, TypeUtils.getArrayComponentType(byte[].class));
assertEquals(short.class, TypeUtils.getArrayComponentType(short[].class));
assertEquals(int.class, TypeUtils.getArrayComponentType(int[].class));
assertEquals(char.class, TypeUtils.getArrayComponentType(char[].class));
assertEquals(long.class, TypeUtils.getArrayComponentType(long[].class));
assertEquals(float.class, TypeUtils.getArrayComponentType(float[].class));
assertEquals(double.class, TypeUtils.getArrayComponentType(double[].class));
assertNull(TypeUtils.getArrayComponentType(boolean.class));
assertNull(TypeUtils.getArrayComponentType(byte.class));
assertNull(TypeUtils.getArrayComponentType(short.class));
assertNull(TypeUtils.getArrayComponentType(int.class));
assertNull(TypeUtils.getArrayComponentType(char.class));
assertNull(TypeUtils.getArrayComponentType(long.class));
assertNull(TypeUtils.getArrayComponentType(float.class));
assertNull(TypeUtils.getArrayComponentType(double.class));
assertEquals(GenericParent.class, TypeUtils.getRawType(stringParentFieldType, null));
assertEquals(GenericParent.class, TypeUtils.getRawType(integerParentFieldType,null));
assertEquals(List.class, TypeUtils.getRawType(foosFieldType, null));
assertEquals(String.class, TypeUtils.getRawType(genericParentT,StringParameterizedChild.class));
assertEquals(String.class, TypeUtils.getRawType(genericParentT,stringParentFieldType));
assertEquals(Foo.class, TypeUtils.getRawType(Iterable.class.getTypeParameters()[0],foosFieldType));
assertEquals(Foo.class, TypeUtils.getRawType(List.class.getTypeParameters()[0],foosFieldType));
assertNull(TypeUtils.getRawType(genericParentT, GenericParent.class));
assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class.getDeclaredField("barParents").getGenericType(), null));
assertTrue(typeVarAssigns.containsKey(treeSetTypeVar),"Type var assigns for Comparable from Integer: " + typeVarAssigns);
assertEquals(Integer.class, typeVarAssigns.get(treeSetTypeVar),"Type argument of Comparable from Integer: " + typeArg);
assertTrue(typeVarAssigns.containsKey(treeSetTypeVar),"Type var assigns for Comparable from int: " + typeVarAssigns);
assertEquals(Integer.class, typeVarAssigns.get(treeSetTypeVar),"Type argument of Comparable from int: " + typeArg);
assertFalse(typeVarAssigns.containsKey(treeSetTypeVar),"Type var assigns for Collection from List: " + typeVarAssigns);
assertEquals(2, typeVarAssigns.size());
assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));
assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));
assertEquals(2, typeVarAssigns.size());
assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));
assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));
assertEquals(2, typeVarAssigns.size());
assertEquals(Number.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));
assertEquals(Number.class, typeVarAssigns.get(This.class.getTypeParameters()[1]));
assertEquals(2, typeVarAssigns.size());
assertEquals(getClass().getTypeParameters()[0], typeVarAssigns.get(getClass().getTypeParameters()[0]));
assertEquals(getClass().getTypeParameters()[0], typeVarAssigns.get(Other.class.getTypeParameters()[0]));
assertFalse(TypeUtils.isArrayType(types[0]));
assertFalse(TypeUtils.isArrayType(types[1]));
assertFalse(TypeUtils.isArrayType(types[2]));
assertFalse(TypeUtils.isArrayType(types[3]));
assertFalse(TypeUtils.isArrayType(types[4]));
assertFalse(TypeUtils.isArrayType(types[5]));
assertFalse(TypeUtils.isArrayType(types[6]));
assertTrue(TypeUtils.isArrayType(types[7]));
assertTrue(TypeUtils.isArrayType(types[8]));
assertTrue(TypeUtils.isArrayType(types[9]));
assertTrue(TypeUtils.isArrayType(types[10]));
assertTrue(TypeUtils.isArrayType(types[11]));
assertTrue(TypeUtils.isArrayType(types[12]));
assertTrue(TypeUtils.isArrayType(types[13]));
assertTrue(TypeUtils.isArrayType(boolean[].class));
assertTrue(TypeUtils.isArrayType(byte[].class));
assertTrue(TypeUtils.isArrayType(short[].class));
assertTrue(TypeUtils.isArrayType(int[].class));
assertTrue(TypeUtils.isArrayType(char[].class));
assertTrue(TypeUtils.isArrayType(long[].class));
assertTrue(TypeUtils.isArrayType(float[].class));
assertTrue(TypeUtils.isArrayType(double[].class));
assertTrue(TypeUtils.isArrayType(Object[].class));
assertTrue(TypeUtils.isArrayType(String[].class));
assertFalse(TypeUtils.isArrayType(boolean.class));
assertFalse(TypeUtils.isArrayType(byte.class));
assertFalse(TypeUtils.isArrayType(short.class));
assertFalse(TypeUtils.isArrayType(int.class));
assertFalse(TypeUtils.isArrayType(char.class));
assertFalse(TypeUtils.isArrayType(long.class));
assertFalse(TypeUtils.isArrayType(float.class));
assertFalse(TypeUtils.isArrayType(double.class));
assertFalse(TypeUtils.isArrayType(Object.class));
assertFalse(TypeUtils.isArrayType(String.class));
delegateBooleanAssertion(types, 0, 0, true);
delegateBooleanAssertion(types, 0, 1, true);
delegateBooleanAssertion(types, 1, 0, true);
delegateBooleanAssertion(types, 0, 2, true);
delegateBooleanAssertion(types, 2, 0, true);
delegateBooleanAssertion(types, 0, 3, true);
delegateBooleanAssertion(types, 3, 0, true);
delegateBooleanAssertion(types, 0, 4, true);
delegateBooleanAssertion(types, 4, 0, true);
delegateBooleanAssertion(types, 0, 5, true);
delegateBooleanAssertion(types, 5, 0, true);
delegateBooleanAssertion(types, 0, 6, true);
delegateBooleanAssertion(types, 6, 0, true);
delegateBooleanAssertion(types, 1, 1, true);
delegateBooleanAssertion(types, 1, 2, true);
delegateBooleanAssertion(types, 2, 1, false);
delegateBooleanAssertion(types, 1, 3, true);
delegateBooleanAssertion(types, 3, 1, false);
delegateBooleanAssertion(types, 1, 4, false);
delegateBooleanAssertion(types, 4, 1, false);
delegateBooleanAssertion(types, 1, 5, false);
delegateBooleanAssertion(types, 5, 1, false);
delegateBooleanAssertion(types, 1, 6, true);
delegateBooleanAssertion(types, 6, 1, false);
delegateBooleanAssertion(types, 2, 2, true);
delegateBooleanAssertion(types, 2, 3, false);
delegateBooleanAssertion(types, 3, 2, true);
delegateBooleanAssertion(types, 2, 4, false);
delegateBooleanAssertion(types, 4, 2, true);
delegateBooleanAssertion(types, 2, 5, false);
delegateBooleanAssertion(types, 5, 2, true);
delegateBooleanAssertion(types, 2, 6, false);
delegateBooleanAssertion(types, 6, 2, true);
delegateBooleanAssertion(types, 3, 3, true);
delegateBooleanAssertion(types, 3, 4, false);
delegateBooleanAssertion(types, 4, 3, false);
delegateBooleanAssertion(types, 3, 5, false);
delegateBooleanAssertion(types, 5, 3, false);
delegateBooleanAssertion(types, 3, 6, true);
delegateBooleanAssertion(types, 6, 3, false);
delegateBooleanAssertion(types, 4, 4, true);
delegateBooleanAssertion(types, 4, 5, true);
delegateBooleanAssertion(types, 5, 4, false);
delegateBooleanAssertion(types, 4, 6, true);
delegateBooleanAssertion(types, 6, 4, false);
delegateBooleanAssertion(types, 5, 5, true);
delegateBooleanAssertion(types, 5, 6, false);
delegateBooleanAssertion(types, 6, 5, false);
delegateBooleanAssertion(types, 6, 6, true);
delegateBooleanAssertion(types, 7, 7, true);
delegateBooleanAssertion(types, 7, 8, true);
delegateBooleanAssertion(types, 8, 7, true);
delegateBooleanAssertion(types, 7, 9, true);
delegateBooleanAssertion(types, 9, 7, true);
delegateBooleanAssertion(types, 7, 10, true);
delegateBooleanAssertion(types, 10, 7, true);
delegateBooleanAssertion(types, 7, 11, true);
delegateBooleanAssertion(types, 11, 7, true);
delegateBooleanAssertion(types, 7, 12, true);
delegateBooleanAssertion(types, 12, 7, true);
delegateBooleanAssertion(types, 7, 13, true);
delegateBooleanAssertion(types, 13, 7, true);
delegateBooleanAssertion(types, 8, 8, true);
delegateBooleanAssertion(types, 8, 9, true);
delegateBooleanAssertion(types, 9, 8, false);
delegateBooleanAssertion(types, 8, 10, true);
delegateBooleanAssertion(types, 10, 8, false);
delegateBooleanAssertion(types, 8, 11, false);
delegateBooleanAssertion(types, 11, 8, false);
delegateBooleanAssertion(types, 8, 12, false);
delegateBooleanAssertion(types, 12, 8, false);
delegateBooleanAssertion(types, 8, 13, true);
delegateBooleanAssertion(types, 13, 8, false);
delegateBooleanAssertion(types, 9, 9, true);
delegateBooleanAssertion(types, 9, 10, false);
delegateBooleanAssertion(types, 10, 9, true);
delegateBooleanAssertion(types, 9, 11, false);
delegateBooleanAssertion(types, 11, 9, true);
delegateBooleanAssertion(types, 9, 12, false);
delegateBooleanAssertion(types, 12, 9, true);
delegateBooleanAssertion(types, 9, 13, false);
delegateBooleanAssertion(types, 13, 9, true);
delegateBooleanAssertion(types, 10, 10, true);
delegateBooleanAssertion(types, 10, 11, false);
delegateBooleanAssertion(types, 11, 10, false);
delegateBooleanAssertion(types, 10, 12, false);
delegateBooleanAssertion(types, 12, 10, false);
delegateBooleanAssertion(types, 10, 13, true);
delegateBooleanAssertion(types, 13, 10, false);
delegateBooleanAssertion(types, 11, 11, true);
delegateBooleanAssertion(types, 11, 12, true);
delegateBooleanAssertion(types, 12, 11, false);
delegateBooleanAssertion(types, 11, 13, true);
delegateBooleanAssertion(types, 13, 11, false);
delegateBooleanAssertion(types, 12, 12, true);
delegateBooleanAssertion(types, 12, 13, false);
delegateBooleanAssertion(types, 13, 12, false);
delegateBooleanAssertion(types, 13, 13, true);
assertTrue(TypeUtils.isAssignable(datType, disType));
assertFalse(TypeUtils.isAssignable(daType, disType));
assertTrue(TypeUtils.isAssignable(uhderType, disType));
assertFalse(TypeUtils.isAssignable(dingType, disType),String.format("type %s not assignable to %s!", dingType, disType));
assertTrue(TypeUtils.isAssignable(testerType, disType));
assertFalse(TypeUtils.isAssignable(tester2Type, disType));
assertFalse(TypeUtils.isAssignable(dat2Type, datType));
assertFalse(TypeUtils.isAssignable(datType, dat2Type));
assertFalse(TypeUtils.isAssignable(dat3Type, datType));
assertTrue(TypeUtils.isAssignable(char.class, double.class));
assertTrue(TypeUtils.isAssignable(byte.class, double.class));
assertTrue(TypeUtils.isAssignable(short.class, double.class));
assertTrue(TypeUtils.isAssignable(int.class, double.class));
assertTrue(TypeUtils.isAssignable(long.class, double.class));
assertTrue(TypeUtils.isAssignable(float.class, double.class));
assertTrue(TypeUtils.isAssignable(int.class, long.class));
assertTrue(TypeUtils.isAssignable(Integer.class, long.class));
assertFalse(TypeUtils.isAssignable(int.class, Long.class));
assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));
assertTrue(TypeUtils.isAssignable(Integer.class, int.class));
assertTrue(TypeUtils.isAssignable(int.class, Integer.class));
assertTrue(TypeUtils.isAssignable(int.class, Number.class));
assertTrue(TypeUtils.isAssignable(int.class, Object.class));
assertTrue(TypeUtils.isAssignable(int.class, intComparableType));
assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));
assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));
assertFalse(TypeUtils.isAssignable(int.class, longComparableType));
assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));
assertFalse(TypeUtils.isAssignable(int[].class, long[].class));
assertTrue(TypeUtils.isAssignable(Integer[].class, caType));
assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));
assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));
assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));
assertTrue(TypeUtils.isAssignable(cClassType, bClassType));
assertTrue(TypeUtils.isAssignable(dClassType, bClassType));
assertTrue(TypeUtils.isAssignable(eClassType, bClassType));
assertTrue(TypeUtils.isAssignable(fClassType, bClassType));
assertTrue(TypeUtils.isAssignable(dClassType, cClassType));
assertTrue(TypeUtils.isAssignable(eClassType, cClassType));
assertTrue(TypeUtils.isAssignable(fClassType, cClassType));
assertTrue(TypeUtils.isAssignable(eClassType, dClassType));
assertTrue(TypeUtils.isAssignable(fClassType, dClassType));
assertTrue(TypeUtils.isAssignable(fClassType, eClassType));
assertEquals(rawClass, paramType.getRawType());
assertEquals(typeArgClass, paramType.getActualTypeArguments()[0]);
assertFalse(testUnassignableClass.isAssignableFrom(paramType.getClass()));
assertFalse(paramType.getClass().isAssignableFrom(testUnassignableClass));
assertFalse(TypeUtils.isAssignable(arrayType, paramType),() -> String.format("TypeUtils.isAssignable(%s, %s)", arrayType, paramType));
assertFalse(TypeUtils.isAssignable(paramType, arrayType),() -> String.format("TypeUtils.isAssignable(%s, %s)", paramType, arrayType));
assertEquals(rawClass, paramType.getRawType());
assertEquals(typeArgClass, paramType.getActualTypeArguments()[0]);
assertFalse(GenericArrayType.class.isAssignableFrom(paramType.getClass()));
assertFalse(paramType.getClass().isAssignableFrom(GenericArrayType.class));
assertFalse(TypeUtils.isAssignable(paramType, testType),() -> String.format("TypeUtils.isAssignable(%s, %s)", paramType, testType));
assertFalse(TypeUtils.isAssignable(testType, paramType),() -> String.format("TypeUtils.isAssignable(%s, %s)", testType, paramType));
assertEquals(rawClass, paramType.getRawType());
assertEquals(typeArgClass, paramType.getActualTypeArguments()[0]);
assertFalse(WildcardType.class.isAssignableFrom(paramType.getClass()));
assertFalse(paramType.getClass().isAssignableFrom(WildcardType.class));
assertFalse(TypeUtils.isAssignable(paramType, testType),() -> String.format("TypeUtils.isAssignable(%s, %s)", paramType, testType));
assertFalse(TypeUtils.isAssignable(testType, paramType),() -> String.format("TypeUtils.isAssignable(%s, %s)", testType, paramType));
assertEquals(rawClass, paramType.getRawType());
assertEquals(typeArgClass, paramType.getActualTypeArguments()[0]);
assertTrue(Object.class.isAssignableFrom(paramType.getClass()));
assertFalse(paramType.getClass().isAssignableFrom(Object.class));
assertTrue(TypeUtils.isAssignable(paramType, testType),() -> String.format("TypeUtils.isAssignable(%s, %s)", paramType, testType));
assertFalse(TypeUtils.isAssignable(testType, paramType),() -> String.format("TypeUtils.isAssignable(%s, %s)", testType, paramType));
assertTrue(TypeUtils.isInstance(1, intComparableType));
assertFalse(TypeUtils.isInstance(1, uriComparableType));
assertFalse(TypeUtils.equals(wildcardType, nonWildcardType));
assertFalse(TypeUtils.equals(nonWildcardType, wildcardType));
assertTrue(TypeUtils.isAssignable(fromType, failingToType));
assertEquals("T extends java.lang.Enum<T>", TypeUtils.toString(method.getGenericReturnType()));
assertArrayEquals(expectedArray, TypeUtils.normalizeUpperBounds(typeArray));
assertEquals(String.format("? super %s", java.sql.Date.class.getName()), TypeUtils.toString(lowerBounded));
assertEquals(String.format("? super %s", java.sql.Date.class.getName()), lowerBounded.toString());
assertEquals(String.format("? super %s", iterableT0.getName()), TypeUtils.toString(lowerTypeVariable));
assertEquals(String.format("? super %s", iterableT0.getName()), lowerTypeVariable.toString());
assertTrue(TypeUtils.equals(getClass().getField("stringComparable").getGenericType(),stringComparableType));
assertEquals("java.lang.Comparable<java.lang.String>", stringComparableType.toString());
assertEquals(TypeUtils.parameterize(ArrayList.class, String.class), unrolled);
assertTrue(TypeUtils.equals(getClass().getField("dat2").getGenericType(), dat2Type));
assertEquals(getClass().getName() + ":B", TypeUtils.toLongString(getClass().getTypeParameters()[0]));
assertEquals("int[]", TypeUtils.toString(int[].class));
assertEquals("java.lang.Integer[]", TypeUtils.toString(Integer[].class));
assertEquals("java.util.List<java.lang.String>[]", TypeUtils.toString(stringListField.getGenericType()));
assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));
assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));
assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));
assertTrue(TypeUtils.equals(TypeUtils.WILDCARD_ALL, unbounded));
assertArrayEquals(new Type[] { Object.class }, TypeUtils.getImplicitUpperBounds(unbounded));
assertArrayEquals(new Type[] { null }, TypeUtils.getImplicitLowerBounds(unbounded));
assertEquals("?", TypeUtils.toString(unbounded));
assertEquals("?", unbounded.toString());
assertTrue(TypeUtils.equals(((ParameterizedType) cClass.getGenericType()).getActualTypeArguments()[0],simpleWildcard));
assertEquals(String.format("? extends %s", String.class.getName()), TypeUtils.toString(simpleWildcard));
assertEquals(String.format("? extends %s", String.class.getName()), simpleWildcard.toString());
assertTrue(TypeUtils.equals(t, TypeUtils.wrap(t).getType()));
assertEquals(String.class, TypeUtils.wrap(String.class).getType());
assertFalse(Modifier.isPublic(CharRange.class.getModifiers()));
assertTrue(Modifier.isFinal(CharRange.class.getModifiers()));
assertEquals('a', rangea.getStart());
assertEquals('a', rangea.getEnd());
assertFalse(rangea.isNegated());
assertEquals("a", rangea.toString());
assertEquals('a', rangea.getStart());
assertEquals('a', rangea.getEnd());
assertTrue(rangea.isNegated());
assertEquals("^a", rangea.toString());
assertEquals('a', rangea.getStart());
assertEquals('a', rangea.getEnd());
assertFalse(rangea.isNegated());
assertEquals("a", rangea.toString());
assertEquals('a', rangea.getStart());
assertEquals('e', rangea.getEnd());
assertFalse(rangea.isNegated());
assertEquals("a-e", rangea.toString());
assertEquals('a', rangea.getStart());
assertEquals('e', rangea.getEnd());
assertFalse(rangea.isNegated());
assertEquals("a-e", rangea.toString());
assertEquals('a', rangea.getStart());
assertEquals('a', rangea.getEnd());
assertTrue(rangea.isNegated());
assertEquals("^a", rangea.toString());
assertEquals('a', rangea.getStart());
assertEquals('e', rangea.getEnd());
assertTrue(rangea.isNegated());
assertEquals("^a-e", rangea.toString());
assertEquals('a', rangea.getStart());
assertEquals('e', rangea.getEnd());
assertTrue(rangea.isNegated());
assertEquals("^a-e", rangea.toString());
assertNotEquals(null, rangea);
assertEquals(rangea, rangea);
assertEquals(rangea, CharRange.is('a'));
assertEquals(rangeae, rangeae);
assertEquals(rangeae, CharRange.isIn('a', 'e'));
assertEquals(rangenotbf, rangenotbf);
assertEquals(rangenotbf, CharRange.isIn('b', 'f'));
assertNotEquals(rangea, rangeae);
assertNotEquals(rangea, rangenotbf);
assertNotEquals(rangeae, rangea);
assertNotEquals(rangeae, rangenotbf);
assertNotEquals(rangenotbf, rangea);
assertNotEquals(rangenotbf, rangeae);
assertEquals(rangea.hashCode(), rangea.hashCode());
assertEquals(rangea.hashCode(), CharRange.is('a').hashCode());
assertEquals(rangeae.hashCode(), rangeae.hashCode());
assertEquals(rangeae.hashCode(), CharRange.isIn('a', 'e').hashCode());
assertEquals(rangenotbf.hashCode(), rangenotbf.hashCode());
assertEquals(rangenotbf.hashCode(), CharRange.isIn('b', 'f').hashCode());
assertNotEquals(rangea.hashCode(), rangeae.hashCode());
assertNotEquals(rangea.hashCode(), rangenotbf.hashCode());
assertNotEquals(rangeae.hashCode(), rangea.hashCode());
assertNotEquals(rangeae.hashCode(), rangenotbf.hashCode());
assertNotEquals(rangenotbf.hashCode(), rangea.hashCode());
assertNotEquals(rangenotbf.hashCode(), rangeae.hashCode());
assertFalse(range.contains('b'));
assertTrue(range.contains('c'));
assertFalse(range.contains('d'));
assertFalse(range.contains('e'));
assertFalse(range.contains('b'));
assertTrue(range.contains('c'));
assertTrue(range.contains('d'));
assertFalse(range.contains('e'));
assertFalse(range.contains('b'));
assertTrue(range.contains('c'));
assertTrue(range.contains('d'));
assertFalse(range.contains('e'));
assertTrue(range.contains('b'));
assertFalse(range.contains('c'));
assertFalse(range.contains('d'));
assertTrue(range.contains('e'));
assertTrue(range.contains((char) 0));
assertTrue(range.contains(Character.MAX_VALUE));
assertFalse(c.contains(b));
assertTrue(c.contains(c));
assertTrue(c.contains(c2));
assertFalse(c.contains(d));
assertFalse(c.contains(cd));
assertFalse(c.contains(bd));
assertFalse(c.contains(bc));
assertFalse(c.contains(ab));
assertFalse(c.contains(de));
assertTrue(cd.contains(c));
assertTrue(bd.contains(c));
assertTrue(bc.contains(c));
assertFalse(ab.contains(c));
assertFalse(de.contains(c));
assertTrue(ae.contains(b));
assertTrue(ae.contains(ab));
assertTrue(ae.contains(bc));
assertTrue(ae.contains(cd));
assertTrue(ae.contains(de));
assertFalse(c.contains(notc));
assertFalse(c.contains(notbd));
assertTrue(all.contains(notc));
assertTrue(all.contains(notbd));
assertFalse(allbutfirst.contains(notc));
assertFalse(allbutfirst.contains(notbd));
assertTrue(notc.contains(a));
assertTrue(notc.contains(b));
assertFalse(notc.contains(c));
assertTrue(notc.contains(d));
assertTrue(notc.contains(e));
assertTrue(notc.contains(ab));
assertFalse(notc.contains(bc));
assertFalse(notc.contains(bd));
assertFalse(notc.contains(cd));
assertTrue(notc.contains(de));
assertFalse(notc.contains(ae));
assertFalse(notc.contains(all));
assertFalse(notc.contains(allbutfirst));
assertTrue(notbd.contains(a));
assertFalse(notbd.contains(b));
assertFalse(notbd.contains(c));
assertFalse(notbd.contains(d));
assertTrue(notbd.contains(e));
assertTrue(notcd.contains(ab));
assertFalse(notcd.contains(bc));
assertFalse(notcd.contains(bd));
assertFalse(notcd.contains(cd));
assertFalse(notcd.contains(de));
assertFalse(notcd.contains(ae));
assertTrue(notcd.contains(ef));
assertFalse(notcd.contains(all));
assertFalse(notcd.contains(allbutfirst));
assertFalse(notc.contains(notb));
assertTrue(notc.contains(notc));
assertFalse(notc.contains(notd));
assertFalse(notc.contains(notab));
assertTrue(notc.contains(notbc));
assertTrue(notc.contains(notbd));
assertTrue(notc.contains(notcd));
assertFalse(notc.contains(notde));
assertFalse(notbd.contains(notb));
assertFalse(notbd.contains(notc));
assertFalse(notbd.contains(notd));
assertFalse(notbd.contains(notab));
assertFalse(notbd.contains(notbc));
assertTrue(notbd.contains(notbd));
assertFalse(notbd.contains(notcd));
assertFalse(notbd.contains(notde));
assertTrue(notbd.contains(notae));
final NullPointerException e = assertThrows(NullPointerException.class, () -> range.contains(null));
assertEquals("range", e.getMessage());
assertNotNull(aIt);
assertTrue(aIt.hasNext());
assertEquals(Character.valueOf('a'), aIt.next());
assertFalse(aIt.hasNext());
assertNotNull(adIt);
assertTrue(adIt.hasNext());
assertEquals(Character.valueOf('a'), adIt.next());
assertEquals(Character.valueOf('b'), adIt.next());
assertEquals(Character.valueOf('c'), adIt.next());
assertEquals(Character.valueOf('d'), adIt.next());
assertFalse(adIt.hasNext());
assertNotNull(notaIt);
assertTrue(notaIt.hasNext());
assertNotEquals('a', c.charValue());
assertNotNull(emptySetIt);
assertFalse(emptySetIt.hasNext());
assertThrows(NoSuchElementException.class, emptySetIt::next);
assertNotNull(notFirstIt);
assertTrue(notFirstIt.hasNext());
assertEquals(Character.valueOf((char) 0), notFirstIt.next());
assertFalse(notFirstIt.hasNext());
assertThrows(NoSuchElementException.class, notFirstIt::next);
assertNotNull(notLastIt);
assertTrue(notLastIt.hasNext());
assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next());
assertFalse(notLastIt.hasNext());
assertThrows(NoSuchElementException.class, notLastIt::next);
assertEquals(range, SerializationUtils.clone(range));
assertEquals(range, SerializationUtils.clone(range));
assertEquals(range, SerializationUtils.clone(range));
assertThrows(UnsupportedOperationException.class, aIt::remove);
assertNull(RegExUtils.removeAll(null, Pattern.compile("")));
assertEquals("any", RegExUtils.removeAll("any", (Pattern) null));
assertEquals("any", RegExUtils.removeAll("any", Pattern.compile("")));
assertEquals("", RegExUtils.removeAll("any", Pattern.compile(".*")));
assertEquals("", RegExUtils.removeAll("any", Pattern.compile(".+")));
assertEquals("", RegExUtils.removeAll("any", Pattern.compile(".?")));
assertEquals("A\nB", RegExUtils.removeAll("A<__>\n<__>B", Pattern.compile("<.*>")));
assertEquals("AB", RegExUtils.removeAll("A<__>\n<__>B", Pattern.compile("(?s)<.*>")));
assertEquals("ABC123", RegExUtils.removeAll("ABCabc123abc", Pattern.compile("[a-z]")));
assertEquals("AB", RegExUtils.removeAll("A<__>\n<__>B", Pattern.compile("<.*>", Pattern.DOTALL)));
assertEquals("AB", RegExUtils.removeAll("A<__>\\n<__>B", Pattern.compile("<.*>")));
assertEquals("", RegExUtils.removeAll("<A>x\\ny</A>", Pattern.compile("<A>.*</A>")));
assertEquals("", RegExUtils.removeAll("<A>\nxy\n</A>", Pattern.compile("<A>.*</A>", Pattern.DOTALL)));
assertNull(RegExUtils.removeAll(null, ""));
assertEquals("any", RegExUtils.removeAll("any", (String) null));
assertEquals("any", RegExUtils.removeAll("any", ""));
assertEquals("", RegExUtils.removeAll("any", ".*"));
assertEquals("", RegExUtils.removeAll("any", ".+"));
assertEquals("", RegExUtils.removeAll("any", ".?"));
assertEquals("A\nB", RegExUtils.removeAll("A<__>\n<__>B", "<.*>"));
assertEquals("AB", RegExUtils.removeAll("A<__>\n<__>B", "(?s)<.*>"));
assertEquals("ABC123", RegExUtils.removeAll("ABCabc123abc", "[a-z]"));
assertThrows(PatternSyntaxException.class,() -> RegExUtils.removeAll("any", "{badRegexSyntax}"),"RegExUtils.removeAll expecting PatternSyntaxException");
assertNull(RegExUtils.removeFirst(null, Pattern.compile("")));
assertEquals("any", RegExUtils.removeFirst("any", (Pattern) null));
assertEquals("any", RegExUtils.removeFirst("any", Pattern.compile("")));
assertEquals("", RegExUtils.removeFirst("any", Pattern.compile(".*")));
assertEquals("", RegExUtils.removeFirst("any", Pattern.compile(".+")));
assertEquals("bc", RegExUtils.removeFirst("abc", Pattern.compile(".?")));
assertEquals("A\n<__>B", RegExUtils.removeFirst("A<__>\n<__>B", Pattern.compile("<.*>")));
assertEquals("AB", RegExUtils.removeFirst("A<__>\n<__>B", Pattern.compile("(?s)<.*>")));
assertEquals("ABCbc123", RegExUtils.removeFirst("ABCabc123", Pattern.compile("[a-z]")));
assertEquals("ABC123abc", RegExUtils.removeFirst("ABCabc123abc", Pattern.compile("[a-z]+")));
assertNull(RegExUtils.removeFirst(null, ""));
assertEquals("any", RegExUtils.removeFirst("any", (String) null));
assertEquals("any", RegExUtils.removeFirst("any", ""));
assertEquals("", RegExUtils.removeFirst("any", ".*"));
assertEquals("", RegExUtils.removeFirst("any", ".+"));
assertEquals("bc", RegExUtils.removeFirst("abc", ".?"));
assertEquals("A\n<__>B", RegExUtils.removeFirst("A<__>\n<__>B", "<.*>"));
assertEquals("AB", RegExUtils.removeFirst("A<__>\n<__>B", "(?s)<.*>"));
assertEquals("ABCbc123", RegExUtils.removeFirst("ABCabc123", "[a-z]"));
assertEquals("ABC123abc", RegExUtils.removeFirst("ABCabc123abc", "[a-z]+"));
assertThrows(PatternSyntaxException.class,() -> RegExUtils.removeFirst("any", "{badRegexSyntax}"),"RegExUtils.removeFirst expecting PatternSyntaxException");
assertNull(RegExUtils.removePattern(null, ""));
assertEquals("any", RegExUtils.removePattern("any", (String) null));
assertEquals("", RegExUtils.removePattern("", ""));
assertEquals("", RegExUtils.removePattern("", ".*"));
assertEquals("", RegExUtils.removePattern("", ".+"));
assertEquals("AB", RegExUtils.removePattern("A<__>\n<__>B", "<.*>"));
assertEquals("AB", RegExUtils.removePattern("A<__>\\n<__>B", "<.*>"));
assertEquals("", RegExUtils.removePattern("<A>x\\ny</A>", "<A>.*</A>"));
assertEquals("", RegExUtils.removePattern("<A>\nxy\n</A>", "<A>.*</A>"));
assertEquals("ABC123", RegExUtils.removePattern("ABCabc123", "[a-z]"));
assertNull(RegExUtils.replaceAll(null, Pattern.compile(""), ""));
assertEquals("any", RegExUtils.replaceAll("any", (Pattern) null, ""));
assertEquals("any", RegExUtils.replaceAll("any", Pattern.compile(""), null));
assertEquals("zzz", RegExUtils.replaceAll("", Pattern.compile(""), "zzz"));
assertEquals("zzz", RegExUtils.replaceAll("", Pattern.compile(".*"), "zzz"));
assertEquals("", RegExUtils.replaceAll("", Pattern.compile(".+"), "zzz"));
assertEquals("ZZaZZbZZcZZ", RegExUtils.replaceAll("abc", Pattern.compile(""), "ZZ"));
assertEquals("z\nz", RegExUtils.replaceAll("<__>\n<__>", Pattern.compile("<.*>"), "z"));
assertEquals("z", RegExUtils.replaceAll("<__>\n<__>", Pattern.compile("(?s)<.*>"), "z"));
assertEquals("z", RegExUtils.replaceAll("<__>\n<__>", Pattern.compile("<.*>", Pattern.DOTALL), "z"));
assertEquals("z", RegExUtils.replaceAll("<__>\\n<__>", Pattern.compile("<.*>"), "z"));
assertEquals("X", RegExUtils.replaceAll("<A>\nxy\n</A>", Pattern.compile("<A>.*</A>", Pattern.DOTALL), "X"));
assertEquals("ABC___123", RegExUtils.replaceAll("ABCabc123", Pattern.compile("[a-z]"), "_"));
assertEquals("ABC_123", RegExUtils.replaceAll("ABCabc123", Pattern.compile("[^A-Z0-9]+"), "_"));
assertEquals("ABC123", RegExUtils.replaceAll("ABCabc123", Pattern.compile("[^A-Z0-9]+"), ""));
assertEquals("Lorem_ipsum_dolor_sit",RegExUtils.replaceAll("Lorem ipsum  dolor   sit", Pattern.compile("( +)([a-z]+)"), "_$2"));
assertNull(RegExUtils.replaceAll(null, "", ""));
assertEquals("any", RegExUtils.replaceAll("any", (String) null, ""));
assertEquals("any", RegExUtils.replaceAll("any", "", null));
assertEquals("zzz", RegExUtils.replaceAll("", "", "zzz"));
assertEquals("zzz", RegExUtils.replaceAll("", ".*", "zzz"));
assertEquals("", RegExUtils.replaceAll("", ".+", "zzz"));
assertEquals("ZZaZZbZZcZZ", RegExUtils.replaceAll("abc", "", "ZZ"));
assertEquals("z\nz", RegExUtils.replaceAll("<__>\n<__>", "<.*>", "z"));
assertEquals("z", RegExUtils.replaceAll("<__>\n<__>", "(?s)<.*>", "z"));
assertEquals("ABC___123", RegExUtils.replaceAll("ABCabc123", "[a-z]", "_"));
assertEquals("ABC_123", RegExUtils.replaceAll("ABCabc123", "[^A-Z0-9]+", "_"));
assertEquals("ABC123", RegExUtils.replaceAll("ABCabc123", "[^A-Z0-9]+", ""));
assertEquals("Lorem_ipsum_dolor_sit", RegExUtils.replaceAll("Lorem ipsum  dolor   sit", "( +)([a-z]+)", "_$2"));
assertThrows(PatternSyntaxException.class,() -> RegExUtils.replaceAll("any", "{badRegexSyntax}", ""),"RegExUtils.replaceAll expecting PatternSyntaxException");
assertNull(RegExUtils.replaceFirst(null, Pattern.compile(""), ""));
assertEquals("any", RegExUtils.replaceFirst("any", (Pattern) null, ""));
assertEquals("any", RegExUtils.replaceFirst("any", Pattern.compile(""), null));
assertEquals("zzz", RegExUtils.replaceFirst("", Pattern.compile(""), "zzz"));
assertEquals("zzz", RegExUtils.replaceFirst("", Pattern.compile(".*"), "zzz"));
assertEquals("", RegExUtils.replaceFirst("", Pattern.compile(".+"), "zzz"));
assertEquals("ZZabc", RegExUtils.replaceFirst("abc", Pattern.compile(""), "ZZ"));
assertEquals("z\n<__>", RegExUtils.replaceFirst("<__>\n<__>", Pattern.compile("<.*>"), "z"));
assertEquals("z", RegExUtils.replaceFirst("<__>\n<__>", Pattern.compile("(?s)<.*>"), "z"));
assertEquals("ABC_bc123", RegExUtils.replaceFirst("ABCabc123", Pattern.compile("[a-z]"), "_"));
assertEquals("ABC_123abc", RegExUtils.replaceFirst("ABCabc123abc", Pattern.compile("[^A-Z0-9]+"), "_"));
assertEquals("ABC123abc", RegExUtils.replaceFirst("ABCabc123abc", Pattern.compile("[^A-Z0-9]+"), ""));
assertEquals("Lorem_ipsum  dolor   sit",RegExUtils.replaceFirst("Lorem ipsum  dolor   sit", Pattern.compile("( +)([a-z]+)"), "_$2"));
assertNull(RegExUtils.replaceFirst(null, "", ""));
assertEquals("any", RegExUtils.replaceFirst("any", (String) null, ""));
assertEquals("any", RegExUtils.replaceFirst("any", "", null));
assertEquals("zzz", RegExUtils.replaceFirst("", "", "zzz"));
assertEquals("zzz", RegExUtils.replaceFirst("", ".*", "zzz"));
assertEquals("", RegExUtils.replaceFirst("", ".+", "zzz"));
assertEquals("ZZabc", RegExUtils.replaceFirst("abc", "", "ZZ"));
assertEquals("z\n<__>", RegExUtils.replaceFirst("<__>\n<__>", "<.*>", "z"));
assertEquals("z", RegExUtils.replaceFirst("<__>\n<__>", "(?s)<.*>", "z"));
assertEquals("ABC_bc123", RegExUtils.replaceFirst("ABCabc123", "[a-z]", "_"));
assertEquals("ABC_123abc", RegExUtils.replaceFirst("ABCabc123abc", "[^A-Z0-9]+", "_"));
assertEquals("ABC123abc", RegExUtils.replaceFirst("ABCabc123abc", "[^A-Z0-9]+", ""));
assertEquals("Lorem_ipsum  dolor   sit",RegExUtils.replaceFirst("Lorem ipsum  dolor   sit", "( +)([a-z]+)", "_$2"));
assertThrows(PatternSyntaxException.class,() -> RegExUtils.replaceFirst("any", "{badRegexSyntax}", ""),"RegExUtils.replaceFirst expecting PatternSyntaxException");
assertNull(RegExUtils.replacePattern(null, "", ""));
assertEquals("any", RegExUtils.replacePattern("any", (String) null, ""));
assertEquals("any", RegExUtils.replacePattern("any", "", null));
assertEquals("zzz", RegExUtils.replacePattern("", "", "zzz"));
assertEquals("zzz", RegExUtils.replacePattern("", ".*", "zzz"));
assertEquals("", RegExUtils.replacePattern("", ".+", "zzz"));
assertEquals("z", RegExUtils.replacePattern("<__>\n<__>", "<.*>", "z"));
assertEquals("z", RegExUtils.replacePattern("<__>\\n<__>", "<.*>", "z"));
assertEquals("X", RegExUtils.replacePattern("<A>\nxy\n</A>", "<A>.*</A>", "X"));
assertEquals("ABC___123", RegExUtils.replacePattern("ABCabc123", "[a-z]", "_"));
assertEquals("ABC_123", RegExUtils.replacePattern("ABCabc123", "[^A-Z0-9]+", "_"));
assertEquals("ABC123", RegExUtils.replacePattern("ABCabc123", "[^A-Z0-9]+", ""));
assertEquals("Lorem_ipsum_dolor_sit",RegExUtils.replacePattern("Lorem ipsum  dolor   sit", "( +)([a-z]+)", "_$2"));
assertEquals(staticGetString(), MethodInvokers.asFailableSupplier(getMethodForStaticGetString()).get());
assertEquals(staticGetString(), MethodInvokers.asFailableSupplier(getMethodForStaticGetString()).get());
assertFalse(MethodInvokers.asFailableSupplier(getMethodForStaticGetString()).toString().isEmpty());
assertEquals("ABC", tri.apply(ref1, ref2, ref3));
assertEquals(Character.valueOf('a'), ref1.get());
assertEquals(Short.valueOf((short) 1), ref2.get());
assertEquals("z", ref3.get());
assertEquals(BigInteger.TEN, tri.andThen(after).apply(ref1, ref2, ref3));
assertEquals(Character.valueOf('b'), ref1.get());
assertEquals(Short.valueOf((short) 2), ref2.get());
assertEquals("zz", ref3.get());
assertEquals(staticGetString(), supplier.get());
assertEquals(staticGetString(), supplier.get());
assertFalse(supplier.toString().isEmpty());
assertFalse(supplier.toString().isEmpty());
assertEquals(Character.valueOf('a'), ref1.get());
assertEquals(Short.valueOf((short) 1), ref2.get());
assertEquals("z", ref3.get());
assertEquals(Character.valueOf('b'), ref1.get());
assertEquals(Short.valueOf((short) 2), ref2.get());
assertEquals("zz", ref3.get());
assertEquals('A', func.applyAsChar(65));
assertTrue(aBool.get());
assertFalse(aBool.get());
assertThrows(NullPointerException.class, () -> nop.andThen(null));
assertTrue(aBool1.get());
assertTrue(aBool2.get());
assertFalse(aBool1.get());
assertFalse(aBool2.get());
Assertions.assertThrows(IllegalStateException.class, () -> badComposite.accept(true));
assertFalse(aBool2.get(), "Second consumer should not be invoked");
assertEquals(INSTANCE.getString1Arg("A"), func.apply(INSTANCE, "A"));
assertThrows(CustomUncheckedException.class, () -> func.apply(INSTANCE, "A"));
assertThrows(NullPointerException.class, () -> MethodInvokers.asBiFunction(null));
assertEquals('C', function.apply("ABC", 2));
assertFalse(MethodInvokers.asBiFunction(getMethodForGetString1Arg()).toString().isEmpty());
assertTrue(func.applyAsBoolean("1", 1));
assertEquals(INSTANCE.getString(), func.apply(INSTANCE));
assertThrows(CustomUncheckedException.class, () -> func.apply(INSTANCE));
assertThrows(NullPointerException.class, () -> MethodInvokers.asFunction(null));
assertEquals(2, invokers.size());
assertEquals(new HashSet<>(Arrays.asList(INSTANCE.getString(), INSTANCE.getString2())), set1);
assertEquals(new HashSet<>(Arrays.asList(INSTANCE.getString(), INSTANCE.getString2())), set2);
assertEquals(3, function.apply("ABC"));
assertEquals(INSTANCE.getString(), map.get(INSTANCE));
assertFalse(MethodInvokers.asFunction(getMethodForGetString()).toString().isEmpty());
Throwable e = assertThrows(IllegalStateException.class,() -> Failable.accept(Testable::test, testable, ILLEGAL_STATE_EXCEPTION));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(Testable::test, testable, ERROR));
assertSame(ERROR, e);
e = assertThrows(UncheckedIOException.class, () -> Failable.accept(Testable::test, testable, ioe));
assertNotNull(t);
assertSame(ioe, t);
Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(Testable::test, testable));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(Testable::test, testable));
assertSame(ERROR, e);
e = assertThrows(UncheckedIOException.class, () -> Failable.accept(Testable::test, testable));
assertNotNull(t);
assertSame(ioe, t);
Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(testable::testDouble, 1d));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(testable::testDouble, 1d));
assertSame(ERROR, e);
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(UncheckedIOException.class, () -> Failable.accept(testable::testDouble, 1d));
assertNotNull(t);
assertSame(ioe, t);
assertNull(testable.getAcceptedPrimitiveObject1());
assertEquals(1, testable.getAcceptedPrimitiveObject1());
Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(testable::testInt, 1));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(testable::testInt, 1));
assertSame(ERROR, e);
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(UncheckedIOException.class, () -> Failable.accept(testable::testInt, 1));
assertNotNull(t);
assertSame(ioe, t);
assertNull(testable.getAcceptedPrimitiveObject1());
assertEquals(1, testable.getAcceptedPrimitiveObject1());
Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(testable::testLong, 1L));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(testable::testLong, 1L));
assertSame(ERROR, e);
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(UncheckedIOException.class, () -> Failable.accept(testable::testLong, 1L));
assertNotNull(t);
assertSame(ioe, t);
assertNull(testable.getAcceptedPrimitiveObject1());
assertEquals(1, testable.getAcceptedPrimitiveObject1());
Throwable e = assertThrows(IllegalStateException.class,() -> Failable.accept(testable::testObjDouble, "X", 1d));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(testable::testObjDouble, "X", 1d));
assertSame(ERROR, e);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(UncheckedIOException.class, () -> Failable.accept(testable::testObjDouble, "X", 1d));
assertNotNull(t);
assertSame(ioe, t);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertEquals("X", testable.getAcceptedObject());
assertEquals(1d, testable.getAcceptedPrimitiveObject1());
Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(testable::testObjInt, "X", 1));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(testable::testObjInt, "X", 1));
assertSame(ERROR, e);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(UncheckedIOException.class, () -> Failable.accept(testable::testObjInt, "X", 1));
assertNotNull(t);
assertSame(ioe, t);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertEquals("X", testable.getAcceptedObject());
assertEquals(1, testable.getAcceptedPrimitiveObject1());
Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(testable::testObjLong, "X", 1L));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(testable::testObjLong, "X", 1L));
assertSame(ERROR, e);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
e = assertThrows(UncheckedIOException.class, () -> Failable.accept(testable::testObjLong, "X", 1L));
assertNotNull(t);
assertSame(ioe, t);
assertNull(testable.getAcceptedObject());
assertNull(testable.getAcceptedPrimitiveObject1());
assertEquals("X", testable.getAcceptedObject());
assertEquals(1L, testable.getAcceptedPrimitiveObject1());
Throwable e = assertThrows(IllegalStateException.class,() -> Failable.apply(Testable::testAsInteger, testable, ILLEGAL_STATE_EXCEPTION));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
e = assertThrows(OutOfMemoryError.class, () -> Failable.apply(Testable::testAsInteger, testable, ERROR));
assertSame(ERROR, e);
e = assertThrows(UncheckedIOException.class, () -> Failable.apply(Testable::testAsInteger, testable, ioe));
assertNotNull(t);
assertSame(ioe, t);
assertNotNull(i);
assertEquals(0, i.intValue());
final Throwable e = assertThrows(IllegalStateException.class,() -> Failable.applyAsDouble(testable::testDoubleDouble, 1d, 2d));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
assertEquals(3d, i);
Throwable e = assertThrows(IllegalStateException.class,() -> Failable.apply(Testable::testAsInteger, testable));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
e = assertThrows(OutOfMemoryError.class, () -> Failable.apply(Testable::testAsInteger, testable));
assertSame(ERROR, e);
e = assertThrows(UncheckedIOException.class, () -> Failable.apply(Testable::testAsInteger, testable));
assertNotNull(t);
assertSame(ioe, t);
assertNotNull(i);
assertEquals(0, i.intValue());
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, callable::call);
assertNotNull(cause);
assertTrue(cause instanceof SomeException);
assertEquals("Odd Invocation: 1", cause.getMessage());
assertNotNull(instance);
Throwable e = assertThrows(IllegalStateException.class, () -> consumer.accept(testable));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
e = assertThrows(OutOfMemoryError.class, () -> consumer.accept(testable));
assertSame(ERROR, e);
e = assertThrows(UncheckedIOException.class, () -> consumer.accept(testable));
assertNotNull(t);
assertSame(ioe, t);
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, runnable::run);
assertNotNull(cause);
assertTrue(cause instanceof SomeException);
assertEquals("Odd Invocation: 1", cause.getMessage());
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, supplier::get);
assertNotNull(cause);
assertTrue(cause instanceof SomeException);
assertEquals("Odd Invocation: 1", cause.getMessage());
assertNotNull(supplier.get());
Throwable e = assertThrows(IllegalStateException.class,() -> consumer.accept(testable, ILLEGAL_STATE_EXCEPTION));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
e = assertThrows(OutOfMemoryError.class, () -> consumer.accept(testable, ERROR));
assertSame(ERROR, e);
e = assertThrows(OutOfMemoryError.class, () -> failableBiConsumer.accept(testable, ERROR));
assertSame(ERROR, e);
e = assertThrows(UncheckedIOException.class, () -> consumer.accept(testable, ioe));
assertNotNull(t);
assertSame(ioe, t);
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).accept(testable, ERROR));
assertSame(ERROR, e);
e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).accept(testable, ERROR));
assertSame(ERROR, e);
assertThrows(NullPointerException.class, () -> failing.andThen(null));
Throwable e = assertThrows(IllegalStateException.class,() -> biFunction.apply(testable, ILLEGAL_STATE_EXCEPTION));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
e = assertThrows(OutOfMemoryError.class, () -> biFunction.apply(testable, ERROR));
assertSame(ERROR, e);
e = assertThrows(UncheckedIOException.class, () -> biFunction.apply(testable, ioe));
assertNotNull(t);
assertSame(ioe, t);
assertEquals(0, biFunction.apply(testable, null).intValue());
assertThrows(IOException.class, () -> failingBiFunctionTest.andThen(failingFunction).apply(null, null));
assertThrows(IOException.class, () -> failingBiFunctionTest.andThen(nopFailableFunction).apply(null, null));
assertThrows(IOException.class, () -> nopFailableBiFunction.andThen(failingFunction).apply(null, null));
assertThrows(NullPointerException.class, () -> failingBiFunctionTest.andThen(null));
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> predicate.test(null, null));
assertNotNull(cause);
assertTrue(cause instanceof SomeException);
assertEquals("Odd Invocation: 1", cause.getMessage());
assertTrue(predicate.test(null, null));
assertTrue(FailableBiPredicate.TRUE.and(FailableBiPredicate.TRUE).test(null, null));
assertFalse(FailableBiPredicate.TRUE.and(FailableBiPredicate.FALSE).test(null, null));
assertFalse(FailableBiPredicate.FALSE.and(FailableBiPredicate.TRUE).test(null, null));
assertFalse(FailableBiPredicate.FALSE.and(FailableBiPredicate.FALSE).test(null, null));
assertThrows(NullPointerException.class,() -> assertFalse(FailableBiPredicate.falsePredicate().and(null).test(null, null)));
assertThrows(NullPointerException.class,() -> assertTrue(FailableBiPredicate.truePredicate().and(null).test(null, null)));
assertFalse(FailableBiPredicate.TRUE.negate().test(null, null));
assertFalse(FailableBiPredicate.truePredicate().negate().test(null, null));
assertTrue(FailableBiPredicate.FALSE.negate().test(null, null));
assertTrue(FailableBiPredicate.falsePredicate().negate().test(null, null));
assertTrue(FailableBiPredicate.TRUE.or(FailableBiPredicate.TRUE).test(null, null));
assertTrue(FailableBiPredicate.TRUE.or(FailableBiPredicate.FALSE).test(null, null));
assertTrue(FailableBiPredicate.FALSE.or(FailableBiPredicate.TRUE).test(null, null));
assertFalse(FailableBiPredicate.FALSE.or(FailableBiPredicate.FALSE).test(null, null));
assertThrows(NullPointerException.class,() -> assertFalse(FailableBiPredicate.falsePredicate().or(null).test(null, null)));
assertThrows(NullPointerException.class,() -> assertTrue(FailableBiPredicate.truePredicate().or(null).test(null, null)));
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> Failable.run(FailureOnOddInvocations::new));
assertNotNull(cause);
assertTrue(cause instanceof SomeException);
assertEquals("Odd Invocation: 1", cause.getMessage());
assertNotNull(instance);
final Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failableConsumer).accept(ERROR));
assertSame(ERROR, e);
assertThrows(NullPointerException.class, () -> failableConsumer.andThen(null));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).accept(0d));
assertSame(ERROR, e);
e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).accept(0d));
assertSame(ERROR, e);
assertThrows(NullPointerException.class, () -> failing.andThen(null));
assertThrows(SomeException.class, () -> failablePredicate.test(1d));
assertTrue(FailableDoublePredicate.TRUE.and(FailableDoublePredicate.TRUE).test(0));
assertFalse(FailableDoublePredicate.TRUE.and(FailableDoublePredicate.FALSE).test(0));
assertFalse(FailableDoublePredicate.FALSE.and(FailableDoublePredicate.TRUE).test(0));
assertFalse(FailableDoublePredicate.FALSE.and(FailableDoublePredicate.FALSE).test(0));
assertThrows(NullPointerException.class,() -> assertFalse(FailableDoublePredicate.falsePredicate().and(null).test(0)));
assertThrows(NullPointerException.class,() -> assertTrue(FailableDoublePredicate.truePredicate().and(null).test(0)));
assertFalse(FailableDoublePredicate.TRUE.negate().test(0d));
assertFalse(FailableDoublePredicate.truePredicate().negate().test(0d));
assertTrue(FailableDoublePredicate.FALSE.negate().test(0d));
assertTrue(FailableDoublePredicate.falsePredicate().negate().test(0d));
assertTrue(FailableDoublePredicate.TRUE.or(FailableDoublePredicate.TRUE).test(0));
assertTrue(FailableDoublePredicate.TRUE.or(FailableDoublePredicate.FALSE).test(0));
assertTrue(FailableDoublePredicate.FALSE.or(FailableDoublePredicate.TRUE).test(0));
assertFalse(FailableDoublePredicate.FALSE.or(FailableDoublePredicate.FALSE).test(0));
assertThrows(NullPointerException.class,() -> assertFalse(FailableDoublePredicate.falsePredicate().or(null).test(0)));
assertThrows(NullPointerException.class,() -> assertTrue(FailableDoublePredicate.truePredicate().or(null).test(0)));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).applyAsDouble(0d));
assertSame(ERROR, e);
e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).applyAsDouble(0d));
assertSame(ERROR, e);
assertThrows(NullPointerException.class, () -> failing.andThen(null));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.compose(failing).applyAsDouble(0d));
assertSame(ERROR, e);
e = assertThrows(OutOfMemoryError.class, () -> failing.compose(nop).applyAsDouble(0d));
assertSame(ERROR, e);
assertThrows(NullPointerException.class, () -> failing.compose(null));
assertThrows(NullPointerException.class, () -> nop.compose(null));
Throwable e = assertThrows(IllegalStateException.class, () -> function.apply(ILLEGAL_STATE_EXCEPTION));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
e = assertThrows(OutOfMemoryError.class, () -> function.apply(ERROR));
assertSame(ERROR, e);
e = assertThrows(UncheckedIOException.class, () -> function.apply(ioe));
assertNotNull(t);
assertSame(ioe, t);
assertEquals(0, function.apply(null).intValue());
assertThrows(IOException.class, () -> failingFunction.andThen(failingFunction).apply(null));
assertThrows(IOException.class, () -> failingFunction.andThen(nopFailableFunction).apply(null));
assertThrows(IOException.class, () -> nopFailableFunction.andThen(failingFunction).apply(null));
assertThrows(NullPointerException.class, () -> failingFunction.andThen(null));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.compose(failing).apply(0));
assertSame(ERROR, e);
e = assertThrows(OutOfMemoryError.class, () -> failing.compose(nop).apply(0));
assertSame(ERROR, e);
assertThrows(NullPointerException.class, () -> failing.compose(null));
assertThrows(NullPointerException.class, () -> nop.compose(null));
Throwable e = assertThrows(IllegalStateException.class,() -> Failable.getAsBoolean(testable::testAsBooleanPrimitive));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
e = assertThrows(OutOfMemoryError.class, () -> Failable.getAsBoolean(testable::testAsBooleanPrimitive));
assertSame(ERROR, e);
e = assertThrows(UncheckedIOException.class, () -> Failable.getAsBoolean(testable::testAsBooleanPrimitive));
assertNotNull(t);
assertSame(ioe, t);
assertFalse(Failable.getAsBoolean(testable::testAsBooleanPrimitive));
Throwable e = assertThrows(IllegalStateException.class,() -> Failable.getAsDouble(testable::testAsDoublePrimitive));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
e = assertThrows(OutOfMemoryError.class, () -> Failable.getAsDouble(testable::testAsDoublePrimitive));
assertSame(ERROR, e);
e = assertThrows(UncheckedIOException.class, () -> Failable.getAsDouble(testable::testAsDoublePrimitive));
assertNotNull(t);
assertSame(ioe, t);
assertEquals(0, Failable.getAsDouble(testable::testAsDoublePrimitive));
Throwable e = assertThrows(IllegalStateException.class, () -> Failable.getAsInt(testable::testAsIntPrimitive));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
e = assertThrows(OutOfMemoryError.class, () -> Failable.getAsInt(testable::testAsIntPrimitive));
assertSame(ERROR, e);
e = assertThrows(UncheckedIOException.class, () -> Failable.getAsInt(testable::testAsIntPrimitive));
assertNotNull(t);
assertSame(ioe, t);
assertEquals(0, i);
Throwable e = assertThrows(IllegalStateException.class,() -> Failable.getAsLong(testable::testAsLongPrimitive));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
e = assertThrows(OutOfMemoryError.class, () -> Failable.getAsLong(testable::testAsLongPrimitive));
assertSame(ERROR, e);
e = assertThrows(UncheckedIOException.class, () -> Failable.getAsLong(testable::testAsLongPrimitive));
assertNotNull(t);
assertSame(ioe, t);
assertEquals(0, i);
Throwable e = assertThrows(IllegalStateException.class,() -> Failable.getAsShort(testable::testAsShortPrimitive));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
e = assertThrows(OutOfMemoryError.class, () -> Failable.getAsShort(testable::testAsShortPrimitive));
assertSame(ERROR, e);
e = assertThrows(UncheckedIOException.class, () -> Failable.getAsShort(testable::testAsShortPrimitive));
assertNotNull(t);
assertSame(ioe, t);
assertEquals(0, i);
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> Failable.run(FailureOnOddInvocations::new));
assertNotNull(cause);
assertTrue(cause instanceof SomeException);
assertEquals("Odd Invocation: 1", cause.getMessage());
assertNotNull(instance);
Throwable e = assertThrows(IllegalStateException.class, () -> Failable.get(testable::testAsInteger));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
e = assertThrows(OutOfMemoryError.class, () -> Failable.get(testable::testAsInteger));
assertSame(ERROR, e);
e = assertThrows(UncheckedIOException.class, () -> Failable.get(testable::testAsInteger));
assertNotNull(t);
assertSame(ioe, t);
assertNotNull(i);
assertEquals(0, i.intValue());
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).accept(0));
assertSame(ERROR, e);
e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).accept(0));
assertSame(ERROR, e);
assertThrows(NullPointerException.class, () -> failing.andThen(null));
assertThrows(SomeException.class, () -> failablePredicate.test(1));
assertTrue(FailableIntPredicate.TRUE.and(FailableIntPredicate.TRUE).test(0));
assertFalse(FailableIntPredicate.TRUE.and(FailableIntPredicate.FALSE).test(0));
assertFalse(FailableIntPredicate.FALSE.and(FailableIntPredicate.TRUE).test(0));
assertFalse(FailableIntPredicate.FALSE.and(FailableIntPredicate.FALSE).test(0));
assertThrows(NullPointerException.class,() -> assertFalse(FailableIntPredicate.falsePredicate().and(null).test(0)));
assertThrows(NullPointerException.class,() -> assertTrue(FailableIntPredicate.truePredicate().and(null).test(0)));
assertFalse(FailableIntPredicate.TRUE.negate().test(0));
assertFalse(FailableIntPredicate.truePredicate().negate().test(0));
assertTrue(FailableIntPredicate.FALSE.negate().test(0));
assertTrue(FailableIntPredicate.falsePredicate().negate().test(0));
assertTrue(FailableIntPredicate.TRUE.or(FailableIntPredicate.TRUE).test(0));
assertTrue(FailableIntPredicate.TRUE.or(FailableIntPredicate.FALSE).test(0));
assertTrue(FailableIntPredicate.FALSE.or(FailableIntPredicate.TRUE).test(0));
assertFalse(FailableIntPredicate.FALSE.or(FailableIntPredicate.FALSE).test(0));
assertThrows(NullPointerException.class,() -> assertFalse(FailableIntPredicate.falsePredicate().or(null).test(0)));
assertThrows(NullPointerException.class,() -> assertTrue(FailableIntPredicate.truePredicate().or(null).test(0)));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).applyAsInt(0));
assertSame(ERROR, e);
e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).applyAsInt(0));
assertSame(ERROR, e);
assertThrows(NullPointerException.class, () -> failing.andThen(null));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.compose(failing).applyAsInt(0));
assertSame(ERROR, e);
e = assertThrows(OutOfMemoryError.class, () -> failing.compose(nop).applyAsInt(0));
assertSame(ERROR, e);
assertThrows(NullPointerException.class, () -> failing.compose(null));
assertThrows(NullPointerException.class, () -> nop.compose(null));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).accept(0L));
assertSame(ERROR, e);
e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).accept(0L));
assertSame(ERROR, e);
assertThrows(NullPointerException.class, () -> failing.andThen(null));
assertThrows(SomeException.class, () -> failablePredicate.test(1L));
assertTrue(FailableLongPredicate.TRUE.and(FailableLongPredicate.TRUE).test(0));
assertFalse(FailableLongPredicate.TRUE.and(FailableLongPredicate.FALSE).test(0));
assertFalse(FailableLongPredicate.FALSE.and(FailableLongPredicate.TRUE).test(0));
assertFalse(FailableLongPredicate.FALSE.and(FailableLongPredicate.FALSE).test(0));
assertThrows(NullPointerException.class, () -> assertFalse(FailableLongPredicate.falsePredicate().and(null).test(0)));
assertThrows(NullPointerException.class, () -> assertTrue(FailableLongPredicate.truePredicate().and(null).test(0)));
assertFalse(FailableLongPredicate.TRUE.negate().test(0L));
assertFalse(FailableLongPredicate.truePredicate().negate().test(0L));
assertTrue(FailableLongPredicate.FALSE.negate().test(0L));
assertTrue(FailableLongPredicate.falsePredicate().negate().test(0L));
assertTrue(FailableLongPredicate.TRUE.or(FailableLongPredicate.TRUE).test(0));
assertTrue(FailableLongPredicate.TRUE.or(FailableLongPredicate.FALSE).test(0));
assertTrue(FailableLongPredicate.FALSE.or(FailableLongPredicate.TRUE).test(0));
assertFalse(FailableLongPredicate.FALSE.or(FailableLongPredicate.FALSE).test(0));
assertThrows(NullPointerException.class, () -> assertFalse(FailableLongPredicate.falsePredicate().or(null).test(0)));
assertThrows(NullPointerException.class, () -> assertTrue(FailableLongPredicate.truePredicate().or(null).test(0)));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).applyAsLong(0L));
assertSame(ERROR, e);
e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).applyAsLong(0L));
assertSame(ERROR, e);
assertThrows(NullPointerException.class, () -> failing.andThen(null));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.compose(failing).applyAsLong(0L));
assertSame(ERROR, e);
e = assertThrows(OutOfMemoryError.class, () -> failing.compose(nop).applyAsLong(0L));
assertSame(ERROR, e);
assertThrows(NullPointerException.class, () -> failing.compose(null));
assertThrows(NullPointerException.class, () -> nop.compose(null));
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> predicate.test(null));
assertNotNull(cause);
assertTrue(cause instanceof SomeException);
assertEquals("Odd Invocation: 1", cause.getMessage());
assertNotNull(instance);
assertTrue(FailablePredicate.TRUE.and(FailablePredicate.TRUE).test(null));
assertFalse(FailablePredicate.TRUE.and(FailablePredicate.FALSE).test(null));
assertFalse(FailablePredicate.FALSE.and(FailablePredicate.TRUE).test(null));
assertFalse(FailablePredicate.FALSE.and(FailablePredicate.FALSE).test(null));
assertThrows(NullPointerException.class, () -> assertFalse(FailablePredicate.FALSE.and(null).test(null)));
assertThrows(NullPointerException.class, () -> assertTrue(FailablePredicate.TRUE.and(null).test(null)));
assertTrue(FailablePredicate.TRUE.or(FailablePredicate.TRUE).test(null));
assertTrue(FailablePredicate.TRUE.or(FailablePredicate.FALSE).test(null));
assertTrue(FailablePredicate.FALSE.or(FailablePredicate.TRUE).test(null));
assertFalse(FailablePredicate.FALSE.or(FailablePredicate.FALSE).test(null));
assertThrows(NullPointerException.class, () -> assertFalse(FailablePredicate.FALSE.or(null).test(null)));
assertThrows(NullPointerException.class, () -> assertTrue(FailablePredicate.TRUE.or(null).test(null)));
assertFalse(FailablePredicate.TRUE.negate().test(null));
assertFalse(FailablePredicate.truePredicate().negate().test(null));
assertTrue(FailablePredicate.FALSE.negate().test(null));
assertTrue(FailablePredicate.falsePredicate().negate().test(null));
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> Failable.run(FailureOnOddInvocations::new));
assertNotNull(cause);
assertTrue(cause instanceof SomeException);
assertEquals("Odd Invocation: 1", cause.getMessage());
Throwable e = assertThrows(IllegalStateException.class,() -> Failable.tryWithResources(() -> consumer.accept(ILLEGAL_STATE_EXCEPTION), closeable::close));
assertSame(ILLEGAL_STATE_EXCEPTION, e);
assertTrue(closeable.isClosed());
e = assertThrows(OutOfMemoryError.class,() -> Failable.tryWithResources(() -> consumer.accept(ERROR), closeable::close));
assertSame(ERROR, e);
assertTrue(closeable.isClosed());
final UncheckedIOException uioe = assertThrows(UncheckedIOException.class,() -> Failable.tryWithResources(() -> consumer.accept(ioe), closeable::close));
assertSame(ioe, cause);
assertTrue(closeable.isClosed());
assertTrue(closeable.isClosed());
assertEquals(0, FailableDoubleToIntFunction.nop().applyAsInt(Double.MAX_VALUE), "Expect NOP to return 0");
assertEquals(0, FailableDoubleToLongFunction.nop().applyAsLong(Double.MAX_VALUE), "Expect NOP to return 0");
assertEquals(0, FailableIntToDoubleFunction.nop().applyAsDouble(Integer.MAX_VALUE), "Expect NOP to return 0");
assertEquals(0, FailableIntToLongFunction.nop().applyAsLong(Integer.MAX_VALUE), "Expect NOP to return 0");
assertEquals(0, FailableLongToDoubleFunction.nop().applyAsDouble(Long.MAX_VALUE), "Expect NOP to return 0");
assertEquals(0, FailableLongToIntFunction.nop().applyAsInt(Long.MAX_VALUE), "Expect NOP to return 0");
assertEquals(0, FailableToIntFunction.nop().applyAsInt("Foo"), "Expect NOP to return 0");
assertEquals(0, FailableToIntBiFunction.nop().applyAsInt("Foo", "Bar"), "Expect NOP to return 0");
assertEquals(0, FailableToLongFunction.nop().applyAsLong("Foo"), "Expect NOP to return 0");
assertEquals(0, FailableToLongBiFunction.nop().applyAsLong("Foo", "Bar"), "Expect NOP to return 0");
assertEquals(0, FailableToDoubleFunction.nop().applyAsDouble("Foo"), "Expect NOP to return 0");
assertEquals(0, FailableToDoubleBiFunction.nop().applyAsDouble("Foo", "Bar"), "Expect NOP to return 0");
assertNull(FailableBiFunction.nop().apply("Foo", "Bar"), "Expect NOP to return null");
assertNull(FailableDoubleFunction.nop().apply(Double.MAX_VALUE), "Expect NOP to return null");
assertNull(FailableIntFunction.nop().apply(Integer.MAX_VALUE), "Expect NOP to return null");
assertNull(FailableLongFunction.nop().apply(Long.MAX_VALUE), "Expect NOP to return null");
assertEquals(INSTANCE.getString1ArgChecked("A"), func.apply(INSTANCE, "A"));
assertThrows(CustomCheckedException.class, () -> func.apply(INSTANCE, "A"));
assertThrows(CustomUncheckedException.class, () -> func.apply(INSTANCE, "A"));
assertThrows(NullPointerException.class, () -> MethodInvokers.asFailableBiFunction(null));
assertFalse(MethodInvokers.asFailableBiFunction(getMethodForGetString1ArgChecked()).toString().isEmpty());
assertEquals("A", INSTANCE.getValue1());
assertThrows(CustomCheckedException.class, () -> MethodInvokers.asFailableBiConsumer(getMethodForSetString1ArgThrowsChecked()).accept(INSTANCE, "A"));
assertThrows(CustomUncheckedException.class, () -> MethodInvokers.asFailableBiConsumer(getMethodForSetString1ArgThrowsUnchecked()).accept(INSTANCE, "A"));
assertThrows(NullPointerException.class, () -> MethodInvokers.asFailableBiConsumer(null));
assertFalse(MethodInvokers.asFailableBiConsumer(getMethodForSetString1Arg()).toString().isEmpty());
assertEquals(INSTANCE.getString(), MethodInvokers.asFailableFunction(getMethodForGetString()).apply(INSTANCE));
assertThrows(NullPointerException.class, () -> MethodInvokers.asFailableFunction((Method) null));
assertEquals(2, invokers.size());
assertEquals(new HashSet<>(Arrays.asList(INSTANCE.getString(), INSTANCE.getString2())), set);
assertThrows(Exception.class, () -> MethodInvokers.asFailableFunction(getMethodForGetStringThrowsChecked()).apply(INSTANCE));
assertFalse(MethodInvokers.asFailableFunction(getMethodForGetString()).toString().isEmpty());
assertSame("foo", Objects.requireNonNull("foo"));
assertEquals("The value must not be null.", e.getMessage());
assertSame("foo", Objects.requireNonNull("foo", supplier));
assertFalse(supplier.isInvoked());
assertEquals("The supplier must not return null.", e.getMessage());
assertTrue(supplier.isInvoked());
assertEquals("The supplier must not return null.", e.getMessage());
assertTrue(supplier2.isInvoked());
assertSame("bar", Objects.requireNonNull(null, supplier3));
assertSame(rte, e);
assertTrue(supplier4.isInvoked());
assertSame("foo", Objects.requireNonNull("foo", "bar"));
assertEquals("bar", e.getMessage());
assertSame("foo", Objects.requireNonNull("foo", supplier));
assertFalse(supplier.isInvoked());
assertEquals("bar", e.getMessage());
assertTrue(supplier.isInvoked());
assertNull(Suppliers.get(null));
assertNull(Suppliers.get(() -> null));
assertEquals("foo", Suppliers.get(() -> "foo"));
assertEquals("A", INSTANCE.getValue1());
assertEquals("B", INSTANCE.getValue1());
assertThrows(NullPointerException.class, () -> MethodInvokers.asBiConsumer(null));
assertFalse(biConsumer.toString().isEmpty());
assertFalse(biConsumer.toString().isEmpty());
assertEquals(bf_multi.getValue(-1), 127);
assertEquals(bf_multi.getValue(0), 0);
assertEquals(bf_single.getValue(-1), 1);
assertEquals(bf_single.getValue(0), 0);
assertEquals(bf_zero.getValue(-1), 0);
assertEquals(bf_zero.getValue(0), 0);
assertEquals(bf_multi.getShortValue((short) - 1), (short) 127);
assertEquals(bf_multi.getShortValue((short) 0), (short) 0);
assertEquals(bf_single.getShortValue((short) - 1), (short) 1);
assertEquals(bf_single.getShortValue((short) 0), (short) 0);
assertEquals(bf_zero.getShortValue((short) -1), (short) 0);
assertEquals(bf_zero.getShortValue((short) 0), (short) 0);
assertEquals(bf_multi.getRawValue(-1), 0x3F80);
assertEquals(bf_multi.getRawValue(0), 0);
assertEquals(bf_single.getRawValue(-1), 0x4000);
assertEquals(bf_single.getRawValue(0), 0);
assertEquals(bf_zero.getRawValue(-1), 0);
assertEquals(bf_zero.getRawValue(0), 0);
assertEquals(bf_multi.getShortRawValue((short) - 1), (short) 0x3F80);
assertEquals(bf_multi.getShortRawValue((short) 0), (short) 0);
assertEquals(bf_single.getShortRawValue((short) - 1), (short) 0x4000);
assertEquals(bf_single.getShortRawValue((short) 0), (short) 0);
assertEquals(bf_zero.getShortRawValue((short) -1), (short) 0);
assertEquals(bf_zero.getShortRawValue((short) 0), (short) 0);
assertFalse(bf_multi.isSet(0));
assertFalse(bf_zero.isSet(0));
assertTrue(bf_multi.isSet(j));
assertFalse(bf_zero.isSet(j));
assertFalse(bf_single.isSet(0));
assertTrue(bf_single.isSet(0x4000));
assertFalse(bf_multi.isAllSet(j));
assertTrue(bf_zero.isAllSet(j));
assertTrue(bf_multi.isAllSet(0x3F80));
assertFalse(bf_single.isAllSet(0));
assertTrue(bf_single.isAllSet(0x4000));
assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j);
assertEquals(bf_multi.setValue(0, j), j << 7);
assertEquals(bf_zero.getValue(bf_zero.setValue(0, j)), 0);
assertEquals(bf_zero.setValue(0, j), 0);
assertEquals(bf_multi.setValue(0x3f80, 128), 0);
assertEquals(bf_single.getValue(bf_single.setValue(0, j)), j);
assertEquals(bf_single.setValue(0, j), j << 14);
assertEquals(bf_single.setValue(0x4000, 2), 0);
assertEquals(bf_multi.getShortValue(bf_multi.setShortValue((short) 0, (short) j)), (short) j);
assertEquals(bf_multi.setShortValue((short) 0, (short) j), (short) (j << 7));
assertEquals(bf_zero.getShortValue(bf_zero.setShortValue((short) 0, (short) j)), (short) 0);
assertEquals(bf_zero.setShortValue((short) 0, (short) j), (short) 0);
assertEquals(bf_multi.setShortValue((short) 0x3f80, (short) 128), (short) 0);
assertEquals(bf_single.getShortValue(bf_single.setShortValue((short) 0, (short) j)), (short) j);
assertEquals(bf_single.setShortValue((short) 0, (short) j), (short) (j << 14));
assertEquals(bf_single.setShortValue((short) 0x4000, (short) 2), (short) 0);
assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true));
assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true));
assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true));
assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true));
assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true));
assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true));
assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true));
assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true));
assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true));
assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false));
assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false));
assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false));
assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false));
assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false));
assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false));
assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false));
assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false));
assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false));
assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false));
assertFalse(new BitField(0x40).isSet(clearedBit));
assertEquals(bf_multi.clear(-1), 0xFFFFC07F);
assertEquals(bf_single.clear(-1), 0xFFFFBFFF);
assertEquals(bf_zero.clear(-1), 0xFFFFFFFF);
assertEquals(bf_multi.clearShort((short) - 1), (short) 0xC07F);
assertEquals(bf_single.clearShort((short) - 1), (short) 0xBFFF);
assertEquals(bf_zero.clearShort((short) -1), (short) 0xFFFF);
assertEquals(bf_multi.set(0), 0x3F80);
assertEquals(bf_single.set(0), 0x4000);
assertEquals(bf_zero.set(0), 0);
assertEquals(bf_multi.setShort((short) 0), (short) 0x3F80);
assertEquals(bf_single.setShort((short) 0), (short) 0x4000);
assertEquals(bf_zero.setShort((short) 0), (short) 0);
assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true));
assertEquals(bf_single.set(0), bf_single.setBoolean(0, true));
assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true));
assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false));
assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false));
assertEquals(bf_zero.clear(-1), bf_zero.setBoolean(-1, false));
assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true));
assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true));
assertEquals(bf_zero.setShort((short) 0), bf_zero.setShortBoolean((short) 0, true));
assertEquals(bf_multi.clearShort((short) - 1), bf_multi.setShortBoolean((short) - 1, false));
assertEquals(bf_single.clearShort((short) - 1), bf_single.setShortBoolean((short) - 1, false));
assertEquals(bf_zero.clearShort((short) -1), bf_zero.setShortBoolean((short) -1, false));
assertEquals(50, f.getNumerator());
assertEquals(75, f.getDenominator());
assertEquals(50, f.getNumerator());
assertEquals(75, f.getDenominator());
assertEquals(Integer.MAX_VALUE, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(Integer.MAX_VALUE, f.getNumerator());
assertEquals(1, f.getDenominator());
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MIN_VALUE, 1).abs());
assertEquals(4, f.getNumerator());
assertEquals(5, f.getDenominator());
assertEquals(1, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(6, f.getNumerator());
assertEquals(5, f.getDenominator());
assertEquals(-1, f.getNumerator());
assertEquals(5, f.getDenominator());
assertEquals(Integer.MAX_VALUE, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(11, f.getNumerator());
assertEquals(10, f.getDenominator());
assertEquals(13, f.getNumerator());
assertEquals(24, f.getDenominator());
assertSame(f2, f);
assertSame(f2, f);
assertEquals(13*13*17*2*2, fr.getDenominator());
assertEquals(-17 - 2*13*2, fr.getNumerator());
assertThrows(NullPointerException.class, () -> fr.add(null));
assertEquals(52451, f.getNumerator());
assertEquals(1934917632, f.getDenominator());
assertEquals(Integer.MIN_VALUE+1, f.getNumerator());
assertEquals(3, f.getDenominator());
assertEquals(Integer.MAX_VALUE, f.getNumerator());
assertEquals(1, f.getDenominator());
assertThrows(ArithmeticException.class, () -> overflower.add(Fraction.ONE)); // should overflow
assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Integer.MIN_VALUE, 5).add(Fraction.getFraction(-1, 5)));
assertThrows(ArithmeticException.class, () -> maxValue.add(maxValue));
assertThrows(ArithmeticException.class, () -> negativeMaxValue.add(negativeMaxValue));
assertThrows(ArithmeticException.class, () -> f3.add(f4)); // should overflow
assertEquals(0, f1.compareTo(f1));
assertThrows(NullPointerException.class, () -> fr.compareTo(null));
assertTrue(f1.compareTo(f2) > 0);
assertEquals(0, f2.compareTo(f2));
assertTrue(f1.compareTo(f2) < 0);
assertEquals(0, f2.compareTo(f2));
assertEquals(0, f1.compareTo(f2));
assertEquals(0, f2.compareTo(f2));
assertEquals(0, f1.compareTo(f2));
assertEquals(0, f2.compareTo(f2));
assertTrue(f1.compareTo(f2) > 0);
assertEquals(0, f2.compareTo(f2));
assertEquals(0, Fraction.ZERO.getNumerator());
assertEquals(1, Fraction.ZERO.getDenominator());
assertEquals(1, Fraction.ONE.getNumerator());
assertEquals(1, Fraction.ONE.getDenominator());
assertEquals(1, Fraction.ONE_HALF.getNumerator());
assertEquals(2, Fraction.ONE_HALF.getDenominator());
assertEquals(1, Fraction.ONE_THIRD.getNumerator());
assertEquals(3, Fraction.ONE_THIRD.getDenominator());
assertEquals(2, Fraction.TWO_THIRDS.getNumerator());
assertEquals(3, Fraction.TWO_THIRDS.getDenominator());
assertEquals(1, Fraction.ONE_QUARTER.getNumerator());
assertEquals(4, Fraction.ONE_QUARTER.getDenominator());
assertEquals(2, Fraction.TWO_QUARTERS.getNumerator());
assertEquals(4, Fraction.TWO_QUARTERS.getDenominator());
assertEquals(3, Fraction.THREE_QUARTERS.getNumerator());
assertEquals(4, Fraction.THREE_QUARTERS.getDenominator());
assertEquals(1, Fraction.ONE_FIFTH.getNumerator());
assertEquals(5, Fraction.ONE_FIFTH.getDenominator());
assertEquals(2, Fraction.TWO_FIFTHS.getNumerator());
assertEquals(5, Fraction.TWO_FIFTHS.getDenominator());
assertEquals(3, Fraction.THREE_FIFTHS.getNumerator());
assertEquals(5, Fraction.THREE_FIFTHS.getDenominator());
assertEquals(4, Fraction.FOUR_FIFTHS.getNumerator());
assertEquals(5, Fraction.FOUR_FIFTHS.getDenominator());
assertEquals(3, f.intValue());
assertEquals(3L, f.longValue());
assertEquals(3.875f, f.floatValue(), 0.00001f);
assertEquals(3.875d, f.doubleValue(), 0.00001d);
assertEquals(3, f.getNumerator());
assertEquals(2, f.getDenominator());
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(3, 5).divideBy(Fraction.ZERO));
assertSame(Fraction.ZERO, f);
assertEquals(2, f.getNumerator());
assertEquals(7, f.getDenominator());
assertEquals(1, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(Integer.MIN_VALUE, fr.getNumerator());
assertEquals(1, fr.getDenominator());
assertThrows(NullPointerException.class, () -> fr.divideBy(null));
assertThrows(ArithmeticException.class, () -> smallest.divideBy(smallest.invert())); // Should overflow
assertThrows(ArithmeticException.class, () -> negative.divideBy(negative.invert())); // Should overflow
assertNotEquals(null, f1);
assertNotEquals(f1, new Object());
assertNotEquals(f1, Integer.valueOf(6));
assertNotEquals(f1, f2);
assertEquals(f1, f1);
assertEquals(f2, f2);
assertEquals(f1, f2);
assertNotEquals(f1, f2);
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Double.NaN));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Double.POSITIVE_INFINITY));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Double.NEGATIVE_INFINITY));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction((double) Integer.MAX_VALUE + 1));
assertEquals(0, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(1, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(1, f.getNumerator());
assertEquals(2, f.getDenominator());
assertEquals(-7, f.getNumerator());
assertEquals(8, f.getDenominator());
assertEquals(5, f.getNumerator());
assertEquals(4, f.getDenominator());
assertEquals(2, f.getNumerator());
assertEquals(3, f.getDenominator());
assertEquals(0, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(f2.getNumerator(), f.getNumerator());
assertEquals(f2.getDenominator(), f.getDenominator());
assertEquals(f2.getNumerator(), f.getNumerator());
assertEquals(f2.getDenominator(), f.getDenominator());
assertEquals(0, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(0, f.getNumerator());
assertEquals(2, f.getDenominator());
assertEquals(1, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(2, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(23, f.getNumerator());
assertEquals(345, f.getDenominator());
assertEquals(22, f.getNumerator());
assertEquals(7, f.getDenominator());
assertEquals(-6, f.getNumerator());
assertEquals(10, f.getDenominator());
assertEquals(-6, f.getNumerator());
assertEquals(10, f.getDenominator());
assertEquals(6, f.getNumerator());
assertEquals(10, f.getDenominator());
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, 0));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(2, 0));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-3, 0));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(4, Integer.MIN_VALUE));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, Integer.MIN_VALUE));
assertEquals(0, f.getNumerator());
assertEquals(2, f.getDenominator());
assertEquals(4, f.getNumerator());
assertEquals(2, f.getDenominator());
assertEquals(1, f.getNumerator());
assertEquals(2, f.getDenominator());
assertEquals(3, f.getNumerator());
assertEquals(2, f.getDenominator());
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, -6, -10));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, -6, -10));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, -6, -10));
assertEquals(-16, f.getNumerator());
assertEquals(10, f.getDenominator());
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-1, -6, 10));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-1, 6, -10));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-1, -6, -10));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(0, 1, 0));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, 2, 0));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-1, -3, 0));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MAX_VALUE, 1, 2));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-Integer.MAX_VALUE, 1, 2));
assertEquals(-Integer.MAX_VALUE, f.getNumerator());
assertEquals(Integer.MAX_VALUE, f.getDenominator());
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(0, 4, Integer.MIN_VALUE));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, 1, Integer.MAX_VALUE));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-1, 2, Integer.MAX_VALUE));
assertThrows(NullPointerException.class, () -> Fraction.getFraction(null));
assertEquals(0, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(1, f.getNumerator());
assertEquals(5, f.getDenominator());
assertEquals(1, f.getNumerator());
assertEquals(2, f.getDenominator());
assertEquals(2, f.getNumerator());
assertEquals(3, f.getDenominator());
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("2.3R"));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("2147483648")); // too big
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("."));
assertEquals(0, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(1, f.getNumerator());
assertEquals(5, f.getDenominator());
assertEquals(1, f.getNumerator());
assertEquals(2, f.getDenominator());
assertEquals(2, f.getNumerator());
assertEquals(3, f.getDenominator());
assertEquals(7, f.getNumerator());
assertEquals(3, f.getDenominator());
assertEquals(2, f.getNumerator());
assertEquals(4, f.getDenominator());
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("2/d"));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("2e/3"));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("2/"));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("/"));
assertEquals(0, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(6, f.getNumerator());
assertEquals(5, f.getDenominator());
assertEquals(15, f.getNumerator());
assertEquals(2, f.getDenominator());
assertEquals(6, f.getNumerator());
assertEquals(4, f.getDenominator());
assertEquals(-15, f.getNumerator());
assertEquals(2, f.getDenominator());
assertEquals(-6, f.getNumerator());
assertEquals(4, f.getDenominator());
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("2 3"));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("a 3"));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("2 b/4"));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("2 "));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction(" 3"));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction(" "));
assertEquals(23, f.getNumerator());
assertEquals(3, f.getProperWhole());
assertEquals(5, f.getProperNumerator());
assertEquals(6, f.getDenominator());
assertEquals(-23, f.getNumerator());
assertEquals(-3, f.getProperWhole());
assertEquals(5, f.getProperNumerator());
assertEquals(6, f.getDenominator());
assertEquals(Integer.MIN_VALUE, f.getNumerator());
assertEquals(Integer.MIN_VALUE, f.getProperWhole());
assertEquals(0, f.getProperNumerator());
assertEquals(1, f.getDenominator());
assertEquals(f1.hashCode(), f2.hashCode());
assertTrue(f1.hashCode() != f2.hashCode());
assertTrue(f1.hashCode() != f2.hashCode());
assertEquals(75, f.getNumerator());
assertEquals(50, f.getDenominator());
assertEquals(3, f.getNumerator());
assertEquals(4, f.getDenominator());
assertEquals(-47, f.getNumerator());
assertEquals(15, f.getDenominator());
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(0, 3).invert());
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MIN_VALUE, 1).invert());
assertEquals(1, f.getNumerator());
assertEquals(Integer.MAX_VALUE, f.getDenominator());
assertEquals(6, f.getNumerator());
assertEquals(25, f.getDenominator());
assertEquals(9, f.getNumerator());
assertEquals(25, f.getDenominator());
assertEquals(27, f.getNumerator());
assertEquals(125, f.getDenominator());
assertEquals(-6, f.getNumerator());
assertEquals(25, f.getDenominator());
assertEquals(6, f.getNumerator());
assertEquals(25, f.getDenominator());
assertSame(Fraction.ZERO, f);
assertEquals(2, f.getNumerator());
assertEquals(7, f.getDenominator());
assertEquals(Integer.MIN_VALUE, f.getNumerator());
assertEquals(1, f.getDenominator());
assertThrows(NullPointerException.class, () -> fr.multiplyBy(null));
assertThrows(ArithmeticException.class, () -> fr1.multiplyBy(fr1));
assertThrows(ArithmeticException.class, () -> fr2.multiplyBy(fr2));
assertEquals(-50, f.getNumerator());
assertEquals(75, f.getDenominator());
assertEquals(50, f.getNumerator());
assertEquals(75, f.getDenominator());
assertEquals(Integer.MIN_VALUE+2, f.getNumerator());
assertEquals(Integer.MAX_VALUE, f.getDenominator());
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MIN_VALUE, 1).negate());
assertEquals(Fraction.ONE, f.pow(0));
assertSame(f, f.pow(1));
assertEquals(f, f.pow(1));
assertEquals(9, f.getNumerator());
assertEquals(25, f.getDenominator());
assertEquals(27, f.getNumerator());
assertEquals(125, f.getDenominator());
assertEquals(5, f.getNumerator());
assertEquals(3, f.getDenominator());
assertEquals(25, f.getNumerator());
assertEquals(9, f.getDenominator());
assertEquals(Fraction.ONE, f.pow(0));
assertEquals(f, f.pow(1));
assertNotEquals(f.pow(1), Fraction.getFraction(3, 5));
assertEquals(9, f.getNumerator());
assertEquals(25, f.getDenominator());
assertEquals(27, f.getNumerator());
assertEquals(125, f.getDenominator());
assertEquals(10, f.getNumerator());
assertEquals(6, f.getDenominator());
assertEquals(25, f.getNumerator());
assertEquals(9, f.getDenominator());
assertEquals(0, f.compareTo(Fraction.ZERO));
assertEquals(0, f.getNumerator());
assertEquals(1231, f.getDenominator());
assertEquals(0, f.compareTo(Fraction.ZERO));
assertEquals(0, f.getNumerator());
assertEquals(1, f.getDenominator());
assertThrows(ArithmeticException.class, () -> fr.pow(-1));
assertThrows(ArithmeticException.class, () -> fr.pow(Integer.MIN_VALUE));
assertEquals(f, Fraction.ONE);
assertEquals(f, Fraction.ONE);
assertEquals(f, Fraction.ONE);
assertEquals(f, Fraction.ONE);
assertEquals(f, Fraction.ONE);
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MAX_VALUE, 1).pow(2));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MIN_VALUE, 1).pow(3));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(65536, 1).pow(2));
assertEquals(2, result.getNumerator());
assertEquals(3, result.getDenominator());
assertEquals(2, result.getNumerator());
assertEquals(3, result.getDenominator());
assertEquals(-2, result.getNumerator());
assertEquals(3, result.getDenominator());
assertEquals(-2, result.getNumerator());
assertEquals(3, result.getDenominator());
assertSame(f, result);
assertEquals(2, result.getNumerator());
assertEquals(3, result.getDenominator());
assertSame(f, result);
assertEquals(0, result.getNumerator());
assertEquals(1, result.getDenominator());
assertSame(f, result);
assertEquals(0, result.getNumerator());
assertEquals(1, result.getDenominator());
assertSame(result, Fraction.ZERO);
assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());
assertEquals(1, result.getDenominator());
assertEquals(0, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(1, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(2, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(22, f.getNumerator());
assertEquals(7, f.getDenominator());
assertEquals(-3, f.getNumerator());
assertEquals(5, f.getDenominator());
assertEquals(-3, f.getNumerator());
assertEquals(5, f.getDenominator());
assertEquals(3, f.getNumerator());
assertEquals(5, f.getDenominator());
assertThrows(ArithmeticException.class, () -> Fraction.getReducedFraction(1, 0));
assertThrows(ArithmeticException.class, () -> Fraction.getReducedFraction(2, 0));
assertThrows(ArithmeticException.class, () -> Fraction.getReducedFraction(-3, 0));
assertEquals(0, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(1, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(1, f.getNumerator());
assertEquals(2, f.getDenominator());
assertEquals(3, f.getNumerator());
assertEquals(2, f.getDenominator());
assertEquals(11, f.getNumerator());
assertEquals(2, f.getDenominator());
assertEquals(1, f.getNumerator());
assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());
assertThrows(ArithmeticException.class, () -> Fraction.getReducedFraction(-7, Integer.MIN_VALUE));
assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(2, f.getNumerator());
assertEquals(5, f.getDenominator());
assertEquals(1, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(0, f.getNumerator());
assertEquals(1, f.getDenominator());
assertEquals(7, f.getNumerator());
assertEquals(5, f.getDenominator());
assertEquals(-4, f.getNumerator());
assertEquals(5, f.getDenominator());
assertEquals(4, f.getNumerator());
assertEquals(5, f.getDenominator());
assertEquals(1, f.getNumerator());
assertEquals(10, f.getDenominator());
assertSame(f2, f);
assertThrows(NullPointerException.class, () -> fr.subtract(null));
assertEquals(-13085, f.getNumerator());
assertEquals(1934917632, f.getDenominator());
assertEquals(Integer.MIN_VALUE+1, f.getNumerator());
assertEquals(3, f.getDenominator());
assertEquals(Integer.MAX_VALUE-1, f.getNumerator());
assertEquals(1, f.getDenominator());
assertThrows(ArithmeticException.class,() -> Fraction.getFraction(1, Integer.MAX_VALUE).subtract(Fraction.getFraction(1, Integer.MAX_VALUE - 1)));
assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Integer.MIN_VALUE, 5).subtract(Fraction.getFraction(1, 5)));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MIN_VALUE, 1).subtract(Fraction.ONE));
assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Integer.MAX_VALUE, 1).subtract(Fraction.ONE.negate()));
assertThrows(ArithmeticException.class,() -> Fraction.getFraction(3, 327680).subtract(Fraction.getFraction(2, 59049)));
assertEquals("3/5", str);
assertSame(str, f.toProperString());
assertEquals("1 2/5", f.toProperString());
assertEquals("1 4/10", f.toProperString());
assertEquals("2", f.toProperString());
assertEquals("0", f.toProperString());
assertEquals("1", f.toProperString());
assertEquals("-1 2/5", f.toProperString());
assertEquals("-2147483648", f.toProperString());
assertEquals("-1 1/2147483647", f.toProperString());
assertEquals("-1", Fraction.getFraction(-1).toProperString());
assertEquals("3/5", str);
assertSame(str, f.toString());
assertEquals("7/5", f.toString());
assertEquals("4/2", f.toString());
assertEquals("0/2", f.toString());
assertEquals("2/2", f.toString());
assertEquals("-2147483648/1", f.toString());
assertEquals("-2147483648/2147483647", f.toString());
assertTrue(NumberUtils.compare((byte) -3, (byte) 0) < 0);
assertEquals(0, NumberUtils.compare((byte) 113, (byte) 113));
assertTrue(NumberUtils.compare((byte) 123, (byte) 32) > 0);
assertTrue(NumberUtils.compare(-3, 0) < 0);
assertEquals(0, NumberUtils.compare(113, 113));
assertTrue(NumberUtils.compare(213, 32) > 0);
assertTrue(isValid == expected && canCreate == expected, "Expecting " + expected+ " for isCreatable/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
assertTrue(isValid == expected && canCreate == expected, "Expecting " + expected+ " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
assertTrue(NumberUtils.compare(-3L, 0L) < 0);
assertEquals(0, NumberUtils.compare(113L, 113L));
assertTrue(NumberUtils.compare(213L, 32L) > 0);
assertTrue(NumberUtils.compare((short) -3, (short) 0) < 0);
assertEquals(0, NumberUtils.compare((short) 113, (short) 113));
assertTrue(NumberUtils.compare((short) 213, (short) 32) > 0);
assertEquals(0.0d, NumberUtils.toDouble((BigDecimal) null), "toDouble(BigInteger) 1 failed");
assertEquals(8.5d, NumberUtils.toDouble(BigDecimal.valueOf(8.5d)), "toDouble(BigInteger) 2 failed");
assertEquals(1.1d, NumberUtils.toDouble((BigDecimal) null, 1.1d), "toDouble(BigInteger) 1 failed");
assertEquals(8.5d, NumberUtils.toDouble(BigDecimal.valueOf(8.5d), 1.1d), "toDouble(BigInteger) 2 failed");
assertEquals(0, Double.compare(Double.NaN, Double.NaN));
assertEquals(Double.compare(Double.NaN, Double.POSITIVE_INFINITY), +1);
assertEquals(Double.compare(Double.NaN, Double.MAX_VALUE), +1);
assertEquals(Double.compare(Double.NaN, 1.2d), +1);
assertEquals(Double.compare(Double.NaN, 0.0d), +1);
assertEquals(Double.compare(Double.NaN, -0.0d), +1);
assertEquals(Double.compare(Double.NaN, -1.2d), +1);
assertEquals(Double.compare(Double.NaN, -Double.MAX_VALUE), +1);
assertEquals(Double.compare(Double.NaN, Double.NEGATIVE_INFINITY), +1);
assertEquals(Double.compare(Double.POSITIVE_INFINITY, Double.NaN), -1);
assertEquals(0, Double.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY));
assertEquals(Double.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE), +1);
assertEquals(Double.compare(Double.POSITIVE_INFINITY, 1.2d), +1);
assertEquals(Double.compare(Double.POSITIVE_INFINITY, 0.0d), +1);
assertEquals(Double.compare(Double.POSITIVE_INFINITY, -0.0d), +1);
assertEquals(Double.compare(Double.POSITIVE_INFINITY, -1.2d), +1);
assertEquals(Double.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE), +1);
assertEquals(Double.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY), +1);
assertEquals(Double.compare(Double.MAX_VALUE, Double.NaN), -1);
assertEquals(Double.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY), -1);
assertEquals(0, Double.compare(Double.MAX_VALUE, Double.MAX_VALUE));
assertEquals(Double.compare(Double.MAX_VALUE, 1.2d), +1);
assertEquals(Double.compare(Double.MAX_VALUE, 0.0d), +1);
assertEquals(Double.compare(Double.MAX_VALUE, -0.0d), +1);
assertEquals(Double.compare(Double.MAX_VALUE, -1.2d), +1);
assertEquals(Double.compare(Double.MAX_VALUE, -Double.MAX_VALUE), +1);
assertEquals(Double.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY), +1);
assertEquals(Double.compare(1.2d, Double.NaN), -1);
assertEquals(Double.compare(1.2d, Double.POSITIVE_INFINITY), -1);
assertEquals(Double.compare(1.2d, Double.MAX_VALUE), -1);
assertEquals(0, Double.compare(1.2d, 1.2d));
assertEquals(Double.compare(1.2d, 0.0d), +1);
assertEquals(Double.compare(1.2d, -0.0d), +1);
assertEquals(Double.compare(1.2d, -1.2d), +1);
assertEquals(Double.compare(1.2d, -Double.MAX_VALUE), +1);
assertEquals(Double.compare(1.2d, Double.NEGATIVE_INFINITY), +1);
assertEquals(Double.compare(0.0d, Double.NaN), -1);
assertEquals(Double.compare(0.0d, Double.POSITIVE_INFINITY), -1);
assertEquals(Double.compare(0.0d, Double.MAX_VALUE), -1);
assertEquals(Double.compare(0.0d, 1.2d), -1);
assertEquals(0, Double.compare(0.0d, 0.0d));
assertEquals(Double.compare(0.0d, -0.0d), +1);
assertEquals(Double.compare(0.0d, -1.2d), +1);
assertEquals(Double.compare(0.0d, -Double.MAX_VALUE), +1);
assertEquals(Double.compare(0.0d, Double.NEGATIVE_INFINITY), +1);
assertEquals(Double.compare(-0.0d, Double.NaN), -1);
assertEquals(Double.compare(-0.0d, Double.POSITIVE_INFINITY), -1);
assertEquals(Double.compare(-0.0d, Double.MAX_VALUE), -1);
assertEquals(Double.compare(-0.0d, 1.2d), -1);
assertEquals(Double.compare(-0.0d, 0.0d), -1);
assertEquals(0, Double.compare(-0.0d, -0.0d));
assertEquals(Double.compare(-0.0d, -1.2d), +1);
assertEquals(Double.compare(-0.0d, -Double.MAX_VALUE), +1);
assertEquals(Double.compare(-0.0d, Double.NEGATIVE_INFINITY), +1);
assertEquals(Double.compare(-1.2d, Double.NaN), -1);
assertEquals(Double.compare(-1.2d, Double.POSITIVE_INFINITY), -1);
assertEquals(Double.compare(-1.2d, Double.MAX_VALUE), -1);
assertEquals(Double.compare(-1.2d, 1.2d), -1);
assertEquals(Double.compare(-1.2d, 0.0d), -1);
assertEquals(Double.compare(-1.2d, -0.0d), -1);
assertEquals(0, Double.compare(-1.2d, -1.2d));
assertEquals(Double.compare(-1.2d, -Double.MAX_VALUE), +1);
assertEquals(Double.compare(-1.2d, Double.NEGATIVE_INFINITY), +1);
assertEquals(Double.compare(-Double.MAX_VALUE, Double.NaN), -1);
assertEquals(Double.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY), -1);
assertEquals(Double.compare(-Double.MAX_VALUE, Double.MAX_VALUE), -1);
assertEquals(Double.compare(-Double.MAX_VALUE, 1.2d), -1);
assertEquals(Double.compare(-Double.MAX_VALUE, 0.0d), -1);
assertEquals(Double.compare(-Double.MAX_VALUE, -0.0d), -1);
assertEquals(Double.compare(-Double.MAX_VALUE, -1.2d), -1);
assertEquals(0, Double.compare(-Double.MAX_VALUE, -Double.MAX_VALUE));
assertEquals(Double.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY), +1);
assertEquals(Double.compare(Double.NEGATIVE_INFINITY, Double.NaN), -1);
assertEquals(Double.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY), -1);
assertEquals(Double.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE), -1);
assertEquals(Double.compare(Double.NEGATIVE_INFINITY, 1.2d), -1);
assertEquals(Double.compare(Double.NEGATIVE_INFINITY, 0.0d), -1);
assertEquals(Double.compare(Double.NEGATIVE_INFINITY, -0.0d), -1);
assertEquals(Double.compare(Double.NEGATIVE_INFINITY, -1.2d), -1);
assertEquals(Double.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE), -1);
assertEquals(0, Double.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY));
assertEquals(0, Float.compare(Float.NaN, Float.NaN));
assertEquals(Float.compare(Float.NaN, Float.POSITIVE_INFINITY), +1);
assertEquals(Float.compare(Float.NaN, Float.MAX_VALUE), +1);
assertEquals(Float.compare(Float.NaN, 1.2f), +1);
assertEquals(Float.compare(Float.NaN, 0.0f), +1);
assertEquals(Float.compare(Float.NaN, -0.0f), +1);
assertEquals(Float.compare(Float.NaN, -1.2f), +1);
assertEquals(Float.compare(Float.NaN, -Float.MAX_VALUE), +1);
assertEquals(Float.compare(Float.NaN, Float.NEGATIVE_INFINITY), +1);
assertEquals(Float.compare(Float.POSITIVE_INFINITY, Float.NaN), -1);
assertEquals(0, Float.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY));
assertEquals(Float.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE), +1);
assertEquals(Float.compare(Float.POSITIVE_INFINITY, 1.2f), +1);
assertEquals(Float.compare(Float.POSITIVE_INFINITY, 0.0f), +1);
assertEquals(Float.compare(Float.POSITIVE_INFINITY, -0.0f), +1);
assertEquals(Float.compare(Float.POSITIVE_INFINITY, -1.2f), +1);
assertEquals(Float.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE), +1);
assertEquals(Float.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY), +1);
assertEquals(Float.compare(Float.MAX_VALUE, Float.NaN), -1);
assertEquals(Float.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY), -1);
assertEquals(0, Float.compare(Float.MAX_VALUE, Float.MAX_VALUE));
assertEquals(Float.compare(Float.MAX_VALUE, 1.2f), +1);
assertEquals(Float.compare(Float.MAX_VALUE, 0.0f), +1);
assertEquals(Float.compare(Float.MAX_VALUE, -0.0f), +1);
assertEquals(Float.compare(Float.MAX_VALUE, -1.2f), +1);
assertEquals(Float.compare(Float.MAX_VALUE, -Float.MAX_VALUE), +1);
assertEquals(Float.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY), +1);
assertEquals(Float.compare(1.2f, Float.NaN), -1);
assertEquals(Float.compare(1.2f, Float.POSITIVE_INFINITY), -1);
assertEquals(Float.compare(1.2f, Float.MAX_VALUE), -1);
assertEquals(0, Float.compare(1.2f, 1.2f));
assertEquals(Float.compare(1.2f, 0.0f), +1);
assertEquals(Float.compare(1.2f, -0.0f), +1);
assertEquals(Float.compare(1.2f, -1.2f), +1);
assertEquals(Float.compare(1.2f, -Float.MAX_VALUE), +1);
assertEquals(Float.compare(1.2f, Float.NEGATIVE_INFINITY), +1);
assertEquals(Float.compare(0.0f, Float.NaN), -1);
assertEquals(Float.compare(0.0f, Float.POSITIVE_INFINITY), -1);
assertEquals(Float.compare(0.0f, Float.MAX_VALUE), -1);
assertEquals(Float.compare(0.0f, 1.2f), -1);
assertEquals(0, Float.compare(0.0f, 0.0f));
assertEquals(Float.compare(0.0f, -0.0f), +1);
assertEquals(Float.compare(0.0f, -1.2f), +1);
assertEquals(Float.compare(0.0f, -Float.MAX_VALUE), +1);
assertEquals(Float.compare(0.0f, Float.NEGATIVE_INFINITY), +1);
assertEquals(Float.compare(-0.0f, Float.NaN), -1);
assertEquals(Float.compare(-0.0f, Float.POSITIVE_INFINITY), -1);
assertEquals(Float.compare(-0.0f, Float.MAX_VALUE), -1);
assertEquals(Float.compare(-0.0f, 1.2f), -1);
assertEquals(Float.compare(-0.0f, 0.0f), -1);
assertEquals(0, Float.compare(-0.0f, -0.0f));
assertEquals(Float.compare(-0.0f, -1.2f), +1);
assertEquals(Float.compare(-0.0f, -Float.MAX_VALUE), +1);
assertEquals(Float.compare(-0.0f, Float.NEGATIVE_INFINITY), +1);
assertEquals(Float.compare(-1.2f, Float.NaN), -1);
assertEquals(Float.compare(-1.2f, Float.POSITIVE_INFINITY), -1);
assertEquals(Float.compare(-1.2f, Float.MAX_VALUE), -1);
assertEquals(Float.compare(-1.2f, 1.2f), -1);
assertEquals(Float.compare(-1.2f, 0.0f), -1);
assertEquals(Float.compare(-1.2f, -0.0f), -1);
assertEquals(0, Float.compare(-1.2f, -1.2f));
assertEquals(Float.compare(-1.2f, -Float.MAX_VALUE), +1);
assertEquals(Float.compare(-1.2f, Float.NEGATIVE_INFINITY), +1);
assertEquals(Float.compare(-Float.MAX_VALUE, Float.NaN), -1);
assertEquals(Float.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY), -1);
assertEquals(Float.compare(-Float.MAX_VALUE, Float.MAX_VALUE), -1);
assertEquals(Float.compare(-Float.MAX_VALUE, 1.2f), -1);
assertEquals(Float.compare(-Float.MAX_VALUE, 0.0f), -1);
assertEquals(Float.compare(-Float.MAX_VALUE, -0.0f), -1);
assertEquals(Float.compare(-Float.MAX_VALUE, -1.2f), -1);
assertEquals(0, Float.compare(-Float.MAX_VALUE, -Float.MAX_VALUE));
assertEquals(Float.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY), +1);
assertEquals(Float.compare(Float.NEGATIVE_INFINITY, Float.NaN), -1);
assertEquals(Float.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY), -1);
assertEquals(Float.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE), -1);
assertEquals(Float.compare(Float.NEGATIVE_INFINITY, 1.2f), -1);
assertEquals(Float.compare(Float.NEGATIVE_INFINITY, 0.0f), -1);
assertEquals(Float.compare(Float.NEGATIVE_INFINITY, -0.0f), -1);
assertEquals(Float.compare(Float.NEGATIVE_INFINITY, -1.2f), -1);
assertEquals(Float.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE), -1);
assertEquals(0, Float.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY));
assertTrue(NumberUtils.LONG_ZERO instanceof Long);
assertTrue(NumberUtils.LONG_ONE instanceof Long);
assertTrue(NumberUtils.LONG_MINUS_ONE instanceof Long);
assertTrue(NumberUtils.INTEGER_ZERO instanceof Integer);
assertTrue(NumberUtils.INTEGER_ONE instanceof Integer);
assertTrue(NumberUtils.INTEGER_MINUS_ONE instanceof Integer);
assertTrue(NumberUtils.SHORT_ZERO instanceof Short);
assertTrue(NumberUtils.SHORT_ONE instanceof Short);
assertTrue(NumberUtils.SHORT_MINUS_ONE instanceof Short);
assertTrue(NumberUtils.BYTE_ZERO instanceof Byte);
assertTrue(NumberUtils.BYTE_ONE instanceof Byte);
assertTrue(NumberUtils.BYTE_MINUS_ONE instanceof Byte);
assertTrue(NumberUtils.DOUBLE_ZERO instanceof Double);
assertTrue(NumberUtils.DOUBLE_ONE instanceof Double);
assertTrue(NumberUtils.DOUBLE_MINUS_ONE instanceof Double);
assertTrue(NumberUtils.FLOAT_ZERO instanceof Float);
assertTrue(NumberUtils.FLOAT_ONE instanceof Float);
assertTrue(NumberUtils.FLOAT_MINUS_ONE instanceof Float);
assertEquals(0, NumberUtils.LONG_ZERO.longValue());
assertEquals(1, NumberUtils.LONG_ONE.longValue());
assertEquals(NumberUtils.LONG_MINUS_ONE.longValue(), -1);
assertEquals(0, NumberUtils.INTEGER_ZERO.intValue());
assertEquals(1, NumberUtils.INTEGER_ONE.intValue());
assertEquals(NumberUtils.INTEGER_MINUS_ONE.intValue(), -1);
assertEquals(0, NumberUtils.SHORT_ZERO.shortValue());
assertEquals(1, NumberUtils.SHORT_ONE.shortValue());
assertEquals(NumberUtils.SHORT_MINUS_ONE.shortValue(), -1);
assertEquals(0, NumberUtils.BYTE_ZERO.byteValue());
assertEquals(1, NumberUtils.BYTE_ONE.byteValue());
assertEquals(NumberUtils.BYTE_MINUS_ONE.byteValue(), -1);
assertEquals(0.0d, NumberUtils.DOUBLE_ZERO.doubleValue());
assertEquals(1.0d, NumberUtils.DOUBLE_ONE.doubleValue());
assertEquals(NumberUtils.DOUBLE_MINUS_ONE.doubleValue(), -1.0d);
assertEquals(0.0f, NumberUtils.FLOAT_ZERO.floatValue());
assertEquals(1.0f, NumberUtils.FLOAT_ONE.floatValue());
assertEquals(NumberUtils.FLOAT_MINUS_ONE.floatValue(), -1.0f);
assertNotNull(new NumberUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(NumberUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(NumberUtils.class.getModifiers()));
assertEquals(new BigDecimal("1234.5"), NumberUtils.createBigDecimal("1234.5"),"createBigDecimal(String) failed");
assertNull(NumberUtils.createBigDecimal(null), "createBigDecimal(null) failed");
assertThrows(NumberFormatException.class, () -> NumberUtils.createBigDecimal(str),"createBigDecimal(\"" + str + "\") should have failed.");
assertEquals(new BigInteger("12345"), NumberUtils.createBigInteger("12345"), "createBigInteger(String) failed");
assertNull(NumberUtils.createBigInteger(null), "createBigInteger(null) failed");
assertEquals(new BigInteger("255"), NumberUtils.createBigInteger("0xff"), "createBigInteger(String) failed");
assertEquals(new BigInteger("255"), NumberUtils.createBigInteger("0Xff"), "createBigInteger(String) failed");
assertEquals(new BigInteger("255"), NumberUtils.createBigInteger("#ff"), "createBigInteger(String) failed");
assertEquals(new BigInteger("-255"), NumberUtils.createBigInteger("-0xff"), "createBigInteger(String) failed");
assertEquals(new BigInteger("255"), NumberUtils.createBigInteger("0377"), "createBigInteger(String) failed");
assertEquals(new BigInteger("-255"), NumberUtils.createBigInteger("-0377"), "createBigInteger(String) failed");
assertEquals(new BigInteger("-255"), NumberUtils.createBigInteger("-0377"), "createBigInteger(String) failed");
assertEquals(new BigInteger("-0"), NumberUtils.createBigInteger("-0"), "createBigInteger(String) failed");
assertEquals(new BigInteger("0"), NumberUtils.createBigInteger("0"), "createBigInteger(String) failed");
assertEquals(new BigInteger("+FFFFFFFFFFFFFFFF", 16), NumberUtils.createBigInteger("+0xFFFFFFFFFFFFFFFF"));
assertEquals(new BigInteger("+FFFFFFFFFFFFFFFF", 16), NumberUtils.createBigInteger("+#FFFFFFFFFFFFFFFF"));
assertEquals(new BigInteger("+1234567", 8), NumberUtils.createBigInteger("+01234567"));
assertThrows(NumberFormatException.class, () -> NumberUtils.createBigInteger(str),"createBigInteger(\"" + str + "\") should have failed.");
assertEquals(Double.valueOf("1234.5"), NumberUtils.createDouble("1234.5"), "createDouble(String) failed");
assertNull(NumberUtils.createDouble(null), "createDouble(null) failed");
assertThrows(NumberFormatException.class, () -> NumberUtils.createDouble(str),"createDouble(\"" + str + "\") should have failed.");
assertEquals(Float.valueOf("1234.5"), NumberUtils.createFloat("1234.5"), "createFloat(String) failed");
assertNull(NumberUtils.createFloat(null), "createFloat(null) failed");
assertThrows(NumberFormatException.class, () -> NumberUtils.createFloat(str),"createFloat(\"" + str + "\") should have failed.");
assertEquals(Integer.valueOf("12345"), NumberUtils.createInteger("12345"), "createInteger(String) failed");
assertNull(NumberUtils.createInteger(null), "createInteger(null) failed");
assertEquals(Integer.decode("+0xF"), NumberUtils.createInteger("+0xF"));
assertThrows(NumberFormatException.class, () -> NumberUtils.createInteger(str),"createInteger(\"" + str + "\") should have failed.");
assertEquals(Long.valueOf("12345"), NumberUtils.createLong("12345"), "createLong(String) failed");
assertNull(NumberUtils.createLong(null), "createLong(null) failed");
assertEquals(Long.decode("+0xFFFFFFFF"), NumberUtils.createLong("+0xFFFFFFFF"));
assertThrows(NumberFormatException.class, () -> NumberUtils.createLong(str),"createLong(\"" + str + "\") should have failed.");
assertEquals(Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5"), "createNumber(String) 1 failed");
assertEquals(Integer.valueOf("12345"), NumberUtils.createNumber("12345"), "createNumber(String) 2 failed");
assertEquals(Double.valueOf("1234.5"), NumberUtils.createNumber("1234.5D"), "createNumber(String) 3 failed");
assertEquals(Double.valueOf("1234.5"), NumberUtils.createNumber("1234.5d"), "createNumber(String) 3 failed");
assertEquals(Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5F"), "createNumber(String) 4 failed");
assertEquals(Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5f"), "createNumber(String) 4 failed");
assertEquals(Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber("" + (Integer.MAX_VALUE + 1L)),"createNumber(String) 5 failed");
assertEquals(Long.valueOf(12345), NumberUtils.createNumber("12345L"), "createNumber(String) 6 failed");
assertEquals(Long.valueOf(12345), NumberUtils.createNumber("12345l"), "createNumber(String) 6 failed");
assertEquals(Float.valueOf("-1234.5"), NumberUtils.createNumber("-1234.5"), "createNumber(String) 7 failed");
assertEquals(Integer.valueOf("-12345"), NumberUtils.createNumber("-12345"), "createNumber(String) 8 failed");
assertEquals(0xFADE, NumberUtils.createNumber("0xFADE").intValue(), "createNumber(String) 9a failed");
assertEquals(0xFADE, NumberUtils.createNumber("0Xfade").intValue(), "createNumber(String) 9b failed");
assertEquals(-0xFADE, NumberUtils.createNumber("-0xFADE").intValue(), "createNumber(String) 10a failed");
assertEquals(-0xFADE, NumberUtils.createNumber("-0Xfade").intValue(), "createNumber(String) 10b failed");
assertEquals(Double.valueOf("1.1E200"), NumberUtils.createNumber("1.1E200"), "createNumber(String) 11 failed");
assertEquals(Float.valueOf("1.1E20"), NumberUtils.createNumber("1.1E20"), "createNumber(String) 12 failed");
assertEquals(Double.valueOf("-1.1E200"), NumberUtils.createNumber("-1.1E200"),"createNumber(String) 13 failed");
assertEquals(Double.valueOf("1.1E-200"), NumberUtils.createNumber("1.1E-200"),"createNumber(String) 14 failed");
assertNull(NumberUtils.createNumber(null), "createNumber(null) failed");
assertEquals(new BigInteger("12345678901234567890"), NumberUtils.createNumber("12345678901234567890L"),"createNumber(String) failed");
assertEquals(new BigDecimal("1.1E-700"), NumberUtils.createNumber("1.1E-700F"),"createNumber(String) 15 failed");
assertEquals(Long.valueOf("10" + Integer.MAX_VALUE), NumberUtils.createNumber("10" + Integer.MAX_VALUE + "L"),"createNumber(String) 16 failed");
assertEquals(Long.valueOf("10" + Integer.MAX_VALUE), NumberUtils.createNumber("10" + Integer.MAX_VALUE),"createNumber(String) 17 failed");
assertEquals(new BigInteger("10" + Long.MAX_VALUE), NumberUtils.createNumber("10" + Long.MAX_VALUE),"createNumber(String) 18 failed");
assertEquals(Float.valueOf("2."), NumberUtils.createNumber("2."), "createNumber(String) LANG-521 failed");
assertFalse(checkCreateNumber("1eE"), "createNumber(String) succeeded");
assertEquals(Double.valueOf(Double.MAX_VALUE), NumberUtils.createNumber("" + Double.MAX_VALUE),"createNumber(String) LANG-693 failed");
assertNotNull(bigNum);
assertEquals(BigDecimal.class, bigNum.getClass());
assertEquals(Double.valueOf("-160952.54"), NumberUtils.createNumber("-160952.54"),"createNumber(String) LANG-1018 failed");
assertEquals(Double.valueOf("6264583.33"), NumberUtils.createNumber("6264583.33"),"createNumber(String) LANG-1187 failed");
assertEquals(Double.valueOf("193343.82"), NumberUtils.createNumber("193343.82"),"createNumber(String) LANG-1215 failed");
assertEquals(Double.valueOf("001234.5678"), NumberUtils.createNumber("001234.5678"),"createNumber(String) LANG-1060a failed");
assertEquals(Double.valueOf("+001234.5678"), NumberUtils.createNumber("+001234.5678"),"createNumber(String) LANG-1060b failed");
assertEquals(Double.valueOf("-001234.5678"), NumberUtils.createNumber("-001234.5678"),"createNumber(String) LANG-1060c failed");
assertEquals(Double.valueOf("0000.00000"), NumberUtils.createNumber("0000.00000d"),"createNumber(String) LANG-1060d failed");
assertEquals(Float.valueOf("001234.56"), NumberUtils.createNumber("001234.56"),"createNumber(String) LANG-1060e failed");
assertEquals(Float.valueOf("+001234.56"), NumberUtils.createNumber("+001234.56"),"createNumber(String) LANG-1060f failed");
assertEquals(Float.valueOf("-001234.56"), NumberUtils.createNumber("-001234.56"),"createNumber(String) LANG-1060g failed");
assertEquals(Float.valueOf("0000.10"), NumberUtils.createNumber("0000.10"),"createNumber(String) LANG-1060h failed");
assertEquals(Float.valueOf("001.1E20"), NumberUtils.createNumber("001.1E20"),"createNumber(String) LANG-1060i failed");
assertEquals(Float.valueOf("+001.1E20"), NumberUtils.createNumber("+001.1E20"),"createNumber(String) LANG-1060j failed");
assertEquals(Float.valueOf("-001.1E20"), NumberUtils.createNumber("-001.1E20"),"createNumber(String) LANG-1060k failed");
assertEquals(Double.valueOf("001.1E200"), NumberUtils.createNumber("001.1E200"),"createNumber(String) LANG-1060l failed");
assertEquals(Double.valueOf("+001.1E200"), NumberUtils.createNumber("+001.1E200"),"createNumber(String) LANG-1060m failed");
assertEquals(Double.valueOf("-001.1E200"), NumberUtils.createNumber("-001.1E200"),"createNumber(String) LANG-1060n failed");
assertEquals(Integer.decode("+0xF"), NumberUtils.createNumber("+0xF"),"createNumber(String) LANG-1645a failed");
assertEquals(Long.decode("+0xFFFFFFFF"), NumberUtils.createNumber("+0xFFFFFFFF"),"createNumber(String) LANG-1645b failed");
assertEquals(new BigInteger("+FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("+0xFFFFFFFFFFFFFFFF"),"createNumber(String) LANG-1645c failed");
assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber("--1.1E-700F"));
assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber("-1.1E+0-7e00"));
assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber("-11E+0-7e00"));
assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber("1eE+00001"));
assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber("1234.5ff"));
assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber("1234.5FF"));
assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber("1234.5dd"));
assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber("1234.5DD"));
assertEquals(Float.valueOf(Float.MAX_VALUE), NumberUtils.createNumber("3.4028235e+38"));
assertEquals(Double.valueOf(3.4028236e+38), NumberUtils.createNumber("3.4028236e+38"));
assertEquals(Double.valueOf(Double.MAX_VALUE), NumberUtils.createNumber("1.7976931348623157e+308"));
assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308"));
assertEquals(nonZero1, NumberUtils.createNumber(nonZero1.toString()));
assertEquals(nonZero1, NumberUtils.createNumber(nonZero1.toString() + "F"));
assertEquals(nonZero2, NumberUtils.createNumber("4.9e-325"));
assertEquals(nonZero2, NumberUtils.createNumber("4.9e-325D"));
assertEquals(nonZero3, NumberUtils.createNumber("1e-325"));
assertEquals(nonZero3, NumberUtils.createNumber("1e-325D"));
assertEquals(nonZero4, NumberUtils.createNumber("0.1e-325"));
assertEquals(nonZero4, NumberUtils.createNumber("0.1e-325D"));
assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678"));
assertEquals(Long.valueOf(0x123456789L), NumberUtils.createNumber("0x123456789"));
assertEquals(Long.valueOf(0x7fffffffffffffffL), NumberUtils.createNumber("0x7fffffffffffffff"));
assertEquals(new BigInteger("7fffffffffffffff0", 16), NumberUtils.createNumber("0x7fffffffffffffff0"));
assertEquals(Long.valueOf(0x7fffffffffffffffL), NumberUtils.createNumber("#7fffffffffffffff"));
assertEquals(new BigInteger("7fffffffffffffff0", 16), NumberUtils.createNumber("#7fffffffffffffff0"));
assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits
assertEquals(Long.valueOf(037777777777L), NumberUtils.createNumber("037777777777")); // 32 bits
assertEquals(Long.valueOf(0777777777777777777777L), NumberUtils.createNumber("0777777777777777777777"));
assertEquals(new BigInteger("1777777777777777777777", 8), NumberUtils.createNumber("01777777777777777777777"));
assertEquals(Integer.valueOf(0), NumberUtils.createNumber("0"));
assertEquals(Integer.valueOf(0), NumberUtils.createNumber("-0"));
assertEquals(Long.valueOf(0), NumberUtils.createNumber("0L"));
assertEquals(Long.valueOf(0), NumberUtils.createNumber("-0L"));
assertCreateNumberZero(zero, f0, fn0);
assertCreateNumberZero(zero + "e" + exp, f0, fn0);
assertCreateNumberZero(zero + "F", f0, fn0);
assertCreateNumberZero(zero + "D", d0, dn0);
assertCreateNumberZero(number + "F", f0, fn0);
assertCreateNumberZero(number + "D", d0, dn0);
private static void assertCreateNumberZero(final String number, final Object zero, final Object negativeZero) {assertEquals(zero, NumberUtils.createNumber(number), () -> "Input: " + number);
assertEquals(zero, NumberUtils.createNumber("+" + number), () -> "Input: +" + number);
assertEquals(negativeZero, NumberUtils.createNumber("-" + number), () -> "Input: -" + number);
assertFalse(NumberUtils.isDigits(null), "isDigits(null) failed");
assertFalse(NumberUtils.isDigits(""), "isDigits('') failed");
assertTrue(NumberUtils.isDigits("12345"), "isDigits(String) failed");
assertFalse(NumberUtils.isDigits("1234.5"), "isDigits(String) neg 1 failed");
assertFalse(NumberUtils.isDigits("1ab"), "isDigits(String) neg 3 failed");
assertFalse(NumberUtils.isDigits("abc"), "isDigits(String) neg 4 failed");
assertFalse(NumberUtils.isParsable(null));
assertFalse(NumberUtils.isParsable(""));
assertFalse(NumberUtils.isParsable("0xC1AB"));
assertFalse(NumberUtils.isParsable("65CBA2"));
assertFalse(NumberUtils.isParsable("pendro"));
assertFalse(NumberUtils.isParsable("64, 2"));
assertFalse(NumberUtils.isParsable("64.2.2"));
assertFalse(NumberUtils.isParsable("64."));
assertFalse(NumberUtils.isParsable("64L"));
assertFalse(NumberUtils.isParsable("-"));
assertFalse(NumberUtils.isParsable("--2"));
assertTrue(NumberUtils.isParsable("64.2"));
assertTrue(NumberUtils.isParsable("64"));
assertTrue(NumberUtils.isParsable("018"));
assertTrue(NumberUtils.isParsable(".18"));
assertTrue(NumberUtils.isParsable("-65"));
assertTrue(NumberUtils.isParsable("-018"));
assertTrue(NumberUtils.isParsable("-018.2"));
assertTrue(NumberUtils.isParsable("-.236"));
assertEquals(Float.class, NumberUtils.createNumber("0.0").getClass());
assertEquals(Float.valueOf("0.0"), NumberUtils.createNumber("0.0"));
assertEquals(Float.class, NumberUtils.createNumber("+0.0").getClass());
assertEquals(Float.valueOf("+0.0"), NumberUtils.createNumber("+0.0"));
assertEquals(Float.class, NumberUtils.createNumber("-0.0").getClass());
assertEquals(Float.valueOf("-0.0"), NumberUtils.createNumber("-0.0"));
assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN)));
assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN)));
assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN)));
assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN)));
assertTrue(Double.isNaN(NumberUtils.max(a)));
assertTrue(Double.isNaN(NumberUtils.min(a)));
assertTrue(Double.isNaN(NumberUtils.max(b)));
assertTrue(Double.isNaN(NumberUtils.min(b)));
assertTrue(Float.isNaN(NumberUtils.max(aF)));
assertTrue(Float.isNaN(NumberUtils.max(bF)));
assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000"));
assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000"));
assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000"));
assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000"));
assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF"));
assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000"));
assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF"));
assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000"));
assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF"));
assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000"));
assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF"));
assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000"));
assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000"));
assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000"));
assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000"));
assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000"));
assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000"));
assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000"));
assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF"));
assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000"));
assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF"));
assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000"));
assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000"));
assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF"));
assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000"));
assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF"));
assertEquals((byte) 5, NumberUtils.max((byte) 5), "max(byte[]) failed for array length 1");
assertEquals((byte) 9, NumberUtils.max((byte) 6, (byte) 9), "max(byte[]) failed for array length 2");
assertEquals((byte) 10, NumberUtils.max((byte) -10, (byte) -5, (byte) 0, (byte) 5, (byte) 10),"max(byte[]) failed for array length 5");
assertEquals((byte) 10, NumberUtils.max((byte) -10, (byte) -5, (byte) 0, (byte) 5, (byte) 10));
assertEquals((byte) 10, NumberUtils.max((byte) -5, (byte) 0, (byte) 10, (byte) 5, (byte) -10));
assertThrows(IllegalArgumentException.class, NumberUtils::max);
assertThrows(NullPointerException.class, () -> NumberUtils.max((byte[]) null));
assertThrows(NullPointerException.class, () -> NumberUtils.max(d), "No exception was thrown for null input.");
assertThrows(IllegalArgumentException.class, NumberUtils::max, "No exception was thrown for empty input.");
assertEquals(5.1f, NumberUtils.max(5.1f), "max(double[]) failed for array length 1");
assertEquals(9.2f, NumberUtils.max(6.3f, 9.2f), "max(double[]) failed for array length 2");
assertEquals(10.4f, NumberUtils.max(-10.5f, -5.6f, 0, 5.7f, 10.4f), "max(double[]) failed for float length 5");
assertEquals(10, NumberUtils.max(-10, -5, 0, 5, 10), 0.0001);
assertEquals(10, NumberUtils.max(-5, 0, 10, 5, -10), 0.0001);
assertThrows(IllegalArgumentException.class, NumberUtils::max);
assertThrows(NullPointerException.class, () -> NumberUtils.max((double[]) null));
assertEquals(5.1f, NumberUtils.max(5.1f), "max(float[]) failed for array length 1");
assertEquals(9.2f, NumberUtils.max(6.3f, 9.2f), "max(float[]) failed for array length 2");
assertEquals(10.4f, NumberUtils.max(-10.5f, -5.6f, 0, 5.7f, 10.4f), "max(float[]) failed for float length 5");
assertEquals(10, NumberUtils.max(-10, -5, 0, 5, 10), 0.0001f);
assertEquals(10, NumberUtils.max(-5, 0, 10, 5, -10), 0.0001f);
assertThrows(IllegalArgumentException.class, NumberUtils::max);
assertThrows(NullPointerException.class, () -> NumberUtils.max((float[]) null));
assertEquals(high, NumberUtils.max(low, mid, high), "maximum(byte, byte, byte) 1 failed");
assertEquals(high, NumberUtils.max(mid, low, high), "maximum(byte, byte, byte) 2 failed");
assertEquals(high, NumberUtils.max(mid, high, low), "maximum(byte, byte, byte) 3 failed");
assertEquals(high, NumberUtils.max(high, mid, high), "maximum(byte, byte, byte) 4 failed");
assertEquals(high, NumberUtils.max(low, mid, high), 0.0001);
assertEquals(high, NumberUtils.max(mid, low, high), 0.0001);
assertEquals(high, NumberUtils.max(mid, high, low), 0.0001);
assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001);
assertEquals(high, NumberUtils.max(high, mid, high), 0.0001);
assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f);
assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f);
assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f);
assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f);
assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f);
assertEquals(12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2), "maximum(int, int, int) 1 failed");
assertEquals(12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2), "maximum(int, int, int) 2 failed");
assertEquals(12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345), "maximum(int, int, int) 3 failed");
assertEquals(12345, NumberUtils.max(12345 - 1, 12345, 12345), "maximum(int, int, int) 4 failed");
assertEquals(12345, NumberUtils.max(12345, 12345, 12345), "maximum(int, int, int) 5 failed");
assertEquals(12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L), "maximum(long, long, long) 1 failed");
assertEquals(12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L), "maximum(long, long, long) 2 failed");
assertEquals(12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L), "maximum(long, long, long) 3 failed");
assertEquals(12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L), "maximum(long, long, long) 4 failed");
assertEquals(12345L, NumberUtils.max(12345L, 12345L, 12345L), "maximum(long, long, long) 5 failed");
assertEquals(high, NumberUtils.max(low, mid, high), "maximum(short, short, short) 1 failed");
assertEquals(high, NumberUtils.max(mid, low, high), "maximum(short, short, short) 2 failed");
assertEquals(high, NumberUtils.max(mid, high, low), "maximum(short, short, short) 3 failed");
assertEquals(high, NumberUtils.max(high, mid, high), "maximum(short, short, short) 4 failed");
assertEquals(5, NumberUtils.max(5), "max(int[]) failed for array length 1");
assertEquals(9, NumberUtils.max(6, 9), "max(int[]) failed for array length 2");
assertEquals(10, NumberUtils.max(-10, -5, 0, 5, 10), "max(int[]) failed for array length 5");
assertEquals(10, NumberUtils.max(-10, -5, 0, 5, 10));
assertEquals(10, NumberUtils.max(-5, 0, 10, 5, -10));
assertThrows(IllegalArgumentException.class, NumberUtils::max);
assertThrows(NullPointerException.class, () -> NumberUtils.max((int[]) null));
assertEquals(5L, NumberUtils.max(5L), "max(long[]) failed for array length 1");
assertEquals(9L, NumberUtils.max(6L, 9L), "max(long[]) failed for array length 2");
assertEquals(10L, NumberUtils.max(-10L, -5L, 0L, 5L, 10L), "max(long[]) failed for array length 5");
assertEquals(10L, NumberUtils.max(-10L, -5L, 0L, 5L, 10L));
assertEquals(10L, NumberUtils.max(-5L, 0L, 10L, 5L, -10L));
assertThrows(IllegalArgumentException.class, NumberUtils::max);
assertThrows(NullPointerException.class, () -> NumberUtils.max((long[]) null));
assertEquals((short) 5, NumberUtils.max((short) 5), "max(short[]) failed for array length 1");
assertEquals((short) 9, NumberUtils.max((short) 6, (short) 9), "max(short[]) failed for array length 2");
assertEquals((short) 10, NumberUtils.max((short) -10, (short) -5, (short) 0, (short) 5, (short) 10),"max(short[]) failed for array length 5");
assertEquals((short) 10, NumberUtils.max((short) -10, (short) -5, (short) 0, (short) 5, (short) 10));
assertEquals((short) 10, NumberUtils.max((short) -5, (short) 0, (short) 10, (short) 5, (short) -10));
assertThrows(IllegalArgumentException.class, NumberUtils::max);
assertThrows(NullPointerException.class, () -> NumberUtils.max((short[]) null));
assertEquals((byte) 5, NumberUtils.min((byte) 5), "min(byte[]) failed for array length 1");
assertEquals((byte) 6, NumberUtils.min((byte) 6, (byte) 9), "min(byte[]) failed for array length 2");
assertEquals((byte) -10, NumberUtils.min((byte) -10, (byte) -5, (byte) 0, (byte) 5, (byte) 10));
assertEquals((byte) -10, NumberUtils.min((byte) -5, (byte) 0, (byte) -10, (byte) 5, (byte) 10));
assertThrows(IllegalArgumentException.class, NumberUtils::min);
assertThrows(NullPointerException.class, () -> NumberUtils.min((byte[]) null));
assertEquals(5.12, NumberUtils.min(5.12), "min(double[]) failed for array length 1");
assertEquals(6.23, NumberUtils.min(6.23, 9.34), "min(double[]) failed for array length 2");
assertEquals(-10.45, NumberUtils.min(-10.45, -5.56, 0, 5.67, 10.78), "min(double[]) failed for array length 5");
assertEquals(-10, NumberUtils.min(-10, -5, 0, 5, 10), 0.0001);
assertEquals(-10, NumberUtils.min(-5, 0, -10, 5, 10), 0.0001);
assertEquals(5.12, NumberUtils.min(6.11, 5.12));
assertThrows(IllegalArgumentException.class, NumberUtils::min);
assertThrows(NullPointerException.class, () -> NumberUtils.min((double[]) null));
assertEquals(5.9f, NumberUtils.min(5.9f), "min(float[]) failed for array length 1");
assertEquals(6.8f, NumberUtils.min(6.8f, 9.7f), "min(float[]) failed for array length 2");
assertEquals(-10.6f, NumberUtils.min(-10.6f, -5.5f, 0, 5.4f, 10.3f), "min(float[]) failed for array length 5");
assertEquals(-10, NumberUtils.min(-10, -5, 0, 5, 10), 0.0001f);
assertEquals(-10, NumberUtils.min(-5, 0, -10, 5, 10), 0.0001f);
assertEquals(Float.NaN, NumberUtils.min(6.8f, Float.NaN));
assertEquals(3.7f, NumberUtils.min(6.8f, 3.7f));
assertThrows(IllegalArgumentException.class, NumberUtils::min);
assertThrows(NullPointerException.class, () -> NumberUtils.min((float[]) null));
assertEquals(low, NumberUtils.min(low, mid, high), "minimum(byte, byte, byte) 1 failed");
assertEquals(low, NumberUtils.min(mid, low, high), "minimum(byte, byte, byte) 2 failed");
assertEquals(low, NumberUtils.min(mid, high, low), "minimum(byte, byte, byte) 3 failed");
assertEquals(low, NumberUtils.min(low, mid, low), "minimum(byte, byte, byte) 4 failed");
assertEquals(low, NumberUtils.min(low, mid, high), 0.0001);
assertEquals(low, NumberUtils.min(mid, low, high), 0.0001);
assertEquals(low, NumberUtils.min(mid, high, low), 0.0001);
assertEquals(low, NumberUtils.min(low, mid, low), 0.0001);
assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001);
assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f);
assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f);
assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f);
assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f);
assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f);
assertEquals(12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2), "minimum(int, int, int) 1 failed");
assertEquals(12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2), "minimum(int, int, int) 2 failed");
assertEquals(12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345), "minimum(int, int, int) 3 failed");
assertEquals(12345, NumberUtils.min(12345 + 1, 12345, 12345), "minimum(int, int, int) 4 failed");
assertEquals(12345, NumberUtils.min(12345, 12345, 12345), "minimum(int, int, int) 5 failed");
assertEquals(12345L, NumberUtils.min(12345L, 12345L + 1L, 12345L + 2L), "minimum(long, long, long) 1 failed");
assertEquals(12345L, NumberUtils.min(12345L + 1L, 12345L, 12345 + 2L), "minimum(long, long, long) 2 failed");
assertEquals(12345L, NumberUtils.min(12345L + 1L, 12345L + 2L, 12345L), "minimum(long, long, long) 3 failed");
assertEquals(12345L, NumberUtils.min(12345L + 1L, 12345L, 12345L), "minimum(long, long, long) 4 failed");
assertEquals(12345L, NumberUtils.min(12345L, 12345L, 12345L), "minimum(long, long, long) 5 failed");
assertEquals(low, NumberUtils.min(low, mid, high), "minimum(short, short, short) 1 failed");
assertEquals(low, NumberUtils.min(mid, low, high), "minimum(short, short, short) 2 failed");
assertEquals(low, NumberUtils.min(mid, high, low), "minimum(short, short, short) 3 failed");
assertEquals(low, NumberUtils.min(low, mid, low), "minimum(short, short, short) 4 failed");
assertEquals(5, NumberUtils.min(5), "min(int[]) failed for array length 1");
assertEquals(6, NumberUtils.min(6, 9), "min(int[]) failed for array length 2");
assertEquals(-10, NumberUtils.min(-10, -5, 0, 5, 10));
assertEquals(-10, NumberUtils.min(-5, 0, -10, 5, 10));
assertThrows(IllegalArgumentException.class, NumberUtils::min);
assertThrows(NullPointerException.class, () -> NumberUtils.min((int[]) null));
assertEquals(5L, NumberUtils.min(5L), "min(long[]) failed for array length 1");
assertEquals(6L, NumberUtils.min(6L, 9L), "min(long[]) failed for array length 2");
assertEquals(-10L, NumberUtils.min(-10L, -5L, 0L, 5L, 10L));
assertEquals(-10L, NumberUtils.min(-5L, 0L, -10L, 5L, 10L));
assertThrows(IllegalArgumentException.class, NumberUtils::min);
assertThrows(NullPointerException.class, () -> NumberUtils.min((long[]) null));
assertEquals((short) 5, NumberUtils.min((short) 5), "min(short[]) failed for array length 1");
assertEquals((short) 6, NumberUtils.min((short) 6, (short) 9), "min(short[]) failed for array length 2");
assertEquals((short) -10, NumberUtils.min((short) -10, (short) -5, (short) 0, (short) 5, (short) 10));
assertEquals((short) -10, NumberUtils.min((short) -5, (short) 0, (short) -10, (short) 5, (short) 10));
assertThrows(IllegalArgumentException.class, NumberUtils::min);
assertThrows(NullPointerException.class, () -> NumberUtils.min((short[]) null));
assertTrue(NumberUtils.createNumber(shouldBeFloat) instanceof Float);
assertTrue(NumberUtils.createNumber(shouldBeDouble) instanceof Double);
assertTrue(NumberUtils.createNumber(shouldBeBigDecimal) instanceof BigDecimal);
assertTrue(NumberUtils.createNumber("001.12") instanceof Float);
assertTrue(NumberUtils.createNumber("-001.12") instanceof Float);
assertTrue(NumberUtils.createNumber("+001.12") instanceof Float);
assertTrue(NumberUtils.createNumber("003.40282354e+38") instanceof Double);
assertTrue(NumberUtils.createNumber("-003.40282354e+38") instanceof Double);
assertTrue(NumberUtils.createNumber("+003.40282354e+38") instanceof Double);
assertTrue(NumberUtils.createNumber("0001.797693134862315759e+308") instanceof BigDecimal);
assertTrue(NumberUtils.createNumber("-001.797693134862315759e+308") instanceof BigDecimal);
assertTrue(NumberUtils.createNumber("+001.797693134862315759e+308") instanceof BigDecimal);
assertTrue(NumberUtils.createNumber(Double.toString(Double.MIN_NORMAL)) instanceof Double);
assertTrue(NumberUtils.createNumber(Double.toString(Double.MIN_NORMAL) + "D") instanceof Double);
assertTrue(NumberUtils.createNumber(Double.toString(Double.MIN_NORMAL) + "F") instanceof Double);
assertTrue(NumberUtils.createNumber(Double.toString(Double.MIN_VALUE)) instanceof Double);
assertTrue(NumberUtils.createNumber(Double.toString(Double.MIN_VALUE) + "D") instanceof Double);
assertTrue(NumberUtils.createNumber(Double.toString(Double.MIN_VALUE) + "F") instanceof Double);
assertTrue(NumberUtils.createNumber(Double.toString(Double.MAX_VALUE)) instanceof Double);
assertTrue(NumberUtils.createNumber(Double.toString(Double.MAX_VALUE) + "D") instanceof Double);
assertTrue(NumberUtils.createNumber(Double.toString(Double.MAX_VALUE) + "F") instanceof Double);
assertTrue(NumberUtils.createNumber("4.9e-324D") instanceof Double);
assertTrue(NumberUtils.createNumber("4.9e-324F") instanceof Double);
assertEquals(NumberUtils.toDouble("-1.2345"), -1.2345d, "toDouble(String) 1 failed");
assertEquals(1.2345d, NumberUtils.toDouble("1.2345"), "toDouble(String) 2 failed");
assertEquals(0.0d, NumberUtils.toDouble("abc"), "toDouble(String) 3 failed");
assertEquals(NumberUtils.toDouble("-001.2345"), -1.2345d, "toDouble(String) 4 failed");
assertEquals(1.2345d, NumberUtils.toDouble("+001.2345"), "toDouble(String) 5 failed");
assertEquals(1.2345d, NumberUtils.toDouble("001.2345"), "toDouble(String) 6 failed");
assertEquals(0d, NumberUtils.toDouble("000.00000"), "toDouble(String) 7 failed");
assertEquals(NumberUtils.toDouble(Double.MAX_VALUE + ""), Double.MAX_VALUE,"toDouble(Double.MAX_VALUE) failed");
assertEquals(NumberUtils.toDouble(Double.MIN_VALUE + ""), Double.MIN_VALUE,"toDouble(Double.MIN_VALUE) failed");
assertEquals(0.0d, NumberUtils.toDouble(""), "toDouble(empty) failed");
assertEquals(0.0d, NumberUtils.toDouble((String) null), "toDouble(null) failed");
assertEquals(1.2345d, NumberUtils.toDouble("1.2345", 5.1d), "toDouble(String, int) 1 failed");
assertEquals(5.0d, NumberUtils.toDouble("a", 5.0d), "toDouble(String, int) 2 failed");
assertEquals(1.2345d, NumberUtils.toDouble("001.2345", 5.1d), "toDouble(String, int) 3 failed");
assertEquals(NumberUtils.toDouble("-001.2345", 5.1d), -1.2345d, "toDouble(String, int) 4 failed");
assertEquals(1.2345d, NumberUtils.toDouble("+001.2345", 5.1d), "toDouble(String, int) 5 failed");
assertEquals(0d, NumberUtils.toDouble("000.00", 5.1d), "toDouble(String, int) 7 failed");
assertEquals(123, NumberUtils.toByte("123"), "toByte(String) 1 failed");
assertEquals(0, NumberUtils.toByte("abc"), "toByte(String) 2 failed");
assertEquals(0, NumberUtils.toByte(""), "toByte(empty) failed");
assertEquals(0, NumberUtils.toByte(null), "toByte(null) failed");
assertEquals(123, NumberUtils.toByte("123", (byte) 5), "toByte(String, byte) 1 failed");
assertEquals(5, NumberUtils.toByte("12.3", (byte) 5), "toByte(String, byte) 2 failed");
assertEquals(NumberUtils.toFloat("-1.2345"), -1.2345f, "toFloat(String) 1 failed");
assertEquals(1.2345f, NumberUtils.toFloat("1.2345"), "toFloat(String) 2 failed");
assertEquals(0.0f, NumberUtils.toFloat("abc"), "toFloat(String) 3 failed");
assertEquals(NumberUtils.toFloat("-001.2345"), -1.2345f, "toFloat(String) 4 failed");
assertEquals(1.2345f, NumberUtils.toFloat("+001.2345"), "toFloat(String) 5 failed");
assertEquals(1.2345f, NumberUtils.toFloat("001.2345"), "toFloat(String) 6 failed");
assertEquals(0f, NumberUtils.toFloat("000.00"), "toFloat(String) 7 failed");
assertEquals(NumberUtils.toFloat(Float.MAX_VALUE + ""), Float.MAX_VALUE, "toFloat(Float.MAX_VALUE) failed");
assertEquals(NumberUtils.toFloat(Float.MIN_VALUE + ""), Float.MIN_VALUE, "toFloat(Float.MIN_VALUE) failed");
assertEquals(0.0f, NumberUtils.toFloat(""), "toFloat(empty) failed");
assertEquals(0.0f, NumberUtils.toFloat(null), "toFloat(null) failed");
assertEquals(1.2345f, NumberUtils.toFloat("1.2345", 5.1f), "toFloat(String, int) 1 failed");
assertEquals(5.0f, NumberUtils.toFloat("a", 5.0f), "toFloat(String, int) 2 failed");
assertEquals(5.0f, NumberUtils.toFloat("-001Z.2345", 5.0f), "toFloat(String, int) 3 failed");
assertEquals(5.0f, NumberUtils.toFloat("+001AB.2345", 5.0f), "toFloat(String, int) 4 failed");
assertEquals(5.0f, NumberUtils.toFloat("001Z.2345", 5.0f), "toFloat(String, int) 5 failed");
assertEquals(12345, NumberUtils.toInt("12345"), "toInt(String) 1 failed");
assertEquals(0, NumberUtils.toInt("abc"), "toInt(String) 2 failed");
assertEquals(0, NumberUtils.toInt(""), "toInt(empty) failed");
assertEquals(0, NumberUtils.toInt(null), "toInt(null) failed");
assertEquals(12345, NumberUtils.toInt("12345", 5), "toInt(String, int) 1 failed");
assertEquals(5, NumberUtils.toInt("1234.5", 5), "toInt(String, int) 2 failed");
assertEquals(12345L, NumberUtils.toLong("12345"), "toLong(String) 1 failed");
assertEquals(0L, NumberUtils.toLong("abc"), "toLong(String) 2 failed");
assertEquals(0L, NumberUtils.toLong("1L"), "toLong(String) 3 failed");
assertEquals(0L, NumberUtils.toLong("1l"), "toLong(String) 4 failed");
assertEquals(NumberUtils.toLong(Long.MAX_VALUE + ""), Long.MAX_VALUE, "toLong(Long.MAX_VALUE) failed");
assertEquals(NumberUtils.toLong(Long.MIN_VALUE + ""), Long.MIN_VALUE, "toLong(Long.MIN_VALUE) failed");
assertEquals(0L, NumberUtils.toLong(""), "toLong(empty) failed");
assertEquals(0L, NumberUtils.toLong(null), "toLong(null) failed");
assertEquals(12345L, NumberUtils.toLong("12345", 5L), "toLong(String, long) 1 failed");
assertEquals(5L, NumberUtils.toLong("1234.5", 5L), "toLong(String, long) 2 failed");
assertEquals(NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(123.456)), BigDecimal.valueOf(123.46),"toScaledBigDecimal(BigDecimal) 1 failed");
assertEquals(NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(23.515)), BigDecimal.valueOf(23.52),"toScaledBigDecimal(BigDecimal) 2 failed");
assertEquals(NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(23.525)), BigDecimal.valueOf(23.52),"toScaledBigDecimal(BigDecimal) 3 failed");
assertEquals("2352.00",NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(23.525)).multiply(BigDecimal.valueOf(100)).toString(),"toScaledBigDecimal(BigDecimal) 4 failed");
assertEquals(NumberUtils.toScaledBigDecimal((BigDecimal) null), BigDecimal.ZERO,"toScaledBigDecimal(BigDecimal) 5 failed");
assertEquals(NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(123.456), 1, RoundingMode.CEILING),BigDecimal.valueOf(123.5), "toScaledBigDecimal(BigDecimal, int, RoundingMode) 1 failed");
assertEquals(NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(23.5159), 3, RoundingMode.FLOOR),BigDecimal.valueOf(23.515), "toScaledBigDecimal(BigDecimal, int, RoundingMode) 2 failed");
assertEquals(NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(23.525), 2, RoundingMode.HALF_UP),BigDecimal.valueOf(23.53), "toScaledBigDecimal(BigDecimal, int, RoundingMode) 3 failed");
assertEquals("23521.0000",NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(23.521), 4, RoundingMode.HALF_EVEN).multiply(BigDecimal.valueOf(1000)).toString(),"toScaledBigDecimal(BigDecimal, int, RoundingMode) 4 failed");
assertEquals(NumberUtils.toScaledBigDecimal((BigDecimal) null, 2, RoundingMode.HALF_UP), BigDecimal.ZERO,"toScaledBigDecimal(BigDecimal, int, RoundingMode) 5 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Double.valueOf(123.456d)), BigDecimal.valueOf(123.46),"toScaledBigDecimal(Double) 1 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Double.valueOf(23.515d)), BigDecimal.valueOf(23.52),"toScaledBigDecimal(Double) 2 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Double.valueOf(23.525d)), BigDecimal.valueOf(23.52),"toScaledBigDecimal(Double) 3 failed");
assertEquals("2352.00",NumberUtils.toScaledBigDecimal(Double.valueOf(23.525d)).multiply(BigDecimal.valueOf(100)).toString(),"toScaledBigDecimal(Double) 4 failed");
assertEquals(NumberUtils.toScaledBigDecimal((Double) null), BigDecimal.ZERO,"toScaledBigDecimal(Double) 5 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Double.valueOf(123.456d), 1, RoundingMode.CEILING),BigDecimal.valueOf(123.5), "toScaledBigDecimal(Double, int, RoundingMode) 1 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Double.valueOf(23.5159d), 3, RoundingMode.FLOOR),BigDecimal.valueOf(23.515), "toScaledBigDecimal(Double, int, RoundingMode) 2 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Double.valueOf(23.525d), 2, RoundingMode.HALF_UP),BigDecimal.valueOf(23.53), "toScaledBigDecimal(Double, int, RoundingMode) 3 failed");
assertEquals("23521.0000",NumberUtils.toScaledBigDecimal(Double.valueOf(23.521d), 4, RoundingMode.HALF_EVEN).multiply(BigDecimal.valueOf(1000)).toString(),"toScaledBigDecimal(Double, int, RoundingMode) 4 failed");
assertEquals(NumberUtils.toScaledBigDecimal((Double) null, 2, RoundingMode.HALF_UP), BigDecimal.ZERO,"toScaledBigDecimal(Double, int, RoundingMode) 5 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Float.valueOf(123.456f)), BigDecimal.valueOf(123.46),"toScaledBigDecimal(Float) 1 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Float.valueOf(23.515f)), BigDecimal.valueOf(23.51),"toScaledBigDecimal(Float) 2 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Float.valueOf(23.525f)), BigDecimal.valueOf(23.52),"toScaledBigDecimal(Float) 3 failed");
assertEquals("2352.00",NumberUtils.toScaledBigDecimal(Float.valueOf(23.525f)).multiply(BigDecimal.valueOf(100)).toString(),"toScaledBigDecimal(Float) 4 failed");
assertEquals(NumberUtils.toScaledBigDecimal((Float) null), BigDecimal.ZERO,"toScaledBigDecimal(Float) 5 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Float.valueOf(123.456f), 1, RoundingMode.CEILING),BigDecimal.valueOf(123.5), "toScaledBigDecimal(Float, int, RoundingMode) 1 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Float.valueOf(23.5159f), 3, RoundingMode.FLOOR),BigDecimal.valueOf(23.515), "toScaledBigDecimal(Float, int, RoundingMode) 2 failed");
assertEquals(NumberUtils.toScaledBigDecimal(Float.valueOf(23.525f), 2, RoundingMode.HALF_UP),BigDecimal.valueOf(23.52), "toScaledBigDecimal(Float, int, RoundingMode) 3 failed");
assertEquals("23521.0000", NumberUtils.toScaledBigDecimal(Float.valueOf(23.521f), 4, RoundingMode.HALF_EVEN).multiply(BigDecimal.valueOf(1000)).toString(), "toScaledBigDecimal(Float, int, RoundingMode) 4 failed");
assertEquals(NumberUtils.toScaledBigDecimal((Float) null, 2, RoundingMode.HALF_UP), BigDecimal.ZERO,"toScaledBigDecimal(Float, int, RoundingMode) 5 failed");
assertEquals(NumberUtils.toScaledBigDecimal("123.456"), BigDecimal.valueOf(123.46),"toScaledBigDecimal(String) 1 failed");
assertEquals(NumberUtils.toScaledBigDecimal("23.515"), BigDecimal.valueOf(23.52),"toScaledBigDecimal(String) 2 failed");
assertEquals(NumberUtils.toScaledBigDecimal("23.525"), BigDecimal.valueOf(23.52),"toScaledBigDecimal(String) 3 failed");
assertEquals("2352.00", NumberUtils.toScaledBigDecimal("23.525").multiply(BigDecimal.valueOf(100)).toString(),"toScaledBigDecimal(String) 4 failed");
assertEquals(NumberUtils.toScaledBigDecimal((String) null), BigDecimal.ZERO,"toScaledBigDecimal(String) 5 failed");
assertEquals(NumberUtils.toScaledBigDecimal("123.456", 1, RoundingMode.CEILING), BigDecimal.valueOf(123.5),"toScaledBigDecimal(String, int, RoundingMode) 1 failed");
assertEquals(NumberUtils.toScaledBigDecimal("23.5159", 3, RoundingMode.FLOOR), BigDecimal.valueOf(23.515),"toScaledBigDecimal(String, int, RoundingMode) 2 failed");
assertEquals(NumberUtils.toScaledBigDecimal("23.525", 2, RoundingMode.HALF_UP), BigDecimal.valueOf(23.53),"toScaledBigDecimal(String, int, RoundingMode) 3 failed");
assertEquals("23521.0000", NumberUtils.toScaledBigDecimal("23.521", 4, RoundingMode.HALF_EVEN).multiply(BigDecimal.valueOf(1000)).toString(),"toScaledBigDecimal(String, int, RoundingMode) 4 failed");
assertEquals(NumberUtils.toScaledBigDecimal((String) null, 2, RoundingMode.HALF_UP), BigDecimal.ZERO,"toScaledBigDecimal(String, int, RoundingMode) 5 failed");
assertEquals(12345, NumberUtils.toShort("12345"), "toShort(String) 1 failed");
assertEquals(0, NumberUtils.toShort("abc"), "toShort(String) 2 failed");
assertEquals(0, NumberUtils.toShort(""), "toShort(empty) failed");
assertEquals(0, NumberUtils.toShort(null), "toShort(null) failed");
assertEquals(12345, NumberUtils.toShort("12345", (short) 5), "toShort(String, short) 1 failed");
assertEquals(5, NumberUtils.toShort("1234.5", (short) 5), "toShort(String, short) 2 failed");
assertThrows(NullPointerException.class,() -> IEEE754rUtils.min( (float[]) null),"IllegalArgumentException expected for null input");
assertThrows(IllegalArgumentException.class,IEEE754rUtils::min,"IllegalArgumentException expected for empty input");
assertThrows(NullPointerException.class,() -> IEEE754rUtils.max( (float[]) null),"IllegalArgumentException expected for null input");
assertThrows(IllegalArgumentException.class,IEEE754rUtils::max,"IllegalArgumentException expected for empty input");
assertThrows(NullPointerException.class,() -> IEEE754rUtils.min( (double[]) null),"IllegalArgumentException expected for null input");
assertThrows(IllegalArgumentException.class,IEEE754rUtils::min,"IllegalArgumentException expected for empty input");
assertThrows(NullPointerException.class,() -> IEEE754rUtils.max( (double[]) null),"IllegalArgumentException expected for null input");
assertThrows(IllegalArgumentException.class,IEEE754rUtils::max,"IllegalArgumentException expected for empty input");
assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01);
assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01);
assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN)));
assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01);
assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01);
assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN)));
assertEquals(42.0, IEEE754rUtils.max(a), 0.01);
assertEquals(1.2, IEEE754rUtils.min(a), 0.01);
assertEquals(42.0, IEEE754rUtils.max(b), 0.01);
assertEquals(1.2, IEEE754rUtils.min(b), 0.01);
assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01);
assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01);
assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01);
assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01);
assertTrue(StringUtils.isEmpty(null));
assertTrue(StringUtils.isEmpty(""));
assertFalse(StringUtils.isEmpty(" "));
assertFalse(StringUtils.isEmpty("foo"));
assertFalse(StringUtils.isEmpty("  foo  "));
assertFalse(StringUtils.isNotEmpty(null));
assertFalse(StringUtils.isNotEmpty(""));
assertTrue(StringUtils.isNotEmpty(" "));
assertTrue(StringUtils.isNotEmpty("foo"));
assertTrue(StringUtils.isNotEmpty("  foo  "));
assertTrue(StringUtils.isAnyEmpty((String) null));
assertFalse(StringUtils.isAnyEmpty((String[]) null));
assertTrue(StringUtils.isAnyEmpty(null, "foo"));
assertTrue(StringUtils.isAnyEmpty("", "bar"));
assertTrue(StringUtils.isAnyEmpty("bob", ""));
assertTrue(StringUtils.isAnyEmpty("  bob  ", null));
assertFalse(StringUtils.isAnyEmpty(" ", "bar"));
assertFalse(StringUtils.isAnyEmpty("foo", "bar"));
assertFalse(StringUtils.isNoneEmpty((String) null));
assertTrue(StringUtils.isNoneEmpty((String[]) null));
assertFalse(StringUtils.isNoneEmpty(null, "foo"));
assertFalse(StringUtils.isNoneEmpty("", "bar"));
assertFalse(StringUtils.isNoneEmpty("bob", ""));
assertFalse(StringUtils.isNoneEmpty("  bob  ", null));
assertTrue(StringUtils.isNoneEmpty(" ", "bar"));
assertTrue(StringUtils.isNoneEmpty("foo", "bar"));
assertTrue(StringUtils.isAllEmpty());
assertTrue(StringUtils.isAllEmpty());
assertTrue(StringUtils.isAllEmpty((String) null));
assertTrue(StringUtils.isAllEmpty((String[]) null));
assertFalse(StringUtils.isAllEmpty(null, "foo"));
assertFalse(StringUtils.isAllEmpty("", "bar"));
assertFalse(StringUtils.isAllEmpty("bob", ""));
assertFalse(StringUtils.isAllEmpty("  bob  ", null));
assertFalse(StringUtils.isAllEmpty(" ", "bar"));
assertFalse(StringUtils.isAllEmpty("foo", "bar"));
assertTrue(StringUtils.isAllEmpty("", null));
assertTrue(StringUtils.isBlank(null));
assertTrue(StringUtils.isBlank(""));
assertTrue(StringUtils.isBlank(StringUtilsTest.WHITESPACE));
assertFalse(StringUtils.isBlank("foo"));
assertFalse(StringUtils.isBlank("  foo  "));
assertFalse(StringUtils.isNotBlank(null));
assertFalse(StringUtils.isNotBlank(""));
assertFalse(StringUtils.isNotBlank(StringUtilsTest.WHITESPACE));
assertTrue(StringUtils.isNotBlank("foo"));
assertTrue(StringUtils.isNotBlank("  foo  "));
assertTrue(StringUtils.isAnyBlank((String) null));
assertFalse(StringUtils.isAnyBlank((String[]) null));
assertTrue(StringUtils.isAnyBlank(null, "foo"));
assertTrue(StringUtils.isAnyBlank(null, null));
assertTrue(StringUtils.isAnyBlank("", "bar"));
assertTrue(StringUtils.isAnyBlank("bob", ""));
assertTrue(StringUtils.isAnyBlank("  bob  ", null));
assertTrue(StringUtils.isAnyBlank(" ", "bar"));
assertFalse(StringUtils.isAnyBlank("foo", "bar"));
assertFalse(StringUtils.isNoneBlank((String) null));
assertTrue(StringUtils.isNoneBlank((String[]) null));
assertFalse(StringUtils.isNoneBlank(null, "foo"));
assertFalse(StringUtils.isNoneBlank(null, null));
assertFalse(StringUtils.isNoneBlank("", "bar"));
assertFalse(StringUtils.isNoneBlank("bob", ""));
assertFalse(StringUtils.isNoneBlank("  bob  ", null));
assertFalse(StringUtils.isNoneBlank(" ", "bar"));
assertTrue(StringUtils.isNoneBlank("foo", "bar"));
assertTrue(StringUtils.isAllBlank((String) null));
assertTrue(StringUtils.isAllBlank((String[]) null));
assertTrue(StringUtils.isAllBlank(null, null));
assertTrue(StringUtils.isAllBlank(null, " "));
assertFalse(StringUtils.isAllBlank(null, "foo"));
assertFalse(StringUtils.isAllBlank("", "bar"));
assertFalse(StringUtils.isAllBlank("bob", ""));
assertFalse(StringUtils.isAllBlank("  bob  ", null));
assertFalse(StringUtils.isAllBlank(" ", "bar"));
assertFalse(StringUtils.isAllBlank("foo", "bar"));
assertNull(StringUtils.firstNonBlank());
assertNull(StringUtils.firstNonBlank((String[]) null));
assertNull(StringUtils.firstNonBlank(null, null, null));
assertNull(StringUtils.firstNonBlank(null, "", " "));
assertNull(StringUtils.firstNonBlank(null, null, " "));
assertEquals("zz", StringUtils.firstNonBlank(null, "zz"));
assertEquals("abc", StringUtils.firstNonBlank("abc"));
assertEquals("xyz", StringUtils.firstNonBlank(null, "xyz"));
assertEquals("xyz", StringUtils.firstNonBlank(null, "xyz", "abc"));
assertNull(StringUtils.firstNonEmpty());
assertNull(StringUtils.firstNonEmpty((String[]) null));
assertNull(StringUtils.firstNonEmpty(null, null, null));
assertEquals(" ", StringUtils.firstNonEmpty(null, "", " "));
assertNull(StringUtils.firstNonEmpty(null, null, ""));
assertEquals("zz", StringUtils.firstNonEmpty(null, "zz"));
assertEquals("abc", StringUtils.firstNonEmpty("abc"));
assertEquals("xyz", StringUtils.firstNonEmpty(null, "xyz"));
assertEquals("xyz", StringUtils.firstNonEmpty(null, "xyz", "abc"));
assertEquals(Calendar.getInstance().get(Calendar.DAY_OF_MONTH), CalendarUtils.INSTANCE.getDayOfMonth());
assertEquals(Calendar.getInstance().get(Calendar.MONTH), CalendarUtils.INSTANCE.getMonth());
assertEquals(12, monthNames.length);
assertEquals("Januar", monthNames[0]);
assertEquals("Februar", monthNames[1]);
assertEquals("M\u00e4rz", monthNames[2]);
assertEquals("April", monthNames[3]);
assertEquals("Mai", monthNames[4]);
assertEquals("Juni", monthNames[5]);
assertEquals("Juli", monthNames[6]);
assertEquals("August", monthNames[7]);
assertEquals("September", monthNames[8]);
assertEquals("Oktober", monthNames[9]);
assertEquals("November", monthNames[10]);
assertEquals("Dezember", monthNames[11]);
assertEquals(12, monthNames.length);
assertEquals("Jan", monthNames[0]);
assertEquals("Feb", monthNames[1]);
assertEquals("M\u00e4r", monthNames[2]);
assertEquals("Apr", monthNames[3]);
assertEquals("Mai", monthNames[4]);
assertEquals("Jun", monthNames[5]);
assertEquals("Jul", monthNames[6]);
assertEquals("Aug", monthNames[7]);
assertEquals("Sep", monthNames[8]);
assertEquals("Okt", monthNames[9]);
assertEquals("Nov", monthNames[10]);
assertEquals("Dez", monthNames[11]);
assertEquals(Calendar.getInstance().get(Calendar.YEAR), CalendarUtils.INSTANCE.getYear());
assertEquals(expectedTime, actualTime,"locale: " + locale + ", formattedDate: '" + formattedDate + "', originalFormattedDate: '"+ originalFormattedDate + ", simpleDateFormat.pattern: '" + simpleDateFormat + "', Java: "+ SystemUtils.JAVA_RUNTIME_VERSION + "\n");
assertEquals(i++, map.get(parser).intValue());
assertEquals(cal.getTime().getTime(), parser.parse(dateStub + trial.one).getTime() - trial.offset,message + trial.one);
assertEquals(cal.getTime(), parser.parse(dateStub + trial.two), message + trial.two);
assertEquals(cal.getTime(), parser.parse(dateStub + trial.three), message + trial.three);
assertThrows(IllegalArgumentException.class, () -> getInstance("XXXX"));
assertEquals(cal.getTime(), h.parse("2010-08-01 12 AM 33:20"));
assertEquals(cal.getTime(), K.parse("2010-08-01 0 AM 33:20"));
assertEquals(cal.getTime(), k.parse("2010-08-01 00:33:20"));
assertEquals(cal.getTime(), H.parse("2010-08-01 00:33:20"));
assertEquals(cal.getTime(), h.parse("2010-08-01 3 AM 33:20"));
assertEquals(cal.getTime(), K.parse("2010-08-01 3 AM 33:20"));
assertEquals(cal.getTime(), k.parse("2010-08-01 03:33:20"));
assertEquals(cal.getTime(), H.parse("2010-08-01 03:33:20"));
assertEquals(cal.getTime(), h.parse("2010-08-01 3 PM 33:20"));
assertEquals(cal.getTime(), K.parse("2010-08-01 3 PM 33:20"));
assertEquals(cal.getTime(), k.parse("2010-08-01 15:33:20"));
assertEquals(cal.getTime(), H.parse("2010-08-01 15:33:20"));
assertEquals(cal.getTime(), h.parse("2010-08-01 12 PM 33:20"));
assertEquals(cal.getTime(), K.parse("2010-08-01 0 PM 33:20"));
assertEquals(cal.getTime(), k.parse("2010-08-01 12:33:20"));
assertEquals(cal.getTime(), H.parse("2010-08-01 12:33:20"));
assertEquals(Calendar.MONDAY, calendar.get(Calendar.DAY_OF_WEEK));
assertEquals(Calendar.SATURDAY, calendar.get(Calendar.DAY_OF_WEEK));
assertEquals(Calendar.SUNDAY, calendar.get(Calendar.DAY_OF_WEEK));
assertEquals(cal.getTime(), fdf.parse("3 7 2 41 03"));
assertEquals(parser1, parser2);
assertEquals(parser1.hashCode(), parser2.hashCode());
assertNotEquals(parser1, new Object());
assertThrows(ParseException.class, () -> fdp.parse("2015"));
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected.getTime(), fdp.parse("14 avril 2014"));
assertEquals(expected.getTime(), fdp.parse("14 avr. 2014"));
assertEquals(expected.getTime(), fdp.parse("14 avr 2014"));
assertEquals(date, parser.parse("2004/11/31"));
assertEquals(cal.getTime(), parser.parse("2009-10-16T16:42:16.000Z"));
assertEquals(expected.getTime(), fdp.parse("14may2014"));
assertEquals(expected.getTime(), fdp.parse("14MAY2014"));
assertEquals(expected.getTime(), fdp.parse("14May2014"));
assertEquals(SWEDEN, parser.getLocale());
assertEquals(cal.getTime(), parser.parse("0001/01/01"));
assertEquals(cal.getTime(), parser.parse("0010/01/01"));
assertEquals(cal.getTime(), parser.parse("0100/01/01"));
assertEquals(cal.getTime(), parser.parse("0999/01/01"));
assertEquals(cal.getTime(), parser.parse("01.01.1000"));
assertEquals(cal.getTime(), fdf.parse("2003 AD February 0010 PM Monday 0015 0033 0020 0989 GMT-05:00"));
assertEquals(cal.getTime(), parse);
assertEquals(cal.getTime(), fdf.parse("03 BC 2 10 PM Sat 15 33 20 989 -0500"));
assertEquals(cal.getTime(), fdf.parse("03 AD 2 10 PM Saturday 15 33 20 989 -0500"));
assertEquals(cal.getTime(), fdf.parse("20030210153320989"));
assertEquals(cal.getTime(), date);
assertEquals("sq_MK", locale.toString());
assertNotNull(locale);
assertEquals(cal.getTime(), fdf.parse("2003-07-10T15:33:20.000 -0500"));
assertEquals(cal.getTime(), fdf.parse("2003-07-10T15:33:20.000 GMT-05:00"));
assertEquals(cal.getTime(), fdf.parse("2003-07-10T16:33:20.000 Eastern Daylight Time"));
assertEquals(cal.getTime(), fdf.parse("2003-07-10T16:33:20.000 EDT"));
assertEquals(cal.getTime(), fdf.parse("2003-02-10T09:00:00.000 -0300"));
assertEquals(cal.getTime(), fdf.parse("2003-02-10T15:05:06.000 +0500"));
assertEquals(yMdHmsSZ, parser.getPattern());
assertEquals(cal.getTime(), fdf.parse("'20030210A'B153320989'"));
assertFalse(shouldFail, "Expected SDF failure, but got " + dsdf + " for [" + format + ", " + date + "]");
assertFalse(shouldFail, "Expected FDF failure, but got " + dfdp + " for [" + format + ", " + date + "]");
assertEquals((f == null), (s == null), "Should both or neither throw Exceptions");
assertEquals(dsdf, dfdp, "Parsed dates should be equal");
assertEquals(cal.getTime(), fdf.parse("2/3/04"));
assertEquals(cal.getTime(), fdf.parse("2004-02-03"));
assertEquals(REYKJAVIK, parser.getTimeZone());
assertTrue(parser.toString().startsWith("FastDate"));
assertEquals(expected, actual, "timeZone:" + timeZone.getID() + " locale:" + locale.getDisplayName());
assertEquals(inDate, out, "format: '" + formatStr + "', locale: '" + locale + "', time zone: '"+ timeZone.getID() + "', year: " + year + ", parse: '" + fmt);
assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone(TimeZones.GMT_ID));
assertEquals(0, FastTimeZone.getGmtTimeZone().getRawOffset());
assertEquals(HOURS_23, FastTimeZone.getGmtTimeZone("GMT+23:00").getRawOffset());
assertEquals(-HOURS_23, FastTimeZone.getGmtTimeZone("GMT-23:00").getRawOffset());
assertEquals(HOURS_23, FastTimeZone.getGmtTimeZone("23:00").getRawOffset());
assertEquals(HOURS_2, FastTimeZone.getGmtTimeZone("2:00").getRawOffset());
assertEquals(MINUTES_59, FastTimeZone.getGmtTimeZone("00:59").getRawOffset());
assertEquals(MINUTES_5, FastTimeZone.getGmtTimeZone("00:5").getRawOffset());
assertEquals(HOURS_23+MINUTES_59, FastTimeZone.getGmtTimeZone("23:59").getRawOffset());
assertEquals(HOURS_2+MINUTES_5, FastTimeZone.getGmtTimeZone("2:5").getRawOffset());
assertEquals(HOURS_23, FastTimeZone.getGmtTimeZone("2300").getRawOffset());
assertEquals(HOURS_2, FastTimeZone.getGmtTimeZone("0200").getRawOffset());
assertEquals(MINUTES_59, FastTimeZone.getGmtTimeZone("0059").getRawOffset());
assertEquals(MINUTES_5, FastTimeZone.getGmtTimeZone("0005").getRawOffset());
assertEquals(HOURS_23+MINUTES_59, FastTimeZone.getGmtTimeZone("2359").getRawOffset());
assertEquals(HOURS_2+MINUTES_5, FastTimeZone.getGmtTimeZone("0205").getRawOffset());
assertEquals(TimeZone.getTimeZone("America/New_York"), FastTimeZone.getTimeZone("America/New_York"));
assertEquals(HOURS_23, FastTimeZone.getGmtTimeZone("+23:00").getRawOffset());
assertEquals(HOURS_2, FastTimeZone.getGmtTimeZone("+2:00").getRawOffset());
assertEquals(-HOURS_23, FastTimeZone.getGmtTimeZone("-23:00").getRawOffset());
assertEquals(-HOURS_2, FastTimeZone.getGmtTimeZone("-2:00").getRawOffset());
assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone("UTC"));
assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone("Z"));
assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone("+0"));
assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone("-0"));
assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE));
assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DATE));
assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DAY_OF_YEAR));
assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DAY_OF_YEAR));
assertEquals(days, testResult);
assertEquals(cal.get(Calendar.DAY_OF_MONTH), testResult);
assertEquals(aCalendar.get(Calendar.DAY_OF_YEAR), testResult);
assertEquals(cal.get(Calendar.DAY_OF_YEAR), testResult);
assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.HOUR_OF_DAY));
assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.HOUR_OF_DAY));
assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.HOUR_OF_DAY));
assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.HOUR_OF_DAY));
assertEquals(expectedValue, testResult);
assertEquals(expectedValue, testResult);
assertEquals(expectedValue, testResult);
assertEquals(expectedValue, testResult);
assertEquals( hours +(((days - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_HOUR,testResult);
assertEquals(hours + (((days - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_HOUR,testResult);
assertEquals( hours +(((aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_HOUR,testResult);
assertEquals(hours + (((cal.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_HOUR,testResult);
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInMilliseconds(aCalendar, 0));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInSeconds(aCalendar, 0));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInMinutes(aCalendar, 0));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInHours(aCalendar, 0));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInDays(aCalendar, 0));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInMilliseconds(aDate, 0));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInSeconds(aDate, 0));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInMinutes(aDate, 0));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInHours(aDate, 0));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInDays(aDate, 0));
assertEquals(0, DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInMilliseconds(aDate, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MILLISECOND));
assertEquals(expectedValue, testresult);
assertEquals(expectedValue, testresult);
assertEquals(expectedValue, testresult);
assertEquals(expectedValue, testresult);
assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);
assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);
assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);
assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);
assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY),testResult);
assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY),testResult);
assertEquals(millis, testResult);
assertEquals(aCalendar.get(Calendar.MILLISECOND), testResult);
assertEquals(millis, testResult);
assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR) + ((aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY),testResult);
assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR) + ((cal.get(Calendar.DAY_OF_YEAR) - 1)* DateUtils.MILLIS_PER_DAY),testResult);
assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MINUTE));
assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MINUTE));
assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MINUTE));
assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE));
assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE));
assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE));
assertEquals(expectedValue, testResult);
assertEquals(expectedValue, testResult);
assertEquals(expectedValue, testResult);
assertEquals(expectedValue, testResult);
assertEquals(minutes, testResult);
assertEquals(minutes, testResult);
assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_MINUTE,testResult);
assertEquals(minutes+ ((hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_MINUTE,testResult);
assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + ((aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_MINUTE,testResult);
assertEquals(minutes+ ((hours * DateUtils.MILLIS_PER_HOUR) + ((cal.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_MINUTE,testResult);
assertEquals( 0, testResult);
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInMilliseconds((Calendar) null, Calendar.MILLISECOND));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInSeconds((Calendar) null, Calendar.MILLISECOND));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInMinutes((Calendar) null, Calendar.MILLISECOND));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInHours((Calendar) null, Calendar.MILLISECOND));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInDays((Calendar) null, Calendar.MILLISECOND));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInMilliseconds((Date) null, Calendar.MILLISECOND));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInSeconds((Date) null, Calendar.MILLISECOND));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInMinutes((Date) null, Calendar.MILLISECOND));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInHours((Date) null, Calendar.MILLISECOND));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInDays((Date) null, Calendar.MILLISECOND));
assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.SECOND));
assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.SECOND));
assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.SECOND));
assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.SECOND));
assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.SECOND));
assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.SECOND));
assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.SECOND));
assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.SECOND));
assertEquals(expectedValue, testresult);
assertEquals(expectedValue, testresult);
assertEquals(expectedValue, testresult);
assertEquals(expectedValue, testresult);
assertEquals(seconds+ (minutes* DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),testResult);
assertEquals(seconds+ (minutes* DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),testResult);
assertEquals(seconds, testResult);
assertEquals(aCalendar.get(Calendar.SECOND), testResult);
assertEquals(seconds, testResult);
assertEquals(seconds+ ((minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_SECOND,testResult);
assertEquals(seconds+ ((minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_SECOND,testResult);
assertEquals(seconds+ ((minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR) + ((aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_SECOND,testResult);
assertEquals(seconds+ ((minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR) + ((cal.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY))/ DateUtils.MILLIS_PER_SECOND,testResult);
assertEquals(roundedDownDate, DateUtils.round(roundedDownDate, calendarField));
assertEquals(roundedUpDate, DateUtils.round(roundedUpDate, calendarField));
assertEquals(roundedDownDate, DateUtils.round(lastRoundDownDate, calendarField));
assertEquals(roundedUpDate, DateUtils.round(firstRoundUpDate, calendarField));
assertEquals(roundedDownCalendar, DateUtils.round(roundedDownCalendar, calendarField));
assertEquals(roundedUpCalendar, DateUtils.round(roundedUpCalendar, calendarField));
assertEquals(roundedDownCalendar, DateUtils.round(lastRoundDownCalendar, calendarField));
assertEquals(roundedUpCalendar, DateUtils.round(firstRoundUpCalendar, calendarField));
assertEquals(roundedDownDate, DateUtils.round((Object) roundedDownDate, calendarField));
assertEquals(roundedUpDate, DateUtils.round((Object) roundedUpDate, calendarField));
assertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));
assertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));
assertEquals(roundedDownDate, DateUtils.round((Object) roundedDownCalendar, calendarField));
assertEquals(roundedUpDate, DateUtils.round((Object) roundedUpCalendar, calendarField));
assertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));
assertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));
assertEquals(truncatedDate, DateUtils.truncate(truncatedDate, calendarField), "Truncating "+ fdf.format(truncatedDate) +" as Date with CalendarField-value "+ calendarField +" must return itself");
assertEquals(truncatedDate, DateUtils.truncate(lastTruncateDate, calendarField));
assertNotEquals(truncatedDate, DateUtils.truncate(nextTruncateDate, calendarField), fdf.format(lastTruncateDate) + " is not an extreme when truncating as Date with CalendarField-value " + calendarField);
assertEquals(truncatedCalendar, DateUtils.truncate(truncatedCalendar, calendarField), "Truncating "+ fdf.format(truncatedCalendar) +" as Calendar with CalendarField-value "+ calendarField +" must return itself");
assertEquals(truncatedCalendar, DateUtils.truncate(lastTruncateCalendar, calendarField));
assertNotEquals(truncatedCalendar, DateUtils.truncate(nextTruncateCalendar, calendarField), fdf.format(lastTruncateCalendar) + " is not an extreme when truncating as Calendar with CalendarField-value " + calendarField);
assertEquals(truncatedDate, DateUtils.truncate((Object) truncatedDate, calendarField), "Truncating "+ fdf.format(truncatedDate) +" as Date cast to Object with CalendarField-value "+ calendarField +" must return itself as Date");
assertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateDate, calendarField));
assertNotEquals(truncatedDate, DateUtils.truncate((Object) nextTruncateDate, calendarField), fdf.format(lastTruncateDate) + " is not an extreme when truncating as Date cast to Object with CalendarField-value " + calendarField);
assertEquals(truncatedDate, DateUtils.truncate((Object) truncatedCalendar, calendarField), "Truncating "+ fdf.format(truncatedCalendar) +" as Calendar cast to Object with CalendarField-value "+ calendarField +" must return itself as Date");
assertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateCalendar, calendarField));
assertNotEquals(truncatedDate, DateUtils.truncate((Object) nextTruncateCalendar, calendarField), fdf.format(lastTruncateCalendar) + " is not an extreme when truncating as Calendar cast to Object with CalendarField-value " + calendarField);
assertEquals(januaryOneDate, DateUtils.round(januaryOneDate, calendarField), "Rounding "+ fdf.format(januaryOneDate) +" as Date with CalendarField-value "+ calendarField +" must return itself");
assertEquals(januaryOneDate, DateUtils.round(minDate, calendarField));
assertEquals(januaryOneDate, DateUtils.round(maxDate, calendarField));
assertEquals(januaryOneCalendar, DateUtils.round(januaryOneCalendar, calendarField), "Rounding "+ fdf.format(januaryOneCalendar) +" as Date with CalendarField-value "+ calendarField +" must return itself");
assertEquals(januaryOneCalendar, DateUtils.round(minCalendar, calendarField));
assertEquals(januaryOneCalendar, DateUtils.round(maxCalendar, calendarField));
assertNotEquals(januaryOneDate, DateUtils.round(toPrevRoundDate, calendarField), fdf.format(minDate) + " is not an lower-extreme when rounding as Date with CalendarField-value " + calendarField);
assertNotEquals(januaryOneDate, DateUtils.round(toNextRoundDate, calendarField), fdf.format(maxDate) + " is not an upper-extreme when rounding as Date with CalendarField-value " + calendarField);
assertNotEquals(januaryOneDate, DateUtils.round(toPrevRoundDate, calendarField), fdf.format(minCalendar) + " is not an lower-extreme when rounding as Date with CalendarField-value " + calendarField);
assertNotEquals(januaryOneDate, DateUtils.round(toNextRoundDate, calendarField), fdf.format(maxCalendar) + " is not an upper-extreme when rounding as Date with CalendarField-value " + calendarField);
private void assertEqualDuration(final String expected, final int[] start, final int[] end, final String format) {assertEqualDuration(null, expected, start, end, format);
private void assertEqualDuration(final String message, final String expected, final int[] start, final int[] end, final String format) {final Calendar cal1 = Calendar.getInstance();
assertEquals(expected, result);
assertEquals(expected, result, message);
assertEqualDuration( tmpMsg + i, Integer.toString(i), array1, array2, format );
assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS");
assertNotNull(new DurationFormatUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(DurationFormatUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(DurationFormatUtils.class.getModifiers()));
assertEqualDuration( "01", new int[] { 2006, 0, 15, 0, 0, 0 },new int[] { 2006, 2, 10, 0, 0, 0 }, "MM");
assertEqualDuration( "12", new int[] { 2005, 0, 15, 0, 0, 0 },new int[] { 2006, 0, 15, 0, 0, 0 }, "MM");
assertEqualDuration( "12", new int[] { 2005, 0, 15, 0, 0, 0 },new int[] { 2006, 0, 16, 0, 0, 0 }, "MM");
assertEqualDuration( "11", new int[] { 2005, 0, 15, 0, 0, 0 },new int[] { 2006, 0, 14, 0, 0, 0 }, "MM");
assertEqualDuration( "01 26", new int[] { 2006, 0, 15, 0, 0, 0 },new int[] { 2006, 2, 10, 0, 0, 0 }, "MM dd");
assertEqualDuration( "54", new int[] { 2006, 0, 15, 0, 0, 0 },new int[] { 2006, 2, 10, 0, 0, 0 }, "dd");
assertEqualDuration( "09 12", new int[] { 2006, 1, 20, 0, 0, 0 },new int[] { 2006, 11, 4, 0, 0, 0 }, "MM dd");
assertEqualDuration( "287", new int[] { 2006, 1, 20, 0, 0, 0 },new int[] { 2006, 11, 4, 0, 0, 0 }, "dd");
assertEqualDuration( "11 30", new int[] { 2006, 0, 2, 0, 0, 0 },new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd");
assertEqualDuration( "364", new int[] { 2006, 0, 2, 0, 0, 0 },new int[] { 2007, 0, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "12 00", new int[] { 2006, 0, 1, 0, 0, 0 },new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd");
assertEqualDuration( "365", new int[] { 2006, 0, 1, 0, 0, 0 },new int[] { 2007, 0, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "31", new int[] { 2006, 0, 1, 0, 0, 0 },new int[] { 2006, 1, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "92", new int[] { 2005, 9, 1, 0, 0, 0 },new int[] { 2006, 0, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "77", new int[] { 2005, 9, 16, 0, 0, 0 },new int[] { 2006, 0, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "136", new int[] { 2005, 9, 16, 0, 0, 0 },new int[] { 2006, 2, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "136", new int[] { 2004, 9, 16, 0, 0, 0 },new int[] { 2005, 2, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "137", new int[] { 2003, 9, 16, 0, 0, 0 },new int[] { 2004, 2, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "135", new int[] { 2003, 9, 16, 0, 0, 0 },new int[] { 2004, 1, 28, 0, 0, 0 }, "dd");
assertEqualDuration( "364", new int[] { 2007, 0, 2, 0, 0, 0 },new int[] { 2008, 0, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "729", new int[] { 2006, 0, 2, 0, 0, 0 },new int[] { 2008, 0, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "365", new int[] { 2007, 2, 2, 0, 0, 0 },new int[] { 2008, 2, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "333", new int[] { 2007, 1, 2, 0, 0, 0 },new int[] { 2008, 0, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "28", new int[] { 2008, 1, 2, 0, 0, 0 },new int[] { 2008, 2, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "393", new int[] { 2007, 1, 2, 0, 0, 0 },new int[] { 2008, 2, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "369", new int[] { 2004, 0, 29, 0, 0, 0 },new int[] { 2005, 1, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "338", new int[] { 2004, 1, 29, 0, 0, 0 },new int[] { 2005, 1, 1, 0, 0, 0 }, "dd");
assertEqualDuration( "28", new int[] { 2004, 2, 8, 0, 0, 0 },new int[] { 2004, 3, 5, 0, 0, 0 }, "dd");
assertEqualDuration( "48", new int[] { 1992, 1, 29, 0, 0, 0 },new int[] { 1996, 1, 29, 0, 0, 0 }, "M");
assertEqualDuration( "11", new int[] { 1996, 1, 29, 0, 0, 0 },new int[] { 1997, 1, 28, 0, 0, 0 }, "M");
assertEqualDuration( "11 28", new int[] { 1996, 1, 29, 0, 0, 0 },new int[] { 1997, 1, 28, 0, 0, 0 }, "M d");
assertEquals("0", DurationFormatUtils.formatDuration(duration, "y"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "M"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "d"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "H"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "m"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "s"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "S"));
assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS"));
assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy"));
assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "y"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "M"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "d"));
assertEquals("0", DurationFormatUtils.formatDuration(duration, "H"));
assertEquals("1", DurationFormatUtils.formatDuration(duration, "m"));
assertEquals("60", DurationFormatUtils.formatDuration(duration, "s"));
assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S"));
assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss"));
assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d"));
assertEquals("00:00:00.000", DurationFormatUtils.formatDurationHMS(time));
assertEquals("00:00:00.001", DurationFormatUtils.formatDurationHMS(time));
assertEquals("00:00:00.015", DurationFormatUtils.formatDurationHMS(time));
assertEquals("00:00:00.165", DurationFormatUtils.formatDurationHMS(time));
assertEquals("00:00:01.675", DurationFormatUtils.formatDurationHMS(time));
assertEquals("00:00:13.465", DurationFormatUtils.formatDurationHMS(time));
assertEquals("00:01:12.789", DurationFormatUtils.formatDurationHMS(time));
assertEquals("00:32:12.789", DurationFormatUtils.formatDurationHMS(time));
assertEquals("01:02:12.789", DurationFormatUtils.formatDurationHMS(time));
assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatDurationISO(0L));
assertEquals("P0Y0M0DT0H0M0.001S", DurationFormatUtils.formatDurationISO(1L));
assertEquals("P0Y0M0DT0H0M0.010S", DurationFormatUtils.formatDurationISO(10L));
assertEquals("P0Y0M0DT0H0M0.100S", DurationFormatUtils.formatDurationISO(100L));
assertEquals("P0Y0M0DT0H1M15.321S", DurationFormatUtils.formatDurationISO(75321L));
assertEquals("0 days 0 hours 0 minutes 1 second", text);
assertEquals("0 days 0 hours 0 minutes 2 seconds", text);
assertEquals("0 days 0 hours 0 minutes 11 seconds", text);
assertEquals("0 days 0 hours 1 minute 0 seconds", text);
assertEquals("0 days 0 hours 2 minutes 0 seconds", text);
assertEquals("0 days 0 hours 11 minutes 0 seconds", text);
assertEquals("0 days 0 hours 1 minute 1 second", text);
assertEquals("0 days 1 hour 0 minutes 0 seconds", text);
assertEquals("0 days 2 hours 0 minutes 0 seconds", text);
assertEquals("0 days 11 hours 0 minutes 0 seconds", text);
assertEquals("0 days 1 hour 1 minute 1 second", text);
assertEquals("1 day 0 hours 0 minutes 0 seconds", text);
assertEquals("2 days 0 hours 0 minutes 0 seconds", text);
assertEquals("11 days 0 hours 0 minutes 0 seconds", text);
assertEquals("1 day 1 hour 1 minute 1 second", text);
assertEquals("50 seconds", text);
assertEquals("1 minute 5 seconds", text);
assertEquals("2 minutes 0 seconds", text);
assertEquals("2 minutes 1 second", text);
assertEquals("1 hour 12 minutes 0 seconds", text);
assertEquals("1 day 0 hours 0 minutes 0 seconds", text);
assertEquals("50 seconds", text);
assertEquals("1 minute 5 seconds", text);
assertEquals("2 minutes", text);
assertEquals("2 minutes 1 second", text);
assertEquals("1 hour 12 minutes", text);
assertEquals("1 day", text);
assertEquals("0 days 0 hours 0 minutes 50 seconds", text);
assertEquals("0 days 0 hours 1 minute 5 seconds", text);
assertEquals("0 days 0 hours 2 minutes", text);
assertEquals("0 days 0 hours 2 minutes 1 second", text);
assertEquals("0 days 1 hour 12 minutes", text);
assertEquals("1 day", text);
assertEquals("0 days 0 hours 0 minutes 50 seconds", text);
assertEquals("0 days 0 hours 1 minute 5 seconds", text);
assertEquals("0 days 0 hours 2 minutes 0 seconds", text);
assertEquals("0 days 0 hours 2 minutes 1 second", text);
assertEquals("0 days 1 hour 12 minutes 0 seconds", text);
assertEquals("1 day 1 hour 12 minutes 0 seconds", text);
assertEquals("2 days 1 hour 12 minutes 0 seconds", text);
assertEquals(i + " days 0 hours 0 minutes 0 seconds", text);
assertThrows(IllegalArgumentException.class, () -> DurationFormatUtils.formatDuration(-5000, "S", true));
assertThrows(IllegalArgumentException.class, () -> DurationFormatUtils.formatDurationHMS(-5000));
assertThrows(IllegalArgumentException.class, () -> DurationFormatUtils.formatDurationISO(-5000));
assertThrows(IllegalArgumentException.class, () -> DurationFormatUtils.formatDurationWords(-5000, true, true));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "y"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "M"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "d"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "H"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "m"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "s"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "S"));
assertEquals("0000", DurationFormatUtils.formatPeriod(time1970, time1970, "SSSS"));
assertEquals("0000", DurationFormatUtils.formatPeriod(time1970, time1970, "yyyy"));
assertEquals("0000", DurationFormatUtils.formatPeriod(time1970, time1970, "yyMM"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "y"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "M"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "d"));
assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "H"));
assertEquals("1", DurationFormatUtils.formatPeriod(time1970, time, "m"));
assertEquals("60", DurationFormatUtils.formatPeriod(time1970, time, "s"));
assertEquals("60000", DurationFormatUtils.formatPeriod(time1970, time, "S"));
assertEquals("01:00", DurationFormatUtils.formatPeriod(time1970, time, "mm:ss"));
assertEquals("36", DurationFormatUtils.formatPeriod(time1970, time, "yM"));
assertEquals("3 years 6 months", DurationFormatUtils.formatPeriod(time1970, time, "y' years 'M' months'"));
assertEquals("03/06", DurationFormatUtils.formatPeriod(time1970, time, "yy/MM"));
assertEquals("310", DurationFormatUtils.formatPeriod(time1970, time, "yM"));
assertEquals("3 years 10 months", DurationFormatUtils.formatPeriod(time1970, time, "y' years 'M' months'"));
assertEquals("03/10", DurationFormatUtils.formatPeriod(time1970, time, "yy/MM"));
assertEquals("40", DurationFormatUtils.formatPeriod(time1970, time, "yM"));
assertEquals("4 years 0 months", DurationFormatUtils.formatPeriod(time1970, time, "y' years 'M' months'"));
assertEquals("04/00", DurationFormatUtils.formatPeriod(time1970, time, "yy/MM"));
assertEquals("48", DurationFormatUtils.formatPeriod(time1970, time, "M"));
assertEquals("48", DurationFormatUtils.formatPeriod(time1970, time, "MM"));
assertEquals("048", DurationFormatUtils.formatPeriod(time1970, time, "MMM"));
assertThrows(IllegalArgumentException.class, () -> DurationFormatUtils.formatPeriod(5000, 2500, "yy/MM"));
assertEquals("2002-02-23T09:11:12-03:00", text);
assertEquals("P32Y1M22DT9H11M12.001S", text);
assertEquals("P1Y1M2DT10H30M0.000S", text);
// assertEquals("P1Y2M3DT10H30M", text);
assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatPeriodISO(0L, 0L));
assertEquals("P0Y0M0DT0H0M1.000S", DurationFormatUtils.formatPeriodISO(0L, 1000L));
assertEquals("P0Y0M0DT0H1M1.000S", DurationFormatUtils.formatPeriodISO(0L, 61000L));
assertThrows(IllegalArgumentException.class, () -> DurationFormatUtils.formatPeriodISO(5000, 2000));
assertEqualDuration( "09", new int[] { 2005, 11, 31, 0, 0, 0 },new int[] { 2006, 9, 6, 0, 0, 0 }, "MM");
assertEquals("1 9", DurationFormatUtils.formatPeriod(startMillis, endMillis, "M d"));
assertThrows(IllegalArgumentException.class, () -> DurationFormatUtils.lexx("'yMdHms''S"));
assertEquals("61.999", DurationFormatUtils.formatDuration(61999, "s.S"));
assertEquals("1 1999", DurationFormatUtils.formatDuration(61999, "m S"));
assertEquals("61.999", DurationFormatUtils.formatDuration(61999, "s.SSS"));
assertEquals("1 1999", DurationFormatUtils.formatDuration(61999, "m SSS"));
assertEquals("61.0999", DurationFormatUtils.formatDuration(61999, "s.SSSS"));
assertEquals("1 1999", DurationFormatUtils.formatDuration(61999, "m SSSS"));
assertEquals("61.00999", DurationFormatUtils.formatDuration(61999, "s.SSSSS"));
assertEquals("1 01999", DurationFormatUtils.formatDuration(61999, "m SSSSS"));
assertEquals("0", DurationFormatUtils.formatDuration(0, "S"));
assertEquals(Integer.toString(Integer.MAX_VALUE), DurationFormatUtils.formatDuration(Integer.MAX_VALUE, "S"));
assertEquals(Long.toString(maxIntPlus), DurationFormatUtils.formatDuration(maxIntPlus, "S"));
assertEquals(Long.toString(Long.MAX_VALUE), DurationFormatUtils.formatDuration(Long.MAX_VALUE, "S"));
assertArrayEquals(new DurationFormatUtils.Token[]{new DurationFormatUtils.Token(DurationFormatUtils.y, 1),new DurationFormatUtils.Token(DurationFormatUtils.M, 1),new DurationFormatUtils.Token(DurationFormatUtils.d, 1),new DurationFormatUtils.Token(DurationFormatUtils.H, 1),new DurationFormatUtils.Token(DurationFormatUtils.m, 1),new DurationFormatUtils.Token(DurationFormatUtils.s, 1),new DurationFormatUtils.Token(DurationFormatUtils.S, 1)}, DurationFormatUtils.lexx("yMdHmsS"));
assertArrayEquals(new DurationFormatUtils.Token[]{new DurationFormatUtils.Token(DurationFormatUtils.H, 2),new DurationFormatUtils.Token(new StringBuilder(":"), 1),new DurationFormatUtils.Token(DurationFormatUtils.m, 2),new DurationFormatUtils.Token(new StringBuilder(":"), 1),new DurationFormatUtils.Token(DurationFormatUtils.s, 2),new DurationFormatUtils.Token(new StringBuilder("."), 1),new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx("HH:mm:ss.SSS"));
assertArrayEquals(new DurationFormatUtils.Token[]{new DurationFormatUtils.Token(new StringBuilder("P"), 1),new DurationFormatUtils.Token(DurationFormatUtils.y, 4),new DurationFormatUtils.Token(new StringBuilder("Y"), 1),new DurationFormatUtils.Token(DurationFormatUtils.M, 1),new DurationFormatUtils.Token(new StringBuilder("M"), 1),new DurationFormatUtils.Token(DurationFormatUtils.d, 1),new DurationFormatUtils.Token(new StringBuilder("DT"), 1),new DurationFormatUtils.Token(DurationFormatUtils.H, 1),new DurationFormatUtils.Token(new StringBuilder("H"), 1),new DurationFormatUtils.Token(DurationFormatUtils.m, 1),new DurationFormatUtils.Token(new StringBuilder("M"), 1),new DurationFormatUtils.Token(DurationFormatUtils.s, 1),new DurationFormatUtils.Token(new StringBuilder("."), 1),new DurationFormatUtils.Token(DurationFormatUtils.S, 3),new DurationFormatUtils.Token(new StringBuilder("S"), 1)}, DurationFormatUtils.lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN));
assertNotEquals(token, new Object(), "Token equal to non-Token class. ");
assertNotEquals(token, new DurationFormatUtils.Token(new Object()), "Token equal to Token with wrong value class. ");
assertNotEquals(token, new DurationFormatUtils.Token(DurationFormatUtils.y, 1), "Token equal to Token with different count. ");
assertEquals(numToken, numToken, "Token with Number value not equal to itself. ");
assertEqualDuration( hr + ":" + min + ":" + sec,new int[] { 2000, 0, 1, 0, 0, 0, 0 },new int[] { 2000, 0, 1, hr, min, sec },"H:m:s");
assertEquals(trial.one, printer.format(cal));
assertEquals(trial.two, printer.format(cal));
assertEquals(trial.three, printer.format(cal));
assertThrows(IllegalArgumentException.class, () -> getInstance("XXXX"));
assertEquals(expected, format.format(date, sb).toString());
assertEquals(expected, format.format(epoch, sb).toString());
assertEquals("1", printer.format(calendar.getTime()));
assertEquals("6", printer.format(calendar.getTime()));
assertEquals("7", printer.format(calendar.getTime()));
assertEquals(printer1, printer2);
assertEquals(printer1.hashCode(), printer2.hashCode());
assertNotEquals(printer1, new Object());
assertEquals(sdf.format(date1), fdf.format(date1));
assertEquals("2003-01-10T15:33:20", fdf.format(date1));
assertEquals("2003-01-10T15:33:20", fdf.format(cal1));
assertEquals("2003-01-10T15:33:20", fdf.format(millis1));
assertEquals("2003-07-10T09:00:00", fdf.format(date2));
assertEquals("2003-07-10T09:00:00", fdf.format(cal2));
assertEquals("2003-07-10T09:00:00", fdf.format(millis2));
assertEquals("-0500", fdf.format(date1));
assertEquals("-0500", fdf.format(cal1));
assertEquals("-0500", fdf.format(millis1));
assertEquals("-0400", fdf.format(date2));
assertEquals("-0400", fdf.format(cal2));
assertEquals("-0400", fdf.format(millis2));
assertEquals("-05:00", fdf.format(date1));
assertEquals("-05:00", fdf.format(cal1));
assertEquals("-05:00", fdf.format(millis1));
assertEquals("-04:00", fdf.format(date2));
assertEquals("-04:00", fdf.format(cal2));
assertEquals("-04:00", fdf.format(millis2));
assertEquals(sdf.format(date1).replace("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));
assertEquals(sdf.format(date2).replace("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));
assertEquals("0 24 0 12", printer.format(calendar));
assertEquals("0 12 12 12", printer.format(calendar));
assertEquals("11 23 23 11", printer.format(calendar));
assertEquals("2", getInstance("d", SWEDEN).format(cal));
assertEquals("02", getInstance("dd", SWEDEN).format(cal));
assertEquals("002", getInstance("ddd", SWEDEN).format(cal));
assertEquals("0002", getInstance("dddd", SWEDEN).format(cal));
assertEquals("00002", getInstance("ddddd", SWEDEN).format(cal));
assertEquals(output, format.format(cal));
assertEquals("2009-10-16T16:42:16.000Z", format.format(cal.getTime()), "dateTime");
assertEquals("2009-10-16T16:42:16.000Z", format.format(cal), "dateTime");
assertEquals("fredag, week 53", fdf.format(d));
assertEquals("2009-10-16T08:42:16 +0200", value, "calendar");
assertEquals("2009-10-16T12:12:16 +0530", value, "calendar");
assertEquals("2009-10-16T07:42:16 +0100", value, "calendar");
assertEquals(SWEDEN, printer.getLocale());
assertEquals("0001/01/01", format.format(cal));
assertEquals("0010/01/01", format.format(cal));
assertEquals("0100/01/01", format.format(cal));
assertEquals("0999/01/01", format.format(cal));
assertEquals("01.01.1000", format.format(cal));
assertEquals(YYYY_MM_DD, printer.getPattern());
assertEquals("2/3/04", fdf.format(cal));
assertEquals("2004-02-03", fdf.format(cal));
assertEquals("2004/12/31", format.format(cal));
assertEquals("0999/12/31", format.format(cal));
assertEquals("0001/03/02", format.format(cal));
assertEquals(expected, format.format(calendar, sb).toString());
assertEquals(expected, format.format(date, sb, new FieldPosition(0)).toString());
assertEquals(expected, format.format(date, sb).toString());
assertEquals(expected, format.format(epoch, sb, new FieldPosition(0)).toString());
assertEquals(expected, format.format(epoch, sb).toString());
assertEquals("+0000", noColonFormat.format(c));
assertEquals("Z", isoFormat.format(c));
assertEquals("+00:00", colonFormat.format(c));
assertEquals(NEW_YORK, printer.getTimeZone());
assertTrue(printer.toString().startsWith("FastDate"));
assertEquals("2021", printer4Digits.format(cal));
assertEquals("2021", printer4DigitsFallback.format(cal));
assertEquals("2021", printer4DigitAnotherFallback.format(cal));
assertEquals("21", printer2Digits.format(cal));
assertThrows(IllegalStateException.class, watch::stop,"Calling stop on an unstarted StopWatch should throw an exception. ");
assertThrows(IllegalStateException.class, watch::suspend,"Calling suspend on an unstarted StopWatch should throw an exception. ");
assertThrows(IllegalStateException.class, watch::split,"Calling split on a non-running StopWatch should throw an exception. ");
assertThrows(IllegalStateException.class, watch::unsplit,"Calling unsplit on an unsplit StopWatch should throw an exception. ");
assertThrows(IllegalStateException.class, watch::resume,"Calling resume on an unsuspended StopWatch should throw an exception. ");
assertThrows(IllegalStateException.class, watch::start,"Calling start on a started StopWatch should throw an exception. ");
assertThrows(IllegalStateException.class, watch::unsplit,"Calling unsplit on an unsplit StopWatch should throw an exception. ");
assertThrows(IllegalStateException.class, watch::getSplitTime,"Calling getSplitTime on an unsplit StopWatch should throw an exception. ");
assertThrows(IllegalStateException.class, watch::resume,"Calling resume on an unsuspended StopWatch should throw an exception. ");
assertThrows(IllegalStateException.class, watch::start,"Calling start on a stopped StopWatch should throw an exception as it needs to be reset. ");
assertFalse(watch.isStarted());
assertFalse(watch.isSuspended());
assertTrue(watch.isStopped());
assertTrue(watch.isStarted());
assertFalse(watch.isSuspended());
assertFalse(watch.isStopped());
assertTrue(watch.isStarted());
assertTrue(watch.isSuspended());
assertFalse(watch.isStopped());
assertFalse(watch.isStarted());
assertFalse(watch.isSuspended());
assertTrue(watch.isStopped());
assertNotEquals(ZERO_TIME_ELAPSED, formatSplitTime);
assertTrue(formatSplitTime.startsWith(ZERO_HOURS_PREFIX));
assertFalse(formatSplitTime.startsWith(MESSAGE), formatSplitTime);
assertTrue(formatSplitTime.startsWith(ZERO_HOURS_PREFIX));
assertEquals(ZERO_TIME_ELAPSED, formatTime);
assertTrue(formatTime.startsWith(ZERO_HOURS_PREFIX));
assertFalse(formatTime.startsWith(MESSAGE), formatTime);
assertThrows(IllegalStateException.class, watch::getStartTime,"Calling getStartTime on an unstarted StopWatch should throw an exception");
assertTrue(watch.getStartTime() >= beforeStopWatchMillis);
assertThrows(IllegalStateException.class, watch::getStartTime,"Calling getStartTime on a reset, but unstarted StopWatch should throw an exception");
assertEquals(suspendTime, totalTime);
assertNull(StopWatch.create().getMessage());
assertEquals(MESSAGE, stopWatch.getMessage());
assertTrue(stopWatch.toString().startsWith(MESSAGE));
assertTrue(stopWatch.toSplitString().startsWith(MESSAGE));
assertEquals(stopTime, watch.getStopTime());
assertTrue(stopTime >= testStartMillis);
assertTrue(stopTime <= testEndMillis);
assertEquals(2L, watch.getTime(TimeUnit.HOURS));
assertEquals(179L, watch.getTime(TimeUnit.MINUTES));
assertEquals(10741L, watch.getTime(TimeUnit.SECONDS));
assertEquals(10741999L, watch.getTime(TimeUnit.MILLISECONDS));
assertEquals(time, watch.getTime());
assertTrue(time >= 500);
assertTrue(time < 700);
assertEquals(0, watch.getTime());
assertEquals(0, watch.getTime());
assertEquals(ZERO_TIME_ELAPSED, watch.toString());
assertTrue(watch.getTime() < 2000);
assertEquals(splitStr.length(), 12, "Formatted split string not the correct length");
assertTrue(splitTime >= 500);
assertTrue(splitTime < 700);
assertTrue(totalTime >= 1500);
assertTrue(totalTime < 1900);
assertTrue(watch.isStarted());
assertTrue(testStartMillis <= stopTime);
assertTrue(testSuspendMillis <= stopTime);
assertTrue(suspendTime >= 500);
assertTrue(suspendTime < 700);
assertTrue(totalTime >= 1000);
assertTrue(totalTime < 1300);
assertEquals(splitStr.length(), 12, "Formatted split string not the correct length");
assertEquals(splitStr.length(), 12 + MESSAGE.length() + 1, "Formatted split string not the correct length");
assertEquals(splitStr.length(), 12, "Formatted split string not the correct length");
assertTrue(new StopWatch(MESSAGE).toString().startsWith(MESSAGE));
assertEquals(splitStr.length(), 12 + MESSAGE.length() + 1, "Formatted split string not the correct length");
assertEquals(0, failures.get());
assertSame(Locale.GERMANY, format1.getLocale());
assertEquals(Locale.US, format2.getLocale());
assertSame(Locale.GERMANY, format3.getLocale());
assertNotSame(format1, format2);
assertNotSame(format2, format3);
assertSame(Locale.GERMANY, format1.getLocale());
assertEquals(Locale.US, format2.getLocale());
assertSame(Locale.GERMANY, format3.getLocale());
assertNotSame(format1, format2);
assertNotSame(format2, format3);
assertSame(format1, format2);
assertNotSame(format1, format2);
assertSame(format2, format3);
assertEquals("MM/DD/yyyy", format1.getPattern());
assertEquals(TimeZone.getDefault(), format1.getTimeZone());
assertEquals(TimeZone.getDefault(), format2.getTimeZone());
assertNotSame(format1, format2);
assertSame(format1, format3);
assertEquals(Locale.GERMANY, format1.getLocale());
assertNotSame(format1, format2);
assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone());
assertEquals(TimeZone.getDefault(), format2.getTimeZone());
assertSame(format3, format4);
assertNotSame(format3, format5);
assertNotSame(format4, format6);
assertNotSame(format1, format2);
assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone());
assertEquals(TimeZone.getDefault(), format2.getTimeZone());
assertEquals(TimeZone.getDefault(), format3.getTimeZone());
assertEquals(Locale.GERMANY, format1.getLocale());
assertEquals(Locale.GERMANY, format2.getLocale());
assertEquals(Locale.GERMANY, format3.getLocale());
assertEquals(medium, format);
assertEquals(sdf.toPattern(), format.getPattern());
assertEquals(Locale.getDefault(), format.getLocale());
assertEquals(TimeZone.getDefault(), format.getTimeZone());
assertNotEquals(shortShort, shortLong);
assertNotEquals(shortShort, longShort);
assertNotEquals(shortShort, longLong);
assertNotEquals(shortLong, longShort);
assertNotEquals(shortLong, longLong);
assertNotEquals(longShort, longLong);
assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA),FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA));
assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")),FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault()));
assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG),FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault()));
assertEquals("292278994-08-17", dateAsString);
assertEquals("17/08/292278994", dateAsString);
assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA),FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA));
assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")),FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault()));
assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM),FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault()));
assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA),FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA));
assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")),FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault()));
assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG),FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault()));
assertEquals("1970-Sep-15", dateAsString);
assertEquals("1970-syys-15", dateAsString);
assertEquals("1970-szept.-15", dateAsString);
assertEquals("1970-September-15", dateAsString);
assertEquals("1970-syyskuu-15", dateAsString);
assertEquals("1970-szeptember-15", dateAsString);
assertEquals(expectedValue, actualValue);
private static void assertCalendarsEquals(final String message, final Calendar cal1, final Calendar cal2, final long delta) {assertFalse(Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta,message + " expected " + cal1.getTime() + " but got " + cal2.getTime());
private static void assertWeekIterator(final Iterator<?> it, final Calendar start) {final Calendar end = (Calendar) start.clone();
assertWeekIterator(it, start, end);
private static void assertWeekIterator(final Iterator<?> it, final Calendar start, final Calendar end) {Calendar cal = (Calendar) it.next();
assertCalendarsEquals("", start, cal, 0);
assertCalendarsEquals("", cal, DateUtils.truncate(cal, Calendar.DATE), 0);
assertCalendarsEquals("", last, cal, 0);
assertFalse(count % 7 != 0, "There were " + count + " days in this iterator");
assertCalendarsEquals("", end, cal, 0);
private static void assertWeekIterator(final Iterator<?> it, final Date start, final Date end) {final Calendar calStart = Calendar.getInstance();
assertWeekIterator(it, calStart, calEnd);
private void assertDate(final Date date, final int year, final int month, final int day, final int hour, final int min, final int sec, final int mil) {final GregorianCalendar cal = new GregorianCalendar();
assertEquals(year, cal.get(Calendar.YEAR));
assertEquals(month, cal.get(Calendar.MONTH));
assertEquals(day, cal.get(Calendar.DAY_OF_MONTH));
assertEquals(hour, cal.get(Calendar.HOUR_OF_DAY));
assertEquals(min, cal.get(Calendar.MINUTE));
assertEquals(sec, cal.get(Calendar.SECOND));
assertEquals(mil, cal.get(Calendar.MILLISECOND));
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 6, 4, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 4, 4, 3, 2, 1);
assertThrows(NullPointerException.class, () -> DateUtils.addDays(null, 0));
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 5, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 3, 3, 2, 1);
assertThrows(NullPointerException.class, () -> DateUtils.addHours(null, 0));
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 3, 2, 2);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 3, 2, 0);
assertThrows(NullPointerException.class, () -> DateUtils.addMilliseconds(null, 0));
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 4, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 2, 2, 1);
assertThrows(NullPointerException.class, () -> DateUtils.addMinutes(null, 0));
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 7, 5, 4, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 5, 5, 4, 3, 2, 1);
assertThrows(NullPointerException.class, () -> DateUtils.addMonths(null, 0));
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 3, 3, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 3, 1, 1);
assertThrows(NullPointerException.class, () -> DateUtils.addSeconds(null, 0));
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 12, 4, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);      // july
assertDate(result, 2000, 5, 28, 4, 3, 2, 1);   // june
assertThrows(NullPointerException.class, () -> DateUtils.addMonths(null, 0));
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2001, 6, 5, 4, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 1999, 6, 5, 4, 3, 2, 1);
assertThrows(NullPointerException.class, () -> DateUtils.addYears(null, 0));
assertEquals(dateTimeParser.parse("March 28, 2002 14:00:00.000"),DateUtils.ceiling(dateTimeParser.parse("March 28, 2002 13:45:01.231"),Calendar.HOUR),"ceiling javadoc-1 failed");
assertEquals(dateTimeParser.parse("April 1, 2002 00:00:00.000"),DateUtils.ceiling(dateTimeParser.parse("March 28, 2002 13:45:01.231"),Calendar.MONTH),"ceiling javadoc-2 failed");
assertEquals(dateParser.parse("January 1, 2003"),DateUtils.ceiling(date1, Calendar.YEAR),"ceiling year-1 failed");
assertEquals(dateParser.parse("January 1, 2002"),DateUtils.ceiling(date2, Calendar.YEAR),"ceiling year-2 failed");
assertEquals(dateParser.parse("March 1, 2002"),DateUtils.ceiling(date1, Calendar.MONTH),"ceiling month-1 failed");
assertEquals(dateParser.parse("December 1, 2001"),DateUtils.ceiling(date2, Calendar.MONTH),"ceiling month-2 failed");
assertEquals(dateParser.parse("February 16, 2002"),DateUtils.ceiling(date1, DateUtils.SEMI_MONTH),"ceiling semimonth-1 failed");
assertEquals(dateParser.parse("December 1, 2001"),DateUtils.ceiling(date2, DateUtils.SEMI_MONTH),"ceiling semimonth-2 failed");
assertEquals(dateParser.parse("February 13, 2002"),DateUtils.ceiling(date1, Calendar.DATE),"ceiling date-1 failed");
assertEquals(dateParser.parse("November 19, 2001"),DateUtils.ceiling(date2, Calendar.DATE),"ceiling date-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 13:00:00.000"),DateUtils.ceiling(date1, Calendar.HOUR),"ceiling hour-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 2:00:00.000"),DateUtils.ceiling(date2, Calendar.HOUR),"ceiling hour-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:35:00.000"),DateUtils.ceiling(date1, Calendar.MINUTE),"ceiling minute-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:24:00.000"),DateUtils.ceiling(date2, Calendar.MINUTE),"ceiling minute-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:57.000"),DateUtils.ceiling(date1, Calendar.SECOND),"ceiling second-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:12.000"),DateUtils.ceiling(date2, Calendar.SECOND),"ceiling second-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.ceiling(dateAmPm1, Calendar.AM_PM),"ceiling ampm-1 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.ceiling(dateAmPm2, Calendar.AM_PM),"ceiling ampm-2 failed");
assertEquals(dateTimeParser.parse("February 4, 2002 00:00:00.000"),DateUtils.ceiling(dateAmPm3, Calendar.AM_PM),"ceiling ampm-3 failed");
assertEquals(dateTimeParser.parse("February 4, 2002 00:00:00.000"),DateUtils.ceiling(dateAmPm4, Calendar.AM_PM),"ceiling ampm-4 failed");
assertEquals(dateParser.parse("January 1, 2003"),DateUtils.ceiling((Object) date1, Calendar.YEAR),"ceiling year-1 failed");
assertEquals(dateParser.parse("January 1, 2002"),DateUtils.ceiling((Object) date2, Calendar.YEAR),"ceiling year-2 failed");
assertEquals(dateParser.parse("March 1, 2002"),DateUtils.ceiling((Object) date1, Calendar.MONTH),"ceiling month-1 failed");
assertEquals(dateParser.parse("December 1, 2001"),DateUtils.ceiling((Object) date2, Calendar.MONTH),"ceiling month-2 failed");
assertEquals(dateParser.parse("February 16, 2002"),DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH),"ceiling semimonth-1 failed");
assertEquals(dateParser.parse("December 1, 2001"),DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH),"ceiling semimonth-2 failed");
assertEquals(dateParser.parse("February 13, 2002"),DateUtils.ceiling((Object) date1, Calendar.DATE),"ceiling date-1 failed");
assertEquals(dateParser.parse("November 19, 2001"),DateUtils.ceiling((Object) date2, Calendar.DATE),"ceiling date-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 13:00:00.000"),DateUtils.ceiling((Object) date1, Calendar.HOUR),"ceiling hour-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 2:00:00.000"),DateUtils.ceiling((Object) date2, Calendar.HOUR),"ceiling hour-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:35:00.000"),DateUtils.ceiling((Object) date1, Calendar.MINUTE),"ceiling minute-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:24:00.000"),DateUtils.ceiling((Object) date2, Calendar.MINUTE),"ceiling minute-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:57.000"),DateUtils.ceiling((Object) date1, Calendar.SECOND),"ceiling second-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:12.000"),DateUtils.ceiling((Object) date2, Calendar.SECOND),"ceiling second-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM),"ceiling ampm-1 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM),"ceiling ampm-2 failed");
assertEquals(dateTimeParser.parse("February 4, 2002 00:00:00.000"),DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM),"ceiling ampm-3 failed");
assertEquals(dateTimeParser.parse("February 4, 2002 00:00:00.000"),DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM),"ceiling ampm-4 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:57.000"),DateUtils.ceiling((Object) cal1, Calendar.SECOND),"ceiling calendar second-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:12.000"),DateUtils.ceiling((Object) cal2, Calendar.SECOND),"ceiling calendar second-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM),"ceiling ampm-1 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM),"ceiling ampm-2 failed");
assertEquals(dateTimeParser.parse("February 4, 2002 00:00:00.000"),DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM),"ceiling ampm-3 failed");
assertEquals(dateTimeParser.parse("February 4, 2002 00:00:00.000"),DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM),"ceiling ampm-4 failed");
assertThrows(NullPointerException.class, () -> DateUtils.ceiling((Date) null, Calendar.SECOND));
assertThrows(NullPointerException.class, () -> DateUtils.ceiling((Calendar) null, Calendar.SECOND));
assertThrows(NullPointerException.class, () -> DateUtils.ceiling((Object) null, Calendar.SECOND));
assertThrows(ClassCastException.class, () -> DateUtils.ceiling("", Calendar.SECOND));
assertThrows(IllegalArgumentException.class, () -> DateUtils.ceiling(date1, -9999));
assertEquals(dateTimeParser.parse("March 31, 2003 00:00:00.000"),DateUtils.ceiling(date4, Calendar.DATE),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 31, 2003 00:00:00.000"),DateUtils.ceiling((Object) cal4, Calendar.DATE),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 31, 2003 00:00:00.000"),DateUtils.ceiling(date5, Calendar.DATE),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 31, 2003 00:00:00.000"),DateUtils.ceiling((Object) cal5, Calendar.DATE),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 31, 2003 00:00:00.000"),DateUtils.ceiling(date6, Calendar.DATE),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 31, 2003 00:00:00.000"),DateUtils.ceiling((Object) cal6, Calendar.DATE),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 31, 2003 00:00:00.000"),DateUtils.ceiling(date7, Calendar.DATE),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 31, 2003 00:00:00.000"),DateUtils.ceiling((Object) cal7, Calendar.DATE),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 03:00:00.000"),DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 03:00:00.000"),DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 03:00:00.000"),DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 03:00:00.000"),DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 04:00:00.000"),DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 04:00:00.000"),DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 04:00:00.000"),DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY),"ceiling MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 04:00:00.000"),DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY),"ceiling MET date across DST change-over");
assertThrows(ArithmeticException.class, () -> DateUtils.ceiling(endCal, Calendar.DATE));
assertThrows(ArithmeticException.class, () -> DateUtils.ceiling(endCal, Calendar.DATE));
assertEquals(0, cal.get(Calendar.HOUR));
assertNotNull(new DateUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(DateUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(DateUtils.class.getModifiers()));
assertTrue(DateUtils.isSameDay(cala, calb));
assertFalse(DateUtils.isSameDay(cala, calb));
assertTrue(DateUtils.isSameDay(cala, calb));
assertFalse(DateUtils.isSameDay(cala, calb));
assertThrows(NullPointerException.class, () -> DateUtils.isSameDay(Calendar.getInstance(), null));
assertThrows(NullPointerException.class, () -> DateUtils.isSameDay(null, Calendar.getInstance()));
assertThrows(NullPointerException.class, () -> DateUtils.isSameDay((Calendar) null, null));
assertTrue(DateUtils.isSameDay(datea, dateb));
assertFalse(DateUtils.isSameDay(datea, dateb));
assertTrue(DateUtils.isSameDay(datea, dateb));
assertFalse(DateUtils.isSameDay(datea, dateb));
assertThrows(NullPointerException.class, () -> DateUtils.isSameDay(new Date(), null));
assertThrows(NullPointerException.class, () -> DateUtils.isSameDay(null, new Date()));
assertThrows(NullPointerException.class, () -> DateUtils.isSameDay((Date) null, null));
assertFalse(DateUtils.isSameInstant(cala, calb));
assertTrue(DateUtils.isSameInstant(cala, calb));
assertThrows(NullPointerException.class, () -> DateUtils.isSameInstant(Calendar.getInstance(), null));
assertThrows(NullPointerException.class, () -> DateUtils.isSameInstant(null, Calendar.getInstance()));
assertThrows(NullPointerException.class, () -> DateUtils.isSameInstant((Calendar) null, null));
assertTrue(DateUtils.isSameInstant(datea, dateb));
assertFalse(DateUtils.isSameInstant(datea, dateb));
assertTrue(DateUtils.isSameInstant(datea, dateb));
assertFalse(DateUtils.isSameInstant(datea, dateb));
assertThrows(NullPointerException.class, () -> DateUtils.isSameInstant(new Date(), null));
assertThrows(NullPointerException.class, () -> DateUtils.isSameInstant(null, new Date()));
assertThrows(NullPointerException.class, () -> DateUtils.isSameInstant((Date) null, null));
assertTrue(DateUtils.isSameLocalTime(cala, calb));
assertFalse(DateUtils.isSameLocalTime(calc, cald), "LANG-677");
assertFalse(DateUtils.isSameLocalTime(cala, calb));
assertThrows(NullPointerException.class, () -> DateUtils.isSameLocalTime(Calendar.getInstance(), null));
assertThrows(NullPointerException.class, () -> DateUtils.isSameLocalTime(null, Calendar.getInstance()));
assertThrows(NullPointerException.class, () -> DateUtils.isSameLocalTime(null, null));
assertThrows(IllegalArgumentException.class, () -> DateUtils.iterator(Calendar.getInstance(), -9999));
assertThrows(NullPointerException.class, () -> DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER));
assertThrows(NullPointerException.class, () -> DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER));
assertThrows(NullPointerException.class, () -> DateUtils.iterator((Object) null, DateUtils.RANGE_WEEK_CENTER));
assertThrows(ClassCastException.class, () -> DateUtils.iterator("", DateUtils.RANGE_WEEK_CENTER));
assertEquals(d.getTime(), d2.getTime() + d.getTime() % 1000, "Date not equal to itself ISO formatted and parsed");
assertThrows(ParseException.class, () -> DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"));
assertThrows(ParseException.class, () -> DateUtils.parseDate("Mi, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"));
assertWeekIterator(it,dateParser.parse("January 27, 2002"),dateParser.parse("March 2, 2002"));
assertWeekIterator(it,dateParser.parse("January 28, 2002"),dateParser.parse("March 3, 2002"));
assertWeekIterator(it,dateParser.parse("October 28, 2001"),dateParser.parse("December 1, 2001"));
assertWeekIterator(it,dateParser.parse("October 29, 2001"),dateParser.parse("December 2, 2001"));
assertThrows(ParseException.class, () -> DateUtils.parseDate("19721203"));
assertThrows(NullPointerException.class, () -> DateUtils.parseDate("19721203", (String[]) null));
assertEquals(cal.getTime(), date);
assertEquals(cal.getTime(), date);
assertEquals(cal.getTime(), date);
assertThrows(ParseException.class, () -> DateUtils.parseDate("197212AB", parsers));
assertThrows(ParseException.class, () -> DateUtils.parseDate("PURPLE", parsers));
assertThrows(NullPointerException.class, () -> DateUtils.parseDate(null, parsers));
assertEquals(cal.getTime(), date);
assertThrows(ParseException.class, () -> DateUtils.parseDateStrictly(dateStr, parsers));
assertEquals(dateParser.parse("January 1, 2002"),DateUtils.round(date1, Calendar.YEAR),"round year-1 failed");
assertEquals(dateParser.parse("January 1, 2002"),DateUtils.round(date2, Calendar.YEAR),"round year-2 failed");
assertEquals(dateParser.parse("February 1, 2002"),DateUtils.round(date1, Calendar.MONTH),"round month-1 failed");
assertEquals(dateParser.parse("December 1, 2001"),DateUtils.round(date2, Calendar.MONTH),"round month-2 failed");
assertEquals(dateParser.parse("February 1, 2002"),DateUtils.round(date0, DateUtils.SEMI_MONTH),"round semimonth-0 failed");
assertEquals(dateParser.parse("February 16, 2002"),DateUtils.round(date1, DateUtils.SEMI_MONTH),"round semimonth-1 failed");
assertEquals(dateParser.parse("November 16, 2001"),DateUtils.round(date2, DateUtils.SEMI_MONTH),"round semimonth-2 failed");
assertEquals(dateParser.parse("February 13, 2002"),DateUtils.round(date1, Calendar.DATE),"round date-1 failed");
assertEquals(dateParser.parse("November 18, 2001"),DateUtils.round(date2, Calendar.DATE),"round date-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 13:00:00.000"),DateUtils.round(date1, Calendar.HOUR),"round hour-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:00:00.000"),DateUtils.round(date2, Calendar.HOUR),"round hour-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:35:00.000"),DateUtils.round(date1, Calendar.MINUTE),"round minute-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:00.000"),DateUtils.round(date2, Calendar.MINUTE),"round minute-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:57.000"),DateUtils.round(date1, Calendar.SECOND),"round second-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:11.000"),DateUtils.round(date2, Calendar.SECOND),"round second-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 00:00:00.000"),DateUtils.round(dateAmPm1, Calendar.AM_PM),"round ampm-1 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.round(dateAmPm2, Calendar.AM_PM),"round ampm-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.round(dateAmPm3, Calendar.AM_PM),"round ampm-3 failed");
assertEquals(dateTimeParser.parse("February 4, 2002 00:00:00.000"),DateUtils.round(dateAmPm4, Calendar.AM_PM),"round ampm-4 failed");
assertEquals(dateParser.parse("January 1, 2002"),DateUtils.round((Object) date1, Calendar.YEAR),"round year-1 failed");
assertEquals(dateParser.parse("January 1, 2002"),DateUtils.round((Object) date2, Calendar.YEAR),"round year-2 failed");
assertEquals(dateParser.parse("February 1, 2002"),DateUtils.round((Object) date1, Calendar.MONTH),"round month-1 failed");
assertEquals(dateParser.parse("December 1, 2001"),DateUtils.round((Object) date2, Calendar.MONTH),"round month-2 failed");
assertEquals(dateParser.parse("February 16, 2002"),DateUtils.round((Object) date1, DateUtils.SEMI_MONTH),"round semimonth-1 failed");
assertEquals(dateParser.parse("November 16, 2001"),DateUtils.round((Object) date2, DateUtils.SEMI_MONTH),"round semimonth-2 failed");
assertEquals(dateParser.parse("February 13, 2002"),DateUtils.round((Object) date1, Calendar.DATE),"round date-1 failed");
assertEquals(dateParser.parse("November 18, 2001"),DateUtils.round((Object) date2, Calendar.DATE),"round date-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 13:00:00.000"),DateUtils.round((Object) date1, Calendar.HOUR),"round hour-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:00:00.000"),DateUtils.round((Object) date2, Calendar.HOUR),"round hour-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:35:00.000"),DateUtils.round((Object) date1, Calendar.MINUTE),"round minute-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:00.000"),DateUtils.round((Object) date2, Calendar.MINUTE),"round minute-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:57.000"),DateUtils.round((Object) date1, Calendar.SECOND),"round second-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:11.000"),DateUtils.round((Object) date2, Calendar.SECOND),"round second-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:57.000"),DateUtils.round((Object) cal1, Calendar.SECOND),"round calendar second-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:11.000"),DateUtils.round((Object) cal2, Calendar.SECOND),"round calendar second-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 00:00:00.000"),DateUtils.round((Object) dateAmPm1, Calendar.AM_PM),"round ampm-1 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.round((Object) dateAmPm2, Calendar.AM_PM),"round ampm-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.round((Object) dateAmPm3, Calendar.AM_PM),"round ampm-3 failed");
assertEquals(dateTimeParser.parse("February 4, 2002 00:00:00.000"),DateUtils.round((Object) dateAmPm4, Calendar.AM_PM),"round ampm-4 failed");
assertThrows(NullPointerException.class, () -> DateUtils.round((Date) null, Calendar.SECOND));
assertThrows(NullPointerException.class, () -> DateUtils.round((Calendar) null, Calendar.SECOND));
assertThrows(NullPointerException.class, () -> DateUtils.round((Object) null, Calendar.SECOND));
assertThrows(ClassCastException.class, () -> DateUtils.round("", Calendar.SECOND));
assertThrows(IllegalArgumentException.class, () -> DateUtils.round(date1, -9999));
assertEquals(dateTimeParser.parse("February 3, 2002 00:00:00.000"),DateUtils.round((Object) calAmPm1, Calendar.AM_PM),"round ampm-1 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.round((Object) calAmPm2, Calendar.AM_PM),"round ampm-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.round((Object) calAmPm3, Calendar.AM_PM),"round ampm-3 failed");
assertEquals(dateTimeParser.parse("February 4, 2002 00:00:00.000"),DateUtils.round((Object) calAmPm4, Calendar.AM_PM),"round ampm-4 failed");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.round(date4, Calendar.DATE),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.round((Object) cal4, Calendar.DATE),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.round(date5, Calendar.DATE),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.round((Object) cal5, Calendar.DATE),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.round(date6, Calendar.DATE),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.round((Object) cal6, Calendar.DATE),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.round(date7, Calendar.DATE),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.round((Object) cal7, Calendar.DATE),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 01:00:00.000"),DateUtils.round(date4, Calendar.HOUR_OF_DAY),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 01:00:00.000"),DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 03:00:00.000"),DateUtils.round(date5, Calendar.HOUR_OF_DAY),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 03:00:00.000"),DateUtils.round((Object) cal5, Calendar.HOUR_OF_DAY),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 03:00:00.000"),DateUtils.round(date6, Calendar.HOUR_OF_DAY),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 03:00:00.000"),DateUtils.round((Object) cal6, Calendar.HOUR_OF_DAY),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 04:00:00.000"),DateUtils.round(date7, Calendar.HOUR_OF_DAY),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 04:00:00.000"),DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY),"round MET date across DST change-over");
assertEquals(dateTimeParser.parse("July 2, 2007 08:09:00.000"),DateUtils.round(date, Calendar.MINUTE),"Minute Round Up Failed");
assertEquals(dateTimeParser.parse("July 2, 2007 08:08:00.000"),DateUtils.round(date, Calendar.MINUTE),"Minute No Round Failed");
assertEquals(dateTimeParser.parse("July 2, 2007 08:08:51.000"),DateUtils.round(date, Calendar.SECOND),"Second Round Up with 600 Milli Seconds Failed");
assertEquals(dateTimeParser.parse("July 2, 2007 08:08:50.000"),DateUtils.round(date, Calendar.SECOND),"Second Round Down with 200 Milli Seconds Failed");
assertEquals(dateTimeParser.parse("July 2, 2007 08:08:21.000"),DateUtils.round(date, Calendar.SECOND),"Second Round Up with 200 Milli Seconds Failed");
assertEquals(dateTimeParser.parse("July 2, 2007 08:08:20.000"),DateUtils.round(date, Calendar.SECOND),"Second Round Down with 200 Milli Seconds Failed");
assertEquals(dateTimeParser.parse("July 2, 2007 08:00:00.000"),DateUtils.round(date, Calendar.HOUR),"Hour Round Down Failed");
assertEquals(dateTimeParser.parse("July 2, 2007 09:00:00.000"),DateUtils.round(date, Calendar.HOUR),"Hour Round Up Failed");
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 1, 4, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 29, 4, 3, 2, 1);
final String outsideOfRangeAssertionMessage = "DateUtils.setDays did not throw an expected IllegalArgumentException for amount outside of range 1 to 31.";
assertThrows(IllegalArgumentException.class,() -> DateUtils.setDays(BASE_DATE, 32),outsideOfRangeAssertionMessage);
assertThrows(IllegalArgumentException.class,() -> DateUtils.setDays(BASE_DATE, 0),outsideOfRangeAssertionMessage);
assertThrows(NullPointerException.class, () -> DateUtils.setDays(null, 1));
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 0, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 23, 3, 2, 1);
final String outsideOfRangeAssertionMessage = "DateUtils.setHours did not throw an expected IllegalArgumentException for amount outside of range 0 to 23.";
assertThrows(IllegalArgumentException.class,() -> DateUtils.setHours(BASE_DATE, 24),outsideOfRangeAssertionMessage);
assertThrows(IllegalArgumentException.class,() -> DateUtils.setHours(BASE_DATE, -1),outsideOfRangeAssertionMessage);
assertThrows(NullPointerException.class, () -> DateUtils.setHours(null, 0));
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 3, 2, 0);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 3, 2, 999);
final String outsideOfRangeAssertionMessage = "DateUtils.setMilliseconds did not throw an expected IllegalArgumentException for range outside of 0 to 999.";
assertThrows(IllegalArgumentException.class,() -> DateUtils.setMilliseconds(BASE_DATE, 1000),outsideOfRangeAssertionMessage);
assertThrows(IllegalArgumentException.class,() -> DateUtils.setMilliseconds(BASE_DATE, -1),outsideOfRangeAssertionMessage);
assertThrows(NullPointerException.class, () -> DateUtils.setMilliseconds(null, 0));
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 0, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 59, 2, 1);
final String outsideOfRangeAssertionMessage = "DateUtils.setMinutes did not throw an expected IllegalArgumentException for amount outside of range 0 to 59.";
assertThrows(IllegalArgumentException.class,() -> DateUtils.setMinutes(BASE_DATE, 60),outsideOfRangeAssertionMessage);
assertThrows(IllegalArgumentException.class,() -> DateUtils.setMinutes(BASE_DATE, -1),outsideOfRangeAssertionMessage);
assertThrows(NullPointerException.class, () -> DateUtils.setMinutes(null, 0));
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 5, 5, 4, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 1, 5, 4, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 0, 5, 4, 3, 2, 1);
final String outsideOfRangeAssertionMessage = "DateUtils.setMonths did not throw an expected IllegalArgumentException for amount outside of range 0 to 11.";
assertThrows(IllegalArgumentException.class,() -> DateUtils.setMonths(BASE_DATE, 12),outsideOfRangeAssertionMessage);
assertThrows(IllegalArgumentException.class,() -> DateUtils.setMonths(BASE_DATE, -1),outsideOfRangeAssertionMessage);
assertThrows(NullPointerException.class, () -> DateUtils.setMonths(null, 0));
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 3, 0, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 3, 59, 1);
final String outsideOfRangeAssertionMessage = "DateUtils.setSeconds did not throw an expected IllegalArgumentException for amount outside of range 0 to 59.";
assertThrows(IllegalArgumentException.class,() -> DateUtils.setSeconds(BASE_DATE, 60),outsideOfRangeAssertionMessage);
assertThrows(IllegalArgumentException.class,() -> DateUtils.setSeconds(BASE_DATE, -1),outsideOfRangeAssertionMessage);
assertThrows(NullPointerException.class, () -> DateUtils.setSeconds(null, 0));
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2000, 6, 5, 4, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2008, 6, 5, 4, 3, 2, 1);
assertNotSame(BASE_DATE, result);
assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);
assertDate(result, 2005, 6, 5, 4, 3, 2, 1);
assertThrows(NullPointerException.class, () -> DateUtils.setYears(null, 0));
assertEquals(date1, DateUtils.toCalendar(date1).getTime(), "Failed to convert to a Calendar and back");
assertThrows(NullPointerException.class, () -> DateUtils.toCalendar(null));
assertEquals(date2, c.getTime(), "Convert Date and TimeZone to a Calendar, but failed to get the Date back");
assertEquals(defaultZone, c.getTimeZone(), "Convert Date and TimeZone to a Calendar, but failed to get the TimeZone back");
assertThrows(NullPointerException.class, () -> DateUtils.toCalendar(null, null));
assertThrows(NullPointerException.class, () -> DateUtils.toCalendar(null, zone));
assertThrows(NullPointerException.class, () -> DateUtils.toCalendar(date1, null));
assertEquals(dateParser.parse("January 1, 2002"),DateUtils.truncate(date1, Calendar.YEAR),"truncate year-1 failed");
assertEquals(dateParser.parse("January 1, 2001"),DateUtils.truncate(date2, Calendar.YEAR),"truncate year-2 failed");
assertEquals(dateParser.parse("February 1, 2002"),DateUtils.truncate(date1, Calendar.MONTH),"truncate month-1 failed");
assertEquals(dateParser.parse("November 1, 2001"),DateUtils.truncate(date2, Calendar.MONTH),"truncate month-2 failed");
assertEquals(dateParser.parse("February 1, 2002"),DateUtils.truncate(date1, DateUtils.SEMI_MONTH),"truncate semimonth-1 failed");
assertEquals(dateParser.parse("November 16, 2001"),DateUtils.truncate(date2, DateUtils.SEMI_MONTH),"truncate semimonth-2 failed");
assertEquals(dateParser.parse("February 12, 2002"),DateUtils.truncate(date1, Calendar.DATE),"truncate date-1 failed");
assertEquals(dateParser.parse("November 18, 2001"),DateUtils.truncate(date2, Calendar.DATE),"truncate date-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:00:00.000"),DateUtils.truncate(date1, Calendar.HOUR),"truncate hour-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:00:00.000"),DateUtils.truncate(date2, Calendar.HOUR),"truncate hour-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:00.000"),DateUtils.truncate(date1, Calendar.MINUTE),"truncate minute-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:00.000"),DateUtils.truncate(date2, Calendar.MINUTE),"truncate minute-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:56.000"),DateUtils.truncate(date1, Calendar.SECOND),"truncate second-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:11.000"),DateUtils.truncate(date2, Calendar.SECOND),"truncate second-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 00:00:00.000"),DateUtils.truncate(dateAmPm1, Calendar.AM_PM),"truncate ampm-1 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 00:00:00.000"),DateUtils.truncate(dateAmPm2, Calendar.AM_PM),"truncate ampm-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.truncate(dateAmPm3, Calendar.AM_PM),"truncate ampm-3 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.truncate(dateAmPm4, Calendar.AM_PM),"truncate ampm-4 failed");
assertEquals(dateParser.parse("January 1, 2002"),DateUtils.truncate((Object) date1, Calendar.YEAR),"truncate year-1 failed");
assertEquals(dateParser.parse("January 1, 2001"),DateUtils.truncate((Object) date2, Calendar.YEAR),"truncate year-2 failed");
assertEquals(dateParser.parse("February 1, 2002"),DateUtils.truncate((Object) date1, Calendar.MONTH),"truncate month-1 failed");
assertEquals(dateParser.parse("November 1, 2001"),DateUtils.truncate((Object) date2, Calendar.MONTH),"truncate month-2 failed");
assertEquals(dateParser.parse("February 1, 2002"),DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH),"truncate semimonth-1 failed");
assertEquals(dateParser.parse("November 16, 2001"),DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH),"truncate semimonth-2 failed");
assertEquals(dateParser.parse("February 12, 2002"),DateUtils.truncate((Object) date1, Calendar.DATE),"truncate date-1 failed");
assertEquals(dateParser.parse("November 18, 2001"),DateUtils.truncate((Object) date2, Calendar.DATE),"truncate date-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:00:00.000"),DateUtils.truncate((Object) date1, Calendar.HOUR),"truncate hour-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:00:00.000"),DateUtils.truncate((Object) date2, Calendar.HOUR),"truncate hour-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:00.000"),DateUtils.truncate((Object) date1, Calendar.MINUTE),"truncate minute-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:00.000"),DateUtils.truncate((Object) date2, Calendar.MINUTE),"truncate minute-2 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:56.000"),DateUtils.truncate((Object) date1, Calendar.SECOND),"truncate second-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:11.000"),DateUtils.truncate((Object) date2, Calendar.SECOND),"truncate second-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 00:00:00.000"),DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM),"truncate ampm-1 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 00:00:00.000"),DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM),"truncate ampm-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM),"truncate ampm-3 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM),"truncate ampm-4 failed");
assertEquals(dateTimeParser.parse("February 12, 2002 12:34:56.000"),DateUtils.truncate((Object) cal1, Calendar.SECOND),"truncate calendar second-1 failed");
assertEquals(dateTimeParser.parse("November 18, 2001 1:23:11.000"),DateUtils.truncate((Object) cal2, Calendar.SECOND),"truncate calendar second-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 00:00:00.000"),DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM),"truncate ampm-1 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 00:00:00.000"),DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM),"truncate ampm-2 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM),"truncate ampm-3 failed");
assertEquals(dateTimeParser.parse("February 3, 2002 12:00:00.000"),DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM),"truncate ampm-4 failed");
assertThrows(NullPointerException.class, () -> DateUtils.truncate((Date) null, Calendar.SECOND));
assertThrows(NullPointerException.class, () -> DateUtils.truncate((Calendar) null, Calendar.SECOND));
assertThrows(NullPointerException.class, () -> DateUtils.truncate((Object) null, Calendar.SECOND));
assertThrows(ClassCastException.class, () -> DateUtils.truncate("", Calendar.SECOND));
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.truncate(date3, Calendar.DATE),"truncate MET date across DST change-over");
assertEquals(dateTimeParser.parse("March 30, 2003 00:00:00.000"),DateUtils.truncate((Object) cal3, Calendar.DATE),"truncate MET date across DST change-over");
assertEquals(dateTimeParser.parse("October 26, 2003 00:00:00.000"),DateUtils.truncate(date8, Calendar.DATE),"truncate MET date across DST change-over");
assertEquals(dateTimeParser.parse("October 26, 2003 00:00:00.000"),DateUtils.truncate((Object) cal8, Calendar.DATE),"truncate MET date across DST change-over");
assertThrows(ArithmeticException.class, () -> DateUtils.truncate(endCal, Calendar.DATE));
assertThrows(ArithmeticException.class, () -> DateUtils.truncate(endCal, Calendar.DATE));
assertEquals(0, cal.get(Calendar.HOUR));
assertEquals("2004-10-31 00:00:00.000 -06:00", format.format(oct31MDT), "Check 00:00:00.000");
assertEquals("2004-10-31 01:00:00.000 -06:00", format.format(oct31_01MDT), "Check 01:00:00.000");
assertEquals("2004-10-31 01:02:00.000 -06:00", format.format(oct31_01_02MDT), "Check 01:02:00.000");
assertEquals("2004-10-31 01:02:03.000 -06:00", format.format(oct31_01_02_03MDT), "Check 01:02:03.000");
assertEquals("2004-10-31 01:02:03.004 -06:00", format.format(oct31_01_02_03_04MDT), "Check 01:02:03.004");
assertEquals(gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L, "Demonstrate Problem");
assertEquals(oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND),"Truncate Calendar.MILLISECOND");
assertEquals(oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND),"Truncate Calendar.SECOND");
assertEquals(oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE),"Truncate Calendar.MINUTE");
assertEquals(oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY),"Truncate Calendar.HOUR_OF_DAY");
assertEquals(oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR),"Truncate Calendar.HOUR");
assertEquals(oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE),"Truncate Calendar.DATE");
assertEquals(oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND),"Round Calendar.MILLISECOND");
assertEquals(oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND),"Round Calendar.SECOND");
assertEquals(oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE),"Round Calendar.MINUTE");
assertEquals(oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY),"Round Calendar.HOUR_OF_DAY");
assertEquals(oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR),"Round Calendar.HOUR");
assertEquals(oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE),"Round Calendar.DATE");
assertWeekIterator(it, sunday);
assertWeekIterator(it, monday);
assertWeekIterator(it, today);
assertWeekIterator(it, centered);
assertWeekIterator(it, centered);
assertWeekIterator(it2, centered);
assertThrows(NoSuchElementException.class, it2::next);
assertThrows(UnsupportedOperationException.class, it3::remove);
assertEquals("GMT+00:00", new GmtTimeZone(false, 0, 0).getID());
assertEquals("GMT+01:02", new GmtTimeZone(false, 1, 2).getID());
assertEquals("GMT+11:22", new GmtTimeZone(false, 11, 22).getID());
assertEquals("GMT-01:02", new GmtTimeZone(true, 1, 2).getID());
assertEquals("GMT-11:22", new GmtTimeZone(true, 11, 22).getID());
assertEquals(0, new GmtTimeZone(false, 0, 0).getOffset(234304));
assertEquals(0, new GmtTimeZone(false, 0, 0).getRawOffset());
assertEquals(23 * 60 * 60 * 1000, new GmtTimeZone(false, 23, 0).getRawOffset());
assertThrows(IllegalArgumentException.class, () -> new GmtTimeZone(false, 24, 0));
assertFalse(new GmtTimeZone(false, 0, 0).useDaylightTime());
assertEquals(59 * 60 * 1000, new GmtTimeZone(false, 0, 59).getRawOffset());
assertThrows(IllegalArgumentException.class, () -> new GmtTimeZone(false, 0, 60));
assertThrows(UnsupportedOperationException.class, () -> new GmtTimeZone(false, 0, 0).setRawOffset(0));
assertEquals(-(6 * 60 + 30) * 60 * 1000,new GmtTimeZone(true, 6, 30).getOffset(1, 1, 1, 1, 1, 1));
assertEquals("[GmtTimeZone id=\"GMT-12:00\",offset=-43200000]",new GmtTimeZone(true, 12, 0).toString());
assertFalse(new GmtTimeZone(false, 0, 0).useDaylightTime());
assertEquals(vulgar.getTime(), cal.getTime());
assertEquals(isoForm, printer.format(vulgar));
assertTrue(valid, "Expected FDP parse to fail, but got " + actualTime);
assertFalse(valid, "Expected FDP parse to succeed, but got " + e);
assertEquals(expectedTime, actualTime, locale.toString()+" "+formattedDate +"\n");
assertEquals(sdfE, fdfE, locale.toString()+" "+formattedDate + " expected same Exception ");
assertEquals(-1, sdferrorIndex, "Expected SDF error index -1 ");
assertEquals(-1, fdferrorIndex, "Expected FDF error index -1 ");
assertEquals(length, endIndex, "Expected FDF to parse full string " + fdfP);
assertEquals(expectedTime, actualTime, locale.toString()+" "+formattedDate +"\n");
assertNotEquals(-1, fdferrorIndex, "Test data error: expected FDF parse to fail, but got " + actualTime);
assertTrue(sdferrorIndex - fdferrorIndex <= 4,"FDF error index ("+ fdferrorIndex + ") should approximate SDF index (" + sdferrorIndex + ")");
assertNull(parser.parse("03/23", parsePosition));
assertEquals(5, parsePosition.getErrorIndex());
assertEquals(4, parsePosition.getIndex());
assertEquals(2, calendar.get(Calendar.MONTH));
assertEquals(23, calendar.get(Calendar.DATE));
assertNull(date);
assertEquals(0, parsePosition.getIndex());
assertEquals(0, parsePosition.getErrorIndex());
assertEquals(12, parsePosition.getIndex());
assertEquals(1961, calendar.get(Calendar.YEAR));
assertEquals(2, calendar.get(Calendar.MONTH));
assertEquals(23, calendar.get(Calendar.DATE));
assertNull(parser.parse("03/23/1961", parsePosition));
assertEquals(2, parsePosition.getErrorIndex());
assertNotNull(parser.parse(input, parsePosition));
assertEquals(input.length(), parsePosition.getIndex());
assertNull(parser.parse( "Thorsday, 03/23/61", parsePosition));
assertEquals(0, parsePosition.getErrorIndex());
assertNotNull(parser.parse(input, parsePosition));
assertEquals(input.length(), parsePosition.getIndex());
assertNull(parser.parse( "11:23 Pacific Standard ", parsePosition));
assertEquals(6, parsePosition.getErrorIndex());
private void assertFormats(final String expectedValue, final String pattern, final TimeZone timeZone, final Calendar cal) {assertEquals(expectedValue, DateFormatUtils.format(cal.getTime(), pattern, timeZone));
assertEquals(expectedValue, DateFormatUtils.format(cal.getTime().getTime(), pattern, timeZone));
assertEquals(expectedValue, DateFormatUtils.format(cal, pattern, timeZone));
assertNotNull(new DateFormatUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(DateFormatUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(DateFormatUtils.class.getModifiers()));
assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH"));
assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH"));
assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US));
assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH", Locale.US));
assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH"));
assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH"));
assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US));
assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US));
assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()));
assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()));
assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));
assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));
assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));
assertEquals("20030608101112", DateFormatUtils.format(calendar, "yyyyMMddHHmmss"));
assertEquals("20030608221112", DateFormatUtils.format(calendar, "yyyyMMddHHmmss"));
assertEquals(d.getTime(), d2.getTime() + d.getTime() % 1000, "Date not equal to itself ISO formatted and parsed");
assertEquals("2009-10-16T08:42:16+02:00", value, "long");
assertEquals("2009-10-16T12:12:16+05:30", value, "long");
assertEquals("2009-10-16T07:42:16+01:00", value, "long");
assertEquals("2009-10-16T08:42:16+02:00", value, "calendar");
assertEquals("2009-10-16T12:12:16+05:30", value, "calendar");
assertEquals("2009-10-16T07:42:16+01:00", value, "calendar");
assertFormats("Sun, 08 Jun 2003 10:11:12 -0300", DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),timeZone, june);
assertFormats("Sun, 08 Jun 2003 10:11:12 +0000", DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),timeZone, june);
assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));
assertEquals(0, DurationUtils.getNanosOfMilli(null));
assertEquals(0, DurationUtils.getNanosOfMilli(Duration.ZERO));
assertEquals(1, DurationUtils.getNanosOfMilli(Duration.ofNanos(1)));
assertEquals(10, DurationUtils.getNanosOfMilli(Duration.ofNanos(10)));
assertEquals(100, DurationUtils.getNanosOfMilli(Duration.ofNanos(100)));
assertEquals(1_000, DurationUtils.getNanosOfMilli(Duration.ofNanos(1_000)));
assertEquals(10_000, DurationUtils.getNanosOfMilli(Duration.ofNanos(10_000)));
assertEquals(100_000, DurationUtils.getNanosOfMilli(Duration.ofNanos(100_000)));
assertEquals(0, DurationUtils.getNanosOfMilli(Duration.ofNanos(1_000_000)));
assertEquals(1, DurationUtils.getNanosOfMilli(Duration.ofNanos(1_000_001)));
assertEquals(0, DurationUtils.getNanosOfMiili(null));
assertEquals(0, DurationUtils.getNanosOfMiili(Duration.ZERO));
assertEquals(1, DurationUtils.getNanosOfMiili(Duration.ofNanos(1)));
assertEquals(10, DurationUtils.getNanosOfMiili(Duration.ofNanos(10)));
assertEquals(100, DurationUtils.getNanosOfMiili(Duration.ofNanos(100)));
assertEquals(1_000, DurationUtils.getNanosOfMiili(Duration.ofNanos(1_000)));
assertEquals(10_000, DurationUtils.getNanosOfMiili(Duration.ofNanos(10_000)));
assertEquals(100_000, DurationUtils.getNanosOfMiili(Duration.ofNanos(100_000)));
assertEquals(0, DurationUtils.getNanosOfMiili(Duration.ofNanos(1_000_000)));
assertEquals(1, DurationUtils.getNanosOfMiili(Duration.ofNanos(1_000_001)));
assertFalse(DurationUtils.isPositive(Duration.ZERO));
assertFalse(DurationUtils.isPositive(Duration.ofMillis(-1)));
assertTrue(DurationUtils.isPositive(Duration.ofMillis(1)));
assertEquals(0, DurationUtils.LONG_TO_INT_RANGE.fit(0L));
assertEquals(Integer.MIN_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MIN_VALUE));
assertEquals(Integer.MIN_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MIN_VALUE - 1));
assertEquals(Integer.MIN_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MIN_VALUE - 2));
assertEquals(Integer.MAX_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MAX_VALUE));
assertEquals(Integer.MAX_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MAX_VALUE + 1));
assertEquals(Integer.MAX_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MAX_VALUE + 2));
assertEquals(Integer.MIN_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(Long.MIN_VALUE));
assertEquals(Integer.MAX_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(Long.MAX_VALUE));
assertEquals(Short.MIN_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit((long) Short.MIN_VALUE));
assertEquals(Short.MAX_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit((long) Short.MAX_VALUE));
assertTrue(DurationUtils.of(this::testSince).compareTo(Duration.ZERO) >= 0);
assertTrue(DurationUtils.of(start -> assertTrue(start.compareTo(Instant.now()) <= 0)).compareTo(Duration.ZERO) >= 0);
assertThrows(IOException.class, () -> DurationUtils.of(() -> {throw new IOException();
assertTrue(DurationUtils.since(Instant.EPOCH).compareTo(Duration.ZERO) >= 0);
assertTrue(DurationUtils.since(Instant.MIN).compareTo(Duration.ZERO) >= 0);
assertTrue(DurationUtils.since(Instant.MAX).compareTo(Duration.ZERO) <= 0);
assertEquals(Duration.ofDays(1), DurationUtils.toDuration(1, TimeUnit.DAYS));
assertEquals(Duration.ofHours(1), DurationUtils.toDuration(1, TimeUnit.HOURS));
assertEquals(Duration.ofMillis(1), DurationUtils.toDuration(1_000, TimeUnit.MICROSECONDS));
assertEquals(Duration.ofMillis(1), DurationUtils.toDuration(1, TimeUnit.MILLISECONDS));
assertEquals(Duration.ofMinutes(1), DurationUtils.toDuration(1, TimeUnit.MINUTES));
assertEquals(Duration.ofNanos(1), DurationUtils.toDuration(1, TimeUnit.NANOSECONDS));
assertEquals(Duration.ofSeconds(1), DurationUtils.toDuration(1, TimeUnit.SECONDS));
assertEquals(1, DurationUtils.toDuration(1, TimeUnit.MILLISECONDS).toMillis());
assertEquals(-1, DurationUtils.toDuration(-1, TimeUnit.MILLISECONDS).toMillis());
assertEquals(0, DurationUtils.toDuration(0, TimeUnit.SECONDS).toMillis());
assertEquals(0, DurationUtils.toMillisInt(Duration.ZERO));
assertEquals(1, DurationUtils.toMillisInt(Duration.ofMillis(1)));
assertEquals(Integer.MIN_VALUE, DurationUtils.toMillisInt(Duration.ofMillis(Integer.MIN_VALUE)));
assertEquals(Integer.MAX_VALUE, DurationUtils.toMillisInt(Duration.ofMillis(Integer.MAX_VALUE)));
assertEquals(Integer.MAX_VALUE, DurationUtils.toMillisInt(Duration.ofMillis(NumberUtils.LONG_INT_MAX_VALUE + 1)));
assertEquals(Integer.MAX_VALUE, DurationUtils.toMillisInt(Duration.ofMillis(NumberUtils.LONG_INT_MAX_VALUE + 2)));
assertEquals(Integer.MIN_VALUE, DurationUtils.toMillisInt(Duration.ofMillis(NumberUtils.LONG_INT_MIN_VALUE - 1)));
assertEquals(Integer.MIN_VALUE, DurationUtils.toMillisInt(Duration.ofMillis(NumberUtils.LONG_INT_MIN_VALUE - 2)));
assertEquals(Integer.MIN_VALUE, DurationUtils.toMillisInt(Duration.ofNanos(Long.MIN_VALUE)));
assertEquals(Integer.MAX_VALUE, DurationUtils.toMillisInt(Duration.ofNanos(Long.MAX_VALUE)));
assertEquals(Duration.ZERO, DurationUtils.zeroIfNull(null));
assertEquals(Duration.ofDays(1), DurationUtils.zeroIfNull(Duration.ofDays(1)));
assertNotEquals(summer.getTime(), standard.getTime());
assertNull(ArrayUtils.removeAllOccurences(a, true));
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.removeAllOccurences(a, true));
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.removeAllOccurences(a, true));
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.removeAllOccurences(a, true));
assertArrayEquals(new boolean[]{false, false}, ArrayUtils.removeAllOccurences(a, true));
assertArrayEquals(new boolean[]{true, true, true}, ArrayUtils.removeAllOccurences(a, false));
assertNull(ArrayUtils.removeAllOccurrences(a, true));
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.removeAllOccurrences(a, true));
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.removeAllOccurrences(a, true));
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.removeAllOccurrences(a, true));
assertArrayEquals(new boolean[]{false, false}, ArrayUtils.removeAllOccurrences(a, true));
assertArrayEquals(new boolean[]{true, true, true}, ArrayUtils.removeAllOccurrences(a, false));
assertNull(ArrayUtils.removeAllOccurences(a, (byte) 2));
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.removeAllOccurences(a, (byte) 2));
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.removeAllOccurences(a, (byte) 2));
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.removeAllOccurences(a, (byte) 2));
assertArrayEquals(new byte[]{1, 3}, ArrayUtils.removeAllOccurences(a, (byte) 2));
assertArrayEquals(new byte[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurences(a, (byte) 4));
assertNull(ArrayUtils.removeAllOccurrences(a, (byte) 2));
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.removeAllOccurrences(a, (byte) 2));
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.removeAllOccurrences(a, (byte) 2));
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.removeAllOccurrences(a, (byte) 2));
assertArrayEquals(new byte[]{1, 3}, ArrayUtils.removeAllOccurrences(a, (byte) 2));
assertArrayEquals(new byte[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurrences(a, (byte) 4));
assertNull(ArrayUtils.removeAllOccurences(a, '2'));
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.removeAllOccurences(a, '2'));
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.removeAllOccurences(a, '2'));
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.removeAllOccurences(a, '2'));
assertArrayEquals(new char[]{'1', '3'}, ArrayUtils.removeAllOccurences(a, '2'));
assertArrayEquals(new char[]{'1', '2', '2', '3', '2'}, ArrayUtils.removeAllOccurences(a, '4'));
assertNull(ArrayUtils.removeAllOccurrences(a, '2'));
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.removeAllOccurrences(a, '2'));
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.removeAllOccurrences(a, '2'));
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.removeAllOccurrences(a, '2'));
assertArrayEquals(new char[]{'1', '3'}, ArrayUtils.removeAllOccurrences(a, '2'));
assertArrayEquals(new char[]{'1', '2', '2', '3', '2'}, ArrayUtils.removeAllOccurrences(a, '4'));
assertNull(ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(new double[]{1, 3}, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(new double[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurences(a, 4));
assertNull(ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(new double[]{1, 3}, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(new double[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurrences(a, 4));
assertNull(ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(new float[]{1, 3}, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(new float[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurences(a, 4));
assertNull(ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(new float[]{1, 3}, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(new float[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurrences(a, 4));
assertNull(ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(new int[]{1, 3}, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(new int[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurences(a, 4));
assertNull(ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(new int[]{1, 3}, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(new int[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurrences(a, 4));
assertNull(ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(new long[]{1, 3}, ArrayUtils.removeAllOccurences(a, 2));
assertArrayEquals(new long[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurences(a, 4));
assertNull(ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(new long[]{1, 3}, ArrayUtils.removeAllOccurrences(a, 2));
assertArrayEquals(new long[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurrences(a, 4));
assertNull(ArrayUtils.removeAllOccurences(a, "2"));
assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.removeAllOccurences(a, "2"));
assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.removeAllOccurences(a, "2"));
assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.removeAllOccurences(a, "2"));
assertArrayEquals(new String[]{"1", "3"}, ArrayUtils.removeAllOccurences(a, "2"));
assertArrayEquals(new String[]{"1", "2", "2", "3", "2"}, ArrayUtils.removeAllOccurences(a, "4"));
assertNull(ArrayUtils.removeAllOccurrences(a, "2"));
assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.removeAllOccurrences(a, "2"));
assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.removeAllOccurrences(a, "2"));
assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.removeAllOccurrences(a, "2"));
assertArrayEquals(new String[]{"1", "3"}, ArrayUtils.removeAllOccurrences(a, "2"));
assertArrayEquals(new String[]{"1", "2", "2", "3", "2"}, ArrayUtils.removeAllOccurrences(a, "4"));
assertNull(ArrayUtils.removeAllOccurences(a, (short) 2));
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.removeAllOccurences(a, (short) 2));
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.removeAllOccurences(a, (short) 2));
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.removeAllOccurences(a, (short) 2));
assertArrayEquals(new short[]{1, 3}, ArrayUtils.removeAllOccurences(a, (short) 2));
assertArrayEquals(new short[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurences(a, (short) 4));
assertNull(ArrayUtils.removeAllOccurrences(a, (short) 2));
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.removeAllOccurrences(a, (short) 2));
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.removeAllOccurrences(a, (short) 2));
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.removeAllOccurrences(a, (short) 2));
assertArrayEquals(new short[]{1, 3}, ArrayUtils.removeAllOccurrences(a, (short) 2));
assertArrayEquals(new short[]{1, 2, 2, 3, 2}, ArrayUtils.removeAllOccurrences(a, (short) 4));
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{true, true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new boolean[] {true, false}, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new boolean[] {true, false}, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((boolean[]) null, 0));
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{1}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{1, 1}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new byte[] {1, 2}, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new byte[] {1, 2}, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((byte[]) null, 0));
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'b'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'a'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'a', 'c'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new char[] {'a', 'b'}, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new char[] {'a', 'b'}, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((char[]) null, 0));
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{1}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{1, 1}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new double[] {1, 2}, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new double[] {1, 2}, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((double[]) null, 0));
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false, true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2, 1}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'b'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'b', 'a'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2, 1}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2, 1}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2, 1}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2, 1}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[]{"b"}, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[]{"b", "a"}, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2, 1}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{1}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{1, 1}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new float[] {1, 2}, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new float[] {1, 2}, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((float[]) null, 0));
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{1}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{1, 1}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new int[] {1, 2}, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new int[] {1, 2}, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((int[]) null, 0));
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{1}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{1, 1}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new long[] {1, 2}, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new long[] {1, 2}, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((long[]) null, 0));
assertEquals(3, inarray.length);
assertEquals(2, outarray.length);
assertEquals(Number.class, outarray.getClass().getComponentType());
assertEquals(1, outarray.length);
assertEquals(Number.class, outarray.getClass().getComponentType());
assertEquals(0, outarray.length);
assertEquals(Number.class, outarray.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[]{"b"}, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[]{"a"}, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[]{"a", "c"}, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new Object[] {"a", "b"}, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new Object[] {"a", "b"}, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((Object[]) null, 0));
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{1}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{1, 1}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new short[] {1, 2}, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new short[] {1, 2}, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((short[]) null, 0));
assertArrayEquals(sort(expected), BooleanUtils.booleanValues());
assertFalse(BooleanUtils.isFalse(Boolean.TRUE));
assertTrue(BooleanUtils.isFalse(Boolean.FALSE));
assertFalse(BooleanUtils.isFalse(null));
assertTrue(BooleanUtils.isNotFalse(Boolean.TRUE));
assertFalse(BooleanUtils.isNotFalse(Boolean.FALSE));
assertTrue(BooleanUtils.isNotFalse(null));
assertFalse(BooleanUtils.isNotTrue(Boolean.TRUE));
assertTrue(BooleanUtils.isNotTrue(Boolean.FALSE));
assertTrue(BooleanUtils.isNotTrue(null));
assertTrue(BooleanUtils.isTrue(Boolean.TRUE));
assertFalse(BooleanUtils.isTrue(Boolean.FALSE));
assertFalse(BooleanUtils.isTrue(null));
assertSame(null, BooleanUtils.negate(null));
assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE));
assertSame(Boolean.FALSE, BooleanUtils.negate(Boolean.TRUE));
assertArrayEquals(new boolean[] {false, true}, BooleanUtils.primitiveValues());
assertTrue(BooleanUtils.toBoolean(Boolean.TRUE));
assertFalse(BooleanUtils.toBoolean(Boolean.FALSE));
assertFalse(BooleanUtils.toBoolean((Boolean) null));
assertTrue(BooleanUtils.toBoolean(1));
assertTrue(BooleanUtils.toBoolean(-1));
assertFalse(BooleanUtils.toBoolean(0));
assertTrue(BooleanUtils.toBoolean(6, 6, 7));
assertFalse(BooleanUtils.toBoolean(7, 6, 7));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.toBoolean(8, 6, 7));
assertTrue(BooleanUtils.toBoolean(null, null, seven));
assertFalse(BooleanUtils.toBoolean(null, six, null));
assertTrue(BooleanUtils.toBoolean(Integer.valueOf(6), six, seven));
assertFalse(BooleanUtils.toBoolean(Integer.valueOf(7), six, seven));
assertThrows(IllegalArgumentException.class,() -> BooleanUtils.toBoolean(Integer.valueOf(8), Integer.valueOf(6), Integer.valueOf(7)));
assertThrows(IllegalArgumentException.class,() -> BooleanUtils.toBoolean(null, Integer.valueOf(6), Integer.valueOf(7)));
assertFalse(BooleanUtils.toBoolean((String) null));
assertFalse(BooleanUtils.toBoolean(""));
assertFalse(BooleanUtils.toBoolean("off"));
assertFalse(BooleanUtils.toBoolean("oof"));
assertFalse(BooleanUtils.toBoolean("yep"));
assertFalse(BooleanUtils.toBoolean("trux"));
assertFalse(BooleanUtils.toBoolean("false"));
assertFalse(BooleanUtils.toBoolean("a"));
assertTrue(BooleanUtils.toBoolean("true")); // interned handled differently
assertTrue(BooleanUtils.toBoolean(new StringBuilder("tr").append("ue").toString()));
assertTrue(BooleanUtils.toBoolean("truE"));
assertTrue(BooleanUtils.toBoolean("trUe"));
assertTrue(BooleanUtils.toBoolean("trUE"));
assertTrue(BooleanUtils.toBoolean("tRue"));
assertTrue(BooleanUtils.toBoolean("tRuE"));
assertTrue(BooleanUtils.toBoolean("tRUe"));
assertTrue(BooleanUtils.toBoolean("tRUE"));
assertTrue(BooleanUtils.toBoolean("TRUE"));
assertTrue(BooleanUtils.toBoolean("TRUe"));
assertTrue(BooleanUtils.toBoolean("TRuE"));
assertTrue(BooleanUtils.toBoolean("TRue"));
assertTrue(BooleanUtils.toBoolean("TrUE"));
assertTrue(BooleanUtils.toBoolean("TrUe"));
assertTrue(BooleanUtils.toBoolean("TruE"));
assertTrue(BooleanUtils.toBoolean("True"));
assertTrue(BooleanUtils.toBoolean("on"));
assertTrue(BooleanUtils.toBoolean("oN"));
assertTrue(BooleanUtils.toBoolean("On"));
assertTrue(BooleanUtils.toBoolean("ON"));
assertTrue(BooleanUtils.toBoolean("yes"));
assertTrue(BooleanUtils.toBoolean("yeS"));
assertTrue(BooleanUtils.toBoolean("yEs"));
assertTrue(BooleanUtils.toBoolean("yES"));
assertTrue(BooleanUtils.toBoolean("Yes"));
assertTrue(BooleanUtils.toBoolean("YeS"));
assertTrue(BooleanUtils.toBoolean("YEs"));
assertTrue(BooleanUtils.toBoolean("YES"));
assertTrue(BooleanUtils.toBoolean("1"));
assertFalse(BooleanUtils.toBoolean("yes?"));
assertFalse(BooleanUtils.toBoolean("0"));
assertFalse(BooleanUtils.toBoolean("tru"));
assertFalse(BooleanUtils.toBoolean("no"));
assertFalse(BooleanUtils.toBoolean("off"));
assertFalse(BooleanUtils.toBoolean("yoo"));
assertTrue(BooleanUtils.toBoolean(null, null, "N"));
assertFalse(BooleanUtils.toBoolean(null, "Y", null));
assertTrue(BooleanUtils.toBoolean("Y", "Y", "N"));
assertTrue(BooleanUtils.toBoolean("Y", "Y", "N"));
assertFalse(BooleanUtils.toBoolean("N", "Y", "N"));
assertFalse(BooleanUtils.toBoolean("N", "Y", "N"));
assertTrue(BooleanUtils.toBoolean((String) null, null, null));
assertTrue(BooleanUtils.toBoolean("Y", "Y", "Y"));
assertTrue(BooleanUtils.toBoolean("Y", "Y", "Y"));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.toBoolean("X", "Y", "N"));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.toBoolean(null, "Y", "N"));
assertTrue(BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, true));
assertTrue(BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false));
assertFalse(BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true));
assertFalse(BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, false));
assertTrue(BooleanUtils.toBooleanDefaultIfNull(null, true));
assertFalse(BooleanUtils.toBooleanDefaultIfNull(null, false));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(1));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(-1));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(0));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8));
assertNull(BooleanUtils.toBooleanObject(8, 6, 7, 8));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.toBooleanObject(9, 6, 7, 8));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(1)));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(-1)));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(0)));
assertNull(BooleanUtils.toBooleanObject((Integer) null));
assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject(null, null, seven, eight));
assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject(null, six, null, eight));
assertSame(null, BooleanUtils.toBooleanObject(null, six, seven, null));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(6), six, seven, eight));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(7), six, seven, eight));
assertNull(BooleanUtils.toBooleanObject(Integer.valueOf(8), six, seven, eight));
assertThrows(IllegalArgumentException.class,() -> BooleanUtils.toBooleanObject(Integer.valueOf(9), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8)));
assertThrows(IllegalArgumentException.class,() -> BooleanUtils.toBooleanObject(null, Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8)));
assertNull(BooleanUtils.toBooleanObject((String) null));
assertNull(BooleanUtils.toBooleanObject(""));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false"));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no"));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off"));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE"));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO"));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF"));
assertNull(BooleanUtils.toBooleanObject("oof"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("y")); // yes
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("t")); // true
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("T"));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("1"));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("f")); // false
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("F"));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("n")); // No
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N"));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("0"));
assertNull(BooleanUtils.toBooleanObject("z"));
assertNull(BooleanUtils.toBooleanObject("ab"));
assertNull(BooleanUtils.toBooleanObject("yoo"));
assertNull(BooleanUtils.toBooleanObject("true "));
assertNull(BooleanUtils.toBooleanObject("ono"));
assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject(null, null, "N", "U"));
assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject(null, "Y", null, "U"));
assertSame(null, BooleanUtils.toBooleanObject(null, "Y", "N", null));
assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y", "Y", "N", "U"));
assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N", "Y", "N", "U"));
assertNull(BooleanUtils.toBooleanObject("U", "Y", "N", "U"));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.toBooleanObject("X", "Y", "N", "U"));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.toBooleanObject(null, "Y", "N", "U"));
assertEquals(1, BooleanUtils.toInteger(true));
assertEquals(0, BooleanUtils.toInteger(false));
assertEquals(6, BooleanUtils.toInteger(true, 6, 7));
assertEquals(7, BooleanUtils.toInteger(false, 6, 7));
assertEquals(6, BooleanUtils.toInteger(Boolean.TRUE, 6, 7, 8));
assertEquals(7, BooleanUtils.toInteger(Boolean.FALSE, 6, 7, 8));
assertEquals(8, BooleanUtils.toInteger(null, 6, 7, 8));
assertEquals(Integer.valueOf(1), BooleanUtils.toIntegerObject(true));
assertEquals(Integer.valueOf(0), BooleanUtils.toIntegerObject(false));
assertEquals(Integer.valueOf(1), BooleanUtils.toIntegerObject(Boolean.TRUE));
assertEquals(Integer.valueOf(0), BooleanUtils.toIntegerObject(Boolean.FALSE));
assertNull(BooleanUtils.toIntegerObject(null));
assertEquals(six, BooleanUtils.toIntegerObject(true, six, seven));
assertEquals(seven, BooleanUtils.toIntegerObject(false, six, seven));
assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight));
assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight));
assertEquals(eight, BooleanUtils.toIntegerObject(null, six, seven, eight));
assertNull(BooleanUtils.toIntegerObject(null, six, seven, null));
assertEquals("Y", BooleanUtils.toString(true, "Y", "N"));
assertEquals("N", BooleanUtils.toString(false, "Y", "N"));
assertEquals("U", BooleanUtils.toString(null, "Y", "N", "U"));
assertEquals("Y", BooleanUtils.toString(Boolean.TRUE, "Y", "N", "U"));
assertEquals("N", BooleanUtils.toString(Boolean.FALSE, "Y", "N", "U"));
assertEquals("on", BooleanUtils.toStringOnOff(true));
assertEquals("off", BooleanUtils.toStringOnOff(false));
assertNull(BooleanUtils.toStringOnOff(null));
assertEquals("on", BooleanUtils.toStringOnOff(Boolean.TRUE));
assertEquals("off", BooleanUtils.toStringOnOff(Boolean.FALSE));
assertEquals("true", BooleanUtils.toStringTrueFalse(true));
assertEquals("false", BooleanUtils.toStringTrueFalse(false));
assertNull(BooleanUtils.toStringTrueFalse(null));
assertEquals("true", BooleanUtils.toStringTrueFalse(Boolean.TRUE));
assertEquals("false", BooleanUtils.toStringTrueFalse(Boolean.FALSE));
assertEquals("yes", BooleanUtils.toStringYesNo(true));
assertEquals("no", BooleanUtils.toStringYesNo(false));
assertNull(BooleanUtils.toStringYesNo(null));
assertEquals("yes", BooleanUtils.toStringYesNo(Boolean.TRUE));
assertEquals("no", BooleanUtils.toStringYesNo(Boolean.FALSE));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.and(new Boolean[] {}));
assertEquals(Boolean.FALSE, BooleanUtils.and(new Boolean[] {null}));
assertThrows(NullPointerException.class, () -> BooleanUtils.and((Boolean[]) null));
assertTrue(BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue(),"False result for (true, true)");
assertFalse(BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue(),"True result for (false, false)");
assertFalse(BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue(),"True result for (true, false)");
assertFalse(BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue(),"True result for (false, true)");
assertFalse(BooleanUtils.and(new Boolean[] {Boolean.FALSE,Boolean.FALSE,Boolean.TRUE }).booleanValue(),"True result for (false, false, true)");
assertFalse(BooleanUtils.and(new Boolean[] {Boolean.FALSE,Boolean.TRUE,Boolean.FALSE }).booleanValue(),"True result for (false, true, false)");
assertFalse(BooleanUtils.and(new Boolean[] {Boolean.TRUE,Boolean.FALSE,Boolean.FALSE }).booleanValue(),"True result for (true, false, false)");
assertTrue(BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue(),"False result for (true, true, true)");
assertFalse(BooleanUtils.and(new Boolean[] {Boolean.FALSE,Boolean.FALSE,Boolean.FALSE }).booleanValue(),"True result for (false, false)");
assertFalse(BooleanUtils.and(new Boolean[] {Boolean.TRUE,Boolean.TRUE,Boolean.FALSE }).booleanValue(),"True result for (true, true, false)");
assertFalse(BooleanUtils.and(new Boolean[] {Boolean.TRUE,Boolean.FALSE,Boolean.TRUE }).booleanValue(),"True result for (true, false, true)");
assertFalse(BooleanUtils.and(new Boolean[] {Boolean.FALSE,Boolean.TRUE,Boolean.TRUE }).booleanValue(),"True result for (false, true, true)");
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.and(new boolean[] {}));
assertThrows(NullPointerException.class, () -> BooleanUtils.and((boolean[]) null));
assertTrue(BooleanUtils.and(new boolean[] { true, true }),"False result for (true, true)");
assertFalse(BooleanUtils.and(new boolean[] { false, false }),"True result for (false, false)");
assertFalse(BooleanUtils.and(new boolean[] { true, false }),"True result for (true, false)");
assertFalse(BooleanUtils.and(new boolean[] { false, true }),"True result for (false, true)");
assertFalse(BooleanUtils.and(new boolean[] { false, false, true }),"True result for (false, false, true)");
assertFalse(BooleanUtils.and(new boolean[] { false, true, false }),"True result for (false, true, false)");
assertFalse(BooleanUtils.and(new boolean[] { true, false, false }),"True result for (true, false, false)");
assertTrue(BooleanUtils.and(new boolean[] { true, true, true }),"False result for (true, true, true)");
assertFalse(BooleanUtils.and(new boolean[] { false, false, false }),"True result for (false, false)");
assertFalse(BooleanUtils.and(new boolean[] { true, true, false }),"True result for (true, true, false)");
assertFalse(BooleanUtils.and(new boolean[] { true, false, true }),"True result for (true, false, true)");
assertFalse(BooleanUtils.and(new boolean[] { false, true, true }),"True result for (false, true, true)");
assertTrue(BooleanUtils.compare(true, false) > 0);
assertEquals(0, BooleanUtils.compare(true, true));
assertEquals(0, BooleanUtils.compare(false, false));
assertTrue(BooleanUtils.compare(false, true) < 0);
assertNotNull(new BooleanUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(BooleanUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(BooleanUtils.class.getModifiers()));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.oneHot(new Boolean[] {}));
assertEquals(Boolean.FALSE, BooleanUtils.oneHot(new Boolean[] {null}));
assertThrows(NullPointerException.class, () -> BooleanUtils.oneHot((Boolean[]) null));
assertTrue(BooleanUtils.oneHot(new Boolean[]{Boolean.TRUE}), "true");
assertFalse(BooleanUtils.oneHot(new Boolean[]{Boolean.FALSE}), "false");
assertFalse(BooleanUtils.oneHot(new Boolean[]{null}), "false");
assertFalse(BooleanUtils.oneHot(new Boolean[]{true, true}), "both true");
assertFalse(BooleanUtils.oneHot(new Boolean[]{false, false}), "both false");
assertTrue(BooleanUtils.oneHot(new Boolean[]{true, false}), "first true");
assertTrue(BooleanUtils.oneHot(new Boolean[]{false, true}), "last true");
assertFalse(BooleanUtils.oneHot(null, null), "both null");
assertTrue(BooleanUtils.oneHot(true, null), "first true");
assertTrue(BooleanUtils.oneHot(null, true), "last true");
assertFalse(BooleanUtils.oneHot(new Boolean[]{false, false, false}), "all false");
assertTrue(BooleanUtils.oneHot(new Boolean[]{true, false, false}), "first true");
assertTrue(BooleanUtils.oneHot(new Boolean[]{false, true, false}), "middle true");
assertTrue(BooleanUtils.oneHot(new Boolean[]{false, false, true}), "last true");
assertFalse(BooleanUtils.oneHot(new Boolean[]{false, true, true}), "first false");
assertFalse(BooleanUtils.oneHot(new Boolean[]{true, false, true}), "middle false");
assertFalse(BooleanUtils.oneHot(new Boolean[]{true, true, false}), "last false");
assertFalse(BooleanUtils.oneHot(new Boolean[]{true, true, true}), "all true");
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.oneHot(new boolean[] {}));
assertThrows(NullPointerException.class, () -> BooleanUtils.oneHot((boolean[]) null));
assertTrue(BooleanUtils.oneHot(new boolean[]{true}), "true");
assertFalse(BooleanUtils.oneHot(new boolean[]{false}), "false");
assertFalse(BooleanUtils.oneHot(new boolean[]{true, true}), "both true");
assertFalse(BooleanUtils.oneHot(new boolean[]{false, false}), "both false");
assertTrue(BooleanUtils.oneHot(new boolean[]{true, false}), "first true");
assertTrue(BooleanUtils.oneHot(new boolean[]{false, true}), "last true");
assertFalse(BooleanUtils.oneHot(new boolean[]{false, false, false}), "all false");
assertTrue(BooleanUtils.oneHot(new boolean[]{true, false, false}), "first true");
assertTrue(BooleanUtils.oneHot(new boolean[]{false, true, false}), "middle true");
assertTrue(BooleanUtils.oneHot(new boolean[]{false, false, true}), "last true");
assertFalse(BooleanUtils.oneHot(new boolean[]{false, true, true}), "first false");
assertFalse(BooleanUtils.oneHot(new boolean[]{true, false, true}), "middle false");
assertFalse(BooleanUtils.oneHot(new boolean[]{true, true, false}), "last false");
assertFalse(BooleanUtils.oneHot(new boolean[]{true, true, true}), "all true");
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.or(new Boolean[] {}));
assertEquals(Boolean.FALSE, BooleanUtils.or(new Boolean[] {null}));
assertThrows(NullPointerException.class, () -> BooleanUtils.or((Boolean[]) null));
assertTrue(BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue(),"False result for (true, true)");
assertFalse(BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue(),"True result for (false, false)");
assertTrue(BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue(),"False result for (true, false)");
assertTrue(BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue(),"False result for (false, true)");
assertTrue(BooleanUtils.or(new Boolean[] {Boolean.FALSE,Boolean.FALSE,Boolean.TRUE }).booleanValue(),"False result for (false, false, true)");
assertTrue(BooleanUtils.or(new Boolean[] {Boolean.FALSE,Boolean.TRUE,Boolean.FALSE }).booleanValue(),"False result for (false, true, false)");
assertTrue(BooleanUtils.or(new Boolean[] {Boolean.TRUE,Boolean.FALSE,Boolean.FALSE }).booleanValue(),"False result for (true, false, false)");
assertTrue(BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue(),"False result for (true, true, true)");
assertFalse(BooleanUtils.or(new Boolean[] {Boolean.FALSE,Boolean.FALSE,Boolean.FALSE }).booleanValue(),"True result for (false, false)");
assertTrue(BooleanUtils.or(new Boolean[] {Boolean.TRUE,Boolean.TRUE,Boolean.FALSE }).booleanValue(),"False result for (true, true, false)");
assertTrue(BooleanUtils.or(new Boolean[] {Boolean.TRUE,Boolean.FALSE,Boolean.TRUE }).booleanValue(),"False result for (true, false, true)");
assertTrue(BooleanUtils.or(new Boolean[] {Boolean.FALSE,Boolean.TRUE,Boolean.TRUE }).booleanValue(),"False result for (false, true, true)");
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.or(new boolean[] {}));
assertThrows(NullPointerException.class, () -> BooleanUtils.or((boolean[]) null));
assertTrue(BooleanUtils.or(new boolean[] { true, true }),"False result for (true, true)");
assertFalse(BooleanUtils.or(new boolean[] { false, false }),"True result for (false, false)");
assertTrue(BooleanUtils.or(new boolean[] { true, false }),"False result for (true, false)");
assertTrue(BooleanUtils.or(new boolean[] { false, true }),"False result for (false, true)");
assertTrue(BooleanUtils.or(new boolean[] { false, false, true }),"False result for (false, false, true)");
assertTrue(BooleanUtils.or(new boolean[] { false, true, false }),"False result for (false, true, false)");
assertTrue(BooleanUtils.or(new boolean[] { true, false, false }),"False result for (true, false, false)");
assertTrue(BooleanUtils.or(new boolean[] { true, true, true }),"False result for (true, true, true)");
assertFalse(BooleanUtils.or(new boolean[] { false, false, false }),"True result for (false, false)");
assertTrue(BooleanUtils.or(new boolean[] { true, true, false }),"False result for (true, true, false)");
assertTrue(BooleanUtils.or(new boolean[] { true, false, true }),"False result for (true, false, true)");
assertTrue(BooleanUtils.or(new boolean[] { false, true, true }),"False result for (false, true, true)");
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.xor(new Boolean[] {}));
assertEquals(Boolean.FALSE, BooleanUtils.xor(new Boolean[] {null}));
assertThrows(NullPointerException.class, () -> BooleanUtils.xor((Boolean[]) null));
assertEquals(true,BooleanUtils.xor(new Boolean[] { Boolean.TRUE }).booleanValue(),"true");
assertEquals(false,BooleanUtils.xor(new Boolean[] { Boolean.FALSE }).booleanValue(),"false");
assertEquals(false ^ false,BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue(),"false ^ false");
assertEquals(false ^ true,BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue(),"false ^ true");
assertEquals(true ^ false,BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue(),"true ^ false");
assertEquals(true ^ true,BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue(),"true ^ true");
assertEquals(false ^ false ^ false,BooleanUtils.xor(new Boolean[] {Boolean.FALSE,Boolean.FALSE,Boolean.FALSE }).booleanValue(),"false ^ false ^ false");
assertEquals(false ^ false ^ true,BooleanUtils.xor(new Boolean[] {Boolean.FALSE,Boolean.FALSE,Boolean.TRUE }).booleanValue(),"false ^ false ^ true");
assertEquals(false ^ true ^ false,BooleanUtils.xor(new Boolean[] {Boolean.FALSE,Boolean.TRUE,Boolean.FALSE }).booleanValue(),"false ^ true ^ false");
assertEquals(true ^ false ^ false,BooleanUtils.xor(new Boolean[] {Boolean.TRUE,Boolean.FALSE,Boolean.FALSE }).booleanValue(),"true ^ false ^ false");
assertEquals(true ^ false ^ true,BooleanUtils.xor(new Boolean[] {Boolean.TRUE,Boolean.FALSE,Boolean.TRUE }).booleanValue(),"true ^ false ^ true");
assertEquals(true ^ true ^ false,BooleanUtils.xor(new Boolean[] {Boolean.TRUE,Boolean.TRUE,Boolean.FALSE }).booleanValue(),"true ^ true ^ false");
assertEquals(false ^ true ^ true,BooleanUtils.xor(new Boolean[] {Boolean.FALSE,Boolean.TRUE,Boolean.TRUE }).booleanValue(),"false ^ true ^ true");
assertEquals(true ^ true ^ true,BooleanUtils.xor(new Boolean[] {Boolean.TRUE,Boolean.TRUE,Boolean.TRUE }).booleanValue(),"true ^ true ^ true");
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.xor(new boolean[] {}));
assertThrows(NullPointerException.class, () -> BooleanUtils.xor((boolean[]) null));
assertEquals(true,BooleanUtils.xor(new boolean[] { true }),"true");
assertEquals(false,BooleanUtils.xor(new boolean[] { false }),"false");
assertEquals(true ^ true,BooleanUtils.xor(new boolean[] { true, true }),"true ^ true");
assertEquals(false ^ false,BooleanUtils.xor(new boolean[] { false, false }),"false ^ false");
assertEquals(true ^ false,BooleanUtils.xor(new boolean[] { true, false }),"true ^ false");
assertEquals(false ^ true,BooleanUtils.xor(new boolean[] { false, true }),"false ^ true");
assertEquals(false ^ false ^ false,BooleanUtils.xor(new boolean[] { false, false, false }),"false ^ false ^ false");
assertEquals(false ^ false ^ true,BooleanUtils.xor(new boolean[] { false, false, true }),"false ^ false ^ true");
assertEquals(false ^ true ^ false,BooleanUtils.xor(new boolean[] { false, true, false }),"false ^ true ^ false");
assertEquals(false ^ true ^ true,BooleanUtils.xor(new boolean[] { false, true, true }),"false ^ true ^ true");
assertEquals(true ^ false ^ false,BooleanUtils.xor(new boolean[] { true, false, false }),"true ^ false ^ false");
assertEquals(true ^ false ^ true,BooleanUtils.xor(new boolean[] { true, false, true }),"true ^ false ^ true");
assertEquals(true ^ true ^ false,BooleanUtils.xor(new boolean[] { true, true, false }),"true ^ true ^ false");
assertEquals(true ^ true ^ true,BooleanUtils.xor(new boolean[] { true, true, true }),"true ^ true ^ true");
assertNotNull(new ClassPathUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(ClassPathUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(ClassPathUtils.class.getModifiers()));
assertThrows(NullPointerException.class,() -> ClassPathUtils.toFullyQualifiedName((Class<?>) null, "Test.properties"));
assertThrows(NullPointerException.class, () -> ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class, null));
assertEquals(expected, actual);
assertThrows(NullPointerException.class,() -> ClassPathUtils.toFullyQualifiedName((Package) null, "Test.properties"));
assertThrows(NullPointerException.class,() -> ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class.getPackage(), null));
assertEquals(expected, actual);
assertThrows(NullPointerException.class,() -> ClassPathUtils.toFullyQualifiedPath((Class<?>) null, "Test.properties"));
assertThrows(NullPointerException.class, () -> ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class, null));
assertEquals(expected, actual);
assertThrows(NullPointerException.class,() -> ClassPathUtils.toFullyQualifiedPath((Package) null, "Test.properties"));
assertThrows(NullPointerException.class,() -> ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class.getPackage(), null));
assertEquals(expected, actual);
assertNotNull(new CharSetUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(CharSetUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(CharSetUtils.class.getModifiers()));
assertNull(CharSetUtils.squeeze(null, (String) null));
assertNull(CharSetUtils.squeeze(null, ""));
assertEquals("", CharSetUtils.squeeze("", (String) null));
assertEquals("", CharSetUtils.squeeze("", ""));
assertEquals("", CharSetUtils.squeeze("", "a-e"));
assertEquals("hello", CharSetUtils.squeeze("hello", (String) null));
assertEquals("hello", CharSetUtils.squeeze("hello", ""));
assertEquals("hello", CharSetUtils.squeeze("hello", "a-e"));
assertEquals("helo", CharSetUtils.squeeze("hello", "l-p"));
assertEquals("heloo", CharSetUtils.squeeze("helloo", "l"));
assertEquals("hello", CharSetUtils.squeeze("helloo", "^l"));
assertNull(CharSetUtils.squeeze(null, (String[]) null));
assertNull(CharSetUtils.squeeze(null));
assertNull(CharSetUtils.squeeze(null, null));
assertNull(CharSetUtils.squeeze(null, "el"));
assertEquals("", CharSetUtils.squeeze("", (String[]) null));
assertEquals("", CharSetUtils.squeeze(""));
assertEquals("", CharSetUtils.squeeze("", null));
assertEquals("", CharSetUtils.squeeze("", "a-e"));
assertEquals("hello", CharSetUtils.squeeze("hello", (String[]) null));
assertEquals("hello", CharSetUtils.squeeze("hello"));
assertEquals("hello", CharSetUtils.squeeze("hello", null));
assertEquals("hello", CharSetUtils.squeeze("hello", "a-e"));
assertEquals("helo", CharSetUtils.squeeze("hello", "el"));
assertEquals("hello", CharSetUtils.squeeze("hello", "e"));
assertEquals("fofof", CharSetUtils.squeeze("fooffooff", "of"));
assertEquals("fof", CharSetUtils.squeeze("fooooff", "fo"));
assertFalse(CharSetUtils.containsAny(null, (String) null));
assertFalse(CharSetUtils.containsAny(null, ""));
assertFalse(CharSetUtils.containsAny("", (String) null));
assertFalse(CharSetUtils.containsAny("", ""));
assertFalse(CharSetUtils.containsAny("", "a-e"));
assertFalse(CharSetUtils.containsAny("hello", (String) null));
assertFalse(CharSetUtils.containsAny("hello", ""));
assertTrue(CharSetUtils.containsAny("hello", "a-e"));
assertTrue(CharSetUtils.containsAny("hello", "l-p"));
assertFalse(CharSetUtils.containsAny(null, (String[]) null));
assertFalse(CharSetUtils.containsAny(null));
assertFalse(CharSetUtils.containsAny(null, null));
assertFalse(CharSetUtils.containsAny(null, "a-e"));
assertFalse(CharSetUtils.containsAny("", (String[]) null));
assertFalse(CharSetUtils.containsAny(""));
assertFalse(CharSetUtils.containsAny("", null));
assertFalse(CharSetUtils.containsAny("", "a-e"));
assertFalse(CharSetUtils.containsAny("hello", (String[]) null));
assertFalse(CharSetUtils.containsAny("hello"));
assertFalse(CharSetUtils.containsAny("hello", null));
assertTrue(CharSetUtils.containsAny("hello", "a-e"));
assertTrue(CharSetUtils.containsAny("hello", "el"));
assertFalse(CharSetUtils.containsAny("hello", "x"));
assertTrue(CharSetUtils.containsAny("hello", "e-i"));
assertTrue(CharSetUtils.containsAny("hello", "a-z"));
assertFalse(CharSetUtils.containsAny("hello", ""));
assertEquals(0, CharSetUtils.count(null, (String) null));
assertEquals(0, CharSetUtils.count(null, ""));
assertEquals(0, CharSetUtils.count("", (String) null));
assertEquals(0, CharSetUtils.count("", ""));
assertEquals(0, CharSetUtils.count("", "a-e"));
assertEquals(0, CharSetUtils.count("hello", (String) null));
assertEquals(0, CharSetUtils.count("hello", ""));
assertEquals(1, CharSetUtils.count("hello", "a-e"));
assertEquals(3, CharSetUtils.count("hello", "l-p"));
assertEquals(0, CharSetUtils.count(null, (String[]) null));
assertEquals(0, CharSetUtils.count(null));
assertEquals(0, CharSetUtils.count(null, null));
assertEquals(0, CharSetUtils.count(null, "a-e"));
assertEquals(0, CharSetUtils.count("", (String[]) null));
assertEquals(0, CharSetUtils.count(""));
assertEquals(0, CharSetUtils.count("", null));
assertEquals(0, CharSetUtils.count("", "a-e"));
assertEquals(0, CharSetUtils.count("hello", (String[]) null));
assertEquals(0, CharSetUtils.count("hello"));
assertEquals(0, CharSetUtils.count("hello", null));
assertEquals(1, CharSetUtils.count("hello", "a-e"));
assertEquals(3, CharSetUtils.count("hello", "el"));
assertEquals(0, CharSetUtils.count("hello", "x"));
assertEquals(2, CharSetUtils.count("hello", "e-i"));
assertEquals(5, CharSetUtils.count("hello", "a-z"));
assertEquals(0, CharSetUtils.count("hello", ""));
assertNull(CharSetUtils.keep(null, (String) null));
assertNull(CharSetUtils.keep(null, ""));
assertEquals("", CharSetUtils.keep("", (String) null));
assertEquals("", CharSetUtils.keep("", ""));
assertEquals("", CharSetUtils.keep("", "a-e"));
assertEquals("", CharSetUtils.keep("hello", (String) null));
assertEquals("", CharSetUtils.keep("hello", ""));
assertEquals("", CharSetUtils.keep("hello", "xyz"));
assertEquals("hello", CharSetUtils.keep("hello", "a-z"));
assertEquals("hello", CharSetUtils.keep("hello", "oleh"));
assertEquals("ell", CharSetUtils.keep("hello", "el"));
assertNull(CharSetUtils.keep(null, (String[]) null));
assertNull(CharSetUtils.keep(null));
assertNull(CharSetUtils.keep(null, null));
assertNull(CharSetUtils.keep(null, "a-e"));
assertEquals("", CharSetUtils.keep("", (String[]) null));
assertEquals("", CharSetUtils.keep(""));
assertEquals("", CharSetUtils.keep("", null));
assertEquals("", CharSetUtils.keep("", "a-e"));
assertEquals("", CharSetUtils.keep("hello", (String[]) null));
assertEquals("", CharSetUtils.keep("hello"));
assertEquals("", CharSetUtils.keep("hello", null));
assertEquals("e", CharSetUtils.keep("hello", "a-e"));
assertEquals("e", CharSetUtils.keep("hello", "a-e"));
assertEquals("ell", CharSetUtils.keep("hello", "el"));
assertEquals("hello", CharSetUtils.keep("hello", "elho"));
assertEquals("hello", CharSetUtils.keep("hello", "a-z"));
assertEquals("----", CharSetUtils.keep("----", "-"));
assertEquals("ll", CharSetUtils.keep("hello", "l"));
assertNull(CharSetUtils.delete(null, (String) null));
assertNull(CharSetUtils.delete(null, ""));
assertEquals("", CharSetUtils.delete("", (String) null));
assertEquals("", CharSetUtils.delete("", ""));
assertEquals("", CharSetUtils.delete("", "a-e"));
assertEquals("hello", CharSetUtils.delete("hello", (String) null));
assertEquals("hello", CharSetUtils.delete("hello", ""));
assertEquals("hllo", CharSetUtils.delete("hello", "a-e"));
assertEquals("he", CharSetUtils.delete("hello", "l-p"));
assertEquals("hello", CharSetUtils.delete("hello", "z"));
assertNull(CharSetUtils.delete(null, (String[]) null));
assertNull(CharSetUtils.delete(null));
assertNull(CharSetUtils.delete(null, null));
assertNull(CharSetUtils.delete(null, "el"));
assertEquals("", CharSetUtils.delete("", (String[]) null));
assertEquals("", CharSetUtils.delete(""));
assertEquals("", CharSetUtils.delete("", null));
assertEquals("", CharSetUtils.delete("", "a-e"));
assertEquals("hello", CharSetUtils.delete("hello", (String[]) null));
assertEquals("hello", CharSetUtils.delete("hello"));
assertEquals("hello", CharSetUtils.delete("hello", null));
assertEquals("hello", CharSetUtils.delete("hello", "xyz"));
assertEquals("ho", CharSetUtils.delete("hello", "el"));
assertEquals("", CharSetUtils.delete("hello", "elho"));
assertEquals("hello", CharSetUtils.delete("hello", ""));
assertEquals("hello", CharSetUtils.delete("hello", ""));
assertEquals("", CharSetUtils.delete("hello", "a-z"));
assertEquals("", CharSetUtils.delete("----", "-"));
assertEquals("heo", CharSetUtils.delete("hello", "l"));
Assertions.assertEquals("ABC", StringUtils.valueOf(new char[] {'A', 'B', 'C' }));
Assertions.assertEquals(StringUtils.EMPTY, StringUtils.valueOf(ArrayUtils.EMPTY_CHAR_ARRAY));
Assertions.assertNull(StringUtils.valueOf(null));
assertNotNull(new RandomStringUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(RandomStringUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(RandomStringUtils.class.getModifiers()));
assertEquals(50, r1.length(), "random(50) length");
assertEquals(50, r2.length(), "random(50) length");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertEquals(50, r1.length(), "randomAscii(50) length");
assertTrue(r1.charAt(i) >= 32 && r1.charAt(i) <= 127, "char between 32 and 127");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertEquals(50, r1.length(), "randomAlphabetic(50)");
assertTrue(Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i)), "r1 contains alphabetic");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertEquals(50, r1.length(), "randomAlphanumeric(50)");
assertTrue(Character.isLetterOrDigit(r1.charAt(i)), "r1 contains alphanumeric");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertEquals(50, r1.length(), "randomGraph(50) length");
assertTrue(r1.charAt(i) >= 33 && r1.charAt(i) <= 126, "char between 33 and 126");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertEquals(50, r1.length(), "randomNumeric(50)");
assertTrue(Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i)), "r1 contains numeric");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertEquals(50, r1.length(), "randomPrint(50) length");
assertTrue(r1.charAt(i) >= 32 && r1.charAt(i) <= 126, "char between 32 and 126");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertEquals(50, r1.length(), "random(50, \"abcdefg\")");
assertTrue(set.indexOf(r1.charAt(i)) > -1, "random char in set");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertEquals(50, r1.length(), "random(50) length");
assertEquals(50, r2.length(), "random(50) length");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertEquals(50, r1.length(), "random(50, \"stuvwxyz\")");
assertTrue(set.indexOf(r1.charAt(i)) > -1, "random char in set");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertEquals(50, r1.length(), "random(50) length");
assertEquals(50, r2.length(), "random(50) length");
assertFalse(r1.equals(r2), "!r1.equals(r2)");
assertEquals(r1, r2, "r1.equals(r2)");
assertEquals("", r1, "random(0).equals(\"\")");
assertEquals("aaa", RandomStringUtils.random(3, 0, 0, false, false, new char[]{'a'}, new Random(seedMillis)));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(3, 5, 5, false, false));
assertTrue(msg.contains("start"), "Message (" + msg + ") must contain 'start'");
assertTrue(msg.contains("end"), "Message (" + msg + ") must contain 'end'");
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(-1));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(-1, true, true));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(-1, DUMMY));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(1, new char[0]));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(-1, ""));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(-1, (String) null));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(-1, 'a', 'z', false, false));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY));
assertThrows(IllegalArgumentException.class,() -> RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(8, 32, 48, false, true));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(8, 32, 65, true, false));
assertTrue(found[i],"alphanumeric character not generated in 1000 attempts: " +testChars[i] + " -- repeated failures indicate a problem ");
assertTrue(found[i],"digit not generated in 1000 attempts: " + testChars[i] +" -- repeated failures indicate a problem ");
assertTrue(found[i],"alphanumeric character not generated in 1000 attempts: " + testChars[i] +" -- repeated failures indicate a problem ");
assertTrue(found[i],"ascii character not generated in 1000 attempts: " + (int) testChars[i] +" -- repeated failures indicate a problem");
assertThat("within range", s.length(), allOf(greaterThanOrEqualTo(expectedMinLengthInclusive), lessThanOrEqualTo(expectedMaxLengthExclusive - 1)));
assertTrue(s.matches(pattern), s);
assertThat("min generated, may fail randomly rarely", minCreatedLength, is(expectedMinLengthInclusive));
assertThat("max generated, may fail randomly rarely", maxCreatedLength, is(expectedMaxLengthExclusive - 1));
assertThat("within range", s.length(), allOf(greaterThanOrEqualTo(expectedMinLengthInclusive), lessThanOrEqualTo(expectedMaxLengthExclusive - 1)));
assertTrue(s.matches(pattern), s);
assertThat("min generated, may fail randomly rarely", minCreatedLength, is(expectedMinLengthInclusive));
assertThat("max generated, may fail randomly rarely", maxCreatedLength, is(expectedMaxLengthExclusive - 1));
assertThat("within range", s.length(), allOf(greaterThanOrEqualTo(expectedMinLengthInclusive), lessThanOrEqualTo(expectedMaxLengthExclusive - 1)));
assertTrue(s.matches(pattern), s);
assertThat("min generated, may fail randomly rarely", minCreatedLength, is(expectedMinLengthInclusive));
assertThat("max generated, may fail randomly rarely", maxCreatedLength, is(expectedMaxLengthExclusive - 1));
assertThat("within range", s.length(), allOf(greaterThanOrEqualTo(expectedMinLengthInclusive), lessThanOrEqualTo(expectedMaxLengthExclusive - 1)));
assertTrue(s.matches(pattern), s);
assertThat("min generated, may fail randomly rarely", minCreatedLength, is(expectedMinLengthInclusive));
assertThat("max generated, may fail randomly rarely", maxCreatedLength, is(expectedMaxLengthExclusive - 1));
assertThat("within range", s.length(), allOf(greaterThanOrEqualTo(expectedMinLengthInclusive), lessThanOrEqualTo(expectedMaxLengthExclusive - 1)));
assertTrue(s.matches(pattern), s);
assertThat("min generated, may fail randomly rarely", minCreatedLength, is(expectedMinLengthInclusive));
assertThat("max generated, may fail randomly rarely", maxCreatedLength, is(expectedMaxLengthExclusive - 1));
assertThat("within range", s.length(), allOf(greaterThanOrEqualTo(expectedMinLengthInclusive), lessThanOrEqualTo(expectedMaxLengthExclusive - 1)));
assertTrue(s.matches(pattern), s);
assertThat("min generated, may fail randomly rarely", minCreatedLength, is(expectedMinLengthInclusive));
assertThat("max generated, may fail randomly rarely", maxCreatedLength, is(expectedMaxLengthExclusive - 1));
assertTrue(chiSquare(expected, counts) < 13.82, "test homogeneity -- will fail about 1 in 1000 times");
assertEquals(o, c,"differs at " + i + "(" + Integer.toHexString(Character.valueOf(o).hashCode()) + "," +Integer.toHexString(Character.valueOf(c).hashCode()) + ")");
assertEquals(orig.length(), copy.length());
assertEquals(orig, copy);
assertTrue(c >= start && c < end, String.format("Character '%d' not in range [%d,%d).", c, start, end));
private void assertEqualsArchNotNull(final Processor.Arch arch, final Processor processor) {assertNotNull(arch);
assertNotNull(processor);
assertEquals(arch, processor.getArch());
private void assertEqualsTypeNotNull(final Processor.Type type, final Processor processor) {assertNotNull(type);
assertNotNull(processor);
assertEquals(type, processor.getType());
private void assertNotEqualsArchNotNull(final Processor.Arch arch, final Processor processor) {assertNotNull(arch);
assertNotNull(processor);
assertNotEquals(arch, processor.getArch());
private void assertNotEqualsTypeNotNull(final Processor.Type type, final Processor processor) {assertNotNull(type);
assertNotNull(processor);
assertNotEquals(type, processor.getType());
assertEqualsTypeNotNull(Processor.Type.X86, processor);
assertTrue(processor.isX86());
assertNotEqualsTypeNotNull(Processor.Type.PPC, processor);
assertFalse(processor.isPPC());
assertEqualsTypeNotNull(Processor.Type.X86, processor);
assertTrue(processor.isX86());
assertEqualsTypeNotNull(Processor.Type.IA_64, processor);
assertTrue(processor.isIA64());
assertEqualsTypeNotNull(Processor.Type.IA_64, processor);
assertTrue(processor.isIA64());
assertNotEqualsTypeNotNull(Processor.Type.X86, processor);
assertFalse(processor.isX86());
assertEqualsTypeNotNull(Processor.Type.PPC, processor);
assertTrue(processor.isPPC());
assertNotEqualsTypeNotNull(Processor.Type.IA_64, processor);
assertFalse(processor.isIA64());
assertEqualsTypeNotNull(Processor.Type.PPC, processor);
assertTrue(processor.isPPC());
assertEqualsTypeNotNull(Processor.Type.AARCH_64, processor);
assertTrue(processor.isAarch64());
assertFalse(arch.getLabel().isEmpty());
assertFalse(type.getLabel().isEmpty());
assertNotNull(ArchUtils.getProcessor(X86));
assertNull(ArchUtils.getProcessor("NA"));
assertNull(ArchUtils.getProcessor(null));
assertTrue(processor.isX86());
assertNotEquals(ObjectUtils.identityToString(processor), processor.toString());
assertEqualsArchNotNull(Processor.Arch.BIT_32, processor);
assertTrue(processor.is32Bit());
assertEqualsArchNotNull(Processor.Arch.BIT_32, processor);
assertTrue(processor.is32Bit());
assertEqualsArchNotNull(Processor.Arch.BIT_32, processor);
assertNotEqualsArchNotNull(Processor.Arch.BIT_32, processor);
assertFalse(processor.is32Bit());
assertNotEqualsArchNotNull(Processor.Arch.BIT_32, processor);
assertFalse(processor.is32Bit());
assertNotEqualsArchNotNull(Processor.Arch.BIT_32, processor);
assertFalse(processor.is32Bit());
assertEqualsArchNotNull(Processor.Arch.BIT_64, processor);
assertTrue(processor.is64Bit());
assertEqualsArchNotNull(Processor.Arch.BIT_64, processor);
assertTrue(processor.is64Bit());
assertEqualsArchNotNull(Processor.Arch.BIT_64, processor);
assertTrue(processor.is64Bit());
assertNotEqualsArchNotNull(Processor.Arch.BIT_64, processor);
assertFalse(processor.is64Bit());
assertNotEqualsArchNotNull(Processor.Arch.BIT_64, processor);
assertFalse(processor.is64Bit());
assertNotEqualsArchNotNull(Processor.Arch.BIT_64, processor);
assertFalse(processor.is64Bit());
assertEqualsArchNotNull(Processor.Arch.BIT_64, processor);
assertNotEqualsArchNotNull(Processor.Arch.BIT_32, processor);
assertTrue(processor.is64Bit());
assertFalse(processor.is32Bit());
assertThrows(IllegalArgumentException.class, () -> new ConcurrentException(new RuntimeException()));
assertThrows(IllegalArgumentException.class, () -> new ConcurrentException("An error", new Error()));
assertThrows(IllegalArgumentException.class, () -> new ConcurrentException(null));
assertThrows(IllegalArgumentException.class, () -> new ConcurrentRuntimeException(new RuntimeException()));
assertThrows(IllegalArgumentException.class, () -> new ConcurrentRuntimeException("An error", new Error()));
assertThrows(IllegalArgumentException.class, () -> new ConcurrentRuntimeException(null));
assertNull(ConcurrentUtils.extractCause(null), "Non null result");
assertNull(ConcurrentUtils.extractCause(new ExecutionException("Test", null)), "Non null result");
final Error err = new AssertionError("Test");
final AssertionError e = assertThrows(AssertionError.class, () -> ConcurrentUtils.extractCause(new ExecutionException(err)));
assertEquals(err, e, "Wrong error");
assertThrows(RuntimeException.class, () -> ConcurrentUtils.extractCause(new ExecutionException(rex)));
assertSame(ex, cex.getCause(), "Wrong cause");
assertNull(ConcurrentUtils.extractCauseUnchecked(null), "Non null result");
assertNull(ConcurrentUtils.extractCauseUnchecked(new ExecutionException("Test", null)), "Non null result");
final Error err = new AssertionError("Test");
final Error e = assertThrows(Error.class, () -> ConcurrentUtils.extractCauseUnchecked(new ExecutionException(err)));
assertEquals(err, e, "Wrong error");
final RuntimeException r = assertThrows(RuntimeException.class, () -> ConcurrentUtils.extractCauseUnchecked(new ExecutionException(rex)));
assertEquals(rex, r, "Wrong exception");
assertSame(ex, cex.getCause(), "Wrong cause");
final Error err = new AssertionError("Test");
final Error e = assertThrows(Error.class, () -> ConcurrentUtils.handleCause(new ExecutionException(err)));
assertEquals(err, e, "Wrong error");
final RuntimeException r = assertThrows(RuntimeException.class, () -> ConcurrentUtils.handleCause(new ExecutionException(rex)));
assertEquals(rex, r, "Wrong exception");
final ConcurrentException cex = assertThrows(ConcurrentException.class, () -> ConcurrentUtils.handleCause(new ExecutionException(ex)));
assertEquals(ex, cex.getCause(), "Wrong cause");
final Error err = new AssertionError("Test");
final Error e = assertThrows(Error.class, () -> ConcurrentUtils.handleCauseUnchecked(new ExecutionException(err)));
assertEquals(err, e, "Wrong error");
final RuntimeException r = assertThrows(RuntimeException.class, () -> ConcurrentUtils.handleCauseUnchecked(new ExecutionException(rex)));
assertEquals(rex, r, "Wrong exception");
final ConcurrentRuntimeException crex = assertThrows(ConcurrentRuntimeException.class,() -> ConcurrentUtils.handleCauseUnchecked(new ExecutionException(ex)));
assertEquals(ex, crex.getCause(), "Wrong cause");
assertNull(ConcurrentUtils.initialize(null), "Got a result");
assertSame(result, ConcurrentUtils.initialize(init), "Wrong result object");
assertNull(ConcurrentUtils.initializeUnchecked(null), "Got a result");
assertNotNull(new ConcurrentRuntimeException(), "Error creating empty ConcurrentRuntimeException");
assertSame(result, ConcurrentUtils.initializeUnchecked(init), "Wrong result object");
final ConcurrentRuntimeException crex = assertThrows(ConcurrentRuntimeException.class, () -> ConcurrentUtils.initializeUnchecked(init));
assertSame(cause, crex.getCause(), "Wrong cause");
assertTrue(test.isDone());
assertSame(value, test.get());
assertSame(value, test.get(1000, TimeUnit.SECONDS));
assertSame(value, test.get(1000, null));
assertFalse(test.isCancelled());
assertFalse(test.cancel(true));
assertFalse(test.cancel(false));
assertTrue(test.isDone());
assertSame(value, test.get());
assertSame(value, test.get(1000, TimeUnit.SECONDS));
assertSame(value, test.get(1000, null));
assertFalse(test.isCancelled());
assertFalse(test.cancel(true));
assertFalse(test.cancel(false));
assertEquals(value, ConcurrentUtils.putIfAbsent(map, key, 0), "Wrong result");
assertEquals(value, map.get(key), "Wrong value in map");
assertEquals(value, ConcurrentUtils.putIfAbsent(map, key, value), "Wrong result");
assertEquals(value, map.get(key), "Wrong value in map");
assertNull(ConcurrentUtils.putIfAbsent(null, "test", 100), "Wrong result");
assertEquals(value, ConcurrentUtils.createIfAbsent(map, key, init), "Wrong result");
assertEquals(value, map.get(key), "Wrong value in map");
assertEquals(value, ConcurrentUtils.createIfAbsent(map, key, init), "Wrong result");
assertEquals(value, map.get(key), "Wrong value in map");
assertNull(ConcurrentUtils.createIfAbsent(null, "test", init), "Wrong result");
assertNull(ConcurrentUtils.createIfAbsent(map, key, null), "Wrong result");
assertEquals(value, map.get(key), "Map was changed");
assertEquals(value, ConcurrentUtils.createIfAbsentUnchecked(map, key, new ConstantInitializer<>(value)), "Wrong result");
assertEquals(value, map.get(key), "Wrong value in map");
final ConcurrentRuntimeException crex = assertThrows(ConcurrentRuntimeException.class,() -> ConcurrentUtils.createIfAbsentUnchecked(new ConcurrentHashMap<>(), "test", init));
assertEquals(ex, crex.getCause(), "Wrong cause");
assertNotNull(createInitializer().get(), "No managed object");
assertEquals(obj, initializer.get(), "Got different object at " + i);
assertEquals(managedObject, t.object, "Wrong object");
assertSame(e, new UncheckedExecutionException(e).getCause());
assertTrue(booleanValue);
runTest(DELAY, true, millis -> assertTrue(millis >= TOTAL_DELAY.toMillis()), booleanValues,LockingVisitors.reentrantReadWriteLockVisitor(booleanValues));
runTest(DELAY, false, millis -> assertTrue(millis < TOTAL_DELAY.toMillis()), booleanValues,LockingVisitors.reentrantReadWriteLockVisitor(booleanValues));
assertNotNull(o1);
assertNotSame(hidden, o1);
assertNotNull(o2);
assertNotSame(hidden, o2);
runTest(DELAY, true, millis -> assertTrue(millis >= TOTAL_DELAY.toMillis()), booleanValues,LockingVisitors.stampedLockVisitor(booleanValues));
runTest(DELAY, false, millis -> assertTrue(millis < TOTAL_DELAY.toMillis()), booleanValues,LockingVisitors.stampedLockVisitor(booleanValues));
assertEquals(1, initializer.initCounter.get(), "Wrong number of invocations");
assertEquals(1, result.intValue(), "Wrong result");
assertEquals(1, init.initializeCalls, "Wrong number of invocations");
assertNotNull(init.getFuture(), "No future");
assertNull(init.getActiveExecutor(), "Got an executor");
assertSame(exec, init.getActiveExecutor(), "Wrong executor");
assertNotNull(init.getActiveExecutor(), "No active executor");
assertTrue(init.start(), "Wrong result of start()");
assertTrue(init.getActiveExecutor().isShutdown(), "Executor not shutdown");
assertEquals(exec, init.getExternalExecutor(), "Wrong executor service");
assertTrue(init.start(), "Wrong result of start()");
assertSame(exec, init.getActiveExecutor(), "Wrong active executor");
assertFalse(exec.isShutdown(), "Executor was shutdown");
assertThrows(IllegalStateException.class, () -> init.setExternalExecutor(exec));
assertTrue(init.start(), "Wrong result for start()");
assertFalse(init.start(), "Could start again");
assertThrows(IllegalStateException.class, init::get);
final Exception ex = assertThrows(Exception.class, init::get);
assertEquals(rex, ex, "Runtime exception not thrown");
final ConcurrentException cex = assertThrows(ConcurrentException.class, init::get);
assertEquals(ex, cex.getCause(), "Exception not thrown");
assertTrue(isInterrupted(), "Thread not interrupted");
assertNotNull(iex.get(), "No interrupted exception");
assertFalse(init.isStarted(), "Already started");
assertTrue(init.isStarted(), "Not started");
assertTrue(init.isStarted(), "Not started");
assertEquals(1, result.intValue(), "Wrong result");
assertEquals(1, cinit.initializeCalls, "Wrong number of executions");
assertEquals(expExec, cinit.currentExecutor, "Wrong executor service");
assertThrows(NullPointerException.class, () -> initializer.addInitializer(null, new ChildBackgroundInitializer()));
assertThrows(NullPointerException.class, () -> initializer.addInitializer(CHILD_INIT, null));
assertTrue(initializer.start(), "Wrong result of start()");
assertTrue(res.initializerNames().isEmpty(), "Got child initializers");
assertTrue(initializer.getActiveExecutor().isShutdown(), "Executor not shutdown");
assertEquals(count, res.initializerNames().size(), "Wrong number of child initializers");
assertTrue(res.initializerNames().contains(key), "Name not found: " + key);
assertEquals(Integer.valueOf(1), res.getResultObject(key), "Wrong result object");
assertFalse(res.isException(key), "Exception flag");
assertNull(res.getException(key), "Got an exception");
assertTrue(initializer.getActiveExecutor().isShutdown(), "Executor not shutdown");
assertEquals(exec, initializer.getActiveExecutor(), "Wrong executor");
assertFalse(exec.isShutdown(), "Executor was shutdown");
assertThrows(IllegalStateException.class,() -> initializer.addInitializer(CHILD_INIT, new ChildBackgroundInitializer()),"Could add initializer after start()!");
assertThrows(NoSuchElementException.class, () -> res.getInitializer("unknown"));
assertThrows(NoSuchElementException.class, () -> res.getResultObject("unknown"));
assertThrows(NoSuchElementException.class, () -> res.getException("unknown"));
assertThrows(NoSuchElementException.class, () -> res.isException("unknown"));
assertThrows(UnsupportedOperationException.class, it::remove);
final Exception ex = assertThrows(Exception.class, initializer::get);
assertEquals(child.ex, ex, "Wrong exception");
assertTrue(res.isException(CHILD_INIT), "No exception flag");
assertNull(res.getResultObject(CHILD_INIT), "Got a results object");
assertEquals(child.ex, cex.getCause(), "Wrong cause");
assertTrue(res.isSuccessful(), "Wrong success flag");
assertFalse(res.isSuccessful(), "Wrong success flag");
assertEquals(count, res2.initializerNames().size(), "Wrong number of initializers");
assertTrue(exec.isShutdown(), "Executor not shutdown");
assertTrue(f.isDone());
assertEquals(data, f.get());
assertThrows(Throwable.class, () -> memoizer.compute(input));
assertThrows(IllegalArgumentException.class, () -> memoizer.compute(input));
assertThrows(Throwable.class, () -> memoizer.compute(input));
assertThrows(IllegalArgumentException.class, () -> memoizer.compute(input));
assertThrows(Throwable.class, () -> memoizer.compute(input));
assertEquals(answer, memoizer.compute(input));
assertEquals(input, memoizer.compute(input), "Should call computable first time");
assertEquals(input, memoizer.compute(input), "Should not call the computable the second time");
assertThrows(Error.class, () -> memoizer.compute(input));
assertThrows(RuntimeException.class, () -> memoizer.compute(input));
assertThrows(CircuitBreakingException.class, () -> {throw new CircuitBreakingException(EXCEPTION_MESSAGE, generateCause());
assertThrows(CircuitBreakingException.class, () -> {throw new CircuitBreakingException(EXCEPTION_MESSAGE);
assertThrows(CircuitBreakingException.class, () -> {throw new CircuitBreakingException(generateCause());
assertThrows(CircuitBreakingException.class, () -> {throw new CircuitBreakingException();
assertNotNull(exception);
assertEquals(EXCEPTION_MESSAGE, exception.getMessage(), WRONG_EXCEPTION_MESSAGE);
assertNotNull(cause);
assertEquals(CAUSE_MESSAGE, cause.getMessage(), WRONG_CAUSE_MESSAGE);
assertNotNull(exception);
assertEquals(EXCEPTION_MESSAGE, exception.getMessage(), WRONG_EXCEPTION_MESSAGE);
assertNull(cause);
assertNotNull(exception);
assertNotNull(exception.getMessage());
assertNotNull(cause);
assertEquals(CAUSE_MESSAGE, cause.getMessage(), WRONG_CAUSE_MESSAGE);
assertThrows(UncheckedExecutionException.class, () -> UncheckedFuture.on(new TestFuture<>(e)).get());
assertThrows(UncheckedInterruptedException.class, () -> UncheckedFuture.on(new TestFuture<>(e)).get());
assertThrows(UncheckedExecutionException.class, () -> UncheckedFuture.on(new TestFuture<>(e)).get(1, TimeUnit.MICROSECONDS));
assertThrows(UncheckedInterruptedException.class, () -> UncheckedFuture.on(new TestFuture<>(e)).get(1, TimeUnit.MICROSECONDS));
assertThrows(UncheckedTimeoutException.class, () -> UncheckedFuture.on(new TestFuture<>(e)).get(1, TimeUnit.MICROSECONDS));
assertEquals(expected, UncheckedFuture.map(input).map(UncheckedFuture::get).collect(Collectors.toList()));
assertEquals(expected, UncheckedFuture.on(input).stream().map(UncheckedFuture::get).collect(Collectors.toList()));
assertEquals("Z", UncheckedFuture.on(new TestFuture<>("Z")).get());
assertEquals(NANO_FACTOR, breaker.getOpeningInterval(), "Wrong opening interval");
assertEquals(2 * NANO_FACTOR / 1000, breaker.getClosingInterval(), "Wrong closing interval");
assertEquals(NANO_FACTOR, breaker.getClosingInterval(), "Wrong closing interval");
assertEquals(NANO_FACTOR, breaker.getClosingInterval(), "Wrong closing interval");
assertEquals(OPENING_THRESHOLD, breaker.getClosingThreshold(), "Wrong closing threshold");
assertFalse(breaker.isOpen(), "Open");
assertTrue(breaker.isClosed(), "Not closed");
assertTrue(deltaNanos < 100_000, String.format("Delta %,d ns to current time too large", deltaNanos));
assertTrue(breaker.at(startTime).incrementAndCheckState(), "In open state");
assertTrue(breaker.isClosed(), "Not closed");
assertTrue(breaker.at(startTime).incrementAndCheckState(), "In open state");
assertTrue(breaker.isClosed(), "Not closed");
assertTrue(open, "Not open");
assertFalse(breaker.isClosed(), "Closed");
assertTrue(open, "Not open");
assertFalse(breaker.isClosed(), "Closed");
assertFalse(breaker.at(startTime).incrementAndCheckState(), "Not open");
assertFalse(breaker.at(startTime + NANO_FACTOR).incrementAndCheckState(), "Closed in new interval");
assertTrue(breaker.isOpen(), "Not open at end");
assertFalse(breaker.at(2000).checkState(), "Already closed");
assertFalse(breaker.at(NANO_FACTOR).checkState(), "Closed at interval end");
assertTrue(breaker.at(NANO_FACTOR + 1).checkState(), "Not closed after interval end");
assertTrue(breaker.isClosed(), "Not closed at end");
assertTrue(breaker.isOpen(), "Not open");
assertFalse(breaker.at(NANO_FACTOR + 100).checkState(), "Already closed");
assertTrue(breaker.isOpen(), "Not open");
assertFalse(breaker.at(time).incrementAndCheckState(), "Already closed");
assertTrue(breaker.at(time).checkState(), "Not closed in time interval");
assertTrue(breaker.isOpen(), "Not open");
assertTrue(breaker.isClosed(), "Not closed");
assertTrue(breaker.at(time + 1000).incrementAndCheckState(), "Open again");
assertEquals(expectedSource, evt.getSource(), "Wrong event source");
assertEquals("open", evt.getPropertyName(), "Wrong property name");
assertNotEquals(newValue, oldValue, "Old and new value are equal");
assertArrayEquals(values,changedValues.toArray(new Boolean[0]));
assertSame(e, new UncheckedTimeoutException(e).getCause());
assertEquals(expected, init.equals(obj), "Wrong result of equals");
assertEquals(expected, obj.equals(init), "Not symmetric");
assertEquals(init.hashCode(), obj.hashCode(), "Different hash codes");
assertEquals(VALUE, init.getObject(), "Wrong object");
assertEquals(VALUE, init.get(), "Wrong object");
assertTrue(pattern.matcher(s).matches(), "Wrong string: " + s);
assertTrue(s.indexOf("object = null") > 0, "Object not found: " + s);
assertThrows(NullPointerException.class, () -> new CallableBackgroundInitializer<>(null));
assertEquals(exec, init.getExternalExecutor(), "Executor not set");
assertThrows(NullPointerException.class, () -> new CallableBackgroundInitializer<Integer>(null, exec));
assertEquals(RESULT, init.initialize(), "Wrong result");
assertEquals(1, call.callCount, "Wrong number of invocations");
assertNull(factory.getNamingPattern(), "Got a naming pattern");
assertNull(factory.getUncaughtExceptionHandler(), "Got an exception handler");
assertNull(factory.getPriority(), "Got a priority");
assertNull(factory.getDaemonFlag(), "Got a daemon flag");
assertNotNull(factory.getWrappedFactory(), "No wrapped factory");
assertThrows(NullPointerException.class, () -> builder.namingPattern(null));
assertThrows(NullPointerException.class, () -> builder.wrappedFactory(null));
assertThrows(NullPointerException.class, () -> builder.uncaughtExceptionHandler(null));
assertNotSame(wrappedFactory, factory.getWrappedFactory(), "Wrapped factory not reset");
assertEquals(String.format(PATTERN, Long.valueOf(i + 1)), t.getName(), "Wrong thread name");
assertEquals(i + 1, factory.getThreadCount(), "Wrong thread count");
assertSame(t, factory.newThread(r), "Wrong thread");
assertEquals(name, t.getName(), "Name was changed");
assertSame(t, factory.newThread(r), "Wrong thread");
assertEquals(flag, t.isDaemon(), "Wrong daemon flag");
assertSame(t1, factory.newThread(r1), "Wrong thread 1");
assertTrue(t1.isDaemon(), "No daemon thread");
assertSame(t2, factory.newThread(r2), "Wrong thread 2");
assertFalse(t2.isDaemon(), "A daemon thread");
assertSame(t, factory.newThread(r), "Wrong thread");
assertEquals(priority, t.getPriority(), "Wrong priority");
assertSame(t, factory.newThread(r), "Wrong thread");
assertEquals(orgPriority, t.getPriority(), "Wrong priority");
assertSame(t, factory.newThread(r), "Wrong thread");
assertEquals(handler, t.getUncaughtExceptionHandler(), "Wrong exception handler");
assertSame(t, factory.newThread(r), "Wrong thread");
assertEquals(handler, t.getUncaughtExceptionHandler(), "Wrong exception handler");
assertEquals(service, semaphore.getExecutorService(), "Wrong service");
assertEquals(PERIOD_MILLIS, semaphore.getPeriod(), "Wrong period");
assertEquals(UNIT, semaphore.getUnit(), "Wrong unit");
assertEquals(0, semaphore.getLastAcquiresPerPeriod(), "Statistic available");
assertEquals(0.0, semaphore.getAverageCallsPerPeriod(), .05, "Average available");
assertFalse(semaphore.isShutdown(), "Already shutdown");
assertEquals(LIMIT, semaphore.getLimit(), "Wrong limit");
assertThrows(IllegalArgumentException.class, () -> new TimedSemaphore(0L, UNIT, LIMIT));
assertFalse(exec.getContinueExistingPeriodicTasksAfterShutdownPolicy(), "Wrong periodic task policy");
assertFalse(exec.getExecuteExistingDelayedTasksAfterShutdownPolicy(), "Wrong delayed task policy");
assertFalse(exec.isShutdown(), "Already shutdown");
assertNotNull(future, "No future returned");
assertFalse(count++ > trials, "endOfPeriod() not called!");
assertTrue(semaphore.isShutdown(), "Not shutdown");
assertTrue(semaphore.getExecutorService().isShutdown(), "Executor not shutdown");
assertTrue(semaphore.isShutdown(), "Not shutdown");
assertTrue(semaphore.isShutdown(), "Not shutdown");
assertEquals(count - 1, semaphore.getAcquireCount(), "Wrong semaphore count");
assertEquals(1, semaphore.getAcquireCount(), "Wrong semaphore count (2)");
assertEquals(count - 1, semaphore.getLastAcquiresPerPeriod(), "Wrong acquire() count");
assertEquals(1, semaphore.getAcquireCount(), "Wrong count");
assertEquals(1, semaphore.getLastAcquiresPerPeriod(), "Wrong acquire count");
assertThrows(IllegalStateException.class, semaphore::acquire);
assertTrue(semaphore.getPeriodEnds() > 0, "End of period not reached");
assertEquals(1.0, semaphore.getAverageCallsPerPeriod(), .005, "Wrong average (1)");
assertEquals(1.5, semaphore.getAverageCallsPerPeriod(), .005, "Wrong average (2)");
assertEquals(LIMIT - i, semaphore.getAvailablePermits(), "Wrong available count at " + i);
assertEquals(LIMIT, semaphore.getAvailablePermits(), "Wrong available count in new period");
assertEquals(LIMIT, permits, "Wrong number of permits granted");
assertThrows(IllegalStateException.class, semaphore::tryAcquire);
assertFalse(circuit.incrementAndCheckState(1L), "Circuit opened before reaching the threshold");
assertTrue(circuit.incrementAndCheckState(2L), "The circuit was supposed to be open after increment above the threshold");
assertTrue(circuit.incrementAndCheckState(0L), "When the threshold is zero, the circuit is supposed to be always open");
assertFalse(circuit.incrementAndCheckState(9L), "Internal counter was not reset back to zero");
assertEquals(Long.valueOf(threshold), Long.valueOf(circuit.getThreshold()), "Wrong value of threshold");
assertThrows(Throwable.class, () -> memoizer.compute(input));
assertThrows(IllegalStateException.class, () -> memoizer.compute(input));
assertThrows(Throwable.class, () -> memoizer.compute(input));
assertThrows(IllegalStateException.class, () -> memoizer.compute(input));
assertThrows(Throwable.class, () -> memoizer.compute(input));
assertEquals(answer, memoizer.compute(input));
assertEquals(input, memoizer.compute(input), "Should call computable first time");
assertEquals(input, memoizer.compute(input), "Should not call the computable the second time");
assertThrows(Error.class, () -> memoizer.compute(input));
assertThrows(RuntimeException.class, () -> memoizer.compute(input));
private void assertArrayEquals(final long[] actual, final long... expected) {Assertions.assertArrayEquals(expected, actual);
assertEquals(0L, EnumUtils.generateBitVector(Traffic.class, EnumSet.noneOf(Traffic.class)));
assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED)));
assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER)));
assertEquals(4L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.GREEN)));
assertEquals(3L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER)));
assertEquals(5L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN)));
assertEquals(6L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN)));
assertEquals(7L,EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)));
assertEquals((1L << 31), EnumUtils.generateBitVector(Enum64.class, EnumSet.of(Enum64.A31)));
assertEquals((1L << 32), EnumUtils.generateBitVector(Enum64.class, EnumSet.of(Enum64.A32)));
assertEquals((1L << 63), EnumUtils.generateBitVector(Enum64.class, EnumSet.of(Enum64.A63)));
assertEquals(Long.MIN_VALUE, EnumUtils.generateBitVector(Enum64.class, EnumSet.of(Enum64.A63)));
assertThrows(IllegalArgumentException.class,() -> EnumUtils.generateBitVector(TooMany.class, EnumSet.of(TooMany.A1)));
assertThrows(IllegalArgumentException.class, () -> EnumUtils.generateBitVector(TooMany.class, TooMany.A1));
assertThrows(IllegalArgumentException.class, () -> EnumUtils.generateBitVector(rawType, rawList));
assertThrows(IllegalArgumentException.class, () -> EnumUtils.generateBitVector(rawType));
assertThrows(NullPointerException.class, () -> EnumUtils.generateBitVector(Traffic.class, (Traffic[]) null));
assertThrows(IllegalArgumentException.class,() -> EnumUtils.generateBitVector(Traffic.class, Traffic.RED, null));
assertThrows(NullPointerException.class, () -> EnumUtils.generateBitVector(null, EnumSet.of(Traffic.RED)));
assertThrows(NullPointerException.class, () -> EnumUtils.generateBitVector(null, Traffic.RED));
assertThrows(NullPointerException.class,() -> EnumUtils.generateBitVector(Traffic.class, Arrays.asList(Traffic.RED, null)));
assertThrows(NullPointerException.class,() -> EnumUtils.generateBitVector(Traffic.class, (Iterable<Traffic>) null));
assertEquals(0L, EnumUtils.generateBitVector(Traffic.class));
assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED));
assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, Traffic.AMBER));
assertEquals(4L, EnumUtils.generateBitVector(Traffic.class, Traffic.GREEN));
assertEquals(3L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER));
assertEquals(5L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.GREEN));
assertEquals(6L, EnumUtils.generateBitVector(Traffic.class, Traffic.AMBER, Traffic.GREEN));
assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN));
assertEquals(7L,EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN, Traffic.GREEN));
assertEquals((1L << 31), EnumUtils.generateBitVector(Enum64.class, Enum64.A31));
assertEquals((1L << 32), EnumUtils.generateBitVector(Enum64.class, Enum64.A32));
assertEquals((1L << 63), EnumUtils.generateBitVector(Enum64.class, Enum64.A63));
assertEquals(Long.MIN_VALUE, EnumUtils.generateBitVector(Enum64.class, Enum64.A63));
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.noneOf(Traffic.class)), 0L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED)), 1L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER)), 2L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.GREEN)), 4L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER)), 3L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN)), 5L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN)), 6L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)), 7L);
assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, EnumSet.of(Enum64.A31)), (1L << 31));
assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, EnumSet.of(Enum64.A32)), (1L << 32));
assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, EnumSet.of(Enum64.A63)), (1L << 63));
assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, EnumSet.of(Enum64.A63)), Long.MIN_VALUE);
assertArrayEquals(EnumUtils.generateBitVectors(TooMany.class, EnumSet.of(TooMany.M2)), 1L, 0L);
assertArrayEquals(EnumUtils.generateBitVectors(TooMany.class, EnumSet.of(TooMany.L2, TooMany.M2)), 1L,(1L << 63));
assertThrows(IllegalArgumentException.class, () -> EnumUtils.generateBitVectors(rawType, rawList));
assertThrows(IllegalArgumentException.class, () -> EnumUtils.generateBitVectors(rawType));
assertThrows(NullPointerException.class, () -> EnumUtils.generateBitVectors(Traffic.class, (Traffic[]) null));
assertThrows(IllegalArgumentException.class,() -> EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, null));
assertThrows(NullPointerException.class, () -> EnumUtils.generateBitVectors(null, EnumSet.of(Traffic.RED)));
assertThrows(NullPointerException.class, () -> EnumUtils.generateBitVectors(null, Traffic.RED));
assertThrows(NullPointerException.class,() -> EnumUtils.generateBitVectors(Traffic.class, Arrays.asList(Traffic.RED, null)));
assertThrows(NullPointerException.class, () -> EnumUtils.generateBitVectors(null, (Iterable<Traffic>) null));
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class), 0L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED), 1L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER), 2L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.GREEN), 4L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER), 3L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.GREEN), 5L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER, Traffic.GREEN), 6L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN), 7L);
assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN, Traffic.GREEN), 7L);
assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, Enum64.A31), (1L << 31));
assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, Enum64.A32), (1L << 32));
assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, Enum64.A63), (1L << 63));
assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, Enum64.A63), Long.MIN_VALUE);
assertArrayEquals(EnumUtils.generateBitVectors(TooMany.class, TooMany.M2), 1L, 0L);
assertArrayEquals(EnumUtils.generateBitVectors(TooMany.class, TooMany.L2, TooMany.M2), 1L, (1L << 63));
assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, "RED"));
assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, "AMBER"));
assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, "GREEN"));
assertNull(EnumUtils.getEnum(Traffic.class, "PURPLE"));
assertNull(EnumUtils.getEnum(Traffic.class, null));
assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, "RED", Traffic.AMBER));
assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, "AMBER", Traffic.GREEN));
assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, "GREEN", Traffic.RED));
assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, "PURPLE", Traffic.AMBER));
assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, "PURPLE", Traffic.GREEN));
assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, "PURPLE", Traffic.RED));
assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, null, Traffic.AMBER));
assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, null, Traffic.GREEN));
assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, null, Traffic.RED));
assertNull(EnumUtils.getEnum(Traffic.class, "PURPLE", null));
assertNull(EnumUtils.getEnum(rawType, "rawType"));
assertThrows(NullPointerException.class, () -> EnumUtils.getEnum((Class<Traffic>) null, "PURPLE"));
assertEquals(Traffic.RED, EnumUtils.getEnumIgnoreCase(Traffic.class, "red"));
assertEquals(Traffic.AMBER, EnumUtils.getEnumIgnoreCase(Traffic.class, "Amber"));
assertEquals(Traffic.GREEN, EnumUtils.getEnumIgnoreCase(Traffic.class, "grEEn"));
assertNull(EnumUtils.getEnumIgnoreCase(Traffic.class, "purple"));
assertNull(EnumUtils.getEnumIgnoreCase(Traffic.class, null));
assertEquals(Traffic.RED, EnumUtils.getEnumIgnoreCase(Traffic.class, "red", Traffic.AMBER));
assertEquals(Traffic.AMBER, EnumUtils.getEnumIgnoreCase(Traffic.class, "Amber", Traffic.GREEN));
assertEquals(Traffic.GREEN, EnumUtils.getEnumIgnoreCase(Traffic.class, "grEEn", Traffic.RED));
assertEquals(Traffic.AMBER, EnumUtils.getEnumIgnoreCase(Traffic.class, "PURPLE", Traffic.AMBER));
assertEquals(Traffic.GREEN, EnumUtils.getEnumIgnoreCase(Traffic.class, "purple", Traffic.GREEN));
assertEquals(Traffic.RED, EnumUtils.getEnumIgnoreCase(Traffic.class, "pUrPlE", Traffic.RED));
assertEquals(Traffic.AMBER, EnumUtils.getEnumIgnoreCase(Traffic.class, null, Traffic.AMBER));
assertEquals(Traffic.GREEN, EnumUtils.getEnumIgnoreCase(Traffic.class, null, Traffic.GREEN));
assertEquals(Traffic.RED, EnumUtils.getEnumIgnoreCase(Traffic.class, null, Traffic.RED));
assertNull(EnumUtils.getEnumIgnoreCase(Traffic.class, "PURPLE", null));
assertNull(EnumUtils.getEnumIgnoreCase(rawType, "rawType"));
assertThrows(NullPointerException.class, () -> EnumUtils.getEnumIgnoreCase((Class<Traffic>) null, "PURPLE"));
assertEquals(3, test.size());
assertEquals(Traffic.RED, test.get(0));
assertEquals(Traffic.AMBER, test.get(1));
assertEquals(Traffic.GREEN, test.get(2));
assertEquals("{RED=RED, AMBER=AMBER, GREEN=GREEN}", test.toString(), "getEnumMap not created correctly");
assertEquals(3, test.size());
assertTrue(test.containsKey("RED"));
assertEquals(Traffic.RED, test.get("RED"));
assertTrue(test.containsKey("AMBER"));
assertEquals(Traffic.AMBER, test.get("AMBER"));
assertTrue(test.containsKey("GREEN"));
assertEquals(Traffic.GREEN, test.get("GREEN"));
assertFalse(test.containsKey("PURPLE"));
assertEquals("{1=JAN, 2=FEB, 3=MAR, 4=APR, 5=MAY, 6=JUN, 7=JUL, 8=AUG, 9=SEP, 10=OCT, 11=NOV, 12=DEC}", test.toString(),"getEnumMap not created correctly");
assertEquals(12, test.size());
assertFalse(test.containsKey(0));
assertTrue(test.containsKey(1));
assertEquals(Month.JAN, test.get(1));
assertTrue(test.containsKey(2));
assertEquals(Month.FEB, test.get(2));
assertTrue(test.containsKey(3));
assertEquals(Month.MAR, test.get(3));
assertTrue(test.containsKey(4));
assertEquals(Month.APR, test.get(4));
assertTrue(test.containsKey(5));
assertEquals(Month.MAY, test.get(5));
assertTrue(test.containsKey(6));
assertEquals(Month.JUN, test.get(6));
assertTrue(test.containsKey(7));
assertEquals(Month.JUL, test.get(7));
assertTrue(test.containsKey(8));
assertEquals(Month.AUG, test.get(8));
assertTrue(test.containsKey(9));
assertEquals(Month.SEP, test.get(9));
assertTrue(test.containsKey(10));
assertEquals(Month.OCT, test.get(10));
assertTrue(test.containsKey(11));
assertEquals(Month.NOV, test.get(11));
assertTrue(test.containsKey(12));
assertEquals(Month.DEC, test.get(12));
assertFalse(test.containsKey(13));
assertEquals(Traffic.RED, EnumUtils.getEnumSystemProperty(Traffic.class, key, null));
assertEquals(Traffic.RED, EnumUtils.getEnumSystemProperty(Traffic.class, "?", Traffic.RED));
assertEquals(Traffic.RED, EnumUtils.getEnumSystemProperty(null, null, Traffic.RED));
assertEquals(Traffic.RED, EnumUtils.getEnumSystemProperty(null, "?", Traffic.RED));
assertEquals(Traffic.RED, EnumUtils.getEnumSystemProperty(Traffic.class, null, Traffic.RED));
assertEquals(Traffic2.RED, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, "***red***", f, Traffic2.AMBER));
assertEquals(Traffic2.AMBER, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, "**Amber**", f, Traffic2.GREEN));
assertEquals(Traffic2.GREEN, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, "*grEEn*", f, Traffic2.RED));
assertEquals(Traffic2.AMBER, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, "PURPLE", f, Traffic2.AMBER));
assertEquals(Traffic2.GREEN, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, "purple", f, Traffic2.GREEN));
assertEquals(Traffic2.RED, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, "pUrPlE", f, Traffic2.RED));
assertEquals(Traffic2.AMBER, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, null, f, Traffic2.AMBER));
assertEquals(Traffic2.GREEN, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, null, f, Traffic2.GREEN));
assertEquals(Traffic2.RED, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, null, f, Traffic2.RED));
assertNull(EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, "PURPLE", f, null));
assertTrue(EnumUtils.isValidEnum(Traffic.class, "RED"));
assertTrue(EnumUtils.isValidEnum(Traffic.class, "AMBER"));
assertTrue(EnumUtils.isValidEnum(Traffic.class, "GREEN"));
assertFalse(EnumUtils.isValidEnum(Traffic.class, "PURPLE"));
assertFalse(EnumUtils.isValidEnum(Traffic.class, null));
assertThrows(NullPointerException.class, () -> EnumUtils.isValidEnum(null, "PURPLE"));
assertTrue(EnumUtils.isValidEnumIgnoreCase(Traffic.class, "red"));
assertTrue(EnumUtils.isValidEnumIgnoreCase(Traffic.class, "Amber"));
assertTrue(EnumUtils.isValidEnumIgnoreCase(Traffic.class, "grEEn"));
assertFalse(EnumUtils.isValidEnumIgnoreCase(Traffic.class, "purple"));
assertFalse(EnumUtils.isValidEnumIgnoreCase(Traffic.class, null));
assertThrows(NullPointerException.class, () -> EnumUtils.isValidEnumIgnoreCase(null, "PURPLE"));
assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVector(Traffic.class, 0L));
assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVector(Traffic.class, 1L));
assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 2L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 3L));
assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 4L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 5L));
assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 6L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN),EnumUtils.processBitVector(Traffic.class, 7L));
assertEquals(EnumSet.of(Enum64.A31), EnumUtils.processBitVector(Enum64.class, (1L << 31)));
assertEquals(EnumSet.of(Enum64.A32), EnumUtils.processBitVector(Enum64.class, (1L << 32)));
assertEquals(EnumSet.of(Enum64.A63), EnumUtils.processBitVector(Enum64.class, (1L << 63)));
assertEquals(EnumSet.of(Enum64.A63), EnumUtils.processBitVector(Enum64.class, Long.MIN_VALUE));
assertThrows(IllegalArgumentException.class, () -> EnumUtils.processBitVector(TooMany.class, 0L));
assertThrows(NullPointerException.class, () -> EnumUtils.processBitVector(empty, 0L));
assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 0L));
assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 1L));
assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 2L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 3L));
assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 4L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 5L));
assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 6L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN),EnumUtils.processBitVectors(Traffic.class, 7L));
assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 0L, 0L));
assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 0L, 1L));
assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 0L, 2L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 0L, 3L));
assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 4L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 5L));
assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 6L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN),EnumUtils.processBitVectors(Traffic.class, 0L, 7L));
assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 666L, 0L));
assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 666L, 1L));
assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 666L, 2L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 666L, 3L));
assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 4L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 5L));
assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 6L));
assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN),EnumUtils.processBitVectors(Traffic.class, 666L, 7L));
assertEquals(EnumSet.of(Enum64.A31), EnumUtils.processBitVectors(Enum64.class, (1L << 31)));
assertEquals(EnumSet.of(Enum64.A32), EnumUtils.processBitVectors(Enum64.class, (1L << 32)));
assertEquals(EnumSet.of(Enum64.A63), EnumUtils.processBitVectors(Enum64.class, (1L << 63)));
assertEquals(EnumSet.of(Enum64.A63), EnumUtils.processBitVectors(Enum64.class, Long.MIN_VALUE));
assertEquals(EnumSet.noneOf(TooMany.class), EnumUtils.processBitVectors(TooMany.class, 0L));
assertEquals(EnumSet.of(TooMany.A), EnumUtils.processBitVectors(TooMany.class, 1L));
assertEquals(EnumSet.of(TooMany.B), EnumUtils.processBitVectors(TooMany.class, 2L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B), EnumUtils.processBitVectors(TooMany.class, 3L));
assertEquals(EnumSet.of(TooMany.C), EnumUtils.processBitVectors(TooMany.class, 4L));
assertEquals(EnumSet.of(TooMany.A, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 5L));
assertEquals(EnumSet.of(TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 6L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 7L));
assertEquals(EnumSet.noneOf(TooMany.class), EnumUtils.processBitVectors(TooMany.class, 0L, 0L));
assertEquals(EnumSet.of(TooMany.A), EnumUtils.processBitVectors(TooMany.class, 0L, 1L));
assertEquals(EnumSet.of(TooMany.B), EnumUtils.processBitVectors(TooMany.class, 0L, 2L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B), EnumUtils.processBitVectors(TooMany.class, 0L, 3L));
assertEquals(EnumSet.of(TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 4L));
assertEquals(EnumSet.of(TooMany.A, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 5L));
assertEquals(EnumSet.of(TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 6L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 7L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 7L));
assertEquals(EnumSet.of(TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 0L));
assertEquals(EnumSet.of(TooMany.A, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 1L));
assertEquals(EnumSet.of(TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 2L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 3L));
assertEquals(EnumSet.of(TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 4L));
assertEquals(EnumSet.of(TooMany.A, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 5L));
assertEquals(EnumSet.of(TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 6L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2),EnumUtils.processBitVectors(TooMany.class, 1L, 7L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2),EnumUtils.processBitVectors(TooMany.class, 1L, 7L));
assertEquals(EnumSet.of(TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 0L));
assertEquals(EnumSet.of(TooMany.A, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 1L));
assertEquals(EnumSet.of(TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 2L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 3L));
assertEquals(EnumSet.of(TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 4L));
assertEquals(EnumSet.of(TooMany.A, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 5L));
assertEquals(EnumSet.of(TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 6L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2),EnumUtils.processBitVectors(TooMany.class, 9L, 7L));
assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2),EnumUtils.processBitVectors(TooMany.class, 9L, 7L));
assertThrows(NullPointerException.class, () -> EnumUtils.processBitVectors(empty, 0L));
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{true, true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false, false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{true, true, true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{true, true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false, false, false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{true, true, true, true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false, true, false, true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new boolean[] { true, false }, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new boolean[] { true, false }, 2));
assertNotSame(array1, array2);
assertArrayEquals(array1, array2);
assertEquals(boolean.class, array2.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{1}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{1, 1}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{3}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{1}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{1, 3, 5}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2, 4}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{1, 3, 5, 7}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2, 4, 6}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new byte[] { 1, 2 }, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new byte[] { 1, 2 }, 2));
assertNotSame(array1, array2);
assertArrayEquals(array1, array2);
assertEquals(byte.class, array2.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'b'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'a'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'a', 'c'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'c'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'a'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'b'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'a', 'c', 'e'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'b', 'd'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'a', 'c', 'e', 'g'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'b', 'd', 'f'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new char[] { 'a', 'b' }, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new char[] { 'a', 'b' }, 2));
assertNotSame(array1, array2);
assertArrayEquals(array1, array2);
assertEquals(char.class, array2.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{1}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{1, 1}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{3}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{1}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{1, 3, 5}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2, 4}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{1, 3, 5, 7}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2, 4, 6}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new double[] { 1, 2 }, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new double[] { 1, 2 }, 2));
assertNotSame(array1, array2);
assertArrayEquals(array1, array2);
assertEquals(double.class, array2.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{1}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{1, 1}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{3}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{1}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{1, 3, 5}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2, 4}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{1, 3, 5, 7}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2, 4, 6}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new float[] { 1, 2 }, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new float[] { 1, 2 }, 2));
assertNotSame(array1, array2);
assertArrayEquals(array1, array2);
assertEquals(float.class, array2.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertArrayEquals(new int[]{1}, array);
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{1}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{1, 1}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{3}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{1}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{1, 3, 5}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2, 4}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{1, 3, 5, 7}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2, 4, 6}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new int[] { 1, 2 }, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new int[] { 1, 2 }, 2));
assertNotSame(array1, array2);
assertArrayEquals(array1, array2);
assertEquals(int.class, array2.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{1}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{1, 1}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{3}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{1}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{1, 3, 5}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2, 4}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{1, 3, 5, 7}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2, 4, 6}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new long[] { 1, 2 }, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new long[] { 1, 2 }, 2));
assertNotSame(array1, array2);
assertArrayEquals(array1, array2);
assertEquals(long.class, array2.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll((boolean[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll((byte[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll((char[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll((double[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll((float[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll((int[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll((long[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((Object[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll((short[]) null, 0));
assertEquals(3, inarray.length);
assertArrayEquals(new Number[] { Integer.valueOf(1), Byte.valueOf((byte) 3) }, outarray);
assertEquals(Number.class, outarray.getClass().getComponentType());
assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray);
assertEquals(Number.class, outarray.getClass().getComponentType());
assertEquals(0, outarray.length);
assertEquals(Number.class, outarray.getClass().getComponentType());
assertArrayEquals(new Number[] { Byte.valueOf((byte) 3) }, outarray);
assertEquals(Number.class, outarray.getClass().getComponentType());
assertArrayEquals(new Number[] { Long.valueOf(2L) }, outarray);
assertEquals(Number.class, outarray.getClass().getComponentType());
assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray);
assertEquals(Number.class, outarray.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[] { "a" }, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[] { "a", "d" }, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[] { "b", "c" }, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[] { "c" }, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[] { "c", "e" }, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[] { "b", "d" }, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[] { "c" }, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new Object[] { "a", "b" }, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new Object[] { "a", "b" }, 2));
assertNotSame(array1, array2);
assertArrayEquals(array1, array2);
assertEquals(Object.class, array2.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{1}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{1, 1}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{3}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{1}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{1, 3, 5}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2, 4}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{1, 3, 5, 7}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2, 4, 6}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new short[] { 1, 2 }, -1, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new short[] { 1, 2 }, 2, 0));
assertNotSame(array1, array2);
assertArrayEquals(array1, array2);
assertEquals(short.class, array2.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false, true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{true}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertArrayEquals(new boolean[]{false}, array);
assertEquals(Boolean.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2, 1}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{1}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertArrayEquals(new byte[]{2}, array);
assertEquals(Byte.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'b'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'b', 'a'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'b'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'a'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'b'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertArrayEquals(new char[]{'b'}, array);
assertEquals(Character.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2, 1}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{1}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertArrayEquals(new double[]{2}, array);
assertEquals(Double.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2, 1}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{1}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertArrayEquals(new float[]{2}, array);
assertEquals(Float.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2, 1}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{1}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertArrayEquals(new int[]{2}, array);
assertEquals(Integer.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2, 1}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{1}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertArrayEquals(new long[]{2}, array);
assertEquals(Long.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2, 1}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{1}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertArrayEquals(new short[]{2}, array);
assertEquals(Short.TYPE, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[]{"b"}, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[]{"b", "a"}, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertNull(array);
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[]{"b"}, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[]{"b", "a"}, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[]{"a"}, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[]{"b"}, array);
assertEquals(Object.class, array.getClass().getComponentType());
assertArrayEquals(new Object[]{"b"}, array);
assertEquals(Object.class, array.getClass().getComponentType());
private void assertSupportedEncoding(final String name) {assertTrue(CharEncoding.isSupported(name), "Encoding should be supported: " + name);
this.assertSupportedEncoding(CharEncoding.ISO_8859_1);
this.assertSupportedEncoding(CharEncoding.US_ASCII);
this.assertSupportedEncoding(CharEncoding.UTF_16);
this.assertSupportedEncoding(CharEncoding.UTF_16BE);
this.assertSupportedEncoding(CharEncoding.UTF_16LE);
this.assertSupportedEncoding(CharEncoding.UTF_8);
assertTrue(CharEncoding.isSupported("UTF8"));
assertTrue(CharEncoding.isSupported("UTF-8"));
assertTrue(CharEncoding.isSupported("ASCII"));
assertFalse(CharEncoding.isSupported(null));
assertFalse(CharEncoding.isSupported(""));
assertFalse(CharEncoding.isSupported(" "));
assertFalse(CharEncoding.isSupported("\t\r\n"));
assertFalse(CharEncoding.isSupported("DOESNOTEXIST"));
assertFalse(CharEncoding.isSupported("this is not a valid encoding name"));
assertEquals(StandardCharsets.ISO_8859_1.name(), CharEncoding.ISO_8859_1);
assertEquals(StandardCharsets.US_ASCII.name(), CharEncoding.US_ASCII);
assertEquals(StandardCharsets.UTF_8.name(), CharEncoding.UTF_8);
assertEquals(StandardCharsets.UTF_16.name(), CharEncoding.UTF_16);
assertEquals(StandardCharsets.UTF_16BE.name(), CharEncoding.UTF_16BE);
assertEquals(StandardCharsets.UTF_16LE.name(), CharEncoding.UTF_16LE);
assertEquals("y", things.get(0).string);
assertNull(things.get(1));
assertNull(things.get(2));
assertEquals("y", things.get(0).string);
assertNull(things.get(1).string);
assertNull(things.get(2).string);
assertEquals("x", things.get(0).string);
assertEquals("y", things.get(1).string);
assertEquals("z", things.get(2).string);
assertFalse(is(a).between(b, c));
assertFalse(is(a).betweenExclusive(b, c));
assertFalse(ComparableUtils.between(b, c).test(a));
assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));
assertTrue(is(a).between(b, c));
assertFalse(is(a).betweenExclusive(b, c));
assertTrue(ComparableUtils.between(b, c).test(a));
assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));
assertTrue(is(a).between(b, c));
assertTrue(is(a).betweenExclusive(b, c));
assertTrue(ComparableUtils.between(b, c).test(a));
assertTrue(ComparableUtils.betweenExclusive(b, c).test(a));
assertFalse(is(a).equalTo(b));
assertTrue(is(a).greaterThan(b));
assertTrue(is(a).greaterThanOrEqualTo(b));
assertFalse(is(a).lessThan(b));
assertFalse(is(a).lessThanOrEqualTo(b));
assertTrue(ComparableUtils.gt(b).test(a));
assertTrue(ComparableUtils.ge(b).test(a));
assertFalse(ComparableUtils.lt(b).test(a));
assertFalse(ComparableUtils.le(b).test(a));
assertTrue(is(a).between(b, c));
assertFalse(is(a).betweenExclusive(b, c));
assertTrue(ComparableUtils.between(b, c).test(a));
assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));
assertTrue(is(a).between(b, c));
assertFalse(is(a).betweenExclusive(b, c));
assertTrue(ComparableUtils.between(b, c).test(a));
assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));
assertTrue(is(a).between(b, c));
assertFalse(is(a).betweenExclusive(b, c));
assertTrue(ComparableUtils.between(b, c).test(a));
assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));
assertTrue(is(a).equalTo(b));
assertFalse(is(a).greaterThan(b));
assertTrue(is(a).greaterThanOrEqualTo(b));
assertFalse(is(a).lessThan(b));
assertTrue(is(a).lessThanOrEqualTo(b));
assertFalse(ComparableUtils.gt(b).test(a));
assertTrue(ComparableUtils.ge(b).test(a));
assertFalse(ComparableUtils.lt(b).test(a));
assertTrue(ComparableUtils.le(b).test(a));
assertTrue(is(a).between(b, c));
assertTrue(is(a).betweenExclusive(b, c));
assertTrue(ComparableUtils.between(b, c).test(a));
assertTrue(ComparableUtils.betweenExclusive(b, c).test(a));
assertTrue(is(a).between(b, c));
assertFalse(is(a).betweenExclusive(b, c));
assertTrue(ComparableUtils.between(b, c).test(a));
assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));
assertFalse(is(a).between(b, c));
assertFalse(is(a).betweenExclusive(b, c));
assertFalse(ComparableUtils.between(b, c).test(a));
assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));
assertFalse(is(a).equalTo(b));
assertFalse(is(a).greaterThan(b));
assertFalse(is(a).greaterThanOrEqualTo(b));
assertTrue(is(a).lessThan(b));
assertTrue(is(a).lessThanOrEqualTo(b));
assertFalse(ComparableUtils.gt(b).test(a));
assertFalse(ComparableUtils.ge(b).test(a));
assertTrue(ComparableUtils.lt(b).test(a));
assertTrue(ComparableUtils.le(b).test(a));
assertEquals(Instant.MAX, ComparableUtils.max(Instant.MAX, Instant.MAX));
assertEquals(Instant.MIN, ComparableUtils.max(Instant.MIN, Instant.MIN));
assertEquals(Instant.MAX, ComparableUtils.max(Instant.MIN, Instant.MAX));
assertEquals(Instant.MAX, ComparableUtils.max(Instant.MAX, Instant.MIN));
assertEquals(Integer.MIN_VALUE, ComparableUtils.max(Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MIN_VALUE)));
assertEquals(Integer.MAX_VALUE, ComparableUtils.max(Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(Integer.MAX_VALUE)));
assertEquals(Integer.MAX_VALUE, ComparableUtils.max(Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE)));
assertEquals(Integer.MAX_VALUE, ComparableUtils.max(Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(Integer.MIN_VALUE)));
assertEquals(Instant.MAX, ComparableUtils.max(null, Instant.MAX));
assertEquals(Instant.MAX, ComparableUtils.max(Instant.MAX, null));
assertEquals(Instant.MAX, ComparableUtils.min(Instant.MAX, Instant.MAX));
assertEquals(Instant.MIN, ComparableUtils.min(Instant.MIN, Instant.MIN));
assertEquals(Instant.MIN, ComparableUtils.min(Instant.MIN, Instant.MAX));
assertEquals(Instant.MIN, ComparableUtils.min(Instant.MAX, Instant.MIN));
assertEquals(Integer.MIN_VALUE, ComparableUtils.min(Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MIN_VALUE)));
assertEquals(Integer.MAX_VALUE, ComparableUtils.min(Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(Integer.MAX_VALUE)));
assertEquals(Integer.MIN_VALUE, ComparableUtils.min(Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE)));
assertEquals(Integer.MIN_VALUE, ComparableUtils.min(Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(Integer.MIN_VALUE)));
assertEquals(Instant.MAX, ComparableUtils.min(null, Instant.MAX));
assertEquals(Instant.MAX, ComparableUtils.min(Instant.MAX, null));
assertNotNull(new RandomUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(RandomUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(RandomUtils.class.getModifiers()));
assertThrows(IllegalArgumentException.class, () -> RandomUtils.nextBytes(-1));
assertThrows(IllegalArgumentException.class, () -> RandomUtils.nextInt(-1, 1));
assertThrows(IllegalArgumentException.class, () -> RandomUtils.nextLong(-1, 1));
assertThrows(IllegalArgumentException.class, () -> RandomUtils.nextDouble(-1, 1));
assertThrows(IllegalArgumentException.class, () -> RandomUtils.nextFloat(-1, 1));
assertThrows(IllegalArgumentException.class, () -> RandomUtils.nextInt(2, 1));
assertThrows(IllegalArgumentException.class, () -> RandomUtils.nextLong(2, 1));
assertThrows(IllegalArgumentException.class, () -> RandomUtils.nextDouble(2, 1));
assertThrows(IllegalArgumentException.class, () -> RandomUtils.nextFloat(2, 1));
assertTrue(result || !result);
assertArrayEquals(new byte[0], RandomUtils.nextBytes(0));
assertEquals(20, result.length);
assertEquals(42, RandomUtils.nextInt(42, 42));
assertTrue(result >= 33 && result < 42);
assertTrue(randomResult > 0);
assertTrue(randomResult < Integer.MAX_VALUE);
assertEquals(42.1, RandomUtils.nextDouble(42.1, 42.1), DELTA);
assertEquals(42.1f, RandomUtils.nextFloat(42.1f, 42.1f), DELTA);
assertTrue(result >= 33d && result <= 42d);
assertTrue(randomResult > 0);
assertTrue(randomResult < Double.MAX_VALUE);
assertTrue(result >= 33f && result <= 42f);
assertTrue(randomResult > 0);
assertTrue(randomResult < Float.MAX_VALUE);
assertEquals(42L, RandomUtils.nextLong(42L, 42L));
assertTrue(result >= 33L && result < 42L);
assertTrue(randomResult > 0);
assertTrue(randomResult < Long.MAX_VALUE);
assertTrue(result >= 0 && result < Integer.MAX_VALUE);
assertTrue(result >= 0 && result < Long.MAX_VALUE);
assertTrue(result >= 0f && result <= Float.MAX_VALUE);
assertTrue(result >= 0 && result <= Double.MAX_VALUE);
assertNotEquals(endExclusive, RandomUtils.nextLong(startInclusive, endExclusive));
private void assertAbbreviateWithAbbrevMarkerAndOffset(final String expected, final String abbrevMarker, final int offset, final int maxWidth) {final String abcdefghijklmno = "abcdefghijklmno";
assertTrue(actual.indexOf((char) ('a' + offset)) != -1,message + " -- should contain offset character");
assertTrue(actual.length() <= maxWidth,message + " -- should not be greater than maxWidth");
assertEquals(expected, actual, message);
private void assertAbbreviateWithOffset(final String expected, final int offset, final int maxWidth) {final String abcdefghijklmno = "abcdefghijklmno";
assertTrue(actual.indexOf((char) ('a' + offset)) != -1,message + " -- should contain offset character");
assertTrue(actual.length() <= maxWidth,message + " -- should not be greater than maxWidth");
assertEquals(expected, actual, message);
assertEquals(3, res.length, msg);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals(noMatch + "c", res[2]);
assertEquals(1, res.length, msg);
assertEquals("a", res[0], msg);
assertEquals(3, res.length, msg);
assertEquals("a", res[0], msg);
assertEquals("b", res[1], msg);
assertEquals(noMatch + "c", res[2], msg);
assertEquals(3, res.length, msg);
assertEquals("a", res[0], msg);
assertEquals("b", res[1], msg);
assertEquals(noMatch + "c", res[2], msg);
assertEquals(1, res.length, msg);
assertEquals(str, res[0], msg);
assertEquals(2, res.length, msg);
assertEquals("a", res[0], msg);
assertEquals(str.substring(2), res[1], msg);
assertEquals(4, res.length, msg);
assertEquals("a", res[0], msg);
assertEquals("b", res[1], msg);
assertEquals("", res[2], msg);
assertEquals(noMatch + "c", res[3], msg);
assertEquals(3, res.length, msg);
assertEquals("", res[0], msg);
assertEquals("a", res[1], msg);
assertEquals("", res[2], msg);
assertEquals(4, res.length, msg);
assertEquals("a", res[0], msg);
assertEquals("b", res[1], msg);
assertEquals("", res[2], msg);
assertEquals(noMatch + "c", res[3], msg);
assertEquals(4, res.length, msg);
assertEquals("a", res[0], msg);
assertEquals("b", res[1], msg);
assertEquals("", res[2], msg);
assertEquals(noMatch + "c", res[3], msg);
assertEquals(1, res.length, msg);
assertEquals(str, res[0], msg);
assertEquals(2, res.length, msg);
assertEquals("a", res[0], msg);
assertEquals(str.substring(2), res[1], msg);
assertEquals("much too long", StringUtils.abbreviate(greaterThanMaxTest, "", 13));
assertNull(StringUtils.abbreviate(null, 10));
assertEquals("", StringUtils.abbreviate("", 10));
assertEquals("short", StringUtils.abbreviate("short", 10));
assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all good men to come to the aid of their party.", 10));
assertEquals("raspberry p...", StringUtils.abbreviate(raspberry, 14));
assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 15));
assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 16));
assertEquals("abc...", StringUtils.abbreviate("abcdefg", 6));
assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 7));
assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 8));
assertEquals("a...", StringUtils.abbreviate("abcdefg", 4));
assertEquals("", StringUtils.abbreviate("", 4));
assertThrows(IllegalArgumentException.class,() -> StringUtils.abbreviate("abc", 3),"StringUtils.abbreviate expecting IllegalArgumentException");
assertNull(StringUtils.abbreviate(null, 10, 12));
assertEquals("", StringUtils.abbreviate("", 0, 10));
assertEquals("", StringUtils.abbreviate("", 2, 10));
assertThrows(IllegalArgumentException.class,() -> StringUtils.abbreviate("abcdefghij", 0, 3),"StringUtils.abbreviate expecting IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> StringUtils.abbreviate("abcdefghij", 5, 6),"StringUtils.abbreviate expecting IllegalArgumentException");
assertEquals("raspberry peach", StringUtils.abbreviate(raspberry, 11, 15));
assertNull(StringUtils.abbreviate(null, 7, 14));
assertAbbreviateWithOffset("abcdefg...", -1, 10);
assertAbbreviateWithOffset("abcdefg...", 0, 10);
assertAbbreviateWithOffset("abcdefg...", 1, 10);
assertAbbreviateWithOffset("abcdefg...", 2, 10);
assertAbbreviateWithOffset("abcdefg...", 3, 10);
assertAbbreviateWithOffset("abcdefg...", 4, 10);
assertAbbreviateWithOffset("...fghi...", 5, 10);
assertAbbreviateWithOffset("...ghij...", 6, 10);
assertAbbreviateWithOffset("...hijk...", 7, 10);
assertAbbreviateWithOffset("...ijklmno", 8, 10);
assertAbbreviateWithOffset("...ijklmno", 9, 10);
assertAbbreviateWithOffset("...ijklmno", 10, 10);
assertAbbreviateWithOffset("...ijklmno", 11, 10);
assertAbbreviateWithOffset("...ijklmno", 12, 10);
assertAbbreviateWithOffset("...ijklmno", 13, 10);
assertAbbreviateWithOffset("...ijklmno", 14, 10);
assertAbbreviateWithOffset("...ijklmno", 15, 10);
assertAbbreviateWithOffset("...ijklmno", 16, 10);
assertAbbreviateWithOffset("...ijklmno", Integer.MAX_VALUE, 10);
assertNull(StringUtils.abbreviate(null, null, 10));
assertNull(StringUtils.abbreviate(null, "...", 10));
assertEquals("paranaguacu", StringUtils.abbreviate("paranaguacu", null, 10));
assertEquals("", StringUtils.abbreviate("", "...", 2));
assertEquals("wai**", StringUtils.abbreviate("waiheke", "**", 5));
assertEquals("And af,,,,", StringUtils.abbreviate("And after a long time, he finally met his son.", ",,,,", 10));
assertEquals("raspberry pe..", StringUtils.abbreviate(raspberry, "..", 14));
assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", "---*---", 15));
assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", ".", 16));
assertEquals("abc()(", StringUtils.abbreviate("abcdefg", "()(", 6));
assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", ";", 7));
assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", "_-", 8));
assertEquals("abc.", StringUtils.abbreviate("abcdefg", ".", 4));
assertEquals("", StringUtils.abbreviate("", 4));
assertThrows(IllegalArgumentException.class,() -> StringUtils.abbreviate("abcdefghij", "...", 3),"StringUtils.abbreviate expecting IllegalArgumentException");
assertNull(StringUtils.abbreviate(null, null, 10, 12));
assertNull(StringUtils.abbreviate(null, "...", 10, 12));
assertEquals("", StringUtils.abbreviate("", null, 0, 10));
assertEquals("", StringUtils.abbreviate("", "...", 2, 10));
assertThrows(IllegalArgumentException.class,() -> StringUtils.abbreviate("abcdefghij", "::", 0, 2),"StringUtils.abbreviate expecting IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> StringUtils.abbreviate("abcdefghij", "!!!", 5, 6),"StringUtils.abbreviate expecting IllegalArgumentException");
assertEquals("raspberry peach", StringUtils.abbreviate(raspberry, "--", 12, 15));
assertNull(StringUtils.abbreviate(null, ";", 7, 14));
assertAbbreviateWithAbbrevMarkerAndOffset("abcdefgh;;", ";;", -1, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("abcdefghi.", ".", 0, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("abcdefgh++", "++", 1, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("abcdefghi*", "*", 2, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("abcdef{{{{", "{{{{", 4, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("abcdef____", "____", 5, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("==fghijk==", "==", 5, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("___ghij___", "___", 6, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("/ghijklmno", "/", 7, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("/ghijklmno", "/", 8, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("/ghijklmno", "/", 9, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("///ijklmno", "///", 10, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("//hijklmno", "//", 10, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("//hijklmno", "//", 11, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("...ijklmno", "...", 12, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("/ghijklmno", "/", 13, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("/ghijklmno", "/", 14, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("999ijklmno", "999", 15, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("_ghijklmno", "_", 16, 10);
assertAbbreviateWithAbbrevMarkerAndOffset("+ghijklmno", "+", Integer.MAX_VALUE, 10);
assertNull(StringUtils.abbreviateMiddle(null, null, 0));
assertEquals("abc", StringUtils.abbreviateMiddle("abc", null, 0));
assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 0));
assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 3));
assertEquals("ab.f", StringUtils.abbreviateMiddle("abcdef", ".", 4));
assertEquals("A very long text with un...f the text is complete.",StringUtils.abbreviateMiddle("A very long text with unimportant stuff in the middle but interesting start and " +"end to see if the text is complete.", "...", 50));
assertEquals("Start text->Close text",StringUtils.abbreviateMiddle(longText, "->", 22));
assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", -1));
assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 1));
assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 2));
assertEquals("a", StringUtils.abbreviateMiddle("a", ".", 1));
assertEquals("a.d", StringUtils.abbreviateMiddle("abcd", ".", 3));
assertEquals("a..f", StringUtils.abbreviateMiddle("abcdef", "..", 4));
assertEquals("ab.ef", StringUtils.abbreviateMiddle("abcdef", ".", 5));
assertNull(StringUtils.appendIfMissing(null, null), "appendIfMissing(null,null)");
assertEquals("abc", StringUtils.appendIfMissing("abc", null), "appendIfMissing(abc,null)");
assertEquals("xyz", StringUtils.appendIfMissing("", "xyz"), "appendIfMissing(\"\",xyz)");
assertEquals("abcxyz", StringUtils.appendIfMissing("abc", "xyz"), "appendIfMissing(abc,xyz)");
assertEquals("abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz"), "appendIfMissing(abcxyz,xyz)");
assertEquals("aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz"), "appendIfMissing(aXYZ,xyz)");
assertNull(StringUtils.appendIfMissing(null, null, (CharSequence[]) null), "appendIfMissing(null,null,null)");
assertEquals("abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null), "appendIfMissing(abc,null,null)");
assertEquals("xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null), "appendIfMissing(\"\",xyz,null))");
assertEquals("abcxyz", StringUtils.appendIfMissing("abc", "xyz", null), "appendIfMissing(abc,xyz,{null})");
assertEquals("abc", StringUtils.appendIfMissing("abc", "xyz", ""), "appendIfMissing(abc,xyz,\"\")");
assertEquals("abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno"), "appendIfMissing(abc,xyz,mno)");
assertEquals("abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno"), "appendIfMissing(abcxyz,xyz,mno)");
assertEquals("abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno"), "appendIfMissing(abcmno,xyz,mno)");
assertEquals("abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno"), "appendIfMissing(abcXYZ,xyz,mno)");
assertEquals("abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno"), "appendIfMissing(abcMNO,xyz,mno)");
assertNull(StringUtils.appendIfMissingIgnoreCase(null, null), "appendIfMissingIgnoreCase(null,null)");
assertEquals("abc", StringUtils.appendIfMissingIgnoreCase("abc", null), "appendIfMissingIgnoreCase(abc,null)");
assertEquals("xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz"), "appendIfMissingIgnoreCase(\"\",xyz)");
assertEquals("abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz"), "appendIfMissingIgnoreCase(abc,xyz)");
assertEquals("abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz"), "appendIfMissingIgnoreCase(abcxyz,xyz)");
assertEquals("abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz"), "appendIfMissingIgnoreCase(abcXYZ,xyz)");
assertNull(StringUtils.appendIfMissingIgnoreCase(null, null, (CharSequence[]) null), "appendIfMissingIgnoreCase(null,null,null)");
assertEquals("abc", StringUtils.appendIfMissingIgnoreCase("abc", null, (CharSequence[]) null), "appendIfMissingIgnoreCase(abc,null,null)");
assertEquals("xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz", (CharSequence[]) null), "appendIfMissingIgnoreCase(\"\",xyz,null)");
assertEquals("abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", null), "appendIfMissingIgnoreCase(abc,xyz,{null})");
assertEquals("abc", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", ""), "appendIfMissingIgnoreCase(abc,xyz,\"\")");
assertEquals("abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "mno"), "appendIfMissingIgnoreCase(abc,xyz,mno)");
assertEquals("abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz", "mno"), "appendIfMissingIgnoreCase(abcxyz,xyz,mno)");
assertEquals("abcmno", StringUtils.appendIfMissingIgnoreCase("abcmno", "xyz", "mno"), "appendIfMissingIgnoreCase(abcmno,xyz,mno)");
assertEquals("abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz", "mno"), "appendIfMissingIgnoreCase(abcXYZ,xyz,mno)");
assertEquals("abcMNO", StringUtils.appendIfMissingIgnoreCase("abcMNO", "xyz", "mno"), "appendIfMissingIgnoreCase(abcMNO,xyz,mno)");
assertNull(StringUtils.capitalize(null));
assertEquals("", StringUtils.capitalize(""), "capitalize(empty-string) failed");
assertEquals("X", StringUtils.capitalize("x"), "capitalize(single-char-string) failed");
assertEquals(FOO_CAP, StringUtils.capitalize(FOO_CAP), "capitalize(String) failed");
assertEquals(FOO_CAP, StringUtils.capitalize(FOO_UNCAP), "capitalize(string) failed");
assertEquals("\u01C8", StringUtils.capitalize("\u01C9"), "capitalize(String) is not using TitleCase");
assertNull(StringUtils.capitalize(null));
assertEquals("", StringUtils.capitalize(""));
assertEquals("Cat", StringUtils.capitalize("cat"));
assertEquals("CAt", StringUtils.capitalize("cAt"));
assertEquals("'cat'", StringUtils.capitalize("'cat'"));
assertNull(StringUtils.center(null, -1));
assertNull(StringUtils.center(null, 4));
assertEquals("    ", StringUtils.center("", 4));
assertEquals("ab", StringUtils.center("ab", 0));
assertEquals("ab", StringUtils.center("ab", -1));
assertEquals("ab", StringUtils.center("ab", 1));
assertEquals("    ", StringUtils.center("", 4));
assertEquals(" ab ", StringUtils.center("ab", 4));
assertEquals("abcd", StringUtils.center("abcd", 2));
assertEquals(" a  ", StringUtils.center("a", 4));
assertEquals("  a  ", StringUtils.center("a", 5));
assertNull(StringUtils.center(null, -1, ' '));
assertNull(StringUtils.center(null, 4, ' '));
assertEquals("    ", StringUtils.center("", 4, ' '));
assertEquals("ab", StringUtils.center("ab", 0, ' '));
assertEquals("ab", StringUtils.center("ab", -1, ' '));
assertEquals("ab", StringUtils.center("ab", 1, ' '));
assertEquals("    ", StringUtils.center("", 4, ' '));
assertEquals(" ab ", StringUtils.center("ab", 4, ' '));
assertEquals("abcd", StringUtils.center("abcd", 2, ' '));
assertEquals(" a  ", StringUtils.center("a", 4, ' '));
assertEquals("  a  ", StringUtils.center("a", 5, ' '));
assertEquals("xxaxx", StringUtils.center("a", 5, 'x'));
assertNull(StringUtils.center(null, 4, null));
assertNull(StringUtils.center(null, -1, " "));
assertNull(StringUtils.center(null, 4, " "));
assertEquals("    ", StringUtils.center("", 4, " "));
assertEquals("ab", StringUtils.center("ab", 0, " "));
assertEquals("ab", StringUtils.center("ab", -1, " "));
assertEquals("ab", StringUtils.center("ab", 1, " "));
assertEquals("    ", StringUtils.center("", 4, " "));
assertEquals(" ab ", StringUtils.center("ab", 4, " "));
assertEquals("abcd", StringUtils.center("abcd", 2, " "));
assertEquals(" a  ", StringUtils.center("a", 4, " "));
assertEquals("yayz", StringUtils.center("a", 4, "yz"));
assertEquals("yzyayzy", StringUtils.center("a", 7, "yz"));
assertEquals("  abc  ", StringUtils.center("abc", 7, null));
assertEquals("  abc  ", StringUtils.center("abc", 7, ""));
assertEquals(expectedResult, StringUtils.chomp(original), "chomp(String) failed");
assertEquals("foo", StringUtils.chomp("foobar", "bar"), "chomp(String, String) failed");
assertEquals("foobar", StringUtils.chomp("foobar", "baz"), "chomp(String, String) failed");
assertEquals("foo", StringUtils.chomp("foo", "foooo"), "chomp(String, String) failed");
assertEquals("foobar", StringUtils.chomp("foobar", ""), "chomp(String, String) failed");
assertEquals("foobar", StringUtils.chomp("foobar", null), "chomp(String, String) failed");
assertEquals("", StringUtils.chomp("", "foo"), "chomp(String, String) failed");
assertEquals("", StringUtils.chomp("", null), "chomp(String, String) failed");
assertEquals("", StringUtils.chomp("", ""), "chomp(String, String) failed");
assertNull(StringUtils.chomp(null, "foo"), "chomp(String, String) failed");
assertNull(StringUtils.chomp(null, null), "chomp(String, String) failed");
assertNull(StringUtils.chomp(null, ""), "chomp(String, String) failed");
assertEquals("", StringUtils.chomp("foo", "foo"), "chomp(String, String) failed");
assertEquals(" ", StringUtils.chomp(" foo", "foo"), "chomp(String, String) failed");
assertEquals("foo ", StringUtils.chomp("foo ", "foo"), "chomp(String, String) failed");
assertEquals(expectedResult, StringUtils.chop(original), "chop(String) failed");
assertNotNull(new StringUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(StringUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(StringUtils.class.getModifiers()));
assertEquals("", StringUtils.defaultString(null));
assertEquals("", StringUtils.defaultString(""));
assertEquals("abc", StringUtils.defaultString("abc"));
assertEquals("NULL", StringUtils.defaultString(null, "NULL"));
assertEquals("", StringUtils.defaultString("", "NULL"));
assertEquals("abc", StringUtils.defaultString("abc", "NULL"));
assertEquals("NULL", StringUtils.defaultIfBlank(CharBuffer.wrap(""), CharBuffer.wrap("NULL")).toString());
assertEquals("NULL", StringUtils.defaultIfBlank(CharBuffer.wrap(" "), CharBuffer.wrap("NULL")).toString());
assertEquals("abc", StringUtils.defaultIfBlank(CharBuffer.wrap("abc"), CharBuffer.wrap("NULL")).toString());
assertNull(StringUtils.defaultIfBlank(CharBuffer.wrap(""), (CharBuffer) null));
assertEquals("abc", s.toString());
assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(""), new StringBuffer("NULL")).toString());
assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(" "), new StringBuffer("NULL")).toString());
assertEquals("abc", StringUtils.defaultIfBlank(new StringBuffer("abc"), new StringBuffer("NULL")).toString());
assertNull(StringUtils.defaultIfBlank(new StringBuffer(""), (StringBuffer) null));
assertEquals("abc", s.toString());
assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuilder(""), new StringBuilder("NULL")).toString());
assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuilder(" "), new StringBuilder("NULL")).toString());
assertEquals("abc", StringUtils.defaultIfBlank(new StringBuilder("abc"), new StringBuilder("NULL")).toString());
assertNull(StringUtils.defaultIfBlank(new StringBuilder(""), (StringBuilder) null));
assertEquals("abc", s.toString());
assertEquals("NULL", StringUtils.defaultIfBlank(null, "NULL"));
assertEquals("NULL", StringUtils.defaultIfBlank("", "NULL"));
assertEquals("NULL", StringUtils.defaultIfBlank(" ", "NULL"));
assertEquals("abc", StringUtils.defaultIfBlank("abc", "NULL"));
assertNull(StringUtils.defaultIfBlank("", (String) null));
assertEquals("abc", s);
assertEquals("NULL", StringUtils.getIfBlank(null, () -> "NULL"));
assertEquals("NULL", StringUtils.getIfBlank("",  () -> "NULL"));
assertEquals("NULL", StringUtils.getIfBlank(" ", () -> "NULL"));
assertEquals("abc", StringUtils.getIfBlank("abc", () -> "NULL"));
assertNull(StringUtils.getIfBlank("", () -> null));
assertNull(StringUtils.defaultIfBlank("", (String) null));
assertEquals("abc", s);
assertEquals(0, numberOfCalls.getValue());
assertEquals(1, numberOfCalls.getValue());
assertEquals(2, numberOfCalls.getValue());
assertEquals(3, numberOfCalls.getValue());
assertEquals("NULL", StringUtils.defaultIfEmpty(CharBuffer.wrap(""), CharBuffer.wrap("NULL")).toString());
assertEquals("abc", StringUtils.defaultIfEmpty(CharBuffer.wrap("abc"), CharBuffer.wrap("NULL")).toString());
assertNull(StringUtils.defaultIfEmpty(CharBuffer.wrap(""), (CharBuffer) null));
assertEquals("abc", s.toString());
assertEquals("NULL", StringUtils.defaultIfEmpty(new StringBuffer(""), new StringBuffer("NULL")).toString());
assertEquals("abc", StringUtils.defaultIfEmpty(new StringBuffer("abc"), new StringBuffer("NULL")).toString());
assertNull(StringUtils.defaultIfEmpty(new StringBuffer(""), (StringBuffer) null));
assertEquals("abc", s.toString());
assertEquals("NULL", StringUtils.defaultIfEmpty(new StringBuilder(""), new StringBuilder("NULL")).toString());
assertEquals("abc", StringUtils.defaultIfEmpty(new StringBuilder("abc"), new StringBuilder("NULL")).toString());
assertNull(StringUtils.defaultIfEmpty(new StringBuilder(""), (StringBuilder) null));
assertEquals("abc", s.toString());
assertEquals("NULL", StringUtils.defaultIfEmpty(null, "NULL"));
assertEquals("NULL", StringUtils.defaultIfEmpty("", "NULL"));
assertEquals("abc", StringUtils.defaultIfEmpty("abc", "NULL"));
assertNull(StringUtils.getIfEmpty("", null));
assertEquals("abc", s);
assertEquals("NULL", StringUtils.getIfEmpty((String) null, () -> "NULL"));
assertEquals("NULL", StringUtils.getIfEmpty("", () -> "NULL"));
assertEquals("abc", StringUtils.getIfEmpty("abc", () -> "NULL"));
assertNull(StringUtils.getIfEmpty("", () -> null));
assertNull(StringUtils.defaultIfEmpty("", (String) null));
assertEquals("abc", s);
assertEquals(0, numberOfCalls.getValue());
assertEquals(1, numberOfCalls.getValue());
assertEquals(2, numberOfCalls.getValue());
assertNull(StringUtils.deleteWhitespace(null));
assertEquals("", StringUtils.deleteWhitespace(""));
assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  "));
assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE));
assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE));
assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("  \u00A0  \t\t\n\n \u202F  "));
assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("\u00A0\u202F"));
assertEquals("test", StringUtils.deleteWhitespace("\u000Bt  \t\n\u0009e\rs\n\n   \tt"));
assertNull(StringUtils.difference(null, null));
assertEquals("", StringUtils.difference("", ""));
assertEquals("abc", StringUtils.difference("", "abc"));
assertEquals("", StringUtils.difference("abc", ""));
assertEquals("i am a robot", StringUtils.difference(null, "i am a robot"));
assertEquals("i am a machine", StringUtils.difference("i am a machine", null));
assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot"));
assertEquals("", StringUtils.difference("abc", "abc"));
assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot"));
assertEquals(-1, StringUtils.indexOfDifference((String[]) null));
assertEquals(-1, StringUtils.indexOfDifference());
assertEquals(-1, StringUtils.indexOfDifference("abc"));
assertEquals(-1, StringUtils.indexOfDifference(null, null));
assertEquals(-1, StringUtils.indexOfDifference("", ""));
assertEquals(0, StringUtils.indexOfDifference("", null));
assertEquals(0, StringUtils.indexOfDifference("abc", null, null));
assertEquals(0, StringUtils.indexOfDifference(null, null, "abc"));
assertEquals(0, StringUtils.indexOfDifference("", "abc"));
assertEquals(0, StringUtils.indexOfDifference("abc", ""));
assertEquals(-1, StringUtils.indexOfDifference("abc", "abc"));
assertEquals(1, StringUtils.indexOfDifference("abc", "a"));
assertEquals(2, StringUtils.indexOfDifference("ab", "abxyz"));
assertEquals(2, StringUtils.indexOfDifference("abcde", "abxyz"));
assertEquals(0, StringUtils.indexOfDifference("abcde", "xyz"));
assertEquals(0, StringUtils.indexOfDifference("xyz", "abcde"));
assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot"));
assertEquals(-1, StringUtils.indexOfDifference(null, null));
assertEquals(0, StringUtils.indexOfDifference(null, "i am a robot"));
assertEquals(-1, StringUtils.indexOfDifference("", ""));
assertEquals(0, StringUtils.indexOfDifference("", "abc"));
assertEquals(0, StringUtils.indexOfDifference("abc", ""));
assertEquals(0, StringUtils.indexOfDifference("i am a machine", null));
assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot"));
assertEquals(-1, StringUtils.indexOfDifference("foo", "foo"));
assertEquals(0, StringUtils.indexOfDifference("i am a robot", "you are a robot"));
assertNotNull(StringUtils.EMPTY);
assertEquals("", StringUtils.EMPTY);
assertEquals(0, StringUtils.EMPTY.length());
assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30"));
assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00"));
assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E"));
assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD"));
assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD"));
assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD"));
assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD"));
assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD"));       //fail LANG-858
assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); //fail LANG-858
assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, StringUtils.getBytes(null, (Charset) null));
assertArrayEquals(StringUtils.EMPTY.getBytes(), StringUtils.getBytes(StringUtils.EMPTY, (Charset) null));
assertArrayEquals(StringUtils.EMPTY.getBytes(StandardCharsets.US_ASCII),StringUtils.getBytes(StringUtils.EMPTY, StandardCharsets.US_ASCII));
assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, StringUtils.getBytes(null, (String) null));
assertArrayEquals(StringUtils.EMPTY.getBytes(), StringUtils.getBytes(StringUtils.EMPTY, (String) null));
assertArrayEquals(StringUtils.EMPTY.getBytes(StandardCharsets.US_ASCII.name()),StringUtils.getBytes(StringUtils.EMPTY, StandardCharsets.US_ASCII.name()));
assertEquals("", StringUtils.getCommonPrefix((String[]) null));
assertEquals("", StringUtils.getCommonPrefix());
assertEquals("abc", StringUtils.getCommonPrefix("abc"));
assertEquals("", StringUtils.getCommonPrefix(null, null));
assertEquals("", StringUtils.getCommonPrefix("", ""));
assertEquals("", StringUtils.getCommonPrefix("", null));
assertEquals("", StringUtils.getCommonPrefix("abc", null, null));
assertEquals("", StringUtils.getCommonPrefix(null, null, "abc"));
assertEquals("", StringUtils.getCommonPrefix("", "abc"));
assertEquals("", StringUtils.getCommonPrefix("abc", ""));
assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc"));
assertEquals("a", StringUtils.getCommonPrefix("abc", "a"));
assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz"));
assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz"));
assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz"));
assertEquals("", StringUtils.getCommonPrefix("xyz", "abcde"));
assertEquals("i am a ", StringUtils.getCommonPrefix("i am a machine", "i am a robot"));
assertNull(StringUtils.getDigits(null));
assertEquals("", StringUtils.getDigits(""));
assertEquals("", StringUtils.getDigits("abc"));
assertEquals("1000", StringUtils.getDigits("1000$"));
assertEquals("12345", StringUtils.getDigits("123password45"));
assertEquals("5417543010", StringUtils.getDigits("(541) 754-3010"));
assertEquals("\u0967\u0968\u0969", StringUtils.getDigits("\u0967\u0968\u0969"));
assertEquals(0, StringUtils.getFuzzyDistance("", "", Locale.ENGLISH));
assertEquals(0, StringUtils.getFuzzyDistance("Workshop", "b", Locale.ENGLISH));
assertEquals(1, StringUtils.getFuzzyDistance("Room", "o", Locale.ENGLISH));
assertEquals(1, StringUtils.getFuzzyDistance("Workshop", "w", Locale.ENGLISH));
assertEquals(2, StringUtils.getFuzzyDistance("Workshop", "ws", Locale.ENGLISH));
assertEquals(4, StringUtils.getFuzzyDistance("Workshop", "wo", Locale.ENGLISH));
assertEquals(3, StringUtils.getFuzzyDistance("Apache Software Foundation", "asf", Locale.ENGLISH));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getFuzzyDistance(null, null, null));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getFuzzyDistance(null, "clear", Locale.ENGLISH));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getFuzzyDistance(" ", null, Locale.ENGLISH));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getFuzzyDistance(" ", "clear", null));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getJaroWinklerDistance(null, null));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getJaroWinklerDistance(null, "clear"));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getJaroWinklerDistance(" ", null));
assertEquals(0.93d, StringUtils.getJaroWinklerDistance("frog", "fog"));
assertEquals(0.0d, StringUtils.getJaroWinklerDistance("fly", "ant"));
assertEquals(0.44d, StringUtils.getJaroWinklerDistance("elephant", "hippo"));
assertEquals(0.84d, StringUtils.getJaroWinklerDistance("dwayne", "duane"));
assertEquals(0.93d, StringUtils.getJaroWinklerDistance("ABC Corporation", "ABC Corp"));
assertEquals(0.95d, StringUtils.getJaroWinklerDistance("D N H Enterprises Inc", "D & H Enterprises, Inc."));
assertEquals(0.92d, StringUtils.getJaroWinklerDistance("My Gym Children's Fitness Center", "My Gym. Childrens Fitness"));
assertEquals(0.88d, StringUtils.getJaroWinklerDistance("PENNSYLVANIA", "PENNCISYLVNIA"));
assertEquals(0.63d, StringUtils.getJaroWinklerDistance("Haus Ingeborg", "Ingeborg Esser"));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getLevenshteinDistance("a", null));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getLevenshteinDistance(null, "a", 0));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getLevenshteinDistance(null, "a"));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getLevenshteinDistance("a", null, 0));
assertEquals(0, StringUtils.getLevenshteinDistance("", ""));
assertEquals(1, StringUtils.getLevenshteinDistance("", "a"));
assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", ""));
assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog"));
assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant"));
assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo"));
assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant"));
assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz"));
assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo"));
assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo"));
assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0));
assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8));
assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7));
assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6));
assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0));
assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0));
assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 0));
assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 2));
assertEquals(-1, StringUtils.getLevenshteinDistance("aaa", "bbb", 2));
assertEquals(3, StringUtils.getLevenshteinDistance("aaa", "bbb", 3));
assertEquals(6, StringUtils.getLevenshteinDistance("aaaaaa", "b", 10));
assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 8));
assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 4));
assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 7));
assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 3));
assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 2));
assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 2));
assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "b", 6));
assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 1));
assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 1));
assertEquals(-1, StringUtils.getLevenshteinDistance("12345", "1234567", 1));
assertEquals(-1, StringUtils.getLevenshteinDistance("1234567", "12345", 1));
assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog", 1));
assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant", 3));
assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo", 7));
assertEquals(-1, StringUtils.getLevenshteinDistance("elephant", "hippo", 6));
assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant", 7));
assertEquals(-1, StringUtils.getLevenshteinDistance("hippo", "elephant", 6));
assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz", 8));
assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo", 8));
assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo", 1));
assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog", Integer.MAX_VALUE));
assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant", Integer.MAX_VALUE));
assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo", Integer.MAX_VALUE));
assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant", Integer.MAX_VALUE));
assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz", Integer.MAX_VALUE));
assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo", Integer.MAX_VALUE));
assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo", Integer.MAX_VALUE));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getLevenshteinDistance("a", "a", -1));
assertFalse(StringUtils.isAllLowerCase(null));
assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY));
assertFalse(StringUtils.isAllLowerCase("  "));
assertTrue(StringUtils.isAllLowerCase("abc"));
assertFalse(StringUtils.isAllLowerCase("abc "));
assertFalse(StringUtils.isAllLowerCase("abc\n"));
assertFalse(StringUtils.isAllLowerCase("abC"));
assertFalse(StringUtils.isAllLowerCase("ab c"));
assertFalse(StringUtils.isAllLowerCase("ab1c"));
assertFalse(StringUtils.isAllLowerCase("ab/c"));
assertFalse(StringUtils.isAllUpperCase(null));
assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY));
assertFalse(StringUtils.isAllUpperCase("  "));
assertTrue(StringUtils.isAllUpperCase("ABC"));
assertFalse(StringUtils.isAllUpperCase("ABC "));
assertFalse(StringUtils.isAllUpperCase("ABC\n"));
assertFalse(StringUtils.isAllUpperCase("aBC"));
assertFalse(StringUtils.isAllUpperCase("A C"));
assertFalse(StringUtils.isAllUpperCase("A1C"));
assertFalse(StringUtils.isAllUpperCase("A/C"));
assertFalse(StringUtils.isMixedCase(null));
assertFalse(StringUtils.isMixedCase(StringUtils.EMPTY));
assertFalse(StringUtils.isMixedCase(" "));
assertFalse(StringUtils.isMixedCase("A"));
assertFalse(StringUtils.isMixedCase("a"));
assertFalse(StringUtils.isMixedCase("/"));
assertFalse(StringUtils.isMixedCase("A/"));
assertFalse(StringUtils.isMixedCase("/b"));
assertFalse(StringUtils.isMixedCase("abc"));
assertFalse(StringUtils.isMixedCase("ABC"));
assertTrue(StringUtils.isMixedCase("aBc"));
assertTrue(StringUtils.isMixedCase("aBc "));
assertTrue(StringUtils.isMixedCase("A c"));
assertTrue(StringUtils.isMixedCase("aBc\n"));
assertTrue(StringUtils.isMixedCase("A1c"));
assertTrue(StringUtils.isMixedCase("a/C"));
assertNull(StringUtils.join((Object[]) null, ','));
assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));
assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));
assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));
assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));
assertNull(StringUtils.join((Object[]) null, ',', 0, 1));
assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length - 1));
assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));
assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST, '/', 0, 1));
assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));
assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));
assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));
assertNull(StringUtils.join((byte[]) null, ','));
assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR));
assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
assertNull(StringUtils.join((byte[]) null, SEPARATOR_CHAR, 0, 1));
assertEquals(StringUtils.EMPTY, StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 0, 0));
assertEquals(StringUtils.EMPTY, StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 0));
assertNull(StringUtils.join((boolean[]) null, COMMA_SEPARATOR_CHAR));
assertEquals("false;false", StringUtils.join(ARRAY_FALSE_FALSE, SEPARATOR_CHAR));
assertEquals("", StringUtils.join(EMPTY, SEPARATOR_CHAR));
assertEquals("false,true,false", StringUtils.join(ARRAY_FALSE_TRUE_FALSE, COMMA_SEPARATOR_CHAR));
assertEquals("true", StringUtils.join(ARRAY_FALSE_TRUE, SEPARATOR_CHAR, 1, 2));
assertNull(StringUtils.join((boolean[]) null, SEPARATOR_CHAR, 0, 1));
assertEquals(StringUtils.EMPTY, StringUtils.join(ARRAY_FALSE_FALSE, SEPARATOR_CHAR, 0, 0));
assertEquals(StringUtils.EMPTY, StringUtils.join(ARRAY_FALSE_TRUE_FALSE, SEPARATOR_CHAR, 1, 0));
assertNull(StringUtils.join((char[]) null, ','));
assertEquals("1;2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR));
assertEquals("2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
assertNull(StringUtils.join((char[]) null, SEPARATOR_CHAR, 0, 1));
assertEquals(StringUtils.EMPTY, StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 0, 0));
assertEquals(StringUtils.EMPTY, StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 0));
assertNull(StringUtils.join((double[]) null, ','));
assertEquals("1.0;2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR));
assertEquals("2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
assertNull(StringUtils.join((double[]) null, SEPARATOR_CHAR, 0, 1));
assertEquals(StringUtils.EMPTY, StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 0, 0));
assertEquals(StringUtils.EMPTY, StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 1, 0));
assertNull(StringUtils.join((float[]) null, ','));
assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR));
assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
assertNull(StringUtils.join((float[]) null, SEPARATOR_CHAR, 0, 1));
assertEquals(StringUtils.EMPTY, StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 0, 0));
assertEquals(StringUtils.EMPTY, StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 0));
assertNull(StringUtils.join((int[]) null, ','));
assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR));
assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
assertNull(StringUtils.join((int[]) null, SEPARATOR_CHAR, 0, 1));
assertEquals(StringUtils.EMPTY, StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 0, 0));
assertEquals(StringUtils.EMPTY, StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 0));
assertNull(StringUtils.join((long[]) null, ','));
assertEquals("1;2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR));
assertEquals("2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
assertNull(StringUtils.join((long[]) null, SEPARATOR_CHAR, 0, 1));
assertEquals(StringUtils.EMPTY, StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 0, 0));
assertEquals(StringUtils.EMPTY, StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 0));
assertNull(StringUtils.join((short[]) null, ','));
assertEquals("1;2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR));
assertEquals("2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
assertNull(StringUtils.join((short[]) null, SEPARATOR_CHAR, 0, 1));
assertEquals(StringUtils.EMPTY, StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 0, 0));
assertEquals(StringUtils.EMPTY, StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 0));
assertNull(StringUtils.join((Object[]) null, null));
assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null));
assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, ""));
assertEquals("", StringUtils.join(NULL_ARRAY_LIST, null));
assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, null));
assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, ""));
assertEquals("", StringUtils.join(MIXED_ARRAY_LIST, "", 0, MIXED_ARRAY_LIST.length - 1));
assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, delimiter));
assertEquals(String.join(delimiter, ARRAY_LIST), StringUtils.join(ARRAY_LIST, delimiter));
assertEquals(delimiter + delimiter + "foo", StringUtils.join(MIXED_ARRAY_LIST, delimiter));
assertEquals(String.join(delimiter, "foo", "2"), StringUtils.join(MIXED_TYPE_LIST, delimiter));
assertEquals(delimiter, StringUtils.join(MIXED_ARRAY_LIST, delimiter, 0, MIXED_ARRAY_LIST.length - 1));
assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, delimiter, 0, 1));
assertEquals(String.join(delimiter, "foo", "2"), StringUtils.join(MIXED_TYPE_LIST, delimiter, 0, 2));
assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, delimiter, 1, 2));
assertEquals("", StringUtils.join(MIXED_TYPE_LIST, delimiter, 2, 1));
assertNull(StringUtils.join((Iterable<?>) null, ','));
assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR));
assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR));
assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR));
assertEquals("foo", StringUtils.join(Collections.singleton("foo"), 'x'));
assertNull(StringUtils.join((Iterable<?>) null, null));
assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null));
assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), ""));
assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x"));
assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null));
assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null));
assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null));
assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), ""));
assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR));
assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR));
assertNull(StringUtils.join((Iterator<?>) null, ','));
assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR));
assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR));
assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR));
assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x'));
assertEquals("null", StringUtils.join(Arrays.asList(NULL_TO_STRING_LIST).iterator(), SEPARATOR_CHAR));
assertNull(StringUtils.join((Iterator<?>) null, null));
assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null));
assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), ""));
assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), "x"));
assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), null));
assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null));
assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null));
assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), ""));
assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR));
assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR));
assertEquals("null", StringUtils.join(Arrays.asList(NULL_TO_STRING_LIST).iterator(), SEPARATOR));
assertNull(StringUtils.join((List<String>) null, null));
assertEquals(TEXT_LIST_NOSEP, StringUtils.join(STRING_LIST, null));
assertEquals(TEXT_LIST_NOSEP, StringUtils.join(STRING_LIST, ""));
assertEquals("", StringUtils.join(NULL_STRING_LIST, null));
assertEquals("", StringUtils.join(EMPTY_STRING_LIST, null));
assertEquals("", StringUtils.join(EMPTY_STRING_LIST, ""));
assertEquals("", StringUtils.join(MIXED_STRING_LIST, "", 0, MIXED_STRING_LIST.size()- 1));
assertEquals("/", StringUtils.join(MIXED_STRING_LIST, '/', 0, MIXED_STRING_LIST.size() - 1));
assertEquals("foo", StringUtils.join(MIXED_TYPE_OBJECT_LIST, '/', 0, 1));
assertEquals("foo/2", StringUtils.join(MIXED_TYPE_OBJECT_LIST, '/', 0, 2));
assertEquals("2", StringUtils.join(MIXED_TYPE_OBJECT_LIST, '/', 1, 2));
assertEquals("", StringUtils.join(MIXED_TYPE_OBJECT_LIST, '/', 2, 1));
assertNull(null, StringUtils.join((List<?>) null, '/', 0, 1));
assertEquals("", StringUtils.join(EMPTY_STRING_LIST, delimiter));
assertEquals(String.join(delimiter, STRING_LIST), StringUtils.join(STRING_LIST, delimiter));
assertEquals(delimiter + delimiter + "foo", StringUtils.join(MIXED_STRING_LIST, delimiter));
assertEquals(String.join(delimiter, "foo", "2"), StringUtils.join(MIXED_TYPE_OBJECT_LIST, delimiter));
assertEquals(delimiter, StringUtils.join(MIXED_STRING_LIST, delimiter, 0, MIXED_STRING_LIST.size() - 1));
assertEquals("foo", StringUtils.join(MIXED_TYPE_OBJECT_LIST, delimiter, 0, 1));
assertEquals(String.join(delimiter, "foo", "2"), StringUtils.join(MIXED_TYPE_OBJECT_LIST, delimiter, 0, 2));
assertEquals("2", StringUtils.join(MIXED_TYPE_OBJECT_LIST, delimiter, 1, 2));
assertEquals("", StringUtils.join(MIXED_TYPE_OBJECT_LIST, delimiter, 2, 1));
assertNull(null, StringUtils.join((List<?>) null, delimiter, 0, 1));
//        assertNull(StringUtils.join(null)); // generates warning
assertNull(StringUtils.join((Object[]) null)); // equivalent explicit cast
assertEquals("", StringUtils.join()); // empty array
assertEquals("", StringUtils.join((Object) null)); // => new Object[]{null}
assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST));
assertEquals("", StringUtils.join(NULL_ARRAY_LIST));
assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST));
assertEquals("abc", StringUtils.join("a", "b", "c"));
assertEquals("a", StringUtils.join(null, "a", ""));
assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST));
assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST));
assertEquals(expected, actual);
assertEquals("abc", StringUtils.join("a", "b", "c"));
assertEquals("a", StringUtils.join(null, "", "a"));
assertNull(StringUtils.join((Object[]) null));
assertEquals("", StringUtils.joinWith(delimiter)); // empty array
assertEquals("", StringUtils.joinWith(delimiter, (Object[]) NULL_ARRAY_LIST));
assertEquals("null", StringUtils.joinWith(delimiter, NULL_TO_STRING_LIST)); // toString method prints 'null'
assertEquals(String.join(delimiter, "a", "b", "c"), StringUtils.joinWith(delimiter, "a", "b", "c"));
assertEquals(String.join(delimiter, "", "a", ""), StringUtils.joinWith(delimiter, null, "a", ""));
assertEquals(String.join(delimiter, "", "a", ""), StringUtils.joinWith(delimiter, "", "a", ""));
assertEquals("ab", StringUtils.joinWith(null, "a", "b"));
assertThrows(IllegalArgumentException.class, () -> StringUtils.joinWith(",", (Object[]) null));
assertEquals("t", StringUtils.replaceChars("\u00DE", '\u00DE', 't'));
assertEquals("t", StringUtils.replaceChars("\u00FE", '\u00FE', 't'));
assertEquals("12", StringUtils.stripEnd("120.00", ".0"));
assertEquals("121", StringUtils.stripEnd("121.00", ".0"));
assertNull(StringUtils.leftPad(null, 5));
assertEquals("     ", StringUtils.leftPad("", 5));
assertEquals("  abc", StringUtils.leftPad("abc", 5));
assertEquals("abc", StringUtils.leftPad("abc", 2));
assertNull(StringUtils.leftPad(null, 5, ' '));
assertEquals("     ", StringUtils.leftPad("", 5, ' '));
assertEquals("  abc", StringUtils.leftPad("abc", 5, ' '));
assertEquals("xxabc", StringUtils.leftPad("abc", 5, 'x'));
assertEquals("\uffff\uffffabc", StringUtils.leftPad("abc", 5, '\uffff'));
assertEquals("abc", StringUtils.leftPad("abc", 2, ' '));
assertEquals(10000, str.length());
assertTrue(StringUtils.containsOnly(str, 'a'));
assertNull(StringUtils.leftPad(null, 5, "-+"));
assertNull(StringUtils.leftPad(null, 5, null));
assertEquals("     ", StringUtils.leftPad("", 5, " "));
assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+"));
assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~"));
assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~"));
assertEquals("abc", StringUtils.leftPad("abc", 2, " "));
assertEquals("abc", StringUtils.leftPad("abc", -1, " "));
assertEquals("  abc", StringUtils.leftPad("abc", 5, null));
assertEquals("  abc", StringUtils.leftPad("abc", 5, ""));
assertEquals(0, StringUtils.length(CharBuffer.wrap("")));
assertEquals(1, StringUtils.length(CharBuffer.wrap("A")));
assertEquals(1, StringUtils.length(CharBuffer.wrap(" ")));
assertEquals(8, StringUtils.length(CharBuffer.wrap("ABCDEFGH")));
assertEquals(0, StringUtils.length(null));
assertEquals(0, StringUtils.length(""));
assertEquals(0, StringUtils.length(StringUtils.EMPTY));
assertEquals(1, StringUtils.length("A"));
assertEquals(1, StringUtils.length(" "));
assertEquals(8, StringUtils.length("ABCDEFGH"));
assertEquals(0, StringUtils.length(new StringBuffer("")));
assertEquals(0, StringUtils.length(new StringBuffer(StringUtils.EMPTY)));
assertEquals(1, StringUtils.length(new StringBuffer("A")));
assertEquals(1, StringUtils.length(new StringBuffer(" ")));
assertEquals(8, StringUtils.length(new StringBuffer("ABCDEFGH")));
assertEquals(0, StringUtils.length(new StringBuilder("")));
assertEquals(0, StringUtils.length(new StringBuilder(StringUtils.EMPTY)));
assertEquals(1, StringUtils.length(new StringBuilder("A")));
assertEquals(1, StringUtils.length(new StringBuilder(" ")));
assertEquals(8, StringUtils.length(new StringBuilder("ABCDEFGH")));
assertNull(StringUtils.lowerCase(null));
assertNull(StringUtils.lowerCase(null, Locale.ENGLISH));
assertEquals("foo test thing", StringUtils.lowerCase("fOo test THING"), "lowerCase(String) failed");
assertEquals("", StringUtils.lowerCase(""), "lowerCase(empty-string) failed");
assertEquals("foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH),"lowerCase(String, Locale) failed");
assertEquals("", StringUtils.lowerCase("", Locale.ENGLISH), "lowerCase(empty-string, Locale) failed");
assertFalse(Character.isWhitespace('\u00A0'));
assertNull(StringUtils.normalizeSpace(null));
assertEquals("", StringUtils.normalizeSpace(""));
assertEquals("", StringUtils.normalizeSpace(" "));
assertEquals("", StringUtils.normalizeSpace("\t"));
assertEquals("", StringUtils.normalizeSpace("\n"));
assertEquals("", StringUtils.normalizeSpace("\u0009"));
assertEquals("", StringUtils.normalizeSpace("\u000B"));
assertEquals("", StringUtils.normalizeSpace("\u000C"));
assertEquals("", StringUtils.normalizeSpace("\u001C"));
assertEquals("", StringUtils.normalizeSpace("\u001D"));
assertEquals("", StringUtils.normalizeSpace("\u001E"));
assertEquals("", StringUtils.normalizeSpace("\u001F"));
assertEquals("", StringUtils.normalizeSpace("\f"));
assertEquals("", StringUtils.normalizeSpace("\r"));
assertEquals("a", StringUtils.normalizeSpace("  a  "));
assertEquals("a b c", StringUtils.normalizeSpace("  a  b   c  "));
assertEquals("a b c", StringUtils.normalizeSpace("a\t\f\r  b\u000B   c\n"));
assertEquals("a   b c", StringUtils.normalizeSpace("a\t\f\r  " + HARD_SPACE + HARD_SPACE + "b\u000B   c\n"));
assertEquals("b", StringUtils.normalizeSpace("\u0000b"));
assertEquals("b", StringUtils.normalizeSpace("b\u0000"));
assertNull(StringUtils.overlay(null, null, 2, 4));
assertNull(StringUtils.overlay(null, null, -2, -4));
assertEquals("", StringUtils.overlay("", null, 0, 0));
assertEquals("", StringUtils.overlay("", "", 0, 0));
assertEquals("zzzz", StringUtils.overlay("", "zzzz", 0, 0));
assertEquals("zzzz", StringUtils.overlay("", "zzzz", 2, 4));
assertEquals("zzzz", StringUtils.overlay("", "zzzz", -2, -4));
assertEquals("abef", StringUtils.overlay("abcdef", null, 2, 4));
assertEquals("abef", StringUtils.overlay("abcdef", null, 4, 2));
assertEquals("abef", StringUtils.overlay("abcdef", "", 2, 4));
assertEquals("abef", StringUtils.overlay("abcdef", "", 4, 2));
assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 2, 4));
assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 4, 2));
assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", -1, 4));
assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", 4, -1));
assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -2, -1));
assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -1, -2));
assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 4, 10));
assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 4));
assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 8, 10));
assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 8));
assertNull(StringUtils.prependIfMissing(null, null), "prependIfMissing(null,null)");
assertEquals("abc", StringUtils.prependIfMissing("abc", null), "prependIfMissing(abc,null)");
assertEquals("xyz", StringUtils.prependIfMissing("", "xyz"), "prependIfMissing(\"\",xyz)");
assertEquals("xyzabc", StringUtils.prependIfMissing("abc", "xyz"), "prependIfMissing(abc,xyz)");
assertEquals("xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz"), "prependIfMissing(xyzabc,xyz)");
assertEquals("xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz"), "prependIfMissing(XYZabc,xyz)");
assertNull(StringUtils.prependIfMissing(null, null, (CharSequence[]) null), "prependIfMissing(null,null null)");
assertEquals("abc", StringUtils.prependIfMissing("abc", null, (CharSequence[]) null), "prependIfMissing(abc,null,null)");
assertEquals("xyz", StringUtils.prependIfMissing("", "xyz", (CharSequence[]) null), "prependIfMissing(\"\",xyz,null)");
assertEquals("xyzabc", StringUtils.prependIfMissing("abc", "xyz", null), "prependIfMissing(abc,xyz,{null})");
assertEquals("abc", StringUtils.prependIfMissing("abc", "xyz", ""), "prependIfMissing(abc,xyz,\"\")");
assertEquals("xyzabc", StringUtils.prependIfMissing("abc", "xyz", "mno"), "prependIfMissing(abc,xyz,mno)");
assertEquals("xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz", "mno"), "prependIfMissing(xyzabc,xyz,mno)");
assertEquals("mnoabc", StringUtils.prependIfMissing("mnoabc", "xyz", "mno"), "prependIfMissing(mnoabc,xyz,mno)");
assertEquals("xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz", "mno"), "prependIfMissing(XYZabc,xyz,mno)");
assertEquals("xyzMNOabc", StringUtils.prependIfMissing("MNOabc", "xyz", "mno"), "prependIfMissing(MNOabc,xyz,mno)");
assertNull(StringUtils.prependIfMissingIgnoreCase(null, null), "prependIfMissingIgnoreCase(null,null)");
assertEquals("abc", StringUtils.prependIfMissingIgnoreCase("abc", null), "prependIfMissingIgnoreCase(abc,null)");
assertEquals("xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz"), "prependIfMissingIgnoreCase(\"\",xyz)");
assertEquals("xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz"), "prependIfMissingIgnoreCase(abc,xyz)");
assertEquals("xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz"), "prependIfMissingIgnoreCase(xyzabc,xyz)");
assertEquals("XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz"), "prependIfMissingIgnoreCase(XYZabc,xyz)");
assertNull(StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null), "prependIfMissingIgnoreCase(null,null null)");
assertEquals("abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null), "prependIfMissingIgnoreCase(abc,null,null)");
assertEquals("xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null), "prependIfMissingIgnoreCase(\"\",xyz,null)");
assertEquals("xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", null), "prependIfMissingIgnoreCase(abc,xyz,{null})");
assertEquals("abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", ""), "prependIfMissingIgnoreCase(abc,xyz,\"\")");
assertEquals("xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno"), "prependIfMissingIgnoreCase(abc,xyz,mno)");
assertEquals("xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno"), "prependIfMissingIgnoreCase(xyzabc,xyz,mno)");
assertEquals("mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno"), "prependIfMissingIgnoreCase(mnoabc,xyz,mno)");
assertEquals("XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno"), "prependIfMissingIgnoreCase(XYZabc,xyz,mno)");
assertEquals("MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno"), "prependIfMissingIgnoreCase(MNOabc,xyz,mno)");
assertEquals(SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)),"uncapitalize(capitalize(String)) failed");
assertEquals(SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)),"capitalize(uncapitalize(String)) failed");
assertEquals(FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)),"uncapitalize(capitalize(String)) failed");
assertEquals(FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)),"capitalize(uncapitalize(String)) failed");
assertNull(StringUtils.remove(null, null));
assertNull(StringUtils.remove(null, 'a'));
assertEquals("", StringUtils.remove("", null));
assertEquals("", StringUtils.remove("", 'a'));
assertEquals("qeed", StringUtils.remove("queued", 'u'));
assertEquals("queued", StringUtils.remove("queued", 'z'));
assertNull(StringUtils.remove(null, null));
assertNull(StringUtils.remove(null, ""));
assertNull(StringUtils.remove(null, "a"));
assertEquals("", StringUtils.remove("", null));
assertEquals("", StringUtils.remove("", ""));
assertEquals("", StringUtils.remove("", "a"));
assertNull(StringUtils.remove(null, null));
assertEquals("", StringUtils.remove("", null));
assertEquals("a", StringUtils.remove("a", null));
assertNull(StringUtils.remove(null, ""));
assertEquals("", StringUtils.remove("", ""));
assertEquals("a", StringUtils.remove("a", ""));
assertEquals("qd", StringUtils.remove("queued", "ue"));
assertEquals("queued", StringUtils.remove("queued", "zz"));
assertNull(StringUtils.removeAll(null, ""));
assertEquals("any", StringUtils.removeAll("any", null));
assertEquals("any", StringUtils.removeAll("any", ""));
assertEquals("", StringUtils.removeAll("any", ".*"));
assertEquals("", StringUtils.removeAll("any", ".+"));
assertEquals("", StringUtils.removeAll("any", ".?"));
assertEquals("A\nB", StringUtils.removeAll("A<__>\n<__>B", "<.*>"));
assertEquals("AB", StringUtils.removeAll("A<__>\n<__>B", "(?s)<.*>"));
assertEquals("ABC123", StringUtils.removeAll("ABCabc123abc", "[a-z]"));
assertThrows(PatternSyntaxException.class,() -> StringUtils.removeAll("any", "{badRegexSyntax}"),"StringUtils.removeAll expecting PatternSyntaxException");
assertNull(StringUtils.removeEnd(null, null));
assertNull(StringUtils.removeEnd(null, ""));
assertNull(StringUtils.removeEnd(null, "a"));
assertEquals(StringUtils.removeEnd("", null), "");
assertEquals(StringUtils.removeEnd("", ""), "");
assertEquals(StringUtils.removeEnd("", "a"), "");
assertEquals(StringUtils.removeEnd("www.domain.com.", ".com"), "www.domain.com.");
assertEquals(StringUtils.removeEnd("www.domain.com", ".com"), "www.domain");
assertEquals(StringUtils.removeEnd("www.domain", ".com"), "www.domain");
assertEquals(StringUtils.removeEnd("domain.com", ""), "domain.com");
assertEquals(StringUtils.removeEnd("domain.com", null), "domain.com");
assertNull(StringUtils.removeEndIgnoreCase(null, null), "removeEndIgnoreCase(null, null)");
assertNull(StringUtils.removeEndIgnoreCase(null, ""), "removeEndIgnoreCase(null, \"\")");
assertNull(StringUtils.removeEndIgnoreCase(null, "a"), "removeEndIgnoreCase(null, \"a\")");
assertEquals(StringUtils.removeEndIgnoreCase("", null), "", "removeEndIgnoreCase(\"\", null)");
assertEquals(StringUtils.removeEndIgnoreCase("", ""), "", "removeEndIgnoreCase(\"\", \"\")");
assertEquals(StringUtils.removeEndIgnoreCase("", "a"), "", "removeEndIgnoreCase(\"\", \"a\")");
assertEquals(StringUtils.removeEndIgnoreCase("www.domain.com.", ".com"), "www.domain.com.", "removeEndIgnoreCase(\"www.domain.com.\", \".com\")");
assertEquals(StringUtils.removeEndIgnoreCase("www.domain.com", ".com"), "www.domain", "removeEndIgnoreCase(\"www.domain.com\", \".com\")");
assertEquals(StringUtils.removeEndIgnoreCase("www.domain", ".com"), "www.domain", "removeEndIgnoreCase(\"www.domain\", \".com\")");
assertEquals(StringUtils.removeEndIgnoreCase("domain.com", ""), "domain.com", "removeEndIgnoreCase(\"domain.com\", \"\")");
assertEquals(StringUtils.removeEndIgnoreCase("domain.com", null), "domain.com", "removeEndIgnoreCase(\"domain.com\", null)");
assertEquals(StringUtils.removeEndIgnoreCase("www.domain.com", ".COM"), "www.domain", "removeEndIgnoreCase(\"www.domain.com\", \".COM\")");
assertEquals(StringUtils.removeEndIgnoreCase("www.domain.COM", ".com"), "www.domain", "removeEndIgnoreCase(\"www.domain.COM\", \".com\")");
assertNull(StringUtils.removeFirst(null, ""));
assertEquals("any", StringUtils.removeFirst("any", null));
assertEquals("any", StringUtils.removeFirst("any", ""));
assertEquals("", StringUtils.removeFirst("any", ".*"));
assertEquals("", StringUtils.removeFirst("any", ".+"));
assertEquals("bc", StringUtils.removeFirst("abc", ".?"));
assertEquals("A\n<__>B", StringUtils.removeFirst("A<__>\n<__>B", "<.*>"));
assertEquals("AB", StringUtils.removeFirst("A<__>\n<__>B", "(?s)<.*>"));
assertEquals("ABCbc123", StringUtils.removeFirst("ABCabc123", "[a-z]"));
assertEquals("ABC123abc", StringUtils.removeFirst("ABCabc123abc", "[a-z]+"));
assertThrows(PatternSyntaxException.class,() -> StringUtils.removeFirst("any", "{badRegexSyntax}"),"StringUtils.removeFirst expecting PatternSyntaxException");
assertNull(StringUtils.removeIgnoreCase(null, null));
assertNull(StringUtils.removeIgnoreCase(null, ""));
assertNull(StringUtils.removeIgnoreCase(null, "a"));
assertEquals("", StringUtils.removeIgnoreCase("", null));
assertEquals("", StringUtils.removeIgnoreCase("", ""));
assertEquals("", StringUtils.removeIgnoreCase("", "a"));
assertNull(StringUtils.removeIgnoreCase(null, null));
assertEquals("", StringUtils.removeIgnoreCase("", null));
assertEquals("a", StringUtils.removeIgnoreCase("a", null));
assertNull(StringUtils.removeIgnoreCase(null, ""));
assertEquals("", StringUtils.removeIgnoreCase("", ""));
assertEquals("a", StringUtils.removeIgnoreCase("a", ""));
assertEquals("qd", StringUtils.removeIgnoreCase("queued", "ue"));
assertEquals("queued", StringUtils.removeIgnoreCase("queued", "zz"));
assertEquals("qd", StringUtils.removeIgnoreCase("quEUed", "UE"));
assertEquals("queued", StringUtils.removeIgnoreCase("queued", "zZ"));
assertEquals("\u0130", StringUtils.removeIgnoreCase("\u0130x", "x"));
assertNull(StringUtils.removePattern(null, ""));
assertEquals("any", StringUtils.removePattern("any", null));
assertEquals("", StringUtils.removePattern("", ""));
assertEquals("", StringUtils.removePattern("", ".*"));
assertEquals("", StringUtils.removePattern("", ".+"));
assertEquals("AB", StringUtils.removePattern("A<__>\n<__>B", "<.*>"));
assertEquals("AB", StringUtils.removePattern("A<__>\\n<__>B", "<.*>"));
assertEquals("", StringUtils.removePattern("<A>x\\ny</A>", "<A>.*</A>"));
assertEquals("", StringUtils.removePattern("<A>\nxy\n</A>", "<A>.*</A>"));
assertEquals("ABC123", StringUtils.removePattern("ABCabc123", "[a-z]"));
assertNull(StringUtils.removeStart(null, '\0'));
assertNull(StringUtils.removeStart(null, 'a'));
assertEquals(StringUtils.removeStart("", '\0'), "");
assertEquals(StringUtils.removeStart("", 'a'), "");
assertEquals(StringUtils.removeStart("/path", '/'), "path");
assertEquals(StringUtils.removeStart("path", '/'), "path");
assertEquals(StringUtils.removeStart("path", '\0'), "path");
assertNull(StringUtils.removeStart(null, null));
assertNull(StringUtils.removeStart(null, ""));
assertNull(StringUtils.removeStart(null, "a"));
assertEquals(StringUtils.removeStart("", null), "");
assertEquals(StringUtils.removeStart("", ""), "");
assertEquals(StringUtils.removeStart("", "a"), "");
assertEquals(StringUtils.removeStart("www.domain.com", "www."), "domain.com");
assertEquals(StringUtils.removeStart("domain.com", "www."), "domain.com");
assertEquals(StringUtils.removeStart("domain.com", ""), "domain.com");
assertEquals(StringUtils.removeStart("domain.com", null), "domain.com");
assertNull(StringUtils.removeStartIgnoreCase(null, null), "removeStartIgnoreCase(null, null)");
assertNull(StringUtils.removeStartIgnoreCase(null, ""), "removeStartIgnoreCase(null, \"\")");
assertNull(StringUtils.removeStartIgnoreCase(null, "a"), "removeStartIgnoreCase(null, \"a\")");
assertEquals(StringUtils.removeStartIgnoreCase("", null), "", "removeStartIgnoreCase(\"\", null)");
assertEquals(StringUtils.removeStartIgnoreCase("", ""), "", "removeStartIgnoreCase(\"\", \"\")");
assertEquals(StringUtils.removeStartIgnoreCase("", "a"), "", "removeStartIgnoreCase(\"\", \"a\")");
assertEquals(StringUtils.removeStartIgnoreCase("www.domain.com", "www."), "domain.com", "removeStartIgnoreCase(\"www.domain.com\", \"www.\")");
assertEquals(StringUtils.removeStartIgnoreCase("domain.com", "www."), "domain.com", "removeStartIgnoreCase(\"domain.com\", \"www.\")");
assertEquals(StringUtils.removeStartIgnoreCase("domain.com", ""), "domain.com", "removeStartIgnoreCase(\"domain.com\", \"\")");
assertEquals(StringUtils.removeStartIgnoreCase("domain.com", null), "domain.com", "removeStartIgnoreCase(\"domain.com\", null)");
assertEquals(StringUtils.removeStartIgnoreCase("www.domain.com", "WWW."), "domain.com", "removeStartIgnoreCase(\"www.domain.com\", \"WWW.\")");
assertEquals("zzz", StringUtils.repeat('z', 3));
assertEquals("", StringUtils.repeat('z', 0));
assertEquals("", StringUtils.repeat('z', -2));
assertNull(StringUtils.repeat(null, 2));
assertEquals("", StringUtils.repeat("ab", 0));
assertEquals("", StringUtils.repeat("", 3));
assertEquals("aaa", StringUtils.repeat("a", 3));
assertEquals("", StringUtils.repeat("a", -2));
assertEquals("ababab", StringUtils.repeat("ab", 3));
assertEquals("abcabcabc", StringUtils.repeat("abc", 3));
assertEquals(10000, str.length());
assertTrue(StringUtils.containsOnly(str, 'a'));
assertNull(StringUtils.repeat(null, null, 2));
assertNull(StringUtils.repeat(null, "x", 2));
assertEquals("", StringUtils.repeat("", null, 2));
assertEquals("", StringUtils.repeat("ab", "", 0));
assertEquals("", StringUtils.repeat("", "", 2));
assertEquals("xx", StringUtils.repeat("", "x", 3));
assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3));
assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"}));
assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}), "");
assertEquals(StringUtils.replaceEach("aba", null, null), "aba");
assertEquals(StringUtils.replaceEach("aba", new String[0], null), "aba");
assertEquals(StringUtils.replaceEach("aba", null, new String[0]), "aba");
assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null), "aba");
assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}), "b");
assertEquals(StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}), "aba");
assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}), "wcte");
assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}), "dcte");
assertEquals("bcc", StringUtils.replaceEach("abc", new String[]{"a", "b"}, new String[]{"b", "c"}));
assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren",new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n","o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D","E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T","U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9"},new String[]{"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a","b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q","R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G","H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4"}));
assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{null}), "aba");
assertEquals(StringUtils.replaceEach("aba", new String[]{"a", "b"}, new String[]{"c", null}), "cbc");
assertThrows(IllegalArgumentException.class,() -> StringUtils.replaceEach("abba", new String[]{"a"}, new String[]{"b", "a"}),"StringUtils.replaceEach(String, String[], String[]) expecting IllegalArgumentException");
assertNull(StringUtils.replaceEachRepeatedly(null, new String[]{"a"}, new String[]{"b"}));
assertEquals("", StringUtils.replaceEachRepeatedly("", new String[]{"a"}, new String[]{"b"}));
assertEquals("aba", StringUtils.replaceEachRepeatedly("aba", null, null));
assertEquals("aba", StringUtils.replaceEachRepeatedly("aba", new String[0], null));
assertEquals("aba", StringUtils.replaceEachRepeatedly("aba", null, new String[0]));
assertEquals("aba", StringUtils.replaceEachRepeatedly("aba", new String[0], null));
assertEquals("b", StringUtils.replaceEachRepeatedly("aba", new String[]{"a"}, new String[]{""}));
assertEquals("aba", StringUtils.replaceEachRepeatedly("aba", new String[]{null}, new String[]{"a"}));
assertEquals("wcte", StringUtils.replaceEachRepeatedly("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}));
assertEquals("tcte", StringUtils.replaceEachRepeatedly("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}));
assertEquals("blaan", StringUtils.replaceEachRepeatedly("blllaan", new String[]{"llaan"}, new String[]{"laan"}) );
assertThrows(IllegalStateException.class,() -> StringUtils.replaceEachRepeatedly("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}),"Should be a circular reference");
assertNull(StringUtils.replace(null, null, null));
assertNull(StringUtils.replace(null, null, "any"));
assertNull(StringUtils.replace(null, "any", null));
assertNull(StringUtils.replace(null, "any", "any"));
assertEquals("", StringUtils.replace("", null, null));
assertEquals("", StringUtils.replace("", null, "any"));
assertEquals("", StringUtils.replace("", "any", null));
assertEquals("", StringUtils.replace("", "any", "any"));
assertEquals("FOO", StringUtils.replace("FOO", "", "any"));
assertEquals("FOO", StringUtils.replace("FOO", null, "any"));
assertEquals("FOO", StringUtils.replace("FOO", "F", null));
assertEquals("FOO", StringUtils.replace("FOO", null, null));
assertEquals("", StringUtils.replace("foofoofoo", "foo", ""));
assertEquals("barbarbar", StringUtils.replace("foofoofoo", "foo", "bar"));
assertEquals("farfarfar", StringUtils.replace("foofoofoo", "oo", "ar"));
assertNull(StringUtils.replace(null, null, null, 2));
assertNull(StringUtils.replace(null, null, "any", 2));
assertNull(StringUtils.replace(null, "any", null, 2));
assertNull(StringUtils.replace(null, "any", "any", 2));
assertEquals("", StringUtils.replace("", null, null, 2));
assertEquals("", StringUtils.replace("", null, "any", 2));
assertEquals("", StringUtils.replace("", "any", null, 2));
assertEquals("", StringUtils.replace("", "any", "any", 2));
assertSame(str, StringUtils.replace(str, "x", "", -1));
assertEquals("f", StringUtils.replace("oofoo", "o", "", -1));
assertEquals("oofoo", StringUtils.replace("oofoo", "o", "", 0));
assertEquals("ofoo", StringUtils.replace("oofoo", "o", "", 1));
assertEquals("foo", StringUtils.replace("oofoo", "o", "", 2));
assertEquals("fo", StringUtils.replace("oofoo", "o", "", 3));
assertEquals("f", StringUtils.replace("oofoo", "o", "", 4));
assertEquals("f", StringUtils.replace("oofoo", "o", "", -5));
assertEquals("f", StringUtils.replace("oofoo", "o", "", 1000));
assertNull(StringUtils.replaceAll(null, "", ""));
assertEquals("any", StringUtils.replaceAll("any", null, ""));
assertEquals("any", StringUtils.replaceAll("any", "", null));
assertEquals("zzz", StringUtils.replaceAll("", "", "zzz"));
assertEquals("zzz", StringUtils.replaceAll("", ".*", "zzz"));
assertEquals("", StringUtils.replaceAll("", ".+", "zzz"));
assertEquals("ZZaZZbZZcZZ", StringUtils.replaceAll("abc", "", "ZZ"));
assertEquals("z\nz", StringUtils.replaceAll("<__>\n<__>", "<.*>", "z"));
assertEquals("z", StringUtils.replaceAll("<__>\n<__>", "(?s)<.*>", "z"));
assertEquals("ABC___123", StringUtils.replaceAll("ABCabc123", "[a-z]", "_"));
assertEquals("ABC_123", StringUtils.replaceAll("ABCabc123", "[^A-Z0-9]+", "_"));
assertEquals("ABC123", StringUtils.replaceAll("ABCabc123", "[^A-Z0-9]+", ""));
assertEquals("Lorem_ipsum_dolor_sit",StringUtils.replaceAll("Lorem ipsum  dolor   sit", "( +)([a-z]+)", "_$2"));
assertThrows(PatternSyntaxException.class,() -> StringUtils.replaceAll("any", "{badRegexSyntax}", ""),"StringUtils.replaceAll expecting PatternSyntaxException");
assertNull(StringUtils.replaceChars(null, 'b', 'z'));
assertEquals("", StringUtils.replaceChars("", 'b', 'z'));
assertEquals("azcza", StringUtils.replaceChars("abcba", 'b', 'z'));
assertEquals("abcba", StringUtils.replaceChars("abcba", 'x', 'z'));
assertNull(StringUtils.replaceChars(null, null, null));
assertNull(StringUtils.replaceChars(null, "", null));
assertNull(StringUtils.replaceChars(null, "a", null));
assertNull(StringUtils.replaceChars(null, null, ""));
assertNull(StringUtils.replaceChars(null, null, "x"));
assertEquals("", StringUtils.replaceChars("", null, null));
assertEquals("", StringUtils.replaceChars("", "", null));
assertEquals("", StringUtils.replaceChars("", "a", null));
assertEquals("", StringUtils.replaceChars("", null, ""));
assertEquals("", StringUtils.replaceChars("", null, "x"));
assertEquals("abc", StringUtils.replaceChars("abc", null, null));
assertEquals("abc", StringUtils.replaceChars("abc", null, ""));
assertEquals("abc", StringUtils.replaceChars("abc", null, "x"));
assertEquals("abc", StringUtils.replaceChars("abc", "", null));
assertEquals("abc", StringUtils.replaceChars("abc", "", ""));
assertEquals("abc", StringUtils.replaceChars("abc", "", "x"));
assertEquals("ac", StringUtils.replaceChars("abc", "b", null));
assertEquals("ac", StringUtils.replaceChars("abc", "b", ""));
assertEquals("axc", StringUtils.replaceChars("abc", "b", "x"));
assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz"));
assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y"));
assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx"));
assertEquals("abcba", StringUtils.replaceChars("abcba", "z", "w"));
assertSame("abcba", StringUtils.replaceChars("abcba", "z", "w"));
assertEquals("jelly", StringUtils.replaceChars("hello", "ho", "jy"));
assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz"));
assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y"));
assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx"));
assertEquals("bcc", StringUtils.replaceChars("abc", "ab", "bc"));
assertEquals("q651.506bera", StringUtils.replaceChars("d216.102oren","abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789","nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234"));
assertNull(StringUtils.replaceFirst(null, "", ""));
assertEquals("any", StringUtils.replaceFirst("any", null, ""));
assertEquals("any", StringUtils.replaceFirst("any", "", null));
assertEquals("zzz", StringUtils.replaceFirst("", "", "zzz"));
assertEquals("zzz", StringUtils.replaceFirst("", ".*", "zzz"));
assertEquals("", StringUtils.replaceFirst("", ".+", "zzz"));
assertEquals("ZZabc", StringUtils.replaceFirst("abc", "", "ZZ"));
assertEquals("z\n<__>", StringUtils.replaceFirst("<__>\n<__>", "<.*>", "z"));
assertEquals("z", StringUtils.replaceFirst("<__>\n<__>", "(?s)<.*>", "z"));
assertEquals("ABC_bc123", StringUtils.replaceFirst("ABCabc123", "[a-z]", "_"));
assertEquals("ABC_123abc", StringUtils.replaceFirst("ABCabc123abc", "[^A-Z0-9]+", "_"));
assertEquals("ABC123abc", StringUtils.replaceFirst("ABCabc123abc", "[^A-Z0-9]+", ""));
assertEquals("Lorem_ipsum  dolor   sit",StringUtils.replaceFirst("Lorem ipsum  dolor   sit", "( +)([a-z]+)", "_$2"));
assertThrows(PatternSyntaxException.class,() -> StringUtils.replaceFirst("any", "{badRegexSyntax}", ""),"StringUtils.replaceFirst expecting PatternSyntaxException");
assertNull(StringUtils.replaceIgnoreCase(null, null, null));
assertNull(StringUtils.replaceIgnoreCase(null, null, "any"));
assertNull(StringUtils.replaceIgnoreCase(null, "any", null));
assertNull(StringUtils.replaceIgnoreCase(null, "any", "any"));
assertEquals("", StringUtils.replaceIgnoreCase("", null, null));
assertEquals("", StringUtils.replaceIgnoreCase("", null, "any"));
assertEquals("", StringUtils.replaceIgnoreCase("", "any", null));
assertEquals("", StringUtils.replaceIgnoreCase("", "any", "any"));
assertEquals("FOO", StringUtils.replaceIgnoreCase("FOO", "", "any"));
assertEquals("FOO", StringUtils.replaceIgnoreCase("FOO", null, "any"));
assertEquals("FOO", StringUtils.replaceIgnoreCase("FOO", "F", null));
assertEquals("FOO", StringUtils.replaceIgnoreCase("FOO", null, null));
assertEquals("", StringUtils.replaceIgnoreCase("foofoofoo", "foo", ""));
assertEquals("barbarbar", StringUtils.replaceIgnoreCase("foofoofoo", "foo", "bar"));
assertEquals("farfarfar", StringUtils.replaceIgnoreCase("foofoofoo", "oo", "ar"));
assertEquals("", StringUtils.replaceIgnoreCase("foofoofoo", "FOO", ""));
assertEquals("barbarbar", StringUtils.replaceIgnoreCase("fooFOOfoo", "foo", "bar"));
assertEquals("farfarfar", StringUtils.replaceIgnoreCase("foofOOfoo", "OO", "ar"));
assertNull(StringUtils.replaceIgnoreCase(null, null, null, 2));
assertNull(StringUtils.replaceIgnoreCase(null, null, "any", 2));
assertNull(StringUtils.replaceIgnoreCase(null, "any", null, 2));
assertNull(StringUtils.replaceIgnoreCase(null, "any", "any", 2));
assertEquals("", StringUtils.replaceIgnoreCase("", null, null, 2));
assertEquals("", StringUtils.replaceIgnoreCase("", null, "any", 2));
assertEquals("", StringUtils.replaceIgnoreCase("", "any", null, 2));
assertEquals("", StringUtils.replaceIgnoreCase("", "any", "any", 2));
assertSame(str, StringUtils.replaceIgnoreCase(str, "x", "", -1));
assertEquals("f", StringUtils.replaceIgnoreCase("oofoo", "o", "", -1));
assertEquals("oofoo", StringUtils.replaceIgnoreCase("oofoo", "o", "", 0));
assertEquals("ofoo", StringUtils.replaceIgnoreCase("oofoo", "o", "", 1));
assertEquals("foo", StringUtils.replaceIgnoreCase("oofoo", "o", "", 2));
assertEquals("fo", StringUtils.replaceIgnoreCase("oofoo", "o", "", 3));
assertEquals("f", StringUtils.replaceIgnoreCase("oofoo", "o", "", 4));
assertEquals("f", StringUtils.replaceIgnoreCase("oofoo", "o", "", -5));
assertEquals("f", StringUtils.replaceIgnoreCase("oofoo", "o", "", 1000));
assertEquals("f", StringUtils.replaceIgnoreCase("oofoo", "O", "", -1));
assertEquals("oofoo", StringUtils.replaceIgnoreCase("oofoo", "O", "", 0));
assertEquals("ofoo", StringUtils.replaceIgnoreCase("oofoo", "O", "", 1));
assertEquals("foo", StringUtils.replaceIgnoreCase("oofoo", "O", "", 2));
assertEquals("fo", StringUtils.replaceIgnoreCase("oofoo", "O", "", 3));
assertEquals("f", StringUtils.replaceIgnoreCase("oofoo", "O", "", 4));
assertEquals("f", StringUtils.replaceIgnoreCase("oofoo", "O", "", -5));
assertEquals("f", StringUtils.replaceIgnoreCase("oofoo", "O", "", 1000));
assertNull(StringUtils.replaceOnce(null, null, null));
assertNull(StringUtils.replaceOnce(null, null, "any"));
assertNull(StringUtils.replaceOnce(null, "any", null));
assertNull(StringUtils.replaceOnce(null, "any", "any"));
assertEquals("", StringUtils.replaceOnce("", null, null));
assertEquals("", StringUtils.replaceOnce("", null, "any"));
assertEquals("", StringUtils.replaceOnce("", "any", null));
assertEquals("", StringUtils.replaceOnce("", "any", "any"));
assertEquals("FOO", StringUtils.replaceOnce("FOO", "", "any"));
assertEquals("FOO", StringUtils.replaceOnce("FOO", null, "any"));
assertEquals("FOO", StringUtils.replaceOnce("FOO", "F", null));
assertEquals("FOO", StringUtils.replaceOnce("FOO", null, null));
assertEquals("foofoo", StringUtils.replaceOnce("foofoofoo", "foo", ""));
assertNull(StringUtils.replaceOnceIgnoreCase(null, null, null));
assertNull(StringUtils.replaceOnceIgnoreCase(null, null, "any"));
assertNull(StringUtils.replaceOnceIgnoreCase(null, "any", null));
assertNull(StringUtils.replaceOnceIgnoreCase(null, "any", "any"));
assertEquals("", StringUtils.replaceOnceIgnoreCase("", null, null));
assertEquals("", StringUtils.replaceOnceIgnoreCase("", null, "any"));
assertEquals("", StringUtils.replaceOnceIgnoreCase("", "any", null));
assertEquals("", StringUtils.replaceOnceIgnoreCase("", "any", "any"));
assertEquals("FOO", StringUtils.replaceOnceIgnoreCase("FOO", "", "any"));
assertEquals("FOO", StringUtils.replaceOnceIgnoreCase("FOO", null, "any"));
assertEquals("FOO", StringUtils.replaceOnceIgnoreCase("FOO", "F", null));
assertEquals("FOO", StringUtils.replaceOnceIgnoreCase("FOO", null, null));
assertEquals("foofoo", StringUtils.replaceOnceIgnoreCase("foofoofoo", "foo", ""));
assertEquals("Foofoo", StringUtils.replaceOnceIgnoreCase("FoOFoofoo", "foo", ""));
assertNull(StringUtils.replacePattern(null, "", ""));
assertEquals("any", StringUtils.replacePattern("any", null, ""));
assertEquals("any", StringUtils.replacePattern("any", "", null));
assertEquals("zzz", StringUtils.replacePattern("", "", "zzz"));
assertEquals("zzz", StringUtils.replacePattern("", ".*", "zzz"));
assertEquals("", StringUtils.replacePattern("", ".+", "zzz"));
assertEquals("z", StringUtils.replacePattern("<__>\n<__>", "<.*>", "z"));
assertEquals("z", StringUtils.replacePattern("<__>\\n<__>", "<.*>", "z"));
assertEquals("X", StringUtils.replacePattern("<A>\nxy\n</A>", "<A>.*</A>", "X"));
assertEquals("ABC___123", StringUtils.replacePattern("ABCabc123", "[a-z]", "_"));
assertEquals("ABC_123", StringUtils.replacePattern("ABCabc123", "[^A-Z0-9]+", "_"));
assertEquals("ABC123", StringUtils.replacePattern("ABCabc123", "[^A-Z0-9]+", ""));
assertEquals("Lorem_ipsum_dolor_sit",StringUtils.replacePattern("Lorem ipsum  dolor   sit", "( +)([a-z]+)", "_$2"));
assertNull(StringUtils.reverse(null));
assertEquals("", StringUtils.reverse(""));
assertEquals("sdrawkcab", StringUtils.reverse("backwards"));
assertNull(StringUtils.reverseDelimited(null, '.'));
assertEquals("", StringUtils.reverseDelimited("", '.'));
assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.'));
assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.'));
assertEquals("", StringUtils.reverseDelimited("", '.'));
assertNull(StringUtils.rightPad(null, 5));
assertEquals("     ", StringUtils.rightPad("", 5));
assertEquals("abc  ", StringUtils.rightPad("abc", 5));
assertEquals("abc", StringUtils.rightPad("abc", 2));
assertEquals("abc", StringUtils.rightPad("abc", -1));
assertNull(StringUtils.rightPad(null, 5, ' '));
assertEquals("     ", StringUtils.rightPad("", 5, ' '));
assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' '));
assertEquals("abc", StringUtils.rightPad("abc", 2, ' '));
assertEquals("abc", StringUtils.rightPad("abc", -1, ' '));
assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x'));
assertEquals(10000, str.length());
assertTrue(StringUtils.containsOnly(str, 'a'));
assertNull(StringUtils.rightPad(null, 5, "-+"));
assertEquals("     ", StringUtils.rightPad("", 5, " "));
assertNull(StringUtils.rightPad(null, 8, null));
assertEquals("abc-+-+", StringUtils.rightPad("abc", 7, "-+"));
assertEquals("abc-+~", StringUtils.rightPad("abc", 6, "-+~"));
assertEquals("abc-+", StringUtils.rightPad("abc", 5, "-+~"));
assertEquals("abc", StringUtils.rightPad("abc", 2, " "));
assertEquals("abc", StringUtils.rightPad("abc", -1, " "));
assertEquals("abc  ", StringUtils.rightPad("abc", 5, null));
assertEquals("abc  ", StringUtils.rightPad("abc", 5, ""));
assertNull(StringUtils.rotate(null, 1));
assertEquals("", StringUtils.rotate("", 1));
assertEquals("abcdefg", StringUtils.rotate("abcdefg", 0));
assertEquals("fgabcde", StringUtils.rotate("abcdefg", 2));
assertEquals("cdefgab", StringUtils.rotate("abcdefg", -2));
assertEquals("abcdefg", StringUtils.rotate("abcdefg", 7));
assertEquals("abcdefg", StringUtils.rotate("abcdefg", -7));
assertEquals("fgabcde", StringUtils.rotate("abcdefg", 9));
assertEquals("cdefgab", StringUtils.rotate("abcdefg", -9));
assertEquals("efgabcd", StringUtils.rotate("abcdefg", 17));
assertEquals("defgabc", StringUtils.rotate("abcdefg", -17));
assertNull(StringUtils.split(null));
assertEquals(0, StringUtils.split("").length);
assertEquals(3, res.length);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals(".c", res[2]);
assertEquals(1, res.length);
assertEquals("a", res[0]);
assertEquals(2, res.length);
assertEquals("a", res[0]);
assertEquals("b" + NON_WHITESPACE + "c", res[1]);
assertNull(StringUtils.split(null, '.'));
assertEquals(0, StringUtils.split("", '.').length);
assertEquals(3, res.length);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals(" c", res[2]);
assertEquals(1, res.length);
assertEquals("a", res[0]);
assertEquals(3, res.length);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals("c", res[2]);
assertNull(StringUtils.split(null, "."));
assertNull(StringUtils.split(null, ".", 3));
assertEquals(0, StringUtils.split("", ".").length);
assertEquals(0, StringUtils.split("", ".", 3).length);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults2.length, results.length);
assertEquals(expectedResults2[i], results[i]);
assertNull(StringUtils.splitByCharacterType(null));
assertEquals(0, StringUtils.splitByCharacterType("").length);
assertTrue(Objects.deepEquals(new String[]{"ab", " ", "de", " ","fg"}, StringUtils.splitByCharacterType("ab de fg")));
assertTrue(Objects.deepEquals(new String[]{"ab", "   ", "de", " ","fg"}, StringUtils.splitByCharacterType("ab   de fg")));
assertTrue(Objects.deepEquals(new String[]{"ab", ":", "cd", ":","ef"}, StringUtils.splitByCharacterType("ab:cd:ef")));
assertTrue(Objects.deepEquals(new String[]{"number", "5"},StringUtils.splitByCharacterType("number5")));
assertTrue(Objects.deepEquals(new String[]{"foo", "B", "ar"},StringUtils.splitByCharacterType("fooBar")));
assertTrue(Objects.deepEquals(new String[]{"foo", "200", "B", "ar"},StringUtils.splitByCharacterType("foo200Bar")));
assertTrue(Objects.deepEquals(new String[]{"ASFR", "ules"},StringUtils.splitByCharacterType("ASFRules")));
assertNull(StringUtils.splitByCharacterTypeCamelCase(null));
assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length);
assertTrue(Objects.deepEquals(new String[]{"ab", " ", "de", " ","fg"}, StringUtils.splitByCharacterTypeCamelCase("ab de fg")));
assertTrue(Objects.deepEquals(new String[]{"ab", "   ", "de", " ","fg"}, StringUtils.splitByCharacterTypeCamelCase("ab   de fg")));
assertTrue(Objects.deepEquals(new String[]{"ab", ":", "cd", ":","ef"}, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef")));
assertTrue(Objects.deepEquals(new String[]{"number", "5"},StringUtils.splitByCharacterTypeCamelCase("number5")));
assertTrue(Objects.deepEquals(new String[]{"foo", "Bar"},StringUtils.splitByCharacterTypeCamelCase("fooBar")));
assertTrue(Objects.deepEquals(new String[]{"foo", "200", "Bar"},StringUtils.splitByCharacterTypeCamelCase("foo200Bar")));
assertTrue(Objects.deepEquals(new String[]{"ASF", "Rules"},StringUtils.splitByCharacterTypeCamelCase("ASFRules")));
assertArrayEquals(null, StringUtils.splitByWholeSeparatorPreserveAllTokens(null, "."));
assertEquals(0, StringUtils.splitByWholeSeparatorPreserveAllTokens("", ".").length);
assertEquals(expected.length, actual.length);
assertEquals(expected[i], actual[i]);
assertEquals(expected.length, actual.length);
assertEquals(expected[i], actual[i]);
assertEquals(expected.length, actual.length);
assertEquals(expected[i], actual[i]);
assertArrayEquals(null, StringUtils.splitByWholeSeparatorPreserveAllTokens(null, ".", -1));
assertEquals(0, StringUtils.splitByWholeSeparatorPreserveAllTokens("", ".", -1).length);
assertEquals(expected.length, actual.length);
assertEquals(expected[i], actual[i]);
assertEquals(expected.length, actual.length);
assertEquals(expected[i], actual[i]);
assertEquals(expected.length, actual.length);
assertEquals(expected[i], actual[i]);
assertEquals(expected.length, actual.length);
assertEquals(expected[i], actual[i]);
assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, "."));
assertEquals(0, StringUtils.splitByWholeSeparator("", ".").length);
assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length);
assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]);
assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length);
assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]);
assertEquals(splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length);
assertEquals(splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i]);
assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".", 3));
assertEquals(0, StringUtils.splitByWholeSeparator("", ".", 3).length);
assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length);
assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]);
assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length);
assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]);
assertNull(StringUtils.splitPreserveAllTokens(null));
assertEquals(0, StringUtils.splitPreserveAllTokens("").length);
assertEquals(2, res.length);
assertEquals("abc", res[0]);
assertEquals("def", res[1]);
assertEquals(3, res.length);
assertEquals("abc", res[0]);
assertEquals("", res[1]);
assertEquals("def", res[2]);
assertEquals(3, res.length);
assertEquals("", res[0]);
assertEquals("abc", res[1]);
assertEquals("", res[2]);
assertEquals(3, res.length);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals(".c", res[2]);
assertEquals(4, res.length);
assertEquals("", res[0]);
assertEquals("a", res[1]);
assertEquals("b", res[2]);
assertEquals(".c", res[3]);
assertEquals(5, res.length);
assertEquals("a", res[0]);
assertEquals("", res[1]);
assertEquals("b", res[2]);
assertEquals("", res[3]);
assertEquals(".c", res[4]);
assertEquals(4, res.length);
assertEquals("", res[0]);
assertEquals("a", res[1]);
assertEquals("", res[2]);
assertEquals("", res[3]);
assertEquals(4, res.length);
assertEquals("", res[0]);
assertEquals("a", res[1]);
assertEquals("", res[2]);
assertEquals("b", res[3]);
assertEquals(WHITESPACE.length() + 1, res.length);
assertEquals("a", res[0]);
assertEquals("", res[i]);
assertEquals("b" + NON_WHITESPACE + "c", res[WHITESPACE.length()]);
assertNull(StringUtils.splitPreserveAllTokens(null, '.'));
assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length);
assertEquals(3, res.length);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals(" c", res[2]);
assertEquals(4, res.length);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals("", res[2]);
assertEquals(" c", res[3]);
assertEquals(3, res.length);
assertEquals("", res[0]);
assertEquals("a", res[1]);
assertEquals("", res[2]);
assertEquals(4, res.length);
assertEquals("", res[0]);
assertEquals("a", res[1]);
assertEquals("", res[2]);
assertEquals("", res[3]);
assertEquals(4, res.length);
assertEquals("", res[0]);
assertEquals("", res[1]);
assertEquals("a", res[2]);
assertEquals("", res[3]);
assertEquals(3, res.length);
assertEquals("", res[0]);
assertEquals("", res[1]);
assertEquals("a", res[2]);
assertEquals(3, res.length);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals("c", res[2]);
assertEquals(5, res.length);
assertEquals("a", res[0]);
assertEquals("", res[1]);
assertEquals("b", res[2]);
assertEquals("", res[3]);
assertEquals("c", res[4]);
assertEquals(4, res.length);
assertEquals("", res[0]);
assertEquals("a", res[1]);
assertEquals("b", res[2]);
assertEquals("c", res[3]);
assertEquals(5, res.length);
assertEquals("", res[0]);
assertEquals("", res[1]);
assertEquals("a", res[2]);
assertEquals("b", res[3]);
assertEquals("c", res[4]);
assertEquals(4, res.length);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals("c", res[2]);
assertEquals("", res[3]);
assertEquals(5, res.length);
assertEquals("a", res[0]);
assertEquals("b", res[1]);
assertEquals("c", res[2]);
assertEquals("", res[3]);
assertEquals("", res[4]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertNull(StringUtils.splitPreserveAllTokens(null, "."));
assertNull(StringUtils.splitPreserveAllTokens(null, ".", 3));
assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length);
assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertEquals(expectedResults.length, results.length);
assertEquals(expectedResults[i], results[i]);
assertFalse(ArrayUtils.contains(excludeMethods, methodStr), "The method \"" + methodStr + "\" appears to be mutable in spirit and therefore must not accept a CharSequence");
assertTrue(ArrayUtils.contains(excludeMethods, methodStr),"The method \"" + methodStr + "\" appears to be immutable in spirit and therefore must not accept a String");
assertNull(StringUtils.swapCase(null));
assertEquals("", StringUtils.swapCase(""));
assertEquals("  ", StringUtils.swapCase("  "));
assertEquals("i", WordUtils.swapCase("I"));
assertEquals("I", WordUtils.swapCase("i"));
assertEquals("I AM HERE 123", StringUtils.swapCase("i am here 123"));
assertEquals("i aM hERE 123", StringUtils.swapCase("I Am Here 123"));
assertEquals("I AM here 123", StringUtils.swapCase("i am HERE 123"));
assertEquals("i am here 123", StringUtils.swapCase("I AM HERE 123"));
assertEquals(expect, WordUtils.swapCase(test));
assertEquals(expect, StringUtils.swapCase(test));
assertArrayEquals(codePoints, StringUtils.toCodePoints(s));
assertNull(StringUtils.toCodePoints(null));
assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, StringUtils.toCodePoints(""));
assertArrayEquals(expectedBytes, expectedString.getBytes());
assertEquals(expectedString, StringUtils.toEncodedString(expectedBytes, Charset.defaultCharset()));
assertEquals(expectedString, StringUtils.toEncodedString(expectedBytes, Charset.forName(encoding)));
assertEquals(expectedString, StringUtils.toEncodedString(expectedBytes, Charset.forName(encoding)));
assertArrayEquals(expectedBytes, expectedString.getBytes());
assertEquals(expectedString, StringUtils.toString(expectedBytes, null));
assertEquals(expectedString, StringUtils.toString(expectedBytes, SystemUtils.FILE_ENCODING));
assertEquals(expectedString, StringUtils.toString(expectedBytes, encoding));
assertNull(StringUtils.truncate(null, 12));
assertThrows(IllegalArgumentException.class, () -> StringUtils.truncate(null, -1), "maxWith cannot be negative");
assertThrows(IllegalArgumentException.class, () -> StringUtils.truncate(null, -10), "maxWith cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate(null, Integer.MIN_VALUE),"maxWith cannot be negative");
assertEquals("", StringUtils.truncate("", 10));
assertEquals("abc", StringUtils.truncate("abcdefghij", 3));
assertEquals("abcdef", StringUtils.truncate("abcdefghij", 6));
assertEquals("", StringUtils.truncate("abcdefghij", 0));
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", -1),"maxWith cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", -100),"maxWith cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", Integer.MIN_VALUE),"maxWith cannot be negative");
assertEquals("abcdefghij", StringUtils.truncate("abcdefghijklmno", 10));
assertEquals("abcdefghijklmno", StringUtils.truncate("abcdefghijklmno", Integer.MAX_VALUE));
assertEquals("abcde", StringUtils.truncate("abcdefghijklmno", 5));
assertEquals("abc", StringUtils.truncate("abcdefghijklmno", 3));
assertNull(StringUtils.truncate(null, 0, 12));
assertThrows(IllegalArgumentException.class, () -> StringUtils.truncate(null, -1, 0), "offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate(null, -10, -4),"offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate(null, Integer.MIN_VALUE, Integer.MIN_VALUE),"offset cannot be negative");
assertNull(StringUtils.truncate(null, 10, 12));
assertEquals("", StringUtils.truncate("", 0, 10));
assertEquals("", StringUtils.truncate("", 2, 10));
assertEquals("abc", StringUtils.truncate("abcdefghij", 0, 3));
assertEquals("fghij", StringUtils.truncate("abcdefghij", 5, 6));
assertEquals("", StringUtils.truncate("abcdefghij", 0, 0));
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", 0, -1),"maxWith cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", 0, -10),"maxWith cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", 0, -100),"maxWith cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", 1, -100),"maxWith cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", 0, Integer.MIN_VALUE),"maxWith cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", -1, 0),"offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", -10, 0),"offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", -100, 1),"offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", Integer.MIN_VALUE, 0),"offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", -1, -1),"offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", -10, -10),"offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", -100, -100),"offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", Integer.MIN_VALUE, Integer.MIN_VALUE),"offset cannot be negative");
assertEquals("peach", StringUtils.truncate(raspberry, 10, 15));
assertEquals("abcdefghij", StringUtils.truncate("abcdefghijklmno", 0, 10));
assertEquals("abcdefghijklmno", StringUtils.truncate("abcdefghijklmno", 0, Integer.MAX_VALUE));
assertEquals("bcdefghijk", StringUtils.truncate("abcdefghijklmno", 1, 10));
assertEquals("cdefghijkl", StringUtils.truncate("abcdefghijklmno", 2, 10));
assertEquals("defghijklm", StringUtils.truncate("abcdefghijklmno", 3, 10));
assertEquals("efghijklmn", StringUtils.truncate("abcdefghijklmno", 4, 10));
assertEquals("fghijklmno", StringUtils.truncate("abcdefghijklmno", 5, 10));
assertEquals("fghij", StringUtils.truncate("abcdefghijklmno", 5, 5));
assertEquals("fgh", StringUtils.truncate("abcdefghijklmno", 5, 3));
assertEquals("klm", StringUtils.truncate("abcdefghijklmno", 10, 3));
assertEquals("klmno", StringUtils.truncate("abcdefghijklmno", 10, Integer.MAX_VALUE));
assertEquals("n", StringUtils.truncate("abcdefghijklmno", 13, 1));
assertEquals("no", StringUtils.truncate("abcdefghijklmno", 13, Integer.MAX_VALUE));
assertEquals("o", StringUtils.truncate("abcdefghijklmno", 14, 1));
assertEquals("o", StringUtils.truncate("abcdefghijklmno", 14, Integer.MAX_VALUE));
assertEquals("", StringUtils.truncate("abcdefghijklmno", 15, 1));
assertEquals("", StringUtils.truncate("abcdefghijklmno", 15, Integer.MAX_VALUE));
assertEquals("", StringUtils.truncate("abcdefghijklmno", Integer.MAX_VALUE, Integer.MAX_VALUE));
assertNull(StringUtils.uncapitalize(null));
assertEquals(FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP), "uncapitalize(String) failed");
assertEquals(FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP), "uncapitalize(string) failed");
assertEquals("", StringUtils.uncapitalize(""), "uncapitalize(empty-string) failed");
assertEquals("x", StringUtils.uncapitalize("X"), "uncapitalize(single-char-string) failed");
assertEquals("cat", StringUtils.uncapitalize("cat"));
assertEquals("cat", StringUtils.uncapitalize("Cat"));
assertEquals("cAT", StringUtils.uncapitalize("CAT"));
assertEquals("\uD83D\uDE30", StringEscapeUtils.unescapeCsv("\uD83D\uDE30"));
assertEquals("\uD800\uDC00", StringEscapeUtils.unescapeCsv("\uD800\uDC00"));
assertEquals("\uD834\uDD1E", StringEscapeUtils.unescapeCsv("\uD834\uDD1E"));
assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeCsv("\uDBFF\uDFFD"));
assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeHtml3("\uDBFF\uDFFD"));
assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeHtml4("\uDBFF\uDFFD"));
assertNull(StringUtils.unwrap(null, null));
assertNull(StringUtils.unwrap(null, CharUtils.NUL));
assertNull(StringUtils.unwrap(null, '1'));
assertEquals("abc", StringUtils.unwrap("abc", null));
assertEquals("a", StringUtils.unwrap("a", "a"));
assertEquals("", StringUtils.unwrap("aa", "a"));
assertEquals("abc", StringUtils.unwrap("\'abc\'", '\''));
assertEquals("abc", StringUtils.unwrap("AabcA", 'A'));
assertEquals("AabcA", StringUtils.unwrap("AAabcAA", 'A'));
assertEquals("abc", StringUtils.unwrap("abc", 'b'));
assertEquals("#A", StringUtils.unwrap("#A", '#'));
assertEquals("A#", StringUtils.unwrap("A#", '#'));
assertEquals("ABA", StringUtils.unwrap("AABAA", 'A'));
assertNull(StringUtils.unwrap(null, null));
assertNull(StringUtils.unwrap(null, ""));
assertNull(StringUtils.unwrap(null, "1"));
assertEquals("abc", StringUtils.unwrap("abc", null));
assertEquals("abc", StringUtils.unwrap("abc", ""));
assertEquals("a", StringUtils.unwrap("a", "a"));
assertEquals("ababa", StringUtils.unwrap("ababa", "aba"));
assertEquals("", StringUtils.unwrap("aa", "a"));
assertEquals("abc", StringUtils.unwrap("\'abc\'", "\'"));
assertEquals("abc", StringUtils.unwrap("\"abc\"", "\""));
assertEquals("abc\"xyz", StringUtils.unwrap("\"abc\"xyz\"", "\""));
assertEquals("abc\"xyz\"", StringUtils.unwrap("\"abc\"xyz\"\"", "\""));
assertEquals("abc\'xyz\'", StringUtils.unwrap("\"abc\'xyz\'\"", "\""));
assertEquals("\"abc\'xyz\'\"", StringUtils.unwrap("AA\"abc\'xyz\'\"AA", "AA"));
assertEquals("\"abc\'xyz\'\"", StringUtils.unwrap("123\"abc\'xyz\'\"123", "123"));
assertEquals("AA\"abc\'xyz\'\"", StringUtils.unwrap("AA\"abc\'xyz\'\"", "AA"));
assertEquals("AA\"abc\'xyz\'\"AA", StringUtils.unwrap("AAA\"abc\'xyz\'\"AAA", "A"));
assertEquals("\"abc\'xyz\'\"AA", StringUtils.unwrap("\"abc\'xyz\'\"AA", "AA"));
assertNull(StringUtils.upperCase(null));
assertNull(StringUtils.upperCase(null, Locale.ENGLISH));
assertEquals("FOO TEST THING", StringUtils.upperCase("fOo test THING"), "upperCase(String) failed");
assertEquals("", StringUtils.upperCase(""), "upperCase(empty-string) failed");
assertEquals("FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH),"upperCase(String, Locale) failed");
assertEquals("", StringUtils.upperCase("", Locale.ENGLISH),"upperCase(empty-string, Locale) failed");
assertNull(StringUtils.wrap(null, CharUtils.NUL));
assertNull(StringUtils.wrap(null, '1'));
assertEquals("", StringUtils.wrap("", CharUtils.NUL));
assertEquals("xabx", StringUtils.wrap("ab", 'x'));
assertEquals("\"ab\"", StringUtils.wrap("ab", '\"'));
assertEquals("\"\"ab\"\"", StringUtils.wrap("\"ab\"", '\"'));
assertEquals("'ab'", StringUtils.wrap("ab", '\''));
assertEquals("''abcd''", StringUtils.wrap("'abcd'", '\''));
assertEquals("'\"abcd\"'", StringUtils.wrap("\"abcd\"", '\''));
assertEquals("\"'abcd'\"", StringUtils.wrap("'abcd'", '\"'));
assertNull(StringUtils.wrap(null, null));
assertNull(StringUtils.wrap(null, ""));
assertNull(StringUtils.wrap(null, "1"));
assertNull(StringUtils.wrap(null, null));
assertEquals("", StringUtils.wrap("", ""));
assertEquals("ab", StringUtils.wrap("ab", null));
assertEquals("xabx", StringUtils.wrap("ab", "x"));
assertEquals("\"ab\"", StringUtils.wrap("ab", "\""));
assertEquals("\"\"ab\"\"", StringUtils.wrap("\"ab\"", "\""));
assertEquals("'ab'", StringUtils.wrap("ab", "'"));
assertEquals("''abcd''", StringUtils.wrap("'abcd'", "'"));
assertEquals("'\"abcd\"'", StringUtils.wrap("\"abcd\"", "'"));
assertEquals("\"'abcd'\"", StringUtils.wrap("'abcd'", "\""));
assertNull(StringUtils.wrapIfMissing(null, CharUtils.NUL));
assertNull(StringUtils.wrapIfMissing(null, '1'));
assertEquals("", StringUtils.wrapIfMissing("", CharUtils.NUL));
assertEquals("xabx", StringUtils.wrapIfMissing("ab", 'x'));
assertEquals("\"ab\"", StringUtils.wrapIfMissing("ab", '\"'));
assertEquals("\"ab\"", StringUtils.wrapIfMissing("\"ab\"", '\"'));
assertEquals("'ab'", StringUtils.wrapIfMissing("ab", '\''));
assertEquals("'abcd'", StringUtils.wrapIfMissing("'abcd'", '\''));
assertEquals("'\"abcd\"'", StringUtils.wrapIfMissing("\"abcd\"", '\''));
assertEquals("\"'abcd'\"", StringUtils.wrapIfMissing("'abcd'", '\"'));
assertEquals("/x/", StringUtils.wrapIfMissing("x", '/'));
assertEquals("/x/y/z/", StringUtils.wrapIfMissing("x/y/z", '/'));
assertEquals("/x/y/z/", StringUtils.wrapIfMissing("/x/y/z", '/'));
assertEquals("/x/y/z/", StringUtils.wrapIfMissing("x/y/z/", '/'));
assertSame("/", StringUtils.wrapIfMissing("/", '/'));
assertSame("/x/", StringUtils.wrapIfMissing("/x/", '/'));
assertNull(StringUtils.wrapIfMissing(null, "\0"));
assertNull(StringUtils.wrapIfMissing(null, "1"));
assertEquals("", StringUtils.wrapIfMissing("", "\0"));
assertEquals("xabx", StringUtils.wrapIfMissing("ab", "x"));
assertEquals("\"ab\"", StringUtils.wrapIfMissing("ab", "\""));
assertEquals("\"ab\"", StringUtils.wrapIfMissing("\"ab\"", "\""));
assertEquals("'ab'", StringUtils.wrapIfMissing("ab", "\'"));
assertEquals("'abcd'", StringUtils.wrapIfMissing("'abcd'", "\'"));
assertEquals("'\"abcd\"'", StringUtils.wrapIfMissing("\"abcd\"", "\'"));
assertEquals("\"'abcd'\"", StringUtils.wrapIfMissing("'abcd'", "\""));
assertEquals("/x/", StringUtils.wrapIfMissing("x", "/"));
assertEquals("/x/y/z/", StringUtils.wrapIfMissing("x/y/z", "/"));
assertEquals("/x/y/z/", StringUtils.wrapIfMissing("/x/y/z", "/"));
assertEquals("/x/y/z/", StringUtils.wrapIfMissing("x/y/z/", "/"));
assertEquals("/", StringUtils.wrapIfMissing("/", "/"));
assertEquals("ab/ab", StringUtils.wrapIfMissing("/", "ab"));
assertSame("ab/ab", StringUtils.wrapIfMissing("ab/ab", "ab"));
assertSame("//x//", StringUtils.wrapIfMissing("//x//", "//"));
assertNull(StringUtils.toRootLowerCase(null));
assertEquals("a", StringUtils.toRootLowerCase("A"));
assertEquals("a", StringUtils.toRootLowerCase("a"));
assertNotEquals("title", "TITLE".toLowerCase(TURKISH));
assertEquals("title", "TITLE".toLowerCase(Locale.ROOT));
assertEquals("title", StringUtils.toRootLowerCase("TITLE"));
assertEquals("title", StringUtils.toRootLowerCase("TITLE"));
assertNull(StringUtils.toRootUpperCase(null));
assertEquals("A", StringUtils.toRootUpperCase("a"));
assertEquals("A", StringUtils.toRootUpperCase("A"));
assertNotEquals("TITLE", "title".toUpperCase(TURKISH));
assertEquals("TITLE", "title".toUpperCase(Locale.ROOT));
assertEquals("TITLE", StringUtils.toRootUpperCase("title"));
assertEquals("TITLE", StringUtils.toRootUpperCase("title"));
assertEquals(res1, res2, "si : " + si + " sj : " + sj);
assertEquals(res1, res2, "si : " + si + " sj : " + sj);
assertEquals(res1, res2, "si : " + si + " sj : " + sj);
assertEquals(res1, res2, "si : " + si + " sj : " + sj);
assertEquals(res1, res2, "si : " + si + " sj : " + sj);
assertFalse(StringUtils.contains(null, ' '));
assertFalse(StringUtils.contains("", ' '));
assertFalse(StringUtils.contains("", null));
assertFalse(StringUtils.contains(null, null));
assertTrue(StringUtils.contains("abc", 'a'));
assertTrue(StringUtils.contains("abc", 'b'));
assertTrue(StringUtils.contains("abc", 'c'));
assertFalse(StringUtils.contains("abc", 'z'));
assertFalse(StringUtils.contains(null, null));
assertFalse(StringUtils.contains(null, ""));
assertFalse(StringUtils.contains(null, "a"));
assertFalse(StringUtils.contains("", null));
assertTrue(StringUtils.contains("", ""));
assertFalse(StringUtils.contains("", "a"));
assertTrue(StringUtils.contains("abc", "a"));
assertTrue(StringUtils.contains("abc", "b"));
assertTrue(StringUtils.contains("abc", "c"));
assertTrue(StringUtils.contains("abc", "abc"));
assertFalse(StringUtils.contains("abc", "z"));
assertFalse(StringUtils.contains(CharUSuppCharHigh, CharU20001));
assertFalse(StringUtils.contains(CharUSuppCharLow, CharU20001));
assertFalse(StringUtils.contains(CharU20001, CharUSuppCharHigh));
assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
assertTrue(StringUtils.contains(CharU20001, CharUSuppCharLow));
assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharLow + "a", "a"));
assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharHigh + "a", "a"));
assertTrue(StringUtils.contains(CharU20000 + CharU20001, CharU20000));
assertTrue(StringUtils.contains(CharU20000 + CharU20001, CharU20001));
assertTrue(StringUtils.contains(CharU20000, CharU20000));
assertFalse(StringUtils.contains(CharU20000, CharU20001));
assertFalse(StringUtils.containsAny(null, (char[]) null));
assertFalse(StringUtils.containsAny(null, new char[0]));
assertFalse(StringUtils.containsAny(null, 'a', 'b'));
assertFalse(StringUtils.containsAny("", (char[]) null));
assertFalse(StringUtils.containsAny("", new char[0]));
assertFalse(StringUtils.containsAny("", 'a', 'b'));
assertFalse(StringUtils.containsAny("zzabyycdxx", (char[]) null));
assertFalse(StringUtils.containsAny("zzabyycdxx", new char[0]));
assertTrue(StringUtils.containsAny("zzabyycdxx", 'z', 'a'));
assertTrue(StringUtils.containsAny("zzabyycdxx", 'b', 'y'));
assertTrue(StringUtils.containsAny("zzabyycdxx", 'z', 'y'));
assertFalse(StringUtils.containsAny("ab", 'z'));
assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));
assertFalse(StringUtils.containsAny("abc" + CharUSuppCharHigh + "xyz", CharU20001.toCharArray()));
assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));
assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));
assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));
assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));
assertTrue(StringUtils.containsAny("a" + CharU20000 + CharU20001, "a".toCharArray()));
assertTrue(StringUtils.containsAny(CharU20000 + "a" + CharU20001, "a".toCharArray()));
assertTrue(StringUtils.containsAny(CharU20000 + CharU20001 + "a", "a".toCharArray()));
assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));
assertTrue(StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));
assertEquals(-1, CharU20000.indexOf(CharU20001));
assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
assertFalse(StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));
assertFalse(StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));
assertFalse(StringUtils.containsAny(null, (String) null));
assertFalse(StringUtils.containsAny(null, ""));
assertFalse(StringUtils.containsAny(null, "ab"));
assertFalse(StringUtils.containsAny("", (String) null));
assertFalse(StringUtils.containsAny("", ""));
assertFalse(StringUtils.containsAny("", "ab"));
assertFalse(StringUtils.containsAny("zzabyycdxx", (String) null));
assertFalse(StringUtils.containsAny("zzabyycdxx", ""));
assertTrue(StringUtils.containsAny("zzabyycdxx", "za"));
assertTrue(StringUtils.containsAny("zzabyycdxx", "by"));
assertTrue(StringUtils.containsAny("zzabyycdxx", "zy"));
assertFalse(StringUtils.containsAny("ab", "z"));
assertFalse(StringUtils.containsAny(null, (String[]) null));
assertFalse(StringUtils.containsAny(null, new String[0]));
assertFalse(StringUtils.containsAny(null, new String[] { "hello" }));
assertFalse(StringUtils.containsAny("", (String[]) null));
assertFalse(StringUtils.containsAny("", new String[0]));
assertFalse(StringUtils.containsAny("", new String[] { "hello" }));
assertFalse(StringUtils.containsAny("hello, goodbye", (String[]) null));
assertFalse(StringUtils.containsAny("hello, goodbye", new String[0]));
assertTrue(StringUtils.containsAny("hello, goodbye", new String[]{"hello", "goodbye"}));
assertTrue(StringUtils.containsAny("hello, goodbye", new String[]{"hello", "Goodbye"}));
assertFalse(StringUtils.containsAny("hello, goodbye", new String[]{"Hello", "Goodbye"}));
assertFalse(StringUtils.containsAny("hello, goodbye", new String[]{"Hello", null}));
assertFalse(StringUtils.containsAny("hello, null", new String[] { "Hello", null }));
assertTrue(StringUtils.containsAny("abcd", "ab", null));
assertTrue(StringUtils.containsAny("abcd", "ab", "cd"));
assertTrue(StringUtils.containsAny("abc", "d", "abc"));
assertFalse(StringUtils.containsAnyIgnoreCase(null, (String[]) null));
assertFalse(StringUtils.containsAnyIgnoreCase(null, new String[0]));
assertFalse(StringUtils.containsAnyIgnoreCase(null, new String[] { "hello" }));
assertFalse(StringUtils.containsAnyIgnoreCase("", (String[]) null));
assertFalse(StringUtils.containsAnyIgnoreCase("", new String[0]));
assertFalse(StringUtils.containsAnyIgnoreCase("", new String[] { "hello" }));
assertFalse(StringUtils.containsAnyIgnoreCase("hello, goodbye", (String[]) null));
assertFalse(StringUtils.containsAnyIgnoreCase("hello, goodbye", new String[0]));
assertTrue(StringUtils.containsAnyIgnoreCase("hello, goodbye", new String[]{"hello", "goodbye"}));
assertTrue(StringUtils.containsAnyIgnoreCase("hello, goodbye", new String[]{"hello", "Goodbye"}));
assertTrue(StringUtils.containsAnyIgnoreCase("hello, goodbye", new String[]{"Hello", "Goodbye"}));
assertTrue(StringUtils.containsAnyIgnoreCase("hello, goodbye", new String[]{"Hello", null}));
assertTrue(StringUtils.containsAnyIgnoreCase("hello, null", new String[] { "Hello", null }));
assertTrue(StringUtils.containsAnyIgnoreCase("abcd", "ab", null));
assertTrue(StringUtils.containsAnyIgnoreCase("abcd", "ab", "cd"));
assertTrue(StringUtils.containsAnyIgnoreCase("abc", "d", "abc"));
assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001));
assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001));
assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh));
assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow));
assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));
assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));
assertTrue(StringUtils.containsAny(CharU20000, CharU20000));
assertEquals(-1, CharU20000.indexOf(CharU20001));
assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
assertFalse(StringUtils.containsAny(CharU20000, CharU20001));
assertFalse(StringUtils.containsAny(CharU20001, CharU20000));
assertTrue(StringUtils.containsIgnoreCase(tdata[j][0], tdata[j][1]),Locale.getDefault() + ": " + j + " " + tdata[j][0] + " " + tdata[j][1]);
assertFalse(StringUtils.containsIgnoreCase(fdata[j][0], fdata[j][1]),Locale.getDefault() + ": " + j + " " + fdata[j][0] + " " + fdata[j][1]);
assertFalse(StringUtils.containsIgnoreCase(null, null));
assertFalse(StringUtils.containsIgnoreCase(null, ""));
assertFalse(StringUtils.containsIgnoreCase(null, "a"));
assertFalse(StringUtils.containsIgnoreCase(null, "abc"));
assertFalse(StringUtils.containsIgnoreCase("", null));
assertFalse(StringUtils.containsIgnoreCase("a", null));
assertFalse(StringUtils.containsIgnoreCase("abc", null));
assertTrue(StringUtils.containsIgnoreCase("", ""));
assertTrue(StringUtils.containsIgnoreCase("a", ""));
assertTrue(StringUtils.containsIgnoreCase("abc", ""));
assertFalse(StringUtils.containsIgnoreCase("", "a"));
assertTrue(StringUtils.containsIgnoreCase("a", "a"));
assertTrue(StringUtils.containsIgnoreCase("abc", "a"));
assertFalse(StringUtils.containsIgnoreCase("", "A"));
assertTrue(StringUtils.containsIgnoreCase("a", "A"));
assertTrue(StringUtils.containsIgnoreCase("abc", "A"));
assertFalse(StringUtils.containsIgnoreCase("", "abc"));
assertFalse(StringUtils.containsIgnoreCase("a", "abc"));
assertTrue(StringUtils.containsIgnoreCase("xabcz", "abc"));
assertFalse(StringUtils.containsIgnoreCase("", "ABC"));
assertFalse(StringUtils.containsIgnoreCase("a", "ABC"));
assertTrue(StringUtils.containsIgnoreCase("xabcz", "ABC"));
assertTrue(StringUtils.containsNone(null, (char[]) null));
assertTrue(StringUtils.containsNone("", (char[]) null));
assertTrue(StringUtils.containsNone(null, emptyChars));
assertTrue(StringUtils.containsNone(str1, emptyChars));
assertTrue(StringUtils.containsNone("", emptyChars));
assertTrue(StringUtils.containsNone("", chars1));
assertTrue(StringUtils.containsNone(str1, chars1));
assertTrue(StringUtils.containsNone(str1, chars2));
assertTrue(StringUtils.containsNone(str1, chars3));
assertFalse(StringUtils.containsNone(str2, chars1));
assertTrue(StringUtils.containsNone(str2, chars2));
assertTrue(StringUtils.containsNone(str2, chars3));
assertFalse(StringUtils.containsNone(str3, chars1));
assertFalse(StringUtils.containsNone(str3, chars2));
assertTrue(StringUtils.containsNone(str3, chars3));
assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));
assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));
assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));
assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));
assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));
assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));
assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));
assertFalse(StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));
assertEquals(-1, CharU20000.indexOf(CharU20001));
assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
assertTrue(StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));
assertTrue(StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));
assertTrue(StringUtils.containsNone(null, (String) null));
assertTrue(StringUtils.containsNone("", (String) null));
assertTrue(StringUtils.containsNone(null, ""));
assertTrue(StringUtils.containsNone(str1, ""));
assertTrue(StringUtils.containsNone("", ""));
assertTrue(StringUtils.containsNone("", chars1));
assertTrue(StringUtils.containsNone(str1, chars1));
assertTrue(StringUtils.containsNone(str1, chars2));
assertTrue(StringUtils.containsNone(str1, chars3));
assertFalse(StringUtils.containsNone(str2, chars1));
assertTrue(StringUtils.containsNone(str2, chars2));
assertTrue(StringUtils.containsNone(str2, chars3));
assertFalse(StringUtils.containsNone(str3, chars1));
assertFalse(StringUtils.containsNone(str3, chars2));
assertTrue(StringUtils.containsNone(str3, chars3));
assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001));
assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001));
assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));
assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh));
assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow));
assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));
assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));
assertFalse(StringUtils.containsNone(CharU20000, CharU20000));
assertEquals(-1, CharU20000.indexOf(CharU20001));
assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
assertTrue(StringUtils.containsNone(CharU20000, CharU20001));
assertTrue(StringUtils.containsNone(CharU20001, CharU20000));
assertFalse(StringUtils.containsOnly(null, (char[]) null));
assertFalse(StringUtils.containsOnly("", (char[]) null));
assertFalse(StringUtils.containsOnly(null, emptyChars));
assertFalse(StringUtils.containsOnly(str1, emptyChars));
assertTrue(StringUtils.containsOnly("", emptyChars));
assertTrue(StringUtils.containsOnly("", chars1));
assertFalse(StringUtils.containsOnly(str1, chars1));
assertTrue(StringUtils.containsOnly(str1, chars2));
assertTrue(StringUtils.containsOnly(str1, chars3));
assertTrue(StringUtils.containsOnly(str2, chars1));
assertFalse(StringUtils.containsOnly(str2, chars2));
assertTrue(StringUtils.containsOnly(str2, chars3));
assertFalse(StringUtils.containsOnly(str3, chars1));
assertFalse(StringUtils.containsOnly(str3, chars2));
assertTrue(StringUtils.containsOnly(str3, chars3));
assertFalse(StringUtils.containsOnly(null, (String) null));
assertFalse(StringUtils.containsOnly("", (String) null));
assertFalse(StringUtils.containsOnly(null, ""));
assertFalse(StringUtils.containsOnly(str1, ""));
assertTrue(StringUtils.containsOnly("", ""));
assertTrue(StringUtils.containsOnly("", chars1));
assertFalse(StringUtils.containsOnly(str1, chars1));
assertTrue(StringUtils.containsOnly(str1, chars2));
assertTrue(StringUtils.containsOnly(str1, chars3));
assertTrue(StringUtils.containsOnly(str2, chars1));
assertFalse(StringUtils.containsOnly(str2, chars2));
assertTrue(StringUtils.containsOnly(str2, chars3));
assertFalse(StringUtils.containsOnly(str3, chars1));
assertFalse(StringUtils.containsOnly(str3, chars2));
assertTrue(StringUtils.containsOnly(str3, chars3));
assertFalse( StringUtils.containsWhitespace("") );
assertTrue( StringUtils.containsWhitespace(" ") );
assertFalse( StringUtils.containsWhitespace("a") );
assertTrue( StringUtils.containsWhitespace("a ") );
assertTrue( StringUtils.containsWhitespace(" a") );
assertTrue( StringUtils.containsWhitespace("a\t") );
assertTrue( StringUtils.containsWhitespace("\n") );
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isTrue(false));
assertEquals("The validated expression is false", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isTrue(false, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isTrue(false, "MSG %s", 6));
assertEquals("MSG 6", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isTrue(false, "MSG %s", 7.4d));
assertEquals("MSG 7.4", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.isTrue(false, "MSG %s %s", "Object 1", "Object 2"));
assertEquals("MSG Object 1 Object 2", ex.getMessage());
assertSame("Hi", Validate.notNull("Hi"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notNull(null));
assertEquals("The validated object is null", ex.getMessage());
assertSame("Hi", Validate.notNull("Hi", "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notNull(null, "MSG"));
assertEquals("MSG", ex.getMessage());
assertSame(expected, Validate.notEmpty(expected));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notEmpty((Object[]) null));
assertEquals("The validated array is empty", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notEmpty(new Object[0]));
assertEquals("The validated array is empty", ex.getMessage());
assertSame(expected, Validate.notEmpty(expected, "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notEmpty((Object[]) null, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notEmpty(new Object[0], "MSG"));
assertEquals("MSG", ex.getMessage());
assertSame(singleton, Validate.notEmpty(singleton));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notEmpty((Collection<?>) null));
assertEquals("The validated collection is empty", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notEmpty(Collections.emptySet()));
assertEquals("The validated collection is empty", ex.getMessage());
assertSame(singleton, Validate.notEmpty(singleton, "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notEmpty((Collection<?>) null, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notEmpty(Collections.emptySet(), "MSG"));
assertEquals("MSG", ex.getMessage());
assertSame(singletonMap, Validate.notEmpty(singletonMap));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notEmpty((Map<?, ?>) null));
assertEquals("The validated map is empty", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notEmpty(Collections.emptyMap()));
assertEquals("The validated map is empty", ex.getMessage());
assertSame(singletonMap, Validate.notEmpty(singletonMap, "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notEmpty((Map<?, ?>) null, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notEmpty(Collections.emptyMap(), "MSG"));
assertEquals("MSG", ex.getMessage());
assertSame("Hi", Validate.notEmpty("Hi"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notEmpty((CharSequence) null));
assertEquals("The validated character sequence is empty", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notEmpty(""));
assertEquals("The validated character sequence is empty", ex.getMessage());
assertSame("Hi", Validate.notEmpty("Hi", "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notEmpty((CharSequence) null, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notEmpty("", "MSG"));
assertEquals("MSG", ex.getMessage());
assertSame("abc", Validate.notBlank("abc"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notBlank(null));
assertEquals("The validated character sequence is blank", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notBlank(""));
assertEquals("The validated character sequence is blank", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notBlank("   "));
assertEquals("The validated character sequence is blank", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notBlank(" \n \t \r \n "));
assertEquals("The validated character sequence is blank", ex.getMessage());
assertSame("abc", Validate.notBlank("abc", "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notBlank(null, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notBlank("", "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notBlank("   ", "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notBlank(" \n \t \r \n ", "MSG"));
assertEquals("MSG", ex.getMessage());
assertSame(expected, Validate.noNullElements(expected));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.noNullElements((Object[]) null));
assertEquals("array", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.noNullElements(new String[] {"a", null}));
assertEquals("The validated array contains null element at index: 1", ex.getMessage());
assertSame(array, Validate.noNullElements(array, "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.noNullElements((Object[]) null, "MSG"));
assertEquals("array", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.noNullElements(new String[] {"a", null}, "MSG"));
assertEquals("MSG", ex.getMessage());
assertSame(col, Validate.noNullElements(col));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.noNullElements((Collection<?>) null));
assertEquals("iterable", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.noNullElements(Collections.singleton(null)));
assertEquals("The validated collection contains null element at index: 0", ex.getMessage());
assertSame(col, Validate.noNullElements(col, "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.noNullElements((Collection<?>) null, "MSG"));
assertEquals("iterable", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.noNullElements(Collections.singleton(null), "MSG"));
assertEquals("MSG", ex.getMessage());
assertThrows(IllegalStateException.class, () -> Validate.validState(false, "The Message"));
assertThrows(IllegalStateException.class, () -> Validate.validState(false));
assertSame(array, Validate.validIndex(array, 0));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.validIndex((Object[]) null, 1));
assertEquals("array", ex.getMessage());
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class, () -> Validate.validIndex(new String[] {"a"}, -1));
assertEquals("The validated array index is invalid: -1", ex.getMessage());
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class, () -> Validate.validIndex(new String[] {"a"}, 1));
assertEquals("The validated array index is invalid: 1", ex.getMessage());
assertSame(array, Validate.validIndex(array, 0, "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.validIndex((Object[]) null, 1, "MSG"));
assertEquals("array", ex.getMessage());
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class,() -> Validate.validIndex(new String[] {"a"}, -1, "MSG"));
assertEquals("MSG", ex.getMessage());
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class, () -> Validate.validIndex(new String[] {"a"}, 1, "MSG"));
assertEquals("MSG", ex.getMessage());
assertSame(col, Validate.validIndex(col, 0));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.validIndex((Collection<?>) null, 1));
assertEquals("collection", ex.getMessage());
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class,() -> Validate.validIndex(Collections.singleton("a"), -1));
assertEquals("The validated collection index is invalid: -1", ex.getMessage());
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class,() -> Validate.validIndex(Collections.singleton("a"), 1));
assertEquals("The validated collection index is invalid: 1", ex.getMessage());
assertSame(col, Validate.validIndex(col, 0, "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.validIndex((Collection<?>) null, 1, "MSG"));
assertEquals("collection", ex.getMessage());
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class,() -> Validate.validIndex(Collections.singleton("a"), -1, "MSG"));
assertEquals("MSG", ex.getMessage());
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class, () -> Validate.validIndex(Collections.singleton("a"), 1, "MSG"));
assertEquals("MSG", ex.getMessage());
assertSame(str, Validate.validIndex(str, 0));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.validIndex((String) null, 1));
assertEquals("chars", ex.getMessage());
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class, () -> Validate.validIndex("a", -1));
assertEquals("The validated character sequence index is invalid: -1", ex.getMessage());
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class, () -> Validate.validIndex("a", 1));
assertEquals("The validated character sequence index is invalid: 1", ex.getMessage());
assertSame(str, Validate.validIndex(str, 0, "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.validIndex((String) null, 1, "MSG"));
assertEquals("chars", ex.getMessage());
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class, () -> Validate.validIndex("a", -1, "MSG"));
assertEquals("MSG", ex.getMessage());
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class, () -> Validate.validIndex("a", 1, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.matchesPattern("hi", "[0-9]*"));
assertEquals("The string hi does not match the pattern [0-9]*", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.matchesPattern("hi", "[0-9]*", "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notNaN(Double.NaN));
assertEquals("The validated value is not a number", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notNaN(Double.NaN, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.finite(Double.POSITIVE_INFINITY));
assertEquals("The value is invalid: Infinity", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.finite(Double.NEGATIVE_INFINITY));
assertEquals("The value is invalid: -Infinity", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.finite(Double.NaN));
assertEquals("The value is invalid: NaN", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.finite(Double.POSITIVE_INFINITY, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.finite(Double.NEGATIVE_INFINITY, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.finite(Double.NaN, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, "0"));
assertEquals("The value 0 is not in the specified inclusive range of 1 to 3", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, "4"));
assertEquals("The value 4 is not in the specified inclusive range of 1 to 3", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, "0", "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, "4", "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0));
assertEquals("The value 0 is not in the specified inclusive range of 1 to 3", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4));
assertEquals("The value 4 is not in the specified inclusive range of 1 to 3", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0.01));
assertEquals("The value 0.01 is not in the specified inclusive range of 0.1 to 3.1", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4.1));
assertEquals("The value 4.1 is not in the specified inclusive range of 0.1 to 3.1", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0.01, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4.1, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND));
assertEquals("The value 1 is not in the specified exclusive range of 1 to 3", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND));
assertEquals("The value 3 is not in the specified exclusive range of 1 to 3", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, "0"));
assertEquals("The value 0 is not in the specified exclusive range of 1 to 3", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, "4"));
assertEquals("The value 4 is not in the specified exclusive range of 1 to 3", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, "0", "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, "4", "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND));
assertEquals("The value 1 is not in the specified exclusive range of 1 to 3", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND));
assertEquals("The value 3 is not in the specified exclusive range of 1 to 3", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0));
assertEquals("The value 0 is not in the specified exclusive range of 1 to 3", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4));
assertEquals("The value 4 is not in the specified exclusive range of 1 to 3", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND));
assertEquals("The value 0.1 is not in the specified exclusive range of 0.1 to 3.1", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND));
assertEquals("The value 3.1 is not in the specified exclusive range of 0.1 to 3.1", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0.01));
assertEquals("The value 0.01 is not in the specified exclusive range of 0.1 to 3.1", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4.1));
assertEquals("The value 4.1 is not in the specified exclusive range of 0.1 to 3.1", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0.01, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4.1, "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isInstanceOf(List.class, "hi"));
assertEquals("Expected type: java.util.List, actual: java.lang.String", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isInstanceOf(List.class, "hi", "MSG"));
assertEquals("MSG", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.isInstanceOf(List.class, "hi", "Error %s=%s", "Name", "Value"));
assertEquals("Error Name=Value", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isAssignableFrom(List.class, String.class));
assertEquals("Cannot assign a java.lang.String to a java.util.List", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isAssignableFrom(null, String.class));
assertEquals("Cannot assign a java.lang.String to a null type", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isAssignableFrom(List.class, null));
assertEquals("Cannot assign a null type to a java.util.List", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isAssignableFrom(null, null));
assertEquals("Cannot assign a null type to a null type", ex.getMessage());
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.isAssignableFrom(List.class, String.class, "MSG"));
assertEquals("MSG", ex.getMessage());
assertNotNull(new Validate());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(Validate.class.getModifiers()));
assertFalse(Modifier.isFinal(Validate.class.getModifiers()));
assertFalse(StringUtils.isAlpha(null));
assertFalse(StringUtils.isAlpha(""));
assertFalse(StringUtils.isAlpha(" "));
assertTrue(StringUtils.isAlpha("a"));
assertTrue(StringUtils.isAlpha("A"));
assertTrue(StringUtils.isAlpha("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));
assertFalse(StringUtils.isAlpha("ham kso"));
assertFalse(StringUtils.isAlpha("1"));
assertFalse(StringUtils.isAlpha("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));
assertFalse(StringUtils.isAlpha("_"));
assertFalse(StringUtils.isAlpha("hkHKHik*khbkuh"));
assertFalse(StringUtils.isAlphanumeric(null));
assertFalse(StringUtils.isAlphanumeric(""));
assertFalse(StringUtils.isAlphanumeric(" "));
assertTrue(StringUtils.isAlphanumeric("a"));
assertTrue(StringUtils.isAlphanumeric("A"));
assertTrue(StringUtils.isAlphanumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));
assertFalse(StringUtils.isAlphanumeric("ham kso"));
assertTrue(StringUtils.isAlphanumeric("1"));
assertTrue(StringUtils.isAlphanumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));
assertFalse(StringUtils.isAlphanumeric("_"));
assertFalse(StringUtils.isAlphanumeric("hkHKHik*khbkuh"));
assertFalse(StringUtils.isAlphanumericSpace(null));
assertTrue(StringUtils.isAlphanumericSpace(""));
assertTrue(StringUtils.isAlphanumericSpace(" "));
assertTrue(StringUtils.isAlphanumericSpace("a"));
assertTrue(StringUtils.isAlphanumericSpace("A"));
assertTrue(StringUtils.isAlphanumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));
assertTrue(StringUtils.isAlphanumericSpace("ham kso"));
assertTrue(StringUtils.isAlphanumericSpace("1"));
assertTrue(StringUtils.isAlphanumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));
assertFalse(StringUtils.isAlphanumericSpace("_"));
assertFalse(StringUtils.isAlphanumericSpace("hkHKHik*khbkuh"));
assertFalse(StringUtils.isAlphaSpace(null));
assertTrue(StringUtils.isAlphaSpace(""));
assertTrue(StringUtils.isAlphaSpace(" "));
assertTrue(StringUtils.isAlphaSpace("a"));
assertTrue(StringUtils.isAlphaSpace("A"));
assertTrue(StringUtils.isAlphaSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));
assertTrue(StringUtils.isAlphaSpace("ham kso"));
assertFalse(StringUtils.isAlphaSpace("1"));
assertFalse(StringUtils.isAlphaSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));
assertFalse(StringUtils.isAlphaSpace("_"));
assertFalse(StringUtils.isAlphaSpace("hkHKHik*khbkuh"));
assertFalse(StringUtils.isAsciiPrintable(null));
assertTrue(StringUtils.isAsciiPrintable(""));
assertTrue(StringUtils.isAsciiPrintable(" "));
assertTrue(StringUtils.isAsciiPrintable("a"));
assertTrue(StringUtils.isAsciiPrintable("A"));
assertTrue(StringUtils.isAsciiPrintable("1"));
assertTrue(StringUtils.isAsciiPrintable("Ceki"));
assertTrue(StringUtils.isAsciiPrintable("!ab2c~"));
assertTrue(StringUtils.isAsciiPrintable("1000"));
assertTrue(StringUtils.isAsciiPrintable("10 00"));
assertFalse(StringUtils.isAsciiPrintable("10\t00"));
assertTrue(StringUtils.isAsciiPrintable("10.00"));
assertTrue(StringUtils.isAsciiPrintable("10,00"));
assertTrue(StringUtils.isAsciiPrintable("!ab-c~"));
assertTrue(StringUtils.isAsciiPrintable("hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug"));
assertTrue(StringUtils.isAsciiPrintable("\u0020"));
assertTrue(StringUtils.isAsciiPrintable("\u0021"));
assertTrue(StringUtils.isAsciiPrintable("\u007e"));
assertFalse(StringUtils.isAsciiPrintable("\u007f"));
assertTrue(StringUtils.isAsciiPrintable("G?lc?"));
assertTrue(StringUtils.isAsciiPrintable("=?iso-8859-1?Q?G=FClc=FC?="));
assertFalse(StringUtils.isAsciiPrintable("G\u00fclc\u00fc"));
assertFalse(StringUtils.isNumeric(null));
assertFalse(StringUtils.isNumeric(""));
assertFalse(StringUtils.isNumeric(" "));
assertFalse(StringUtils.isNumeric("a"));
assertFalse(StringUtils.isNumeric("A"));
assertFalse(StringUtils.isNumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));
assertFalse(StringUtils.isNumeric("ham kso"));
assertTrue(StringUtils.isNumeric("1"));
assertTrue(StringUtils.isNumeric("1000"));
assertTrue(StringUtils.isNumeric("\u0967\u0968\u0969"));
assertFalse(StringUtils.isNumeric("\u0967\u0968 \u0969"));
assertFalse(StringUtils.isNumeric("2.3"));
assertFalse(StringUtils.isNumeric("10 00"));
assertFalse(StringUtils.isNumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));
assertFalse(StringUtils.isNumeric("_"));
assertFalse(StringUtils.isNumeric("hkHKHik*khbkuh"));
assertFalse(StringUtils.isNumeric("+123"));
assertFalse(StringUtils.isNumeric("-123"));
assertFalse(StringUtils.isNumericSpace(null));
assertTrue(StringUtils.isNumericSpace(""));
assertTrue(StringUtils.isNumericSpace(" "));
assertFalse(StringUtils.isNumericSpace("a"));
assertFalse(StringUtils.isNumericSpace("A"));
assertFalse(StringUtils.isNumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl"));
assertFalse(StringUtils.isNumericSpace("ham kso"));
assertTrue(StringUtils.isNumericSpace("1"));
assertTrue(StringUtils.isNumericSpace("1000"));
assertFalse(StringUtils.isNumericSpace("2.3"));
assertTrue(StringUtils.isNumericSpace("10 00"));
assertTrue(StringUtils.isNumericSpace("\u0967\u0968\u0969"));
assertTrue(StringUtils.isNumericSpace("\u0967\u0968 \u0969"));
assertFalse(StringUtils.isNumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug"));
assertFalse(StringUtils.isNumericSpace("_"));
assertFalse(StringUtils.isNumericSpace("hkHKHik*khbkuh"));
assertFalse(StringUtils.isWhitespace(null));
assertTrue(StringUtils.isWhitespace(""));
assertTrue(StringUtils.isWhitespace(" "));
assertTrue(StringUtils.isWhitespace("\t \n \t"));
assertFalse(StringUtils.isWhitespace("\t aa\n \t"));
assertTrue(StringUtils.isWhitespace(" "));
assertFalse(StringUtils.isWhitespace(" a "));
assertFalse(StringUtils.isWhitespace("a  "));
assertFalse(StringUtils.isWhitespace("  a"));
assertFalse(StringUtils.isWhitespace("aba"));
assertTrue(StringUtils.isWhitespace(StringUtilsTest.WHITESPACE));
assertFalse(StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE));
private void assertIsEquals(final Object array1, final Object array2, final Object array3) {assertTrue(ArrayUtils.isEquals(array1, array1));
assertTrue(ArrayUtils.isEquals(array2, array2));
assertTrue(ArrayUtils.isEquals(array3, array3));
assertFalse(ArrayUtils.isEquals(array1, array2));
assertFalse(ArrayUtils.isEquals(array2, array1));
assertFalse(ArrayUtils.isEquals(array1, array3));
assertFalse(ArrayUtils.isEquals(array3, array1));
assertFalse(ArrayUtils.isEquals(array1, array2));
assertFalse(ArrayUtils.isEquals(array2, array1));
assertEquals(2, array.length);
assertEquals("foo", array[0]);
assertEquals("bar", array[1]);
assertEquals(2, array.length);
assertEquals(Integer.valueOf(42), array[0]);
assertEquals(Double.valueOf(Math.PI), array[1]);
assertTrue(obj instanceof String[]);
assertArrayEquals(null, ArrayUtils.clone((Object[]) null));
assertArrayEquals(original1, cloned1);
assertNotSame(original1, cloned1);
assertArrayEquals(original1, cloned1);
assertNotSame(original1, cloned1);
assertSame(original1[0], cloned1[0]);
assertSame(original1[1], cloned1[1]);
assertSame(original1[2], cloned1[2]);
assertNull(ArrayUtils.clone((boolean[]) null));
assertArrayEquals(original, cloned);
assertNotSame(original, cloned);
assertNull(ArrayUtils.clone((byte[]) null));
assertArrayEquals(original, cloned);
assertNotSame(original, cloned);
assertNull(ArrayUtils.clone((char[]) null));
assertArrayEquals(original, cloned);
assertNotSame(original, cloned);
assertNull(ArrayUtils.clone((double[]) null));
assertArrayEquals(original, cloned);
assertNotSame(original, cloned);
assertNull(ArrayUtils.clone((float[]) null));
assertArrayEquals(original, cloned);
assertNotSame(original, cloned);
assertNull(ArrayUtils.clone((int[]) null));
assertArrayEquals(original, cloned);
assertNotSame(original, cloned);
assertNull(ArrayUtils.clone((long[]) null));
assertArrayEquals(original, cloned);
assertNotSame(original, cloned);
assertNull(ArrayUtils.clone((short[]) null));
assertArrayEquals(original, cloned);
assertNotSame(original, cloned);
assertNotNull(new ArrayUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(ArrayUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(ArrayUtils.class.getModifiers()));
assertFalse(ArrayUtils.contains(null, null));
assertFalse(ArrayUtils.contains(null, "1"));
assertTrue(ArrayUtils.contains(array, "0"));
assertTrue(ArrayUtils.contains(array, "1"));
assertTrue(ArrayUtils.contains(array, "2"));
assertTrue(ArrayUtils.contains(array, "3"));
assertFalse(ArrayUtils.contains(array, "notInArray"));
assertTrue(ArrayUtils.contains(array, null));
assertFalse(ArrayUtils.containsAny(null, null));
assertFalse(ArrayUtils.containsAny(null, "1"));
assertTrue(ArrayUtils.containsAny(array, "0"));
assertTrue(ArrayUtils.containsAny(array, "1"));
assertTrue(ArrayUtils.containsAny(array, "2"));
assertTrue(ArrayUtils.containsAny(array, "3"));
assertFalse(ArrayUtils.containsAny(array, "notInArray"));
assertTrue(ArrayUtils.containsAny(array, new String[] {null}));
assertTrue(ArrayUtils.contains(array, new LANG1261ParentObject()));
assertFalse(ArrayUtils.contains(array, true));
assertTrue(ArrayUtils.contains(array, true));
assertTrue(ArrayUtils.contains(array, false));
assertTrue(ArrayUtils.contains(array, true));
assertFalse(ArrayUtils.contains(array, false));
assertFalse(ArrayUtils.contains(array, (byte) 1));
assertTrue(ArrayUtils.contains(array, (byte) 0));
assertTrue(ArrayUtils.contains(array, (byte) 1));
assertTrue(ArrayUtils.contains(array, (byte) 2));
assertTrue(ArrayUtils.contains(array, (byte) 3));
assertFalse(ArrayUtils.contains(array, (byte) 99));
assertFalse(ArrayUtils.contains(array, 'b'));
assertTrue(ArrayUtils.contains(array, 'a'));
assertTrue(ArrayUtils.contains(array, 'b'));
assertTrue(ArrayUtils.contains(array, 'c'));
assertTrue(ArrayUtils.contains(array, 'd'));
assertFalse(ArrayUtils.contains(array, 'e'));
assertFalse(ArrayUtils.contains(array, (double) 1));
assertTrue(ArrayUtils.contains(array, (double) 0));
assertTrue(ArrayUtils.contains(array, (double) 1));
assertTrue(ArrayUtils.contains(array, (double) 2));
assertTrue(ArrayUtils.contains(array, (double) 3));
assertFalse(ArrayUtils.contains(array, (double) 99));
assertTrue(ArrayUtils.contains(a, Double.POSITIVE_INFINITY));
assertTrue(ArrayUtils.contains(a, Double.NEGATIVE_INFINITY));
assertTrue(ArrayUtils.contains(a, Double.NaN));
assertFalse(ArrayUtils.contains(array, (double) 1, (double) 0));
assertFalse(ArrayUtils.contains(array, 4.0, 0.33));
assertFalse(ArrayUtils.contains(array, 2.5, 0.49));
assertTrue(ArrayUtils.contains(array, 2.5, 0.50));
assertTrue(ArrayUtils.contains(array, 2.5, 0.51));
assertFalse(ArrayUtils.contains(array, (float) 1));
assertTrue(ArrayUtils.contains(array, (float) 0));
assertTrue(ArrayUtils.contains(array, (float) 1));
assertTrue(ArrayUtils.contains(array, (float) 2));
assertTrue(ArrayUtils.contains(array, (float) 3));
assertFalse(ArrayUtils.contains(array, (float) 99));
assertTrue(ArrayUtils.contains(array, Float.POSITIVE_INFINITY));
assertTrue(ArrayUtils.contains(array, Float.NEGATIVE_INFINITY));
assertTrue(ArrayUtils.contains(array, Float.NaN));
assertFalse(ArrayUtils.contains(array, 1));
assertTrue(ArrayUtils.contains(array, 0));
assertTrue(ArrayUtils.contains(array, 1));
assertTrue(ArrayUtils.contains(array, 2));
assertTrue(ArrayUtils.contains(array, 3));
assertFalse(ArrayUtils.contains(array, 99));
assertFalse(ArrayUtils.contains(array, 1));
assertTrue(ArrayUtils.contains(array, 0));
assertTrue(ArrayUtils.contains(array, 1));
assertTrue(ArrayUtils.contains(array, 2));
assertTrue(ArrayUtils.contains(array, 3));
assertFalse(ArrayUtils.contains(array, 99));
assertFalse(ArrayUtils.contains(array, (short) 1));
assertTrue(ArrayUtils.contains(array, (short) 0));
assertTrue(ArrayUtils.contains(array, (short) 1));
assertTrue(ArrayUtils.contains(array, (short) 2));
assertTrue(ArrayUtils.contains(array, (short) 3));
assertFalse(ArrayUtils.contains(array, (short) 99));
assertNull(ArrayUtils.toPrimitive((Object[]) null));
assertArrayEquals(new boolean[]{true}, ArrayUtils.toPrimitive(new Boolean[]{true}));
assertArrayEquals(new char[]{'a'}, ArrayUtils.toPrimitive(new Character[]{'a'}));
assertArrayEquals(new byte[]{1}, ArrayUtils.toPrimitive(new Byte[]{1}));
assertArrayEquals(new int[]{}, ArrayUtils.toPrimitive(new Integer[]{}));
assertArrayEquals(new short[]{2}, ArrayUtils.toPrimitive(new Short[]{2}));
assertArrayEquals(new long[]{2, 3}, ArrayUtils.toPrimitive(new Long[]{2L, 3L}));
assertArrayEquals(new float[]{3.14f}, ArrayUtils.toPrimitive(new Float[]{3.14f}), 0.1f);
assertArrayEquals(new double[]{2.718}, ArrayUtils.toPrimitive(new Double[]{2.718}), 0.1);
assertNull(ArrayUtils.toPrimitive((Object) null));
assertArrayEquals(new boolean[]{true}, (boolean[]) ArrayUtils.toPrimitive((Object) new Boolean[]{true}));
assertArrayEquals(new char[]{'a'}, (char[]) ArrayUtils.toPrimitive((Object) new Character[]{'a'}));
assertArrayEquals(new byte[]{1}, (byte[]) ArrayUtils.toPrimitive((Object) new Byte[]{1}));
assertArrayEquals(new int[]{}, (int[]) ArrayUtils.toPrimitive((Object) new Integer[]{}));
assertArrayEquals(new short[]{2}, (short[]) ArrayUtils.toPrimitive((Object) new Short[]{2}));
assertArrayEquals(new long[]{2, 3}, (long[]) ArrayUtils.toPrimitive((Object) new Long[]{2L, 3L}));
assertArrayEquals(new float[]{3.14f}, (float[]) ArrayUtils.toPrimitive((Object) new Float[]{3.14f}), 0.1f);
assertArrayEquals(new double[]{2.718}, (double[]) ArrayUtils.toPrimitive((Object) new Double[]{2.718}), 0.1);
assertEquals(0, array.length);
assertNull(ArrayUtils.get(null, -1));
assertNull(ArrayUtils.get(null, 0));
assertNull(ArrayUtils.get(null, 1));
assertNull(ArrayUtils.get(array0, -1));
assertNull(ArrayUtils.get(array0, 0));
assertNull(ArrayUtils.get(array0, 1));
assertNull(ArrayUtils.get(array1, -1));
assertEquals(StringUtils.EMPTY, ArrayUtils.get(array1, 0));
assertNull(ArrayUtils.get(array1, 1));
assertEquals(TestClass.class, componentType);
assertNull(ArrayUtils.getComponentType(null));
assertNull(ArrayUtils.get(null, -1, null));
assertNull(ArrayUtils.get(null, 0, null));
assertNull(ArrayUtils.get(null, 1, null));
assertNull(ArrayUtils.get(array0, -1, null));
assertNull(ArrayUtils.get(array0, 0, null));
assertNull(ArrayUtils.get(array0, 1, null));
assertNull(ArrayUtils.get(array1, -1, null));
assertEquals(StringUtils.EMPTY, ArrayUtils.get(array1, 0, null));
assertNull(ArrayUtils.get(array1, 1, null));
assertEquals(defaultValue, ArrayUtils.get(array1, -1, defaultValue));
assertEquals(StringUtils.EMPTY, ArrayUtils.get(array1, 0, defaultValue));
assertEquals(defaultValue, ArrayUtils.get(array1, 1, defaultValue));
assertEquals(0, ArrayUtils.getLength(null));
assertEquals(0, ArrayUtils.getLength(null));
assertEquals(0, ArrayUtils.getLength(emptyObjectArray));
assertEquals(1, ArrayUtils.getLength(notEmptyObjectArray));
assertEquals(0, ArrayUtils.getLength(null));
assertEquals(0, ArrayUtils.getLength(emptyIntArray));
assertEquals(1, ArrayUtils.getLength(notEmptyIntArray));
assertEquals(0, ArrayUtils.getLength(null));
assertEquals(0, ArrayUtils.getLength(emptyShortArray));
assertEquals(1, ArrayUtils.getLength(notEmptyShortArray));
assertEquals(0, ArrayUtils.getLength(null));
assertEquals(0, ArrayUtils.getLength(emptyCharArray));
assertEquals(1, ArrayUtils.getLength(notEmptyCharArray));
assertEquals(0, ArrayUtils.getLength(null));
assertEquals(0, ArrayUtils.getLength(emptyByteArray));
assertEquals(1, ArrayUtils.getLength(notEmptyByteArray));
assertEquals(0, ArrayUtils.getLength(null));
assertEquals(0, ArrayUtils.getLength(emptyDoubleArray));
assertEquals(1, ArrayUtils.getLength(notEmptyDoubleArray));
assertEquals(0, ArrayUtils.getLength(null));
assertEquals(0, ArrayUtils.getLength(emptyFloatArray));
assertEquals(1, ArrayUtils.getLength(notEmptyFloatArray));
assertEquals(0, ArrayUtils.getLength(null));
assertEquals(0, ArrayUtils.getLength(emptyBooleanArray));
assertEquals(1, ArrayUtils.getLength(notEmptyBooleanArray));
assertThrows(IllegalArgumentException.class, () -> ArrayUtils.getLength("notAnArray"));
assertEquals(ArrayUtils.hashCode(array1), ArrayUtils.hashCode(array1));
assertNotEquals(ArrayUtils.hashCode(array1), ArrayUtils.hashCode(array2));
assertEquals(ArrayUtils.hashCode(array3), ArrayUtils.hashCode(array3));
assertEquals(ArrayUtils.hashCode(array3), ArrayUtils.hashCode(array4));
assertEquals(ArrayUtils.hashCode(arrayB), ArrayUtils.hashCode(arrayA));
assertEquals(emptySet, ArrayUtils.indexesOf((Object[]) null, null));
assertEquals(emptySet, ArrayUtils.indexesOf(new Object[0], "0"));
assertEquals(testSet, ArrayUtils.indexesOf(array, "0"));
assertEquals(testSet, ArrayUtils.indexesOf(array, "2"));
assertEquals(testSet, ArrayUtils.indexesOf(array, "3"));
assertEquals(testSet, ArrayUtils.indexesOf(array, null));
assertEquals(emptySet, ArrayUtils.indexesOf(array, "notInArray"));
assertEquals(emptySet, ArrayUtils.indexesOf(array, true));
assertEquals(emptySet, ArrayUtils.indexesOf(array, true));
assertEquals(testSet, ArrayUtils.indexesOf(array, true));
assertEquals(testSet, ArrayUtils.indexesOf(array, false));
assertEquals(emptySet, ArrayUtils.indexesOf(array, false));
assertEquals(emptySet, ArrayUtils.indexesOf(array, true, 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, true, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, true, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, true, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, false, 1));
assertEquals(emptySet, ArrayUtils.indexesOf(array, false, 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, false, -1));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (byte) 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 3));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (byte) 99));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (byte) 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 0, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 1, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 2, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 3, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 3, -1));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (byte) 99, 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 'a'));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'a'));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'b'));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'c'));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'd'));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 'e'));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 'a', 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'a', 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'a', 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'a', -1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'b', 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'c', 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 'd', 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 'd', 5));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 'e', 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 99));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (double) 0, (double) 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (double) 0, (double) 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (double) 0, 0.3));
assertEquals(testSet, ArrayUtils.indexesOf(array, 4.15, 2.0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1.00001324, 0.0001));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3, -1));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 99, 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (double) 0, 0, (double) 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (double) 0, 0, (double) 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (double) 0, 1, 0.3));
assertEquals(testSet, ArrayUtils.indexesOf(array, (double) 0, 0, 0.3));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0, 0.35));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 2, 0.35));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2, -1, 0.35));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 2, 3, 0.35));
assertEquals(testSet, ArrayUtils.indexesOf(array, 4.15, 0, 2.0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1.00001324, 0, 0.0001));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 99));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3, -1));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 99, 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3, -1));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 99, 0));
assertEquals(emptySet, ArrayUtils.indexesOf((long[]) null, 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 4));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3));
assertEquals(emptySet, ArrayUtils.indexesOf((long[]) null, 0, 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 4, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3, 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 3, 8));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (short) 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 3));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (short) 99));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (short) 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 0, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 0, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 1, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 2, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 3, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 3, -1));
assertEquals(emptySet, ArrayUtils.indexesOf(array, (short) 99, 0));
assertEquals(emptySet, ArrayUtils.indexesOf(null, null, 2));
assertEquals(emptySet, ArrayUtils.indexesOf(new Object[0], "0", 0));
assertEquals(emptySet, ArrayUtils.indexesOf(null, "0", 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, "0", 8));
assertEquals(testSet, ArrayUtils.indexesOf(array, "0", 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, "1", 0));
assertEquals(emptySet, ArrayUtils.indexesOf(array, "1", 9));
assertEquals(testSet, ArrayUtils.indexesOf(array, "2", 3));
assertEquals(testSet, ArrayUtils.indexesOf(array, "2", 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, "3", 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, null, 0));
assertEquals(-1, ArrayUtils.indexOf(null, null));
assertEquals(-1, ArrayUtils.indexOf(null, "0"));
assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0"));
assertEquals(0, ArrayUtils.indexOf(array, "0"));
assertEquals(1, ArrayUtils.indexOf(array, "1"));
assertEquals(2, ArrayUtils.indexOf(array, "2"));
assertEquals(3, ArrayUtils.indexOf(array, "3"));
assertEquals(4, ArrayUtils.indexOf(array, null));
assertEquals(-1, ArrayUtils.indexOf(array, "notInArray"));
assertEquals(-1, ArrayUtils.indexOf(array, true));
assertEquals(-1, ArrayUtils.indexOf(array, true));
assertEquals(0, ArrayUtils.indexOf(array, true));
assertEquals(1, ArrayUtils.indexOf(array, false));
assertEquals(-1, ArrayUtils.indexOf(array, false));
assertEquals(-1, ArrayUtils.indexOf(array, true, 2));
assertEquals(-1, ArrayUtils.indexOf(array, true, 2));
assertEquals(2, ArrayUtils.indexOf(array, true, 1));
assertEquals(-1, ArrayUtils.indexOf(array, false, 2));
assertEquals(1, ArrayUtils.indexOf(array, false, 0));
assertEquals(1, ArrayUtils.indexOf(array, false, -1));
assertEquals(-1, ArrayUtils.indexOf(array, false, 0));
assertEquals(-1, ArrayUtils.indexOf(array, false, -1));
assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0));
assertEquals(0, ArrayUtils.indexOf(array, (byte) 0));
assertEquals(1, ArrayUtils.indexOf(array, (byte) 1));
assertEquals(2, ArrayUtils.indexOf(array, (byte) 2));
assertEquals(3, ArrayUtils.indexOf(array, (byte) 3));
assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99));
assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2));
assertEquals(4, ArrayUtils.indexOf(array, (byte) 0, 2));
assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2));
assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2));
assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2));
assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, -1));
assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0));
assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6));
assertEquals(-1, ArrayUtils.indexOf(array, 'a'));
assertEquals(0, ArrayUtils.indexOf(array, 'a'));
assertEquals(1, ArrayUtils.indexOf(array, 'b'));
assertEquals(2, ArrayUtils.indexOf(array, 'c'));
assertEquals(3, ArrayUtils.indexOf(array, 'd'));
assertEquals(-1, ArrayUtils.indexOf(array, 'e'));
assertEquals(-1, ArrayUtils.indexOf(array, 'a', 2));
assertEquals(4, ArrayUtils.indexOf(array, 'a', 2));
assertEquals(-1, ArrayUtils.indexOf(array, 'b', 2));
assertEquals(2, ArrayUtils.indexOf(array, 'c', 2));
assertEquals(3, ArrayUtils.indexOf(array, 'd', 2));
assertEquals(3, ArrayUtils.indexOf(array, 'd', -1));
assertEquals(-1, ArrayUtils.indexOf(array, 'e', 0));
assertEquals(-1, ArrayUtils.indexOf(array, 'a', 6));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));
assertEquals(0, ArrayUtils.indexOf(array, (double) 0));
assertEquals(1, ArrayUtils.indexOf(array, (double) 1));
assertEquals(2, ArrayUtils.indexOf(array, (double) 2));
assertEquals(3, ArrayUtils.indexOf(array, (double) 3));
assertEquals(3, ArrayUtils.indexOf(array, (double) 3, -1));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 99));
assertEquals(0, ArrayUtils.indexOf(array, Double.NEGATIVE_INFINITY));
assertEquals(1, ArrayUtils.indexOf(array, Double.NaN));
assertEquals(2, ArrayUtils.indexOf(array, Double.POSITIVE_INFINITY));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));
assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0.3));
assertEquals(2, ArrayUtils.indexOf(array, 2.2, 0.35));
assertEquals(3, ArrayUtils.indexOf(array, 4.15, 2.0));
assertEquals(1, ArrayUtils.indexOf(array, 1.00001324, 0.0001));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));
assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 2));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 1, 2));
assertEquals(2, ArrayUtils.indexOf(array, (double) 2, 2));
assertEquals(3, ArrayUtils.indexOf(array, (double) 3, 2));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 99, 0));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 6));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));
assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, 0.3));
assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, 0.3));
assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, 0.3));
assertEquals(2, ArrayUtils.indexOf(array, 2.2, 0, 0.35));
assertEquals(3, ArrayUtils.indexOf(array, 4.15, 0, 2.0));
assertEquals(1, ArrayUtils.indexOf(array, 1.00001324, 0, 0.0001));
assertEquals(3, ArrayUtils.indexOf(array, 4.15, -1, 2.0));
assertEquals(1, ArrayUtils.indexOf(array, 1.00001324, -300, 0.0001));
assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));
assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));
assertEquals(0, ArrayUtils.indexOf(array, (float) 0));
assertEquals(1, ArrayUtils.indexOf(array, (float) 1));
assertEquals(2, ArrayUtils.indexOf(array, (float) 2));
assertEquals(3, ArrayUtils.indexOf(array, (float) 3));
assertEquals(-1, ArrayUtils.indexOf(array, (float) 99));
assertEquals(0, ArrayUtils.indexOf(array, Float.NEGATIVE_INFINITY));
assertEquals(1, ArrayUtils.indexOf(array, Float.NaN));
assertEquals(2, ArrayUtils.indexOf(array, Float.POSITIVE_INFINITY));
assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));
assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));
assertEquals(4, ArrayUtils.indexOf(array, (float) 0, 2));
assertEquals(-1, ArrayUtils.indexOf(array, (float) 1, 2));
assertEquals(2, ArrayUtils.indexOf(array, (float) 2, 2));
assertEquals(3, ArrayUtils.indexOf(array, (float) 3, 2));
assertEquals(3, ArrayUtils.indexOf(array, (float) 3, -1));
assertEquals(-1, ArrayUtils.indexOf(array, (float) 99, 0));
assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6));
assertEquals(-1, ArrayUtils.indexOf(array, 0));
assertEquals(0, ArrayUtils.indexOf(array, 0));
assertEquals(1, ArrayUtils.indexOf(array, 1));
assertEquals(2, ArrayUtils.indexOf(array, 2));
assertEquals(3, ArrayUtils.indexOf(array, 3));
assertEquals(-1, ArrayUtils.indexOf(array, 99));
assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));
assertEquals(4, ArrayUtils.indexOf(array, 0, 2));
assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));
assertEquals(2, ArrayUtils.indexOf(array, 2, 2));
assertEquals(3, ArrayUtils.indexOf(array, 3, 2));
assertEquals(3, ArrayUtils.indexOf(array, 3, -1));
assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));
assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));
assertEquals(-1, ArrayUtils.indexOf(array, 0));
assertEquals(0, ArrayUtils.indexOf(array, 0));
assertEquals(1, ArrayUtils.indexOf(array, 1));
assertEquals(2, ArrayUtils.indexOf(array, 2));
assertEquals(3, ArrayUtils.indexOf(array, 3));
assertEquals(-1, ArrayUtils.indexOf(array, 99));
assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));
assertEquals(4, ArrayUtils.indexOf(array, 0, 2));
assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));
assertEquals(2, ArrayUtils.indexOf(array, 2, 2));
assertEquals(3, ArrayUtils.indexOf(array, 3, 2));
assertEquals(3, ArrayUtils.indexOf(array, 3, -1));
assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));
assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));
assertEquals(-1, ArrayUtils.indexOf(array, (short) 0));
assertEquals(0, ArrayUtils.indexOf(array, (short) 0));
assertEquals(1, ArrayUtils.indexOf(array, (short) 1));
assertEquals(2, ArrayUtils.indexOf(array, (short) 2));
assertEquals(3, ArrayUtils.indexOf(array, (short) 3));
assertEquals(-1, ArrayUtils.indexOf(array, (short) 99));
assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 2));
assertEquals(4, ArrayUtils.indexOf(array, (short) 0, 2));
assertEquals(-1, ArrayUtils.indexOf(array, (short) 1, 2));
assertEquals(2, ArrayUtils.indexOf(array, (short) 2, 2));
assertEquals(3, ArrayUtils.indexOf(array, (short) 3, 2));
assertEquals(3, ArrayUtils.indexOf(array, (short) 3, -1));
assertEquals(-1, ArrayUtils.indexOf(array, (short) 99, 0));
assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 6));
assertEquals(-1, ArrayUtils.indexOf(null, null, 2));
assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0", 0));
assertEquals(-1, ArrayUtils.indexOf(null, "0", 2));
assertEquals(5, ArrayUtils.indexOf(array, "0", 2));
assertEquals(-1, ArrayUtils.indexOf(array, "1", 2));
assertEquals(2, ArrayUtils.indexOf(array, "2", 2));
assertEquals(3, ArrayUtils.indexOf(array, "3", 2));
assertEquals(4, ArrayUtils.indexOf(array, null, 2));
assertEquals(-1, ArrayUtils.indexOf(array, "notInArray", 2));
assertEquals(4, ArrayUtils.indexOf(array, null, -1));
assertEquals(-1, ArrayUtils.indexOf(array, null, 8));
assertEquals(-1, ArrayUtils.indexOf(array, "0", 8));
assertEquals(2, array.length);
assertEquals("foo", array[0]);
assertEquals("bar", array[1]);
assertEquals(0, array.length);
assertFalse(ArrayUtils.isArrayIndexValid(null, 0));
assertFalse(ArrayUtils.isArrayIndexValid(array, 1));
assertFalse(ArrayUtils.isArrayIndexValid(array, -1));
assertTrue(ArrayUtils.isArrayIndexValid(array, 0));
assertTrue(ArrayUtils.isEmpty((Object[]) null));
assertTrue(ArrayUtils.isEmpty(emptyArray));
assertFalse(ArrayUtils.isEmpty(notEmptyArray));
assertTrue(ArrayUtils.isEmpty((long[]) null));
assertTrue(ArrayUtils.isEmpty(emptyLongArray));
assertFalse(ArrayUtils.isEmpty(notEmptyLongArray));
assertTrue(ArrayUtils.isEmpty((int[]) null));
assertTrue(ArrayUtils.isEmpty(emptyIntArray));
assertFalse(ArrayUtils.isEmpty(notEmptyIntArray));
assertTrue(ArrayUtils.isEmpty((short[]) null));
assertTrue(ArrayUtils.isEmpty(emptyShortArray));
assertFalse(ArrayUtils.isEmpty(notEmptyShortArray));
assertTrue(ArrayUtils.isEmpty((char[]) null));
assertTrue(ArrayUtils.isEmpty(emptyCharArray));
assertFalse(ArrayUtils.isEmpty(notEmptyCharArray));
assertTrue(ArrayUtils.isEmpty((byte[]) null));
assertTrue(ArrayUtils.isEmpty(emptyByteArray));
assertFalse(ArrayUtils.isEmpty(notEmptyByteArray));
assertTrue(ArrayUtils.isEmpty((double[]) null));
assertTrue(ArrayUtils.isEmpty(emptyDoubleArray));
assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray));
assertTrue(ArrayUtils.isEmpty((float[]) null));
assertTrue(ArrayUtils.isEmpty(emptyFloatArray));
assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray));
assertTrue(ArrayUtils.isEmpty((boolean[]) null));
assertTrue(ArrayUtils.isEmpty(emptyBooleanArray));
assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray));
this.assertIsEquals(larray1, larray2, larray3);
this.assertIsEquals(iarray1, iarray2, iarray3);
this.assertIsEquals(sarray1, sarray2, sarray3);
this.assertIsEquals(farray1, farray2, farray3);
this.assertIsEquals(darray1, darray2, darray3);
this.assertIsEquals(byteArray1, byteArray2, byteArray3);
this.assertIsEquals(charArray1, charArray2, charArray3);
this.assertIsEquals(barray1, barray2, barray3);
assertTrue(ArrayUtils.isEquals(array3, array3));
assertTrue(ArrayUtils.isEquals(array3, array4));
assertTrue(ArrayUtils.isEquals(null, null));
assertFalse(ArrayUtils.isEquals(null, array4));
assertFalse(ArrayUtils.isNotEmpty((Object[]) null));
assertFalse(ArrayUtils.isNotEmpty(emptyArray));
assertTrue(ArrayUtils.isNotEmpty(notEmptyArray));
assertFalse(ArrayUtils.isNotEmpty((long[]) null));
assertFalse(ArrayUtils.isNotEmpty(emptyLongArray));
assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray));
assertFalse(ArrayUtils.isNotEmpty((int[]) null));
assertFalse(ArrayUtils.isNotEmpty(emptyIntArray));
assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray));
assertFalse(ArrayUtils.isNotEmpty((short[]) null));
assertFalse(ArrayUtils.isNotEmpty(emptyShortArray));
assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray));
assertFalse(ArrayUtils.isNotEmpty((char[]) null));
assertFalse(ArrayUtils.isNotEmpty(emptyCharArray));
assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray));
assertFalse(ArrayUtils.isNotEmpty((byte[]) null));
assertFalse(ArrayUtils.isNotEmpty(emptyByteArray));
assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray));
assertFalse(ArrayUtils.isNotEmpty((double[]) null));
assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray));
assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray));
assertFalse(ArrayUtils.isNotEmpty((float[]) null));
assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray));
assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray));
assertFalse(ArrayUtils.isNotEmpty((boolean[]) null));
assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray));
assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertFalse(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertFalse(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertFalse(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertFalse(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array, c));
assertTrue(ArrayUtils.isSorted(array, c));
assertTrue(ArrayUtils.isSorted(array, c));
assertFalse(ArrayUtils.isSorted(array, c));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertFalse(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertFalse(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertFalse(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertFalse(ArrayUtils.isSorted(array));
assertThrows(NullPointerException.class, () -> ArrayUtils.isSorted(null, null));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertTrue(ArrayUtils.isSorted(array));
assertFalse(ArrayUtils.isSorted(array));
assertEquals(-1, ArrayUtils.lastIndexOf(null, null));
assertEquals(-1, ArrayUtils.lastIndexOf(null, "0"));
assertEquals(5, ArrayUtils.lastIndexOf(array, "0"));
assertEquals(1, ArrayUtils.lastIndexOf(array, "1"));
assertEquals(2, ArrayUtils.lastIndexOf(array, "2"));
assertEquals(3, ArrayUtils.lastIndexOf(array, "3"));
assertEquals(4, ArrayUtils.lastIndexOf(array, null));
assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray"));
assertEquals(-1, ArrayUtils.lastIndexOf(array, true));
assertEquals(-1, ArrayUtils.lastIndexOf(array, true));
assertEquals(2, ArrayUtils.lastIndexOf(array, true));
assertEquals(1, ArrayUtils.lastIndexOf(array, false));
assertEquals(-1, ArrayUtils.lastIndexOf(array, false));
assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));
assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2));
assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1));
assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));
assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0));
assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0));
assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1));
assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2));
assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2));
assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2));
assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2));
assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));
assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a'));
assertEquals(4, ArrayUtils.lastIndexOf(array, 'a'));
assertEquals(1, ArrayUtils.lastIndexOf(array, 'b'));
assertEquals(2, ArrayUtils.lastIndexOf(array, 'c'));
assertEquals(3, ArrayUtils.lastIndexOf(array, 'd'));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a', 2));
assertEquals(0, ArrayUtils.lastIndexOf(array, 'a', 2));
assertEquals(1, ArrayUtils.lastIndexOf(array, 'b', 2));
assertEquals(2, ArrayUtils.lastIndexOf(array, 'c', 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', -1));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));
assertEquals(4, ArrayUtils.lastIndexOf(array, 'a', 88));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));
assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0));
assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1));
assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2));
assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));
assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 0.3));
assertEquals(2, ArrayUtils.lastIndexOf(array, 2.2, 0.35));
assertEquals(3, ArrayUtils.lastIndexOf(array, 4.15, 2.0));
assertEquals(1, ArrayUtils.lastIndexOf(array, 1.00001324, 0.0001));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));
assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 2));
assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1, 2));
assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, -1));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));
assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 88));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0));
assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, 0.3));
assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, 0.3));
assertEquals(2, ArrayUtils.lastIndexOf(array, 2.2, 3, 0.35));
assertEquals(3, ArrayUtils.lastIndexOf(array, 4.15, array.length, 2.0));
assertEquals(1, ArrayUtils.lastIndexOf(array, 1.00001324, array.length, 0.0001));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 4.15, -200, 2.0));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));
assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0));
assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1));
assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2));
assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));
assertEquals(0, ArrayUtils.lastIndexOf(array, (float) 0, 2));
assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1, 2));
assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, -1));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));
assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0, 88));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));
assertEquals(4, ArrayUtils.lastIndexOf(array, 0));
assertEquals(1, ArrayUtils.lastIndexOf(array, 1));
assertEquals(2, ArrayUtils.lastIndexOf(array, 2));
assertEquals(3, ArrayUtils.lastIndexOf(array, 3));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));
assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));
assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));
assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));
assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));
assertEquals(4, ArrayUtils.lastIndexOf(array, 0));
assertEquals(1, ArrayUtils.lastIndexOf(array, 1));
assertEquals(2, ArrayUtils.lastIndexOf(array, 2));
assertEquals(3, ArrayUtils.lastIndexOf(array, 3));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));
assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));
assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));
assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));
assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4));
assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0));
assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0));
assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1));
assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2));
assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2));
assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2));
assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2));
assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1));
assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));
assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88));
assertEquals(-1, ArrayUtils.lastIndexOf(null, null, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(null, "0", 2));
assertEquals(0, ArrayUtils.lastIndexOf(array, "0", 2));
assertEquals(1, ArrayUtils.lastIndexOf(array, "1", 2));
assertEquals(2, ArrayUtils.lastIndexOf(array, "2", 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, "3", 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, "3", -1));
assertEquals(4, ArrayUtils.lastIndexOf(array, null, 5));
assertEquals(-1, ArrayUtils.lastIndexOf(array, null, 2));
assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray", 5));
assertEquals(-1, ArrayUtils.lastIndexOf(array, null, -1));
assertEquals(5, ArrayUtils.lastIndexOf(array, "0", 88));
assertEquals(original, ArrayUtils.nullToEmpty(original));
assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, result);
assertNotSame(empty, result);
assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null));
assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, result);
assertNotSame(empty, result);
assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Boolean[]) null));
assertEquals(original, ArrayUtils.nullToEmpty(original));
assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, result);
assertNotSame(empty, result);
assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.nullToEmpty((byte[]) null));
assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, result);
assertNotSame(empty, result);
assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Byte[]) null));
assertEquals(original, ArrayUtils.nullToEmpty(original));
assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, result);
assertNotSame(empty, result);
assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.nullToEmpty((char[]) null));
assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, result);
assertNotSame(empty, result);
assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Character[]) null));
assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, result);
assertNotSame(empty, result);
assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.nullToEmpty((Class<?>[]) null));
assertEquals(original, ArrayUtils.nullToEmpty(original));
assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, result);
assertNotSame(empty, result);
assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.nullToEmpty((double[]) null));
assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result);
assertNotSame(empty, result);
assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null));
assertEquals(original, ArrayUtils.nullToEmpty(original));
assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, result);
assertNotSame(empty, result);
assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.nullToEmpty((float[]) null));
assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, result);
assertNotSame(empty, result);
assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Float[]) null));
assertSame(input, output);
assertSame(input, output);
assertNotNull(output);
assertEquals(0, output.length);
assertThrows(IllegalArgumentException.class, () -> ArrayUtils.nullToEmpty(input, null));
assertEquals(original, ArrayUtils.nullToEmpty(original));
assertEquals(ArrayUtils.EMPTY_INT_ARRAY, result);
assertNotSame(empty, result);
assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.nullToEmpty((int[]) null));
assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, result);
assertNotSame(empty, result);
assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Integer[]) null));
assertEquals(original, ArrayUtils.nullToEmpty(original));
assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, result);
assertNotSame(empty, result);
assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.nullToEmpty((long[]) null));
assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, result);
assertNotSame(empty, result);
assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Long[]) null));
assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, result);
assertNotSame(empty, result);
assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Object[]) null));
assertEquals(original, ArrayUtils.nullToEmpty(original));
assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result);
assertNotSame(empty, result);
assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null));
assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, result);
assertNotSame(empty, result);
assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Short[]) null));
assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, result);
assertNotSame(empty, result);
assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.nullToEmpty((String[]) null));
assertEquals(array[0], str3);
assertEquals(array[1], str2);
assertEquals(array[2], str1);
assertEquals(array[0], str4);
assertEquals(array[1], str3);
assertEquals(array[2], str2);
assertEquals(array[3], str1);
assertArrayEquals(null, array);
assertTrue(array[0]);
assertFalse(array[1]);
assertFalse(array[2]);
assertNull(array);
assertTrue(array[0]);
assertFalse(array[1]);
assertFalse(array[2]);
assertFalse(array[0]);
assertFalse(array[1]);
assertTrue(array[2]);
assertTrue(array[0]);
assertFalse(array[1]);
assertFalse(array[2]);
assertTrue(array[0]);
assertFalse(array[1]);
assertFalse(array[2]);
assertNull(array);
assertEquals(array[0], 4);
assertEquals(array[1], 3);
assertEquals(array[2], 2);
assertNull(array);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[0]);
assertEquals(1, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertNull(array);
assertEquals(array[0], 'C');
assertEquals(array[1], 'f');
assertEquals(array[2], 'a');
assertNull(array);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[0]);
assertEquals(1, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertNull(array);
assertEquals(0.5d, array[0]);
assertEquals(0.4d, array[1]);
assertEquals(0.3d, array[2]);
assertNull(array);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[0]);
assertEquals(1, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertNull(array);
assertEquals(0.5f, array[0]);
assertEquals(0.4f, array[1]);
assertEquals(0.3f, array[2]);
assertNull(array);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[0]);
assertEquals(1, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertNull(array);
assertEquals(array[0], 3);
assertEquals(array[1], 2);
assertEquals(array[2], 1);
assertNull(array);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[0]);
assertEquals(1, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertNull(array);
assertEquals(array[0], 3L);
assertEquals(array[1], 2L);
assertEquals(array[2], 1L);
assertNull(array);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[0]);
assertEquals(1, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertNull(array);
assertEquals("3", array[0]);
assertEquals("2", array[1]);
assertEquals("1", array[2]);
assertEquals("2", array[0]);
assertEquals("1", array[1]);
assertEquals("3", array[2]);
assertEquals("3", array[0]);
assertEquals("2", array[1]);
assertEquals("1", array[2]);
assertEquals("3", array[0]);
assertEquals("2", array[1]);
assertEquals("1", array[2]);
assertNull(array);
assertEquals(array[0], 3);
assertEquals(array[1], 2);
assertEquals(array[2], 1);
assertNull(array);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[0]);
assertEquals(1, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertNull(array);
assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayObject));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayBoolean));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayLong));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayInt));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayShort));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayChar));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayByte));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayDouble));
assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayFloat));
assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayObject));
assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayBoolean));
assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayLong));
assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayInt));
assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayShort));
assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayChar));
assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayByte));
assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayDouble));
assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayFloat));
assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayObject));
assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayBoolean));
assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayLong));
assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayInt));
assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayShort));
assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayChar));
assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayByte));
assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayDouble));
assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayFloat));
assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayObject));
assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayBoolean));
assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayLong));
assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayInt));
assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayShort));
assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayChar));
assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayByte));
assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayDouble));
assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayFloat));
assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayObject));
assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayBoolean));
assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayLong));
assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayInt));
assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayShort));
assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayChar));
assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayByte));
assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayDouble));
assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayFloat));
assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayObject));
assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayBoolean));
assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayLong));
assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayInt));
assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayShort));
assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayChar));
assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayByte));
assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayDouble));
assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayFloat));
assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayObject));
assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayBoolean));
assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayLong));
assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayInt));
assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayShort));
assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayChar));
assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayByte));
assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayDouble));
assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayFloat));
assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayObject));
assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayBoolean));
assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayLong));
assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayInt));
assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayShort));
assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayChar));
assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayByte));
assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayDouble));
assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayFloat));
assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayObject));
assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayBoolean));
assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayLong));
assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayInt));
assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayShort));
assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayChar));
assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayByte));
assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayDouble));
assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayFloat));
assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayObject));
assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayBoolean));
assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayLong));
assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayInt));
assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayShort));
assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayChar));
assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayByte));
assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayDouble));
assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayObject));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayBoolean));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayLong));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayInt));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayShort));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayChar));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayByte));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayDouble));
assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayFloat));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayObject));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayBoolean));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayLong));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayInt));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayShort));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayChar));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayByte));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayDouble));
assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayFloat));
assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayObject));
assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayBoolean));
assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayLong));
assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayInt));
assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayShort));
assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayChar));
assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayByte));
assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayDouble));
assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayObject));
assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayBoolean));
assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayLong));
assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayInt));
assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayShort));
assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayChar));
assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayByte));
assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayDouble));
assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayObject));
assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayBoolean));
assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayLong));
assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayInt));
assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayShort));
assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayChar));
assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayByte));
assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayDouble));
assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayObject));
assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayBoolean));
assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayLong));
assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayInt));
assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayShort));
assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayChar));
assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayByte));
assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayDouble));
assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayObject));
assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayBoolean));
assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayLong));
assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayInt));
assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayShort));
assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayChar));
assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayByte));
assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayDouble));
assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayObject));
assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayBoolean));
assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayLong));
assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayInt));
assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayShort));
assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayChar));
assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayByte));
assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayDouble));
assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayObject));
assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayBoolean));
assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayLong));
assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayInt));
assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayShort));
assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayChar));
assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayByte));
assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayDouble));
assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayObject));
assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayBoolean));
assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayLong));
assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayInt));
assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayShort));
assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayChar));
assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayByte));
assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayDouble));
assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayObject));
assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayBoolean));
assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayLong));
assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayInt));
assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayShort));
assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayChar));
assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayByte));
assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayDouble));
assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayFloat));
assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
assertThrows(IllegalArgumentException.class, () -> ArrayUtils.isSameType(null, null));
assertThrows(IllegalArgumentException.class, () -> ArrayUtils.isSameType(null, new Object[0]));
assertThrows(IllegalArgumentException.class, () -> ArrayUtils.isSameType(new Object[0], null));
assertTrue(ArrayUtils.isSameType(new Object[0], new Object[0]));
assertFalse(ArrayUtils.isSameType(new String[0], new Object[0]));
assertTrue(ArrayUtils.isSameType(new String[0][0], new String[0][0]));
assertFalse(ArrayUtils.isSameType(new String[0], new String[0][0]));
assertFalse(ArrayUtils.isSameType(new String[0][0], new String[0]));
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals("1", array[0]);
assertEquals("2", array[1]);
assertEquals("3", array[2]);
assertEquals("4", array[3]);
assertEquals("1", array[0]);
assertEquals("2", array[1]);
assertEquals("3", array[2]);
assertEquals("4", array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertFalse(array[0]);
assertTrue(array[1]);
assertTrue(array[2]);
assertFalse(array[3]);
assertTrue(array[0]);
assertTrue(array[1]);
assertFalse(array[2]);
assertFalse(array[3]);
assertFalse(array[0]);
assertTrue(array[1]);
assertTrue(array[2]);
assertFalse(array[3]);
assertFalse(array[0]);
assertFalse(array[1]);
assertTrue(array[2]);
assertTrue(array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertEquals("4", array[0]);
assertEquals("1", array[1]);
assertEquals("2", array[2]);
assertEquals("3", array[3]);
assertEquals("1", array[0]);
assertEquals("2", array[1]);
assertEquals("3", array[2]);
assertEquals("4", array[3]);
assertEquals("4", array[0]);
assertEquals("1", array[1]);
assertEquals("2", array[2]);
assertEquals("3", array[3]);
assertEquals("3", array[0]);
assertEquals("4", array[1]);
assertEquals("1", array[2]);
assertEquals("2", array[3]);
assertEquals(1, array[0]);
assertEquals(3, array[1]);
assertEquals(2, array[2]);
assertEquals(4, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(4, array[2]);
assertEquals(3, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(3, array[1]);
assertEquals(2, array[2]);
assertEquals(4, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(4, array[2]);
assertEquals(3, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(3, array[1]);
assertEquals(2, array[2]);
assertEquals(4, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(4, array[2]);
assertEquals(3, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(3, array[1]);
assertEquals(2, array[2]);
assertEquals(4, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(4, array[2]);
assertEquals(3, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(3, array[1]);
assertEquals(2, array[2]);
assertEquals(4, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(4, array[2]);
assertEquals(3, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(3, array[1]);
assertEquals(2, array[2]);
assertEquals(4, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(4, array[2]);
assertEquals(3, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals("1", array[0]);
assertEquals("2", array[1]);
assertEquals("3", array[2]);
assertEquals("4", array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertEquals("1", array[0]);
assertEquals("3", array[1]);
assertEquals("2", array[2]);
assertEquals("4", array[3]);
assertEquals("5", array[4]);
assertEquals("1", array[0]);
assertEquals("2", array[1]);
assertEquals("4", array[2]);
assertEquals("3", array[3]);
assertEquals("5", array[4]);
assertEquals(1, array[0]);
assertEquals(3, array[1]);
assertEquals(2, array[2]);
assertEquals(4, array[3]);
assertEquals(5, array[4]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(4, array[2]);
assertEquals(3, array[3]);
assertEquals(5, array[4]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(4, array[3]);
assertEquals(4, array[0]);
assertEquals(1, array[1]);
assertEquals(2, array[2]);
assertEquals(3, array[3]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(4, array[0]);
assertEquals(5, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(3, array[4]);
assertFalse(Arrays.equals(array1, array2));
assertTrue(ArrayUtils.contains(array1, element), "Element " + element + " not found");
assertFalse(Arrays.equals(array1, array2));
assertEquals(5, ArrayUtils.removeAllOccurrences(array1, true).length);
assertFalse(Arrays.equals(array1, array2));
assertTrue(ArrayUtils.contains(array1, element), "Element " + element + " not found");
assertFalse(Arrays.equals(array1, array2));
assertTrue(ArrayUtils.contains(array1, element), "Element " + element + " not found");
assertFalse(Arrays.equals(array1, array2));
assertTrue(ArrayUtils.contains(array1, element), "Element " + element + " not found");
assertFalse(Arrays.equals(array1, array2));
assertTrue(ArrayUtils.contains(array1, element), "Element " + element + " not found");
assertFalse(Arrays.equals(array1, array2));
assertTrue(ArrayUtils.contains(array1, element), "Element " + element + " not found");
assertFalse(Arrays.equals(array1, array2));
assertTrue(ArrayUtils.contains(array1, element), "Element " + element + " not found");
assertFalse(Arrays.equals(array1, array2));
assertTrue(ArrayUtils.contains(array1, element), "Element " + element + " not found");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), "0 start, mid end");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), "0 start, length end");
assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), "mid start, mid end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),"mid start, length end");
assertNull(ArrayUtils.subarray(nullArray, 0, 3), "null input");
assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2),"empty array");
assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 4, 2), "start > end");
assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),"start undershoot, normal end");
assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 33, 4), "start overshoot, any end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),"normal start, end overshoot");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), "start undershoot, end overshoot");
assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2),"empty array, object test");
assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 4, 1), "start > end, object test");
assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end, object test");
assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 8733, 4),"start overshoot, any end, object test");
assertSame(boolean.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), "boolean type");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), "0 start, mid end");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), "0 start, length end");
assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), "mid start, mid end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),"mid start, length end");
assertNull(ArrayUtils.subarray(nullArray, 0, 3), "null input");
assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2),"empty array");
assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 2), "start > end");
assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),"start undershoot, normal end");
assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 33, 4), "start overshoot, any end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),"normal start, end overshoot");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), "start undershoot, end overshoot");
assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2),"empty array, object test");
assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 1), "start > end, object test");
assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end, object test");
assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 8733, 4),"start overshoot, any end, object test");
assertSame(byte.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), "byte type");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), "0 start, mid end");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), "0 start, length end");
assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), "mid start, mid end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),"mid start, length end");
assertNull(ArrayUtils.subarray(nullArray, 0, 3), "null input");
assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2),"empty array");
assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 4, 2), "start > end");
assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),"start undershoot, normal end");
assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 33, 4), "start overshoot, any end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),"normal start, end overshoot");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), "start undershoot, end overshoot");
assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2),"empty array, object test");
assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 4, 1), "start > end, object test");
assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end, object test");
assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 8733, 4),"start overshoot, any end, object test");
assertSame(double.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), "double type");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), "0 start, mid end");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), "0 start, length end");
assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), "mid start, mid end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),"mid start, length end");
assertNull(ArrayUtils.subarray(nullArray, 0, 3), "null input");
assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2),"empty array");
assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 4, 2), "start > end");
assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),"start undershoot, normal end");
assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 33, 4), "start overshoot, any end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),"normal start, end overshoot");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), "start undershoot, end overshoot");
assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2),"empty array, object test");
assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 4, 1), "start > end, object test");
assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end, object test");
assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 8733, 4),"start overshoot, any end, object test");
assertSame(float.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), "float type");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), "0 start, mid end");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), "0 start, length end");
assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), "mid start, mid end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),"mid start, length end");
assertNull(ArrayUtils.subarray(nullArray, 0, 3), "null input");
assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2), "empty array");
assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 4, 2), "start > end");
assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),"start undershoot, normal end");
assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 33, 4), "start overshoot, any end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),"normal start, end overshoot");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), "start undershoot, end overshoot");
assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2),"empty array, object test");
assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 4, 1), "start > end, object test");
assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end, object test");
assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 8733, 4),"start overshoot, any end, object test");
assertSame(int.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), "int type");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), "0 start, mid end");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), "0 start, length end");
assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), "mid start, mid end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),"mid start, length end");
assertNull(ArrayUtils.subarray(nullArray, 0, 3), "null input");
assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2),"empty array");
assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 4, 2), "start > end");
assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),"start undershoot, normal end");
assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 33, 4), "start overshoot, any end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),"normal start, end overshoot");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), "start undershoot, end overshoot");
assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2),"empty array, object test");
assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 4, 1), "start > end, object test");
assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end, object test");
assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 8733, 4),"start overshoot, any end, object test");
assertSame(long.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), "long type");
assertEquals("abcd", StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4)), "0 start, mid end");
assertEquals("abcdef", StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length)),"0 start, length end");
assertEquals("bcd", StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4)), "mid start, mid end");
assertEquals("bcdef", StringUtils.join(ArrayUtils.subarray(objectArray, 1, objectArray.length)),"mid start, length end");
assertNull(ArrayUtils.subarray(nullArray, 0, 3), "null input");
assertEquals("", StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2)), "empty array");
assertEquals("", StringUtils.join(ArrayUtils.subarray(objectArray, 4, 2)), "start > end");
assertEquals("", StringUtils.join(ArrayUtils.subarray(objectArray, 3, 3)), "start == end");
assertEquals("abcd", StringUtils.join(ArrayUtils.subarray(objectArray, -2, 4)), "start undershoot, normal end");
assertEquals("", StringUtils.join(ArrayUtils.subarray(objectArray, 33, 4)), "start overshoot, any end");
assertEquals("cdef", StringUtils.join(ArrayUtils.subarray(objectArray, 2, 33)), "normal start, end overshoot");
assertEquals("abcdef", StringUtils.join(ArrayUtils.subarray(objectArray, -2, 12)),"start undershoot, end overshoot");
assertSame(Object.class, ArrayUtils.subarray(objectArray, 2, 4).getClass().getComponentType(), "Object type");
assertSame(Date.class, ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType(),"java.util.Date type");
assertNotSame(java.sql.Date.class, ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType(),"java.sql.Date type");
assertThrows(ClassCastException.class,() -> java.sql.Date[].class.cast(ArrayUtils.subarray(dateArray, 1, 3)),"Invalid downcast");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), "0 start, mid end");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), "0 start, length end");
assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), "mid start, mid end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),"mid start, length end");
assertNull(ArrayUtils.subarray(nullArray, 0, 3), "null input");
assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2),"empty array");
assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 4, 2), "start > end");
assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),"start undershoot, normal end");
assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 33, 4), "start overshoot, any end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),"normal start, end overshoot");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), "start undershoot, end overshoot");
assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2),"empty array, object test");
assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 4, 1), "start > end, object test");
assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end, object test");
assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 8733, 4),"start overshoot, any end, object test");
assertSame(short.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), "short type");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), "0 start, mid end");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), "0 start, length end");
assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), "mid start, mid end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)),"mid start, length end");
assertNull(ArrayUtils.subarray(nullArray, 0, 3), "null input");
assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2),"empty array");
assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 4, 2), "start > end");
assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end");
assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)),"start undershoot, normal end");
assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 33, 4), "start overshoot, any end");
assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)),"normal start, end overshoot");
assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), "start undershoot, end overshoot");
assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2),"empty array, object test");
assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 4, 1), "start > end, object test");
assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 3, 3), "start == end, object test");
assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 8733, 4),"start overshoot, any end, object test");
assertSame(char.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), "char type");
assertFalse(array[0]);
assertFalse(array[1]);
assertTrue(array[2]);
assertTrue(array[0]);
assertTrue(array[1]);
assertFalse(array[2]);
assertFalse(array[3]);
assertFalse(array[0]);
assertTrue(array[1]);
assertFalse(array[2]);
assertFalse(array[0]);
assertTrue(array[1]);
assertTrue(array[2]);
assertFalse(array[0]);
assertTrue(array[1]);
assertTrue(array[2]);
assertTrue(array[0]);
assertTrue(array[1]);
assertFalse(array[2]);
assertTrue(array[0]);
assertTrue(array[1]);
assertFalse(array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertArrayEquals(new char[]{3, 2, 1}, array);
assertArrayEquals(new char[]{1, 2, 3}, array);
assertArrayEquals(new char[]{2, 1, 3}, array);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(0, array.length);
assertEquals(0, array.length);
assertEquals(0, array.length);
assertEquals(0, array.length);
assertEquals(0, array.length);
assertEquals(0, array.length);
assertEquals(0, array.length);
assertEquals(0, array.length);
assertEquals(0, array.length);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertArrayEquals(new int[]{2, 3, 1}, array);
assertArrayEquals(new int[]{2, 3, 1}, array);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertNull(array);
assertEquals("3", array[0]);
assertEquals("2", array[1]);
assertEquals("1", array[2]);
assertEquals("3", array[0]);
assertEquals("4", array[1]);
assertEquals("1", array[2]);
assertEquals("2", array[3]);
assertEquals("3", array[0]);
assertEquals("4", array[1]);
assertEquals("1", array[2]);
assertEquals("2", array[3]);
assertEquals("3", array[0]);
assertEquals("4", array[1]);
assertEquals("5", array[2]);
assertEquals("2", array[3]);
assertEquals("1", array[4]);
assertEquals("3", array[0]);
assertEquals("4", array[1]);
assertEquals("5", array[2]);
assertEquals("2", array[3]);
assertEquals("1", array[4]);
assertEquals(0, array.length);
assertNull(array);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(4, array[1]);
assertEquals(1, array[2]);
assertEquals(2, array[3]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(3, array[0]);
assertEquals(2, array[1]);
assertEquals(1, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals(1, array[0]);
assertEquals(2, array[1]);
assertEquals(3, array[2]);
assertEquals("bar", map.get("foo"));
assertEquals("world", map.get("hello"));
assertNull(ArrayUtils.toMap(null));
assertThrows(IllegalArgumentException.class, () ->ArrayUtils.toMap(new String[][]{{"foo", "bar"}, {"short"}}));
assertThrows(IllegalArgumentException.class, () ->ArrayUtils.toMap(new Object[]{new Object[]{"foo", "bar"}, "illegal type"}));
assertThrows(IllegalArgumentException.class, () ->ArrayUtils.toMap(new Object[]{new Object[]{"foo", "bar"}, null}));
assertEquals("bar", map.get("foo"));
assertEquals(Collections.emptyMap(), ArrayUtils.toMap(new Object[0]));
assertEquals(Collections.singletonMap(null, null), map);
assertEquals(Collections.singletonMap("key", "value1"), map);
assertArrayEquals(null, ArrayUtils.toObject(b));
assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0]));
assertArrayEquals(new Boolean[]{Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}, ArrayUtils.toObject(new boolean[]{true, false, true}));
assertArrayEquals(null, ArrayUtils.toObject(b));
assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY,ArrayUtils.toObject(new byte[0]));
assertArrayEquals(new Byte[]{Byte.valueOf(Byte.MIN_VALUE),Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999)}, ArrayUtils.toObject(new byte[]{Byte.MIN_VALUE, Byte.MAX_VALUE,(byte) 9999999}));
assertArrayEquals(null, ArrayUtils.toObject(b));
assertSame(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY,ArrayUtils.toObject(new char[0]));
assertArrayEquals(new Character[]{Character.valueOf(Character.MIN_VALUE),Character.valueOf(Character.MAX_VALUE), Character.valueOf('0')}, ArrayUtils.toObject(new char[]{Character.MIN_VALUE, Character.MAX_VALUE,'0'}));
assertArrayEquals(null, ArrayUtils.toObject(b));
assertSame(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY,ArrayUtils.toObject(new double[0]));
assertArrayEquals(new Double[]{Double.valueOf(Double.MIN_VALUE),Double.valueOf(Double.MAX_VALUE),Double.valueOf(9999999)}, ArrayUtils.toObject(new double[]{Double.MIN_VALUE, Double.MAX_VALUE, 9999999}));
assertArrayEquals(null, ArrayUtils.toObject(b));
assertSame(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY,ArrayUtils.toObject(new float[0]));
assertArrayEquals(new Float[]{Float.valueOf(Float.MIN_VALUE),Float.valueOf(Float.MAX_VALUE),Float.valueOf(9999999)}, ArrayUtils.toObject(new float[]{Float.MIN_VALUE, Float.MAX_VALUE, 9999999}));
assertArrayEquals(null, ArrayUtils.toObject(b));
assertSame(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY,ArrayUtils.toObject(new int[0]));
assertArrayEquals(new Integer[]{Integer.valueOf(Integer.MIN_VALUE),Integer.valueOf(Integer.MAX_VALUE),Integer.valueOf(9999999)}, ArrayUtils.toObject(new int[]{Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}));
assertArrayEquals(null, ArrayUtils.toObject(b));
assertSame(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY,ArrayUtils.toObject(new long[0]));
assertArrayEquals(new Long[]{Long.valueOf(Long.MIN_VALUE),Long.valueOf(Long.MAX_VALUE),Long.valueOf(9999999)}, ArrayUtils.toObject(new long[]{Long.MIN_VALUE, Long.MAX_VALUE, 9999999}));
assertArrayEquals(null, ArrayUtils.toObject(b));
assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,ArrayUtils.toObject(new short[0]));
assertArrayEquals(new Short[]{Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE),Short.valueOf((short) 9999999)}, ArrayUtils.toObject(new short[]{Short.MIN_VALUE, Short.MAX_VALUE,(short) 9999999}));
assertNull(ArrayUtils.toPrimitive(b));
assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0]));
assertArrayEquals(new boolean[]{true, false, true}, ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}));
assertArrayEquals(new boolean[]{true, false}, ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE, null}));
assertNull(ArrayUtils.toPrimitive(null, false));
assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false));
assertArrayEquals(new boolean[]{true, false, true}, ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}, false));
assertArrayEquals(new boolean[]{true, false, false}, ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE, null, Boolean.FALSE}, false));
assertArrayEquals(new boolean[]{true, true, false}, ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE, null, Boolean.FALSE}, true));
assertNull(ArrayUtils.toPrimitive(b));
assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0]));
assertArrayEquals(new byte[]{Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999}, ArrayUtils.toPrimitive(new Byte[]{Byte.valueOf(Byte.MIN_VALUE),Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999)}));
assertThrows(NullPointerException.class,() -> ArrayUtils.toPrimitive(new Byte[]{Byte.valueOf(Byte.MIN_VALUE), null}));
assertNull(ArrayUtils.toPrimitive(b, Byte.MIN_VALUE));
assertSame(ArrayUtils.EMPTY_BYTE_ARRAY,ArrayUtils.toPrimitive(new Byte[0], (byte) 1));
assertArrayEquals(new byte[]{Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999}, ArrayUtils.toPrimitive(new Byte[]{Byte.valueOf(Byte.MIN_VALUE),Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999)},Byte.MIN_VALUE));
assertArrayEquals(new byte[]{Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999}, ArrayUtils.toPrimitive(new Byte[]{Byte.valueOf(Byte.MIN_VALUE), null,Byte.valueOf((byte) 9999999)}, Byte.MAX_VALUE));
assertNull(ArrayUtils.toPrimitive(b));
assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0]));
assertArrayEquals(new char[]{Character.MIN_VALUE, Character.MAX_VALUE, '0'}, ArrayUtils.toPrimitive(new Character[]{Character.valueOf(Character.MIN_VALUE),Character.valueOf(Character.MAX_VALUE), Character.valueOf('0')}));
assertThrows(NullPointerException.class,() -> ArrayUtils.toPrimitive(new Character[]{Character.valueOf(Character.MIN_VALUE), null}));
assertNull(ArrayUtils.toPrimitive(b, Character.MIN_VALUE));
assertSame(ArrayUtils.EMPTY_CHAR_ARRAY,ArrayUtils.toPrimitive(new Character[0], (char) 0));
assertArrayEquals(new char[]{Character.MIN_VALUE, Character.MAX_VALUE, '0'}, ArrayUtils.toPrimitive(new Character[]{Character.valueOf(Character.MIN_VALUE),Character.valueOf(Character.MAX_VALUE), Character.valueOf('0')},Character.MIN_VALUE));
assertArrayEquals(new char[]{Character.MIN_VALUE, Character.MAX_VALUE, '0'}, ArrayUtils.toPrimitive(new Character[]{Character.valueOf(Character.MIN_VALUE), null,Character.valueOf('0')}, Character.MAX_VALUE));
assertNull(ArrayUtils.toPrimitive(b));
assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,ArrayUtils.toPrimitive(new Double[0]));
assertArrayEquals(new double[]{Double.MIN_VALUE, Double.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Double[]{Double.valueOf(Double.MIN_VALUE),Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)}));
assertThrows(NullPointerException.class,() -> ArrayUtils.toPrimitive(new Float[]{Float.valueOf(Float.MIN_VALUE), null}));
assertNull(ArrayUtils.toPrimitive(l, Double.MIN_VALUE));
assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,ArrayUtils.toPrimitive(new Double[0], 1));
assertArrayEquals(new double[]{Double.MIN_VALUE, Double.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Double[]{Double.valueOf(Double.MIN_VALUE),Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)}, 1));
assertArrayEquals(new double[]{Double.MIN_VALUE, Double.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Double[]{Double.valueOf(Double.MIN_VALUE),null, Double.valueOf(9999999)}, Double.MAX_VALUE));
assertNull(ArrayUtils.toPrimitive(b));
assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,ArrayUtils.toPrimitive(new Float[0]));
assertArrayEquals(new float[]{Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Float[]{Float.valueOf(Float.MIN_VALUE),Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)}));
assertThrows(NullPointerException.class,() -> ArrayUtils.toPrimitive(new Float[]{Float.valueOf(Float.MIN_VALUE), null}));
assertNull(ArrayUtils.toPrimitive(l, Float.MIN_VALUE));
assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,ArrayUtils.toPrimitive(new Float[0], 1));
assertArrayEquals(new float[]{Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Float[]{Float.valueOf(Float.MIN_VALUE),Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)}, 1));
assertArrayEquals(new float[]{Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Float[]{Float.valueOf(Float.MIN_VALUE),null, Float.valueOf(9999999)}, Float.MAX_VALUE));
assertNull(ArrayUtils.toPrimitive(b));
assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0]));
assertArrayEquals(new int[]{Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Integer[]{Integer.valueOf(Integer.MIN_VALUE),Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)}));
assertThrows(NullPointerException.class,() -> ArrayUtils.toPrimitive(new Integer[]{Integer.valueOf(Integer.MIN_VALUE), null}));
assertNull(ArrayUtils.toPrimitive(l, Integer.MIN_VALUE));
assertSame(ArrayUtils.EMPTY_INT_ARRAY,ArrayUtils.toPrimitive(new Integer[0], 1));
assertArrayEquals(new int[]{Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Integer[]{Integer.valueOf(Integer.MIN_VALUE),Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)}, 1));
assertArrayEquals(new int[]{Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Integer[]{Integer.valueOf(Integer.MIN_VALUE),null, Integer.valueOf(9999999)}, Integer.MAX_VALUE));
assertNull(ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE));
assertNull(ArrayUtils.toPrimitive(b));
assertSame(ArrayUtils.EMPTY_LONG_ARRAY,ArrayUtils.toPrimitive(new Long[0]));
assertArrayEquals(new long[]{Long.MIN_VALUE, Long.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Long[]{Long.valueOf(Long.MIN_VALUE),Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999)}));
assertThrows(NullPointerException.class,() -> ArrayUtils.toPrimitive(new Long[]{Long.valueOf(Long.MIN_VALUE), null}));
assertNull(ArrayUtils.toPrimitive(l, Long.MIN_VALUE));
assertSame(ArrayUtils.EMPTY_LONG_ARRAY,ArrayUtils.toPrimitive(new Long[0], 1));
assertArrayEquals(new long[]{Long.MIN_VALUE, Long.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Long[]{Long.valueOf(Long.MIN_VALUE),Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999)}, 1));
assertArrayEquals(new long[]{Long.MIN_VALUE, Long.MAX_VALUE, 9999999}, ArrayUtils.toPrimitive(new Long[]{Long.valueOf(Long.MIN_VALUE),null, Long.valueOf(9999999)}, Long.MAX_VALUE));
assertNull(ArrayUtils.toPrimitive(b));
assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0]));
assertArrayEquals(new short[]{Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999}, ArrayUtils.toPrimitive(new Short[]{Short.valueOf(Short.MIN_VALUE),Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999)}));
assertThrows(NullPointerException.class,() -> ArrayUtils.toPrimitive(new Short[]{Short.valueOf(Short.MIN_VALUE), null}));
assertNull(ArrayUtils.toPrimitive(s, Short.MIN_VALUE));
assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0],Short.MIN_VALUE));
assertArrayEquals(new short[]{Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999}, ArrayUtils.toPrimitive(new Short[]{Short.valueOf(Short.MIN_VALUE),Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999)}, Short.MIN_VALUE));
assertArrayEquals(new short[]{Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999}, ArrayUtils.toPrimitive(new Short[]{Short.valueOf(Short.MIN_VALUE), null,Short.valueOf((short) 9999999)}, Short.MAX_VALUE));
assertEquals("{}", ArrayUtils.toString(null));
assertEquals("{}", ArrayUtils.toString(new Object[0]));
assertEquals("{}", ArrayUtils.toString(new String[0]));
assertEquals("{<null>}", ArrayUtils.toString(new String[]{null}));
assertEquals("{pink,blue}", ArrayUtils.toString(new String[]{"pink", "blue"}));
assertEquals("<empty>", ArrayUtils.toString(null, "<empty>"));
assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>"));
assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>"));
assertEquals("{<null>}", ArrayUtils.toString(new String[]{null}, "<empty>"));
assertEquals("{pink,blue}", ArrayUtils.toString(new String[]{"pink", "blue"}, "<empty>"));
assertNull(ArrayUtils.toStringArray(null));
assertArrayEquals(new String[0], ArrayUtils.toStringArray(new Object[0]));
assertArrayEquals(new String[]{"1", "2", "3", "array", "test"}, ArrayUtils.toStringArray(array));
assertThrows(NullPointerException.class, () -> ArrayUtils.toStringArray(new Object[]{null}));
assertNull(ArrayUtils.toStringArray(null, ""));
assertArrayEquals(new String[0], ArrayUtils.toStringArray(new Object[0], ""));
assertArrayEquals(new String[]{"1", "valueForNullElements", "test"},ArrayUtils.toStringArray(array, "valueForNullElements"));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 0));
assertEquals(testSet, ArrayUtils.indexesOf(array, 1));
assertEquals(testSet, ArrayUtils.indexesOf(array, 2));
assertEquals(testSet, ArrayUtils.indexesOf(array, 3));
assertEquals(emptySet, ArrayUtils.indexesOf(array, 99));
assertNotNull(new SerializationUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(SerializationUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(SerializationUtils.class.getModifiers()));
assertSame(null, serEx.getMessage());
assertSame(null, serEx.getCause());
assertSame("Message", serEx.getMessage());
assertSame(null, serEx.getCause());
assertEquals("java.lang.Exception", serEx.getMessage());
assertSame(ex, serEx.getCause());
assertSame("Message", serEx.getMessage());
assertSame(ex, serEx.getCause());
assertEquals(testBytes.length, realBytes.length);
assertArrayEquals(realBytes, testBytes);
assertThrows(SerializationException.class, () -> SerializationUtils.serialize(iMap, streamTest));
assertEquals(testBytes.length, realBytes.length);
assertArrayEquals(realBytes, testBytes);
assertThrows(NullPointerException.class, () -> SerializationUtils.serialize(iMap, null));
assertThrows(NullPointerException.class, () -> SerializationUtils.serialize(null, null));
assertThrows(SerializationException.class, () -> SerializationUtils.serialize(iMap, streamTest));
assertEquals("java.io.IOException: " + SERIALIZE_IO_EXCEPTION_MESSAGE, e.getMessage());
assertNotNull(test);
assertTrue(test instanceof HashMap<?, ?>);
assertNotSame(test, iMap);
assertEquals(iString, testMap.get("FOO"));
assertNotSame(iString, testMap.get("FOO"));
assertEquals(iInteger, testMap.get("BAR"));
assertNotSame(iInteger, testMap.get("BAR"));
assertEquals(iMap, testMap);
assertEquals(value, SerializationUtils.deserialize(serialized));
assertThrows(ClassCastException.class, () -> {// Causes ClassCastException in call site, not in SerializationUtils.deserialize@SuppressWarnings("unused") // needed to cause Exceptionfinal Integer i = SerializationUtils.deserialize(serialized);
assertNull(test);
assertThrows(NullPointerException.class, () -> SerializationUtils.deserialize((InputStream) null));
assertThrows(SerializationException.class,() -> SerializationUtils.deserialize(new ByteArrayInputStream(new byte[0])));
final SerializationException se = assertThrows(SerializationException.class, () -> SerializationUtils.deserialize(inTest));
assertEquals("java.lang.ClassNotFoundException: " + CLASS_NOT_FOUND_MESSAGE, se.getMessage());
assertEquals(iMap, newMap);
assertEquals(testBytes.length, realBytes.length);
assertArrayEquals(realBytes, testBytes);
assertThrows(SerializationException.class, () -> SerializationUtils.serialize(iMap));
assertEquals(testBytes.length, realBytes.length);
assertArrayEquals(realBytes, testBytes);
assertNotNull(test);
assertTrue(test instanceof HashMap<?, ?>);
assertNotSame(test, iMap);
assertEquals(iString, testMap.get("FOO"));
assertNotSame(iString, testMap.get("FOO"));
assertEquals(iInteger, testMap.get("BAR"));
assertNotSame(iInteger, testMap.get("BAR"));
assertEquals(iMap, testMap);
assertNull(test);
assertThrows(NullPointerException.class, () -> SerializationUtils.deserialize((byte[]) null));
assertThrows(SerializationException.class, () -> SerializationUtils.deserialize(new byte[0]));
assertNotNull(test);
assertTrue(test instanceof HashMap<?, ?>);
assertNotSame(test, iMap);
assertEquals(iString, testMap.get("FOO"));
assertNotSame(iString, testMap.get("FOO"));
assertEquals(iInteger, testMap.get("BAR"));
assertNotSame(iInteger, testMap.get("BAR"));
assertEquals(iMap, testMap);
assertNull(test);
assertThrows(SerializationException.class, () -> SerializationUtils.clone(iMap));
assertEquals(primitiveType, clone);
assertNull(StrLookup.noneLookup().lookup(null));
assertNull(StrLookup.noneLookup().lookup(""));
assertNull(StrLookup.noneLookup().lookup("any"));
assertEquals(System.getProperty("os.name"), StrLookup.systemPropertiesLookup().lookup("os.name"));
assertNull(StrLookup.systemPropertiesLookup().lookup(""));
assertNull(StrLookup.systemPropertiesLookup().lookup("other"));
assertThrows(NullPointerException.class, () -> StrLookup.systemPropertiesLookup().lookup(null));
assertEquals(newOsName, sysLookup.lookup(osName), "Changed properties not detected");
assertEquals(newOsName, sysLookup.lookup(osName), "Changed properties not detected");
assertEquals("value", StrLookup.mapLookup(map).lookup("key"));
assertEquals("2", StrLookup.mapLookup(map).lookup("number"));
assertNull(StrLookup.mapLookup(map).lookup(null));
assertNull(StrLookup.mapLookup(map).lookup(""));
assertNull(StrLookup.mapLookup(map).lookup("other"));
assertNull(StrLookup.mapLookup(map).lookup(null));
assertNull(StrLookup.mapLookup(map).lookup(""));
assertNull(StrLookup.mapLookup(map).lookup("any"));
assertSame(matcher, StrMatcher.commaMatcher());
assertEquals(0, matcher.isMatch(BUFFER1, 0));
assertEquals(1, matcher.isMatch(BUFFER1, 1));
assertEquals(0, matcher.isMatch(BUFFER1, 2));
assertSame(matcher, StrMatcher.tabMatcher());
assertEquals(0, matcher.isMatch(BUFFER1, 2));
assertEquals(1, matcher.isMatch(BUFFER1, 3));
assertEquals(0, matcher.isMatch(BUFFER1, 4));
assertSame(matcher, StrMatcher.spaceMatcher());
assertEquals(0, matcher.isMatch(BUFFER1, 4));
assertEquals(1, matcher.isMatch(BUFFER1, 5));
assertEquals(0, matcher.isMatch(BUFFER1, 6));
assertSame(matcher, StrMatcher.splitMatcher());
assertEquals(0, matcher.isMatch(BUFFER1, 2));
assertEquals(1, matcher.isMatch(BUFFER1, 3));
assertEquals(0, matcher.isMatch(BUFFER1, 4));
assertEquals(1, matcher.isMatch(BUFFER1, 5));
assertEquals(0, matcher.isMatch(BUFFER1, 6));
assertEquals(1, matcher.isMatch(BUFFER1, 7));
assertEquals(1, matcher.isMatch(BUFFER1, 8));
assertEquals(1, matcher.isMatch(BUFFER1, 9));
assertEquals(0, matcher.isMatch(BUFFER1, 10));
assertSame(matcher, StrMatcher.trimMatcher());
assertEquals(0, matcher.isMatch(BUFFER1, 2));
assertEquals(1, matcher.isMatch(BUFFER1, 3));
assertEquals(0, matcher.isMatch(BUFFER1, 4));
assertEquals(1, matcher.isMatch(BUFFER1, 5));
assertEquals(0, matcher.isMatch(BUFFER1, 6));
assertEquals(1, matcher.isMatch(BUFFER1, 7));
assertEquals(1, matcher.isMatch(BUFFER1, 8));
assertEquals(1, matcher.isMatch(BUFFER1, 9));
assertEquals(1, matcher.isMatch(BUFFER1, 10));
assertSame(matcher, StrMatcher.singleQuoteMatcher());
assertEquals(0, matcher.isMatch(BUFFER1, 10));
assertEquals(1, matcher.isMatch(BUFFER1, 11));
assertEquals(0, matcher.isMatch(BUFFER1, 12));
assertSame(matcher, StrMatcher.doubleQuoteMatcher());
assertEquals(0, matcher.isMatch(BUFFER1, 11));
assertEquals(1, matcher.isMatch(BUFFER1, 12));
assertSame(matcher, StrMatcher.quoteMatcher());
assertEquals(0, matcher.isMatch(BUFFER1, 10));
assertEquals(1, matcher.isMatch(BUFFER1, 11));
assertEquals(1, matcher.isMatch(BUFFER1, 12));
assertSame(matcher, StrMatcher.noneMatcher());
assertEquals(0, matcher.isMatch(BUFFER1, 0));
assertEquals(0, matcher.isMatch(BUFFER1, 1));
assertEquals(0, matcher.isMatch(BUFFER1, 2));
assertEquals(0, matcher.isMatch(BUFFER1, 3));
assertEquals(0, matcher.isMatch(BUFFER1, 4));
assertEquals(0, matcher.isMatch(BUFFER1, 5));
assertEquals(0, matcher.isMatch(BUFFER1, 6));
assertEquals(0, matcher.isMatch(BUFFER1, 7));
assertEquals(0, matcher.isMatch(BUFFER1, 8));
assertEquals(0, matcher.isMatch(BUFFER1, 9));
assertEquals(0, matcher.isMatch(BUFFER1, 10));
assertEquals(0, matcher.isMatch(BUFFER1, 11));
assertEquals(0, matcher.isMatch(BUFFER1, 12));
assertEquals(0, matcher.isMatch(BUFFER2, 0));
assertEquals(0, matcher.isMatch(BUFFER2, 1));
assertEquals(1, matcher.isMatch(BUFFER2, 2));
assertEquals(0, matcher.isMatch(BUFFER2, 3));
assertEquals(0, matcher.isMatch(BUFFER2, 4));
assertEquals(0, matcher.isMatch(BUFFER2, 5));
assertEquals(1, matcher.isMatch(BUFFER2, 0));
assertEquals(0, matcher.isMatch(BUFFER2, 1));
assertEquals(1, matcher.isMatch(BUFFER2, 2));
assertEquals(0, matcher.isMatch(BUFFER2, 3));
assertEquals(1, matcher.isMatch(BUFFER2, 4));
assertEquals(0, matcher.isMatch(BUFFER2, 5));
assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher(""));
assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null));
assertTrue(StrMatcher.charSetMatcher("a") instanceof StrMatcher.CharMatcher);
assertEquals(1, matcher.isMatch(BUFFER2, 0));
assertEquals(0, matcher.isMatch(BUFFER2, 1));
assertEquals(1, matcher.isMatch(BUFFER2, 2));
assertEquals(0, matcher.isMatch(BUFFER2, 3));
assertEquals(1, matcher.isMatch(BUFFER2, 4));
assertEquals(0, matcher.isMatch(BUFFER2, 5));
assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher());
assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((char[]) null));
assertTrue(StrMatcher.charSetMatcher("a".toCharArray()) instanceof StrMatcher.CharMatcher);
assertEquals(0, matcher.isMatch(BUFFER2, 0));
assertEquals(2, matcher.isMatch(BUFFER2, 1));
assertEquals(0, matcher.isMatch(BUFFER2, 2));
assertEquals(0, matcher.isMatch(BUFFER2, 3));
assertEquals(0, matcher.isMatch(BUFFER2, 4));
assertEquals(0, matcher.isMatch(BUFFER2, 5));
assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher(""));
assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher(null));
assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length));
assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3));
assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2));
assertNotNull(new WordUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(WordUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(WordUtils.class.getModifiers()));
assertNull(WordUtils.wrap(null, 20));
assertNull(WordUtils.wrap(null, -1));
assertEquals("", WordUtils.wrap("", 20));
assertEquals("", WordUtils.wrap("", -1));
assertEquals(expected, WordUtils.wrap(input, 20));
assertEquals(expected, WordUtils.wrap(input, 20));
assertEquals(expected, WordUtils.wrap(input, 20));
assertEquals(expected, WordUtils.wrap(input, 7));
assertNull(WordUtils.wrap(null, 20, "\n", false));
assertNull(WordUtils.wrap(null, 20, "\n", true));
assertNull(WordUtils.wrap(null, 20, null, true));
assertNull(WordUtils.wrap(null, 20, null, false));
assertNull(WordUtils.wrap(null, -1, null, true));
assertNull(WordUtils.wrap(null, -1, null, false));
assertEquals("", WordUtils.wrap("", 20, "\n", false));
assertEquals("", WordUtils.wrap("", 20, "\n", true));
assertEquals("", WordUtils.wrap("", 20, null, false));
assertEquals("", WordUtils.wrap("", 20, null, true));
assertEquals("", WordUtils.wrap("", -1, null, false));
assertEquals("", WordUtils.wrap("", -1, null, true));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));
assertEquals(expected, WordUtils.wrap(input, 20, "<br />", false));
assertEquals(expected, WordUtils.wrap(input, 20, "<br />", true));
assertEquals(expected, WordUtils.wrap(input, 6, "\n", false));
assertEquals(expected, WordUtils.wrap(input, 2, "\n", false));
assertEquals(expected, WordUtils.wrap(input, -1, "\n", false));
assertEquals(expected, WordUtils.wrap(input, 20, null, false));
assertEquals(expected, WordUtils.wrap(input, 20, null, true));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", false));
assertEquals(expected, WordUtils.wrap(input, 20, "\n", true));
assertEquals(expected, WordUtils.wrap(input, 30, "\n", false, "/"));
assertEquals(expected, WordUtils.wrap(input, 2, "\n", false, "/"));
assertEquals(expected, WordUtils.wrap(input, 9, "\n", true, "/"));
assertEquals(expected, WordUtils.wrap(input, 15, "\n", true, "/"));
assertEquals(expected, WordUtils.wrap(input, 15, "\n", true, "/"));
assertNull(WordUtils.capitalize(null));
assertEquals("", WordUtils.capitalize(""));
assertEquals("  ", WordUtils.capitalize("  "));
assertEquals("I", WordUtils.capitalize("I") );
assertEquals("I", WordUtils.capitalize("i") );
assertEquals("I Am Here 123", WordUtils.capitalize("i am here 123") );
assertEquals("I Am Here 123", WordUtils.capitalize("I Am Here 123") );
assertEquals("I Am HERE 123", WordUtils.capitalize("i am HERE 123") );
assertEquals("I AM HERE 123", WordUtils.capitalize("I AM HERE 123") );
assertNull(WordUtils.capitalize(null, null));
assertEquals("", WordUtils.capitalize(""));
assertEquals("  ", WordUtils.capitalize("  "));
assertEquals("I", WordUtils.capitalize("I", chars) );
assertEquals("I", WordUtils.capitalize("i", chars) );
assertEquals("I-Am Here+123", WordUtils.capitalize("i-am here+123", chars) );
assertEquals("I Am+Here-123", WordUtils.capitalize("I Am+Here-123", chars) );
assertEquals("I+Am-HERE 123", WordUtils.capitalize("i+am-HERE 123", chars) );
assertEquals("I-AM HERE+123", WordUtils.capitalize("I-AM HERE+123", chars) );
assertEquals("I aM.Fine", WordUtils.capitalize("i aM.fine", chars) );
assertEquals("I Am.fine", WordUtils.capitalize("i am.fine", null) );
assertNull(WordUtils.capitalizeFully(null));
assertEquals("", WordUtils.capitalizeFully(""));
assertEquals("  ", WordUtils.capitalizeFully("  "));
assertEquals("I", WordUtils.capitalizeFully("I") );
assertEquals("I", WordUtils.capitalizeFully("i") );
assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123") );
assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123") );
assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123") );
assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123") );
assertNull(WordUtils.capitalizeFully(null, null));
assertEquals("", WordUtils.capitalizeFully(""));
assertEquals("  ", WordUtils.capitalizeFully("  "));
assertEquals("I", WordUtils.capitalizeFully("I", chars) );
assertEquals("I", WordUtils.capitalizeFully("i", chars) );
assertEquals("I-Am Here+123", WordUtils.capitalizeFully("i-am here+123", chars) );
assertEquals("I Am+Here-123", WordUtils.capitalizeFully("I Am+Here-123", chars) );
assertEquals("I+Am-Here 123", WordUtils.capitalizeFully("i+am-HERE 123", chars) );
assertEquals("I-Am Here+123", WordUtils.capitalizeFully("I-AM HERE+123", chars) );
assertEquals("I am.Fine", WordUtils.capitalizeFully("i aM.fine", chars) );
assertEquals("I Am.fine", WordUtils.capitalizeFully("i am.fine", null) );
assertFalse(WordUtils.containsAllWords(null, (String) null));
assertFalse(WordUtils.containsAllWords(null, ""));
assertFalse(WordUtils.containsAllWords(null, "ab"));
assertFalse(WordUtils.containsAllWords("", (String) null));
assertFalse(WordUtils.containsAllWords("", ""));
assertFalse(WordUtils.containsAllWords("", "ab"));
assertFalse(WordUtils.containsAllWords("foo", (String) null));
assertFalse(WordUtils.containsAllWords("bar", ""));
assertFalse(WordUtils.containsAllWords("zzabyycdxx", "by"));
assertTrue(WordUtils.containsAllWords("lorem ipsum dolor sit amet", "ipsum", "lorem", "dolor"));
assertFalse(WordUtils.containsAllWords("lorem ipsum dolor sit amet", "ipsum", null, "lorem", "dolor"));
assertFalse(WordUtils.containsAllWords("lorem ipsum null dolor sit amet", "ipsum", null, "lorem", "dolor"));
assertFalse(WordUtils.containsAllWords("ab", "b"));
assertFalse(WordUtils.containsAllWords("ab", "z"));
assertNull(WordUtils.uncapitalize(null));
assertEquals("", WordUtils.uncapitalize(""));
assertEquals("  ", WordUtils.uncapitalize("  "));
assertEquals("i", WordUtils.uncapitalize("I") );
assertEquals("i", WordUtils.uncapitalize("i") );
assertEquals("i am here 123", WordUtils.uncapitalize("i am here 123") );
assertEquals("i am here 123", WordUtils.uncapitalize("I Am Here 123") );
assertEquals("i am hERE 123", WordUtils.uncapitalize("i am HERE 123") );
assertEquals("i aM hERE 123", WordUtils.uncapitalize("I AM HERE 123") );
assertNull(WordUtils.uncapitalize(null, null));
assertEquals("", WordUtils.uncapitalize(""));
assertEquals("  ", WordUtils.uncapitalize("  "));
assertEquals("i", WordUtils.uncapitalize("I", chars) );
assertEquals("i", WordUtils.uncapitalize("i", chars) );
assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars) );
assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars) );
assertEquals("i-am+hERE 123", WordUtils.uncapitalize("i-am+HERE 123", chars) );
assertEquals("i aM-hERE+123", WordUtils.uncapitalize("I AM-HERE+123", chars) );
assertEquals("i AM.fINE", WordUtils.uncapitalize("I AM.FINE", chars) );
assertEquals("i aM.FINE", WordUtils.uncapitalize("I AM.FINE", null) );
assertNull(WordUtils.initials(null));
assertEquals("", WordUtils.initials(""));
assertEquals("", WordUtils.initials("  "));
assertEquals("I", WordUtils.initials("I"));
assertEquals("i", WordUtils.initials("i"));
assertEquals("BJL", WordUtils.initials("Ben John Lee"));
assertEquals("BJL", WordUtils.initials("   Ben \n   John\tLee\t"));
assertEquals("BJ", WordUtils.initials("Ben J.Lee"));
assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee"));
assertEquals("iah1", WordUtils.initials("i am here 123"));
assertNull(WordUtils.initials(null, array));
assertEquals("", WordUtils.initials("", array));
assertEquals("", WordUtils.initials("  ", array));
assertEquals("I", WordUtils.initials("I", array));
assertEquals("i", WordUtils.initials("i", array));
assertEquals("S", WordUtils.initials("SJC", array));
assertEquals("BJL", WordUtils.initials("Ben John Lee", array));
assertEquals("BJL", WordUtils.initials("   Ben \n   John\tLee\t", array));
assertEquals("BJ", WordUtils.initials("Ben J.Lee", array));
assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee", array));
assertEquals("KO", WordUtils.initials("Kay O'Murphy", array));
assertEquals("iah1", WordUtils.initials("i am here 123", array));
assertNull(WordUtils.initials(null, array));
assertEquals("", WordUtils.initials("", array));
assertEquals("", WordUtils.initials("  ", array));
assertEquals("", WordUtils.initials("I", array));
assertEquals("", WordUtils.initials("i", array));
assertEquals("", WordUtils.initials("SJC", array));
assertEquals("", WordUtils.initials("Ben John Lee", array));
assertEquals("", WordUtils.initials("   Ben \n   John\tLee\t", array));
assertEquals("", WordUtils.initials("Ben J.Lee", array));
assertEquals("", WordUtils.initials(" Ben   John  . Lee", array));
assertEquals("", WordUtils.initials("Kay O'Murphy", array));
assertEquals("", WordUtils.initials("i am here 123", array));
assertNull(WordUtils.initials(null, array));
assertEquals("", WordUtils.initials("", array));
assertEquals("", WordUtils.initials("  ", array));
assertEquals("I", WordUtils.initials("I", array));
assertEquals("i", WordUtils.initials("i", array));
assertEquals("S", WordUtils.initials("SJC", array));
assertEquals("BJL", WordUtils.initials("Ben John Lee", array));
assertEquals("BJ", WordUtils.initials("Ben J.Lee", array));
assertEquals("B\nJ", WordUtils.initials("   Ben \n   John\tLee\t", array));
assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee", array));
assertEquals("KO", WordUtils.initials("Kay O'Murphy", array));
assertEquals("iah1", WordUtils.initials("i am here 123", array));
assertNull(WordUtils.initials(null, array));
assertEquals("", WordUtils.initials("", array));
assertEquals("", WordUtils.initials("  ", array));
assertEquals("I", WordUtils.initials("I", array));
assertEquals("i", WordUtils.initials("i", array));
assertEquals("S", WordUtils.initials("SJC", array));
assertEquals("BJL", WordUtils.initials("Ben John Lee", array));
assertEquals("BJL", WordUtils.initials("Ben J.Lee", array));
assertEquals("BJL", WordUtils.initials(" Ben   John  . Lee", array));
assertEquals("KO", WordUtils.initials("Kay O'Murphy", array));
assertEquals("iah1", WordUtils.initials("i am here 123", array));
assertNull(WordUtils.initials(null, array));
assertEquals("", WordUtils.initials("", array));
assertEquals("", WordUtils.initials("  ", array));
assertEquals("I", WordUtils.initials("I", array));
assertEquals("i", WordUtils.initials("i", array));
assertEquals("S", WordUtils.initials("SJC", array));
assertEquals("BJL", WordUtils.initials("Ben John Lee", array));
assertEquals("BJL", WordUtils.initials("Ben J.Lee", array));
assertEquals("BJL", WordUtils.initials(" Ben   John  . Lee", array));
assertEquals("KOM", WordUtils.initials("Kay O'Murphy", array));
assertEquals("iah1", WordUtils.initials("i am here 123", array));
assertNull(WordUtils.initials(null, array));
assertEquals("", WordUtils.initials("", array));
assertEquals(" ", WordUtils.initials("  ", array));
assertEquals("", WordUtils.initials("I", array));
assertEquals("i", WordUtils.initials("i", array));
assertEquals("C", WordUtils.initials("SJC", array));
assertEquals("Bh", WordUtils.initials("Ben John Lee", array));
assertEquals("B.", WordUtils.initials("Ben J.Lee", array));
assertEquals(" h", WordUtils.initials(" Ben   John  . Lee", array));
assertEquals("K", WordUtils.initials("Kay O'Murphy", array));
assertEquals("i2", WordUtils.initials("i am here 123", array));
assertNull(WordUtils.swapCase(null));
assertEquals("", WordUtils.swapCase(""));
assertEquals("  ", WordUtils.swapCase("  "));
assertEquals("i", WordUtils.swapCase("I") );
assertEquals("I", WordUtils.swapCase("i") );
assertEquals("I AM HERE 123", WordUtils.swapCase("i am here 123") );
assertEquals("i aM hERE 123", WordUtils.swapCase("I Am Here 123") );
assertEquals("I AM here 123", WordUtils.swapCase("i am HERE 123") );
assertEquals("i am here 123", WordUtils.swapCase("I AM HERE 123") );
assertEquals(expect, WordUtils.swapCase(test));
assertEquals("\45", result, "Failed to unescape octal characters via the between method");
assertEquals("\377", result, "Failed to unescape octal characters via the between method");
assertEquals("\377 and", result, "Failed to unescape octal characters via the between method");
assertEquals("\37" + "8 and", result, "Failed to unescape octal characters via the between method");
assertEquals("\37" + "8", result, "Failed to unescape octal characters via the between method");
assertEquals("\1", result, "Failed to unescape octal characters via the between method");
assertEquals("\036", result, "Failed to unescape octal characters via the between method");
assertEquals("\036" + "5", result, "Failed to unescape octal characters via the between method");
assertEquals("\003", result, "Failed to unescape octal characters via the between method");
assertEquals("\000" + "3", result, "Failed to unescape octal characters via the between method");
assertEquals("\279", result, "Failed to unescape octal characters via the between method");
assertEquals("\\999", result, "Failed to ignore an out of range octal character via the between method");
assertEquals(3, result, "Incorrect code point consumption");
assertEquals("two", out.toString(), "Incorrect value");
assertEquals(3, result, "Incorrect code point consumption");
assertEquals("two", out.toString(), "Incorrect value");
assertEquals("\\u0041\\u0044FGZ", result, "Failed to escape Unicode characters via the below method");
assertEquals("AD\\u0046\\u0047Z", result, "Failed to escape Unicode characters via the between method");
assertEquals("ADF\\u0047\\u005A", result, "Failed to escape Unicode characters via the above method");
assertFalse(subject.translate(0xd7ff, writer));
assertFalse(subject.translate(0xe000, writer));
assertEquals(0, writer.size());
assertTrue(subject.translate(0xd800, writer));
assertTrue(subject.translate(0xdfff, writer));
assertEquals(0, writer.size());
assertEquals("&#65;&#68;FGZ", result, "Failed to escape numeric entities via the below method");
assertEquals("AD&#70;&#71;Z", result, "Failed to escape numeric entities via the between method");
assertEquals("ADF&#71;&#90;", result, "Failed to escape numeric entities via the above method");
assertEquals(expected, result, "Failed to escape numeric entities supplementary characters");
assertEquals("G", uu.translate(input), "Failed to unescape Unicode characters with 'u+' notation");
assertEquals("G", result, "Failed to unescape Unicode characters with many 'u' characters");
assertThrows(IllegalArgumentException.class,() -> uu.translate(input),"A lack of digits in a Unicode escape sequence failed to throw an exception");
assertTrue(col0.add(sa[i][0]), "Already added entry 0: "+i+" "+sa[i][0]);
assertTrue(col1.add(sa[i][1]), "Already added entry 1: "+i+" "+sa[i][1]);
assertTrue(success, "One or more errors detected");
assertEquals(expected, result, "Failed to unescape numeric entities supplementary characters");
assertEquals("Test &", neu.translate("Test &"), "Failed to ignore when last character is &");
assertEquals("Test &#", neu.translate("Test &#"), "Failed to ignore when last character is &");
assertEquals("Test &#x", neu.translate("Test &#x"), "Failed to ignore when last character is &");
assertEquals("Test &#X", neu.translate("Test &#X"), "Failed to ignore when last character is &");
assertEquals(expected, result, "Failed to support unfinished entities (i.e. missing semicolon)");
assertEquals(expected, result, "Failed to ignore unfinished entities (i.e. missing semicolon)");
assertThrows(IllegalArgumentException.class, () -> failingNeu.translate(failingInput));
assertNotSame(StrTokenizer.getCSVInstance(), tokenizer);
assertNotSame(StrTokenizer.getTSVInstance(), tokenizer);
assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));
assertEquals(expected[i], tokens[i],"token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'");
assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));
assertEquals(expected[i], tokens[i],"token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'");
assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));
assertEquals(expected[i], tokens[i],"token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'");
assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));
assertEquals(expected[i], tokens[i],"token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'");
assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));
assertEquals(expected[i], tokens[i],"token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'");
assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));
assertEquals(nextCount, expected.length, "could not cycle through entire token list" + " using the 'hasNext' and 'next' methods");
assertEquals(prevCount, expected.length, "could not cycle through entire token list" + " using the 'hasPrevious' and 'previous' methods");
assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));
assertEquals(expected[i], tokens[i],"token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'");
assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));
assertEquals(expected[i], tokens[i],"token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'");
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("c", tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("c", tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("b\u0001", tok.next());
assertEquals("c", tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("\"b\"", tok.next());
assertEquals("c", tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("b'", tok.next());
assertEquals("c", tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("c", tok.next());
assertFalse(tok.hasNext());
assertEquals("a:b:c", tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("", tok.next());
assertEquals("b", tok.next());
assertEquals("c", tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertNull(tok.next());
assertEquals("b", tok.next());
assertEquals("c", tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("c", tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertNull(tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("b'c", tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("b c", tok.next());
assertEquals("d", tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("bxc", tok.next());
assertEquals("d", tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("b\"c:d", tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("There's a reason here", tok.next());
assertEquals("b", tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertNull(tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertNull(tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertNull(tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("bc", tok.next());
assertNull(tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("bc", tok.next());
assertNull(tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("  bc  ", tok.next());
assertEquals("  ", tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("bIGNOREcd", tok.next());
assertNull(tok.next());
assertFalse(tok.hasNext());
assertEquals(Arrays.asList(array), list);
assertEquals(3, list.size());
assertFalse(tokenizer.hasNext());
assertFalse(tokenizer.hasPrevious());
assertNull(tokenizer.nextToken());
assertEquals(0, tokenizer.size());
assertThrows(NoSuchElementException.class, tokenizer::next);
assertEquals(input, tok.getContent());
assertEquals(input, tok.getContent());
assertNull(tok.getContent());
assertEquals(tok, tok.reset());
assertEquals(tok, tok.reset(""));
assertEquals(tok, tok.reset(new char[0]));
assertEquals(tok, tok.setDelimiterChar(' '));
assertEquals(tok, tok.setDelimiterString(" "));
assertEquals(tok, tok.setDelimiterMatcher(null));
assertEquals(tok, tok.setQuoteChar(' '));
assertEquals(tok, tok.setQuoteMatcher(null));
assertEquals(tok, tok.setIgnoredChar(' '));
assertEquals(tok, tok.setIgnoredMatcher(null));
assertEquals(tok, tok.setTrimmerMatcher(null));
assertEquals(tok, tok.setEmptyTokenAsNull(false));
assertEquals(tok, tok.setIgnoreEmptyTokens(false));
assertNull(notCloned);
assertNull(tokenizer.nextToken());
assertNull(tokenizer.nextToken());
assertNull(tokenizer.nextToken());
assertNull(clonedTokenizer.nextToken());
assertEquals("a", tokenizer.nextToken());
assertEquals("a", tokenizer.nextToken());
assertEquals("b", tokenizer.nextToken());
assertEquals("a", clonedTokenizer.nextToken());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1));
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1));
assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1));
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1));
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1));
assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1));
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("c", tok.next());
assertFalse(tok.hasNext());
assertEquals("a", tok.next());
assertEquals("b", tok.next());
assertEquals("c", tok.next());
assertFalse(tok.hasNext());
assertEquals("d", tok.next());
assertEquals("e", tok.next());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertEquals("abc", tok.next());
assertFalse(tok.hasNext());
assertFalse(tok.hasNext());
assertEquals(-1, tokenizer.previousIndex());
assertEquals(0, tokenizer.nextIndex());
assertNull(tokenizer.previousToken());
assertEquals("A", tokenizer.nextToken());
assertEquals(1, tokenizer.nextIndex());
assertEquals("b", tokenizer.nextToken());
assertEquals(2, tokenizer.nextIndex());
assertEquals("c", tokenizer.nextToken());
assertEquals(3, tokenizer.nextIndex());
assertNull(tokenizer.nextToken());
assertEquals(3, tokenizer.nextIndex());
assertEquals("c", tokenizer.previousToken());
assertEquals(2, tokenizer.nextIndex());
assertEquals("b", tokenizer.previousToken());
assertEquals(1, tokenizer.nextIndex());
assertEquals("A", tokenizer.previousToken());
assertEquals(0, tokenizer.nextIndex());
assertNull(tokenizer.previousToken());
assertEquals(0, tokenizer.nextIndex());
assertEquals(-1, tokenizer.previousIndex());
assertEquals(3, tokenizer.size());
assertFalse(tkn.hasPrevious());
assertThrows(NoSuchElementException.class, tkn::previous);
assertTrue(tkn.hasNext());
assertEquals("a", tkn.next());
assertThrows(UnsupportedOperationException.class, tkn::remove);
assertThrows(UnsupportedOperationException.class, () -> tkn.set("x"));
assertThrows(UnsupportedOperationException.class, () -> tkn.add("y"));
assertTrue(tkn.hasPrevious());
assertTrue(tkn.hasNext());
assertEquals("b", tkn.next());
assertTrue(tkn.hasPrevious());
assertTrue(tkn.hasNext());
assertEquals("c", tkn.next());
assertTrue(tkn.hasPrevious());
assertFalse(tkn.hasNext());
assertThrows(NoSuchElementException.class, tkn::next);
assertTrue(tkn.hasPrevious());
assertFalse(tkn.hasNext());
assertEquals("x", tkn.next());
assertEquals("y", tkn.next());
assertEquals("c", tkn.next());
assertEquals("b", tkn.next());
assertEquals("a", tkn.next());
assertEquals("StrTokenizer[not tokenized yet]", tkn.toString());
assertEquals("StrTokenizer[a, b, c, d, e]", tkn.toString());
assertEquals(parser, composite.getParser(), "Parser get method incorrectly implemented");
assertEquals(formatter, composite.getFormatter(), "Formatter get method incorrectly implemented");
assertEquals(testString, c.format(c.parseObject("01032005")));
assertEquals(testString, c.reformat("01032005"));
assertEquals(pattern, emf.toPattern(), "TOPATTERN");
assertEquals(emf.format(new Object[] {"foo", "bar"}), "Lower: foo Upper: BAR");
assertEquals(emf.format(new Object[] {"Foo", "Bar"}), "Lower: foo Upper: BAR");
assertEquals(emf.format(new Object[] {"FOO", "BAR"}), "Lower: foo Upper: BAR");
assertEquals(emf.format(new Object[] {"FOO", "bar"}), "Lower: foo Upper: BAR");
assertEquals(emf.format(new Object[] {"foo", "BAR"}), "Lower: foo Upper: BAR");
assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"}));
assertEquals(emf.format(new Object[] {"there", 3, "great"}), "Hi there, got 3, GREAT!");
assertEquals("Message without placeholders {}", emf.format(new Object[] {"DUMMY"}));
assertEquals("Message with placeholder 'DUMMY'", emf2.format(new Object[] {"DUMMY"}));
assertEquals(expectedPattern, emf.toPattern(), "pattern comparison for locale " + locale);
assertEquals(expected.toString(), emf.format(args), String.valueOf(locale));
//        assertPatterns(null, pattern, emf.toPattern());
//            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"}));
//            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"}));
//            assertPatterns(null, pattern, emf.toPattern());
//                assertEquals(lowExpected,  emf.format(lowArgs));
//                assertEquals(highExpected, emf.format(highArgs));
assertEquals(dateDefault.format(args), dateShort.format(args), "overridden date,short format");
assertEquals(pattern, dateShort.toPattern(), "overridden date,short pattern");
assertEquals(emf, emf, "same, equals()");
assertEquals(emf.hashCode(), emf.hashCode(), "same, hashcode()");
assertEquals(emf, other, "equal, equals()");
assertEquals(emf.hashCode(), other.hashCode(), "equal, hashcode()");
assertNotEquals(emf, other, "class, equals()");
assertEquals(emf.hashCode(), other.hashCode(), "class, hashcode()"); // same hashcode
assertNotEquals(emf, other, "pattern, equals()");
assertNotEquals(emf.hashCode(), other.hashCode(), "pattern, hashcode()");
assertNotEquals(emf, other, "registry, equals()");
assertNotEquals(emf.hashCode(), other.hashCode(), "registry, hashcode()");
assertNotEquals(emf, other, "locale, equals()");
assertEquals(emf.hashCode(), other.hashCode(), "locale, hashcode()"); // same hashcode
assertEquals(mf.format(args), emf.format(args), "format "    + buffer.toString());
assertEquals(mf.toPattern(), emf.toPattern(), "toPattern " + buffer.toString());
assertEquals("The quick brown fox jumps over the moon.", sub.replace("The ${animal} jumps over the ${target}."));
assertEquals("GBP12.50 charged", sub.replace("${code}${amount} charged"));
assertEquals("Amount is GBP12.50", sub.replace("Amount is ${code}${amount}"));
assertThrows(IllegalStateException.class,() -> sub.replace("The ${animal} jumps over the ${target}."),"Cyclic replacement was not detected!");
assertThrows(IllegalStateException.class,() -> sub2.replace("The ${animal} jumps over the ${target}."),"Cyclic replacement was not detected!");
assertEquals("${animal} jumps", sub.replace("The ${animal} jumps over the ${target}.", 4, 15));
assertEquals("The mouse jumps over the lazy dog.",sub.replace("The ${animal.${species}} jumps over the ${target}."),"Wrong result (1)");
assertEquals("The fox jumps over the lazy dog.",sub.replace("The ${animal.${species}} jumps over the ${target}."),"Wrong result (2)");
assertEquals("The fox jumps over the lazy dog.",sub.replace("The ${unknown.animal.${unknown.species:-1}:-fox} jumps over the ${unknown.target:-lazy dog}."),"Wrong result (3)");
assertEquals("The ${animal.${species}} jumps over the lazy dog.",sub.replace("The ${animal.${species}} jumps over the ${target}."),"Wrong result (1)");
assertEquals("The ${animal.${species:-1}} jumps over the lazy dog.",sub.replace("The ${animal.${species:-1}} jumps over the ${target}."),"Wrong result (2)");
assertEquals("The white mouse jumps over the lazy dog.",sub.replace("The ${animal.${species.${color}}} jumps over the ${target}."),"Wrong result (1)");
assertEquals("The brown fox jumps over the lazy dog.",sub.replace("The ${animal.${species.${unknownColor:-brown}}} jumps over the ${target}."),"Wrong result (2)");
assertEquals("The fox jumps over the lazy dog. 1234567890.",sub.replace("The ${animal} jumps over the lazy ${target}. ${undefined.number:-1234567890}."));
assertEquals("The fox jumps over the lazy dog. 1234567890.",sub.replace("The ${animal} jumps over the lazy ${target}. ${undefined.number?:1234567890}."));
assertEquals("The fox jumps over the lazy dog. 1234567890.",sub.replace("The ${animal} jumps over the lazy ${target}. ${undefined.number||1234567890}."));
assertEquals("The fox jumps over the lazy dog. 1234567890.",sub.replace("The ${animal} jumps over the lazy ${target}. ${undefined.number!1234567890}."));
assertEquals("The fox jumps over the lazy dog. ${undefined.number!1234567890}.",sub.replace("The ${animal} jumps over the lazy ${target}. ${undefined.number!1234567890}."));
assertEquals("The fox jumps over the lazy dog. ${undefined.number!1234567890}.",sub.replace("The ${animal} jumps over the lazy ${target}. ${undefined.number!1234567890}."));
assertEquals("name", variableName);
assertSame(builder, buf);
assertEquals(3, startPos);
assertEquals(10, endPos);
assertEquals("Hi jakarta!", builder.toString());
assertEquals("Hi ${name}", sub.replace("Hi ${name}"));
assertEquals("Hi < commons", sub.replace("Hi $< <name>"));
assertEquals("Hi < commons", sub.replace("Hi !< <name>"));
assertEquals("Hi < commons", sub.replace("Hi !< <name2||commons>"));
assertEquals('$', sub.getEscapeChar());
assertEquals('<', sub.getEscapeChar());
assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);
assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.CharMatcher);
assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);
assertThrows(NullPointerException.class, () -> sub.setVariablePrefix(null));
assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);
assertSame(matcher, sub.getVariablePrefixMatcher());
assertThrows(NullPointerException.class, () -> sub.setVariablePrefixMatcher(null));
assertSame(matcher, sub.getVariablePrefixMatcher());
assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);
assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher);
assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);
assertThrows(NullPointerException.class, () -> sub.setVariableSuffix(null));
assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);
assertSame(matcher, sub.getVariableSuffixMatcher());
assertThrows(NullPointerException.class, () -> sub.setVariableSuffixMatcher(null));
assertSame(matcher, sub.getVariableSuffixMatcher());
assertTrue(sub.getValueDelimiterMatcher() instanceof StrMatcher.StringMatcher);
assertTrue(sub.getValueDelimiterMatcher() instanceof StrMatcher.CharMatcher);
assertTrue(sub.getValueDelimiterMatcher() instanceof StrMatcher.StringMatcher);
assertNull(sub.getValueDelimiterMatcher());
assertSame(matcher, sub.getValueDelimiterMatcher());
assertNull(sub.getValueDelimiterMatcher());
assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map));
assertEquals("Hi commons!", StrSubstitutor.replace("Hi <name>!", map, "<", ">"));
assertEquals(buf.toString(), StrSubstitutor.replaceSystemProperties("Hi ${user.name}, you are "+ "working with ${os.name}, your home "+ "directory is ${user.home}."));
assertEquals(expected, actual);
assertEquals("It works!", StrSubstitutor.replace(org, props));
assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@"));
assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@"));
assertFalse(sub.isPreserveEscapes());
assertEquals("value ${escaped}", sub.replace(org));
assertTrue(sub.isPreserveEscapes());
assertEquals("value $${escaped}", sub.replace(org));
assertEquals(expectedResult, sub.replace(replaceTemplate));
assertEquals(expectedShortResult, sub.replace(replaceTemplate, 1, replaceTemplate.length() - 2));
assertEquals(expectedResult, sub.replace(chars));
assertEquals(expectedShortResult, sub.replace(chars, 1, chars.length - 2));
assertEquals(expectedResult, sub.replace(buf));
assertEquals(expectedShortResult, sub.replace(buf, 1, buf.length() - 2));
assertEquals(expectedResult, sub.replace(builder));
assertEquals(expectedShortResult, sub.replace(builder, 1, builder.length() - 2));
assertEquals(expectedResult, sub.replace(bld));
assertEquals(expectedShortResult, sub.replace(bld, 1, bld.length() - 2));
assertEquals(expectedResult, sub.replace(obj));
assertTrue(sub.replaceIn(buf));
assertEquals(expectedResult, buf.toString());
assertTrue(sub.replaceIn(buf, 1, buf.length() - 2));
assertEquals(expectedResult, buf.toString());  // expect full result as remainder is untouched
assertTrue(sub.replaceIn(builder));
assertEquals(expectedResult, builder.toString());
assertTrue(sub.replaceIn(builder, 1, builder.length() - 2));
assertEquals(expectedResult, builder.toString());  // expect full result as remainder is untouched
assertTrue(sub.replaceIn(bld));
assertEquals(expectedResult, bld.toString());
assertTrue(sub.replaceIn(bld, 1, bld.length() - 2));
assertEquals(expectedResult, bld.toString());  // expect full result as remainder is untouched
assertNull(sub.replace((String) null));
assertNull(sub.replace((String) null, 0, 100));
assertNull(sub.replace((char[]) null));
assertNull(sub.replace((char[]) null, 0, 100));
assertNull(sub.replace((StringBuffer) null));
assertNull(sub.replace((StringBuffer) null, 0, 100));
assertNull(sub.replace((StrBuilder) null));
assertNull(sub.replace((StrBuilder) null, 0, 100));
assertNull(sub.replace((Object) null));
assertFalse(sub.replaceIn((StringBuffer) null));
assertFalse(sub.replaceIn((StringBuffer) null, 0, 100));
assertFalse(sub.replaceIn((StrBuilder) null));
assertFalse(sub.replaceIn((StrBuilder) null, 0, 100));
assertEquals(replaceTemplate, sub.replace(replaceTemplate));
assertFalse(sub.replaceIn(bld));
assertEquals(replaceTemplate, bld.toString());
assertEquals("---" + SEP + "+++", sb.toString());
assertEquals("---#" + SEP, sb.toString());
assertEquals("", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("NULLNULL", sb.toString());
assertEquals("NULLNULLfoo", sb.toString());
assertEquals("NULLNULLfooNULL", sb.toString());
assertEquals("NULLNULLfooNULL", sb.toString());
assertEquals("NULLNULLfooNULLbar", sb.toString());
assertEquals("NULLNULLfooNULLbarNULL", sb.toString());
assertEquals("NULLNULLfooNULLbarNULLbaz", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foobaz", sb.toString());
assertEquals("foobazyes", sb.toString());
assertEquals("foobazyesSeq", sb.toString());
assertEquals("foobazyesSeqbld", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foobar", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foobar", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("foo", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append("bar", -1, 1),"append(char[], -1,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append("bar", 3, 1),"append(char[], 3,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append("bar", 1, -1),"append(char[],, -1) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append("bar", 1, 3),"append(char[], 1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append("bar", -1, 3),"append(char[], -1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append("bar", 4, 0),"append(char[], 4, 0) expected IndexOutOfBoundsException");
assertEquals("foo", sb.toString());
assertEquals("foobar", sb.toString());
assertEquals("foobarard", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("foo", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuilder("bar"), -1, 1),"append(StringBuilder, -1,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuilder("bar"), 3, 1),"append(StringBuilder, 3,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuilder("bar"), 1, -1),"append(StringBuilder,, -1) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuilder("bar"), 1, 3),"append(StringBuilder, 1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuilder("bar"), -1, 3),"append(StringBuilder, -1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuilder("bar"), 4, 0),"append(StringBuilder, 4, 0) expected IndexOutOfBoundsException");
assertEquals("foo", sb.toString());
assertEquals("foobar", sb.toString());
assertEquals("foobarard", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foobar", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("foo", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuffer("bar"), -1, 1),"append(char[], -1,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuffer("bar"), 3, 1),"append(char[], 3,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuffer("bar"), 1, -1),"append(char[],, -1) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuffer("bar"), 1, 3),"append(char[], 1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuffer("bar"), -1, 3),"append(char[], -1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuffer("bar"), 4, 0),"append(char[], 4, 0) expected IndexOutOfBoundsException");
assertEquals("foo", sb.toString());
assertEquals("foobar", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foobar", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("foo", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StrBuilder("bar"), -1, 1),"append(char[], -1,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StrBuilder("bar"), 3, 1),"append(char[], 3,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StrBuilder("bar"), 1, -1),"append(char[],, -1) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StrBuilder("bar"), 1, 3),"append(char[], 1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StrBuilder("bar"), -1, 3),"append(char[], -1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StrBuilder("bar"), 4, 0),"append(char[], 4, 0) expected IndexOutOfBoundsException");
assertEquals("foo", sb.toString());
assertEquals("foobar", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("NULL", sb.toString());
assertEquals("foo", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new char[]{'b', 'a', 'r'}, -1, 1),"append(char[], -1,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new char[]{'b', 'a', 'r'}, 3, 1),"append(char[], 3,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new char[]{'b', 'a', 'r'}, 1, -1),"append(char[],, -1) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new char[]{'b', 'a', 'r'}, 1, 3),"append(char[], 1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new char[]{'b', 'a', 'r'}, -1, 3),"append(char[], -1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new char[]{'b', 'a', 'r'}, 4, 0),"append(char[], 4, 0) expected IndexOutOfBoundsException");
assertEquals("foo", sb.toString());
assertEquals("foobar", sb.toString());
assertEquals("true", sb.toString());
assertEquals("truefalse", sb.toString());
assertEquals("truefalse!", sb.toString());
assertEquals("0", sb.toString());
assertEquals("01", sb.toString());
assertEquals("012.3", sb.toString());
assertEquals("012.34.5", sb.toString());
assertEquals("Hello Alice" + SEP, sb.toString());
assertEquals(2, count[0]);  // appendNewLine() calls append(String)
assertEquals(1, count[1]);
assertEquals("" + SEP, sb.toString());
assertEquals(SEP + "foo" + SEP, sb.toString());
assertEquals(SEP + "foo" + SEP + "6" + SEP, sb.toString());
assertEquals("foo" + SEP, sb.toString());
assertEquals(2, count[0]);  // appendNewLine() calls append(String)
assertEquals(1, count[1]);
assertEquals("foo" + SEP, sb.toString());
assertEquals(1, count[0]);
assertEquals(1, count[1]);
assertEquals("foo" + SEP, sb.toString());
assertEquals(1, count[0]);
assertEquals(1, count[1]);
assertEquals("foo" + SEP, sb.toString());
assertEquals(1, count[0]);
assertEquals(1, count[1]);
assertEquals("foo" + SEP, sb.toString());
assertEquals(1, count[0]);
assertEquals(1, count[1]);
assertEquals("foo" + SEP, sb.toString());
assertEquals(1, count[0]);
assertEquals(1, count[1]);
assertEquals("foo" + SEP, sb.toString());
assertEquals(1, count[0]);
assertEquals(1, count[1]);
assertEquals("foo" + SEP, sb.toString());
assertEquals(1, count[0]);
assertEquals(1, count[1]);
assertEquals("foo" + SEP, sb.toString());
assertEquals(1, count[0]);
assertEquals(1, count[1]);
assertEquals("foo" + SEP, sb.toString());
assertEquals(1, count[0]);
assertEquals(1, count[1]);
assertEquals("true" + SEP, sb.toString());
assertEquals("false" + SEP, sb.toString());
assertEquals("0" + SEP, sb.toString());
assertEquals("1" + SEP, sb.toString());
assertEquals("2.3" + SEP, sb.toString());
assertEquals("4.5" + SEP, sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo-", sb.toString());
assertEquals(20, sb.length());
assertEquals("foo-----------------", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("o", sb.toString());
assertEquals("oo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("-foo", sb.toString());
assertEquals(10, sb.length());
assertEquals("-------foo", sb.toString());
assertEquals("-null", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("3", sb.toString());
assertEquals("23", sb.toString());
assertEquals("123", sb.toString());
assertEquals("-123", sb.toString());
assertEquals(10, sb.length());
assertEquals("-------123", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("f", sb.toString());
assertEquals("fo", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo-", sb.toString());
assertEquals(10, sb.length());
assertEquals("foo-------", sb.toString());
assertEquals("null-", sb.toString());
assertEquals("f", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("1", sb.toString());
assertEquals("12", sb.toString());
assertEquals("123", sb.toString());
assertEquals("123-", sb.toString());
assertEquals(10, sb.length());
assertEquals("123-------", sb.toString());
assertEquals("Hi", sb.toString());
assertEquals("Hi", sb.toString());
assertEquals("Hi Alice", sb.toString());
assertEquals(expected, sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("foo,bar,baz", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("foo,,baz", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("foo,bar,baz", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("foo,,baz", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("foo,bar,baz", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("foo,,baz", sb.toString());
assertEquals("foo,null,baz", sb.toString());
assertEquals("foo,null,baz", sb.toString());
assertEquals("", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo,", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals(startSeparator, sb.toString());
assertEquals(startSeparator, sb.toString());
assertEquals(startSeparator, sb.toString());
assertEquals(startSeparator + foo, sb.toString());
assertEquals(startSeparator + foo + standardSeparator, sb.toString());
assertEquals("", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo,", sb.toString());
assertEquals(String.valueOf(startSeparator), sb.toString());
assertEquals(String.valueOf(startSeparator) + foo, sb.toString());
assertEquals(String.valueOf(startSeparator) + foo + standardSeparator, sb.toString());
assertEquals("", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo,", sb.toString());
assertEquals("foo,", sb.toString());
assertEquals("", sb.toString());
assertEquals("foo", sb.toString());
assertEquals("foo,", sb.toString());
assertEquals("foo,", sb.toString());
assertEquals("barbaz", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, FOO),"insert(-1, Object) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, FOO),"insert(7, Object) expected StringIndexOutOfBoundsException");
assertEquals("barbaz", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, "foo"),"insert(-1, String) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, "foo"),"insert(7, String) expected StringIndexOutOfBoundsException");
assertEquals("barbaz", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, new char[]{'f', 'o', 'o'}),"insert(-1, char[]) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, new char[]{'f', 'o', 'o'}),"insert(7, char[]) expected StringIndexOutOfBoundsException");
assertEquals("barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3),"insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3),"insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException");
assertEquals("barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3),"insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3),"insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1),"insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10),"insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException");
assertEquals("barbaz", sb.toString());
assertEquals("foobarbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, true),"insert(-1, boolean) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, true),"insert(7, boolean) expected StringIndexOutOfBoundsException");
assertEquals("truebarbaz", sb.toString());
assertEquals("falsetruebarbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, '!'),"insert(-1, char) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, '!'),"insert(7, char) expected StringIndexOutOfBoundsException");
assertEquals("!barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, 0),"insert(-1, int) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, 0),"insert(7, int) expected StringIndexOutOfBoundsException");
assertEquals("0barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, 1L),"insert(-1, long) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, 1L),"insert(7, long) expected StringIndexOutOfBoundsException");
assertEquals("1barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, 2.3F),"insert(-1, float) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, 2.3F),"insert(7, float) expected StringIndexOutOfBoundsException");
assertEquals("2.3barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, 4.5D),"insert(-1, double) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, 4.5D),"insert(7, double) expected StringIndexOutOfBoundsException");
assertEquals("4.5barbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, FOO),"insert(-1, Object) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, FOO),"insert(7, Object) expected StringIndexOutOfBoundsException");
assertEquals("nullbarbaz", sb.toString());
assertEquals("foonullbarbaz", sb.toString());
assertEquals("barbaz", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, "foo"),"insert(-1, String) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, "foo"),"insert(7, String) expected StringIndexOutOfBoundsException");
assertEquals("nullbarbaz", sb.toString());
assertEquals("foonullbarbaz", sb.toString());
assertEquals("nullfoonullbarbaz", sb.toString());
assertEquals("nullnullfoonullbarbaz", sb.toString());
assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1).toString());
assertEquals("fo", FormattableUtils.append("foo", new Formatter(), 0, -1, 2).toString());
assertEquals(" foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1).toString());
assertEquals("   foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1).toString());
assertEquals(" fo", FormattableUtils.append("foo", new Formatter(), 0, 3, 2).toString());
assertEquals("   fo", FormattableUtils.append("foo", new Formatter(), 0, 5, 2).toString());
assertEquals("foo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1).toString());
assertEquals("foo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1).toString());
assertEquals("fo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2).toString());
assertEquals("fo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2).toString());
assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, pad).toString());
assertEquals("fo", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, pad).toString());
assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, pad).toString());
assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, pad).toString());
assertEquals("_fo", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, pad).toString());
assertEquals("___fo", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, pad).toString());
assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, pad).toString());
assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, pad).toString());
assertEquals("fo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, pad).toString());
assertEquals("fo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, pad).toString());
assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, "*").toString());
assertEquals("f*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, "*").toString());
assertEquals(" foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, "*").toString());
assertEquals("   foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, "*").toString());
assertEquals(" f*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, "*").toString());
assertEquals("   f*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, "*").toString());
assertEquals("foo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, "*").toString());
assertEquals("foo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, "*").toString());
assertEquals("f* ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, "*").toString());
assertEquals("f*   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, "*").toString());
assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, "+*").toString());
assertEquals("+*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, "+*").toString());
assertEquals(" foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, "+*").toString());
assertEquals("   foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, "+*").toString());
assertEquals(" +*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, "+*").toString());
assertEquals("   +*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, "+*").toString());
assertEquals("foo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, "+*").toString());
assertEquals("foo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, "+*").toString());
assertEquals("+* ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, "+*").toString());
assertEquals("+*   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, "+*").toString());
assertThrows(IllegalArgumentException.class, () -> FormattableUtils.append("foo", new Formatter(), 0, -1, 1, "xx"));
assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, '_', "*").toString());
assertEquals("f*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, '_', "*").toString());
assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, '_', "*").toString());
assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, '_', "*").toString());
assertEquals("_f*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, '_', "*").toString());
assertEquals("___f*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, '_', "*").toString());
assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, '_', "*").toString());
assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, '_', "*").toString());
assertEquals("f*_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, '_', "*").toString());
assertEquals("f*___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', "*").toString());
assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, '_', "+*").toString());
assertEquals("+*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, '_', "+*").toString());
assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, '_', "+*").toString());
assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, '_', "+*").toString());
assertEquals("_+*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, '_', "+*").toString());
assertEquals("___+*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, '_', "+*").toString());
assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, '_', "+*").toString());
assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, '_', "+*").toString());
assertEquals("+*_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, '_', "+*").toString());
assertEquals("+*___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', "+*").toString());
assertEquals(32, sb0.capacity());
assertEquals(0, sb0.length());
assertEquals(0, sb0.size());
assertEquals(32, sb1.capacity());
assertEquals(0, sb1.length());
assertEquals(0, sb1.size());
assertEquals(32, sb2.capacity());
assertEquals(0, sb2.length());
assertEquals(0, sb2.size());
assertEquals(32, sb3.capacity());
assertEquals(0, sb3.length());
assertEquals(0, sb3.size());
assertEquals(1, sb4.capacity());
assertEquals(0, sb4.length());
assertEquals(0, sb4.size());
assertEquals(32, sb5.capacity());
assertEquals(0, sb5.length());
assertEquals(0, sb5.size());
assertEquals(32, sb6.capacity());
assertEquals(0, sb6.length());
assertEquals(0, sb6.size());
assertEquals(35, sb7.capacity());
assertEquals(3, sb7.length());
assertEquals(3, sb7.size());
assertSame(sb, sb.setNewLineText(null));
assertSame(sb, sb.setNullText(null));
assertSame(sb, sb.setLength(1));
assertSame(sb, sb.setCharAt(0, 'a'));
assertSame(sb, sb.ensureCapacity(0));
assertSame(sb, sb.minimizeCapacity());
assertSame(sb, sb.clear());
assertSame(sb, sb.reverse());
assertSame(sb, sb.trim());
assertEquals(s.length(), len);
assertEquals(s, sb.toString());
assertEquals("Test 123", sb.toString());
assertEquals(s.length(), len);
assertEquals(s, sb.toString());
assertEquals("Test 123", sb.toString());
assertEquals(s.length(), len);
assertEquals(s, sb.toString());
assertEquals("Test 123", sb.toString());
assertNull(sb.getNewLineText());
assertEquals("#", sb.getNewLineText());
assertEquals("", sb.getNewLineText());
assertNull(sb.getNewLineText());
assertNull(sb.getNullText());
assertEquals("null", sb.getNullText());
assertNull(sb.getNullText());
assertEquals("NULL", sb.getNullText());
assertNull(sb.getNullText());
assertEquals(32, sb.capacity());
assertEquals(0, sb.length());
assertEquals(0, sb.size());
assertTrue(sb.isEmpty());
assertEquals(0, sb.capacity());
assertEquals(0, sb.length());
assertEquals(0, sb.size());
assertTrue(sb.isEmpty());
assertTrue(sb.capacity() >= 32);
assertEquals(0, sb.length());
assertEquals(0, sb.size());
assertTrue(sb.isEmpty());
assertTrue(sb.capacity() >= 32);
assertEquals(3, sb.length());
assertEquals(3, sb.size());
assertFalse(sb.isEmpty());
assertTrue(sb.capacity() >= 32);
assertEquals(0, sb.length());
assertEquals(0, sb.size());
assertTrue(sb.isEmpty());
assertTrue(sb.capacity() > 32);
assertEquals(33, sb.length());
assertEquals(33, sb.size());
assertFalse(sb.isEmpty());
assertTrue(sb.capacity() > 16);
assertEquals(33, sb.length());
assertEquals(33, sb.size());
assertFalse(sb.isEmpty());
assertEquals(33, sb.capacity());
assertEquals(33, sb.length());
assertEquals(33, sb.size());
assertFalse(sb.isEmpty());
assertThrows(IndexOutOfBoundsException.class,() -> sb.setLength(-1),"setLength(-1) expected StringIndexOutOfBoundsException");
assertEquals(33, sb.capacity());
assertEquals(33, sb.length());
assertEquals(33, sb.size());
assertFalse(sb.isEmpty());
assertTrue(sb.capacity() >= 16);
assertEquals(16, sb.length());
assertEquals(16, sb.size());
assertEquals("1234567890123456", sb.toString());
assertFalse(sb.isEmpty());
assertTrue(sb.capacity() >= 32);
assertEquals(32, sb.length());
assertEquals(32, sb.size());
assertEquals("1234567890123456\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", sb.toString());
assertFalse(sb.isEmpty());
assertTrue(sb.capacity() >= 32);
assertEquals(0, sb.length());
assertEquals(0, sb.size());
assertTrue(sb.isEmpty());
assertEquals(0, sb.length());
assertEquals(5, sb.length());
assertEquals("He", sb.toString());
assertEquals("He", sb.toString());
assertEquals("He\0", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb.setLength(-1),"setLength(-1) expected StringIndexOutOfBoundsException");
assertEquals(sb.buffer.length, sb.capacity());
assertEquals(sb.buffer.length, sb.capacity());
assertTrue(sb.capacity() >= 2);
assertTrue(sb.capacity() >= 0);
assertTrue(sb.capacity() >= 40);
assertEquals(0, sb.capacity());
assertEquals(10, sb.capacity());
assertEquals(0, sb.size());
assertEquals(5, sb.size());
assertTrue(sb.isEmpty());
assertFalse(sb.isEmpty());
assertTrue(sb.isEmpty());
assertEquals(0, sb.length());
assertTrue(sb.buffer.length >= 5);
assertThrows(IndexOutOfBoundsException.class, () -> sb.charAt(0), "charAt(0) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class, () -> sb.charAt(-1), "charAt(-1) expected IndexOutOfBoundsException");
assertEquals('f', sb.charAt(0));
assertEquals('o', sb.charAt(1));
assertEquals('o', sb.charAt(2));
assertThrows(IndexOutOfBoundsException.class, () -> sb.charAt(-1), "charAt(-1) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class, () -> sb.charAt(3), "charAt(3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.setCharAt(0, 'f'),"setCharAt(0, ) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.setCharAt(-1, 'f'),"setCharAt(-1, ) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.setCharAt(3, '!'),"setCharAt(3, ) expected IndexOutOfBoundsException");
assertEquals("bar", sb.toString());
assertEquals("bc", sb.toString());
assertThrows(IndexOutOfBoundsException.class, () -> sb.deleteCharAt(1000));
assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray());
assertNotNull(a, "toCharArray() result is null");
assertEquals(0, a.length, "toCharArray() result is too large");
assertEquals(5, a.length, "toCharArray() result incorrect length");
assertArrayEquals("junit".toCharArray(), a, "toCharArray() result does not match");
assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray(0, 0));
assertEquals(5, a.length, "toCharArray(int, int) result incorrect length");
assertArrayEquals("junit".toCharArray(), a, "toCharArray(int, int) result does not match");
assertEquals(4, a.length, "toCharArray(int, int) result incorrect length");
assertArrayEquals("juni".toCharArray(), a, "toCharArray(int, int) result does not match");
assertEquals(4, a.length, "toCharArray(int, int) result incorrect length");
assertArrayEquals("juni".toCharArray(), a, "toCharArray(int, int) result does not match");
assertNotNull(a, "toCharArray(int, int) result is null");
assertThrows(IndexOutOfBoundsException.class, () -> sb.toCharArray(-1, 5), "no string index out of bound on -1");
assertThrows(IndexOutOfBoundsException.class, () -> sb.toCharArray(6, 5), "no string index out of bound on -1");
assertSame (input, a);
assertArrayEquals(new char[10], a);
assertSame(input, a);
assertArrayEquals(new char[]{'j', 'u', 'n', 'i', 't', 0, 0, 0, 0, 0}, a);
assertNotSame(input, a);
assertEquals(5, a.length);
assertArrayEquals("junit".toCharArray(), a);
assertSame(input, a);
assertNotSame(input, a);
assertArrayEquals(new char[]{'j', 'u', 'n', 'i', 't'}, a);
assertArrayEquals(new char[]{0, 0, 0, 'j', 'u'}, b);
assertThrows(IndexOutOfBoundsException.class, () -> sb.getChars(-1, 0, b, 0));
assertThrows(IndexOutOfBoundsException.class, () -> sb.getChars(0, -1, b, 0));
assertThrows(IndexOutOfBoundsException.class, () -> sb.getChars(0, 20, b, 0));
assertThrows(IndexOutOfBoundsException.class, () -> sb.getChars(4, 2, b, 0));
assertEquals("bc", sb.toString());
assertEquals("b", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertThrows(IndexOutOfBoundsException.class, () -> sb.delete(1, 2));
assertThrows(IndexOutOfBoundsException.class, () -> sb.delete(-1, 1));
assertThrows(IndexOutOfBoundsException.class, () -> new StrBuilder("anything").delete(2, 1));
assertEquals("abcbccba", sb.toString());
assertEquals("bcbccb", sb.toString());
assertEquals("bbb", sb.toString());
assertEquals("", sb.toString());
assertEquals("", sb.toString());
assertEquals("abcba", sb.toString());
assertEquals("bcba", sb.toString());
assertEquals("bba", sb.toString());
assertEquals("ba", sb.toString());
assertEquals("", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("bcbccb", sb.toString());
assertEquals("bbb", sb.toString());
assertEquals("", sb.toString());
assertEquals("acba", sb.toString());
assertEquals("", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("bcbccba", sb.toString());
assertEquals("bbccba", sb.toString());
assertEquals("bccba", sb.toString());
assertEquals("abccba", sb.toString());
assertEquals("", sb.toString());
assertEquals("A0xA1A2yA3", sb.toString());
assertEquals("xy", sb.toString());
assertEquals("Ax1", sb.toString());
assertEquals("", sb.toString());
assertEquals("A0xA1A2yA3", sb.toString());
assertEquals("xA1A2yA3", sb.toString());
assertEquals("Ax1", sb.toString());
assertEquals("", sb.toString());
assertEquals("dbc", sb.toString());
assertEquals("aaabc", sb.toString());
assertEquals("bc", sb.toString());
assertEquals("b", sb.toString());
assertEquals("btext", sb.toString());
assertEquals("text", sb.toString());
assertEquals("anytext", sb1.toString());
assertThrows(IndexOutOfBoundsException.class, () -> sb1.replace(2, 1, "anything"));
assertThrows(IndexOutOfBoundsException.class, () -> sb2.replace(1, 2, "anything"));
assertThrows(IndexOutOfBoundsException.class, () -> sb2.replace(-1, 1, "anything"));
assertEquals("abcbccba", sb.toString());
assertEquals("dbcbccbd", sb.toString());
assertEquals("dececced", sb.toString());
assertEquals("defeffed", sb.toString());
assertEquals("defeffed", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("dbcbccba", sb.toString());
assertEquals("decbccba", sb.toString());
assertEquals("defbccba", sb.toString());
assertEquals("defbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("dbcbccbd", sb.toString());
assertEquals("bcbccb", sb.toString());
assertEquals("b-c-", sb.toString());
assertEquals("axbxcxbxa", sb.toString());
assertEquals("xbxxbx", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("dbcbccba", sb.toString());
assertEquals("bcbccba", sb.toString());
assertEquals("b-ccba", sb.toString());
assertEquals("axbxcba", sb.toString());
assertEquals("xbxb", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("dbcbccbd", sb.toString());
assertEquals("bcbccb", sb.toString());
assertEquals("b-c-", sb.toString());
assertEquals("axbxcxbxa", sb.toString());
assertEquals("xbxxbx", sb.toString());
assertEquals("***-******-***", sb.toString());
assertEquals("Dear 012345678901234567, hello 012345678901234567.", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("dbcbccba", sb.toString());
assertEquals("bcbccba", sb.toString());
assertEquals("b-ccba", sb.toString());
assertEquals("axbxcba", sb.toString());
assertEquals("xbxb", sb.toString());
assertEquals("***-A2A3-A4", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("xbcbccbx", sb.toString());
assertEquals("xbxcxx", sb.toString());
assertEquals("***-******-***", sb.toString());
assertEquals("", sb.toString());
assertEquals("abcbccba", sb.toString());
assertEquals("ab-c-a", sb.toString());
assertEquals("ab+++c+++a", sb.toString());
assertEquals("abca", sb.toString());
assertEquals("abca", sb.toString());
assertEquals("-x--y-", sb.toString());
assertEquals("aax--y-", sb.toString());
assertEquals("aax--y-", sb.toString());
assertEquals("aax--y-", sb.toString());
assertEquals("aaxa-ay-", sb.toString());
assertEquals("aaxaa-y-", sb.toString());
assertEquals("aaxaaaay-", sb.toString());
assertEquals("aaxaaaay-", sb.toString());
assertEquals("aaxaaaay-", sb.toString());
assertEquals("aaxaaaayaa", sb.toString());
assertEquals("aaxaaaayaa", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb1.replace(StrMatcher.stringMatcher("aa"), "-", 11, sb1.length(), -1));
assertEquals("aaxaaaayaa", sb1.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb2.replace(StrMatcher.stringMatcher("aa"), "-", -1, sb2.length(), -1));
assertEquals("aaxaaaayaa", sb2.toString());
assertEquals("aaxaaaayaa", sb.toString());
assertEquals("-xaaaayaa", sb.toString());
assertEquals("-xaaaayaa", sb.toString());
assertEquals("-xaaaayaa", sb.toString());
assertEquals("-x-aayaa", sb.toString());
assertEquals("-x-aayaa", sb.toString());
assertEquals("-x--yaa", sb.toString());
assertEquals("-x--yaa", sb.toString());
assertEquals("-x--yaa", sb.toString());
assertEquals("-x--y-", sb.toString());
assertEquals("-x--y-", sb.toString());
assertThrows(IndexOutOfBoundsException.class,() -> sb1.replace(StrMatcher.stringMatcher("aa"), "-", 2, 1, -1));
assertEquals("aaxaaaayaa", sb1.toString());
assertEquals("-x--y-", sb.toString());
assertEquals("aaxaaaayaa", sb.toString());
assertEquals("-xaaaayaa", sb.toString());
assertEquals("-x-aayaa", sb.toString());
assertEquals("-x--yaa", sb.toString());
assertEquals("-x--y-", sb.toString());
assertEquals("-x--y-", sb.toString());
assertEquals("", sb.reverse().toString());
assertEquals("eurt", sb.reverse().toString());
assertEquals("true", sb.reverse().toString());
assertEquals("", sb.reverse().toString());
assertEquals("", sb.trim().toString());
assertEquals("a b c", sb.trim().toString());
assertEquals("a b c", sb.trim().toString());
assertEquals("a b c", sb.trim().toString());
assertEquals("a b c", sb.trim().toString());
assertFalse(sb.startsWith("a"));
assertFalse(sb.startsWith(null));
assertTrue(sb.startsWith(""));
assertTrue(sb.startsWith("a"));
assertTrue(sb.startsWith("ab"));
assertTrue(sb.startsWith("abc"));
assertFalse(sb.startsWith("cba"));
assertFalse(sb.endsWith("a"));
assertFalse(sb.endsWith("c"));
assertTrue(sb.endsWith(""));
assertFalse(sb.endsWith(null));
assertTrue(sb.endsWith("c"));
assertTrue(sb.endsWith("bc"));
assertTrue(sb.endsWith("abc"));
assertFalse(sb.endsWith("cba"));
assertFalse(sb.endsWith("abcd"));
assertFalse(sb.endsWith(" abc"));
assertFalse(sb.endsWith("abc "));
assertThrows(IndexOutOfBoundsException.class, () -> sb.subSequence(-1, 5));
assertThrows(IndexOutOfBoundsException.class, () -> sb.subSequence(2, -1));
assertThrows(IndexOutOfBoundsException.class, () -> sb.subSequence(2, sb.length() + 1));
assertThrows(IndexOutOfBoundsException.class, () -> sb.subSequence(3, 2));
assertEquals ("hello", sb.subSequence(0, 5));
assertEquals ("hello goodbye".subSequence(0, 6), sb.subSequence(0, 6));
assertEquals ("goodbye", sb.subSequence(6, 13));
assertEquals ("hello goodbye".subSequence(6, 13), sb.subSequence(6, 13));
assertEquals ("goodbye", sb.substring(6));
assertEquals ("hello goodbye".substring(6), sb.substring(6));
assertEquals ("hello goodbye", sb.substring(0));
assertEquals ("hello goodbye".substring(0), sb.substring(0));
assertThrows(IndexOutOfBoundsException.class, () -> sb.substring(-1));
assertThrows(IndexOutOfBoundsException.class, () -> sb.substring(15));
assertEquals ("hello", sb.substring(0, 5));
assertEquals ("hello goodbye".substring(0, 6), sb.substring(0, 6));
assertEquals ("goodbye", sb.substring(6, 13));
assertEquals ("hello goodbye".substring(6, 13), sb.substring(6, 13));
assertEquals ("goodbye", sb.substring(6, 20));
assertThrows(IndexOutOfBoundsException.class, () -> sb.substring(-1, 5));
assertThrows(IndexOutOfBoundsException.class, () -> sb.substring(15, 20));
assertEquals("goodbye", sb.midString(6, 7));
assertEquals("hello", sb.midString(0, 5));
assertEquals("hello", sb.midString(-5, 5));
assertEquals("", sb.midString(0, -1));
assertEquals("", sb.midString(20, 2));
assertEquals("hello", sb.midString(14, 22));
assertEquals("right", sb.rightString(5));
assertEquals("", sb.rightString(0));
assertEquals("", sb.rightString(-5));
assertEquals("left right", sb.rightString(15));
assertEquals("left", sb.leftString(4));
assertEquals("", sb.leftString(0));
assertEquals("", sb.leftString(-5));
assertEquals("left right", sb.leftString(15));
assertTrue(sb.contains('a'));
assertTrue(sb.contains('o'));
assertTrue(sb.contains('z'));
assertFalse(sb.contains('1'));
assertTrue(sb.contains("a"));
assertTrue(sb.contains("pq"));
assertTrue(sb.contains("z"));
assertFalse(sb.contains("zyx"));
assertFalse(sb.contains((String) null));
assertTrue(sb.contains(StrMatcher.charMatcher('a')));
assertTrue(sb.contains(StrMatcher.stringMatcher("pq")));
assertTrue(sb.contains(StrMatcher.charMatcher('z')));
assertFalse(sb.contains(StrMatcher.stringMatcher("zy")));
assertFalse(sb.contains((StrMatcher) null));
assertFalse(sb.contains(A_NUMBER_MATCHER));
assertTrue(sb.contains(A_NUMBER_MATCHER));
assertEquals(0, sb.indexOf('a'));
assertEquals("abab".indexOf('a'), sb.indexOf('a'));
assertEquals(1, sb.indexOf('b'));
assertEquals("abab".indexOf('b'), sb.indexOf('b'));
assertEquals(-1, sb.indexOf('z'));
assertEquals(0, sb.indexOf('a', -1));
assertEquals(0, sb.indexOf('a', 0));
assertEquals(2, sb.indexOf('a', 1));
assertEquals(-1, sb.indexOf('a', 4));
assertEquals(-1, sb.indexOf('a', 5));
assertEquals("abab".indexOf('a', 1), sb.indexOf('a', 1));
assertEquals(3, sb.indexOf('b', 2));
assertEquals("abab".indexOf('b', 2), sb.indexOf('b', 2));
assertEquals(-1, sb.indexOf('z', 2));
assertEquals(2, sb.indexOf('z', 0));
assertEquals(-1, sb.indexOf('z', 3));
assertEquals (2, sb.lastIndexOf('a'));
assertEquals ("abab".lastIndexOf('a'), sb.lastIndexOf('a'));
assertEquals(3, sb.lastIndexOf('b'));
assertEquals ("abab".lastIndexOf('b'), sb.lastIndexOf('b'));
assertEquals (-1, sb.lastIndexOf('z'));
assertEquals(-1, sb.lastIndexOf('a', -1));
assertEquals(0, sb.lastIndexOf('a', 0));
assertEquals(0, sb.lastIndexOf('a', 1));
assertEquals("abab".lastIndexOf('a', 1), sb.lastIndexOf('a', 1));
assertEquals(1, sb.lastIndexOf('b', 2));
assertEquals("abab".lastIndexOf('b', 2), sb.lastIndexOf('b', 2));
assertEquals(-1, sb.lastIndexOf('z', 2));
assertEquals(2, sb.lastIndexOf('z', sb.length()));
assertEquals(-1, sb.lastIndexOf('z', 1));
assertEquals(0, sb.indexOf("a"));
assertEquals("abab".indexOf("a"), sb.indexOf("a"));
assertEquals(0, sb.indexOf("ab"));
assertEquals("abab".indexOf("ab"), sb.indexOf("ab"));
assertEquals(1, sb.indexOf("b"));
assertEquals("abab".indexOf("b"), sb.indexOf("b"));
assertEquals(1, sb.indexOf("ba"));
assertEquals("abab".indexOf("ba"), sb.indexOf("ba"));
assertEquals(-1, sb.indexOf("z"));
assertEquals(-1, sb.indexOf((String) null));
assertEquals(0, sb.indexOf("a", -1));
assertEquals(0, sb.indexOf("a", 0));
assertEquals(2, sb.indexOf("a", 1));
assertEquals(2, sb.indexOf("a", 2));
assertEquals(-1, sb.indexOf("a", 3));
assertEquals(-1, sb.indexOf("a", 4));
assertEquals(-1, sb.indexOf("a", 5));
assertEquals(-1, sb.indexOf("abcdef", 0));
assertEquals(0, sb.indexOf("", 0));
assertEquals(1, sb.indexOf("", 1));
assertEquals ("abab".indexOf("a", 1), sb.indexOf("a", 1));
assertEquals(2, sb.indexOf("ab", 1));
assertEquals("abab".indexOf("ab", 1), sb.indexOf("ab", 1));
assertEquals(3, sb.indexOf("b", 2));
assertEquals("abab".indexOf("b", 2), sb.indexOf("b", 2));
assertEquals(1, sb.indexOf("ba", 1));
assertEquals("abab".indexOf("ba", 2), sb.indexOf("ba", 2));
assertEquals(-1, sb.indexOf("z", 2));
assertEquals(2, sb.indexOf("za", 0));
assertEquals(-1, sb.indexOf("za", 3));
assertEquals(-1, sb.indexOf((String) null, 2));
assertEquals(2, sb.lastIndexOf("a"));
assertEquals("abab".lastIndexOf("a"), sb.lastIndexOf("a"));
assertEquals(2, sb.lastIndexOf("ab"));
assertEquals("abab".lastIndexOf("ab"), sb.lastIndexOf("ab"));
assertEquals(3, sb.lastIndexOf("b"));
assertEquals("abab".lastIndexOf("b"), sb.lastIndexOf("b"));
assertEquals(1, sb.lastIndexOf("ba"));
assertEquals("abab".lastIndexOf("ba"), sb.lastIndexOf("ba"));
assertEquals(-1, sb.lastIndexOf("z"));
assertEquals(-1, sb.lastIndexOf((String) null));
assertEquals(-1, sb.lastIndexOf("a", -1));
assertEquals(0, sb.lastIndexOf("a", 0));
assertEquals(0, sb.lastIndexOf("a", 1));
assertEquals(2, sb.lastIndexOf("a", 2));
assertEquals(2, sb.lastIndexOf("a", 3));
assertEquals(2, sb.lastIndexOf("a", 4));
assertEquals(2, sb.lastIndexOf("a", 5));
assertEquals(-1, sb.lastIndexOf("abcdef", 3));
assertEquals("abab".lastIndexOf("", 3), sb.lastIndexOf("", 3));
assertEquals("abab".lastIndexOf("", 1), sb.lastIndexOf("", 1));
assertEquals("abab".lastIndexOf("a", 1), sb.lastIndexOf("a", 1));
assertEquals(0, sb.lastIndexOf("ab", 1));
assertEquals("abab".lastIndexOf("ab", 1), sb.lastIndexOf("ab", 1));
assertEquals(1, sb.lastIndexOf("b", 2));
assertEquals("abab".lastIndexOf("b", 2), sb.lastIndexOf("b", 2));
assertEquals(1, sb.lastIndexOf("ba", 2));
assertEquals("abab".lastIndexOf("ba", 2), sb.lastIndexOf("ba", 2));
assertEquals(-1, sb.lastIndexOf("z", 2));
assertEquals(2, sb.lastIndexOf("za", sb.length()));
assertEquals(-1, sb.lastIndexOf("za", 1));
assertEquals(-1, sb.lastIndexOf((String) null, 2));
assertEquals(-1, sb.indexOf((StrMatcher) null));
assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a')));
assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a')));
assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b')));
assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher()));
assertEquals(4, sb.indexOf(StrMatcher.charMatcher('d')));
assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher()));
assertEquals(-1, sb.indexOf((StrMatcher) null));
assertEquals(6, sb.indexOf(A_NUMBER_MATCHER));
assertEquals(-1, sb.indexOf((StrMatcher) null, 2));
assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));
assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 0));
assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), -2));
assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), 0));
assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));
assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 20));
assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), -1));
assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 0));
assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 1));
assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 2));
assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 3));
assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 4));
assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 5));
assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 6));
assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), -2));
assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 0));
assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 2));
assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 4));
assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 20));
assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher(), 0));
assertEquals(-1, sb.indexOf((StrMatcher) null, 0));
assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 5));
assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 6));
assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 7));
assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 22));
assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 23));
assertEquals(-1, sb.indexOf(A_NUMBER_MATCHER, 24));
assertEquals(-1, sb.lastIndexOf((StrMatcher) null));
assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a')));
assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a')));
assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b')));
assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher()));
assertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher('d')));
assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher()));
assertEquals(-1, sb.lastIndexOf((StrMatcher) null));
assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER));
assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2));
assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));
assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));
assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1));
assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2));
assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));
assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));
assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 20));
assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), -1));
assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 0));
assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 1));
assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 2));
assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 3));
assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 4));
assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 5));
assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 6));
assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), -2));
assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), 0));
assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 2));
assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 4));
assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 20));
assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher(), 0));
assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 0));
assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 5));
assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 6)); // A matches, 1 is outside bounds
assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 7));
assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 22));
assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 23)); // A matches, 2 is outside bounds
assertEquals(23, sb.lastIndexOf(A_NUMBER_MATCHER, 24));
assertEquals(2, tokens1.length);
assertEquals("a", tokens1[0]);
assertEquals("b", tokens1[1]);
assertEquals(2, t.size());
assertEquals(2, tokens2.length);
assertEquals("a", tokens2[0]);
assertEquals("b", tokens2[1]);
assertEquals(2, t.size());
assertEquals("a", t.next());
assertEquals("b", t.next());
assertEquals(4, tokens3.length);
assertEquals("a", tokens3[0]);
assertEquals("b", tokens3[1]);
assertEquals("c", tokens3[2]);
assertEquals("d", tokens3[3]);
assertEquals(4, t.size());
assertEquals("a", t.next());
assertEquals("b", t.next());
assertEquals("c", t.next());
assertEquals("d", t.next());
assertEquals("a b c d ", t.getContent());
assertTrue(reader.ready());
assertEquals(9, reader.read(buf));
assertEquals("some text", new String(buf, 0, 9));
assertEquals(-1, reader.read());
assertFalse(reader.ready());
assertEquals(0, reader.skip(2));
assertEquals(0, reader.skip(-1));
assertTrue(reader.markSupported());
assertEquals('s', reader.read());
assertEquals(3, reader.read(array, 0, 3));
assertEquals('o', array[0]);
assertEquals('m', array[1]);
assertEquals('e', array[2]);
assertEquals(1, reader.read(array, 1, 1));
assertEquals('o', array[0]);
assertEquals('o', array[1]);
assertEquals('e', array[2]);
assertEquals(2, reader.skip(2));
assertEquals(' ', reader.read());
assertTrue(reader.ready());
assertTrue(reader.ready());
assertThrows(IndexOutOfBoundsException.class, () -> r.read(arr, -1, 0));
assertThrows(IndexOutOfBoundsException.class, () -> r.read(arr, 0, -1));
assertThrows(IndexOutOfBoundsException.class, () -> r.read(arr, 100, 1));
assertThrows(IndexOutOfBoundsException.class, () -> r.read(arr, 0, 100));
assertThrows(IndexOutOfBoundsException.class, () -> r.read(arr, Integer.MAX_VALUE, Integer.MAX_VALUE));
assertEquals(0, r.read(arr, 0, 0));
assertEquals(0, arr[0]);
assertEquals(0, arr[1]);
assertEquals(0, arr[2]);
assertEquals(-1, r.read(arr, 0, 1));
assertEquals(9, r.read(array, 0, 30));
assertEquals("basel", sb.toString());
assertEquals("baselin", sb.toString());
assertEquals("baseliner", sb.toString());
assertEquals("baseliner rout", sb.toString());
assertEquals("baseliner routing", sb.toString());
assertEquals("baseliner routing", sb.toString());
assertEquals("baseliner routing", sb.toString());
assertEquals("baseliner routing hi", sb.toString());
assertEquals("based", sb.toString());
assertTrue(sb1.equalsIgnoreCase(sb1));
assertTrue(sb1.equalsIgnoreCase(sb2));
assertTrue(sb2.equalsIgnoreCase(sb2));
assertFalse(sb1.equalsIgnoreCase(sb2));
assertTrue(sb1.equalsIgnoreCase(sb2));
assertTrue(sb1.equalsIgnoreCase(sb2));
assertTrue(sb1.equalsIgnoreCase(sb1));
assertTrue(sb2.equalsIgnoreCase(sb2));
assertTrue(sb1.equalsIgnoreCase(sb2));
assertTrue(sb1.equals(sb2));
assertTrue(sb1.equals(sb1));
assertTrue(sb2.equals(sb2));
assertEquals(sb1, (Object) sb2);
assertFalse(sb1.equals(sb2));
assertNotEquals(sb1, (Object) sb2);
assertFalse(sb1.equals(sb2));
assertNotEquals(sb1, (Object) sb2);
assertTrue(sb1.equals(sb2));
assertEquals(sb1, (Object) sb2);
assertNotEquals(sb1, Integer.valueOf(1));
assertNotEquals("abc", sb1);
assertFalse(sb.equals(other));
assertEquals(0, hc1a);
assertEquals(hc1a, hc1b);
assertTrue(hc2a != 0);
assertEquals(hc2a, hc2b);
assertEquals("abc", sb.toString());
assertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString());
assertEquals(new StringBuffer("junit").toString(), sb.toStringBuffer().toString());
assertEquals(new StringBuilder().toString(), sb.toStringBuilder().toString());
assertEquals(new StringBuilder("junit").toString(), sb.toStringBuilder().toString());
assertEquals("\nDo more stuff\neven more stuff\n", sb.toString());
assertEquals(-1, sb.indexOf("three"));
assertFalse(sb.contains('h'), "The contains(char) method is looking beyond the end of the string");
assertEquals(-1, sb.indexOf('h'), "The indexOf(char) method is looking beyond the end of the string");
assertEquals("**********", sb.toString(), "Failed to invoke appendFixedWidthPadRight correctly");
assertEquals("**********", sb.toString(), "Failed to invoke appendFixedWidthPadLeft correctly");
assertEquals(sb.toString(), sb.build());
assertEquals("0123456789", sb1.toString());
assertEquals("12345678", sb2.toString());
assertEquals("Test 1234567890", writer.toString());
assertEquals("Test 1234567890", builder.toString());
assertEquals("Test 1234567890", buffer.toString());
assertEquals("Test 1234567890", buffer.toString());
Assertions.assertEquals(Charset.defaultCharset(), Charsets.toCharset((Charset) null));
Assertions.assertEquals(Charset.defaultCharset(), Charsets.toCharset(Charset.defaultCharset()));
Assertions.assertEquals(StandardCharsets.UTF_8, Charsets.toCharset(StandardCharsets.UTF_8));
Assertions.assertEquals(Charset.defaultCharset(), Charsets.toCharset((String) null));
Assertions.assertEquals(Charset.defaultCharset(), Charsets.toCharset(Charset.defaultCharset().name()));
Assertions.assertEquals(StandardCharsets.UTF_8, Charsets.toCharset("UTF-8"));
Assertions.assertEquals(Charset.defaultCharset().name(), Charsets.toCharsetName((String) null));
Assertions.assertEquals("UTF-8", Charsets.toCharsetName("UTF-8"));
assertNull(StringUtils.substring(null, 0));
assertEquals("", StringUtils.substring("", 0));
assertEquals("", StringUtils.substring("", 2));
assertEquals("", StringUtils.substring(SENTENCE, 80));
assertEquals(BAZ, StringUtils.substring(SENTENCE, 8));
assertEquals(BAZ, StringUtils.substring(SENTENCE, -3));
assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0));
assertEquals("abc", StringUtils.substring("abc", -4));
assertEquals("abc", StringUtils.substring("abc", -3));
assertEquals("bc", StringUtils.substring("abc", -2));
assertEquals("c", StringUtils.substring("abc", -1));
assertEquals("abc", StringUtils.substring("abc", 0));
assertEquals("bc", StringUtils.substring("abc", 1));
assertEquals("c", StringUtils.substring("abc", 2));
assertEquals("", StringUtils.substring("abc", 3));
assertEquals("", StringUtils.substring("abc", 4));
assertNull(StringUtils.substring(null, 0, 0));
assertNull(StringUtils.substring(null, 1, 2));
assertEquals("", StringUtils.substring("", 0, 0));
assertEquals("", StringUtils.substring("", 1, 2));
assertEquals("", StringUtils.substring("", -2, -1));
assertEquals("", StringUtils.substring(SENTENCE, 8, 6));
assertEquals(FOO, StringUtils.substring(SENTENCE, 0, 3));
assertEquals("o", StringUtils.substring(SENTENCE, -9, 3));
assertEquals(FOO, StringUtils.substring(SENTENCE, 0, -8));
assertEquals("o", StringUtils.substring(SENTENCE, -9, -8));
assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0, 80));
assertEquals("", StringUtils.substring(SENTENCE, 2, 2));
assertEquals("b", StringUtils.substring("abc", -2, -1));
assertSame(null, StringUtils.left(null, -1));
assertSame(null, StringUtils.left(null, 0));
assertSame(null, StringUtils.left(null, 2));
assertEquals("", StringUtils.left("", -1));
assertEquals("", StringUtils.left("", 0));
assertEquals("", StringUtils.left("", 2));
assertEquals("", StringUtils.left(FOOBAR, -1));
assertEquals("", StringUtils.left(FOOBAR, 0));
assertEquals(FOO, StringUtils.left(FOOBAR, 3));
assertSame(FOOBAR, StringUtils.left(FOOBAR, 80));
assertSame(null, StringUtils.right(null, -1));
assertSame(null, StringUtils.right(null, 0));
assertSame(null, StringUtils.right(null, 2));
assertEquals("", StringUtils.right("", -1));
assertEquals("", StringUtils.right("", 0));
assertEquals("", StringUtils.right("", 2));
assertEquals("", StringUtils.right(FOOBAR, -1));
assertEquals("", StringUtils.right(FOOBAR, 0));
assertEquals(BAR, StringUtils.right(FOOBAR, 3));
assertSame(FOOBAR, StringUtils.right(FOOBAR, 80));
assertSame(null, StringUtils.mid(null, -1, 0));
assertSame(null, StringUtils.mid(null, 0, -1));
assertSame(null, StringUtils.mid(null, 3, 0));
assertSame(null, StringUtils.mid(null, 3, 2));
assertEquals("", StringUtils.mid("", 0, -1));
assertEquals("", StringUtils.mid("", 0, 0));
assertEquals("", StringUtils.mid("", 0, 2));
assertEquals("", StringUtils.mid(FOOBAR, 3, -1));
assertEquals("", StringUtils.mid(FOOBAR, 3, 0));
assertEquals("b", StringUtils.mid(FOOBAR, 3, 1));
assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3));
assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3));
assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80));
assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80));
assertEquals("", StringUtils.mid(FOOBAR, 9, 3));
assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3));
assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", 'X'));
assertNull(StringUtils.substringBefore(null, 0));
assertNull(StringUtils.substringBefore(null, 'X'));
assertEquals("", StringUtils.substringBefore("", 0));
assertEquals("", StringUtils.substringBefore("", 'X'));
assertEquals("foo", StringUtils.substringBefore("foo", 0));
assertEquals("foo", StringUtils.substringBefore("foo", 'b'));
assertEquals("f", StringUtils.substringBefore("foot", 'o'));
assertEquals("", StringUtils.substringBefore("abc", 'a'));
assertEquals("a", StringUtils.substringBefore("abcba", 'b'));
assertEquals("ab", StringUtils.substringBefore("abc", 'c'));
assertEquals("abc", StringUtils.substringBefore("abc", 0));
assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX"));
assertNull(StringUtils.substringBefore(null, null));
assertNull(StringUtils.substringBefore(null, ""));
assertNull(StringUtils.substringBefore(null, "XX"));
assertEquals("", StringUtils.substringBefore("", null));
assertEquals("", StringUtils.substringBefore("", ""));
assertEquals("", StringUtils.substringBefore("", "XX"));
assertEquals("foo", StringUtils.substringBefore("foo", null));
assertEquals("foo", StringUtils.substringBefore("foo", "b"));
assertEquals("f", StringUtils.substringBefore("foot", "o"));
assertEquals("", StringUtils.substringBefore("abc", "a"));
assertEquals("a", StringUtils.substringBefore("abcba", "b"));
assertEquals("ab", StringUtils.substringBefore("abc", "c"));
assertEquals("", StringUtils.substringBefore("abc", ""));
assertEquals("abc", StringUtils.substringBefore("abc", "X"));
assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX"));
assertNull(StringUtils.substringAfter(null, null));
assertNull(StringUtils.substringAfter(null, ""));
assertNull(StringUtils.substringAfter(null, "XX"));
assertEquals("", StringUtils.substringAfter("", null));
assertEquals("", StringUtils.substringAfter("", ""));
assertEquals("", StringUtils.substringAfter("", "XX"));
assertEquals("", StringUtils.substringAfter("foo", null));
assertEquals("ot", StringUtils.substringAfter("foot", "o"));
assertEquals("bc", StringUtils.substringAfter("abc", "a"));
assertEquals("cba", StringUtils.substringAfter("abcba", "b"));
assertEquals("", StringUtils.substringAfter("abc", "c"));
assertEquals("abc", StringUtils.substringAfter("abc", ""));
assertEquals("", StringUtils.substringAfter("abc", "d"));
assertNull(StringUtils.substringAfter(null, 0));
assertNull(StringUtils.substringAfter(null, 'X'));
assertEquals("", StringUtils.substringAfter("", 0));
assertEquals("", StringUtils.substringAfter("", 'X'));
assertEquals("", StringUtils.substringAfter("foo", 0));
assertEquals("ot", StringUtils.substringAfter("foot", 'o'));
assertEquals("bc", StringUtils.substringAfter("abc", 'a'));
assertEquals("cba", StringUtils.substringAfter("abcba", 'b'));
assertEquals("", StringUtils.substringAfter("abc", 'c'));
assertEquals("", StringUtils.substringAfter("abc", 'd'));
assertEquals("fooXXbar", StringUtils.substringBeforeLast("fooXXbarXXbaz", "XX"));
assertNull(StringUtils.substringBeforeLast(null, null));
assertNull(StringUtils.substringBeforeLast(null, ""));
assertNull(StringUtils.substringBeforeLast(null, "XX"));
assertEquals("", StringUtils.substringBeforeLast("", null));
assertEquals("", StringUtils.substringBeforeLast("", ""));
assertEquals("", StringUtils.substringBeforeLast("", "XX"));
assertEquals("foo", StringUtils.substringBeforeLast("foo", null));
assertEquals("foo", StringUtils.substringBeforeLast("foo", "b"));
assertEquals("fo", StringUtils.substringBeforeLast("foo", "o"));
assertEquals("abc\r\n", StringUtils.substringBeforeLast("abc\r\n", "d"));
assertEquals("abc", StringUtils.substringBeforeLast("abcdabc", "d"));
assertEquals("abcdabc", StringUtils.substringBeforeLast("abcdabcd", "d"));
assertEquals("a", StringUtils.substringBeforeLast("abc", "b"));
assertEquals("abc ", StringUtils.substringBeforeLast("abc \n", "\n"));
assertEquals("a", StringUtils.substringBeforeLast("a", null));
assertEquals("a", StringUtils.substringBeforeLast("a", ""));
assertEquals("", StringUtils.substringBeforeLast("a", "a"));
assertEquals("baz", StringUtils.substringAfterLast("fooXXbarXXbaz", "XX"));
assertNull(StringUtils.substringAfterLast(null, null));
assertNull(StringUtils.substringAfterLast(null, ""));
assertNull(StringUtils.substringAfterLast(null, "XX"));
assertEquals("", StringUtils.substringAfterLast("", null));
assertEquals("", StringUtils.substringAfterLast("", ""));
assertEquals("", StringUtils.substringAfterLast("", "a"));
assertEquals("", StringUtils.substringAfterLast("foo", null));
assertEquals("", StringUtils.substringAfterLast("foo", "b"));
assertEquals("t", StringUtils.substringAfterLast("foot", "o"));
assertEquals("bc", StringUtils.substringAfterLast("abc", "a"));
assertEquals("a", StringUtils.substringAfterLast("abcba", "b"));
assertEquals("", StringUtils.substringAfterLast("abc", "c"));
assertEquals("", StringUtils.substringAfterLast("", "d"));
assertEquals("", StringUtils.substringAfterLast("abc", ""));
assertNull(StringUtils.substringAfterLast(null, 0));
assertNull(StringUtils.substringAfterLast(null, 'X'));
assertEquals("", StringUtils.substringAfterLast("", 0));
assertEquals("", StringUtils.substringAfterLast("", 'a'));
assertEquals("", StringUtils.substringAfterLast("foo", 0));
assertEquals("", StringUtils.substringAfterLast("foo", 'b'));
assertEquals("t", StringUtils.substringAfterLast("foot", 'o'));
assertEquals("bc", StringUtils.substringAfterLast("abc", 'a'));
assertEquals("a", StringUtils.substringAfterLast("abcba", 'b'));
assertEquals("", StringUtils.substringAfterLast("abc", 'c'));
assertEquals("", StringUtils.substringAfterLast("", 'd'));
assertNull(StringUtils.substringBetween(null, "tag"));
assertEquals("", StringUtils.substringBetween("", ""));
assertNull(StringUtils.substringBetween("", "abc"));
assertEquals("", StringUtils.substringBetween("    ", " "));
assertNull(StringUtils.substringBetween("abc", null));
assertEquals("", StringUtils.substringBetween("abc", ""));
assertNull(StringUtils.substringBetween("abc", "a"));
assertEquals("bc", StringUtils.substringBetween("abca", "a"));
assertEquals("bc", StringUtils.substringBetween("abcabca", "a"));
assertEquals("bar", StringUtils.substringBetween("\nbar\n", "\n"));
assertNull(StringUtils.substringBetween(null, "", ""));
assertNull(StringUtils.substringBetween("", null, ""));
assertNull(StringUtils.substringBetween("", "", null));
assertEquals("", StringUtils.substringBetween("", "", ""));
assertEquals("", StringUtils.substringBetween("foo", "", ""));
assertNull(StringUtils.substringBetween("foo", "", "]"));
assertNull(StringUtils.substringBetween("foo", "[", "]"));
assertEquals("", StringUtils.substringBetween("    ", " ", "  "));
assertEquals("bar", StringUtils.substringBetween("<foo>bar</foo>", "<foo>", "</foo>") );
assertEquals("abc", StringUtils.substringBetween("yabczyabcz", "y", "z"));
assertEquals(3, results.length);
assertEquals("one", results[0]);
assertEquals("two", results[1]);
assertEquals("three", results[2]);
assertEquals(2, results.length);
assertEquals("one", results[0]);
assertEquals("two", results[1]);
assertEquals(2, results.length);
assertEquals("one", results[0]);
assertEquals("two", results[1]);
assertEquals(1, results.length);
assertEquals("one", results[0]);
assertEquals(1, results.length);
assertEquals("three", results[0]);
assertEquals(1, results.length);
assertEquals("hello", results[0]);
assertNull(results);
assertNull(results);
assertNull(results);
assertNull(results);
assertNull(results);
assertNull(results);
assertNull(results);
assertEquals(0, results.length);
assertEquals(0, StringUtils.countMatches(null, null));
assertEquals(0, StringUtils.countMatches("blah", null));
assertEquals(0, StringUtils.countMatches(null, "DD"));
assertEquals(0, StringUtils.countMatches("x", ""));
assertEquals(0, StringUtils.countMatches("", ""));
assertEquals(3,StringUtils.countMatches("one long someone sentence of one", "one"));
assertEquals(0,StringUtils.countMatches("one long someone sentence of one", "two"));
assertEquals(4,StringUtils.countMatches("oooooooooooo", "ooo"));
assertEquals(0, StringUtils.countMatches(null, "?"));
assertEquals(0, StringUtils.countMatches("", "?"));
assertEquals(0, StringUtils.countMatches("abba", null));
assertEquals(0, StringUtils.countMatches("abba", ""));
assertEquals(2, StringUtils.countMatches("abba", "a"));
assertEquals(1, StringUtils.countMatches("abba", "ab"));
assertEquals(0, StringUtils.countMatches("abba", "xxx"));
assertEquals(1, StringUtils.countMatches("ababa", "aba"));
assertEquals(0, StringUtils.countMatches(null, 'D'));
assertEquals(5, StringUtils.countMatches("one long someone sentence of one", ' '));
assertEquals(6, StringUtils.countMatches("one long someone sentence of one", 'o'));
assertEquals(4, StringUtils.countMatches("oooooooooooo", "ooo"));
assertFalse(rb.contains(null), "should not contain null");
assertTrue(rb.contains(10), "should contain 10");
assertTrue(rb.contains(-10), "should contain -10");
assertFalse(rb.contains(21), "should not contain 21");
assertFalse(rb.contains(-11), "should not contain -11");
assertFalse(rb.contains(null), "should not contain null");
assertTrue(rb.contains(10), "should contain 10");
assertTrue(rb.contains(-10), "should contain -10");
assertTrue(rb.contains(21), "should contain 21");
assertTrue(rb.contains(-11), "should contain -11");
assertFalse(rbstr.contains(null), "should not contain null");
assertTrue(rbstr.contains("house"), "should contain house");
assertTrue(rbstr.contains("i"), "should contain i");
assertFalse(rbstr.contains("hose"), "should not contain hose");
assertFalse(rbstr.contains("ice"), "should not contain ice");
assertFalse(rbstr.contains(null), "should not contain null");
assertTrue(rbstr.contains("house"), "should contain house");
assertTrue(rbstr.contains("i"), "should contain i");
assertFalse(rbstr.contains("houses"), "should not contain houses");
assertFalse(rbstr.contains(""), "should not contain ''");
assertThrows(IllegalArgumentException.class,() -> Range.between(null, null, lengthComp));
assertTrue(r1.isNaturalOrdering());
assertTrue(r2.isNaturalOrdering());
assertTrue(mixed.contains(derivedComparableA));
assertTrue(same.contains(derivedComparableA));
assertTrue(rangeA.contains(derivedComparableA));
assertTrue(rangeB.contains(derivedComparableB));
assertFalse(intRange.contains(null));
assertFalse(intRange.contains(5));
assertTrue(intRange.contains(10));
assertTrue(intRange.contains(15));
assertTrue(intRange.contains(20));
assertFalse(intRange.contains(25));
assertFalse(intRange.containsRange(null));
assertTrue(intRange.containsRange(Range.between(12, 18)));
assertFalse(intRange.containsRange(Range.between(32, 45)));
assertFalse(intRange.containsRange(Range.between(2, 8)));
assertTrue(intRange.containsRange(Range.between(10, 20)));
assertFalse(intRange.containsRange(Range.between(9, 14)));
assertFalse(intRange.containsRange(Range.between(16, 21)));
assertTrue(intRange.containsRange(Range.between(10, 19)));
assertFalse(intRange.containsRange(Range.between(10, 21)));
assertTrue(intRange.containsRange(Range.between(11, 20)));
assertFalse(intRange.containsRange(Range.between(9, 20)));
assertFalse(intRange.containsRange(Range.between(-11, -18)));
assertThrows(NullPointerException.class, () -> intRange.elementCompareTo(null));
assertEquals(-1, intRange.elementCompareTo(5));
assertEquals(0, intRange.elementCompareTo(10));
assertEquals(0, intRange.elementCompareTo(15));
assertEquals(0, intRange.elementCompareTo(20));
assertEquals(1, intRange.elementCompareTo(25));
assertEquals(byteRange, byteRange);
assertEquals(byteRange, byteRange2);
assertEquals(byteRange2, byteRange2);
assertEquals(byteRange, byteRange);
assertEquals(byteRange2, byteRange2);
assertEquals(byteRange3, byteRange3);
assertNotEquals(byteRange2, byteRange3);
assertNotEquals(null, byteRange2);
assertNotEquals("Ni!", byteRange2);
assertEquals(intRange.getMinimum(), intRange.fit(Integer.MIN_VALUE));
assertEquals(intRange.getMinimum(), intRange.fit(intRange.getMinimum()));
assertEquals(intRange.getMaximum(), intRange.fit(Integer.MAX_VALUE));
assertEquals(intRange.getMaximum(), intRange.fit(intRange.getMaximum()));
assertEquals(15, intRange.fit(15));
assertThrows(NullPointerException.class, () -> {intRange.fit(null);
assertEquals(20, (int) intRange.getMaximum());
assertEquals(20L, (long) longRange.getMaximum());
assertEquals(20f, floatRange.getMaximum(), 0.00001f);
assertEquals(20d, doubleRange.getMaximum(), 0.00001d);
assertEquals(10, (int) intRange.getMinimum());
assertEquals(10L, (long) longRange.getMinimum());
assertEquals(10f, floatRange.getMinimum(), 0.00001f);
assertEquals(10d, doubleRange.getMinimum(), 0.00001d);
assertEquals(byteRange.hashCode(), byteRange2.hashCode());
assertNotEquals(byteRange.hashCode(), byteRange3.hashCode());
assertEquals(intRange.hashCode(), intRange.hashCode());
assertTrue(intRange.hashCode() != 0);
assertSame(intRange, intRange.intersectionWith(intRange));
assertSame(byteRange, byteRange.intersectionWith(byteRange));
assertSame(longRange, longRange.intersectionWith(longRange));
assertSame(floatRange, floatRange.intersectionWith(floatRange));
assertSame(doubleRange, doubleRange.intersectionWith(doubleRange));
assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15)));
assertThrows(IllegalArgumentException.class, () -> intRange.intersectionWith(Range.between(0, 9)));
assertThrows(IllegalArgumentException.class, () -> intRange.intersectionWith(null));
assertFalse(intRange.isAfter(null));
assertTrue(intRange.isAfter(5));
assertFalse(intRange.isAfter(10));
assertFalse(intRange.isAfter(15));
assertFalse(intRange.isAfter(20));
assertFalse(intRange.isAfter(25));
assertFalse(intRange.isAfterRange(null));
assertTrue(intRange.isAfterRange(Range.between(5, 9)));
assertFalse(intRange.isAfterRange(Range.between(5, 10)));
assertFalse(intRange.isAfterRange(Range.between(5, 20)));
assertFalse(intRange.isAfterRange(Range.between(5, 25)));
assertFalse(intRange.isAfterRange(Range.between(15, 25)));
assertFalse(intRange.isAfterRange(Range.between(21, 25)));
assertFalse(intRange.isAfterRange(Range.between(10, 20)));
assertFalse(intRange.isBefore(null));
assertFalse(intRange.isBefore(5));
assertFalse(intRange.isBefore(10));
assertFalse(intRange.isBefore(15));
assertFalse(intRange.isBefore(20));
assertTrue(intRange.isBefore(25));
assertFalse(intRange.isBeforeRange(null));
assertFalse(intRange.isBeforeRange(Range.between(5, 9)));
assertFalse(intRange.isBeforeRange(Range.between(5, 10)));
assertFalse(intRange.isBeforeRange(Range.between(5, 20)));
assertFalse(intRange.isBeforeRange(Range.between(5, 25)));
assertFalse(intRange.isBeforeRange(Range.between(15, 25)));
assertTrue(intRange.isBeforeRange(Range.between(21, 25)));
assertFalse(intRange.isBeforeRange(Range.between(10, 20)));
assertFalse(intRange.isEndedBy(null));
assertFalse(intRange.isEndedBy(5));
assertFalse(intRange.isEndedBy(10));
assertFalse(intRange.isEndedBy(15));
assertTrue(intRange.isEndedBy(20));
assertFalse(intRange.isEndedBy(25));
assertFalse(intRange.isOverlappedBy(null));
assertTrue(intRange.isOverlappedBy(Range.between(12, 18)));
assertFalse(intRange.isOverlappedBy(Range.between(32, 45)));
assertFalse(intRange.isOverlappedBy(Range.between(2, 8)));
assertTrue(intRange.isOverlappedBy(Range.between(10, 20)));
assertTrue(intRange.isOverlappedBy(Range.between(9, 14)));
assertTrue(intRange.isOverlappedBy(Range.between(16, 21)));
assertTrue(intRange.isOverlappedBy(Range.between(10, 19)));
assertTrue(intRange.isOverlappedBy(Range.between(10, 21)));
assertTrue(intRange.isOverlappedBy(Range.between(11, 20)));
assertTrue(intRange.isOverlappedBy(Range.between(9, 20)));
assertFalse(intRange.isOverlappedBy(Range.between(-11, -18)));
assertTrue(intRange.isOverlappedBy(Range.between(9, 21)));
assertFalse(intRange.isStartedBy(null));
assertFalse(intRange.isStartedBy(5));
assertTrue(intRange.isStartedBy(10));
assertFalse(intRange.isStartedBy(15));
assertFalse(intRange.isStartedBy(20));
assertFalse(intRange.isStartedBy(25));
assertFalse(ri.contains(null), "should not contain null");
assertTrue(ri.contains(10), "should contain 10");
assertFalse(ri.contains(11), "should not contain 11");
assertFalse(ri.contains(null), "should not contain null");
assertTrue(ri.contains(10), "should contain 10");
assertTrue(ri.contains(11), "should contain 11");
assertTrue(chars.contains('b'));
assertFalse(chars.contains('B'));
assertNotNull(byteRange.toString());
assertEquals("[10..20]", str);
assertEquals("[-20..-10]", Range.between(-20, -10).toString());
assertEquals("From 10 to 20", str);
assertTrue(CharUtils.compare('a', 'b') < 0);
assertEquals(0, CharUtils.compare('c', 'c'));
assertTrue(CharUtils.compare('c', 'a') > 0);
assertNotNull(new CharUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(CharUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(CharUtils.class.getModifiers()));
assertTrue(CharUtils.isAscii('a'));
assertTrue(CharUtils.isAscii('A'));
assertTrue(CharUtils.isAscii('3'));
assertTrue(CharUtils.isAscii('-'));
assertTrue(CharUtils.isAscii('\n'));
assertFalse(CharUtils.isAscii(CHAR_COPY));
assertEquals(i < 128, CharUtils.isAscii((char) i));
assertTrue(CharUtils.isAsciiAlpha('a'));
assertTrue(CharUtils.isAsciiAlpha('A'));
assertFalse(CharUtils.isAsciiAlpha('3'));
assertFalse(CharUtils.isAsciiAlpha('-'));
assertFalse(CharUtils.isAsciiAlpha('\n'));
assertFalse(CharUtils.isAsciiAlpha(CHAR_COPY));
assertTrue(CharUtils.isAsciiAlpha((char) i));
assertFalse(CharUtils.isAsciiAlpha((char) i));
assertTrue(CharUtils.isAsciiAlphaLower('a'));
assertFalse(CharUtils.isAsciiAlphaLower('A'));
assertFalse(CharUtils.isAsciiAlphaLower('3'));
assertFalse(CharUtils.isAsciiAlphaLower('-'));
assertFalse(CharUtils.isAsciiAlphaLower('\n'));
assertFalse(CharUtils.isAsciiAlphaLower(CHAR_COPY));
assertTrue(CharUtils.isAsciiAlphaLower((char) i));
assertFalse(CharUtils.isAsciiAlphaLower((char) i));
assertTrue(CharUtils.isAsciiAlphanumeric('a'));
assertTrue(CharUtils.isAsciiAlphanumeric('A'));
assertTrue(CharUtils.isAsciiAlphanumeric('3'));
assertFalse(CharUtils.isAsciiAlphanumeric('-'));
assertFalse(CharUtils.isAsciiAlphanumeric('\n'));
assertFalse(CharUtils.isAsciiAlphanumeric(CHAR_COPY));
assertTrue(CharUtils.isAsciiAlphanumeric((char) i));
assertFalse(CharUtils.isAsciiAlphanumeric((char) i));
assertFalse(CharUtils.isAsciiAlphaUpper('a'));
assertTrue(CharUtils.isAsciiAlphaUpper('A'));
assertFalse(CharUtils.isAsciiAlphaUpper('3'));
assertFalse(CharUtils.isAsciiAlphaUpper('-'));
assertFalse(CharUtils.isAsciiAlphaUpper('\n'));
assertFalse(CharUtils.isAsciiAlphaUpper(CHAR_COPY));
assertTrue(CharUtils.isAsciiAlphaUpper((char) i));
assertFalse(CharUtils.isAsciiAlphaUpper((char) i));
assertFalse(CharUtils.isAsciiControl('a'));
assertFalse(CharUtils.isAsciiControl('A'));
assertFalse(CharUtils.isAsciiControl('3'));
assertFalse(CharUtils.isAsciiControl('-'));
assertTrue(CharUtils.isAsciiControl('\n'));
assertFalse(CharUtils.isAsciiControl(CHAR_COPY));
assertTrue(CharUtils.isAsciiControl((char) i));
assertFalse(CharUtils.isAsciiControl((char) i));
assertFalse(CharUtils.isAsciiNumeric('a'));
assertFalse(CharUtils.isAsciiNumeric('A'));
assertTrue(CharUtils.isAsciiNumeric('3'));
assertFalse(CharUtils.isAsciiNumeric('-'));
assertFalse(CharUtils.isAsciiNumeric('\n'));
assertFalse(CharUtils.isAsciiNumeric(CHAR_COPY));
assertTrue(CharUtils.isAsciiNumeric((char) i));
assertFalse(CharUtils.isAsciiNumeric((char) i));
assertTrue(CharUtils.isAsciiPrintable('a'));
assertTrue(CharUtils.isAsciiPrintable('A'));
assertTrue(CharUtils.isAsciiPrintable('3'));
assertTrue(CharUtils.isAsciiPrintable('-'));
assertFalse(CharUtils.isAsciiPrintable('\n'));
assertFalse(CharUtils.isAsciiPrintable(CHAR_COPY));
assertTrue(CharUtils.isAsciiPrintable((char) i));
assertFalse(CharUtils.isAsciiPrintable((char) i));
assertEquals('A', CharUtils.toChar(CHARACTER_A));
assertEquals('B', CharUtils.toChar(CHARACTER_B));
assertThrows(NullPointerException.class, () -> CharUtils.toChar((Character) null));
assertEquals('A', CharUtils.toChar(CHARACTER_A, 'X'));
assertEquals('B', CharUtils.toChar(CHARACTER_B, 'X'));
assertEquals('X', CharUtils.toChar((Character) null, 'X'));
assertEquals('A', CharUtils.toChar("A"));
assertEquals('B', CharUtils.toChar("BA"));
assertThrows(NullPointerException.class, () -> CharUtils.toChar((String) null));
assertThrows(IllegalArgumentException.class, () -> CharUtils.toChar(""));
assertEquals('A', CharUtils.toChar("A", 'X'));
assertEquals('B', CharUtils.toChar("BA", 'X'));
assertEquals('X', CharUtils.toChar("", 'X'));
assertEquals('X', CharUtils.toChar((String) null, 'X'));
assertEquals(Character.valueOf('a'), CharUtils.toCharacterObject('a'));
assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a'));
assertSame(ch, ch2);
assertEquals(i, ch.charValue());
assertEquals(ch, ch2);
assertNotSame(ch, ch2);
assertEquals(i, ch.charValue());
assertEquals(i, ch2.charValue());
assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject('a'));
assertNull(CharUtils.toCharacterObject(null));
assertNull(CharUtils.toCharacterObject(""));
assertEquals(Character.valueOf('a'), CharUtils.toCharacterObject("a"));
assertEquals(Character.valueOf('a'), CharUtils.toCharacterObject("abc"));
assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject("a"));
assertEquals(0, CharUtils.toIntValue('0'));
assertEquals(1, CharUtils.toIntValue('1'));
assertEquals(2, CharUtils.toIntValue('2'));
assertEquals(3, CharUtils.toIntValue('3'));
assertEquals(4, CharUtils.toIntValue('4'));
assertEquals(5, CharUtils.toIntValue('5'));
assertEquals(6, CharUtils.toIntValue('6'));
assertEquals(7, CharUtils.toIntValue('7'));
assertEquals(8, CharUtils.toIntValue('8'));
assertEquals(9, CharUtils.toIntValue('9'));
assertThrows(IllegalArgumentException.class, () -> CharUtils.toIntValue('a'));
assertEquals(0, CharUtils.toIntValue('0', -1));
assertEquals(3, CharUtils.toIntValue('3', -1));
assertEquals(-1, CharUtils.toIntValue('a', -1));
assertEquals(0, CharUtils.toIntValue(Character.valueOf('0')));
assertEquals(3, CharUtils.toIntValue(Character.valueOf('3')));
assertThrows(NullPointerException.class, () -> CharUtils.toIntValue(null));
assertThrows(IllegalArgumentException.class, () -> CharUtils.toIntValue(CHARACTER_A));
assertEquals(0, CharUtils.toIntValue(Character.valueOf('0'), -1));
assertEquals(3, CharUtils.toIntValue(Character.valueOf('3'), -1));
assertEquals(-1, CharUtils.toIntValue(Character.valueOf('A'), -1));
assertEquals(-1, CharUtils.toIntValue(null, -1));
assertEquals("a", CharUtils.toString('a'));
assertSame(CharUtils.toString('a'), CharUtils.toString('a'));
assertSame(str, str2);
assertEquals(1, str.length());
assertEquals(i, str.charAt(0));
assertEquals(str, str2);
assertNotSame(str, str2);
assertEquals(1, str.length());
assertEquals(i, str.charAt(0));
assertEquals(1, str2.length());
assertEquals(i, str2.charAt(0));
assertNull(CharUtils.toString(null));
assertEquals("A", CharUtils.toString(CHARACTER_A));
assertSame(CharUtils.toString(CHARACTER_A), CharUtils.toString(CHARACTER_A));
assertEquals("\\u0041", CharUtils.unicodeEscaped('A'));
assertEquals("\\u004c", CharUtils.unicodeEscaped('L'));
assertEquals(6, str.length());
assertEquals(i, val);
assertEquals("\\u0999", CharUtils.unicodeEscaped((char) 0x999));
assertEquals("\\u1001", CharUtils.unicodeEscaped((char) 0x1001));
assertNull(CharUtils.unicodeEscaped(null));
assertEquals("\\u0041", CharUtils.unicodeEscaped(CHARACTER_A));
Assertions.assertThrows(IllegalStateException.class, () -> {builder.toString();
Assertions.assertThrows(IllegalStateException.class, () -> {builder.toString();
assertTrue(toString.indexOf(includeField) > 0);
assertTrue(toString.indexOf(includeValue) > 0);
assertEquals(ArrayUtils.INDEX_NOT_FOUND, toString.indexOf(nonIncludeField));
assertEquals(ArrayUtils.INDEX_NOT_FOUND, toString.indexOf(nonIncludeValue));
assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());
assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());
assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).appendSuper("Integer@8888[%NULL%]").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());
assertEquals(baseStr + "[%NULL%,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[%NULL%]").append("a", "hello").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) null).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());
assertEquals(baseStr + "[a=%NULL%]", new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals(baseStr + "[a=%Integer%]", new ToStringBuilder(base).append("a", i3, false).toString());
assertEquals(baseStr + "[a=%SIZE=0%]", new ToStringBuilder(base).append("a", Collections.emptyList(), false).toString());
assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", Collections.emptyList(), true).toString());
assertEquals(baseStr + "[a=%SIZE=1%]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), false).toString());
assertEquals(baseStr + "[a=[3]]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), true).toString());
assertEquals(baseStr + "[a=%SIZE=2%]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), false).toString());
assertEquals(baseStr + "[a=[3, 4]]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), true).toString());
assertEquals(baseStr + "[a=%SIZE=0%]", new ToStringBuilder(base).append("a", Collections.emptyMap(), false).toString());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", Collections.emptyMap(), true).toString());
assertEquals(baseStr + "[a=%SIZE=1%]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), false).toString());
assertEquals(baseStr + "[a={k=v}]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), true).toString());
assertEquals(baseStr + "[a=%SIZE=0%]", new ToStringBuilder(base).append("a", (Object) new Integer[0], false).toString());
assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", (Object) new Integer[0], true).toString());
assertEquals(baseStr + "[a=%SIZE=1%]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, false).toString());
assertEquals(baseStr + "[a=[3]]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, true).toString());
assertEquals(baseStr + "[a=%SIZE=2%]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, false).toString());
assertEquals(baseStr + "[a=[3, 4]]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, true).toString());
assertEquals(pBaseStr + "[name=Suzy Queue,age=19,smoker=false]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals(baseStr + "[[%NULL%, 5, [3, 6]]]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[[%NULL%, 5, [3, 6]]]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[[1, 2, -3, 4]]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[[1, 2, -3, 4]]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[[[1, 2], %NULL%, [5]]]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[[[1, 2], %NULL%, [5]]]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).append((Object) array).toString());
assertTrue((new StandardToStringStyle()).isUseClassName());
assertTrue((new StandardToStringStyle()).isUseFieldNames());
assertFalse((new StandardToStringStyle()).isUseShortClassName());
assertTrue((new StandardToStringStyle()).isUseIdentityHashCode());
assertTrue((new StandardToStringStyle()).isDefaultFullDetail());
assertTrue((new StandardToStringStyle()).isArrayContentDetail());
assertFalse((new StandardToStringStyle()).isFieldSeparatorAtStart());
assertFalse((new StandardToStringStyle()).isFieldSeparatorAtEnd());
assertEquals("[", STYLE.getContentStart());
assertEquals("]", STYLE.getContentEnd());
assertEquals("=", STYLE.getFieldNameValueSeparator());
assertEquals(",", STYLE.getFieldSeparator());
assertEquals("%NULL%", STYLE.getNullText());
assertEquals("%SIZE=", STYLE.getSizeStartText());
assertEquals("%", STYLE.getSizeEndText());
assertEquals("%", STYLE.getSummaryObjectStartText());
assertEquals("%", STYLE.getSummaryObjectEndText());
assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());
assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());
assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());
assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", Collections.emptyList(), false).toString());
assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", Collections.emptyList(), true).toString());
assertEquals(baseStr + "[a=<size=1>]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), false).toString());
assertEquals(baseStr + "[a=[3]]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), true).toString());
assertEquals(baseStr + "[a=<size=2>]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), false).toString());
assertEquals(baseStr + "[a=[3, 4]]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), true).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", Collections.emptyMap(), false).toString());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", Collections.emptyMap(), true).toString());
assertEquals(baseStr + "[a=<size=1>]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), false).toString());
assertEquals(baseStr + "[a={k=v}]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), true).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new Integer[0], false).toString());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new Integer[0], true).toString());
assertEquals(baseStr + "[a=<size=1>]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, false).toString());
assertEquals(baseStr + "[a={3}]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, true).toString());
assertEquals(baseStr + "[a=<size=2>]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, false).toString());
assertEquals(baseStr + "[a={3,4}]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, true).toString());
assertEquals(pBaseStr + "[name=John Q. Public,age=45,smoker=true]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("", style.getArrayStart());
assertEquals("", style.getArrayEnd());
assertEquals("", style.getArraySeparator());
assertEquals("", style.getContentStart());
assertEquals("", style.getContentEnd());
assertEquals("", style.getFieldNameValueSeparator());
assertEquals("", style.getFieldSeparator());
assertEquals("", style.getNullText());
assertEquals("", style.getSizeStartText());
assertEquals("", style.getSizeEndText());
assertEquals("", style.getSummaryObjectStartText());
assertEquals("", style.getSummaryObjectEndText());
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertFalse(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertFalse(toString.contains(STRING_FIELD_NAME));
assertFalse(toString.contains(INTEGER_FIELD_NAME));
assertFalse(toString.contains(STRING_FIELD_NAME));
assertTrue(builder.isExcludeNullValues());
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertFalse(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertFalse(toString.contains(STRING_FIELD_NAME));
assertFalse(toString.contains(INTEGER_FIELD_NAME));
assertFalse(toString.contains(STRING_FIELD_NAME));
assertFalse(builder.isExcludeNullValues());
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(toString.contains(STRING_FIELD_NAME));
assertTrue(toString.contains(INTEGER_FIELD_NAME));
assertTrue(builder.isExcludeNullValues());
assertFalse(toString.contains(STRING_FIELD_NAME));
assertFalse(toString.contains(INTEGER_FIELD_NAME));
assertFalse(toString.contains(STRING_FIELD_NAME));
assertFalse(toString.contains(INTEGER_FIELD_NAME));
assertTrue(oldBuilder.isExcludeNullValues());
assertFalse(toString.contains(STRING_FIELD_NAME));
assertFalse(toString.contains(INTEGER_FIELD_NAME));
assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());
assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());
assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());
assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());
assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append("a", i3).toString());
assertEquals(baseStr + "[3,4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals(baseStr + "[<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());
assertEquals(baseStr + "[<size=0>]", new ToStringBuilder(base).append("a", Collections.emptyList(), false).toString());
assertEquals(baseStr + "[[]]", new ToStringBuilder(base).append("a", Collections.emptyList(), true).toString());
assertEquals(baseStr + "[<size=1>]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), false).toString());
assertEquals(baseStr + "[[3]]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), true).toString());
assertEquals(baseStr + "[<size=2>]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), false).toString());
assertEquals(baseStr + "[[3, 4]]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), true).toString());
assertEquals(baseStr + "[<size=0>]", new ToStringBuilder(base).append("a", Collections.emptyMap(), false).toString());
assertEquals(baseStr + "[{}]", new ToStringBuilder(base).append("a", Collections.emptyMap(), true).toString());
assertEquals(baseStr + "[<size=1>]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), false).toString());
assertEquals(baseStr + "[{k=v}]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), true).toString());
assertEquals(baseStr + "[<size=0>]", new ToStringBuilder(base).append("a", (Object) new Integer[0], false).toString());
assertEquals(baseStr + "[{}]", new ToStringBuilder(base).append("a", (Object) new Integer[0], true).toString());
assertEquals(baseStr + "[<size=1>]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, false).toString());
assertEquals(baseStr + "[{3}]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, true).toString());
assertEquals(baseStr + "[<size=2>]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, false).toString());
assertEquals(baseStr + "[{3,4}]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, true).toString());
assertEquals(pBaseStr + "[Ron Paul,72,false]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals(baseStr + "[3,4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(1, list.getNumberOfDiffs());
assertEquals(Boolean.class, diff.getType());
assertEquals(Boolean.TRUE, diff.getLeft());
assertEquals(Boolean.FALSE, diff.getRight());
assertEquals(1, list.getNumberOfDiffs());
assertArrayEquals(ArrayUtils.toObject(class1.booleanArrayField),(Object[]) diff.getLeft());
assertArrayEquals(ArrayUtils.toObject(class2.booleanArrayField),(Object[]) diff.getRight());
assertEquals(1, list.getNumberOfDiffs());
assertEquals(Byte.valueOf(class1.byteField), diff.getLeft());
assertEquals(Byte.valueOf(class2.byteField), diff.getRight());
assertEquals(1, list.getNumberOfDiffs());
assertArrayEquals(ArrayUtils.toObject(class1.byteArrayField),(Object[]) diff.getLeft());
assertArrayEquals(ArrayUtils.toObject(class2.byteArrayField),(Object[]) diff.getRight());
assertEquals(0, list.getNumberOfDiffs());
assertEquals(1, list.getNumberOfDiffs());
assertEquals(Character.valueOf(class1.charField), diff.getLeft());
assertEquals(Character.valueOf(class2.charField), diff.getRight());
assertEquals(1, list.getNumberOfDiffs());
assertArrayEquals(ArrayUtils.toObject(class1.charArrayField),(Object[]) diff.getLeft());
assertArrayEquals(ArrayUtils.toObject(class2.charArrayField),(Object[]) diff.getRight());
assertEquals(1, list.getNumberOfDiffs());
assertEquals("prop1.int", list.getDiffs().get(0).getFieldName());
assertEquals(1, list.getNumberOfDiffs());
assertEquals(Double.valueOf(class1.doubleField), diff.getLeft());
assertEquals(Double.valueOf(class2.doubleField), diff.getRight());
assertEquals(1, list.getNumberOfDiffs());
assertArrayEquals(ArrayUtils.toObject(class1.doubleArrayField),(Object[]) diff.getLeft());
assertArrayEquals(ArrayUtils.toObject(class2.doubleArrayField),(Object[]) diff.getRight());
assertEquals(1, list.getNumberOfDiffs());
assertEquals(Float.valueOf(class1.floatField), diff.getLeft());
assertEquals(Float.valueOf(class2.floatField), diff.getRight());
assertEquals(1, list.getNumberOfDiffs());
assertArrayEquals(ArrayUtils.toObject(class1.floatArrayField),(Object[]) diff.getLeft());
assertArrayEquals(ArrayUtils.toObject(class2.floatArrayField),(Object[]) diff.getRight());
assertEquals(1, list.getNumberOfDiffs());
assertEquals(Integer.valueOf(class1.intField), diff.getLeft());
assertEquals(Integer.valueOf(class2.intField), diff.getRight());
assertEquals(1, list.getNumberOfDiffs());
assertArrayEquals(ArrayUtils.toObject(class1.intArrayField),(Object[]) diff.getLeft());
assertArrayEquals(ArrayUtils.toObject(class2.intArrayField),(Object[]) diff.getRight());
assertEquals(1, list.getNumberOfDiffs());
assertEquals(Long.valueOf(class1.longField), diff.getLeft());
assertEquals(Long.valueOf(class2.longField), diff.getRight());
assertEquals(1, list.getNumberOfDiffs());
assertArrayEquals(ArrayUtils.toObject(class1.longArrayField),(Object[]) diff.getLeft());
assertArrayEquals(ArrayUtils.toObject(class2.longArrayField),(Object[]) diff.getRight());
assertThrows(NullPointerException.class, () -> new DiffBuilder<>(null, this, ToStringStyle.DEFAULT_STYLE));
assertThrows(NullPointerException.class, () -> new DiffBuilder<>(this, null, ToStringStyle.DEFAULT_STYLE));
assertEquals(1, list.getNumberOfDiffs());
assertEquals(class1.objectField, diff.getLeft());
assertEquals(class2.objectField, diff.getRight());
assertEquals(1, list.getNumberOfDiffs());
assertArrayEquals(class1.objectArrayField, (Object[]) diff.getLeft());
assertArrayEquals(class2.objectArrayField, (Object[]) diff.getRight());
assertEquals(0, list.getNumberOfDiffs());
assertNotSame(left.objectField, right.objectField);
assertEquals(left.objectField, right.objectField);
assertEquals(0, list.getNumberOfDiffs());
assertNotSame(left.objectField, right.objectField);
assertNotEquals(left.objectField, right.objectField);
assertEquals(1, list.getNumberOfDiffs());
assertSame(left.objectField, right.objectField);
assertEquals(left.objectField, right.objectField);
assertEquals(0, list.getNumberOfDiffs());
assertEquals(0, list.getNumberOfDiffs());
assertEquals(1, list.getNumberOfDiffs());
assertEquals(Short.valueOf(class1.shortField), diff.getLeft());
assertEquals(Short.valueOf(class2.shortField), diff.getRight());
assertEquals(1, list.getNumberOfDiffs());
assertArrayEquals(ArrayUtils.toObject(class1.shortArrayField),(Object[]) diff.getLeft());
assertArrayEquals(ArrayUtils.toObject(class2.shortArrayField),(Object[]) diff.getRight());
assertEquals(0, list.getNumberOfDiffs());
assertEquals(SHORT_STYLE, list.getToStringStyle());
assertEquals(ToStringStyle.MULTI_LINE_STYLE, list.getToStringStyle());
assertThat(explicitTestAndNotEqual1.build().getNumberOfDiffs(), equalToOne);
assertThat(explicitTestAndNotEqual2.build().getNumberOfDiffs(), equalToOne);
assertThat(implicitTestAndEqual.build().getNumberOfDiffs(), equalToZero);
assertThat(implicitTestAndNotEqual.build().getNumberOfDiffs(), equalToOne);
assertThat(explicitTestAndEqual.build().getNumberOfDiffs(), equalToZero);
assertEquals("[]", new ToStringBuilder(base).toString());
assertEquals("[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());
assertEquals("[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());
assertEquals("[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());
assertEquals("[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());
assertEquals("[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals("[<null>]", new ToStringBuilder(base).append((Object) null).toString());
assertEquals("[3]", new ToStringBuilder(base).append(i3).toString());
assertEquals("[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals("[a=3]", new ToStringBuilder(base).append("a", i3).toString());
assertEquals("[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals("[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());
assertEquals("[a=<size=0>]", new ToStringBuilder(base).append("a", Collections.emptyList(), false).toString());
assertEquals("[a=[]]", new ToStringBuilder(base).append("a", Collections.emptyList(), true).toString());
assertEquals("[a=<size=1>]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), false).toString());
assertEquals("[a=[3]]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), true).toString());
assertEquals("[a=<size=2>]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), false).toString());
assertEquals("[a=[3, 4]]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), true).toString());
assertEquals("[a=<size=0>]", new ToStringBuilder(base).append("a", Collections.emptyMap(), false).toString());
assertEquals("[a={}]", new ToStringBuilder(base).append("a", Collections.emptyMap(), true).toString());
assertEquals("[a=<size=1>]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), false).toString());
assertEquals("[a={k=v}]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), true).toString());
assertEquals("[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new Integer[0], false).toString());
assertEquals("[a={}]", new ToStringBuilder(base).append("a", (Object) new Integer[0], true).toString());
assertEquals("[a=<size=1>]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, false).toString());
assertEquals("[a={3}]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, true).toString());
assertEquals("[a=<size=2>]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, false).toString());
assertEquals("[a={3,4}]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, true).toString());
assertEquals("[name=John Q. Public,age=45,smoker=true]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());
assertEquals("[3]", new ToStringBuilder(base).append(3L).toString());
assertEquals("[a=3]", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals("[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals("[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());
assertEquals("[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals("[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());
assertEquals("[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals("[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());
assertEquals("[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals("[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(diffs, list.getDiffs());
assertEquals(1, list.getNumberOfDiffs());
assertThrows(UnsupportedOperationException.class, () -> list.getDiffs().remove(0));
assertTrue(expectedIterator.hasNext());
assertEquals(expectedIterator.next(), iterator.next());
assertEquals("DiffResultTest.EmptyClass[test=false] differs from DiffResultTest.EmptyClass[test=true]",list.toString());
assertEquals(list.getToStringStyle(), SHORT_STYLE);
assertEquals(expectedOutput,list.toString(ToStringStyle.MULTI_LINE_STYLE));
assertThrows(NullPointerException.class,() -> new DiffResult<>(null, SIMPLE_FALSE, SIMPLE_TRUE.diff(SIMPLE_FALSE).getDiffs(), SHORT_STYLE));
assertThrows(NullPointerException.class,() -> new DiffResult<>(SIMPLE_TRUE, null, SIMPLE_TRUE.diff(SIMPLE_FALSE).getDiffs(), SHORT_STYLE));
assertThrows(NullPointerException.class,() -> new DiffResult<>(SIMPLE_TRUE, SIMPLE_FALSE, null, SHORT_STYLE));
assertEquals(ToStringStyle.DEFAULT_STYLE, diffResult.getToStringStyle());
assertEquals(DiffResult.OBJECTS_SAME_STRING, diffResult.toString());
assertEquals(left, diffResult.getLeft());
assertEquals(right, diffResult.getRight());
assertTrue(EqualsBuilder.reflectionEquals(o1, o1));
assertFalse(EqualsBuilder.reflectionEquals(o1, o2));
assertTrue(EqualsBuilder.reflectionEquals(o1, o2));
assertFalse(EqualsBuilder.reflectionEquals(o1, this));
assertFalse(EqualsBuilder.reflectionEquals(o1, null));
assertFalse(EqualsBuilder.reflectionEquals(null, o2));
assertTrue(EqualsBuilder.reflectionEquals(null, null));
assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));
assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), false));
assertFalse(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 0, 0, 4), new TestTTLeafObject(1, 2, 3, 4), true));
assertFalse(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 0), true));
assertFalse(EqualsBuilder.reflectionEquals(new TestTTLeafObject(0, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));
assertTrue(EqualsBuilder.reflectionEquals(ttlo, ttlo, testTransients));
assertTrue(EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 10), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 11), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(new TestSubObject(1, 11), new TestSubObject(1, 10), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestSubObject(1, 10), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(0, 10), testTransients));
assertTrue(EqualsBuilder.reflectionEquals(to1, teso, testTransients));
assertTrue(EqualsBuilder.reflectionEquals(teso, to1, testTransients));
assertTrue(EqualsBuilder.reflectionEquals(to1, ttso, false)); // Force testTransients = false for this assert
assertTrue(EqualsBuilder.reflectionEquals(ttso, to1, false)); // Force testTransients = false for this assert
assertTrue(EqualsBuilder.reflectionEquals(to1, tttso, false)); // Force testTransients = false for this assert
assertTrue(EqualsBuilder.reflectionEquals(tttso, to1, false)); // Force testTransients = false for this assert
assertTrue(EqualsBuilder.reflectionEquals(ttso, tttso, false)); // Force testTransients = false for this assert
assertTrue(EqualsBuilder.reflectionEquals(tttso, ttso, false)); // Force testTransients = false for this assert
assertFalse(EqualsBuilder.reflectionEquals(new TestObject(0), new TestEmptySubObject(1), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(new TestEmptySubObject(1), new TestObject(0), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(new TestObject(0), new TestTSubObject(1, 1), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(new TestTSubObject(1, 1), new TestObject(0), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(new TestObject(1), new TestSubObject(0, 10), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestObject(1), testTransients));
assertFalse(EqualsBuilder.reflectionEquals(to1, ttlo));
assertFalse(EqualsBuilder.reflectionEquals(tso1, this));
assertTrue(EqualsBuilder.reflectionEquals(to, to, testTransients));
assertTrue(EqualsBuilder.reflectionEquals(to2, to2, testTransients));
assertTrue(EqualsBuilder.reflectionEquals(to, toBis, testTransients) && EqualsBuilder.reflectionEquals(toBis, to, testTransients));
assertTrue(EqualsBuilder.reflectionEquals(to, toBis, testTransients)&& EqualsBuilder.reflectionEquals(toBis, toTer, testTransients)&& EqualsBuilder.reflectionEquals(to, toTer, testTransients));
assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));
assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));
assertFalse(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));
assertFalse(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));
assertFalse(EqualsBuilder.reflectionEquals(to, null, testTransients));
assertFalse(EqualsBuilder.reflectionEquals(to2, null, testTransients));
assertFalse(EqualsBuilder.reflectionEquals(null, to, testTransients));
assertFalse(EqualsBuilder.reflectionEquals(null, to2, testTransients));
assertTrue(EqualsBuilder.reflectionEquals(null, null, testTransients));
assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals());
assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals());
assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().append(o1, o2).isEquals());
assertTrue(new EqualsBuilder().append(o1, o2).isEquals());
assertFalse(new EqualsBuilder().append(o1, this).isEquals());
assertFalse(new EqualsBuilder().append(o1, null).isEquals());
assertFalse(new EqualsBuilder().append(null, o2).isEquals());
assertTrue(new EqualsBuilder().append((Object) null, null).isEquals());
assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o1).build());
assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, o2).build());
assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o2).build());
assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, this).build());
assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, null).build());
assertEquals(Boolean.FALSE, new EqualsBuilder().append(null, o2).build());
assertEquals(Boolean.TRUE, new EqualsBuilder().append((Object) null, null).build());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a, o1_b).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_b, o1_a).isEquals());
assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_b, o2).isEquals());
assertTrue(new EqualsBuilder().setBypassReflectionClasses(bypassReflectionClasses).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a, o1_b).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_b, o1_a).isEquals());
assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_b, o2).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a, o1_a).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a, o1_b).isEquals());
assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_a, o2).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(oNull, oNull).isEquals());
assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_a, oNull).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a, o1_a).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a, o1_b).isEquals());
assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_a, o2).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a, o1_a).isEquals());
assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a, o1_b).isEquals());
assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_a, o2).isEquals());
assertTrue(EqualsBuilder.reflectionEquals(o1_a, o1_b, false, null, true));
assertFalse(EqualsBuilder.reflectionEquals(o1_a, o2, false, null, true));
assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().append(o1, o2).isEquals());
assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().append(o1, o2).isEquals());
assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().append(o1, o2).isEquals());
assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().append(o1, o2).isEquals());
assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().append(o1, o2).isEquals());
assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().append(o1, o2).isEquals());
assertFalse(new EqualsBuilder().append(o1, Double.NaN).isEquals());
assertTrue(new EqualsBuilder().append(Double.NaN, Double.NaN).isEquals());
assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).isEquals());
assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().append(o1, o2).isEquals());
assertFalse(new EqualsBuilder().append(o1, Float.NaN).isEquals());
assertTrue(new EqualsBuilder().append(Float.NaN, Float.NaN).isEquals());
assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals());
assertTrue(equalsBuilder.isEquals());
assertTrue(equalsBuilder.isEquals());
assertFalse(equalsBuilder.isEquals());
assertTrue(equalsBuilder.isEquals());
assertFalse(equalsBuilder.isEquals());
assertTrue(equalsBuilder.isEquals());
assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
assertFalse(new EqualsBuilder().append(o1, o2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj2, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array3).isEquals());
assertFalse(new EqualsBuilder().append(array3, array1).isEquals());
assertFalse(new EqualsBuilder().append(array2, array3).isEquals());
assertFalse(new EqualsBuilder().append(array3, array2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertTrue(new EqualsBuilder().append(array1, array1).isEquals());
assertTrue(new EqualsBuilder().append(array1, array2).isEquals());
assertFalse(new EqualsBuilder().append(array1, array2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());
assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());
assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());
assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());
assertArrayEquals(x, x);
assertArrayEquals(y, y);
assertArrayEquals(x, y);
assertArrayEquals(y, x);
assertEquals(x[0], x[0]);
assertEquals(y[0], y[0]);
assertEquals(x[0], y[0]);
assertEquals(y[0], x[0]);
assertTrue(new EqualsBuilder().append(x, x).isEquals());
assertTrue(new EqualsBuilder().append(y, y).isEquals());
assertTrue(new EqualsBuilder().append(x, y).isEquals());
assertTrue(new EqualsBuilder().append(y, x).isEquals());
assertFalse(EqualsBuilder.reflectionEquals(x1, x2));
assertFalse(EqualsBuilder.reflectionEquals(x1, x2, (String[]) null));
assertFalse(EqualsBuilder.reflectionEquals(x1, x2));
assertFalse(EqualsBuilder.reflectionEquals(x1, x2, "xxx"));
assertFalse(EqualsBuilder.reflectionEquals(x1, x2, "two"));
assertFalse(EqualsBuilder.reflectionEquals(x1, x2, "three"));
assertTrue(EqualsBuilder.reflectionEquals(x1, x2, "two", "three"));
assertTrue(EqualsBuilder.reflectionEquals(x1, x2, "one", "two", "three"));
assertTrue(EqualsBuilder.reflectionEquals(x1, x2, "one", "two", "three", "xxx"));
assertTrue(EqualsBuilder.reflectionEquals(x1, x2, Arrays.asList("one", "two", "three")));
assertTrue(EqualsBuilder.reflectionEquals(x1, x2,  Arrays.asList("one", "two", "three", "xxx")));
assertEquals(x1, x2);
assertNull(EqualsBuilder.getRegistry());
assertNotEquals(x1, x3);
assertNull(EqualsBuilder.getRegistry());
assertNotEquals(x2, x3);
assertNull(EqualsBuilder.getRegistry());
assertFalse(EqualsBuilder.reflectionEquals(o1, o2));
assertTrue(EqualsBuilder.reflectionEquals(o1, o1));
assertTrue(EqualsBuilder.reflectionEquals(o1, o3));
assertFalse(EqualsBuilder.reflectionEquals(d1, d2));
assertTrue(EqualsBuilder.reflectionEquals(d1, d1));
assertTrue(EqualsBuilder.reflectionEquals(d1, d3));
assertFalse(EqualsBuilder.reflectionEquals(one, two));
assertTrue(EqualsBuilder.reflectionEquals(one, two));
assertTrue(EqualsBuilder.reflectionEquals(null, null));
assertTrue(new EqualsBuilder().reflectionAppend(o1, o1).build());
assertFalse(new EqualsBuilder().reflectionAppend(o1, o2).build());
assertTrue(new EqualsBuilder().reflectionAppend(o1, o2).build());
assertFalse(new EqualsBuilder().reflectionAppend(o1, this).build());
assertFalse(new EqualsBuilder().reflectionAppend(o1, null).build());
assertFalse(new EqualsBuilder().reflectionAppend(null, o2).build());
assertTrue(EqualsBuilder.isRegistered(firstObject, secondObject));
assertTrue(EqualsBuilder.isRegistered(secondObject, firstObject)); // LANG-1349
assertEquals(baseStr + "[" + System.lineSeparator() + "]", new ToStringBuilder(base).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + System.lineSeparator() + "]").toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]").toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=hello" + System.lineSeparator() + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + System.lineSeparator() + "]").append("a", "hello").toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "  a=hello" + System.lineSeparator() + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]").append("a", "hello").toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=hello" + System.lineSeparator() + "]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]", new ToStringBuilder(base).append((Object) null).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  3" + System.lineSeparator() + "]", new ToStringBuilder(base).append(i3).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<null>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=3" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", i3).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=3" + System.lineSeparator() + "  b=4" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<Integer>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", i3, false).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<size=0>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Collections.emptyList(), false).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=[]" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Collections.emptyList(), true).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<size=1>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), false).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=[3]" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), true).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<size=2>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), false).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=[3, 4]" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), true).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<size=0>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Collections.emptyMap(), false).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a={}" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Collections.emptyMap(), true).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<size=1>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), false).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a={k=v}" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), true).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<size=0>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", (Object) new Integer[0], false).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a={}" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", (Object) new Integer[0], true).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<size=1>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, false).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a={3}" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, true).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=<size=2>" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, false).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a={3,4}" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, true).toString());
assertEquals(pBaseStr + "[" + System.lineSeparator() + "  name=Jane Doe" + System.lineSeparator() + "  age=25" + System.lineSeparator() + "  smoker=true" + System.lineSeparator() + "]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  3" + System.lineSeparator() + "]", new ToStringBuilder(base).append(3L).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=3" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  a=3" + System.lineSeparator() + "  b=4" + System.lineSeparator() + "]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  {<null>,5,{3,6}}" + System.lineSeparator() + "]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  {<null>,5,{3,6}}" + System.lineSeparator() + "]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  {1,2,-3,4}" + System.lineSeparator() + "]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  {1,2,-3,4}" + System.lineSeparator() + "]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  {{1,2},<null>,{5}}" + System.lineSeparator() + "]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  {{1,2},<null>,{5}}" + System.lineSeparator() + "]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[" + System.lineSeparator() + "  <null>" + System.lineSeparator() + "]", new ToStringBuilder(base).append((Object) array).toString());
assertNotNull(s);
UncheckedFuture.on(futures).forEach(f -> assertEquals(REPEAT, f.get().intValue()));
assertThat(toString, not(containsString(EXCLUDED_FIELD_NAME)));
assertThat(toString, not(containsString(EXCLUDED_FIELD_VALUE)));
assertThat(toString, containsString(INCLUDED_FIELD_NAME));
assertThat(toString, containsString(INCLUDED_FIELD_VALUE));
assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());
assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());
assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());
assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", emptyList, false).toString());
assertEquals(baseStr + "[a=java.util.ArrayList@" + Integer.toHexString(System.identityHashCode(emptyList)) + "{}]",new ToStringBuilder(base).append("a", emptyList, true).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<>(), false).toString());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<>(), true).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString());
assertEquals(pBaseStr + "[age=33,job=" + pJobStr + "[title=Manager],name=John Doe,smoker=false]",new ReflectionToStringBuilder(p, new RecursiveToStringStyle()).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertTrue(toString.contains(NOT_SECRET_FIELD));
assertTrue(toString.contains(NOT_SECRET_VALUE));
assertEquals(ArrayUtils.INDEX_NOT_FOUND, toString.indexOf(SECRET_VALUE));
assertTrue(toString.indexOf(SECRET_VALUE) > 0);
assertEquals(0, list.getNumberOfDiffs());
assertEquals(1, list.getNumberOfDiffs());
assertEquals(1, list.getNumberOfDiffs());
assertEquals(0, list.getNumberOfDiffs());
assertEquals(0, list.getNumberOfDiffs());
assertEquals(1, list.getNumberOfDiffs());
assertEquals("[stringField=string,summaryString=<String>]",new ReflectionToStringBuilder(this, ToStringStyle.NO_CLASS_NAME_STYLE).build());
assertThrows(NullPointerException.class,() -> new ReflectionToStringBuilder(null, ToStringStyle.DEFAULT_STYLE, new StringBuffer()));
assertEquals(17 * 37 + 0, new HashCodeBuilder(17, 37).append(true).toHashCode());
assertEquals(17 * 37 + 1, new HashCodeBuilder(17, 37).append(false).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((boolean[]) null).toHashCode());
assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte) 0).toHashCode());
assertEquals(17 * 37 + 123, new HashCodeBuilder(17, 37).append((byte) 123).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char) 0).toHashCode());
assertEquals(17 * 37 + 1234, new HashCodeBuilder(17, 37).append((char) 1234).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char[]) null).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertThrows(IllegalArgumentException.class, () -> new HashCodeBuilder(2, 3));
assertThrows(IllegalArgumentException.class, () -> new HashCodeBuilder(-2, -2));
assertThrows(IllegalArgumentException.class, () -> new HashCodeBuilder(3, 2));
assertThrows(IllegalArgumentException.class, () -> new HashCodeBuilder(0, 0));
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(0d).toHashCode());
assertEquals(17 * 37 + (int) (l ^ l >> 32), new HashCodeBuilder(17, 37).append(d).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double[]) null).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals(hcb1, hcb1);
assertEquals(hcb1, hcb2);
assertEquals(hcb2, hcb1);
assertNotEquals(hcb1, hcb3);
assertNotEquals(hcb2, hcb3);
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(0f).toHashCode());
assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(0).toHashCode());
assertEquals(17 * 37 + 123456, new HashCodeBuilder(17, 37).append(123456).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(0L).toHashCode());
assertEquals(17 * 37 + (int) (123456789L ^ 123456789L >> 32), new HashCodeBuilder(17, 37).append(123456789L).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long[]) null).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).build().intValue());
assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).build().intValue());
assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0)));
assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456)));
assertThrows(IllegalArgumentException.class, () -> HashCodeBuilder.reflectionHashCode(0, 0, new TestObject(0), true));
assertThrows(IllegalArgumentException.class, () -> HashCodeBuilder.reflectionHashCode(2, 2, new TestObject(0), true));
assertThrows(NullPointerException.class, () -> HashCodeBuilder.reflectionHashCode(13, 19, null, true));
assertEquals(((17 * 37 + 1) * 37 + 3) * 37 + 2, HashCodeBuilder.reflectionHashCode(x));
assertEquals(((17 * 37 + 1) * 37 + 3) * 37 + 2, HashCodeBuilder.reflectionHashCode(x, (String[]) null));
assertEquals(((17 * 37 + 1) * 37 + 3) * 37 + 2, HashCodeBuilder.reflectionHashCode(x));
assertEquals(((17 * 37 + 1) * 37 + 3) * 37 + 2, HashCodeBuilder.reflectionHashCode(x, "xxx"));
assertEquals((17 * 37 + 1) * 37 + 3, HashCodeBuilder.reflectionHashCode(x, "two"));
assertEquals((17 * 37 + 1) * 37 + 2, HashCodeBuilder.reflectionHashCode(x, "three"));
assertEquals(17 * 37 + 1, HashCodeBuilder.reflectionHashCode(x, "two", "three"));
assertEquals(17, HashCodeBuilder.reflectionHashCode(x, "one", "two", "three"));
assertEquals(17, HashCodeBuilder.reflectionHashCode(x, "one", "two", "three", "xxx"));
assertEquals(17 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0)));
assertEquals(17 * 37 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0), true));
assertEquals((17 * 37 + 7890) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890,0)));
assertEquals(((17 * 37 + 7890) * 37 + 0) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890, 0), true));
assertThrows(IllegalArgumentException.class, () -> HashCodeBuilder.reflectionHashCode(0, 0, new TestSubObject(0, 0, 0), true));
assertThrows(IllegalArgumentException.class, () -> HashCodeBuilder.reflectionHashCode(2, 2, new TestSubObject(0, 0, 0), true));
assertNull(HashCodeBuilder.getRegistry());
assertNull(HashCodeBuilder.getRegistry());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short) 0).toHashCode());
assertEquals(17 * 37 + 12345, new HashCodeBuilder(17, 37).append((short) 12345).toHashCode());
assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());
assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
assertEquals(17 * 37 + 19 * 41 + obj.hashCode(), new HashCodeBuilder(17, 37).appendSuper(new HashCodeBuilder(19, 41).append(obj).toHashCode()).toHashCode());
assertEquals(hcb.toHashCode(), hcb.hashCode(),"hashCode() is no longer returning the same value as toHashCode() - see LANG-520");
assertEquals(17 * 37 + 2, HashCodeBuilder.reflectionHashCode(one));
assertEquals(17, HashCodeBuilder.reflectionHashCode(two));
assertEquals("<null>", new ToStringBuilder(null).toString());
assertEquals("<null>", new ToStringBuilder(null, null).toString());
assertEquals("<null>", new ToStringBuilder(null, null, null).toString());
assertSame(ToStringStyle.NO_FIELD_NAMES_STYLE, ToStringBuilder.getDefaultStyle());
assertThrows(NullPointerException.class, () -> ToStringBuilder.setDefaultStyle(null));
assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());
assertEquals(baseStr + "[value=5]", ToStringBuilder.reflectionToString(base));
assertEquals(this.toBaseString(c) + "[value=A]", ToStringBuilder.reflectionToString(c));
assertEquals(this.toBaseString(b) + "[value=true]", ToStringBuilder.reflectionToString(b));
assertEquals(this.toBaseString(b) + "[value=false]", ToStringBuilder.reflectionToString(b));
// assertReflectionArray("<null>", array);
public void assertReflectionArray(final String expected, final Object actual) {if (actual == null) {// Until ToStringBuilder supports null objects.return;
assertEquals(expected, ToStringBuilder.reflectionToString(actual));
assertEquals(expected, ToStringBuilder.reflectionToString(actual, null));
assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, true));
assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, false));
assertEquals(baseString + "[{<null>,5,{3,6}}]", ToStringBuilder.reflectionToString(array));
assertReflectionArray("<null>", array);
assertEquals(baseString + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
assertReflectionArray("<null>", array);
assertEquals(baseString + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
assertReflectionArray("<null>", array);
assertEquals(baseString + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
assertReflectionArray("<null>", array);
assertEquals(baseString + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
assertReflectionArray("<null>", array);
assertEquals(baseString + "[{A,2,_,D}]", ToStringBuilder.reflectionToString(array));
assertReflectionArray("<null>", array);
assertEquals(baseString + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));
assertReflectionArray("<null>", array);
assertEquals(baseString + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));
assertReflectionArray("<null>", array);
assertEquals(baseString + "[{true,false,false}]", ToStringBuilder.reflectionToString(array));
assertReflectionArray("<null>", array);
assertEquals(baseString + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));
assertReflectionArray("<null>", array);
assertEquals(baseString + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
assertReflectionArray("<null>", array);
assertEquals(baseString + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
assertReflectionArray("<null>", array);
assertEquals(baseString + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
assertReflectionArray("<null>", array);
assertEquals(baseString + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
assertReflectionArray("<null>", array);
assertEquals(baseString + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array));
assertReflectionArray("<null>", array);
assertEquals(baseString + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));
assertReflectionArray("<null>", array);
assertEquals(baseString + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));
assertEquals(baseString + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));
assertReflectionArray("<null>", array);
assertEquals(expectedWithTransients, toStringWithTransients);
assertEquals(expectedWithoutTransients, toStringWithoutTransients);
assertEquals(baseString + "[a=a]", ToStringBuilder.reflectionToString(baseA));
assertEquals(baseString + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));
assertEquals(baseString + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));
assertEquals(baseString + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));
assertEquals(baseString + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));
assertEquals(baseString + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));
assertEquals(baseString + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));
assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));
assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));
assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));
assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));
assertEquals(baseString + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));
assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));
assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));
assertEquals(baseString + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));
assertEquals(baseString + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));
assertEquals(toBaseString(outer) + "[inner=" + toBaseString(outer.inner) + "[]]", outer.toString());
assertEquals(this.toBaseString(objects) + "[{" + this.toBaseString(objects) + "}]",ToStringBuilder.reflectionToString(objects));
assertEquals(this.toBaseString(objects) + "[{{" + this.toBaseString(objects) + "}}]",ToStringBuilder.reflectionToString(objects));
assertEquals(this.toBaseString(objectsLevel2) + "[{{" + this.toBaseString(objectsLevel2) + "}}]",ToStringBuilder.reflectionToString(objectsLevel2));
assertEquals(basicToString+ "[{{"+ basicToString+ ","+ basicToString+ "},{"+ basicToString+ ","+ basicToString+ "}}]",ToStringBuilder.reflectionToString(objects));
assertEquals(this.toBaseString(simple) + "[o=" + this.toBaseString(simple) + "]", simple.toString());
assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + "]", test.toString());
assertEquals(this.toBaseString(test) + "[otherType=" + test.getOtherType().toString() + ",typeIsSelf=" + this.toBaseString(test)  + "]", test.toString());
assertEquals(this.toBaseString(a) + "[b=" + this.toBaseString(b) + "[a=" + this.toBaseString(a) + "]]",a.toString());
assertEquals(this.toBaseString(objects)+ "[{"+ this.toBaseString(simple)+ "[o="+ this.toBaseString(objects)+ "]"+ "}]",ToStringBuilder.reflectionToString(objects));
assertEquals(this.toBaseString(simple)+ "[o={"+ this.toBaseString(simple)+ "}]",ToStringBuilder.reflectionToString(simple));
assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());
assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals(baseStr + "[]", new ToStringBuilder(base).appendToString("Integer@8888[]").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendToString("Integer@8888[<null>]").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendToString("Integer@8888[]").append("a", "hello").toString());
assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendToString("Integer@8888[<null>]").append("a", "hello").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendToString(null).append("a", "hello").toString());
assertEquals(baseStr + "[" + toBaseString(objectToAppend1) + "]",new ToStringBuilder(base).appendAsObjectToString(objectToAppend1).toString());
assertEquals(baseStr + "[" + toBaseString(objectToAppend2) + "]",new ToStringBuilder(base).appendAsObjectToString(objectToAppend2).toString());
assertEquals(baseStr + "[" + toBaseString(objectToAppend3) + "]",new ToStringBuilder(base).appendAsObjectToString(objectToAppend3).toString());
assertEquals(baseStr + "[flags={true,false,false}]",new ToStringBuilder(base).append("flags", array).toString());
assertEquals(baseStr + "[flags=<null>]",new ToStringBuilder(base).append("flags", (boolean[]) null).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null).toString());
assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(null, array).toString());
assertEquals(baseStr + "[flags={true,false,false}]",new ToStringBuilder(base).append("flags", array, true).toString());
assertEquals(baseStr + "[length=<size=3>]",new ToStringBuilder(base).append("length", array, false).toString());
assertEquals(baseStr + "[flags=<null>]",new ToStringBuilder(base).append("flags", (boolean[]) null, true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());
assertEquals(baseStr + "[<size=3>]", new ToStringBuilder(base).append(null, array, false).toString());
assertEquals(baseStr + "[chars={A,2,_,D}]", new ToStringBuilder(base).append("chars", array).toString());
assertEquals(baseStr + "[letters={A,2,_,D}]", new ToStringBuilder(base).append("letters", array).toString());
assertEquals(baseStr + "[flags=<null>]",new ToStringBuilder(base).append("flags", (boolean[]) null).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null).toString());
assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(null, array).toString());
assertEquals(baseStr + "[chars={A,2,_,D}]", new ToStringBuilder(base).append("chars", array, true).toString());
assertEquals(baseStr + "[letters=<size=4>]",new ToStringBuilder(base).append("letters", array, false).toString());
assertEquals(baseStr + "[flags=<null>]",new ToStringBuilder(base).append("flags", (boolean[]) null, true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());
assertEquals(baseStr + "[<size=4>]", new ToStringBuilder(base).append(null, array, false).toString());
assertEquals(baseStr + "[values={1.0,2.9876,-3.00001,4.3}]",new ToStringBuilder(base).append("values", array).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null).toString());
assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(null, array).toString());
assertEquals(baseStr + "[values={1.0,2.9876,-3.00001,4.3}]",new ToStringBuilder(base).append("values", array, true).toString());
assertEquals(baseStr + "[length=<size=4>]",new ToStringBuilder(base).append("length", array, false).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null, true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());
assertEquals(baseStr + "[<size=4>]", new ToStringBuilder(base).append(null, array, false).toString());
assertEquals(baseStr + "[values={<null>,5,{3,6}}]",new ToStringBuilder(base).append("values", array).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(null, array).toString());
assertEquals(baseStr + "[values={<null>,5,{3,6}}]",new ToStringBuilder(base).append("values", array, true).toString());
assertEquals(baseStr + "[length=<size=3>]",new ToStringBuilder(base).append("length", array, false).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null, true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());
assertEquals(baseStr + "[<size=3>]", new ToStringBuilder(base).append(null, array, false).toString());
assertEquals(baseStr + "[values={1,2,-3,4}]", new ToStringBuilder(base).append("values", array).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(null, array).toString());
assertEquals(baseStr + "[values={1,2,-3,4}]",new ToStringBuilder(base).append("values", array, true).toString());
assertEquals(baseStr + "[length=<size=4>]",new ToStringBuilder(base).append("length", array, false).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null, true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());
assertEquals(baseStr + "[<size=4>]", new ToStringBuilder(base).append(null, array, false).toString());
assertEquals(baseStr + "[values={1,2,-3,4}]", new ToStringBuilder(base).append("values", array).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(null, array).toString());
assertEquals(baseStr + "[values={1,2,-3,4}]",new ToStringBuilder(base).append("values", array, true).toString());
assertEquals(baseStr + "[length=<size=4>]",new ToStringBuilder(base).append("length", array, false).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null, true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());
assertEquals(baseStr + "[<size=4>]", new ToStringBuilder(base).append(null, array, false).toString());
assertEquals(baseStr + "[values={1,2,-3,4}]", new ToStringBuilder(base).append("values", array).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(null, array).toString());
assertEquals(baseStr + "[values={1,2,-3,4}]",new ToStringBuilder(base).append("values", array, true).toString());
assertEquals(baseStr + "[length=<size=4>]",new ToStringBuilder(base).append("length", array, false).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null, true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());
assertEquals(baseStr + "[<size=4>]", new ToStringBuilder(base).append(null, array, false).toString());
assertEquals(baseStr + "[values={1,2,-3,4}]", new ToStringBuilder(base).append("values", array).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(null, array).toString());
assertEquals(baseStr + "[values={1,2,-3,4}]",new ToStringBuilder(base).append("values", array, true).toString());
assertEquals(baseStr + "[length=<size=4>]",new ToStringBuilder(base).append("length", array, false).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null, true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());
assertEquals(baseStr + "[<size=4>]", new ToStringBuilder(base).append(null, array, false).toString());
assertEquals(baseStr + "[values={1.0,2.9876,-3.00001,4.3}]",new ToStringBuilder(base).append("values", array).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null).toString());
assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(null, array).toString());
assertEquals(baseStr + "[values={1.0,2.9876,-3.00001,4.3}]",new ToStringBuilder(base).append("values", array, true).toString());
assertEquals(baseStr + "[length=<size=4>]",new ToStringBuilder(base).append("length", array, false).toString());
assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values", (boolean[]) null, true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());
assertEquals(baseStr + "[<size=4>]", new ToStringBuilder(base).append(null, array, false).toString());
assertEquals(ToStringStyle.DEFAULT_STYLE, stringBuilder1.getStyle());
assertNotNull(stringBuilder1.getStringBuffer());
assertNotNull(stringBuilder1.toString());
assertEquals(ToStringStyle.DEFAULT_STYLE, stringBuilder2.getStyle());
assertNotNull(stringBuilder2.getStringBuffer());
assertNotNull(stringBuilder2.toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());
assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<>(), false).toString());
assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<>(), true).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<>(), false).toString());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<>(), true).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).build());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).build());
assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).build());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).build());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).build());
assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).build());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<>(), false).build());
assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<>(), true).build());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<>(), false).build());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<>(), true).build());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).build());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).build());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3).append("b", 4).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((short) 3).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (short) 3).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (short) 3).append("b", (short) 4).toString());
assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString());
assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString());
assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString());
assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append(3.2).toString());
assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", 3.2).toString());
assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", 3.2).append("b", 4.3).toString());
assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString());
assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString());
assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString());
assertEquals(baseStr + "[true]", new ToStringBuilder(base).append(true).toString());
assertEquals(baseStr + "[a=true]", new ToStringBuilder(base).append("a", true).toString());
assertEquals(baseStr + "[a=true,b=false]", new ToStringBuilder(base).append("a", true).append("b", false).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(expected, a.toString());
assertEquals(this.toBaseString(instance1) + "[staticInt=12345,staticString=staticString]",ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[staticInt=12345,staticString=staticString]",ReflectionToStringBuilder.toString(instance1, null, true, true, SimpleReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[staticInt=12345,staticString=staticString]",this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[staticInt=12345,staticString=staticString]",this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString]",ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString,staticTransientInt=54321,staticTransientString=staticTransientString,transientInt=98765,transientString=transientString]",ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString]",this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString]",this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[staticInt2=67890,staticString2=staticString2]",ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[staticInt2=67890,staticString2=staticString2,staticInt=12345,staticString=staticString]",ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[staticInt2=67890,staticString2=staticString2,staticInt=12345,staticString=staticString]",this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));
assertEquals(this.toBaseString(instance1) + "[staticInt2=67890,staticString2=staticString2,staticInt=12345,staticString=staticString]",this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));
assertThrows(IllegalArgumentException.class, () -> test.setUpToClass(String.class));
assertThrows(NullPointerException.class, () -> ReflectionToStringBuilder.toString(null));
assertEquals(-1, testBuilder.toString().indexOf("testInt=31337"));
assertEqualsAndHashCodeContract(i1, i2, testTransients);
assertEqualsAndHashCodeContract(new TestFixture(2, 'c', "Test", (short) 2), new TestFixture(2, 'c', "Test", (short) 2), testTransients);
assertEqualsAndHashCodeContract(new AllTransientFixture(2, 'c', "Test", (short) 2),new AllTransientFixture(2, 'c', "Test", (short) 2),testTransients);
assertEqualsAndHashCodeContract(new SubTestFixture(2, 'c', "Test", (short) 2, "Same"),new SubTestFixture(2, 'c', "Test", (short) 2, "Same"),testTransients);
assertEqualsAndHashCodeContract(new SubAllTransientFixture(2, 'c', "Test", (short) 2, "Same"),new SubAllTransientFixture(2, 'c', "Test", (short) 2, "Same"),testTransients);
* Asserts that if {@code lhs} equals {@code rhs}* then their hash codes MUST be identical.** @param lhs The Left-Hand-Side of the equals test* @param rhs The Right-Hand-Side of the equals test* @param testTransients whether to test transient fields*/private void assertEqualsAndHashCodeContract(final Object lhs, final Object rhs, final boolean testTransients) {if (EqualsBuilder.reflectionEquals(lhs, rhs, testTransients)) {// test a couple of times for consistency.assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));
assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));
assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));
assertThrows(UnsupportedOperationException.class, () -> booleanDiff.setValue(Boolean.FALSE));
assertEquals(FIELD_NAME, booleanDiff.getFieldName());
assertEquals(Boolean.class, booleanDiff.getType());
assertEquals(String.format("[%s: %s, %s]", FIELD_NAME, booleanDiff.getLeft(),booleanDiff.getRight()), booleanDiff.toString());
assertEquals(0, CompareToBuilder.reflectionCompare(o1, o1));
assertEquals(0, CompareToBuilder.reflectionCompare(o1, o2));
assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0);
assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0);
assertThrows(NullPointerException.class, () -> CompareToBuilder.reflectionCompare(o1, null));
assertThrows(ClassCastException.class, () -> CompareToBuilder.reflectionCompare(o1, o2));
assertXYZCompareOrder(x, y, z, true, excludeFields);
assertXYZCompareOrder(x, y, z, true, excludeFields);
assertXYZCompareOrder(x, y, z, true, null);
assertXYZCompareOrder(x, y, z, true, null);
private void assertXYZCompareOrder(final Object x, final Object y, final Object z, final boolean testTransients, final String[] excludeFields) {assertEquals(0, CompareToBuilder.reflectionCompare(x, x, testTransients, null, excludeFields));
assertEquals(0, CompareToBuilder.reflectionCompare(y, y, testTransients, null, excludeFields));
assertEquals(0, CompareToBuilder.reflectionCompare(z, z, testTransients, null, excludeFields));
assertTrue(0 > CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields));
assertTrue(0 > CompareToBuilder.reflectionCompare(x, z, testTransients, null, excludeFields));
assertTrue(0 > CompareToBuilder.reflectionCompare(y, z, testTransients, null, excludeFields));
assertTrue(0 < CompareToBuilder.reflectionCompare(y, x, testTransients, null, excludeFields));
assertTrue(0 < CompareToBuilder.reflectionCompare(z, x, testTransients, null, excludeFields));
assertTrue(0 < CompareToBuilder.reflectionCompare(z, y, testTransients, null, excludeFields));
assertReflectionCompareContract(to1, to1, to1, false, excludeFields);
assertReflectionCompareContract(to1, to2, to3, false, excludeFields);
assertReflectionCompareContract(tso1, tso1, tso1, false, excludeFields);
assertReflectionCompareContract(tso1, tso2, tso3, false, excludeFields);
assertReflectionCompareContract("1", "2", "3", false, excludeFields);
assertTrue(0 != CompareToBuilder.reflectionCompare(tso1, new TestSubObject(1, 0), testTransients));
assertTrue(0 != CompareToBuilder.reflectionCompare(tso1, new TestSubObject(0, 1), testTransients));
assertXYZCompareOrder(to1, to2, to3, true, null);
assertXYZCompareOrder(tso1, tso2, tso3, true, null);
private void assertReflectionCompareContract(final Object x, final Object y, final Object z, final boolean testTransients, final String[] excludeFields) {// signumassertEquals(reflectionCompareSignum(x, y, testTransients, excludeFields), -reflectionCompareSignum(y, x, testTransients, excludeFields));
assertTrue(CompareToBuilder.reflectionCompare(x, z, testTransients, null, excludeFields) > 0);
assertEquals(reflectionCompareSignum(x, z, testTransients, excludeFields), -reflectionCompareSignum(y, z, testTransients, excludeFields));
assertTrue(CompareToBuilder.reflectionCompare(x, y, testTransients) ==0 == EqualsBuilder.reflectionEquals(x, y, testTransients));
assertEquals(0, new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison());
assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0);
assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0);
assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());
assertEquals(0, new CompareToBuilder().append(o1, o2).toComparison());
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0);
assertEquals(0, new CompareToBuilder().append((Object) null, null).toComparison());
assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0);
assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build());
assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build());
assertTrue(new CompareToBuilder().append(o1, o2).build().intValue() < 0);
assertTrue(new CompareToBuilder().append(o2, o1).build().intValue() > 0);
assertTrue(new CompareToBuilder().append(o1, null).build().intValue() > 0);
assertEquals(Integer.valueOf(0), new CompareToBuilder().append((Object) null, null).build());
assertTrue(new CompareToBuilder().append(null, o1).build().intValue() < 0);
assertThrows(ClassCastException.class, () -> new CompareToBuilder().append(o1, o2));
assertEquals(0, new CompareToBuilder().append(o1, o1, String.CASE_INSENSITIVE_ORDER).toComparison());
assertEquals(0, new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison());
assertEquals(0, new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison());
assertEquals(0, new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison());
assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, null, String.CASE_INSENSITIVE_ORDER).toComparison() > 0);
assertEquals(0, new CompareToBuilder().append(null, null, String.CASE_INSENSITIVE_ORDER).toComparison());
assertTrue(new CompareToBuilder().append(null, o1, String.CASE_INSENSITIVE_ORDER).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(o1, o1, null).toComparison());
assertEquals(0, new CompareToBuilder().append(o1, o2, null).toComparison());
assertTrue(new CompareToBuilder().append(o1, o2, null).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1, null).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, null, null).toComparison() > 0);
assertEquals(0, new CompareToBuilder().append(null, null, null).toComparison());
assertTrue(new CompareToBuilder().append(null, o1, null).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Long.MAX_VALUE).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Long.MAX_VALUE, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Long.MIN_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Long.MIN_VALUE, o1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Integer.MAX_VALUE).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Integer.MAX_VALUE, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Integer.MIN_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Integer.MIN_VALUE, o1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Short.MAX_VALUE).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Short.MAX_VALUE, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Short.MIN_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Short.MIN_VALUE, o1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Character.MAX_VALUE).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Character.MAX_VALUE, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Character.MIN_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Character.MIN_VALUE, o1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Byte.MAX_VALUE).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Byte.MAX_VALUE, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Byte.MIN_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Byte.MIN_VALUE, o1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Double.MAX_VALUE).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Double.MAX_VALUE, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Double.MIN_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Double.MIN_VALUE, o1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(Double.NaN, Double.NaN).toComparison());
assertTrue(new CompareToBuilder().append(Double.NaN, Double.MAX_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Double.POSITIVE_INFINITY, Double.MAX_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Double.NEGATIVE_INFINITY, Double.MIN_VALUE).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o1, Double.NaN).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Double.NaN, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0);
assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0);
assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Float.MAX_VALUE).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Float.MAX_VALUE, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o1, Float.MIN_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Float.MIN_VALUE, o1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(Float.NaN, Float.NaN).toComparison());
assertTrue(new CompareToBuilder().append(Float.NaN, Float.MAX_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Float.POSITIVE_INFINITY, Float.MAX_VALUE).toComparison() > 0);
assertTrue(new CompareToBuilder().append(Float.NEGATIVE_INFINITY, Float.MIN_VALUE).toComparison() < 0);
assertTrue(new CompareToBuilder().append(o1, Float.NaN).toComparison() < 0);
assertTrue(new CompareToBuilder().append(Float.NaN, o1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0);
assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0);
assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());
assertEquals(0, new CompareToBuilder().append(o2, o2).toComparison());
assertTrue(new CompareToBuilder().append(o1, o2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(o2, o1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);
assertEquals(0, new CompareToBuilder().append((Object[]) null, null).toComparison());
assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);
assertEquals(0, new CompareToBuilder().append((long[]) null, null).toComparison());
assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);
assertEquals(0, new CompareToBuilder().append((int[]) null, null).toComparison());
assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);
assertEquals(0, new CompareToBuilder().append((short[]) null, null).toComparison());
assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);
assertEquals(0, new CompareToBuilder().append((char[]) null, null).toComparison());
assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);
assertEquals(0, new CompareToBuilder().append((byte[]) null, null).toComparison());
assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);
assertEquals(0, new CompareToBuilder().append((double[]) null, null).toComparison());
assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);
assertEquals(0, new CompareToBuilder().append((float[]) null, null).toComparison());
assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);
assertEquals(0, new CompareToBuilder().append((boolean[]) null, null).toComparison());
assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());
assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());
assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());
assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());
assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);
assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);
assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);
assertEquals(baseStr + "[]", new ToStringBuilder(base).toString());
assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString());
assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString());
assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString());
assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", Collections.emptyList(), false).toString());
assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", Collections.emptyList(), true).toString());
assertEquals(baseStr + "[a=<size=1>]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), false).toString());
assertEquals(baseStr + "[a=[3]]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), true).toString());
assertEquals(baseStr + "[a=<size=2>]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), false).toString());
assertEquals(baseStr + "[a=[3, 4]]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), true).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", Collections.emptyMap(), false).toString());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", Collections.emptyMap(), true).toString());
assertEquals(baseStr + "[a=<size=1>]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), false).toString());
assertEquals(baseStr + "[a={k=v}]", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), true).toString());
assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new Integer[0], false).toString());
assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new Integer[0], true).toString());
assertEquals(baseStr + "[a=<size=1>]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, false).toString());
assertEquals(baseStr + "[a={3}]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3}, true).toString());
assertEquals(baseStr + "[a=<size=2>]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, false).toString());
assertEquals(baseStr + "[a={3,4}]", new ToStringBuilder(base).append("a", (Object) new Integer[] {i3, i4}, true).toString());
assertEquals(pBaseStr + "[name=John Doe,age=33,smoker=false]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());
assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString());
assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString());
assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
assertEquals(expected, toString(tx));
assertEquals(exp, toString(customer));
assertEquals(expected, toString(acc));
assertEquals(exp, toString(wa));
assertEquals(exp, toString(wa));
assertEquals(exp, toString(wa));
assertEquals(exp, toString(wa));
assertEquals(exp, toString(wa));
assertEquals(exp, toString(wa));
assertEquals(exp, toString(wa));
assertEquals(exp, toString(wa));
assertEquals(exp, toString(wa));
assertEquals(exp, toString(wa));
assertEquals(exp, toString(stringArray));
assertEquals("null", new ToStringBuilder(null).toString());
assertEquals("{}", new ToStringBuilder(base).toString());
assertEquals("{}",new ToStringBuilder(base).appendSuper("Integer@8888[" + System.lineSeparator() + "]").toString());
assertEquals("{}",new ToStringBuilder(base).appendSuper("Integer@8888[" + System.lineSeparator() + "  null"+ System.lineSeparator() + "]").toString());
assertEquals("{\"a\":\"hello\"}",new ToStringBuilder(base).appendSuper("Integer@8888[" + System.lineSeparator()+ "]").append("a", "hello").toString());
assertEquals("{\"a\":\"hello\"}",new ToStringBuilder(base).appendSuper("Integer@8888[" + System.lineSeparator()+ "  null" + System.lineSeparator()+ "]").append("a", "hello").toString());
assertEquals("{\"a\":\"hello\"}", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals("{\"a\":\"hello\",\"b\":\"world\"}", new ToStringBuilder(base).appendSuper("{\"a\":\"hello\"}").append("b", "world").toString());
assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append('A').toString());
assertEquals("{\"a\":\"A\"}", new ToStringBuilder(base).append("a", 'A').toString());
assertEquals("{\"a\":\"A\",\"b\":\"B\"}", new ToStringBuilder(base).append("a", 'A').append("b", 'B').toString());
assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append(now).toString());
assertEquals("{\"now\":\"" + now.toString() +"\"}", new ToStringBuilder(base).append("now", now).toString());
assertEquals("{\"now\":\"" + now.toString() +"\",\"after\":\"" + afterNow.toString() + "\"}", new ToStringBuilder(base).append("now", now).append("after", afterNow).toString());
assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append((Object) null).toString());
assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append(i3).toString());
assertEquals("{\"a\":null}",new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals("{\"a\":3}", new ToStringBuilder(base).append("a", i3).toString());
assertEquals("{\"a\":3,\"b\":4}",new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append("a", i3, false).toString());
assertThrows(UnsupportedOperationException.class,() -> new ToStringBuilder(base).append("a", new ArrayList<>(), false).toString());
assertEquals("{\"a\":[]}",new ToStringBuilder(base).append("a", new ArrayList<>(),true).toString());
assertThrows(UnsupportedOperationException.class,() -> new ToStringBuilder(base).append("a", new HashMap<>(), false).toString());
assertEquals("{\"a\":{}}",new ToStringBuilder(base).append("a",new HashMap<>(), true).toString());
assertThrows(UnsupportedOperationException.class,() -> new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());
assertEquals("{\"a\":[]}",new ToStringBuilder(base).append("a", (Object) new String[0],true).toString());
assertThrows(UnsupportedOperationException.class,() -> new ToStringBuilder(base).append("a", (Object) new int[]{1, 2, 3}, false).toString());
assertEquals("{\"a\":[1,2,3]}",new ToStringBuilder(base).append("a",(Object) new int[]{1, 2, 3}, true).toString());
assertThrows(UnsupportedOperationException.class,() -> new ToStringBuilder(base).append("a", (Object) new String[]{"v", "x", "y", "z"}, false).toString());
assertEquals("{\"a\":[\"v\",\"x\",\"y\",\"z\"]}",new ToStringBuilder(base).append("a",(Object) new String[]{"v", "x", "y", "z"}, true).toString());
assertEquals(student.toString(), "{\"hobbies\":[\"BOOK\",\"SPORT\",\"MUSIC\"]}");
assertEquals(student.toString(), "{\"hobbies\":[]}");
assertEquals(student.toString(), "{\"hobbies\":null}");
assertEquals(teacher.toString(), "{\"hobbies\":[\"BOOK\",\"SPORT\",\"MUSIC\"]}");
assertEquals(teacher.toString(), "{\"hobbies\":[]}");
assertEquals(teacher.toString(), "{\"hobbies\":null}");
assertEquals(academyClass.toString(), "{\"students\":[{\"hobbies\":[\"BOOK\",\"MUSIC\"]},{\"hobbies\":[]},{\"hobbies\":[\"BOOK\"]}],\"teacher\":{\"hobbies\":[\"BOOK\",\"SPORT\",\"MUSIC\"]}}");
assertEquals("{\"name\":\"Jane Doe\",\"age\":25,\"smoker\":true}",new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());
assertEquals("{\"pid\":\"#1@Jane\",\"person\":{\"name\":\"Jane Doe\",\"age\":25,\"smoker\":true}}",new ToStringBuilder(nestP).append("pid", nestP.pid).append("person", nestP.person).toString());
assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append(3L).toString());
assertEquals("{\"a\":3}", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals("{\"a\":3,\"b\":4}",new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertEquals("{\"objectArray\":[null,5,[3,6]]}", toStringBuilder.append("objectArray", array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object[]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertEquals("{\"longArray\":[1,2,-3,4]}", toStringBuilder.append("longArray", array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertEquals("{\"intArray\":[1,2,-3,4]}", toStringBuilder.append("intArray", array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertEquals("{\"byteArray\":[1,2,-3,4]}", toStringBuilder.append("byteArray", array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertEquals("{\"shortArray\":[1,2,-3,4]}", toStringBuilder.append("shortArray", array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertEquals("{\"doubleArray\":[1.0,2.0,-3.0,4.0]}", toStringBuilder.append("doubleArray", array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertEquals("{\"floatArray\":[1.0,2.0,-3.0,4.0]}", toStringBuilder.append("floatArray", array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertEquals("{\"charArray\":[\"1\",\"2\",\"3\",\"4\"]}", toStringBuilder.append("charArray", array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertEquals("{\"booleanArray\":[true,false]}", toStringBuilder.append("booleanArray", array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[][]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertEquals("{\"name\":\"Jane Doe\",\"age\":25,\"smoker\":true,\"groups\":['admin', 'manager', 'user']}",new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).append("groups", new Object() {@Overridepublic String toString() {return "['admin', 'manager', 'user']";
assertEquals("{\"name\":\"value\"}", new ToStringBuilder(base).append("name", "value").toString());
assertEquals("{\"name\":\"\"}", new ToStringBuilder(base).append("name", "").toString());
assertEquals("{\"name\":\"\\\"\"}", new ToStringBuilder(base).append("name", '"').toString());
assertEquals("{\"name\":\"\\\\\"}", new ToStringBuilder(base).append("name", '\\').toString());
assertEquals("{\"name\":\"Let's \\\"quote\\\" this\"}", new ToStringBuilder(base).append("name", "Let's \"quote\" this").toString());
assertEquals("{\"Let's \\\"quote\\\" this\":\"value\"}", new ToStringBuilder(base).append("Let's \"quote\" this", "value").toString());
assertEquals("{\"map\":{\"k1\":\"v1\",\"k2\":2}}",new ToStringBuilder(base).append("map", map).toString());
assertEquals("{\"object\":{\"pid\":\"dummy-text\",\"map\":{\"k1\":\"value1\",\"k2\":2}}}",new ToStringBuilder(base).append("object", object).toString());
assertEquals("{\"object\":{\"pid\":\"dummy-text\",\"map\":{\"k1\":\"v1\"," +"\"k2\":{\"k2.1\":\"v2.1\",\"k2.2\":\"v2.2\"}}}}",new ToStringBuilder(base).append("object", object).toString());
assertEquals("{\"map\":{\"k1\":\"v1\"}}",new ToStringBuilder(base).append("map", map).toString());
assertEquals("", new ToStringBuilder(base).toString());
assertEquals("", new ToStringBuilder(base).appendSuper("").toString());
assertEquals("<null>", new ToStringBuilder(base).appendSuper("<null>").toString());
assertEquals("hello", new ToStringBuilder(base).appendSuper("").append("a", "hello").toString());
assertEquals("<null>,hello", new ToStringBuilder(base).appendSuper("<null>").append("a", "hello").toString());
assertEquals("hello", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString());
assertEquals("<null>", new ToStringBuilder(base).append((Object) null).toString());
assertEquals("3", new ToStringBuilder(base).append(i3).toString());
assertEquals("<null>", new ToStringBuilder(base).append("a", (Object) null).toString());
assertEquals("3", new ToStringBuilder(base).append("a", i3).toString());
assertEquals("3,4", new ToStringBuilder(base).append("a", i3).append("b", i4).toString());
assertEquals("<Integer>", new ToStringBuilder(base).append("a", i3, false).toString());
assertEquals("<size=0>", new ToStringBuilder(base).append("a", Collections.emptyList(), false).toString());
assertEquals("[]", new ToStringBuilder(base).append("a", Collections.emptyList(), true).toString());
assertEquals("<size=1>", new ToStringBuilder(base).append("a", Collections.singletonList(i3), false).toString());
assertEquals("[3]", new ToStringBuilder(base).append("a", Collections.singletonList(i3), true).toString());
assertEquals("<size=2>", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), false).toString());
assertEquals("[3, 4]", new ToStringBuilder(base).append("a", Arrays.asList(i3, i4), true).toString());
assertEquals("<size=0>", new ToStringBuilder(base).append("a", Collections.emptyMap(), false).toString());
assertEquals("{}", new ToStringBuilder(base).append("a", Collections.emptyMap(), true).toString());
assertEquals("<size=1>", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), false).toString());
assertEquals("{k=v}", new ToStringBuilder(base).append("a", Collections.singletonMap("k", "v"), true).toString());
assertEquals("<size=0>", new ToStringBuilder(base).append("a", (Object) new Integer[0], false).toString());
assertEquals("{}", new ToStringBuilder(base).append("a", (Object) new Integer[0], true).toString());
assertEquals("<size=1>", new ToStringBuilder(base).append("a", (Object) new Integer[]{i3}, false).toString());
assertEquals("{3}", new ToStringBuilder(base).append("a", (Object) new Integer[]{i3}, true).toString());
assertEquals("<size=2>", new ToStringBuilder(base).append("a", (Object) new Integer[]{i3, i4}, false).toString());
assertEquals("{3,4}", new ToStringBuilder(base).append("a", (Object) new Integer[]{i3, i4}, true).toString());
assertEquals("Jane Q. Public,47,false", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString());
assertEquals("3", new ToStringBuilder(base).append(3L).toString());
assertEquals("3", new ToStringBuilder(base).append("a", 3L).toString());
assertEquals("3,4", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString());
assertEquals("{<null>,5,{3,6}}", new ToStringBuilder(base).append(array).toString());
assertEquals("{<null>,5,{3,6}}", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("<null>", new ToStringBuilder(base).append(array).toString());
assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("{1,2,-3,4}", new ToStringBuilder(base).append(array).toString());
assertEquals("{1,2,-3,4}", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("<null>", new ToStringBuilder(base).append(array).toString());
assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString());
assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString());
assertEquals("<null>", new ToStringBuilder(base).append(array).toString());
assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString());
assertSame(e, new UncheckedIllegalAccessException(e).getCause());
assertSame(e, new UncheckedReflectiveOperationException(e).getCause());
assertTrue(trace.contains("ContextedException"));
assertTrue(StringUtils.isEmpty(message));
assertEquals("", ExceptionUtils.getStackTrace(null), "Empty response.");
assertEquals(TEST_MESSAGE, exceptionContext.getMessage());
assertTrue(trace.contains(TEST_MESSAGE));
assertTrue(trace.contains("ContextedException"));
assertTrue(trace.contains(TEST_MESSAGE));
assertTrue(message.contains(TEST_MESSAGE));
assertTrue(trace.contains("ContextedException"));
assertTrue(trace.contains(TEST_MESSAGE));
assertTrue(trace.contains(TEST_MESSAGE_2));
assertTrue(message.contains(TEST_MESSAGE_2));
assertTrue(trace.contains("ContextedException"));
assertTrue(trace.contains(TEST_MESSAGE));
assertTrue(trace.contains(TEST_MESSAGE_2));
assertTrue(message.contains(TEST_MESSAGE_2));
assertNotNull(message);
assertEquals(Exception.class.getName() + ": " + TEST_MESSAGE, exceptionContext.getRawMessage());
assertEquals(TEST_MESSAGE_2, exceptionContext.getRawMessage());
assertNull(exceptionContext.getRawMessage());
assertTrue(trace.contains("ContextedException"));
assertTrue(StringUtils.isEmpty(message));
assertEquals(TEST_MESSAGE, exceptionContext.getMessage());
assertTrue(trace.contains(TEST_MESSAGE));
assertTrue(trace.contains("ContextedException"));
assertTrue(trace.contains(TEST_MESSAGE));
assertTrue(message.contains(TEST_MESSAGE));
assertTrue(trace.contains("ContextedException"));
assertTrue(trace.contains(TEST_MESSAGE));
assertTrue(trace.contains(TEST_MESSAGE_2));
assertTrue(message.contains(TEST_MESSAGE_2));
assertTrue(trace.contains("ContextedException"));
assertTrue(trace.contains(TEST_MESSAGE));
assertTrue(trace.contains(TEST_MESSAGE_2));
assertTrue(message.contains(TEST_MESSAGE_2));
assertNotNull(message);
assertEquals(Exception.class.getName() + ": " + TEST_MESSAGE, exceptionContext.getRawMessage());
assertEquals(TEST_MESSAGE_2, exceptionContext.getRawMessage());
assertNull(exceptionContext.getRawMessage());
assertSame(e, new UncheckedException(e).getCause());
assertTrue(message.contains(TEST_MESSAGE));
assertTrue(message.contains("test1"));
assertTrue(message.contains("test2"));
assertTrue(message.contains("test Date"));
assertTrue(message.contains("test Nbr"));
assertTrue(message.contains("some value"));
assertTrue(message.contains("5"));
assertNull(exceptionContext.getFirstContextValue("test1"));
assertEquals("some value", exceptionContext.getFirstContextValue("test2"));
assertEquals(5, exceptionContext.getContextLabels().size());
assertTrue(exceptionContext.getContextLabels().contains("test1"));
assertTrue(exceptionContext.getContextLabels().contains("test2"));
assertTrue(exceptionContext.getContextLabels().contains("test Date"));
assertTrue(exceptionContext.getContextLabels().contains("test Nbr"));
assertEquals(5, exceptionContext.getContextLabels().size());
assertTrue(exceptionContext.getContextLabels().contains("test2"));
assertFalse(contextMessage.contains(TEST_MESSAGE));
assertTrue(message.contains(TEST_MESSAGE));
assertTrue(message.contains("test Poorly written obj"));
assertTrue(message.contains("Crap"));
assertNull(exceptionContext.getFirstContextValue("crap"));
assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString);
assertEquals(7, exceptionContext.getContextEntries().size());
assertEquals(6, exceptionContext.getContextLabels().size());
assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj"));
assertFalse(exceptionContext.getContextLabels().contains("crap"));
assertEquals(7, exceptionContext.getContextEntries().size());
assertEquals(6, exceptionContext.getContextLabels().size());
assertEquals(6, exceptionContext.getContextEntries().size());
assertEquals(6, exceptionContext.getContextLabels().size());
assertFalse(contextMessage.contains(TEST_MESSAGE));
assertNull(exceptionContext.getFirstContextValue("test1"));
assertEquals("some value", exceptionContext.getFirstContextValue("test2"));
assertNull(exceptionContext.getFirstContextValue("crap"));
assertEquals("another", exceptionContext.getFirstContextValue("test2"));
assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null));
assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value"));
assertEquals("another", exceptionContext.getFirstContextValue("test2"));
assertEquals(5, exceptionContext.getContextEntries().size());
assertEquals(6, exceptionContext.getContextEntries().size());
assertEquals(5, labels.size());
assertTrue(labels.contains("test1"));
assertTrue(labels.contains("test2"));
assertTrue(labels.contains("test Date"));
assertTrue(labels.contains("test Nbr"));
assertEquals(5, exceptionContext.getContextEntries().size());
assertEquals(6, entries.size());
assertEquals("test1", entries.get(0).getKey());
assertEquals("test2", entries.get(1).getKey());
assertEquals("test Date", entries.get(2).getKey());
assertEquals("test Nbr", entries.get(3).getKey());
assertEquals("test Poorly written obj", entries.get(4).getKey());
assertEquals("test2", entries.get(5).getKey());
assertEquals(exceptionContext.getFormattedExceptionMessage(null), clone.getFormattedExceptionMessage(null));
assertEquals("", ExceptionUtils.getMessage(th));
assertEquals("IllegalArgumentException: Base", ExceptionUtils.getMessage(th));
assertEquals("ExceptionUtilsTest.ExceptionWithCause: Wrapper", ExceptionUtils.getMessage(th));
assertEquals("", ExceptionUtils.getRootCauseMessage(th));
assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th));
assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th));
IOException ioe = assertThrows(IOException.class, ExceptionUtilsTest::throwsCheckedException);
assertEquals(1, ExceptionUtils.getThrowableCount(ioe));
ioe = assertThrows(IOException.class, ExceptionUtilsTest::redeclareCheckedException);
assertEquals(1, ExceptionUtils.getThrowableCount(ioe));
assertNotNull(new ExceptionUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(ExceptionUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(ExceptionUtils.class.getModifiers()));
assertEquals(1, throwables.size());
assertSame(jdkNoCause, throwables.get(0));
assertEquals(2, throwables.size());
assertSame(nested, throwables.get(0));
assertSame(withoutCause, throwables.get(1));
assertEquals(0, throwables.size());
assertEquals(3, throwables.size());
assertSame(cyclicCause, throwables.get(0));
assertSame(cyclicCause.getCause(), throwables.get(1));
assertSame(cyclicCause.getCause().getCause(), throwables.get(2));
assertEquals(3, throwables.size());
assertSame(withCause, throwables.get(0));
assertSame(nested, throwables.get(1));
assertSame(withoutCause, throwables.get(2));
assertEquals(1, throwables.size());
assertSame(withoutCause, throwables.get(0));
assertSame(null, ExceptionUtils.getCause(null));
assertSame(null, ExceptionUtils.getCause(withoutCause));
assertSame(withoutCause, ExceptionUtils.getCause(nested));
assertSame(nested, ExceptionUtils.getCause(withCause));
assertSame(null, ExceptionUtils.getCause(jdkNoCause));
assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause));
assertSame(cyclicCause.getCause().getCause(), ExceptionUtils.getCause(cyclicCause.getCause()));
assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause.getCause().getCause()));
assertSame(withoutCause, ExceptionUtils.getCause(notVisibleException));
assertSame(null, ExceptionUtils.getCause(null, null));
assertSame(null, ExceptionUtils.getCause(null, new String[0]));
assertSame(nested, ExceptionUtils.getCause(withCause, null));  // default names
assertSame(null, ExceptionUtils.getCause(withCause, new String[0]));
assertSame(null, ExceptionUtils.getCause(withCause, new String[]{null}));
assertSame(nested, ExceptionUtils.getCause(withCause, new String[]{"getCause"}));
assertSame(null, ExceptionUtils.getCause(withoutCause, null));
assertSame(null, ExceptionUtils.getCause(withoutCause, new String[0]));
assertSame(null, ExceptionUtils.getCause(withoutCause, new String[]{null}));
assertSame(null, ExceptionUtils.getCause(withoutCause, new String[]{"getCause"}));
assertSame(null, ExceptionUtils.getCause(withoutCause, new String[]{"getTargetException"}));
assertSame(null, ExceptionUtils.getRootCause(null));
assertSame(withoutCause, ExceptionUtils.getRootCause(withoutCause));
assertSame(withoutCause, ExceptionUtils.getRootCause(nested));
assertSame(withoutCause, ExceptionUtils.getRootCause(withCause));
assertSame(jdkNoCause, ExceptionUtils.getRootCause(jdkNoCause));
assertSame(cyclicCause.getCause().getCause(), ExceptionUtils.getRootCause(cyclicCause));
assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length);
assertTrue(match);
assertFalse(match);
assertEquals(0, ExceptionUtils.getRootCauseStackTraceList(null).size());
assertTrue(match);
assertFalse(match);
assertArrayEquals(new String[]{"org.apache.commons.lang3.exception.ExceptionUtilsTest$1","\tat org.apache.commons.lang3.exception.ExceptionUtilsTest.testgetStackFramesGappyPath(ExceptionUtilsTest.java:706)","\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)","\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)","\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)"}, actual);
assertEquals(0, actual.length);
assertEquals(0, ExceptionUtils.getThrowableCount(null));
assertEquals(1, ExceptionUtils.getThrowableCount(withoutCause));
assertEquals(2, ExceptionUtils.getThrowableCount(nested));
assertEquals(3, ExceptionUtils.getThrowableCount(withCause));
assertEquals(1, ExceptionUtils.getThrowableCount(jdkNoCause));
assertEquals(3, ExceptionUtils.getThrowableCount(cyclicCause));
assertEquals(1, throwables.size());
assertSame(jdkNoCause, throwables.get(0));
assertEquals(2, throwables.size());
assertSame(nested, throwables.get(0));
assertSame(withoutCause, throwables.get(1));
assertEquals(0, throwables.size());
assertEquals(3, throwables.size());
assertSame(cyclicCause, throwables.get(0));
assertSame(cyclicCause.getCause(), throwables.get(1));
assertSame(cyclicCause.getCause().getCause(), throwables.get(2));
assertEquals(3, throwables.size());
assertSame(withCause, throwables.get(0));
assertSame(nested, throwables.get(1));
assertSame(withoutCause, throwables.get(2));
assertEquals(1, throwables.size());
assertSame(withoutCause, throwables.get(0));
assertEquals(1, throwables.length);
assertSame(jdkNoCause, throwables[0]);
assertEquals(2, throwables.length);
assertSame(nested, throwables[0]);
assertSame(withoutCause, throwables[1]);
assertEquals(0, ExceptionUtils.getThrowables(null).length);
assertEquals(3, throwables.length);
assertSame(cyclicCause, throwables[0]);
assertSame(cyclicCause.getCause(), throwables[1]);
assertSame(cyclicCause.getCause().getCause(), throwables[2]);
assertEquals(3, throwables.length);
assertSame(withCause, throwables[0]);
assertSame(nested, throwables[1]);
assertSame(withoutCause, throwables[2]);
assertEquals(1, throwables.length);
assertSame(withoutCause, throwables[0]);
assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null));
assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class));
assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class));
assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null));
assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class));
assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class));
assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null));
assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class));
assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class));
assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Throwable.class));
assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0));
assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0));
assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0));
assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0));
assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0));
assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0));
assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null));
assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));
assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0));
assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0));
assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1));
assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0));
assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Throwable.class, 0));
assertEquals(-1, ExceptionUtils.indexOfType(null, null));
assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class));
assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));
assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class));
assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class));
assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class));
assertEquals(-1, ExceptionUtils.indexOfType(nested, null));
assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class));
assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class));
assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class));
assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));
assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class));
assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class));
assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class));
assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class));
assertEquals(0, ExceptionUtils.indexOfType(withCause, Throwable.class));
assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0));
assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0));
assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));
assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0));
assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0));
assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0));
assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0));
assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0));
assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0));
assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0));
assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));
assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));
assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0));
assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0));
assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1));
assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));
assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1));
assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9));
assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0));
assertEquals(0, ExceptionUtils.indexOfType(withCause, Throwable.class, 0));
assertEquals(0, out.toString().length());
assertThrows(NullPointerException.class,() -> ExceptionUtils.printRootCauseStackTrace(withCause, (PrintStream) null));
assertTrue(stackTrace.contains(ExceptionUtils.WRAPPED_MARKER));
assertFalse(stackTrace.contains(ExceptionUtils.WRAPPED_MARKER));
assertEquals(0, writer.getBuffer().length());
assertThrows(NullPointerException.class,() -> ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null));
assertTrue(stackTrace.contains(ExceptionUtils.WRAPPED_MARKER));
assertFalse(stackTrace.contains(ExceptionUtils.WRAPPED_MARKER));
assertThrows(NullPointerException.class, () -> ExceptionUtils.removeCommonFrames(null, null));
assertEquals(1, ExceptionUtils.stream(jdkNoCause).count());
assertSame(jdkNoCause, ExceptionUtils.stream(jdkNoCause).toArray()[0]);
assertEquals(2, ExceptionUtils.stream(nested).count());
assertSame(nested, array[0]);
assertSame(withoutCause, array[1]);
assertEquals(0, ExceptionUtils.stream(null).count());
assertEquals(3, throwables.size());
assertSame(cyclicCause, throwables.get(0));
assertSame(cyclicCause.getCause(), throwables.get(1));
assertSame(cyclicCause.getCause().getCause(), throwables.get(2));
assertEquals(3, throwables.size());
assertSame(withCause, throwables.get(0));
assertSame(nested, throwables.get(1));
assertSame(withoutCause, throwables.get(2));
assertEquals(1, throwables.size());
assertSame(withoutCause, throwables.get(0));
final Exception actual = assertThrows(Exception.class, () -> ExceptionUtils.rethrow(expected));
assertSame(expected, actual);
assertNull(ExceptionUtils.throwableOfThrowable(null, null));
assertNull(ExceptionUtils.throwableOfThrowable(null, NestableException.class));
assertNull(ExceptionUtils.throwableOfThrowable(withoutCause, null));
assertNull(ExceptionUtils.throwableOfThrowable(withoutCause, ExceptionWithCause.class));
assertNull(ExceptionUtils.throwableOfThrowable(withoutCause, NestableException.class));
assertEquals(withoutCause, ExceptionUtils.throwableOfThrowable(withoutCause, ExceptionWithoutCause.class));
assertNull(ExceptionUtils.throwableOfThrowable(nested, null));
assertNull(ExceptionUtils.throwableOfThrowable(nested, ExceptionWithCause.class));
assertEquals(nested, ExceptionUtils.throwableOfThrowable(nested, NestableException.class));
assertEquals(nested.getCause(), ExceptionUtils.throwableOfThrowable(nested, ExceptionWithoutCause.class));
assertNull(ExceptionUtils.throwableOfThrowable(withCause, null));
assertEquals(withCause, ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithCause.class));
assertEquals(withCause.getCause(), ExceptionUtils.throwableOfThrowable(withCause, NestableException.class));
assertEquals(withCause.getCause().getCause(), ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithoutCause.class));
assertNull(ExceptionUtils.throwableOfThrowable(withCause, Exception.class));
assertNull(ExceptionUtils.throwableOfThrowable(withCause, Throwable.class));
assertNull(ExceptionUtils.throwableOfThrowable(null, null, 0));
assertNull(ExceptionUtils.throwableOfThrowable(null, NestableException.class, 0));
assertNull(ExceptionUtils.throwableOfThrowable(withoutCause, null));
assertNull(ExceptionUtils.throwableOfThrowable(withoutCause, ExceptionWithCause.class, 0));
assertNull(ExceptionUtils.throwableOfThrowable(withoutCause, NestableException.class, 0));
assertEquals(withoutCause, ExceptionUtils.throwableOfThrowable(withoutCause, ExceptionWithoutCause.class, 0));
assertNull(ExceptionUtils.throwableOfThrowable(nested, null, 0));
assertNull(ExceptionUtils.throwableOfThrowable(nested, ExceptionWithCause.class, 0));
assertEquals(nested, ExceptionUtils.throwableOfThrowable(nested, NestableException.class, 0));
assertEquals(nested.getCause(), ExceptionUtils.throwableOfThrowable(nested, ExceptionWithoutCause.class, 0));
assertNull(ExceptionUtils.throwableOfThrowable(withCause, null));
assertEquals(withCause, ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithCause.class, 0));
assertEquals(withCause.getCause(), ExceptionUtils.throwableOfThrowable(withCause, NestableException.class, 0));
assertEquals(withCause.getCause().getCause(), ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithoutCause.class, 0));
assertEquals(withCause, ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithCause.class, -1));
assertEquals(withCause, ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithCause.class, 0));
assertNull(ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithCause.class, 1));
assertNull(ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithCause.class, 9));
assertNull(ExceptionUtils.throwableOfThrowable(withCause, Exception.class, 0));
assertNull(ExceptionUtils.throwableOfThrowable(withCause, Throwable.class, 0));
assertNull(ExceptionUtils.throwableOfType(null, null));
assertNull(ExceptionUtils.throwableOfType(null, NestableException.class));
assertNull(ExceptionUtils.throwableOfType(withoutCause, null));
assertNull(ExceptionUtils.throwableOfType(withoutCause, ExceptionWithCause.class));
assertNull(ExceptionUtils.throwableOfType(withoutCause, NestableException.class));
assertEquals(withoutCause, ExceptionUtils.throwableOfType(withoutCause, ExceptionWithoutCause.class));
assertNull(ExceptionUtils.throwableOfType(nested, null));
assertNull(ExceptionUtils.throwableOfType(nested, ExceptionWithCause.class));
assertEquals(nested, ExceptionUtils.throwableOfType(nested, NestableException.class));
assertEquals(nested.getCause(), ExceptionUtils.throwableOfType(nested, ExceptionWithoutCause.class));
assertNull(ExceptionUtils.throwableOfType(withCause, null));
assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, ExceptionWithCause.class));
assertEquals(withCause.getCause(), ExceptionUtils.throwableOfType(withCause, NestableException.class));
assertEquals(withCause.getCause().getCause(), ExceptionUtils.throwableOfType(withCause, ExceptionWithoutCause.class));
assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, Exception.class));
assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, Throwable.class));
assertNull(ExceptionUtils.throwableOfType(null, null, 0));
assertNull(ExceptionUtils.throwableOfType(null, NestableException.class, 0));
assertNull(ExceptionUtils.throwableOfType(withoutCause, null));
assertNull(ExceptionUtils.throwableOfType(withoutCause, ExceptionWithCause.class, 0));
assertNull(ExceptionUtils.throwableOfType(withoutCause, NestableException.class, 0));
assertEquals(withoutCause, ExceptionUtils.throwableOfType(withoutCause, ExceptionWithoutCause.class, 0));
assertNull(ExceptionUtils.throwableOfType(nested, null, 0));
assertNull(ExceptionUtils.throwableOfType(nested, ExceptionWithCause.class, 0));
assertEquals(nested, ExceptionUtils.throwableOfType(nested, NestableException.class, 0));
assertEquals(nested.getCause(), ExceptionUtils.throwableOfType(nested, ExceptionWithoutCause.class, 0));
assertNull(ExceptionUtils.throwableOfType(withCause, null));
assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, ExceptionWithCause.class, 0));
assertEquals(withCause.getCause(), ExceptionUtils.throwableOfType(withCause, NestableException.class, 0));
assertEquals(withCause.getCause().getCause(), ExceptionUtils.throwableOfType(withCause, ExceptionWithoutCause.class, 0));
assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, ExceptionWithCause.class, -1));
assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, ExceptionWithCause.class, 0));
assertNull(ExceptionUtils.throwableOfType(withCause, ExceptionWithCause.class, 1));
assertNull(ExceptionUtils.throwableOfType(withCause, ExceptionWithCause.class, 9));
assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, Exception.class, 0));
assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, Throwable.class, 0));
final Throwable t = assertThrows(Throwable.class, () -> ExceptionUtils.wrapAndThrow(new IOException()));
assertTrue(ExceptionUtils.hasCause(t, IOException.class));
final Throwable t = assertThrows(Throwable.class, () -> ExceptionUtils.wrapAndThrow(new OutOfMemoryError()));
assertTrue(ExceptionUtils.hasCause(t, Error.class));
final Throwable t = assertThrows(Throwable.class, () -> ExceptionUtils.wrapAndThrow(new IllegalArgumentException()));
assertTrue(ExceptionUtils.hasCause(t, RuntimeException.class));
final Throwable t = assertThrows(Throwable.class, () -> ExceptionUtils.wrapAndThrow(new TestThrowable()));
assertTrue(ExceptionUtils.hasCause(t, TestThrowable.class));
assertThrows(CloneFailedException.class, () -> {throw new CloneFailedException(EXCEPTION_MESSAGE, generateCause());
assertThrows(CloneFailedException.class, () -> {throw new CloneFailedException(EXCEPTION_MESSAGE);
assertThrows(CloneFailedException.class, () -> {throw new CloneFailedException(generateCause());
assertNotNull(exception);
assertEquals(EXCEPTION_MESSAGE, exception.getMessage(), WRONG_EXCEPTION_MESSAGE);
assertNotNull(cause);
assertEquals(CAUSE_MESSAGE, cause.getMessage(), WRONG_CAUSE_MESSAGE);
assertNotNull(exception);
assertEquals(EXCEPTION_MESSAGE, exception.getMessage(), WRONG_EXCEPTION_MESSAGE);
assertNull(cause);
assertNotNull(exception);
assertNotNull(exception.getMessage());
assertNotNull(cause);
assertEquals(CAUSE_MESSAGE, cause.getMessage(), WRONG_CAUSE_MESSAGE);
assertSame(e, new UncheckedInterruptedException(e).getCause());
assertNotNull(new CharSequenceUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(CharSequenceUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(CharSequenceUtils.class.getModifiers()));
assertNull(CharSequenceUtils.subSequence(null, -1));
assertNull(CharSequenceUtils.subSequence(null, 0));
assertNull(CharSequenceUtils.subSequence(null, 1));
assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(StringUtils.EMPTY, 0));
assertEquals("012", CharSequenceUtils.subSequence("012", 0));
assertEquals("12", CharSequenceUtils.subSequence("012", 1));
assertEquals("2", CharSequenceUtils.subSequence("012", 2));
assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence("012", 3));
assertThrows(IndexOutOfBoundsException.class, () -> CharSequenceUtils.subSequence(StringUtils.EMPTY, -1));
assertThrows(IndexOutOfBoundsException.class, () -> CharSequenceUtils.subSequence(StringUtils.EMPTY, 1));
assertThrows(data.throwable, this::invoke, id + " Expected " + data.throwable);
assertEquals(data.expected, stringCheck, id + " Failed test " + data);
assertArrayEquals(expected, CharSequenceUtils.toCharArray(builder));
assertArrayEquals(expected, CharSequenceUtils.toCharArray(builder.toString()));
assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, CharSequenceUtils.toCharArray(null));
assertEquals(expected, CharSequenceUtils.lastIndexOf(cs, search, start));
assertEquals(a.toString().lastIndexOf(b.toString(), start),CharSequenceUtils.lastIndexOf(new WrapperString(a.toString()), new WrapperString(b.toString()), start),"testNewLastIndexOf fails! original : " + a + " seg : " + b + " start : " + start);
assertEquals(0, listeners.length);
assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType());
assertSame(empty, listenerSupport.getListeners());
assertEquals(1, listenerSupport.getListeners().length);
assertEquals(1, listenerSupport.getListeners().length);
assertSame(empty, listenerSupport.getListeners());
assertThrows(NullPointerException.class, () -> listenerSupport.addListener(null));
assertThrows(NullPointerException.class, () -> listenerSupport.removeListener(null));
assertEquals(calledListeners.size(), 2);
assertSame(calledListeners.get(0), listener1);
assertSame(calledListeners.get(1), listener2);
assertThrows(IllegalArgumentException.class, () -> EventListenerSupport.create(String.class));
assertThrows(NullPointerException.class, () -> EventListenerSupport.create(null));
assertEquals(listenerSupport.getListenerCount(), 10);
assertEquals(listenerSupport.getListenerCount(), 0);
assertEquals(0, listeners.length);
assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType());
assertSame(empty, listenerSupport.getListeners());
assertEquals(1, listenerSupport.getListeners().length);
assertEquals(2, listenerSupport.getListeners().length);
assertEquals(1, listenerSupport.getListeners().length);
assertSame(empty, listenerSupport.getListeners());
assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType());
assertEquals(1, listeners.length);
assertEquals(0, deserializedListenerSupport.getListeners().length);
assertNotNull(new EventUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(EventUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(EventUtils.class.getModifiers()));
assertEquals(0, handler.getEventCount("propertyChange"));
assertEquals(0, handler.getEventCount("propertyChange"));
assertEquals(1, handler.getEventCount("propertyChange"));
assertThrows(IllegalArgumentException.class, () -> EventUtils.addEventListener(src, ObjectChangeListener.class, listener));
assertEquals("Class " + src.getClass().getName() + " does not have a public add" + ObjectChangeListener.class.getSimpleName() + " method which takes a parameter of type " + ObjectChangeListener.class.getName() + ".",e.getMessage());
assertThrows(RuntimeException.class, () ->EventUtils.addEventListener(src, PropertyChangeListener.class, e -> {// Do nothing!}));
assertThrows(IllegalArgumentException.class, () -> EventUtils.addEventListener(src, VetoableChangeListener.class, listener));
assertEquals("Class " + src.getClass().getName() + " does not have a public add" + VetoableChangeListener.class.getSimpleName() + " method which takes a parameter of type " + VetoableChangeListener.class.getName() + ".",e.getMessage());
assertEquals(0, counter.getCount());
assertEquals(1, counter.getCount());
assertEquals(0, counter.getCount());
assertEquals(1, counter.getCount());
assertEquals(0, counter.getCount());
assertEquals(1, counter.getCount());
assertEquals(1, counter.getCount());
assertEquals(JAVA_0_9, get("0.9"), "0.9 failed");
assertEquals(JAVA_1_1, get("1.1"), "1.1 failed");
assertEquals(JAVA_1_2, get("1.2"), "1.2 failed");
assertEquals(JAVA_1_3, get("1.3"), "1.3 failed");
assertEquals(JAVA_1_4, get("1.4"), "1.4 failed");
assertEquals(JAVA_1_5, get("1.5"), "1.5 failed");
assertEquals(JAVA_1_6, get("1.6"), "1.6 failed");
assertEquals(JAVA_1_7, get("1.7"), "1.7 failed");
assertEquals(JAVA_1_8, get("1.8"), "1.8 failed");
assertEquals(JAVA_9, get("9"), "9 failed");
assertEquals(JAVA_10, get("10"), "10 failed");
assertEquals(JAVA_11, get("11"), "11 failed");
assertEquals(JAVA_12, get("12"), "12 failed");
assertEquals(JAVA_13, get("13"), "13 failed");
assertEquals(JAVA_14, get("14"), "14 failed");
assertEquals(JAVA_15, get("15"), "15 failed");
assertEquals(JAVA_16, get("16"), "16 failed");
assertEquals(JAVA_17, get("17"), "17 failed");
assertEquals(JAVA_18, get("18"), "18 failed");
assertEquals(JAVA_RECENT, get("1.10"), "1.10 failed");
// assertNull("2.10 unexpectedly worked", get("2.10"));
assertEquals(get("1.5"), getJavaVersion("1.5"), "Wrapper method failed");
assertEquals(JAVA_RECENT, get("19"), "Unhandled"); // LANG-1384
assertFalse(JAVA_1_2.atLeast(JAVA_1_5), "1.2 at least 1.5 passed");
assertTrue(JAVA_1_5.atLeast(JAVA_1_2), "1.5 at least 1.2 failed");
assertFalse(JAVA_1_6.atLeast(JAVA_1_7), "1.6 at least 1.7 passed");
assertTrue(JAVA_0_9.atLeast(JAVA_1_5), "0.9 at least 1.5 failed");
assertFalse(JAVA_0_9.atLeast(JAVA_1_6), "0.9 at least 1.6 passed");
assertEquals("1.2", JAVA_1_2.toString());
assertThat(new CustomCharSequence(FOO), IsNot.<CharSequence>not(FOO));
assertThat(FOO, IsNot.<CharSequence>not(new CustomCharSequence(FOO)));
assertEquals(new CustomCharSequence(FOO), new CustomCharSequence(FOO));
assertTrue(StringUtils.equals(null, null));
assertTrue(StringUtils.equals(fooCs, fooCs));
assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO)));
assertTrue(StringUtils.equals(fooCs, new String(new char[] { 'f', 'o', 'o' })));
assertTrue(StringUtils.equals(fooCs, new CustomCharSequence(FOO)));
assertTrue(StringUtils.equals(new CustomCharSequence(FOO), fooCs));
assertFalse(StringUtils.equals(fooCs, new String(new char[] { 'f', 'O', 'O' })));
assertFalse(StringUtils.equals(fooCs, barCs));
assertFalse(StringUtils.equals(fooCs, null));
assertFalse(StringUtils.equals(null, fooCs));
assertFalse(StringUtils.equals(fooCs, foobarCs));
assertFalse(StringUtils.equals(foobarCs, fooCs));
assertTrue(StringUtils.equals(null, null));
assertTrue(StringUtils.equals(FOO, FOO));
assertTrue(StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' })));
assertFalse(StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' })));
assertFalse(StringUtils.equals(FOO, BAR));
assertFalse(StringUtils.equals(FOO, null));
assertFalse(StringUtils.equals(null, FOO));
assertFalse(StringUtils.equals(FOO, FOOBAR));
assertFalse(StringUtils.equals(FOOBAR, FOO));
assertTrue(StringUtils.equalsIgnoreCase(null, null));
assertTrue(StringUtils.equalsIgnoreCase(FOO, FOO));
assertTrue(StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' })));
assertTrue(StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' })));
assertFalse(StringUtils.equalsIgnoreCase(FOO, BAR));
assertFalse(StringUtils.equalsIgnoreCase(FOO, null));
assertFalse(StringUtils.equalsIgnoreCase(null, FOO));
assertTrue(StringUtils.equalsIgnoreCase("", ""));
assertFalse(StringUtils.equalsIgnoreCase("abcd", "abcd "));
assertFalse(StringUtils.equalsAny(FOO));
assertFalse(StringUtils.equalsAny(FOO, new String[]{}));
assertTrue(StringUtils.equalsAny(FOO, FOO));
assertTrue(StringUtils.equalsAny(FOO, BAR, new String(new char[] { 'f', 'o', 'o' })));
assertFalse(StringUtils.equalsAny(FOO, BAR, new String(new char[] { 'f', 'O', 'O' })));
assertFalse(StringUtils.equalsAny(FOO, BAR));
assertFalse(StringUtils.equalsAny(FOO, BAR, null));
assertFalse(StringUtils.equalsAny(null, FOO));
assertFalse(StringUtils.equalsAny(FOO, FOOBAR));
assertFalse(StringUtils.equalsAny(FOOBAR, FOO));
assertTrue(StringUtils.equalsAny(null, null, null));
assertFalse(StringUtils.equalsAny(null, FOO, BAR, FOOBAR));
assertFalse(StringUtils.equalsAny(FOO, null, BAR));
assertTrue(StringUtils.equalsAny(FOO, BAR, null, "", FOO, BAR));
assertFalse(StringUtils.equalsAny(FOO, FOO.toUpperCase(Locale.ROOT)));
assertFalse(StringUtils.equalsAny(null, (CharSequence[]) null));
assertTrue(StringUtils.equalsAny(FOO, new CustomCharSequence("foo")));
assertTrue(StringUtils.equalsAny(FOO, new StringBuilder("foo")));
assertFalse(StringUtils.equalsAny(FOO, new CustomCharSequence("fOo")));
assertFalse(StringUtils.equalsAny(FOO, new StringBuilder("fOo")));
assertFalse(StringUtils.equalsAnyIgnoreCase(FOO));
assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, new String[]{}));
assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, FOO));
assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, FOO.toUpperCase(Locale.ROOT)));
assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, FOO, new String(new char[]{'f', 'o', 'o'})));
assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, BAR, new String(new char[]{'f', 'O', 'O'})));
assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, BAR));
assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, BAR, null));
assertFalse(StringUtils.equalsAnyIgnoreCase(null, FOO));
assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, FOOBAR));
assertFalse(StringUtils.equalsAnyIgnoreCase(FOOBAR, FOO));
assertTrue(StringUtils.equalsAnyIgnoreCase(null, null, null));
assertFalse(StringUtils.equalsAnyIgnoreCase(null, FOO, BAR, FOOBAR));
assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, null, BAR));
assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, BAR, null, "", FOO.toUpperCase(Locale.ROOT), BAR));
assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, FOO.toUpperCase(Locale.ROOT)));
assertFalse(StringUtils.equalsAnyIgnoreCase(null, (CharSequence[]) null));
assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, new CustomCharSequence("fOo")));
assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, new StringBuilder("fOo")));
assertEquals(0, StringUtils.compare(null, null));
assertTrue(StringUtils.compare(null, "a") < 0);
assertTrue(StringUtils.compare("a", null) > 0);
assertEquals(0, StringUtils.compare("abc", "abc"));
assertTrue(StringUtils.compare("a", "b") < 0);
assertTrue(StringUtils.compare("b", "a") > 0);
assertTrue(StringUtils.compare("a", "B") > 0);
assertTrue(StringUtils.compare("abc", "abd") < 0);
assertTrue(StringUtils.compare("ab", "abc") < 0);
assertTrue(StringUtils.compare("ab", "ab ") < 0);
assertTrue(StringUtils.compare("abc", "ab ") > 0);
assertEquals(0, StringUtils.compare(null, null, false));
assertTrue(StringUtils.compare(null, "a", true) < 0);
assertTrue(StringUtils.compare(null, "a", false) > 0);
assertTrue(StringUtils.compare("a", null, true) > 0);
assertTrue(StringUtils.compare("a", null, false) < 0);
assertEquals(0, StringUtils.compare("abc", "abc", false));
assertTrue(StringUtils.compare("a", "b", false) < 0);
assertTrue(StringUtils.compare("b", "a", false) > 0);
assertTrue(StringUtils.compare("a", "B", false) > 0);
assertTrue(StringUtils.compare("abc", "abd", false) < 0);
assertTrue(StringUtils.compare("ab", "abc", false) < 0);
assertTrue(StringUtils.compare("ab", "ab ", false) < 0);
assertTrue(StringUtils.compare("abc", "ab ", false) > 0);
assertEquals(0, StringUtils.compareIgnoreCase(null, null));
assertTrue(StringUtils.compareIgnoreCase(null, "a") < 0);
assertTrue(StringUtils.compareIgnoreCase("a", null) > 0);
assertEquals(0, StringUtils.compareIgnoreCase("abc", "abc"));
assertEquals(0, StringUtils.compareIgnoreCase("abc", "ABC"));
assertTrue(StringUtils.compareIgnoreCase("a", "b") < 0);
assertTrue(StringUtils.compareIgnoreCase("b", "a") > 0);
assertTrue(StringUtils.compareIgnoreCase("a", "B") < 0);
assertTrue(StringUtils.compareIgnoreCase("A", "b") < 0);
assertTrue(StringUtils.compareIgnoreCase("abc", "ABD") < 0);
assertTrue(StringUtils.compareIgnoreCase("ab", "ABC") < 0);
assertTrue(StringUtils.compareIgnoreCase("ab", "AB ") < 0);
assertTrue(StringUtils.compareIgnoreCase("abc", "AB ") > 0);
assertEquals(0, StringUtils.compareIgnoreCase(null, null, false));
assertTrue(StringUtils.compareIgnoreCase(null, "a", true) < 0);
assertTrue(StringUtils.compareIgnoreCase(null, "a", false) > 0);
assertTrue(StringUtils.compareIgnoreCase("a", null, true) > 0);
assertTrue(StringUtils.compareIgnoreCase("a", null, false) < 0);
assertEquals(0, StringUtils.compareIgnoreCase("abc", "abc", false));
assertEquals(0, StringUtils.compareIgnoreCase("abc", "ABC", false));
assertTrue(StringUtils.compareIgnoreCase("a", "b", false) < 0);
assertTrue(StringUtils.compareIgnoreCase("b", "a", false) > 0);
assertTrue(StringUtils.compareIgnoreCase("a", "B", false) < 0);
assertTrue(StringUtils.compareIgnoreCase("A", "b", false) < 0);
assertTrue(StringUtils.compareIgnoreCase("abc", "ABD", false) < 0);
assertTrue(StringUtils.compareIgnoreCase("ab", "ABC", false) < 0);
assertTrue(StringUtils.compareIgnoreCase("ab", "AB ", false) < 0);
assertTrue(StringUtils.compareIgnoreCase("abc", "AB ", false) > 0);
assertEquals(-1, StringUtils.indexOf(null, ' '));
assertEquals(-1, StringUtils.indexOf("", ' '));
assertEquals(0, StringUtils.indexOf("aabaabaa", 'a'));
assertEquals(2, StringUtils.indexOf("aabaabaa", 'b'));
assertEquals(2, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b'));
assertEquals(StringUtils.INDEX_NOT_FOUND, StringUtils.indexOf(new StringBuilder("aabaabaa"), -1738));
assertEquals(-1, StringUtils.indexOf(null, ' ', 0));
assertEquals(-1, StringUtils.indexOf(null, ' ', -1));
assertEquals(-1, StringUtils.indexOf("", ' ', 0));
assertEquals(-1, StringUtils.indexOf("", ' ', -1));
assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0));
assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0));
assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3));
assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9));
assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1));
assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b', 3));
assertEquals(0, StringUtils.indexOf(builder, CODE_POINT, 0));
assertEquals(0, StringUtils.indexOf(builder.toString(), CODE_POINT, 0));
assertEquals(2, StringUtils.indexOf(builder, CODE_POINT, 1));
assertEquals(2, StringUtils.indexOf(builder.toString(), CODE_POINT, 1));
assertEquals(-1, StringUtils.indexOf(builder, CODE_POINT, 0));
assertEquals(-1, StringUtils.indexOf(builder.toString(), CODE_POINT, 0));
assertEquals(1, StringUtils.indexOf(builder, CODE_POINT, 0));
assertEquals(1, StringUtils.indexOf(builder.toString(), CODE_POINT, 0));
assertEquals(-1, StringUtils.indexOf(builder, CODE_POINT, 2));
assertEquals(-1, StringUtils.indexOf(builder.toString(), CODE_POINT, 2));
assertEquals(-1, StringUtils.indexOf(null, null));
assertEquals(-1, StringUtils.indexOf("", null));
assertEquals(0, StringUtils.indexOf("", ""));
assertEquals(0, StringUtils.indexOf("aabaabaa", "a"));
assertEquals(2, StringUtils.indexOf("aabaabaa", "b"));
assertEquals(1, StringUtils.indexOf("aabaabaa", "ab"));
assertEquals(0, StringUtils.indexOf("aabaabaa", ""));
assertEquals(2, StringUtils.indexOf(new StringBuilder("aabaabaa"), "b"));
assertEquals(-1, StringUtils.indexOf(null, null, 0));
assertEquals(-1, StringUtils.indexOf(null, null, -1));
assertEquals(-1, StringUtils.indexOf(null, "", 0));
assertEquals(-1, StringUtils.indexOf(null, "", -1));
assertEquals(-1, StringUtils.indexOf("", null, 0));
assertEquals(-1, StringUtils.indexOf("", null, -1));
assertEquals(0, StringUtils.indexOf("", "", 0));
assertEquals(0, StringUtils.indexOf("", "", -1));
assertEquals(0, StringUtils.indexOf("", "", 9));
assertEquals(0, StringUtils.indexOf("abc", "", 0));
assertEquals(0, StringUtils.indexOf("abc", "", -1));
assertEquals(3, StringUtils.indexOf("abc", "", 9));
assertEquals(3, StringUtils.indexOf("abc", "", 3));
assertEquals(0, StringUtils.indexOf("aabaabaa", "a", 0));
assertEquals(2, StringUtils.indexOf("aabaabaa", "b", 0));
assertEquals(1, StringUtils.indexOf("aabaabaa", "ab", 0));
assertEquals(5, StringUtils.indexOf("aabaabaa", "b", 3));
assertEquals(-1, StringUtils.indexOf("aabaabaa", "b", 9));
assertEquals(2, StringUtils.indexOf("aabaabaa", "b", -1));
assertEquals(2, StringUtils.indexOf("aabaabaa", "", 2));
assertEquals(7, StringUtils.indexOf("12345678", "8", 5));
assertEquals(7, StringUtils.indexOf("12345678", "8", 6));
assertEquals(7, StringUtils.indexOf("12345678", "8", 7)); // 7 is last index
assertEquals(-1, StringUtils.indexOf("12345678", "8", 8));
assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), "b", 3));
assertEquals(-1, StringUtils.indexOfAny(null, (char[]) null));
assertEquals(-1, StringUtils.indexOfAny(null, new char[0]));
assertEquals(-1, StringUtils.indexOfAny(null, 'a', 'b'));
assertEquals(-1, StringUtils.indexOfAny("", (char[]) null));
assertEquals(-1, StringUtils.indexOfAny("", new char[0]));
assertEquals(-1, StringUtils.indexOfAny("", 'a', 'b'));
assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", (char[]) null));
assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", new char[0]));
assertEquals(0, StringUtils.indexOfAny("zzabyycdxx", 'z', 'a'));
assertEquals(3, StringUtils.indexOfAny("zzabyycdxx", 'b', 'y'));
assertEquals(-1, StringUtils.indexOfAny("ab", 'z'));
assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));
assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));
assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));
assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));
assertEquals(-1, StringUtils.indexOfAny(null, (String) null));
assertEquals(-1, StringUtils.indexOfAny(null, ""));
assertEquals(-1, StringUtils.indexOfAny(null, "ab"));
assertEquals(-1, StringUtils.indexOfAny("", (String) null));
assertEquals(-1, StringUtils.indexOfAny("", ""));
assertEquals(-1, StringUtils.indexOfAny("", "ab"));
assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", (String) null));
assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", ""));
assertEquals(0, StringUtils.indexOfAny("zzabyycdxx", "za"));
assertEquals(3, StringUtils.indexOfAny("zzabyycdxx", "by"));
assertEquals(-1, StringUtils.indexOfAny("ab", "z"));
assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null));
assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY));
assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null));
assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));
assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0]));
assertEquals(-1, StringUtils.indexOfAny(null, new String[0]));
assertEquals(-1, StringUtils.indexOfAny("", new String[0]));
assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {"llll"}));
assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] {""}));
assertEquals(0, StringUtils.indexOfAny("", new String[] {""}));
assertEquals(-1, StringUtils.indexOfAny("", new String[] {"a"}));
assertEquals(-1, StringUtils.indexOfAny("", new String[] {null}));
assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {null}));
assertEquals(-1, StringUtils.indexOfAny(null, new String[] {null}));
assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));
assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));
assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));
assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));
assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null));
assertEquals(-1, StringUtils.indexOfAnyBut(null));
assertEquals(-1, StringUtils.indexOfAnyBut(null, 'a', 'b'));
assertEquals(-1, StringUtils.indexOfAnyBut("", (char[]) null));
assertEquals(-1, StringUtils.indexOfAnyBut(""));
assertEquals(-1, StringUtils.indexOfAnyBut("", 'a', 'b'));
assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (char[]) null));
assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx"));
assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", 'z', 'a'));
assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", 'b', 'y'));
assertEquals(-1, StringUtils.indexOfAnyBut("aba", 'a', 'b'));
assertEquals(0, StringUtils.indexOfAnyBut("aba", 'z'));
assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));
assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));
assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));
assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));
assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null));
assertEquals(-1, StringUtils.indexOfAnyBut(null, ""));
assertEquals(-1, StringUtils.indexOfAnyBut(null, "ab"));
assertEquals(-1, StringUtils.indexOfAnyBut("", (String) null));
assertEquals(-1, StringUtils.indexOfAnyBut("", ""));
assertEquals(-1, StringUtils.indexOfAnyBut("", "ab"));
assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (String) null));
assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", ""));
assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", "za"));
assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", "by"));
assertEquals(0, StringUtils.indexOfAnyBut("ab", "z"));
assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));
assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));
assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));
assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));
assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null));
assertEquals(-1, StringUtils.indexOfIgnoreCase(null, ""));
assertEquals(-1, StringUtils.indexOfIgnoreCase("", null));
assertEquals(0, StringUtils.indexOfIgnoreCase("", ""));
assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a"));
assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A"));
assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b"));
assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B"));
assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab"));
assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB"));
assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", ""));
assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", -1));
assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 0));
assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 1));
assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 2));
assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 3));
assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 4));
assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 5));
assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 6));
assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 7));
assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 8));
assertEquals(1, StringUtils.indexOfIgnoreCase("aab", "AB", 1));
assertEquals(5, StringUtils.indexOfIgnoreCase("aabaabaa", "", 5));
assertEquals(-1, StringUtils.indexOfIgnoreCase("ab", "AAB", 0));
assertEquals(-1, StringUtils.indexOfIgnoreCase("aab", "AAB", 1));
assertEquals(-1, StringUtils.indexOfIgnoreCase("abc", "", 9));
assertEquals(-1, StringUtils.lastIndexOf(null, ' '));
assertEquals(-1, StringUtils.lastIndexOf("", ' '));
assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a'));
assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b'));
assertEquals(5, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b'));
assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0));
assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1));
assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0));
assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1));
assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8));
assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8));
assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3));
assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9));
assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1));
assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0));
assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b', 2));
assertEquals(0, StringUtils.lastIndexOf(builder, CODE_POINT, 0));
assertEquals(0, StringUtils.lastIndexOf(builder, CODE_POINT, 0));
assertEquals(0, StringUtils.lastIndexOf(builder, CODE_POINT, 1));
assertEquals(2, StringUtils.lastIndexOf(builder, CODE_POINT, 2));
assertEquals(2, StringUtils.lastIndexOf(builder, CODE_POINT, 4));
assertEquals(-1, StringUtils.lastIndexOf(builder, CODE_POINT, 0));
assertEquals(-1, StringUtils.lastIndexOf(builder, CODE_POINT, 0));
assertEquals(1, StringUtils.lastIndexOf(builder, CODE_POINT, 1 ));
assertEquals(-1, StringUtils.lastIndexOf(builder.toString(), CODE_POINT, 0));
assertEquals(1, StringUtils.lastIndexOf(builder.toString(), CODE_POINT, 1));
assertEquals(StringUtils.INDEX_NOT_FOUND, StringUtils.lastIndexOf(CharBuffer.wrap("[%{.c.0rro"), -1738, 982));
assertEquals(-1, StringUtils.lastIndexOf(null, null));
assertEquals(-1, StringUtils.lastIndexOf("", null));
assertEquals(-1, StringUtils.lastIndexOf("", "a"));
assertEquals(0, StringUtils.lastIndexOf("", ""));
assertEquals(8, StringUtils.lastIndexOf("aabaabaa", ""));
assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a"));
assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b"));
assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab"));
assertEquals(4, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "ab"));
assertEquals(-1, StringUtils.lastIndexOf(null, null, 0));
assertEquals(-1, StringUtils.lastIndexOf(null, null, -1));
assertEquals(-1, StringUtils.lastIndexOf(null, "", 0));
assertEquals(-1, StringUtils.lastIndexOf(null, "", -1));
assertEquals(-1, StringUtils.lastIndexOf("", null, 0));
assertEquals(-1, StringUtils.lastIndexOf("", null, -1));
assertEquals(0, StringUtils.lastIndexOf("", "", 0));
assertEquals(-1, StringUtils.lastIndexOf("", "", -1));
assertEquals(0, StringUtils.lastIndexOf("", "", 9));
assertEquals(0, StringUtils.lastIndexOf("abc", "", 0));
assertEquals(-1, StringUtils.lastIndexOf("abc", "", -1));
assertEquals(3, StringUtils.lastIndexOf("abc", "", 9));
assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a", 8));
assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 8));
assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab", 8));
assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 3));
assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 9));
assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", -1));
assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 0));
assertEquals(0, StringUtils.lastIndexOf("aabaabaa", "a", 0));
assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "a", -1));
assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 9));
assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 8));
assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 7)); // 7 is last index
assertEquals(-1, StringUtils.lastIndexOf("12345678", "8", 6));
assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 1));
assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 2));
assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 2));
assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 3));
assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "b", 3));
assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));   // test both types of ...
assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); // ... varargs invocation
assertEquals(-1, StringUtils.lastIndexOfAny(null)); // Missing varag
assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY));
assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence) null));   // test both types of ...
assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence[]) null)); // ... varargs invocation
assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR)); // Missing vararg
assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));
assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0]));
assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0]));
assertEquals(-1, StringUtils.lastIndexOfAny("", new String[0]));
assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {"llll"}));
assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] {""}));
assertEquals(0, StringUtils.lastIndexOfAny("", new String[] {""}));
assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] {"a"}));
assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] {null}));
assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {null}));
assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] {null}));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, ""));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "a"));
assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", ""));
assertEquals(8, StringUtils.lastIndexOfIgnoreCase("aabaabaa", ""));
assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "a"));
assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A"));
assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "b"));
assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B"));
assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "ab"));
assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB"));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("ab", "AAB"));
assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aab", "AAB"));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", 0));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", -1));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null, 0));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null, -1));
assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "", 0));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "", -1));
assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "", 9));
assertEquals(0, StringUtils.lastIndexOfIgnoreCase("abc", "", 0));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("abc", "", -1));
assertEquals(3, StringUtils.lastIndexOfIgnoreCase("abc", "", 9));
assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 8));
assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 8));
assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB", 8));
assertEquals(2, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 3));
assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 9));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", -1));
assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 0));
assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 0));
assertEquals(1, StringUtils.lastIndexOfIgnoreCase("aab", "AB", 1));
assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42) );
assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42) );
assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42) );
assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1) );
assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2) );
assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1) );
assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2) );
assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1) );
assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2) );
assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1) );
assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2) );
assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1));
assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1));
assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1));
assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0));
assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0));
assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0));
assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1));
assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1));
assertEquals(0, StringUtils.ordinalIndexOf("", "", 1));
assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1));
assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1));
assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1));
assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1));
assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2));
assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2));
assertEquals(0, StringUtils.ordinalIndexOf("", "", 2));
assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2));
assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2));
assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2));
assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2));
assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE));
assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE));
assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE));
assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0));
assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1));
assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2));
assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3));
assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4));
assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5));
assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6));
assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7));
assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8));
assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9));
assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10));
assertEquals(0, StringUtils.ordinalIndexOf("aaaaaa", "aa", 1));
assertEquals(1, StringUtils.ordinalIndexOf("aaaaaa", "aa", 2));
assertEquals(2, StringUtils.ordinalIndexOf("aaaaaa", "aa", 3));
assertEquals(3, StringUtils.ordinalIndexOf("aaaaaa", "aa", 4));
assertEquals(4, StringUtils.ordinalIndexOf("aaaaaa", "aa", 5));
assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaa", "aa", 6));
assertEquals(0, StringUtils.ordinalIndexOf("ababab", "aba", 1));
assertEquals(2, StringUtils.ordinalIndexOf("ababab", "aba", 2));
assertEquals(-1, StringUtils.ordinalIndexOf("ababab", "aba", 3));
assertEquals(0, StringUtils.ordinalIndexOf("abababab", "abab", 1));
assertEquals(2, StringUtils.ordinalIndexOf("abababab", "abab", 2));
assertEquals(4, StringUtils.ordinalIndexOf("abababab", "abab", 3));
assertEquals(-1, StringUtils.ordinalIndexOf("abababab", "abab", 4));
assertEquals(0, StringUtils.ordinalIndexOf("abc", "ab", 1));
assertEquals(0, StringUtils.ordinalIndexOf("abaabaab", "ab", 1));
assertEquals(3, StringUtils.ordinalIndexOf("abaabaab", "ab", 2));
assertEquals(6, StringUtils.ordinalIndexOf("abaabaab", "ab", 3));
assertEquals(0, StringUtils.ordinalIndexOf("abababa", "aba", 1));
assertEquals(2, StringUtils.ordinalIndexOf("abababa", "aba", 2));
assertEquals(4, StringUtils.ordinalIndexOf("abababa", "aba", 3));
assertEquals(0, StringUtils.ordinalIndexOf("abababab", "abab", 1));
assertEquals(2, StringUtils.ordinalIndexOf("abababab", "abab", 2));
assertEquals(4, StringUtils.ordinalIndexOf("abababab", "abab", 3));
assertFalse(ThreadUtils.getAllThreads().isEmpty());
assertFalse(ThreadUtils.getAllThreadGroups().isEmpty());
assertTrue(ThreadUtils.getAllThreadGroups().size() >= 7);
assertTrue(ThreadUtils.getAllThreads().size() >= 11);
assertTrue(ThreadUtils.findThreads(ThreadUtils.ALWAYS_TRUE_PREDICATE).size() >= 11);
assertEquals(1, ThreadUtils.findThreadsByName(t4.getName(), threadGroup3.getName()).size());
assertEquals(0, ThreadUtils.findThreadsByName(t4.getName(), threadGroup2.getName()).size());
assertEquals(2, ThreadUtils.findThreadsByName(t11.getName(), threadGroup7.getName()).size());
assertNotNull(new ThreadUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(ThreadUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(ThreadUtils.class.getModifiers()));
assertThrows(IllegalArgumentException.class, () -> ThreadUtils.findThreadById(-5L));
assertEquals(0, ThreadUtils.findThreadsByName("some_thread_which_does_not_exist_18762ZucTT").size());
assertEquals(0, ThreadUtils.findThreadGroupsByName("some_thread_group_which_does_not_exist_18762ZucTTII").size());
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadGroupsByName(null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadsByName(null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadsByName("tname", (ThreadGroup) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadById(1L, (ThreadGroup) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadsByName(null, (ThreadGroup) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadsByName(null, "tgname"));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadsByName("tname", (String) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadsByName(null, (String) null));
assertNotNull(systemThreadGroup);
assertNull(systemThreadGroup.getParent());
assertEquals("system", systemThreadGroup.getName());
assertEquals(1, ThreadUtils.findThreadsByName("thread1_XXOOPP__").size());
assertEquals(1, ThreadUtils.findThreadsByName("thread1_XXOOPP__", "thread_group_DDZZ99__").size());
assertEquals(1, ThreadUtils.findThreadsByName("thread2_XXOOPP__", "thread_group_DDZZ99__").size());
assertEquals(0, ThreadUtils.findThreadsByName("thread1_XXOOPP__", "non_existent_thread_group_JJHHZZ__").size());
assertEquals(0, ThreadUtils.findThreadsByName("non_existent_thread_BBDDWW__", "thread_group_DDZZ99__").size());
assertEquals(1, ThreadUtils.findThreadGroupsByName("thread_group_DDZZ99__").size());
assertEquals(0, ThreadUtils.findThreadGroupsByName("non_existent_thread_group_JJHHZZ__").size());
assertNotNull(ThreadUtils.findThreadById(t1.getId(), threadGroup));
assertSame(t1, ThreadUtils.findThreadById(t1.getId(), "thread_group_DDZZ99__"));
assertSame(t2, ThreadUtils.findThreadById(t2.getId(), "thread_group_DDZZ99__"));
assertNull(ThreadUtils.findThreadById(nonExistingId, "non_existent_thread_group_JJHHZZ__"));
assertNull(ThreadUtils.findThreadById(nonExistingId, "thread_group_DDZZ99__"));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadById(Thread.currentThread().getId(), (String) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadGroups(null, true, ThreadUtils.ALWAYS_TRUE_PREDICATE));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadGroups(null, false, ThreadUtils.ALWAYS_TRUE_PREDICATE));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadGroups((ThreadGroupPredicate) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadGroups((Predicate<ThreadGroup>) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadGroups((Predicate) null));
assertEquals(1, ThreadUtils.findThreadsByName("thread1_XXOOPP__").size());
assertEquals(1, ThreadUtils.findThreadsByName("thread1_XXOOPP__", threadGroup).size());
assertEquals(1, ThreadUtils.findThreadsByName("thread2_XXOOPP__", threadGroup).size());
assertEquals(0, ThreadUtils.findThreadsByName("thread1_XXOOPP__", deadThreadGroup).size());
assertEquals(0, ThreadUtils.findThreadsByName("thread2_XXOOPP__", threadGroup).size());
assertEquals(1, ThreadUtils.findThreadsByName("thread2_XXOOLL__").size());
assertSame(t1, ThreadUtils.findThreadById(t1.getId()));
assertSame(t2, ThreadUtils.findThreadById(t2.getId()));
assertNull(ThreadUtils.findThreadById(t1.getId(), tg));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreads((ThreadPredicate) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreads((Predicate<Thread>) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreads((Predicate) null));
assertEquals(2, ThreadUtils.findThreadsByName("thread1_XXOOLL__").size());
assertFalse(ObjectUtils.allNotNull((Object) null));
assertFalse(ObjectUtils.allNotNull((Object[]) null));
assertFalse(ObjectUtils.allNotNull(null, null, null));
assertFalse(ObjectUtils.allNotNull(null, FOO, BAR));
assertFalse(ObjectUtils.allNotNull(FOO, BAR, null));
assertFalse(ObjectUtils.allNotNull(FOO, BAR, null, FOO, BAR));
assertTrue(ObjectUtils.allNotNull());
assertTrue(ObjectUtils.allNotNull(FOO));
assertTrue(ObjectUtils.allNotNull(FOO, BAR, 1, Boolean.TRUE, new Object(), new Object[]{}));
assertTrue(ObjectUtils.allNull());
assertTrue(ObjectUtils.allNull((Object) null));
assertTrue(ObjectUtils.allNull((Object[]) null));
assertTrue(ObjectUtils.allNull(null, null, null));
assertFalse(ObjectUtils.allNull(FOO));
assertFalse(ObjectUtils.allNull(null, FOO, null));
assertFalse(ObjectUtils.allNull(null, null, null, null, FOO, BAR));
assertFalse(ObjectUtils.anyNotNull());
assertFalse(ObjectUtils.anyNotNull((Object) null));
assertFalse(ObjectUtils.anyNotNull((Object[]) null));
assertFalse(ObjectUtils.anyNotNull(null, null, null));
assertTrue(ObjectUtils.anyNotNull(FOO));
assertTrue(ObjectUtils.anyNotNull(null, FOO, null));
assertTrue(ObjectUtils.anyNotNull(null, null, null, null, FOO, BAR));
assertTrue(ObjectUtils.anyNull((Object) null));
assertTrue(ObjectUtils.anyNull(null, null, null));
assertTrue(ObjectUtils.anyNull(null, FOO, BAR));
assertTrue(ObjectUtils.anyNull(FOO, BAR, null));
assertTrue(ObjectUtils.anyNull(FOO, BAR, null, FOO, BAR));
assertFalse(ObjectUtils.anyNull());
assertFalse(ObjectUtils.anyNull(FOO));
assertFalse(ObjectUtils.anyNull(FOO, BAR, 1, Boolean.TRUE, new Object(), new Object[]{}));
assertEquals("apache", stringClone.getValue());
assertNull(ObjectUtils.clone(string));
assertArrayEquals(new int[]{1}, ObjectUtils.clone(new int[]{1}));
assertTrue(Arrays.deepEquals(new String[]{"string"}, ObjectUtils.clone(new String[]{"string"})));
final CloneFailedException e = assertThrows(CloneFailedException.class, () -> ObjectUtils.clone(string));
assertEquals(NoSuchMethodException.class, e.getCause().getClass());
assertSame(foo, ObjectUtils.median(cmp, foo));
assertSame(bar, ObjectUtils.median(cmp, foo, bar));
assertSame(baz, ObjectUtils.median(cmp, foo, bar, baz));
assertSame(baz, ObjectUtils.median(cmp, foo, bar, baz, blah));
assertSame(blah, ObjectUtils.median(cmp, foo, bar, baz, blah, wah));
assertThrows(IllegalArgumentException.class, () -> ObjectUtils.median(new CharSequenceComparator()));
assertThrows(NullPointerException.class,() -> ObjectUtils.median((Comparator<CharSequence>) null, new NonComparableCharSequence("foo")));
assertThrows(NullPointerException.class,() -> ObjectUtils.median(new CharSequenceComparator(), (CharSequence[]) null));
assertEquals(0, ObjectUtils.compare(nullValue, nullValue), "Null Null false");
assertEquals(0, ObjectUtils.compare(nullValue, nullValue, true), "Null Null true");
assertEquals(-1, ObjectUtils.compare(nullValue, one), "Null one false");
assertEquals(1, ObjectUtils.compare(nullValue, one, true), "Null one true");
assertEquals(1, ObjectUtils.compare(one, nullValue), "one Null false");
assertEquals(-1, ObjectUtils.compare(one, nullValue, true), "one Null true");
assertEquals(-1, ObjectUtils.compare(one, two), "one two false");
assertEquals(-1, ObjectUtils.compare(one, two, true), "one two true");
assertTrue(ObjectUtils.CONST(true), "CONST(boolean)");
assertEquals((byte) 3, ObjectUtils.CONST((byte) 3), "CONST(byte)");
assertEquals((char) 3, ObjectUtils.CONST((char) 3), "CONST(char)");
assertEquals((short) 3, ObjectUtils.CONST((short) 3), "CONST(short)");
assertEquals(3, ObjectUtils.CONST(3), "CONST(int)");
assertEquals(3L, ObjectUtils.CONST(3L), "CONST(long)");
assertEquals(3f, ObjectUtils.CONST(3f), "CONST(float)");
assertEquals(3.0, ObjectUtils.CONST(3.0), "CONST(double)");
assertEquals("abc", ObjectUtils.CONST("abc"), "CONST(Object)");
assertTrue(MAGIC_FLAG);
assertEquals(127, MAGIC_BYTE1);
assertEquals(127, MAGIC_BYTE2);
assertEquals('a', MAGIC_CHAR);
assertEquals(123, MAGIC_SHORT1);
assertEquals(127, MAGIC_SHORT2);
assertEquals(123, MAGIC_INT);
assertEquals(123, MAGIC_LONG1);
assertEquals(3, MAGIC_LONG2);
assertEquals(1.0f, MAGIC_FLOAT);
assertEquals(1.0, MAGIC_DOUBLE);
assertEquals("abc", MAGIC_STRING);
assertThrows(IllegalArgumentException.class,() -> ObjectUtils.CONST_BYTE(-129),"CONST_BYTE(-129): IllegalArgumentException should have been thrown.");
assertThrows(IllegalArgumentException.class,() -> ObjectUtils.CONST_BYTE(128),"CONST_BYTE(128): IllegalArgumentException should have been thrown.");
assertThrows(IllegalArgumentException.class,() -> ObjectUtils.CONST_SHORT(-32769),"CONST_SHORT(-32769): IllegalArgumentException should have been thrown.");
assertThrows(IllegalArgumentException.class,() -> ObjectUtils.CONST_BYTE(32768),"CONST_SHORT(32768): IllegalArgumentException should have been thrown.");
assertNotNull(new ObjectUtils());
assertEquals(1, cons.length);
assertTrue(Modifier.isPublic(cons[0].getModifiers()));
assertTrue(Modifier.isPublic(ObjectUtils.class.getModifiers()));
assertFalse(Modifier.isFinal(ObjectUtils.class.getModifiers()));
assertSame(dflt, ObjectUtils.defaultIfNull(null, dflt), "dflt was not returned when o was null");
assertSame(o, ObjectUtils.defaultIfNull(o, dflt), "dflt was returned when o was not null");
assertSame(dflt, ObjectUtils.getIfNull(null, () -> dflt), "dflt was not returned when o was null");
assertSame(o, ObjectUtils.getIfNull(o, () -> dflt), "dflt was returned when o was not null");
assertSame(o, ObjectUtils.getIfNull(FOO, () -> dflt), "dflt was returned when o was not null");
assertSame(o, ObjectUtils.getIfNull("foo", () -> dflt), "dflt was returned when o was not null");
assertEquals(0, callsCounter.getValue());
assertEquals(1, callsCounter.getValue());
assertTrue(ObjectUtils.equals(null, null), "ObjectUtils.equals(null, null) returned false");
assertFalse(ObjectUtils.equals(FOO, null), "ObjectUtils.equals(\"foo\", null) returned true");
assertFalse(ObjectUtils.equals(null, BAR), "ObjectUtils.equals(null, \"bar\") returned true");
assertFalse(ObjectUtils.equals(FOO, BAR), "ObjectUtils.equals(\"foo\", \"bar\") returned true");
assertTrue(ObjectUtils.equals(FOO, FOO), "ObjectUtils.equals(\"foo\", \"foo\") returned false");
assertEquals("", ObjectUtils.firstNonNull(null, ""));
assertEquals("123", firstNonNullGenerics);
assertEquals("123", ObjectUtils.firstNonNull("123", null, "456", null));
assertSame(Boolean.TRUE, ObjectUtils.firstNonNull(Boolean.TRUE));
assertNull(ObjectUtils.firstNonNull());
assertNull(ObjectUtils.firstNonNull(null, null));
assertNull(ObjectUtils.firstNonNull((Object) null));
assertNull(ObjectUtils.firstNonNull((Object[]) null));
assertEquals(String[].class, cls);
assertNull(ObjectUtils.getClass(null));
assertEquals("", ObjectUtils.getFirstNonNull(() -> null, () -> ""));
assertEquals("1", ObjectUtils.getFirstNonNull(() -> null, () -> "1", () -> "2", () -> null));
assertEquals("123", ObjectUtils.getFirstNonNull(() -> "123", () -> null, () -> "456"));
assertEquals("123", ObjectUtils.getFirstNonNull(() -> null, () -> "123", () -> fail("Supplier after first non-null value should not be evaluated")));
assertNull(ObjectUtils.getFirstNonNull(null, () -> null));
assertNull(ObjectUtils.getFirstNonNull());
assertNull(ObjectUtils.getFirstNonNull((Supplier<Object>) null));
assertNull(ObjectUtils.getFirstNonNull((Supplier<Object>[]) null));
assertEquals(1, ObjectUtils.getFirstNonNull(() -> null, () -> 1));
assertEquals(Boolean.TRUE, ObjectUtils.getFirstNonNull(() -> null, () -> Boolean.TRUE));
assertEquals(0, ObjectUtils.hashCode(null));
assertEquals("a".hashCode(), ObjectUtils.hashCode("a"));
assertEquals(Integer.toHexString(Objects.hashCode(i)), ObjectUtils.hashCodeHex(i));
assertEquals(Integer.toHexString(Objects.hashCode(zero)), ObjectUtils.hashCodeHex(zero));
assertEquals(Integer.toHexString(Objects.hashCode(null)), ObjectUtils.hashCodeHex(null));
assertEquals(1, ObjectUtils.hashCodeMulti(array));
assertEquals(list0.hashCode(), ObjectUtils.hashCodeMulti());
assertEquals(list1.hashCode(), ObjectUtils.hashCodeMulti("a"));
assertEquals(list2.hashCode(), ObjectUtils.hashCodeMulti("a", "b"));
assertEquals(list3.hashCode(), ObjectUtils.hashCodeMulti("a", "b", "c"));
assertEquals(1, ObjectUtils.hashCodeMulti(array));
assertEquals(Integer.toHexString(System.identityHashCode(i)), ObjectUtils.identityHashCodeHex(i));
assertEquals(Integer.toHexString(System.identityHashCode(zero)), ObjectUtils.identityHashCodeHex(zero));
assertEquals(Integer.toHexString(System.identityHashCode(null)), ObjectUtils.identityHashCodeHex(null));
assertEquals(expected, appendable.toString());
assertThrows(NullPointerException.class, () -> ObjectUtils.identityToString((Appendable) null, "tmp"));
assertThrows(NullPointerException.class,() -> ObjectUtils.identityToString((Appendable) (new StringBuilder()), null));
assertEquals(expected, ObjectUtils.identityToString(i));
assertNull(ObjectUtils.identityToString(null));
assertEquals(expected, builder.toString());
assertThrows(NullPointerException.class, () -> ObjectUtils.identityToString((StrBuilder) null, "tmp"));
assertThrows(NullPointerException.class, () -> ObjectUtils.identityToString(new StrBuilder(), null));
assertEquals("java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)),ObjectUtils.identityToString(FOO));
assertEquals(expected, buffer.toString());
assertThrows(NullPointerException.class, () -> ObjectUtils.identityToString((StringBuffer) null, "tmp"));
assertThrows(NullPointerException.class, () -> ObjectUtils.identityToString(new StringBuffer(), null));
assertEquals(expected, builder.toString());
assertEquals(expected, builder.toString());
assertThrows(NullPointerException.class, () -> ObjectUtils.identityToString((StringBuilder) null, "tmp"));
assertThrows(NullPointerException.class, () -> ObjectUtils.identityToString(new StringBuilder(), null));
assertTrue(ObjectUtils.isEmpty(null));
assertTrue(ObjectUtils.isEmpty(""));
assertTrue(ObjectUtils.isEmpty(new int[] {}));
assertTrue(ObjectUtils.isEmpty(Collections.emptyList()));
assertTrue(ObjectUtils.isEmpty(Collections.emptySet()));
assertTrue(ObjectUtils.isEmpty(Collections.emptyMap()));
assertTrue(ObjectUtils.isEmpty(Optional.empty()));
assertTrue(ObjectUtils.isEmpty(Optional.ofNullable(null)));
assertFalse(ObjectUtils.isEmpty("  "));
assertFalse(ObjectUtils.isEmpty("ab"));
assertFalse(ObjectUtils.isEmpty(NON_EMPTY_ARRAY));
assertFalse(ObjectUtils.isEmpty(NON_EMPTY_LIST));
assertFalse(ObjectUtils.isEmpty(NON_EMPTY_SET));
assertFalse(ObjectUtils.isEmpty(NON_EMPTY_MAP));
assertFalse(ObjectUtils.isEmpty(Optional.of(new Object())));
assertFalse(ObjectUtils.isEmpty(Optional.ofNullable(new Object())));
assertFalse(ObjectUtils.isArray(null));
assertFalse(ObjectUtils.isArray(""));
assertFalse(ObjectUtils.isArray("abg"));
assertFalse(ObjectUtils.isArray(123));
assertTrue(ObjectUtils.isArray(NON_EMPTY_ARRAY));
assertTrue(ObjectUtils.isArray(new int[]{1, 2, 3}));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_BOOLEAN_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_BOOLEAN_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_BYTE_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_CHAR_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_CLASS_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_DOUBLE_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_FIELD_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_FLOAT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_INT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_LONG_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_METHOD_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_OBJECT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_SHORT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_STRING_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_THROWABLE_ARRAY));
assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_TYPE_ARRAY));
assertFalse(ObjectUtils.isNotEmpty(null));
assertFalse(ObjectUtils.isNotEmpty(""));
assertFalse(ObjectUtils.isNotEmpty(new int[] {}));
assertFalse(ObjectUtils.isNotEmpty(Collections.emptyList()));
assertFalse(ObjectUtils.isNotEmpty(Collections.emptySet()));
assertFalse(ObjectUtils.isNotEmpty(Collections.emptyMap()));
assertFalse(ObjectUtils.isNotEmpty(Optional.empty()));
assertFalse(ObjectUtils.isNotEmpty(Optional.ofNullable(null)));
assertTrue(ObjectUtils.isNotEmpty("  "));
assertTrue(ObjectUtils.isNotEmpty("ab"));
assertTrue(ObjectUtils.isNotEmpty(NON_EMPTY_ARRAY));
assertTrue(ObjectUtils.isNotEmpty(NON_EMPTY_LIST));
assertTrue(ObjectUtils.isNotEmpty(NON_EMPTY_SET));
assertTrue(ObjectUtils.isNotEmpty(NON_EMPTY_MAP));
assertTrue(ObjectUtils.isNotEmpty(Optional.of(new Object())));
assertTrue(ObjectUtils.isNotEmpty(Optional.ofNullable(new Object())));
assertNotSame(nonNullComparable1, nonNullComparable2);
assertNull(ObjectUtils.max((String) null));
assertNull(ObjectUtils.max(nullArray));
assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1));
assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, null));
assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1, null));
assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, nonNullComparable2));
assertSame(nonNullComparable2, ObjectUtils.max(nonNullComparable2, nonNullComparable1));
assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, minComparable));
assertSame(nonNullComparable1, ObjectUtils.max(minComparable, nonNullComparable1));
assertSame(nonNullComparable1, ObjectUtils.max(null, minComparable, null, nonNullComparable1));
assertNull(ObjectUtils.max(null, null));
assertEquals("foo", ObjectUtils.median("foo"));
assertEquals("bar", ObjectUtils.median("foo", "bar"));
assertEquals("baz", ObjectUtils.median("foo", "bar", "baz"));
assertEquals("baz", ObjectUtils.median("foo", "bar", "baz", "blah"));
assertEquals("blah", ObjectUtils.median("foo", "bar", "baz", "blah", "wah"));
assertEquals(Integer.valueOf(5),ObjectUtils.median(Integer.valueOf(1), Integer.valueOf(5), Integer.valueOf(10)));
assertEquals(Integer.valueOf(7),ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8),Integer.valueOf(9)));
assertEquals(Integer.valueOf(6),ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8)));
assertThrows(IllegalArgumentException.class, ObjectUtils::<String>median);
assertThrows(NullPointerException.class, () -> ObjectUtils.median((String[]) null));
assertNotSame(nonNullComparable1, nonNullComparable2);
assertNull(ObjectUtils.min((String) null));
assertNull(ObjectUtils.min(nullArray));
assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1));
assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null));
assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null));
assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2));
assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1));
assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable));
assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1));
assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable));
assertNull(ObjectUtils.min(null, null));
assertNull(ObjectUtils.mode((Object[]) null));
assertNull(ObjectUtils.mode());
assertNull(ObjectUtils.mode("foo", "bar", "baz"));
assertNull(ObjectUtils.mode("foo", "bar", "baz", "foo", "bar"));
assertEquals("foo", ObjectUtils.mode("foo", "bar", "baz", "foo"));
assertEquals(Integer.valueOf(9),ObjectUtils.mode("foo", "bar", "baz", Integer.valueOf(9), Integer.valueOf(10), Integer.valueOf(9)));
assertFalse(ObjectUtils.notEqual(null, null), "ObjectUtils.notEqual(null, null) returned false");
assertTrue(ObjectUtils.notEqual(FOO, null), "ObjectUtils.notEqual(\"foo\", null) returned true");
assertTrue(ObjectUtils.notEqual(null, BAR), "ObjectUtils.notEqual(null, \"bar\") returned true");
assertTrue(ObjectUtils.notEqual(FOO, BAR), "ObjectUtils.notEqual(\"foo\", \"bar\") returned true");
assertFalse(ObjectUtils.notEqual(FOO, FOO), "ObjectUtils.notEqual(\"foo\", \"foo\") returned false");
assertNotNull(ObjectUtils.NULL);
assertTrue(ObjectUtils.NULL instanceof ObjectUtils.Null);
assertSame(ObjectUtils.NULL, SerializationUtils.clone(ObjectUtils.NULL));
assertEquals("apache", stringClone.getValue()