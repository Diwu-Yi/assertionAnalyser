assertEquals(message, e.getMessage());
assertEquals(message, e.getCause().getMessage());
assertEquals(message1, e.getMessage());
assertEquals(message2, e.getCause().getMessage());
assertTrue(inputStream.isClosed(), "inputStream should be closed");
assertFalse(inputStream.isClosed(), "inputStream should NOT be closed");
assertEquals('b', Uncheck.get(stream::read).intValue());
assertEquals(1, Uncheck.apply(n -> stream.skip(n), 1).intValue());
assertEquals('b', Uncheck.get(stream::read).intValue());
assertEquals(1, Uncheck.apply((o, l) -> stream.read(buf, o, l), 0, 1).intValue());
assertEquals('a', buf[0]);
assertEquals(1, Uncheck.apply((b, o, l) -> stream.read(b, o, l), buf, 0, 1).intValue());
assertEquals('a', buf[0]);
assertEquals('a', Uncheck.get(() -> newInputStream().read()).intValue());
assertEquals('b', Uncheck.get(stream::read).intValue());
assertEquals(0, c.compare(lessFile, moreFile), "less,more");
assertEquals(0, c.compare(moreFile, lessFile), "more,less");
assertEquals("CompositeFileComparator{}", c.toString(), "toString");
assertEquals(0, c.compare(lessFile, moreFile), "less,more");
assertEquals(0, c.compare(moreFile, lessFile), "more,less");
assertEquals("CompositeFileComparator{}", c.toString(), "toString");
assertEquals(0, c.compare(equalFile1, equalFile2), "equal");
assertTrue(c.compare(lessFile, moreFile) < 0, "less");
assertTrue(c.compare(moreFile, lessFile) > 0, "more");
assertEquals(0, sensitive.compare(equalFile1, equalFile2), "sensitive file1 & file2 = 0");
assertTrue(sensitive.compare(equalFile1, file3) > 0, "sensitive file1 & file3 > 0");
assertTrue(sensitive.compare(equalFile1, lessFile) > 0, "sensitive file1 & less  > 0");
assertEquals(0, insensitive.compare(equalFile1, equalFile2), "insensitive file1 & file2 = 0");
assertEquals(0, insensitive.compare(equalFile1, file3), "insensitive file1 & file3 = 0");
assertTrue(insensitive.compare(equalFile1, lessFile) > 0, "insensitive file1 & file4 > 0");
assertTrue(insensitive.compare(file3, lessFile) > 0, "insensitive file3 & less  > 0");
assertEquals(0, comparator.compare(equalFile1, equalFile2), "equal");
assertTrue(comparator.compare(lessFile, moreFile) < 0, "less");
assertTrue(comparator.compare(moreFile, lessFile) > 0, "more");
assertEquals(0, reverse.compare(equalFile1, equalFile2), "equal");
assertTrue(reverse.compare(moreFile, lessFile) < 0, "less");
assertTrue(reverse.compare(lessFile, moreFile) > 0, "more");
assertSame(lessFile, files[0], "equal");
assertSame(equalFile1, files[1], "less");
assertSame(moreFile, files[2], "more");
assertNull(comparator.sort((File[])null));
assertSame(lessFile, files.get(0), "equal");
assertSame(equalFile1, files.get(1), "less");
assertSame(moreFile, files.get(2), "more");
assertNull(comparator.sort((List<File>)null));
assertNotNull(comparator.toString(), "comparator");
assertTrue(reverse.toString().startsWith("ReverseFileComparator["), "reverse");
assertEquals(0, sensitive.compare(equalFile1, equalFile2), "sensitive file1 & file2 = 0");
assertTrue(sensitive.compare(equalFile1, file3) > 0, "sensitive file1 & file3 > 0");
assertTrue(sensitive.compare(equalFile1, lessFile) > 0, "sensitive file1 & less  > 0");
assertEquals(0, insensitive.compare(equalFile1, equalFile2), "insensitive file1 & file2 = 0");
assertEquals(0, insensitive.compare(equalFile1, file3), "insensitive file1 & file3 = 0");
assertTrue(insensitive.compare(equalFile1, lessFile) > 0, "insensitive file1 & file4 > 0");
assertTrue(insensitive.compare(file3, lessFile) > 0, "insensitive file3 & less  > 0");
assertEquals(0, comparator.compare(smallerDir, largerDir), "sumDirectoryContents=false");
assertEquals(-1, SizeFileComparator.SIZE_SUMDIR_COMPARATOR.compare(smallerDir, largerDir), "less");
assertEquals(1, SizeFileComparator.SIZE_SUMDIR_REVERSE.compare(smallerDir, largerDir), "less");
assertFalse(nonexistantFile.exists());
assertTrue(comparator.compare(nonexistantFile, moreFile) < 0, "less");
assertEquals(0, sensitive.compare(equalFile1, equalFile2), "sensitive file1 & file2 = 0");
assertTrue(sensitive.compare(equalFile1, file3) > 0, "sensitive file1 & file3 > 0");
assertTrue(sensitive.compare(equalFile1, lessFile) > 0, "sensitive file1 & less  > 0");
assertEquals(0, insensitive.compare(equalFile1, equalFile2), "insensitive file1 & file2 = 0");
assertEquals(0, insensitive.compare(equalFile1, file3), "insensitive file1 & file3 = 0");
assertTrue(insensitive.compare(equalFile1, lessFile) > 0, "insensitive file1 & file4 > 0");
assertTrue(insensitive.compare(file3, lessFile) > 0, "insensitive file3 & less  > 0");
/** Assert that the contents of two byte arrays are the same. */private void assertEqualContent(final byte[] b0, final byte[] b1) {assertArrayEquals(b0, b1, "Content not equal according to java.util.Arrays#equals()");
assertNotSame(is, bis);
assertSame(bis, IOUtils.buffer(bis));
assertNotSame(is, bis);
assertSame(bis, IOUtils.buffer(bis));
assertSame(bis, IOUtils.buffer(bis, 1024));
assertThrows(NullPointerException.class, ()->IOUtils.buffer((InputStream) null),npeExpectedMessage );
assertThrows(NullPointerException.class, ()->IOUtils.buffer((OutputStream) null),npeExpectedMessage);
assertThrows(NullPointerException.class, ()->IOUtils.buffer((Reader) null),npeExpectedMessage);
assertThrows(NullPointerException.class, ()->IOUtils.buffer((Writer) null),npeExpectedMessage);
assertNotSame(is, bis);
assertSame(bis, IOUtils.buffer(bis));
assertNotSame(os, bos);
assertSame(bos, IOUtils.buffer(bos));
assertSame(bos, IOUtils.buffer(bos, 1024));
assertNotSame(is, bis);
assertSame(bis, IOUtils.buffer(bis));
assertNotSame(r, br);
assertSame(br, IOUtils.buffer(br));
assertSame(br, IOUtils.buffer(br, 1024));
assertNotSame(nullWriter, bis);
assertSame(bis, IOUtils.buffer(bis));
assertNotSame(nullWriter, bw);
assertSame(bw, IOUtils.buffer(bw));
assertSame(bw, IOUtils.buffer(bw, 1024));
assertNotSame(w, a);
assertEquals(AppendableWriter.class, w.getClass());
assertSame(w, IOUtils.writer(w));
assertThrows(NullPointerException.class, () -> IOUtils.writer(null));
assertNotSame(w, a);
assertEquals(StringBuilderWriter.class, w.getClass());
assertSame(w, IOUtils.writer(w));
assertDoesNotThrow(() -> IOUtils.close((Closeable) null));
assertDoesNotThrow(() -> IOUtils.close(new StringReader("s")));
assertThrows(IOException.class, () -> IOUtils.close(new ThrowOnCloseReader(new StringReader("s"))));
assertDoesNotThrow(() -> IOUtils.close(nullCloseable, null)); // null consumer
assertDoesNotThrow(() -> IOUtils.close(new StringReader("s"), null)); // null consumer
assertDoesNotThrow(() -> IOUtils.close(new ThrowOnCloseReader(new StringReader("s")), null)); // null consumer
assertDoesNotThrow(() -> IOUtils.close(nullCloseable, nullConsumer));
assertDoesNotThrow(() -> IOUtils.close(new StringReader("s"), nullConsumer));
assertDoesNotThrow(() -> IOUtils.close(new ThrowOnCloseReader(new StringReader("s")), nullConsumer));
assertDoesNotThrow(() -> IOUtils.close(nullCloseable, silentConsumer));
assertDoesNotThrow(() -> IOUtils.close(new StringReader("s"), silentConsumer));
assertDoesNotThrow(() -> IOUtils.close(new ThrowOnCloseReader(new StringReader("s")), silentConsumer));
assertDoesNotThrow(() -> IOUtils.close(nullCloseable, noisyConsumer)); // no throw
assertDoesNotThrow(() -> IOUtils.close(new StringReader("s"), noisyConsumer)); // no throw
assertThrows(IOException.class,() -> IOUtils.close(new ThrowOnCloseReader(new StringReader("s")), noisyConsumer)); // closeable throws
assertDoesNotThrow(() -> IOUtils.close(nullCloseable, nullCloseable));
assertDoesNotThrow(() -> IOUtils.close(closeables));
assertDoesNotThrow(() -> IOUtils.close((Closeable[]) null));
assertDoesNotThrow(() -> IOUtils.close(new StringReader("s"), nullCloseable));
assertThrows(IOException.class, () -> IOUtils.close(nullCloseable, new ThrowOnCloseReader(new StringReader("s"))));
assertDoesNotThrow(() -> IOUtils.closeQuietly(closeable, null, closeable));
assertDoesNotThrow(() -> IOUtils.closeQuietly(Arrays.asList(closeable, null, closeable)));
assertDoesNotThrow(() -> IOUtils.closeQuietly(Stream.of(closeable, null, closeable)));
assertDoesNotThrow(() -> IOUtils.closeQuietly((Iterable<Closeable>) null));
assertDoesNotThrow(() -> {IOUtils.closeQuietly(BrokenInputStream.INSTANCE);
assertDoesNotThrow(() -> {IOUtils.closeQuietly(BrokenOutputStream.INSTANCE);
@SuppressWarnings("squid:S2699") // Suppress "Add at least one assertion to this test case"@Testpublic void testCloseQuietly_Selector() {Selector selector = null;
@SuppressWarnings("squid:S2699") // Suppress "Add at least one assertion to this test case"@Testpublic void testCloseQuietly_SelectorIOException() {final Selector selector = new SelectorAdapter() {@Overridepublic void close() throws IOException {throw new IOException();
@SuppressWarnings("squid:S2699") // Suppress "Add at least one assertion to this test case"@Testpublic void testCloseQuietly_SelectorNull() {final Selector selector = null;
@SuppressWarnings("squid:S2699") // Suppress "Add at least one assertion to this test case"@Testpublic void testCloseQuietly_SelectorTwice() {Selector selector = null;
assertDoesNotThrow(() -> IOUtils.closeQuietly((ServerSocket) null));
assertDoesNotThrow(() -> IOUtils.closeQuietly(new ServerSocket()));
assertDoesNotThrow(() -> {IOUtils.closeQuietly(new ServerSocket() {@Overridepublic void close() throws IOException {throw new IOException();
assertDoesNotThrow(() -> IOUtils.closeQuietly((Socket) null));
assertDoesNotThrow(() -> IOUtils.closeQuietly(new Socket()));
assertDoesNotThrow(() -> {IOUtils.closeQuietly(new Socket() {@Overridepublic synchronized void close() throws IOException {throw new IOException();
assertDoesNotThrow(() -> IOUtils.close((URLConnection) null));
assertDoesNotThrow(() -> IOUtils.close(new URL("https://www.apache.org/").openConnection()));
assertDoesNotThrow(() -> IOUtils.close(new URL("file:///").openConnection()));
assertEquals('/', IOUtils.DIR_SEPARATOR_UNIX);
assertEquals('\\', IOUtils.DIR_SEPARATOR_WINDOWS);
assertEquals("\n", IOUtils.LINE_SEPARATOR_UNIX);
assertEquals("\r\n", IOUtils.LINE_SEPARATOR_WINDOWS);
assertEquals('\\', IOUtils.DIR_SEPARATOR);
assertEquals("\r\n", IOUtils.LINE_SEPARATOR);
assertEquals('/', IOUtils.DIR_SEPARATOR);
assertEquals("\n", IOUtils.LINE_SEPARATOR);
assertEquals('\r', IOUtils.CR);
assertEquals('\n', IOUtils.LF);
assertEquals(-1, IOUtils.EOF);
assertEquals(-1, IOUtils.copy(in, out));
assertEquals(size, IOUtils.consume(in), "consume()");
assertEquals(-1, IOUtils.copy(in, out));
assertEquals(size, IOUtils.consume(in), "consume()");
assertTrue(IOUtils.contentEquals((InputStream) null, null));
assertFalse(IOUtils.contentEquals(input1, null));
assertFalse(IOUtils.contentEquals(null, input1));
assertTrue(IOUtils.contentEquals(input1, input1));
assertTrue(IOUtils.contentEquals(input1, input1));
assertTrue(IOUtils.contentEquals(new ByteArrayInputStream(dataEmpty), new ByteArrayInputStream(dataEmpty)));
assertTrue(IOUtils.contentEquals(new BufferedInputStream(new ByteArrayInputStream(dataEmpty)),new BufferedInputStream(new ByteArrayInputStream(dataEmpty))));
assertTrue(IOUtils.contentEquals(new ByteArrayInputStream(dataAbc), new ByteArrayInputStream(dataAbc)));
assertFalse(IOUtils.contentEquals(new ByteArrayInputStream(dataAbcd), new ByteArrayInputStream(dataAbc)));
assertFalse(IOUtils.contentEquals(new ByteArrayInputStream(dataAbc), new ByteArrayInputStream(dataAbcd)));
assertFalse(IOUtils.contentEquals(new ByteArrayInputStream("apache".getBytes(StandardCharsets.UTF_8)),new ByteArrayInputStream("apacha".getBytes(StandardCharsets.UTF_8))));
assertFalse(IOUtils.contentEquals(new ByteArrayInputStream(bytes2XDefaultA),new ByteArrayInputStream(bytes2XDefaultB)));
assertFalse(IOUtils.contentEquals(new ByteArrayInputStream(bytes2XDefaultA),new ByteArrayInputStream(bytes2XDefaultA2)));
assertTrue(IOUtils.contentEquals(new ByteArrayInputStream(bytes2XDefaultA),new ByteArrayInputStream(bytes2XDefaultA)));
assertTrue(IOUtils.contentEquals(input1, input1));
assertTrue(IOUtils.contentEquals((Reader) null, null));
assertFalse(IOUtils.contentEquals(null, input1));
assertFalse(IOUtils.contentEquals(input1, null));
assertTrue(IOUtils.contentEquals(input1, input1));
assertTrue(IOUtils.contentEquals(input1, input1));
assertTrue(IOUtils.contentEquals(new StringReader(""), new StringReader("")));
assertTrue(IOUtils.contentEquals(new BufferedReader(new StringReader("")), new BufferedReader(new StringReader(""))));
assertTrue(IOUtils.contentEquals(new StringReader("ABC"), new StringReader("ABC")));
assertFalse(IOUtils.contentEquals(new StringReader("ABCD"), new StringReader("ABC")));
assertFalse(IOUtils.contentEquals(new StringReader("ABC"), new StringReader("ABCD")));
assertFalse(IOUtils.contentEquals(new StringReader("apache"), new StringReader("apacha")));
assertTrue(IOUtils.contentEqualsIgnoreEOL(null, null));
assertFalse(IOUtils.contentEqualsIgnoreEOL(null, input1));
assertFalse(IOUtils.contentEqualsIgnoreEOL(input1, null));
assertTrue(IOUtils.contentEqualsIgnoreEOL(input1, input1));
assertTrue(IOUtils.contentEqualsIgnoreEOL(input1, input1));
assertEquals(200, IOUtils.copyLarge(is, os, 0, 2000));
assertEquals(200, oarr.length);
assertEquals(1, oarr[1]);
assertEquals(79, oarr[79]);
assertEquals((char) -1, oarr[80]);
assertEquals(200, IOUtils.copyLarge(is, os, 0, -1));
assertEquals(200, oarr.length);
assertEquals(1, oarr[1]);
assertEquals(79, oarr[79]);
assertEquals((char) -1, oarr[80]);
assertEquals(100, IOUtils.copyLarge(is, os, 0, 100));
assertEquals(100, oarr.length);
assertEquals(1, oarr[1]);
assertEquals(79, oarr[79]);
assertEquals((char) -1, oarr[80]);
assertEquals(100, IOUtils.copyLarge(is, os, 10, 100));
assertEquals(100, oarr.length);
assertEquals(11, oarr[1]);
assertEquals(79, oarr[69]);
assertEquals((char) -1, oarr[70]);
assertThrows(EOFException.class, () -> IOUtils.copyLarge(is, os, 1000, 100));
assertEquals(200, IOUtils.copyLarge(is, os, 0, 2000));
assertEquals(200, oarr.length);
assertEquals(1, oarr[1]);
assertEquals(79, oarr[79]);
assertEquals(-1, oarr[80]);
assertEquals(200, IOUtils.copyLarge(is, os, 0, -1));
assertEquals(200, oarr.length);
assertEquals(1, oarr[1]);
assertEquals(79, oarr[79]);
assertEquals(-1, oarr[80]);
assertEquals(100, IOUtils.copyLarge(is, os, 0, 100));
assertEquals(100, oarr.length);
assertEquals(1, oarr[1]);
assertEquals(79, oarr[79]);
assertEquals(-1, oarr[80]);
assertEquals(100, IOUtils.copyLarge(is, os, 10, 100));
assertEquals(100, oarr.length);
assertEquals(11, oarr[1]);
assertEquals(79, oarr[69]);
assertEquals(-1, oarr[70]);
assertThrows(EOFException.class, () -> IOUtils.copyLarge(is, os, 1000, 100));
assertEquals(100, IOUtils.copyLarge(is, os, -10, 100));
assertEquals(100, oarr.length);
assertEquals(1, oarr[1]);
assertEquals(79, oarr[79]);
assertEquals(-1, oarr[80]);
assertEquals(FILE_SIZE, IOUtils.read(input, buffer));
assertEquals(0, IOUtils.read(input, buffer));
assertEquals(0, buffer.remaining());
assertEquals(0, input.read(buffer));
assertThrows(EOFException.class, ()->IOUtils.readFully(input, buffer),"Should have failed with EOFException");
assertEqualContent(result, bytes);
assertThrows(IllegalArgumentException.class, ()-> IOUtils.readFully(input, buffer, 0, -1),"Should have failed with IllegalArgumentException");
assertThrows(EOFException.class, ()-> IOUtils.readFully(input, buffer, 0, 2),"Should have failed with EOFException");
assertEquals("wxabcd1234", new String(buffer, 0, buffer.length, StandardCharsets.UTF_8));
assertEquals(FILE_SIZE, buffer.position());
assertEquals(0, buffer.remaining());
assertEquals(0, input.read(buffer));
assertEquals(FILE_SIZE, buffer.position());
assertEquals(0, buffer.remaining());
assertEquals(0, input.read(buffer));
assertThrows(EOFException.class, ()->IOUtils.readFully(input, buffer),"Should have failed with EOFxception");
assertThrows(IllegalArgumentException.class, ()->IOUtils.readFully(input, buffer, 0, -1),"Should have failed with IllegalArgumentException" );
assertThrows(EOFException.class, ()->IOUtils.readFully(input, buffer, 0, 5),"Should have failed with EOFException" );
assertEquals("wxabcd1234", new String(buffer));
assertEquals(Arrays.asList(data), lines);
assertEquals(-1, in.read());
assertEquals(Arrays.asList(data), lines);
assertEquals(-1, in.read());
assertEquals(Arrays.asList(data), lines);
assertEquals(-1, in.read());
assertNotNull(bytes);
assertEquals(fileSize, bytes.length);
assertNotNull(bytes);
assertEquals(fileSize, bytes.length);
assertNotNull(bytes);
assertEquals(fileSize, bytes.length);
assertNotNull(bytes);
assertEquals(fileSize, bytes.length);
assertThrows(IOException.class, () -> IOUtils.resourceToByteArray("/non-existing-file.bin"));
assertThrows(IOException.class,() -> IOUtils.resourceToByteArray("non-existing-file.bin", ClassLoader.getSystemClassLoader()));
assertThrows(NullPointerException.class, () -> IOUtils.resourceToByteArray(null));
assertThrows(NullPointerException.class,() -> IOUtils.resourceToByteArray(null, ClassLoader.getSystemClassLoader()));
assertNotNull(content);
assertEquals(fileSize, content.getBytes().length);
assertNotNull(content);
assertEquals(fileSize, content.getBytes().length);
assertNotNull(content);
assertEquals(fileSize, content.getBytes().length);
assertNotNull(content);
assertEquals(fileSize, content.getBytes().length);
assertThrows(IOException.class,() -> IOUtils.resourceToString("/non-existing-file.bin", StandardCharsets.UTF_8));
assertThrows(IOException.class, () -> IOUtils.resourceToString("non-existing-file.bin", StandardCharsets.UTF_8,ClassLoader.getSystemClassLoader()));
@SuppressWarnings("squid:S2699") // Suppress "Add at least one assertion to this test case"@Testpublic void testResourceToString_NullCharset() throws Exception {IOUtils.resourceToString("/org/apache/commons/io//test-file-utf8.bin", null);
@SuppressWarnings("squid:S2699") // Suppress "Add at least one assertion to this test case"@Testpublic void testResourceToString_NullCharset_WithClassLoader() throws Exception {IOUtils.resourceToString("org/apache/commons/io/test-file-utf8.bin", null, ClassLoader.getSystemClassLoader());
assertThrows(NullPointerException.class, () -> IOUtils.resourceToString(null, StandardCharsets.UTF_8));
assertThrows(NullPointerException.class,() -> IOUtils.resourceToString(null, StandardCharsets.UTF_8, ClassLoader.getSystemClassLoader()));
assertNotNull(url);
assertTrue(url.getFile().endsWith("/test-file-utf8.bin"));
assertNotNull(url);
assertTrue(url.getFile().endsWith("/org/apache/commons/io/test-file-utf8.bin"));
assertNotNull(url);
assertTrue(url.getFile().endsWith("/org/apache/commons/io/FileUtilsTestDataCR.dat"));
assertNotNull(url);
assertTrue(url.getFile().endsWith("/org/apache/commons/io/FileUtilsTestDataCR.dat"));
assertThrows(IOException.class, () -> IOUtils.resourceToURL("/non-existing-file.bin"));
assertThrows(IOException.class,() -> IOUtils.resourceToURL("non-existing-file.bin", ClassLoader.getSystemClassLoader()));
assertThrows(NullPointerException.class, () -> IOUtils.resourceToURL(null));
assertThrows(NullPointerException.class, () -> IOUtils.resourceToURL(null, ClassLoader.getSystemClassLoader()));
assertEquals(ifEquals, IOUtils.contentEqualsIgnoreEOL(new CharArrayReader(s1.toCharArray()),new CharArrayReader(s2.toCharArray())), "failed at :{" + s1 + "," + s2 + "}");assertEquals(ifEquals, IOUtils.contentEqualsIgnoreEOL(new CharArrayReader(s2.toCharArray()),new CharArrayReader(s1.toCharArray())), "failed at :{" + s2 + "," + s1 + "}");assertTrue(IOUtils.contentEqualsIgnoreEOL(new CharArrayReader(s1.toCharArray()),new CharArrayReader(s1.toCharArray())),"failed at :{" + s1 + "," + s1 + "}");assertTrue(IOUtils.contentEqualsIgnoreEOL(new CharArrayReader(s2.toCharArray()),new CharArrayReader(s2.toCharArray())), "failed at :{" + s2 + "," + s2 + "}");}@Testpublic void testSkip_FileReader() throws Exception {try (Reader in = Files.newBufferedReader(testFilePath)) {assertEquals(FILE_SIZE - 10, IOUtils.skip(in, FILE_SIZE - 10));assertEquals(10, IOUtils.skip(in, 20));assertEquals(0, IOUtils.skip(in, 10));}}@Testpublic void testSkip_InputStream() throws Exception {try (InputStream in = Files.newInputStream(testFilePath)) {assertEquals(FILE_SIZE - 10, IOUtils.skip(in, FILE_SIZE - 10));assertEquals(10, IOUtils.skip(in, 20));assertEquals(0, IOUtils.skip(in, 10));}}@Testpublic void testSkip_ReadableByteChannel() throws Exception {final FileInputStream fileInputStream = new FileInputStream(testFile);final FileChannel fileChannel = fileInputStream.getChannel();try {assertEquals(FILE_SIZE - 10, IOUtils.skip(fileChannel, FILE_SIZE - 10));assertEquals(10, IOUtils.skip(fileChannel, 20));assertEquals(0, IOUtils.skip(fileChannel, 10));} finally {IOUtils.closeQuietly(fileChannel, fileInputStream);}}@Testpublic void testSkipFully_InputStream() throws Exception {final int size = 1027;final InputStream input = new ByteArrayInputStream(new byte[size]);assertThrows(IllegalArgumentException.class, ()->IOUtils.skipFully(input, -1),"Should have failed with IllegalArgumentException" );IOUtils.skipFully(input, 0);IOUtils.skipFully(input, size - 1);assertThrows(IOException.class, ()->  IOUtils.skipFully(input, 2),"Should have failed with IOException" );IOUtils.closeQuietly(input);}@Testpublic void testSkipFully_ReadableByteChannel() throws Exception {final FileInputStream fileInputStream = new FileInputStream(testFile);final FileChannel fileChannel = fileInputStream.getChannel();try {assertThrows(IllegalArgumentException.class, ()->IOUtils.skipFully(fileChannel, -1),"Should have failed with IllegalArgumentException" );IOUtils.skipFully(fileChannel, 0);IOUtils.skipFully(fileChannel, FILE_SIZE - 1);assertThrows(IOException.class, ()->IOUtils.skipFully(fileChannel, 2),"Should have failed with IOException" );} finally {IOUtils.closeQuietly(fileChannel, fileInputStream);}}@Testpublic void testSkipFully_Reader() throws Exception {final int size = 1027;final Reader input = new CharArrayReader(new char[size]);IOUtils.skipFully(input, 0);IOUtils.skipFully(input, size - 3);assertThrows(IllegalArgumentException.class, ()->IOUtils.skipFully(input, -1),"Should have failed with IllegalArgumentException" );assertThrows(IOException.class, ()->IOUtils.skipFully(input, 5),"Should have failed with IOException" );IOUtils.closeQuietly(input);}@Testpublic void testStringToOutputStream() throws Exception {final File destination = TestUtils.newFile(temporaryFolder, "copy5.txt");final String str;try (Reader fin = Files.newBufferedReader(testFilePath)) {// Create our String. Rely on testReaderToString() to make sure this is valid.str = IOUtils.toString(fin);}try (OutputStream fout = Files.newOutputStream(destination.toPath())) {CopyUtils.copy(str, fout);// Note: this method *does* flush. It is equivalent to:// OutputStreamWriter _out = new OutputStreamWriter(fout);// CopyUtils.copy( str, _out, 4096 ); // copy( Reader, Writer, int );// _out.flush();// out = fout;// note: we don't flush here; this IOUtils method does it for usTestUtils.checkFile(destination, testFile);TestUtils.checkWrite(fout);}TestUtils.deleteFile(destination);}@Testpublic void testToBufferedInputStream_InputStream() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final InputStream in = IOUtils.toBufferedInputStream(fin);final byte[] out = IOUtils.toByteArray(in);assertNotNull(out);assertEquals(0, fin.available(), "Not all bytes were read");assertEquals(FILE_SIZE, out.length, "Wrong output size");TestUtils.assertEqualContent(out, testFile);}}@Testpublic void testToBufferedInputStreamWithBufferSize_InputStream() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final InputStream in = IOUtils.toBufferedInputStream(fin, 2048);final byte[] out = IOUtils.toByteArray(in);assertNotNull(out);assertEquals(0, fin.available(), "Not all bytes were read");assertEquals(FILE_SIZE, out.length, "Wrong output size");TestUtils.assertEqualContent(out, testFile);}}@Testpublic void testToByteArray_InputStream() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final byte[] out = IOUtils.toByteArray(fin);assertNotNull(out);assertEquals(0, fin.available(), "Not all bytes were read");assertEquals(FILE_SIZE, out.length, "Wrong output size");TestUtils.assertEqualContent(out, testFile);}}@Test@Disabled("Disable by default as it uses too much memory and can cause builds to fail.")public void testToByteArray_InputStream_LongerThanIntegerMaxValue() throws Exception {final CircularInputStream cin = new CircularInputStream(IOUtils.byteArray(), Integer.MAX_VALUE + 1L);assertThrows(IllegalArgumentException.class, () -> IOUtils.toByteArray(cin));}@Testpublic void testToByteArray_InputStream_NegativeSize() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final IllegalArgumentException exc = assertThrows(IllegalArgumentException.class,()->IOUtils.toByteArray(fin, -1), "Should have failed with IllegalArgumentException" );assertTrue(exc.getMessage().startsWith("Size must be equal or greater than zero"),"Exception message does not start with \"Size must be equal or greater than zero\"");}}@Testpublic void testToByteArray_InputStream_Size() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final byte[] out = IOUtils.toByteArray(fin, testFile.length());assertNotNull(out);assertEquals(0, fin.available(), "Not all bytes were read");assertEquals(FILE_SIZE, out.length, "Wrong output size: out.length=" + out.length + "!=" + FILE_SIZE);TestUtils.assertEqualContent(out, testFile);}}@Testpublic void testToByteArray_InputStream_SizeIllegal() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final IOException exc = assertThrows(IOException.class,()->IOUtils.toByteArray(fin, testFile.length() + 1), "Should have failed with IOException" );assertTrue(exc.getMessage().startsWith("Unexpected read size"),"Exception message does not start with \"Unexpected read size\"");}}@Testpublic void testToByteArray_InputStream_SizeLong() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final IllegalArgumentException exc = assertThrows(IllegalArgumentException.class,()-> IOUtils.toByteArray(fin, (long) Integer.MAX_VALUE + 1),"Should have failed with IllegalArgumentException" );assertTrue(exc.getMessage().startsWith("Size cannot be greater than Integer max value"),"Exception message does not start with \"Size cannot be greater than Integer max value\"");}}@Testpublic void testToByteArray_InputStream_SizeOne() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final byte[] out = IOUtils.toByteArray(fin, 1);assertNotNull(out, "Out cannot be null");assertEquals(1, out.length, "Out length must be 1");}}@Testpublic void testToByteArray_InputStream_SizeZero() throws Exception {try (InputStream fin =Files.newInputStream(testFilePath)) {final byte[] out = IOUtils.toByteArray(fin, 0);assertNotNull(out, "Out cannot be null");assertEquals(0, out.length, "Out length must be 0");}}@Testpublic void testToByteArray_Reader() throws IOException {final String charsetName = UTF_8;final byte[] expecteds = charsetName.getBytes(charsetName);byte[] actuals = IOUtils.toByteArray(new InputStreamReader(new ByteArrayInputStream(expecteds)));assertArrayEquals(expecteds, actuals);actuals = IOUtils.toByteArray(new InputStreamReader(new ByteArrayInputStream(expecteds)), charsetName);assertArrayEquals(expecteds, actuals);}@Testpublic void testToByteArray_String() throws Exception {try (Reader fin = Files.newBufferedReader(testFilePath)) {// Create our String. Rely on testReaderToString() to make sure this is valid.final String str = IOUtils.toString(fin);final byte[] out = IOUtils.toByteArray(str);assertEqualContent(str.getBytes(), out);}}@Testpublic void testToByteArray_URI() throws Exception {final URI url = testFile.toURI();final byte[] actual = IOUtils.toByteArray(url);assertEquals(FILE_SIZE, actual.length);}@Testpublic void testToByteArray_URL() throws Exception {final URL url = testFile.toURI().toURL();final byte[] actual = IOUtils.toByteArray(url);assertEquals(FILE_SIZE, actual.length);}@Testpublic void testToByteArray_URLConnection() throws Exception {final byte[] actual;try (CloseableURLConnection urlConnection = CloseableURLConnection.open(testFile.toURI())) {actual = IOUtils.toByteArray(urlConnection);}assertEquals(FILE_SIZE, actual.length);}@Testpublic void testToCharArray_InputStream() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final char[] out = IOUtils.toCharArray(fin);assertNotNull(out);assertEquals(0, fin.available(), "Not all chars were read");assertEquals(FILE_SIZE, out.length, "Wrong output size");TestUtils.assertEqualContent(out, testFile);}}@Testpublic void testToCharArray_InputStream_CharsetName() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final char[] out = IOUtils.toCharArray(fin, UTF_8);assertNotNull(out);assertEquals(0, fin.available(), "Not all chars were read");assertEquals(FILE_SIZE, out.length, "Wrong output size");TestUtils.assertEqualContent(out, testFile);}}@Testpublic void testToCharArray_Reader() throws Exception {try (Reader fr = Files.newBufferedReader(testFilePath)) {final char[] out = IOUtils.toCharArray(fr);assertNotNull(out);assertEquals(FILE_SIZE, out.length, "Wrong output size");TestUtils.assertEqualContent(out, testFile);}}/*** Test for {@link IOUtils#toInputStream(CharSequence)} and {@link IOUtils#toInputStream(CharSequence, String)}.* Note, this test utilizes on {@link IOUtils#toByteArray(java.io.InputStream)} and so relies on* {@link #testToByteArray_InputStream()} to ensure this method functions correctly.** @throws Exception on error*/@Testpublic void testToInputStream_CharSequence() throws Exception {final CharSequence csq = new StringBuilder("Abc123Xyz!");InputStream inStream = IOUtils.toInputStream(csq); // deliberately testing deprecated methodbyte[] bytes = IOUtils.toByteArray(inStream);assertEqualContent(csq.toString().getBytes(), bytes);inStream = IOUtils.toInputStream(csq, (String) null);bytes = IOUtils.toByteArray(inStream);assertEqualContent(csq.toString().getBytes(), bytes);inStream = IOUtils.toInputStream(csq, UTF_8);bytes = IOUtils.toByteArray(inStream);assertEqualContent(csq.toString().getBytes(StandardCharsets.UTF_8), bytes);}/*** Test for {@link IOUtils#toInputStream(String)} and {@link IOUtils#toInputStream(String, String)}. Note, this test* utilizes on {@link IOUtils#toByteArray(java.io.InputStream)} and so relies on* {@link #testToByteArray_InputStream()} to ensure this method functions correctly.** @throws Exception on error*/@Testpublic void testToInputStream_String() throws Exception {final String str = "Abc123Xyz!";InputStream inStream = IOUtils.toInputStream(str);byte[] bytes = IOUtils.toByteArray(inStream);assertEqualContent(str.getBytes(), bytes);inStream = IOUtils.toInputStream(str, (String) null);bytes = IOUtils.toByteArray(inStream);assertEqualContent(str.getBytes(), bytes);inStream = IOUtils.toInputStream(str, UTF_8);bytes = IOUtils.toByteArray(inStream);assertEqualContent(str.getBytes(StandardCharsets.UTF_8), bytes);}@Testpublic void testToString_ByteArray() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final byte[] in = IOUtils.toByteArray(fin);// Create our byte[]. Rely on testInputStreamToByteArray() to make sure this is valid.final String str = IOUtils.toString(in);assertEqualContent(in, str.getBytes());}}@Testpublic void testToString_InputStream() throws Exception {try (InputStream fin = Files.newInputStream(testFilePath)) {final String out = IOUtils.toString(fin);assertNotNull(out);assertEquals(0, fin.available(), "Not all bytes were read");assertEquals(FILE_SIZE, out.length(), "Wrong output size");}}@Testpublic void testToString_Reader() throws Exception {try (Reader fin = Files.newBufferedReader(testFilePath)) {final String out = IOUtils.toString(fin);assertNotNull(out);assertEquals(FILE_SIZE, out.length(), "Wrong output size");}}@Testpublic void testToString_URI() throws Exception {final URI url = testFile.toURI();final String out = IOUtils.toString(url);assertNotNull(out);assertEquals(FILE_SIZE, out.length(), "Wrong output size");}private void testToString_URI(final String encoding) throws Exception {final URI uri = testFile.toURI();final String out = IOUtils.toString(uri, encoding);assertNotNull(out);assertEquals(FILE_SIZE, out.length(), "Wrong output size");}@Testpublic void testToString_URI_CharsetName() throws Exception {testToString_URI("US-ASCII");}@Testpublic void testToString_URI_CharsetNameNull() throws Exception {testToString_URI(null);}@Testpublic void testToString_URL() throws Exception {final URL url = testFile.toURI().toURL();final String out = IOUtils.toString(url);assertNotNull(out);assertEquals(FILE_SIZE, out.length(), "Wrong output size");}private void testToString_URL(final String encoding) throws Exception {final URL url = testFile.toURI().toURL();final String out = IOUtils.toString(url, encoding);assertNotNull(out);assertEquals(FILE_SIZE, out.length(), "Wrong output size");}@Testpublic void testToString_URL_CharsetName() throws Exception {testToString_URL("US-ASCII");}@Testpublic void testToString_URL_CharsetNameNull() throws Exception {testToString_URL(null);}/*** IO-764 IOUtils.write() throws NegativeArraySizeException while writing big strings.* <pre>* java.lang.OutOfMemoryError: Java heap space*     at java.lang.StringCoding.encode(StringCoding.java:350)*     at java.lang.String.getBytes(String.java:941)*     at org.apache.commons.io.IOUtils.write(IOUtils.java:3367)*     at org.apache.commons.io.IOUtilsTest.testBigString(IOUtilsTest.java:1659)* </pre>*/@Testpublic void testWriteBigString() throws IOException {// 3_000_000 is a size that we can allocate for the test string with Java 8 on the command line as:// mvn clean test -Dtest=IOUtilsTest -DtestBigString=3000000// 6_000_000 failed with the above//// TODO Can we mock the test string for this test to pretend to be larger?// Mocking the length seems simple but how about the data?final int repeat = Integer.getInteger("testBigString", 3_000_000);final String data;try {data = StringUtils.repeat("\uD83D", repeat);} catch (final OutOfMemoryError e) {System.err.printf("Don't fail the test if we cannot build the fixture, just log, fixture size = %,d%n.", repeat);e.printStackTrace();return;}try (CountingOutputStream os = new CountingOutputStream(NullOutputStream.INSTANCE)) {IOUtils.write(data, os, StandardCharsets.UTF_8);assertEquals(repeat, os.getByteCount());}}@Testpublic void testWriteLittleString() throws IOException {final String data = "\uD83D";// White-box test to check that not closing the internal channel is not a problem.for (int i = 0; i < 1_000_000; i++) {try (CountingOutputStream os = new CountingOutputStream(NullOutputStream.INSTANCE)) {IOUtils.write(data, os, StandardCharsets.UTF_8);assertEquals(data.length(), os.getByteCount());}}}}
private void assertMatch(final String text, final String wildcard, final boolean expected) {assertEquals(expected, FilenameUtils.wildcardMatch(text, wildcard), text + " " + wildcard);
assertMatch("aaa", "aa*?", true);
//      assertMatch("aaa", "a*?", true);
//      assertMatch("aaa", "*?", true);
assertMatch("",    "?*",   false);
assertMatch("a",   "a?*",  false);
assertMatch("aa",  "aa?*", false);
assertMatch("a",   "?*",   true);
assertMatch("aa",  "?*",   true);
assertMatch("aaa", "?*",   true);
assertMatch("",    "?", false);
assertMatch("a",   "a?", false);
assertMatch("aa",  "aa?", false);
assertMatch("aab", "aa?", true);
assertMatch("aaa", "*a", true);
assertTrue(data[i][0].equalsIgnoreCase(data[i][1]), "Test data corrupt: " + i);
assertTrue(match, Locale.getDefault().toString() + ": " + i);
assertFalse(FilenameUtils.wildcardMatch(null, "Foo"));
assertFalse(FilenameUtils.wildcardMatch("Foo", null));
assertTrue(FilenameUtils.wildcardMatch(null, null));
assertTrue(FilenameUtils.wildcardMatch("Foo", "Foo"));
assertTrue(FilenameUtils.wildcardMatch("", ""));
assertTrue(FilenameUtils.wildcardMatch("", "*"));
assertFalse(FilenameUtils.wildcardMatch("", "?"));
assertTrue(FilenameUtils.wildcardMatch("Foo", "Fo*"));
assertTrue(FilenameUtils.wildcardMatch("Foo", "Fo?"));
assertTrue(FilenameUtils.wildcardMatch("Foo Bar and Catflap", "Fo*"));
assertTrue(FilenameUtils.wildcardMatch("New Bookmarks", "N?w ?o?k??r?s"));
assertFalse(FilenameUtils.wildcardMatch("Foo", "Bar"));
assertTrue(FilenameUtils.wildcardMatch("Foo Bar Foo", "F*o Bar*"));
assertTrue(FilenameUtils.wildcardMatch("Adobe Acrobat Installer", "Ad*er"));
assertTrue(FilenameUtils.wildcardMatch("Foo", "*Foo"));
assertTrue(FilenameUtils.wildcardMatch("BarFoo", "*Foo"));
assertTrue(FilenameUtils.wildcardMatch("Foo", "Foo*"));
assertTrue(FilenameUtils.wildcardMatch("FooBar", "Foo*"));
assertFalse(FilenameUtils.wildcardMatch("FOO", "*Foo"));
assertFalse(FilenameUtils.wildcardMatch("BARFOO", "*Foo"));
assertFalse(FilenameUtils.wildcardMatch("FOO", "Foo*"));
assertFalse(FilenameUtils.wildcardMatch("FOOBAR", "Foo*"));
assertMatch("log.txt", "log.txt", true);
assertMatch("log.txt1", "log.txt", false);
assertMatch("log.txt", "log.txt*", true);
assertMatch("log.txt", "log.txt*1", false);
assertMatch("log.txt", "*log.txt*", true);
assertMatch("log.txt", "*.txt", true);
assertMatch("txt.log", "*.txt", false);
assertMatch("config.ini", "*.ini", true);
assertMatch("config.txt.bak", "con*.txt", false);
assertMatch("log.txt9", "*.txt?", true);
assertMatch("log.txt", "*.txt?", false);
assertMatch("progtestcase.java~5~", "*test*.java~*~", true);
assertMatch("progtestcase.java;5~", "*test*.java~*~", false);
assertMatch("progtestcase.java~5", "*test*.java~*~", false);
assertMatch("log.txt", "log.*", true);
assertMatch("log.txt", "log?*", true);
assertMatch("log.txt12", "log.txt??", true);
assertMatch("log.log", "log**log", true);
assertMatch("log.log", "log**", true);
assertMatch("log.log", "log.**", true);
assertMatch("log.log", "**.log", true);
assertMatch("log.log", "**log", true);
assertMatch("log.log", "log*log", true);
assertMatch("log.log", "log*", true);
assertMatch("log.log", "log.*", true);
assertMatch("log.log", "*.log", true);
assertMatch("log.log", "*log", true);
assertMatch("log.log", "*log?", false);
assertMatch("log.log", "*log?*", true);
assertMatch("log.log.abc", "*log?abc", true);
assertMatch("log.log.abc.log.abc", "*log?abc", true);
assertMatch("log.log.abc.log.abc.d", "*log?abc?d", true);
assertFalse(FilenameUtils.wildcardMatch(null, "Foo", IOCase.SENSITIVE));
assertFalse(FilenameUtils.wildcardMatch("Foo", null, IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch(null, null, IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Foo", "Foo", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("", "", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Foo", "Fo*", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Foo", "Fo?", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Foo Bar and Catflap", "Fo*", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("New Bookmarks", "N?w ?o?k??r?s", IOCase.SENSITIVE));
assertFalse(FilenameUtils.wildcardMatch("Foo", "Bar", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Foo Bar Foo", "F*o Bar*", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Adobe Acrobat Installer", "Ad*er", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Foo", "*Foo", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Foo", "Foo*", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Foo", "*Foo", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("BarFoo", "*Foo", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("Foo", "Foo*", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("FooBar", "Foo*", IOCase.SENSITIVE));
assertFalse(FilenameUtils.wildcardMatch("FOO", "*Foo", IOCase.SENSITIVE));
assertFalse(FilenameUtils.wildcardMatch("BARFOO", "*Foo", IOCase.SENSITIVE));
assertFalse(FilenameUtils.wildcardMatch("FOO", "Foo*", IOCase.SENSITIVE));
assertFalse(FilenameUtils.wildcardMatch("FOOBAR", "Foo*", IOCase.SENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("FOO", "*Foo", IOCase.INSENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("BARFOO", "*Foo", IOCase.INSENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("FOO", "Foo*", IOCase.INSENSITIVE));
assertTrue(FilenameUtils.wildcardMatch("FOOBAR", "Foo*", IOCase.INSENSITIVE));
assertEquals(WINDOWS, FilenameUtils.wildcardMatch("FOO", "*Foo", IOCase.SYSTEM));
assertEquals(WINDOWS, FilenameUtils.wildcardMatch("BARFOO", "*Foo", IOCase.SYSTEM));
assertEquals(WINDOWS, FilenameUtils.wildcardMatch("FOO", "Foo*", IOCase.SYSTEM));
assertEquals(WINDOWS, FilenameUtils.wildcardMatch("FOOBAR", "Foo*", IOCase.SYSTEM));
assertFalse(FilenameUtils.wildcardMatchOnSystem(null, "Foo"));
assertFalse(FilenameUtils.wildcardMatchOnSystem("Foo", null));
assertTrue(FilenameUtils.wildcardMatchOnSystem(null, null));
assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo", "Foo"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("", ""));
assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo", "Fo*"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo", "Fo?"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo Bar and Catflap", "Fo*"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("New Bookmarks", "N?w ?o?k??r?s"));
assertFalse(FilenameUtils.wildcardMatchOnSystem("Foo", "Bar"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo Bar Foo", "F*o Bar*"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("Adobe Acrobat Installer", "Ad*er"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo", "*Foo"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("BarFoo", "*Foo"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("Foo", "Foo*"));
assertTrue(FilenameUtils.wildcardMatchOnSystem("FooBar", "Foo*"));
assertEquals(WINDOWS, FilenameUtils.wildcardMatchOnSystem("FOO", "*Foo"));
assertEquals(WINDOWS, FilenameUtils.wildcardMatchOnSystem("BARFOO", "*Foo"));
assertEquals(WINDOWS, FilenameUtils.wildcardMatchOnSystem("FOO", "Foo*"));
assertEquals(WINDOWS, FilenameUtils.wildcardMatchOnSystem("FOOBAR", "Foo*"));
assertArrayEquals(new String[] { "Ad", "*", "er" }, FilenameUtils.splitOnTokens("Ad*er"));
assertArrayEquals(new String[] { "Ad", "?", "er" }, FilenameUtils.splitOnTokens("Ad?er"));
assertArrayEquals(new String[] { "Test", "*", "?", "One" }, FilenameUtils.splitOnTokens("Test*?One"));
assertArrayEquals(new String[] { "Test", "?", "*", "One" }, FilenameUtils.splitOnTokens("Test?*One"));
assertArrayEquals(new String[] { "*" }, FilenameUtils.splitOnTokens("****"));
assertArrayEquals(new String[] { "*", "?", "?", "*" }, FilenameUtils.splitOnTokens("*??*"));
assertArrayEquals(new String[] { "*", "?", "*", "?", "*" }, FilenameUtils.splitOnTokens("*?**?*"));
assertArrayEquals(new String[] { "*", "?", "*", "?", "*" }, FilenameUtils.splitOnTokens("*?***?*"));
assertArrayEquals(new String[] { "h", "?", "?", "*" }, FilenameUtils.splitOnTokens("h??*"));
assertArrayEquals(new String[] { "" }, FilenameUtils.splitOnTokens(""));
assertEquals(0, in.available(), "Not all bytes were read");
assertEquals(inData.length, inSize, "Sizes differ");
assertArrayEquals(inData, inData2, "Content differs");
assertThrows(NullPointerException.class, () -> IOUtils.copy(null));
assertEquals(0, in.available(), "Not all bytes were read");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(inData.length,count);
assertEquals(-1, IOUtils.copy(in, out));
assertEquals(size, IOUtils.copyLarge(in, out), "copyLarge()");
assertThrows(NullPointerException.class, () -> IOUtils.copy((InputStream) null, out));
assertThrows(NullPointerException.class, () -> IOUtils.copy(in, (OutputStream) null));
assertEquals(0, in.available(), "Not all bytes were read");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(inData.length,count);
assertEquals(0, in.available(), "Not all bytes were read");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(0, in.available(), "Not all bytes were read");
assertArrayEquals(inData, bytes, "Content differs");
assertEquals(0, in.available(), "Not all bytes were read");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertThrows(NullPointerException.class, () -> IOUtils.copy(null, writer, "UTF8"));
assertThrows(NullPointerException.class, () -> IOUtils.copy(in, null, "UTF8"));
assertThrows(NullPointerException.class, () -> IOUtils.copy((InputStream) null, writer));
assertThrows(NullPointerException.class, () -> IOUtils.copy(in, (Writer) null)); // deliberately testing deprecated method
assertEquals(inData.length, count, "The number of characters returned by copy is wrong");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(size, IOUtils.copy(reader, (Appendable) writer));
assertEquals(size, IOUtils.copyLarge(reader, writer), "copy()");
assertThrows(NullPointerException.class, () -> IOUtils.copy(null, writer));
assertThrows(NullPointerException.class, () -> IOUtils.copy(reader, (Appendable) null));
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertArrayEquals(inData, bytes, "Content differs");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertThrows(NullPointerException.class, () -> IOUtils.copy(null, out, "UTF16"));
assertThrows(NullPointerException.class, () -> IOUtils.copy(reader, null, "UTF16"));
assertThrows(NullPointerException.class, () -> IOUtils.copy((Reader) null, out));
assertThrows(NullPointerException.class, () -> IOUtils.copy(reader, (OutputStream) null)); // deliberately testing deprecated method
assertEquals(inData.length, count, "The number of characters returned by copy is wrong");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(-1, IOUtils.copy(reader, writer));
assertEquals(size, IOUtils.copyLarge(reader, writer), "copyLarge()");
assertThrows(NullPointerException.class, () -> IOUtils.copy((Reader) null, writer));
assertThrows(NullPointerException.class, () -> IOUtils.copy(reader, (Writer) null));
assertNotNull(in, name);
assertArrayEquals(Files.readAllBytes(Paths.get("src/test/resources" + name)), Files.readAllBytes(path.get()));
assertNotNull(in, name);
assertArrayEquals(Files.readAllBytes(Paths.get("src/test/resources" + name)), baout.toByteArray());
assertFalse(observer.getListeners().iterator().hasNext(), "Listeners[1]");
assertFalse(observer.getListeners().iterator().hasNext(), "Listeners[2]");
assertTrue(it.hasNext(), "Listeners[3]");
assertEquals(listener, it.next(), "Added");
assertFalse(it.hasNext(), "Listeners[4]");
assertFalse(observer.getListeners().iterator().hasNext(), "Listeners[5]");
assertTrue(listener.getCreatedDirectories().contains(testDirA), "B testDirA");
assertTrue(listener.getCreatedDirectories().contains(testDirB), "B testDirB");
assertTrue(listener.getCreatedDirectories().contains(testDirC), "B testDirC");
assertTrue(listener.getCreatedFiles().contains(testDirAFile1), "B testDirAFile1");
assertFalse(listener.getCreatedFiles().contains(testDirAFile2), "B testDirAFile2");
assertTrue(listener.getCreatedFiles().contains(testDirAFile3), "B testDirAFile3");
assertTrue(listener.getCreatedFiles().contains(testDirAFile4), "B testDirAFile4");
assertTrue(listener.getCreatedFiles().contains(testDirBFile1), "B testDirBFile1");
assertTrue(listener.getDeletedDirectories().contains(testDirB), "D testDirB");
assertTrue(listener.getChangedFiles().contains(testDirAFile4), "D testDirAFile4");
assertTrue(listener.getDeletedFiles().contains(testDirBFile1), "D testDirBFile1");
assertTrue(listener.getDeletedDirectories().contains(testDirA), "E testDirA");
assertTrue(listener.getDeletedFiles().contains(testDirAFile1), "E testDirAFile1");
assertFalse(listener.getDeletedFiles().contains(testDirAFile2), "E testDirAFile2");
assertTrue(listener.getDeletedFiles().contains(testDirAFile3), "E testDirAFile3");
assertTrue(listener.getDeletedFiles().contains(testDirAFile4), "E testDirAFile4");
assertFalse(listener.getCreatedFiles().contains(testDirAFile1), "B testDirAFile1");
assertTrue(listener.getCreatedFiles().contains(testDirAFile2), "B testDirAFile2");
assertFalse(listener.getCreatedFiles().contains(testDirAFile3), "B testDirAFile3");
assertTrue(listener.getCreatedFiles().contains(testDirAFile4), "B testDirAFile4");
assertFalse(listener.getCreatedFiles().contains(testDirAFile5), "B testDirAFile5");
assertFalse(testDirAFile1.exists(), "B testDirAFile1 exists");
assertTrue(testDirAFile2.exists(), "B testDirAFile2 exists");
assertFalse(testDirAFile3.exists(), "B testDirAFile3 exists");
assertTrue(testDirAFile4.exists(), "B testDirAFile4 exists");
assertFalse(testDirAFile5.exists(), "B testDirAFile5 exists");
assertTrue(testDirAFile1.exists(), "D testDirAFile1 exists");
assertTrue(listener.getCreatedFiles().contains(testDirAFile1), "D testDirAFile1");
assertTrue(testDirAFile3.exists(), "E testDirAFile3 exists");
assertTrue(listener.getCreatedFiles().contains(testDirAFile3), "E testDirAFile3");
assertTrue(testDirAFile5.exists(), "F testDirAFile5 exists");
assertTrue(listener.getCreatedFiles().contains(testDirAFile5), "F testDirAFile5");
assertTrue(testDirAFile1.exists(), "B testDirAFile1 exists");
assertTrue(testDirAFile2.exists(), "B testDirAFile2 exists");
assertTrue(testDirAFile3.exists(), "B testDirAFile3 exists");
assertTrue(testDirAFile4.exists(), "B testDirAFile4 exists");
assertTrue(testDirAFile5.exists(), "B testDirAFile5 exists");
assertTrue(listener.getCreatedFiles().contains(testDirAFile1), "B testDirAFile1");
assertTrue(listener.getCreatedFiles().contains(testDirAFile2), "B testDirAFile2");
assertTrue(listener.getCreatedFiles().contains(testDirAFile3), "B testDirAFile3");
assertTrue(listener.getCreatedFiles().contains(testDirAFile4), "B testDirAFile4");
assertTrue(listener.getCreatedFiles().contains(testDirAFile5), "B testDirAFile5");
assertFalse(testDirAFile1.exists(), "D testDirAFile1 exists");
assertTrue(listener.getDeletedFiles().contains(testDirAFile1), "D testDirAFile1");
assertFalse(testDirAFile3.exists(), "E testDirAFile3 exists");
assertTrue(listener.getDeletedFiles().contains(testDirAFile3), "E testDirAFile3");
assertFalse(testDirAFile5.exists(), "F testDirAFile5 exists");
assertTrue(listener.getDeletedFiles().contains(testDirAFile5), "F testDirAFile5");
assertTrue(listener.getCreatedFiles().contains(testDirAFile1), "B testDirAFile1");
assertTrue(listener.getCreatedFiles().contains(testDirAFile2), "B testDirAFile2");
assertTrue(listener.getCreatedFiles().contains(testDirAFile3), "B testDirAFile3");
assertTrue(listener.getCreatedFiles().contains(testDirAFile4), "B testDirAFile4");
assertTrue(listener.getCreatedFiles().contains(testDirAFile5), "B testDirAFile5");
assertTrue(testDirAFile1.exists(), "B testDirAFile1 exists");
assertTrue(testDirAFile2.exists(), "B testDirAFile2 exists");
assertTrue(testDirAFile3.exists(), "B testDirAFile3 exists");
assertTrue(testDirAFile4.exists(), "B testDirAFile4 exists");
assertTrue(testDirAFile5.exists(), "B testDirAFile5 exists");
assertTrue(listener.getChangedFiles().contains(testDirAFile1), "D testDirAFile1");
assertTrue(listener.getChangedFiles().contains(testDirAFile3), "E testDirAFile3");
assertTrue(listener.getChangedFiles().contains(testDirAFile5), "F testDirAFile5");
assertFalse(testDirAFile1.exists(), "A testDirAFile1 exists");
assertTrue(testDirAFile1.exists(), "B testDirAFile1 exists");
assertTrue(testDirAFile2.exists(), "B testDirAFile2 exists");
assertTrue(testDirAFile3.exists(), "B testDirAFile3 exists");
assertTrue(listener.getCreatedFiles().contains(testDirAFile1), "C created");
assertFalse(listener.getCreatedFiles().contains(testDirAFile2), "C created");
assertFalse(listener.getCreatedFiles().contains(testDirAFile3), "C created");
assertTrue(listener.getChangedFiles().contains(testDirAFile1), "D changed");
assertFalse(listener.getChangedFiles().contains(testDirAFile2), "D changed");
assertFalse(listener.getChangedFiles().contains(testDirAFile3), "D changed");
assertFalse(testDirAFile1.exists(), "E testDirAFile1 exists");
assertFalse(testDirAFile2.exists(), "E testDirAFile2 exists");
assertFalse(testDirAFile3.exists(), "E testDirAFile3 exists");
assertTrue(listener.getDeletedFiles().contains(testDirAFile1), "E deleted");
assertFalse(listener.getDeletedFiles().contains(testDirAFile2), "E deleted");
assertFalse(listener.getDeletedFiles().contains(testDirAFile3), "E deleted");
assertEquals("FileAlterationObserver[file='" + file.getPath() +  "', listeners=0]",observer.toString());
assertEquals("FileAlterationObserver[file='" + file.getPath() +  "', CanReadFileFilter, listeners=0]",observer.toString());
assertEquals(file, observer.getDirectory());
assertEquals(fe.getChildren(), SerializationUtils.roundtrip(fe).getChildren());
assertEquals(fe.getClass(), SerializationUtils.roundtrip(fe).getClass());
assertEquals(fe.getFile(), SerializationUtils.roundtrip(fe).getFile());
assertEquals(fe.getLastModified(), SerializationUtils.roundtrip(fe).getLastModified());
assertEquals(fe.getLastModifiedFileTime(), SerializationUtils.roundtrip(fe).getLastModifiedFileTime());
assertEquals(fe.getLength(), SerializationUtils.roundtrip(fe).getLength());
assertEquals(fe.getLevel(), SerializationUtils.roundtrip(fe).getLevel());
assertEquals(fe.getName(), SerializationUtils.roundtrip(fe).getName());
assertEquals(fe.getParent(), SerializationUtils.roundtrip(fe).getParent());
assertEquals(expected, actual);
assertEquals(expectedFt, actual.unwrap());
assertEquals(0, actual.compareTo(expectedFt));
assertEquals(expectedFt.hashCode(), actual.hashCode());
assertEquals(expectedFt.toInstant(), actual.toInstant());
assertEquals(expectedFt.toMillis(), actual.toMillis());
assertEquals(expectedFt.toString(), actual.toString());
assertEquals(123, monitor.getInterval(), "Interval");
assertFalse(monitor.getObservers().iterator().hasNext(), "Observers[1]");
assertFalse(monitor.getObservers().iterator().hasNext(), "Observers[2]");
assertFalse(monitor.getObservers().iterator().hasNext(), "Observers[3]");
assertTrue(it.hasNext(), "Observers[4]");
assertEquals(observer, it.next(), "Added");
assertFalse(it.hasNext(), "Observers[5]");
assertFalse(monitor.getObservers().iterator().hasNext(), "Observers[6]");
assertEquals(observer, iterator.next());
assertFalse(monitor.getObservers().iterator().hasNext());
assertFalse(monitor.getObservers().iterator().hasNext());
assertEquals(10000, monitor.getInterval(), "Interval");
assertEquals(interval, monitor.getInterval(), "Interval");
assertThrows(IllegalStateException.class, () -> monitor.start());
assertThrows(IllegalStateException.class, () -> monitor.stop());
assertFalse(createdThreads.isEmpty());
createdThreads.forEach(thread -> assertFalse(thread.isAlive(), "The FileAlterationMonitor did not stop the threads it created."));
assertEquals(interval, monitor.getInterval(), "Interval");
assertEquals(dirCreate, listener.getCreatedDirectories().size(), label + ": No. of directories created");
assertEquals(dirChange, listener.getChangedDirectories().size(), label + ": No. of directories changed");
assertEquals(dirDelete, listener.getDeletedDirectories().size(), label + ": No. of directories deleted");
assertEquals(fileCreate, listener.getCreatedFiles().size(), label + ": No. of files created");
assertEquals(fileChange, listener.getChangedFiles().size(), label + ": No. of files changed");
assertEquals(fileDelete, listener.getDeletedFiles().size(), label + ": No. of files deleted");
assertTrue(file.exists());
assertEquals(1, files.length);
assertEquals(1, visitor.getPathCounters().getFileCounter().get());
assertEquals(1, visitor.getPathCounters().getDirectoryCounter().get());
assertTrue(visitor.getPathCounters().getByteCounter().get() > 0);
assertFalse(visitor.getDirList().isEmpty());
assertFalse(visitor.getFileList().isEmpty());
assertEquals(1, visitor.getFileList().size());
assertTrue(visitor.getPathCounters().getFileCounter().get() > 0);
assertTrue(visitor.getPathCounters().getDirectoryCounter().get() > 0);
assertTrue(visitor.getPathCounters().getByteCounter().get() > 0);
assertFalse(visitor.getDirList().isEmpty());
assertFalse(visitor.getFileList().isEmpty());
assertNotEquals(Counters.noopPathCounters(), visitor.getPathCounters());
CounterAssertions.assertZeroCounters(visitor.getPathCounters());
CounterAssertions.assertZeroCounters(visitor.getPathCounters());
assertFalse(visitor.getDirList().isEmpty());
assertFalse(visitor.getFileList().isEmpty());
assertTrue(files.length > 0);
assertTrue(visitor.getPathCounters().getFileCounter().get() > 0);
assertTrue(visitor.getPathCounters().getDirectoryCounter().get() > 0);
assertTrue(visitor.getPathCounters().getByteCounter().get() > 0);
assertFalse(visitor.getDirList().isEmpty());
assertFalse(visitor.getFileList().isEmpty());
assertNotEquals(Counters.noopPathCounters(), visitor.getPathCounters());
CounterAssertions.assertZeroCounters(visitor.getPathCounters());
CounterAssertions.assertZeroCounters(visitor.getPathCounters());
assertFalse(visitor.getDirList().isEmpty());
assertFalse(visitor.getFileList().isEmpty());
assertFiltering(filter1, oldFile, true);
assertFiltering(filter2, oldFile, true);
assertFiltering(filter3, oldFile, false);
assertFiltering(filter4, oldFile, true);
assertFiltering(filter5, oldFile, true);
assertFiltering(filter6, oldFile, false);
assertFiltering(filter7, oldFile, true);
assertFiltering(filter8, oldFile, true);
assertFiltering(filter9, oldFile, false);
assertFiltering(filter1, newFile, false);
assertFiltering(filter2, newFile, false);
assertFiltering(filter3, newFile, true);
assertFiltering(filter4, newFile, false);
assertFiltering(filter5, newFile, false);
assertFiltering(filter6, newFile, true);
assertFiltering(filter7, newFile, false);
assertFiltering(filter8, newFile, false);
assertFiltering(filter9, newFile, true);
assertFiltering(filter1, oldPath, true);
assertFiltering(filter2, oldPath, true);
assertFiltering(filter3, oldPath, false);
assertFiltering(filter4, oldPath, true);
assertFiltering(filter5, oldPath, true);
assertFiltering(filter6, oldPath, false);
assertFiltering(filter7, oldPath, true);
assertFiltering(filter8, oldPath, true);
assertFiltering(filter9, oldPath, false);
assertFiltering(filter1, newPath, false);
assertFiltering(filter2, newPath, false);
assertFiltering(filter3, newPath, true);
assertFiltering(filter4, newPath, false);
assertFiltering(filter5, newPath, false);
assertFiltering(filter6, newPath, true);
assertFiltering(filter7, newPath, false);
assertFiltering(filter8, newPath, false);
assertFiltering(filter9, newPath, true);
assertFiltering(trueFilter.and(trueFilter), new File("foo.test"), true);
assertFiltering(trueFilter.and(falseFilter), new File("foo.test"), false);
assertFiltering(falseFilter.and(trueFilter), new File("foo.test"), false);
assertFiltering(falseFilter.and(falseFilter), new File("foo.test"), false);
assertFiltering(new AndFileFilter(trueFilter, trueFilter), new File("foo.test"), true);
assertFiltering(new AndFileFilter(trueFilter, falseFilter), new File("foo.test"), false);
assertFiltering(new AndFileFilter(falseFilter, trueFilter), new File("foo.test"), false);
assertFiltering(new AndFileFilter(falseFilter, falseFilter), new File("foo.test"), false);
assertFiltering(new AndFileFilter(filters), new File("test"), false);
assertFiltering(new AndFileFilter(), new File("test"), false);
assertThrows(NullPointerException.class, () -> new AndFileFilter(falseFilter, null));
assertThrows(NullPointerException.class, () -> new AndFileFilter(null, falseFilter));
assertThrows(NullPointerException.class, () -> new AndFileFilter((List<IOFileFilter>) null));
assertFiltering(new AndFileFilter(trueFilter, trueFilter, trueFilter), new File("foo.test"), true);
assertFiltering(new AndFileFilter(trueFilter, falseFilter, falseFilter), new File("foo.test"), false);
assertFiltering(new AndFileFilter(falseFilter, trueFilter, trueFilter), new File("foo.test"), false);
assertFiltering(new AndFileFilter(falseFilter, falseFilter, falseFilter), new File("foo.test"), false);
assertFiltering(new AndFileFilter(filters), new File("test"), false);
assertFiltering(new AndFileFilter(), new File("test"), false);
assertTrue(executableFile.setExecutable(true));
assertFiltering(CanExecuteFileFilter.CAN_EXECUTE, executablePath.get(), true);
assertFiltering(CanExecuteFileFilter.CAN_EXECUTE, executableFile, true);
assertFiltering(CanExecuteFileFilter.CANNOT_EXECUTE, executablePath.get(), false);
assertFiltering(CanExecuteFileFilter.CANNOT_EXECUTE, executableFile, false);
assertTrue(readOnlyFile.setReadOnly());
assertFiltering(CanReadFileFilter.CAN_READ, readOnlyFile, true);
assertFiltering(CanReadFileFilter.CAN_READ, readOnlyPath, true);
assertFiltering(CanReadFileFilter.CANNOT_READ, readOnlyFile, false);
assertFiltering(CanReadFileFilter.CANNOT_READ, readOnlyPath, false);
assertFiltering(CanReadFileFilter.READ_ONLY, readOnlyFile, true);
assertFiltering(CanReadFileFilter.READ_ONLY, readOnlyPath, true);
assertTrue(readOnlyFile.setReadOnly());
assertFiltering(CanWriteFileFilter.CAN_WRITE, temporaryFolder, true);
assertFiltering(CanWriteFileFilter.CANNOT_WRITE, temporaryFolder, false);
assertFiltering(CanWriteFileFilter.CAN_WRITE, readOnlyFile, false);
assertFiltering(CanWriteFileFilter.CAN_WRITE, readOnlyPath, false);
assertFiltering(CanWriteFileFilter.CANNOT_WRITE, readOnlyFile, true);
assertFiltering(CanWriteFileFilter.CANNOT_WRITE, readOnlyPath, true);
assertFiltering(filter, testFile, false);
assertNotNull(filter.toString()); // TODO better test
assertFiltering(filter, testFile, false);
assertNotNull(filter.toString()); // TODO better test
assertThrows(NullPointerException.class, () -> new DelegateFileFilter((FileFilter) null));
assertThrows(NullPointerException.class, () -> new DelegateFileFilter((FilenameFilter) null));
assertNotNull(FileFilterUtils.asFileFilter((FileFilter) FalseFileFilter.INSTANCE));
assertNotNull(FileFilterUtils.asFileFilter((FilenameFilter) FalseFileFilter.INSTANCE).toString());
assertFiltering(filter, new File("log.txt"), true);
//        assertFiltering(filter, new File("log.txt.bak"), false);
assertFiltering(filter, new File("log.txt").toPath(), true);
assertFiltering(filter, new File("log1.txt"), true);
assertFiltering(filter, new File("log12.txt"), false);
assertFiltering(filter, new File("log1.txt").toPath(), true);
assertFiltering(filter, new File("log12.txt").toPath(), false);
assertFiltering(filter, new File("openAB.102504"), true);
assertFiltering(filter, new File("openA.102504"), false);
assertFiltering(filter, new File("openXY.123103"), false);
//        assertFiltering(filter, new File("openAB.102504.old"), false);
assertFiltering(filter, new File("openAB.102504").toPath(), true);
assertFiltering(filter, new File("openA.102504").toPath(), false);
assertFiltering(filter, new File("openXY.123103").toPath(), false);
//        assertFiltering(filter, new File("openAB.102504.old").toPath(), false);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("Test.class"), true);
assertFiltering(filter, new File("Test.jsp"), false);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("Test.class").toPath(), true);
assertFiltering(filter, new File("Test.jsp").toPath(), false);
assertFiltering(listFilter, new File("Test.txt"), true);
assertFiltering(listFilter, new File("Test.xml"), true);
assertFiltering(listFilter, new File("Test.gif"), true);
assertFiltering(listFilter, new File("Test.bmp"), false);
assertFiltering(listFilter, new File("Test.txt").toPath(), true);
assertFiltering(listFilter, new File("Test.xml").toPath(), true);
assertFiltering(listFilter, new File("Test.gif").toPath(), true);
assertFiltering(listFilter, new File("Test.bmp").toPath(), false);
assertTrue(listFilter.accept(txtFile));
assertFalse(listFilter.accept(bmpFile));
assertFalse(listFilter.accept(dirFile));
assertEquals(FileVisitResult.CONTINUE, listFilter.accept(txtPath, null));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(bmpPath, null));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(dirPath, null));
assertTrue(listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
assertFalse(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName()));
assertFalse(listFilter.accept(dirFile.getParentFile(), dirFile.getName()));
assertEquals(FileVisitResult.CONTINUE, listFilter.accept(txtPath, null));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(bmpPath, null));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(dirPath, null));
assertThrows(NullPointerException.class, () -> new WildcardFilter((String) null));
assertThrows(NullPointerException.class, () -> new WildcardFilter((String[]) null));
assertThrows(NullPointerException.class, () -> new WildcardFilter((List<String>) null));
assertFiltering(filter, new File("src/"), true);
assertFiltering(filter, new File("src/").toPath(), true);
assertFiltering(filter, new File("src/main/java/"), true);
assertFiltering(filter, new File("src/main/java/").toPath(), true);
assertFiltering(filter, new File("pom.xml"), false);
assertFiltering(filter, new File("pom.xml").toPath(), false);
assertFiltering(filter, new File("imaginary"), false);
assertFiltering(filter, new File("imaginary").toPath(), false);
assertFiltering(filter, new File("imaginary/"), false);
assertFiltering(filter, new File("imaginary/").toPath(), false);
assertFiltering(filter, new File("LICENSE.txt"), false);
assertFiltering(filter, new File("LICENSE.txt").toPath(), false);
assertSame(DirectoryFileFilter.DIRECTORY, DirectoryFileFilter.INSTANCE);
assertFiltering(EmptyFileFilter.EMPTY, emptyDirFile, true);
assertFiltering(EmptyFileFilter.EMPTY, emptyDirPath, true);
assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyDirFile, false);
assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyDirPath, false);
assertFiltering(EmptyFileFilter.EMPTY, emptyFile, true);
assertFiltering(EmptyFileFilter.EMPTY, emptyPath, true);
assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyFile, false);
assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyPath, false);
assertFiltering(EmptyFileFilter.EMPTY, emptyDirFile, false);
assertFiltering(EmptyFileFilter.EMPTY, emptyDirPath, false);
assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyDirFile, true);
assertFiltering(EmptyFileFilter.NOT_EMPTY, emptyDirPath, true);
assertFiltering(EmptyFileFilter.EMPTY, notEmptyFile, false);
assertFiltering(EmptyFileFilter.EMPTY, notEmptyPath, false);
assertFiltering(EmptyFileFilter.NOT_EMPTY, notEmptyFile, true);
assertFiltering(EmptyFileFilter.NOT_EMPTY, notEmptyPath, true);
assertNotNull(new FileFilterUtils()); // dummy for test coverage
assertFiltering(filter, new File("foo.test"), false);
assertFiltering(filter, new File("foo.test").toPath(), false);
assertFiltering(filter, new File("foo"), false);
assertFiltering(filter, new File("foo").toPath(), false);
assertFiltering(filter, (File) null, false);
assertFiltering(filter, (Path) null, false);
assertSame(FalseFileFilter.FALSE, FalseFileFilter.INSTANCE);
assertSame(TrueFileFilter.TRUE, FalseFileFilter.INSTANCE.negate());
assertSame(TrueFileFilter.INSTANCE, FalseFileFilter.INSTANCE.negate());
assertNotNull(FalseFileFilter.INSTANCE.toString());
assertFooBarFileFiltering(new FileEqualsFileFilter(new File("foo")).or(new FileEqualsFileFilter(new File("bar"))));
assertFiltering(FileFilterUtils.and(trueFilter, trueFilter, trueFilter), new File("foo.test"), true);
assertFiltering(FileFilterUtils.and(trueFilter, falseFilter, trueFilter), new File("foo.test"), false);
assertFiltering(FileFilterUtils.and(falseFilter, trueFilter), new File("foo.test"), false);
assertFiltering(FileFilterUtils.and(falseFilter, falseFilter), new File("foo.test"), false);
assertFiltering(FileFilterUtils.or(trueFilter, trueFilter), testFile, true);
assertFiltering(FileFilterUtils.or(trueFilter, trueFilter, falseFilter), testFile, true);
assertFiltering(FileFilterUtils.or(falseFilter, trueFilter), testFile, true);
assertFiltering(FileFilterUtils.or(falseFilter, falseFilter, falseFilter), testFile, false);
assertFiltering(filter, new File("src/"), false);
assertFiltering(filter, new File("src/").toPath(), false);
assertFiltering(filter, new File("src/java/"), false);
assertFiltering(filter, new File("src/java/").toPath(), false);
assertFiltering(filter, new File("pom.xml"), true);
assertFiltering(filter, new File("pom.xml").toPath(), true);
assertFiltering(filter, new File("imaginary"), false);
assertFiltering(filter, new File("imaginary").toPath(), false);
assertFiltering(filter, new File("imaginary/"), false);
assertFiltering(filter, new File("imaginary/").toPath(), false);
assertFiltering(filter, new File("LICENSE.txt"), true);
assertFiltering(filter, new File("LICENSE.txt").toPath(), true);
assertEquals(1, filtered.length);
assertEquals(fileA, filtered[0]);
assertEquals(1, filtered.length);
assertEquals(fileA, filtered[0]);
assertEquals(1, filtered.length);
assertEquals(fileA, filtered[0]);
assertEquals(1, filtered.length);
assertEquals(fileA, filtered[0]);
assertThrows(NullPointerException.class, () -> FileFilterUtils.filter(null, fileA, fileB));
assertEquals(0, filtered.length);
assertTrue(filteredList.contains(fileA));
assertFalse(filteredList.contains(fileB));
assertTrue(filteredList.contains(fileA));
assertFalse(filteredList.contains(fileB));
assertThrows(NullPointerException.class, () -> FileFilterUtils.filterList(null, Collections.emptyList()));
assertEquals(1, filteredList.size());
assertEquals(null, filteredList.get(0));
assertEquals(0, filteredList.size());
assertThrows(NullPointerException.class, () -> PathUtils.filter(null, fileA, fileB));
assertEquals(0, filtered.length);
assertTrue(filteredSet.contains(fileA));
assertFalse(filteredSet.contains(fileB));
assertTrue(filteredSet.contains(fileA));
assertFalse(filteredSet.contains(fileB));
assertThrows(NullPointerException.class, () -> FileFilterUtils.filterSet(null, Collections.emptySet()));
assertEquals(0, filteredSet.size());
assertFiltering(HiddenFileFilter.HIDDEN, hiddenDirFile, hiddenDirFile.isHidden());
assertFiltering(HiddenFileFilter.HIDDEN, hiddenDirPath, hiddenDirFile.isHidden());
assertFiltering(HiddenFileFilter.VISIBLE, hiddenDirFile, !hiddenDirFile.isHidden());
assertFiltering(HiddenFileFilter.VISIBLE, hiddenDirPath, !hiddenDirFile.isHidden());
assertFiltering(HiddenFileFilter.HIDDEN, temporaryFolder, false);
assertFiltering(HiddenFileFilter.HIDDEN, path, false);
assertFiltering(HiddenFileFilter.VISIBLE, temporaryFolder, true);
assertFiltering(HiddenFileFilter.VISIBLE, path, true);
assertFiltering(filter, classAFile, true);
assertFiltering(filter, classAPath, true);
assertFiltering(filter, xmlBFile, false);
assertFiltering(filter, xmlBPath, false);
assertFiltering(filter, emptyFile, false);
assertFiltering(filter, emptyPath, false);
assertFiltering(filter, dirFile, false);
assertFiltering(filter, dirPath, false);
assertFiltering(filter, classAFile, true);
assertFiltering(filter, classAPath, true);
assertFiltering(filter, xmlBFile, false);
assertFiltering(filter, xmlBPath, false);
assertFiltering(filter, emptyFile, false);
assertFiltering(filter, emptyPath, false);
assertFiltering(filter, dirFile, false);
assertFiltering(filter, dirPath, false);
assertFiltering(filter, tarFileA, true);
assertFiltering(filter, randomFileB, false);
assertFiltering(filter, dir, false);
assertFiltering(filter, tarFileA, true);
assertFiltering(filter, randomFileB, false);
assertFiltering(filter, dir, false);
assertFiltering(filter, classFileA, false);
assertFiltering(filter, xmlFileB, true);
assertFiltering(filter, dir, false);
assertFiltering(filter, classFileA, false);
assertFiltering(filter, xmlFileB, true);
assertFiltering(filter, dir, false);
assertFiltering(filter, tarFileA, true);
assertFiltering(filter, randomFileB, false);
assertFiltering(filter, dir, false);
assertFiltering(filter, tarFileA, true);
assertFiltering(filter, randomFileB, false);
assertFiltering(filter, dir, false);
assertThrows(NullPointerException.class, () -> new MagicNumberFileFilter((String) null, 0));
assertThrows(IllegalArgumentException.class, () -> new MagicNumberFileFilter("0", -1));
assertThrows(IllegalArgumentException.class, () -> new MagicNumberFileFilter("", 0));
assertThrows(NullPointerException.class, () -> new MagicNumberFileFilter((byte[]) null, 0));
assertThrows(IllegalArgumentException.class, () -> new MagicNumberFileFilter(new byte[] {0}, -1));
assertThrows(IllegalArgumentException.class, () -> new MagicNumberFileFilter(new byte[] {}, 0));
assertFiltering(filter1, file, false);
assertFiltering(filter2, file, false);
assertFiltering(filter1, file, true);
assertFiltering(filter2, file, true);
assertFiltering(filter1, file, true);
assertFiltering(filter2, file, false);
assertFiltering(filter1, file, true);
assertFiltering(filter2, file, false);
assertSame(DirectoryFileFilter.DIRECTORY, FileFilterUtils.makeDirectoryOnly(null));
assertFiltering(filter, fileA, false);
assertFiltering(filter, fileB, true);
assertFiltering(filter, fileA, false);
assertFiltering(filter, fileB, false);
assertSame(FileFileFilter.INSTANCE, FileFilterUtils.makeFileOnly(null));
assertFiltering(filter, fileA, false);
assertFiltering(filter, fileB, false);
assertFiltering(filter, fileA, false);
assertFiltering(filter, fileB, true);
assertFiltering(filter1, file, false);
assertFiltering(filter2, file, false);
assertFiltering(filter1, file, true);
assertFiltering(filter2, file, true);
assertFiltering(filter1, file, true);
assertFiltering(filter2, file, false);
assertFiltering(filter1, file, true);
assertFiltering(filter2, file, false);
assertFooBarFileFiltering(new NameFileFilter("foo", "bar"));
assertThrows(NullPointerException.class, () -> new NameFileFilter(test), failMessage);
assertThrows(NullPointerException.class, () -> FileFilterUtils.nameFileFilter(test, IOCase.INSENSITIVE), failMessage);
assertThrows(NullPointerException.class, () -> new NameFileFilter((String[]) null));
assertThrows(NullPointerException.class, () -> new NameFileFilter(test));
assertFiltering(filter, new File("foo.test"), false);
assertFiltering(filter, new File("foo"), false);
assertFiltering(filter.negate(), new File("foo"), true);
assertFiltering(filter, (File) null, false);
assertThrows(NullPointerException.class, () -> new NotFileFilter(null));
assertThrows(NullPointerException.class, () -> FileFilterUtils.toList((IOFileFilter) null));
assertThrows(NullPointerException.class, () -> FileFilterUtils.toList(new IOFileFilter[] {null}));
assertFiltering(new OrFileFilter(trueFilter, trueFilter), testFile, true);
assertFiltering(new OrFileFilter(trueFilter, falseFilter), testFile, true);
assertFiltering(new OrFileFilter(falseFilter, trueFilter), testFile, true);
assertFiltering(new OrFileFilter(falseFilter, falseFilter), testFile, false);
assertFiltering(new OrFileFilter(), testFile, false);
assertFiltering(new OrFileFilter(trueFilter, trueFilter), testPath, true);
assertFiltering(new OrFileFilter(trueFilter, falseFilter), testPath, true);
assertFiltering(new OrFileFilter(falseFilter, trueFilter), testPath, true);
assertFiltering(new OrFileFilter(falseFilter, falseFilter), testPath, false);
assertFiltering(new OrFileFilter(), testPath, false);
assertFiltering(falseFilter.or(trueFilter), testPath, true);
assertFiltering(orFilter, testFile, true);
assertFiltering(orFilter, testPath, true);
assertEquals(orFilter.getFileFilters(), filters);
assertFiltering(orFilter, testFile, false);
assertFiltering(orFilter, testPath, false);
assertFiltering(orFilter, testFile, true);
assertFiltering(orFilter, testPath, true);
assertTrue(orFilter.accept(testFile.getParentFile(), testFile.getName()));
assertEquals(FileVisitResult.CONTINUE, orFilter.accept(testPath, null));
assertFalse(orFilter.accept(testFile.getParentFile(), testFile.getName()));
assertEquals(FileVisitResult.TERMINATE, orFilter.accept(testPath, null));
assertThrows(NullPointerException.class, () -> new OrFileFilter(falseFilter, null));
assertFooBarFileFiltering(new PathEqualsFileFilter(Paths.get("foo")).or(new PathEqualsFileFilter(Paths.get("bar"))));
assertFiltering(filter, new File("foo.test"), true);
assertFiltering(filter, new File("FOO.test"), false); // case-sensitive
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("bar"), true);
assertFiltering(filter, new File("food/"), true);
assertFiltering(filter, new File("foo.test").toPath(), true);
assertFiltering(filter, new File("FOO.test").toPath(), false); // case-sensitive
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("bar").toPath(), true);
assertFiltering(filter, new File("food/").toPath(), true);
assertFiltering(filter, new File("barred\\"), true);
assertFiltering(filter, new File("test"), false);
assertFiltering(filter, new File("fo_o.test"), false);
assertFiltering(filter, new File("abar.exe"), false);
assertFiltering(filter, new File("barred\\").toPath(), true);
assertFiltering(filter, new File("test").toPath(), false);
assertFiltering(filter, new File("fo_o.test").toPath(), false);
assertFiltering(filter, new File("abar.exe").toPath(), false);
assertFiltering(filter, new File("test"), true);
assertFiltering(filter, new File("fred"), false);
assertFiltering(filter, new File("test").toPath(), true);
assertFiltering(filter, new File("fred").toPath(), false);
assertTrue(filter.accept(testFile.getParentFile(), testFile.getName()));
assertFalse(filter.accept(fredFile.getParentFile(), fredFile.getName()));
assertEquals(FileVisitResult.CONTINUE, filter.accept(testPath, null));
assertEquals(FileVisitResult.TERMINATE, filter.accept(fredPath, null));
assertFalse(listFilter.accept(testFile.getParentFile(), testFile.getName()));
assertTrue(listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(testPath, null));
assertEquals(FileVisitResult.CONTINUE, listFilter.accept(fredPath, null));
assertThrows(NullPointerException.class, () -> new PrefixFileFilter((String) null));
assertThrows(NullPointerException.class, () -> new PrefixFileFilter((String[]) null));
assertThrows(NullPointerException.class, () -> new PrefixFileFilter((List<String>) null));
assertFiltering(filter, new File("foo.test1"), true);
assertFiltering(filter, new File("bar.test1"), true);
assertFiltering(filter, new File("FOO.test1"), true); // case-insensitive
assertFiltering(filter, new File("BAR.test1"), true); // case-insensitive
assertFiltering(filter, new File("foo.test2"), false);
assertFiltering(filter, new File("bar.test2"), true);
assertFiltering(filter, new File("FOO.test2"), false); // case-insensitive
assertFiltering(filter, new File("BAR.test2"), true); // case-insensitive
assertFiltering(filter, new File("foo.test3"), true);
assertFiltering(filter, new File("bar.test3"), true);
assertFiltering(filter, new File("FOO.test3"), true); // case-insensitive
assertFiltering(filter, new File("BAR.test3"), true); // case-insensitive
assertThrows(NullPointerException.class, () -> new PrefixFileFilter((String) null, IOCase.INSENSITIVE));
assertThrows(NullPointerException.class, () -> new PrefixFileFilter((String[]) null, IOCase.INSENSITIVE));
assertThrows(NullPointerException.class, () -> new PrefixFileFilter((List<String>) null, IOCase.INSENSITIVE));
assertFiltering(filter, new File("foo.test2"), false);
assertFiltering(filter, new File("bar.test2"), true);
assertFiltering(filter, new File("FOO.test2"), false); // case-insensitive
assertFiltering(filter, new File("BAR.test2"), true); // case-insensitive
assertThrows(NullPointerException.class, () -> FileFilterUtils.prefixFileFilter(null, IOCase.INSENSITIVE));
assertFiltering(filter1, smallFile, false);
assertFiltering(filter2, smallFile, false);
assertFiltering(filter3, smallFile, true);
assertFiltering(filter1, largeFile, true);
assertFiltering(filter2, largeFile, true);
assertFiltering(filter3, largeFile, false);
assertFiltering(filter4, smallFile, false);
assertFiltering(filter4, largeFile, false);
assertFiltering(filter5, smallFile, true);
assertFiltering(filter5, largeFile, false);
assertFiltering(filter6, smallFile, false);
assertFiltering(filter6, largeFile, true);
assertFiltering(filter7, smallFile, true);
assertFiltering(filter7, largeFile, true);
assertFiltering(filter8, largeFile, true);
assertThrows(IllegalArgumentException.class, () -> FileFilterUtils.sizeFileFilter(-1));
assertFiltering(filter1, smallFile, false);
assertFiltering(filter2, smallFile, false);
assertFiltering(filter3, smallFile, true);
assertFiltering(filter1, largeFile, true);
assertFiltering(filter2, largeFile, true);
assertFiltering(filter3, largeFile, false);
assertFiltering(filter4, smallFile, false);
assertFiltering(filter4, largeFile, false);
assertFiltering(filter5, smallFile, true);
assertFiltering(filter5, largeFile, false);
assertFiltering(filter6, smallFile, false);
assertFiltering(filter6, largeFile, true);
assertFiltering(filter7, smallFile, true);
assertFiltering(filter7, largeFile, true);
assertFiltering(filter8, largeFile, true);
assertThrows(IllegalArgumentException.class, () -> FileFilterUtils.sizeFileFilter(-1));
assertFiltering(filter, new File("fred.tes"), true);
assertFiltering(filter, new File("fred.est"), true);
assertFiltering(filter, new File("fred.EST"), false); // case-sensitive
assertFiltering(filter, new File("fred.exe"), false);
assertFiltering(filter, new File("fred.tes").toPath(), true);
assertFiltering(filter, new File("fred.est").toPath(), true);
assertFiltering(filter, new File("fred.EST").toPath(), false); // case-sensitive
assertFiltering(filter, new File("fred.exe").toPath(), false);
assertFiltering(filter, new File("fred"), false);
assertFiltering(filter, new File(".tes"), true);
assertFiltering(filter, new File("fred.test"), true);
assertFiltering(filter, new File("fred").toPath(), false);
assertFiltering(filter, new File(".tes").toPath(), true);
assertFiltering(filter, new File("fred.test").toPath(), true);
assertFiltering(filter, new File("test"), true);
assertFiltering(filter, new File("fred"), false);
assertFiltering(filter, new File("test").toPath(), true);
assertFiltering(filter, new File("fred").toPath(), false);
assertTrue(filter.accept(testFile.getParentFile(), testFile.getName()));
assertFalse(filter.accept(fredFile.getParentFile(), fredFile.getName()));
assertEquals(FileVisitResult.CONTINUE, filter.accept(testPath, null));
assertEquals(FileVisitResult.TERMINATE, filter.accept(fredPath, null));
assertFalse(listFilter.accept(testFile.getParentFile(), testFile.getName()));
assertTrue(listFilter.accept(fredFile.getParentFile(), fredFile.getName()));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(testPath, null));
assertEquals(FileVisitResult.CONTINUE, listFilter.accept(fredPath, null));
assertThrows(NullPointerException.class, () -> new SuffixFileFilter((String) null));
assertThrows(NullPointerException.class, () -> new SuffixFileFilter((String[]) null));
assertThrows(NullPointerException.class, () -> new SuffixFileFilter((List<String>) null));
assertFiltering(filter, new File("foo.tes"), true);
assertFiltering(filter, new File("foo.est"), true);
assertFiltering(filter, new File("foo.EST"), true); // case-sensitive
assertFiltering(filter, new File("foo.TES"), true); // case-sensitive
assertFiltering(filter, new File("foo.exe"), false);
assertFiltering(filter, new File("test"), true);
assertFiltering(filter, new File("TEST"), true);
assertFiltering(filter, new File("bar.tes"), true);
assertFiltering(filter, new File("bar.est"), true);
assertFiltering(filter, new File("bar.EST"), true); // case-sensitive
assertFiltering(filter, new File("bar.TES"), true); // case-sensitive
assertFiltering(filter, new File("bar.exe"), false);
assertThrows(NullPointerException.class, () -> new SuffixFileFilter((String) null, IOCase.INSENSITIVE));
assertThrows(NullPointerException.class, () -> new SuffixFileFilter((String[]) null, IOCase.INSENSITIVE));
assertThrows(NullPointerException.class, () -> new SuffixFileFilter((List<String>) null, IOCase.INSENSITIVE));
assertFiltering(filter, new File("test"), true);
assertFiltering(filter, new File("TEST"), true);
assertThrows(NullPointerException.class, () -> FileFilterUtils.suffixFileFilter(null, IOCase.INSENSITIVE));
assertFiltering(filter, new File("foo.test"), true);
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, (File) null, true);
assertFiltering(filter, new File("foo.test").toPath(), true);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, (Path) null, true);
assertSame(TrueFileFilter.TRUE, TrueFileFilter.INSTANCE);
assertSame(FalseFileFilter.FALSE, TrueFileFilter.INSTANCE.negate());
assertSame(FalseFileFilter.INSTANCE, TrueFileFilter.INSTANCE.negate());
assertNotNull(TrueFileFilter.INSTANCE.toString());
assertTrue(files.length > 0);
assertEquals(0, visitor.getPathCounters().getFileCounter().get());
assertTrue(visitor.getPathCounters().getDirectoryCounter().get() > 0);
assertEquals(0, visitor.getPathCounters().getByteCounter().get());
assertFalse(visitor.getDirList().isEmpty());
assertFalse(visitor.getFileList().isEmpty());
assertNotEquals(Counters.noopPathCounters(), visitor.getPathCounters());
CounterAssertions.assertZeroCounters(visitor.getPathCounters());
public static void assertFalseFiltersInvoked(final int testNumber, final TesterFalseFileFilter[] filters, final boolean[] invoked) {for (int i = 1; i < filters.length; i++) {
assertEquals(invoked[i - 1], filters[i].isInvoked(), "test " + testNumber + " filter " + i + " invoked");
public static void assertFileFiltering(final int testNumber, final IOFileFilter filter, final File file, final boolean expected) {assertEquals(expected, filter.accept(file),"test " + testNumber + " Filter(File) " + filter.getClass().getName() + " not " + expected + " for " + file);
public static void assertFilenameFiltering(final int testNumber, final IOFileFilter filter, final File file, final boolean expected) {// Assumes file has a parent and is not passed as nullassertEquals(expected, filter.accept(file.getParentFile(), file.getName()),"test " + testNumber + " Filter(File, String) " + filter.getClass().getName() + " not " + expected + " for " + file);
public static void assertFiltering(final int testNumber, final IOFileFilter filter, final File file, final boolean expected) {// Note. This only tests the (File, String) version if the parent of//       the File passed in is not nullassertEquals(expected, filter.accept(file),"test " + testNumber + " Filter(File) " + filter.getClass().getName() + " not " + expected + " for " + file);
assertEquals(expected, filter.accept(file.toPath(), null),"test " + testNumber + " Filter(File) " + filter.getClass().getName() + " not " + expected + " for " + file);
assertEquals(expected, filter.accept(file.getParentFile(), file.getName()),"test " + testNumber + " Filter(File, String) " + filter.getClass().getName() + " not " + expected + " for " + file);
assertEquals(expected, filter.accept(file),"test " + testNumber + " Filter(File, String) " + filter.getClass().getName() + " not " + expected + " for null");
public static void assertTrueFiltersInvoked(final int testNumber, final TesterTrueFileFilter[] filters, final boolean[] invoked) {for (int i = 1; i < filters.length; i++) {
assertEquals(invoked[i - 1], filters[i].isInvoked(), "test " + testNumber + " filter " + i + " invoked");
assertEquals(i, fileFilter.getFileFilters().size(), "file filters count: ");
assertEquals(i + 1, fileFilter.getFileFilters().size(), "file filters count: ");
assertTrue(filters.contains(filter), "found file filter");
assertEquals(filters.size(), fileFilter.getFileFilters().size(), "file filters count");
assertFileFiltering(i, filter, this.file, fileResults);
assertTrueFiltersInvoked(i, trueFilters, trueResults);
assertFalseFiltersInvoked(i, falseFilters, falseResults);
assertFilenameFiltering(i, filter, this.file, filenameResults);
assertTrueFiltersInvoked(i, trueFilters, trueResults);
assertFalseFiltersInvoked(i, falseFilters, falseResults);
assertFileFiltering(i, filter, this.file, fileResults);
assertTrueFiltersInvoked(i, trueFilters, trueResults);
assertFalseFiltersInvoked(i, falseFilters, falseResults);
assertFilenameFiltering(i, filter, this.file, filenameResults);
assertTrueFiltersInvoked(i, trueFilters, trueResults);
assertFalseFiltersInvoked(i, falseFilters, falseResults);
assertFileFiltering(1, (IOFileFilter) fileFilter, file, false);
assertFilenameFiltering(1, (IOFileFilter) fileFilter, file, false);
assertFalse(fileFilter.getFileFilters().contains(filter), "file filter removed");
assertEquals(0, fileFilter.getFileFilters().size(), "file filters count");
assertFiltering(filter, new File("log.txt"), true);
assertFiltering(filter, new File("log.TXT"), false);
assertFiltering(filter, new File("log.txt").toPath(), true);
assertFiltering(filter, new File("log.TXT").toPath(), false);
assertFiltering(filter, new File("log.txt"), true);
assertFiltering(filter, new File("log.TXT"), false);
assertFiltering(filter, new File("log.txt").toPath(), true);
assertFiltering(filter, new File("log.TXT").toPath(), false);
assertFiltering(filter, new File("log.txt"), true);
assertFiltering(filter, new File("log.TXT"), true);
assertFiltering(filter, new File("log.txt").toPath(), true);
assertFiltering(filter, new File("log.TXT").toPath(), true);
assertFiltering(filter, new File("log.txt"), true);
assertFiltering(filter, new File("log.TXT"), WINDOWS);
assertFiltering(filter, new File("log.txt").toPath(), true);
assertFiltering(filter, new File("log.TXT").toPath(), WINDOWS);
assertFiltering(filter, new File("log.txt"), true);
assertFiltering(filter, new File("log.TXT"), false);
assertFiltering(filter, new File("log.txt").toPath(), true);
assertFiltering(filter, new File("log.TXT").toPath(), false);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("Test.class"), true);
assertFiltering(filter, new File("Test.jsp"), false);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("Test.class").toPath(), true);
assertFiltering(filter, new File("Test.jsp").toPath(), false);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("Test.JAVA"), false);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("Test.JAVA").toPath(), false);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("Test.JAVA"), true);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("Test.JAVA").toPath(), true);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("Test.JAVA"), WINDOWS);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("Test.JAVA").toPath(), WINDOWS);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("Test.JAVA"), false);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("Test.JAVA").toPath(), false);
assertFiltering(listFilter, new File("Test.txt"), true);
assertFiltering(listFilter, new File("Test.xml"), true);
assertFiltering(listFilter, new File("Test.gif"), true);
assertFiltering(listFilter, new File("Test.bmp"), false);
assertFiltering(listFilter, new File("Test.txt").toPath(), true);
assertFiltering(listFilter, new File("Test.xml").toPath(), true);
assertFiltering(listFilter, new File("Test.gif").toPath(), true);
assertFiltering(listFilter, new File("Test.bmp").toPath(), false);
assertTrue(listFilter.accept(txtFile));
assertFalse(listFilter.accept(bmpFile));
assertFalse(listFilter.accept(dirFile));
assertEquals(FileVisitResult.CONTINUE, listFilter.accept(txtFile.toPath(), null));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(bmpFile.toPath(), null));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(dirFile.toPath(), null));
assertTrue(listFilter.accept(txtFile.getParentFile(), txtFile.getName()));
assertFalse(listFilter.accept(bmpFile.getParentFile(), bmpFile.getName()));
assertFalse(listFilter.accept(dirFile.getParentFile(), dirFile.getName()));
assertEquals(FileVisitResult.CONTINUE, listFilter.accept(txtPath, null));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(bmpPath, null));
assertEquals(FileVisitResult.TERMINATE, listFilter.accept(dirPath, null));
assertThrows(NullPointerException.class, () -> new WildcardFileFilter((String) null));
assertThrows(NullPointerException.class, () -> new WildcardFileFilter((String[]) null));
assertThrows(NullPointerException.class, () -> new WildcardFileFilter((List<String>) null));
public void assertFiltering(final IOFileFilter filter, final File file, final boolean expected) {// Note. This only tests the (File, String) version if the parent of//       the File passed in is not nullassertEquals(expected, filter.accept(file),"Filter(File) " + filter.getClass().getName() + " not " + expected + " for " + file);
assertEquals(expected, filter.accept(file.getParentFile(), file.getName()),"Filter(File, String) " + filter.getClass().getName() + " not " + expected + " for " + file);
assertEquals(expected, filter.accept(file),"Filter(File, String) " + filter.getClass().getName() + " not " + expected + " for null");
assertNotNull(filter.toString());
public void assertFiltering(final IOFileFilter filter, final Path path, final boolean expected) {// Note. This only tests the (Path, Path) version if the parent of// the Path passed in is not nullfinal FileVisitResult expectedFileVisitResult = AbstractFileFilter.toDefaultFileVisitResult(expected);
assertEquals(expectedFileVisitResult, filter.accept(path, null),"Filter(Path) " + filter.getClass().getName() + " not " + expectedFileVisitResult + " for " + path);
assertEquals(expectedFileVisitResult, filter.accept(path, null),"Filter(Path, Path) " + filter.getClass().getName() + " not " + expectedFileVisitResult + " for "+ path);
assertEquals(expectedFileVisitResult, filter.accept(path, null),"Filter(Path, Path) " + filter.getClass().getName() + " not " + expectedFileVisitResult + " for null");
assertNotNull(filter.toString());
private RegexFileFilter assertSerializable(final RegexFileFilter serializable) throws IOException {try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {oos.writeObject(serializable);
assertTrue(baos.toByteArray().length > 0);
assertSerializable(filter);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("test-10.java"), true);
assertFiltering(filter, new File("test-.java"), false);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("test-10.java").toPath(), true);
assertFiltering(filter, new File("test-.java").toPath(), false);
assertSerializable(filter);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("test.java"), true);
assertFiltering(filter, new File("tEST.java"), false);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("test.java").toPath(), true);
assertFiltering(filter, new File("tEST.java").toPath(), false);
assertSerializable(filter);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("test.java"), true);
assertFiltering(filter, new File("tEST.java"), true);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("test.java").toPath(), true);
assertFiltering(filter, new File("tEST.java").toPath(), true);
assertSerializable(filter);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("test.java"), true);
assertFiltering(filter, new File("tEST.java"), true);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("test.java").toPath(), true);
assertFiltering(filter, new File("tEST.java").toPath(), true);
assertSerializable(filter);
assertFiltering(filter, new File("Test.java"), true);
assertFiltering(filter, new File("test.java"), true);
assertFiltering(filter, new File("tEST.java"), true);
assertFiltering(filter, new File("Test.java").toPath(), true);
assertFiltering(filter, new File("test.java").toPath(), true);
assertFiltering(filter, new File("tEST.java").toPath(), true);
assertThrows(NullPointerException.class, () -> assertSerializable(new RegexFileFilter((String) null)));
assertThrows(NullPointerException.class, () -> assertSerializable(new RegexFileFilter(null, Pattern.CASE_INSENSITIVE)));
assertThrows(NullPointerException.class, () -> assertSerializable(new RegexFileFilter(null, IOCase.INSENSITIVE)));
assertThrows(NullPointerException.class, () -> assertSerializable(new RegexFileFilter((java.util.regex.Pattern) null)));
assertFiltering(assertSerializable(new RegexFileFilter(patternStr)), path, true);
assertFiltering(assertSerializable(new RegexFileFilter(Pattern.compile(patternStr), (Function<Path, String> & Serializable) Path::toString)), path,false);
assertEquals(simpleEmptyFileFilter, andFileFilter.getFileFilters());
assertEquals(simpleNonEmptyFilter, andFileFilter.getFileFilters());
assertEquals(FileVisitResult.TERMINATE, SymbolicLinkFileFilter.INSTANCE.accept(PathUtils.current(), null));
void assertFiltering(final IOFileFilter filter, final File file, final boolean expected) {// Note. This only tests the (File, String) version if the parent of// the File passed in is not nullassertEquals(expected, filter.accept(file), "Filter(File) " + filter.getClass().getName() + " not " + expected + " for " + file);
assertEquals(expected, filter.accept(file.getParentFile(), file.getName()),"Filter(File, String) " + filter.getClass().getName() + " not " + expected + " for " + file);
assertEquals(expected, filter.accept(file), "Filter(File, String) " + filter.getClass().getName() + " not " + expected + " for null");
assertNotNull(filter.toString());
void assertFiltering(final IOFileFilter filter, final Path path, final boolean expected) {// Note. This only tests the (Path, Path) version if the parent of// the File passed in is not nullfinal FileVisitResult expectedFileVisitResult = AbstractFileFilter.toDefaultFileVisitResult(expected);
assertEquals(expectedFileVisitResult, filter.accept(path, null),"Filter(Path) " + filter.getClass().getName() + " not " + expectedFileVisitResult + " for " + path);
assertEquals(expectedFileVisitResult, filter.accept(path, null),"Filter(Path, Path) " + filter.getClass().getName() + " not " + expectedFileVisitResult + " for " + path);
assertEquals(expectedFileVisitResult, filter.accept(path, null),"Filter(Path, Path) " + filter.getClass().getName() + " not " + expectedFileVisitResult + " for null");
assertNotNull(filter.toString());
void assertFooBarFileFiltering(IOFileFilter filter) {assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("bar"), true);
assertFiltering(filter, new File("fred"), false);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("bar").toPath(), true);
assertFiltering(filter, new File("fred").toPath(), false);
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("bar"), true);
assertFiltering(filter, new File("FOO"), false);
assertFiltering(filter, new File("BAR"), false);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("bar").toPath(), true);
assertFiltering(filter, new File("FOO").toPath(), false);
assertFiltering(filter, new File("BAR").toPath(), false);
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("bar"), true);
assertFiltering(filter, new File("FOO"), true);
assertFiltering(filter, new File("BAR"), true);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("bar").toPath(), true);
assertFiltering(filter, new File("FOO").toPath(), true);
assertFiltering(filter, new File("BAR").toPath(), true);
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("bar"), true);
assertFiltering(filter, new File("FOO"), WINDOWS);
assertFiltering(filter, new File("BAR"), WINDOWS);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("bar").toPath(), true);
assertFiltering(filter, new File("FOO").toPath(), WINDOWS);
assertFiltering(filter, new File("BAR").toPath(), WINDOWS);
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("bar"), true);
assertFiltering(filter, new File("FOO"), false);
assertFiltering(filter, new File("BAR"), false);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("bar").toPath(), true);
assertFiltering(filter, new File("FOO").toPath(), false);
assertFiltering(filter, new File("BAR").toPath(), false);
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("bar"), true);
assertFiltering(filter, new File("fred"), false);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("bar").toPath(), true);
assertFiltering(filter, new File("fred").toPath(), false);
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("FOO"), false); // case-sensitive
assertFiltering(filter, new File("barfoo"), false);
assertFiltering(filter, new File("foobar"), false);
assertFiltering(filter, new File("fred"), false);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("FOO").toPath(), false); // case-sensitive
assertFiltering(filter, new File("barfoo").toPath(), false);
assertFiltering(filter, new File("foobar").toPath(), false);
assertFiltering(filter, new File("fred").toPath(), false);
assertFiltering(filter, new File("foo"), true);
assertFiltering(filter, new File("FOO"), true); // case-insensitive
assertFiltering(filter, new File("barfoo"), false);
assertFiltering(filter, new File("foobar"), false);
assertFiltering(filter, new File("fred"), false);
assertFiltering(filter, new File("foo").toPath(), true);
assertFiltering(filter, new File("FOO").toPath(), true); // case-insensitive
assertFiltering(filter, new File("barfoo").toPath(), false);
assertFiltering(filter, new File("foobar").toPath(), false);
assertFiltering(filter, new File("fred").toPath(), false);
assertTrue(FileUtils.waitFor(FileUtils.current(), 10));
assertTrue(wasInterrupted.get());
assertTrue(permissions.contains(PosixFilePermission.OWNER_WRITE), permissions::toString);
assertEquals(contents, PathUtils.readString(symLink, charset));
assertFalse(Files.exists(symLink), symLink::toString);
assertTrue(Files.exists(file), file::toString);
assertEquals(permissions, Files.getPosixFilePermissions(file), file::toString);
assertFalse(Files.isWritable(testDir),() -> String.format("Parent directory '%s' of '%s' should NOT be Writable, permissions are %s ", testDir, file, permissions));
assertFalse(Files.isExecutable(testDir),() -> String.format("Parent directory '%s' of '%s' should NOT be Executable, permissions are %s ", testDir, file, permissions));
assertThrows(IOException.class, () -> PathUtils.delete(file));
assertFalse(Files.exists(file));
assertEquals(permissions, Files.getPosixFilePermissions(testDir), testDir::toString);
assertFalse(Files.isWritable(testDir));
assertFalse(Files.isExecutable(testDir));
* Assert that the content of a file is equal to that in a byte[].** @param b0   the expected contents* @param file the file to check* @throws IOException If an I/O error occurs while reading the file contents*/public static void assertEqualContent(final byte[] b0, final File file) throws IOException {assertEqualContent(b0, file.toPath());
* Assert that the content of a file is equal to that in a byte[].** @param b0   the expected contents* @param file the file to check* @throws IOException If an I/O error occurs while reading the file contents*/public static void assertEqualContent(final byte[] b0, final Path file) throws IOException {int count = 0, numRead = 0;
assertEquals(b0.length, count, "Different number of bytes: ");
assertEquals(b0[i], b1[i], "byte " + i + " differs");
* Assert that the content of a file is equal to that in a char[].** @param c0   the expected contents* @param file the file to check* @throws IOException If an I/O error occurs while reading the file contents*/public static void assertEqualContent(final char[] c0, final File file) throws IOException {assertEqualContent(c0, file.toPath());
* Assert that the content of a file is equal to that in a char[].** @param c0   the expected contents* @param file the file to check* @throws IOException If an I/O error occurs while reading the file contents*/public static void assertEqualContent(final char[] c0, final Path file) throws IOException {int count = 0, numRead = 0;
assertEquals(c0.length, count, "Different number of chars: ");
assertEquals(c0[i], c1[i], "char " + i + " differs");
* Assert that the content of two files is the same.*/private static void assertEqualContent(final File f0, final File f1)throws IOException {/* This doesn't work because the filesize isn't updated until the file* is closed.assertTrue( "The files " + f0 + " and " + f1 +" have differing file sizes (" + f0.length() +" vs " + f1.length() + ")", ( f0.length() == f1.length() ) );
assertTrue(n0 == n1,"The files " + f0 + " and " + f1 +" have differing number of bytes available (" + n0 + " vs " + n1 + ")");
assertArrayEquals(buf0, buf1, "The files " + f0 + " and " + f1 + " have different content");
assertTrue(file.exists(), "Check existence of output file");
assertEqualContent(referenceFile, file);
assertTrue(file.delete(), "Couldn't delete file: " + file);
assertTrue( filename + "Test output data file shouldn't previously exist",!destination.exists() );
assertNull(FilenameUtils.concat("", null));
assertNull(FilenameUtils.concat(null, null));
assertNull(FilenameUtils.concat(null, ""));
assertNull(FilenameUtils.concat(null, "a"));
assertEquals(SEP + "a", FilenameUtils.concat(null, "/a"));
assertNull(FilenameUtils.concat("", ":")); // invalid prefix
assertNull(FilenameUtils.concat(":", "")); // invalid prefix
assertEquals("f" + SEP, FilenameUtils.concat("", "f/"));
assertEquals("f", FilenameUtils.concat("", "f"));
assertEquals("a" + SEP + "f" + SEP, FilenameUtils.concat("a/", "f/"));
assertEquals("a" + SEP + "f", FilenameUtils.concat("a", "f"));
assertEquals("a" + SEP + "b" + SEP + "f" + SEP, FilenameUtils.concat("a/b/", "f/"));
assertEquals("a" + SEP + "b" + SEP + "f", FilenameUtils.concat("a/b", "f"));
assertEquals("a" + SEP + "f" + SEP, FilenameUtils.concat("a/b/", "../f/"));
assertEquals("a" + SEP + "f", FilenameUtils.concat("a/b", "../f"));
assertEquals("a" + SEP + "c" + SEP + "g" + SEP, FilenameUtils.concat("a/b/../c/", "f/../g/"));
assertEquals("a" + SEP + "c" + SEP + "g", FilenameUtils.concat("a/b/../c", "f/../g"));
assertEquals("a" + SEP + "c.txt" + SEP + "f", FilenameUtils.concat("a/c.txt", "f"));
assertEquals(SEP + "f" + SEP, FilenameUtils.concat("", "/f/"));
assertEquals(SEP + "f", FilenameUtils.concat("", "/f"));
assertEquals(SEP + "f" + SEP, FilenameUtils.concat("a/", "/f/"));
assertEquals(SEP + "f", FilenameUtils.concat("a", "/f"));
assertEquals(SEP + "c" + SEP + "d", FilenameUtils.concat("a/b/", "/c/d"));
assertEquals("C:c" + SEP + "d", FilenameUtils.concat("a/b/", "C:c/d"));
assertEquals("C:" + SEP + "c" + SEP + "d", FilenameUtils.concat("a/b/", "C:/c/d"));
assertEquals("~" + SEP + "c" + SEP + "d", FilenameUtils.concat("a/b/", "~/c/d"));
assertEquals("~user" + SEP + "c" + SEP + "d", FilenameUtils.concat("a/b/", "~user/c/d"));
assertEquals("~" + SEP, FilenameUtils.concat("a/b/", "~"));
assertEquals("~user" + SEP, FilenameUtils.concat("a/b/", "~user"));
assertTrue(FilenameUtils.directoryContains("/foo", "/foo/bar"));
assertTrue(FilenameUtils.directoryContains("/foo/", "/foo/bar"));
assertTrue(FilenameUtils.directoryContains("C:\\foo", "C:\\foo\\bar"));
assertTrue(FilenameUtils.directoryContains("C:\\foo\\", "C:\\foo\\bar"));
assertFalse(FilenameUtils.directoryContains("/foo", "/foo"));
assertFalse(FilenameUtils.directoryContains("/foo", "/foobar"));
assertFalse(FilenameUtils.directoryContains("C:\\foo", "C:\\foobar"));
assertFalse(FilenameUtils.directoryContains("/foo", null));
assertFalse(FilenameUtils.directoryContains("", ""));
assertFalse(FilenameUtils.directoryContains("", "/foo"));
assertFalse(FilenameUtils.directoryContains("/foo", ""));
assertTrue(FilenameUtils.equals(null, null));
assertFalse(FilenameUtils.equals(null, ""));
assertFalse(FilenameUtils.equals("", null));
assertTrue(FilenameUtils.equals("", ""));
assertTrue(FilenameUtils.equals("file.txt", "file.txt"));
assertFalse(FilenameUtils.equals("file.txt", "FILE.TXT"));
assertFalse(FilenameUtils.equals("a\\b\\file.txt", "a/b/file.txt"));
assertFalse(FilenameUtils.equals("file.txt", "FILE.TXT", true, IOCase.SENSITIVE));
assertTrue(FilenameUtils.equals("file.txt", "FILE.TXT", true, IOCase.INSENSITIVE));
assertEquals(WINDOWS, FilenameUtils.equals("file.txt", "FILE.TXT", true, IOCase.SYSTEM));
assertFalse(FilenameUtils.equals("file.txt", "FILE.TXT", true, null));
assertTrue(FilenameUtils.equalsNormalized(null, null));
assertFalse(FilenameUtils.equalsNormalized(null, ""));
assertFalse(FilenameUtils.equalsNormalized("", null));
assertTrue(FilenameUtils.equalsNormalized("", ""));
assertTrue(FilenameUtils.equalsNormalized("file.txt", "file.txt"));
assertFalse(FilenameUtils.equalsNormalized("file.txt", "FILE.TXT"));
assertTrue(FilenameUtils.equalsNormalized("a\\b\\file.txt", "a/b/file.txt"));
assertFalse(FilenameUtils.equalsNormalized("a/b/", "a/b"));
assertFalse(FilenameUtils.equalsNormalizedOnSystem("//file.txt", "file.txt"));
assertFalse(FilenameUtils.equalsNormalizedOnSystem("file.txt", "//file.txt"));
assertFalse(FilenameUtils.equalsNormalizedOnSystem("//file.txt", "//file.txt"));
assertTrue(FilenameUtils.equalsNormalizedOnSystem(null, null));
assertFalse(FilenameUtils.equalsNormalizedOnSystem(null, ""));
assertFalse(FilenameUtils.equalsNormalizedOnSystem("", null));
assertTrue(FilenameUtils.equalsNormalizedOnSystem("", ""));
assertTrue(FilenameUtils.equalsNormalizedOnSystem("file.txt", "file.txt"));
assertEquals(WINDOWS, FilenameUtils.equalsNormalizedOnSystem("file.txt", "FILE.TXT"));
assertTrue(FilenameUtils.equalsNormalizedOnSystem("a\\b\\file.txt", "a/b/file.txt"));
assertFalse(FilenameUtils.equalsNormalizedOnSystem("a/b/", "a/b"));
assertTrue(FilenameUtils.equalsOnSystem(null, null));
assertFalse(FilenameUtils.equalsOnSystem(null, ""));
assertFalse(FilenameUtils.equalsOnSystem("", null));
assertTrue(FilenameUtils.equalsOnSystem("", ""));
assertTrue(FilenameUtils.equalsOnSystem("file.txt", "file.txt"));
assertEquals(WINDOWS, FilenameUtils.equalsOnSystem("file.txt", "FILE.TXT"));
assertFalse(FilenameUtils.equalsOnSystem("a\\b\\file.txt", "a/b/file.txt"));
assertNull(FilenameUtils.getBaseName(null));
assertEquals("noseperator", FilenameUtils.getBaseName("noseperator.inthispath"));
assertEquals("c", FilenameUtils.getBaseName("a/b/c.txt"));
assertEquals("c", FilenameUtils.getBaseName("a/b/c"));
assertEquals("", FilenameUtils.getBaseName("a/b/c/"));
assertEquals("c", FilenameUtils.getBaseName("a\\b\\c"));
assertEquals("file.txt", FilenameUtils.getBaseName("file.txt.bak"));
assertThrows(IllegalArgumentException.class, () -> FilenameUtils.getBaseName("fil\u0000e.txt.bak"));
assertNull(FilenameUtils.getExtension(null));
assertEquals("ext", FilenameUtils.getExtension("file.ext"));
assertEquals("", FilenameUtils.getExtension("README"));
assertEquals("com", FilenameUtils.getExtension("domain.dot.com"));
assertEquals("jpeg", FilenameUtils.getExtension("image.jpeg"));
assertEquals("", FilenameUtils.getExtension("a.b/c"));
assertEquals("txt", FilenameUtils.getExtension("a.b/c.txt"));
assertEquals("", FilenameUtils.getExtension("a/b/c"));
assertEquals("", FilenameUtils.getExtension("a.b\\c"));
assertEquals("txt", FilenameUtils.getExtension("a.b\\c.txt"));
assertEquals("", FilenameUtils.getExtension("a\\b\\c"));
assertEquals("", FilenameUtils.getExtension("C:\\temp\\foo.bar\\README"));
assertEquals("ext", FilenameUtils.getExtension("../filename.ext"));
throw new AssertionError("Expected Exception");
assertEquals("NTFS ADS separator (':') in file name is forbidden.", e.getMessage());
assertEquals("txt", FilenameUtils.getExtension("foo.exe:bar.txt"));
assertNull(FilenameUtils.getFullPath(null));
assertEquals("", FilenameUtils.getFullPath("noseperator.inthispath"));
assertEquals("a/b/", FilenameUtils.getFullPath("a/b/c.txt"));
assertEquals("a/b/", FilenameUtils.getFullPath("a/b/c"));
assertEquals("a/b/c/", FilenameUtils.getFullPath("a/b/c/"));
assertEquals("a\\b\\", FilenameUtils.getFullPath("a\\b\\c"));
assertNull(FilenameUtils.getFullPath(":"));
assertNull(FilenameUtils.getFullPath("1:/a/b/c.txt"));
assertNull(FilenameUtils.getFullPath("1:"));
assertNull(FilenameUtils.getFullPath("1:a"));
assertNull(FilenameUtils.getFullPath("///a/b/c.txt"));
assertNull(FilenameUtils.getFullPath("//a"));
assertEquals("", FilenameUtils.getFullPath(""));
assertEquals("C:", FilenameUtils.getFullPath("C:"));
assertEquals("", FilenameUtils.getFullPath("C:"));
assertEquals("C:/", FilenameUtils.getFullPath("C:/"));
assertEquals("//server/", FilenameUtils.getFullPath("//server/"));
assertEquals("~/", FilenameUtils.getFullPath("~"));
assertEquals("~/", FilenameUtils.getFullPath("~/"));
assertEquals("~user/", FilenameUtils.getFullPath("~user"));
assertEquals("~user/", FilenameUtils.getFullPath("~user/"));
assertEquals("a/b/", FilenameUtils.getFullPath("a/b/c.txt"));
assertEquals("/a/b/", FilenameUtils.getFullPath("/a/b/c.txt"));
assertEquals("C:", FilenameUtils.getFullPath("C:a"));
assertEquals("C:a/b/", FilenameUtils.getFullPath("C:a/b/c.txt"));
assertEquals("C:/a/b/", FilenameUtils.getFullPath("C:/a/b/c.txt"));
assertEquals("//server/a/b/", FilenameUtils.getFullPath("//server/a/b/c.txt"));
assertEquals("~/a/b/", FilenameUtils.getFullPath("~/a/b/c.txt"));
assertEquals("~user/a/b/", FilenameUtils.getFullPath("~user/a/b/c.txt"));
assertNull(FilenameUtils.getFullPathNoEndSeparator(null));
assertEquals("", FilenameUtils.getFullPathNoEndSeparator("noseperator.inthispath"));
assertEquals("a/b", FilenameUtils.getFullPathNoEndSeparator("a/b/c.txt"));
assertEquals("a/b", FilenameUtils.getFullPathNoEndSeparator("a/b/c"));
assertEquals("a/b/c", FilenameUtils.getFullPathNoEndSeparator("a/b/c/"));
assertEquals("a\\b", FilenameUtils.getFullPathNoEndSeparator("a\\b\\c"));
assertNull(FilenameUtils.getFullPathNoEndSeparator(":"));
assertNull(FilenameUtils.getFullPathNoEndSeparator("1:/a/b/c.txt"));
assertNull(FilenameUtils.getFullPathNoEndSeparator("1:"));
assertNull(FilenameUtils.getFullPathNoEndSeparator("1:a"));
assertNull(FilenameUtils.getFullPathNoEndSeparator("///a/b/c.txt"));
assertNull(FilenameUtils.getFullPathNoEndSeparator("//a"));
assertEquals("", FilenameUtils.getFullPathNoEndSeparator(""));
assertEquals("C:", FilenameUtils.getFullPathNoEndSeparator("C:"));
assertEquals("", FilenameUtils.getFullPathNoEndSeparator("C:"));
assertEquals("C:/", FilenameUtils.getFullPathNoEndSeparator("C:/"));
assertEquals("//server/", FilenameUtils.getFullPathNoEndSeparator("//server/"));
assertEquals("~", FilenameUtils.getFullPathNoEndSeparator("~"));
assertEquals("~/", FilenameUtils.getFullPathNoEndSeparator("~/"));
assertEquals("~user", FilenameUtils.getFullPathNoEndSeparator("~user"));
assertEquals("~user/", FilenameUtils.getFullPathNoEndSeparator("~user/"));
assertEquals("a/b", FilenameUtils.getFullPathNoEndSeparator("a/b/c.txt"));
assertEquals("/a/b", FilenameUtils.getFullPathNoEndSeparator("/a/b/c.txt"));
assertEquals("C:", FilenameUtils.getFullPathNoEndSeparator("C:a"));
assertEquals("C:a/b", FilenameUtils.getFullPathNoEndSeparator("C:a/b/c.txt"));
assertEquals("C:/a/b", FilenameUtils.getFullPathNoEndSeparator("C:/a/b/c.txt"));
assertEquals("//server/a/b", FilenameUtils.getFullPathNoEndSeparator("//server/a/b/c.txt"));
assertEquals("~/a/b", FilenameUtils.getFullPathNoEndSeparator("~/a/b/c.txt"));
assertEquals("~user/a/b", FilenameUtils.getFullPathNoEndSeparator("~user/a/b/c.txt"));
assertEquals("/", FilenameUtils.getFullPathNoEndSeparator("/"));
assertEquals("\\", FilenameUtils.getFullPathNoEndSeparator("\\"));
assertEquals("/", FilenameUtils.getFullPathNoEndSeparator("/abc"));
assertEquals("\\", FilenameUtils.getFullPathNoEndSeparator("\\abc"));
assertEquals("/abc", FilenameUtils.getFullPathNoEndSeparator("/abc/xyz"));
assertEquals("\\abc", FilenameUtils.getFullPathNoEndSeparator("\\abc\\xyz"));
assertNull(FilenameUtils.getName(null));
assertEquals("noseperator.inthispath", FilenameUtils.getName("noseperator.inthispath"));
assertEquals("c.txt", FilenameUtils.getName("a/b/c.txt"));
assertEquals("c", FilenameUtils.getName("a/b/c"));
assertEquals("", FilenameUtils.getName("a/b/c/"));
assertEquals("c", FilenameUtils.getName("a\\b\\c"));
assertNull(FilenameUtils.getPath(null));
assertEquals("", FilenameUtils.getPath("noseperator.inthispath"));
assertEquals("", FilenameUtils.getPath("/noseperator.inthispath"));
assertEquals("", FilenameUtils.getPath("\\noseperator.inthispath"));
assertEquals("a/b/", FilenameUtils.getPath("a/b/c.txt"));
assertEquals("a/b/", FilenameUtils.getPath("a/b/c"));
assertEquals("a/b/c/", FilenameUtils.getPath("a/b/c/"));
assertEquals("a\\b\\", FilenameUtils.getPath("a\\b\\c"));
assertNull(FilenameUtils.getPath(":"));
assertNull(FilenameUtils.getPath("1:/a/b/c.txt"));
assertNull(FilenameUtils.getPath("1:"));
assertNull(FilenameUtils.getPath("1:a"));
assertNull(FilenameUtils.getPath("///a/b/c.txt"));
assertNull(FilenameUtils.getPath("//a"));
assertEquals("", FilenameUtils.getPath(""));
assertEquals("", FilenameUtils.getPath("C:"));
assertEquals("", FilenameUtils.getPath("C:/"));
assertEquals("", FilenameUtils.getPath("//server/"));
assertEquals("", FilenameUtils.getPath("~"));
assertEquals("", FilenameUtils.getPath("~/"));
assertEquals("", FilenameUtils.getPath("~user"));
assertEquals("", FilenameUtils.getPath("~user/"));
assertEquals("a/b/", FilenameUtils.getPath("a/b/c.txt"));
assertEquals("a/b/", FilenameUtils.getPath("/a/b/c.txt"));
assertEquals("", FilenameUtils.getPath("C:a"));
assertEquals("a/b/", FilenameUtils.getPath("C:a/b/c.txt"));
assertEquals("a/b/", FilenameUtils.getPath("C:/a/b/c.txt"));
assertEquals("a/b/", FilenameUtils.getPath("//server/a/b/c.txt"));
assertEquals("a/b/", FilenameUtils.getPath("~/a/b/c.txt"));
assertEquals("a/b/", FilenameUtils.getPath("~user/a/b/c.txt"));
assertThrows(IllegalArgumentException.class, () -> FilenameUtils.getPath("~user/a/\u0000b/c.txt"));
assertNull(FilenameUtils.getPath(null));
assertEquals("", FilenameUtils.getPath("noseperator.inthispath"));
assertEquals("", FilenameUtils.getPathNoEndSeparator("/noseperator.inthispath"));
assertEquals("", FilenameUtils.getPathNoEndSeparator("\\noseperator.inthispath"));
assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("a/b/c.txt"));
assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("a/b/c"));
assertEquals("a/b/c", FilenameUtils.getPathNoEndSeparator("a/b/c/"));
assertEquals("a\\b", FilenameUtils.getPathNoEndSeparator("a\\b\\c"));
assertNull(FilenameUtils.getPathNoEndSeparator(":"));
assertNull(FilenameUtils.getPathNoEndSeparator("1:/a/b/c.txt"));
assertNull(FilenameUtils.getPathNoEndSeparator("1:"));
assertNull(FilenameUtils.getPathNoEndSeparator("1:a"));
assertNull(FilenameUtils.getPathNoEndSeparator("///a/b/c.txt"));
assertNull(FilenameUtils.getPathNoEndSeparator("//a"));
assertEquals("", FilenameUtils.getPathNoEndSeparator(""));
assertEquals("", FilenameUtils.getPathNoEndSeparator("C:"));
assertEquals("", FilenameUtils.getPathNoEndSeparator("C:/"));
assertEquals("", FilenameUtils.getPathNoEndSeparator("//server/"));
assertEquals("", FilenameUtils.getPathNoEndSeparator("~"));
assertEquals("", FilenameUtils.getPathNoEndSeparator("~/"));
assertEquals("", FilenameUtils.getPathNoEndSeparator("~user"));
assertEquals("", FilenameUtils.getPathNoEndSeparator("~user/"));
assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("a/b/c.txt"));
assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("/a/b/c.txt"));
assertEquals("", FilenameUtils.getPathNoEndSeparator("C:a"));
assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("C:a/b/c.txt"));
assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("C:/a/b/c.txt"));
assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("//server/a/b/c.txt"));
assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("~/a/b/c.txt"));
assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("~user/a/b/c.txt"));
assertThrows(IllegalArgumentException.class, () -> FilenameUtils.getPathNoEndSeparator("~user/a\u0000/b/c.txt"));
assertNull(FilenameUtils.getPrefix(null));
assertNull(FilenameUtils.getPrefix(":"));
assertNull(FilenameUtils.getPrefix("1:\\a\\b\\c.txt"));
assertNull(FilenameUtils.getPrefix("1:"));
assertNull(FilenameUtils.getPrefix("1:a"));
assertNull(FilenameUtils.getPrefix("\\\\\\a\\b\\c.txt"));
assertNull(FilenameUtils.getPrefix("\\\\a"));
assertEquals("", FilenameUtils.getPrefix(""));
assertEquals("\\", FilenameUtils.getPrefix("\\"));
assertEquals("C:", FilenameUtils.getPrefix("C:"));
assertEquals("", FilenameUtils.getPrefix("C:"));
assertEquals("C:\\", FilenameUtils.getPrefix("C:\\"));
assertEquals("//server/", FilenameUtils.getPrefix("//server/"));
assertEquals("~/", FilenameUtils.getPrefix("~"));
assertEquals("~/", FilenameUtils.getPrefix("~/"));
assertEquals("~user/", FilenameUtils.getPrefix("~user"));
assertEquals("~user/", FilenameUtils.getPrefix("~user/"));
assertEquals("", FilenameUtils.getPrefix("a\\b\\c.txt"));
assertEquals("\\", FilenameUtils.getPrefix("\\a\\b\\c.txt"));
assertEquals("C:\\", FilenameUtils.getPrefix("C:\\a\\b\\c.txt"));
assertEquals("\\\\server\\", FilenameUtils.getPrefix("\\\\server\\a\\b\\c.txt"));
assertEquals("", FilenameUtils.getPrefix("a/b/c.txt"));
assertEquals("/", FilenameUtils.getPrefix("/a/b/c.txt"));
assertEquals("C:/", FilenameUtils.getPrefix("C:/a/b/c.txt"));
assertEquals("//server/", FilenameUtils.getPrefix("//server/a/b/c.txt"));
assertEquals("~/", FilenameUtils.getPrefix("~/a/b/c.txt"));
assertEquals("~user/", FilenameUtils.getPrefix("~user/a/b/c.txt"));
assertEquals("", FilenameUtils.getPrefix("a\\b\\c.txt"));
assertEquals("\\", FilenameUtils.getPrefix("\\a\\b\\c.txt"));
assertEquals("~\\", FilenameUtils.getPrefix("~\\a\\b\\c.txt"));
assertEquals("~user\\", FilenameUtils.getPrefix("~user\\a\\b\\c.txt"));
assertThrows(IllegalArgumentException.class, () -> FilenameUtils.getPrefix("~u\u0000ser\\a\\b\\c.txt"));
assertEquals(-1, FilenameUtils.getPrefixLength(null));
assertEquals(-1, FilenameUtils.getPrefixLength(":"));
assertEquals(-1, FilenameUtils.getPrefixLength("1:\\a\\b\\c.txt"));
assertEquals(-1, FilenameUtils.getPrefixLength("1:"));
assertEquals(-1, FilenameUtils.getPrefixLength("1:a"));
assertEquals(-1, FilenameUtils.getPrefixLength("\\\\\\a\\b\\c.txt"));
assertEquals(-1, FilenameUtils.getPrefixLength("\\\\a"));
assertEquals(0, FilenameUtils.getPrefixLength(""));
assertEquals(1, FilenameUtils.getPrefixLength("\\"));
assertEquals(2, FilenameUtils.getPrefixLength("C:"));
assertEquals(0, FilenameUtils.getPrefixLength("C:"));
assertEquals(3, FilenameUtils.getPrefixLength("C:\\"));
assertEquals(9, FilenameUtils.getPrefixLength("//server/"));
assertEquals(2, FilenameUtils.getPrefixLength("~"));
assertEquals(2, FilenameUtils.getPrefixLength("~/"));
assertEquals(6, FilenameUtils.getPrefixLength("~user"));
assertEquals(6, FilenameUtils.getPrefixLength("~user/"));
assertEquals(0, FilenameUtils.getPrefixLength("a\\b\\c.txt"));
assertEquals(1, FilenameUtils.getPrefixLength("\\a\\b\\c.txt"));
assertEquals(2, FilenameUtils.getPrefixLength("C:a\\b\\c.txt"));
assertEquals(3, FilenameUtils.getPrefixLength("C:\\a\\b\\c.txt"));
assertEquals(9, FilenameUtils.getPrefixLength("\\\\server\\a\\b\\c.txt"));
assertEquals(0, FilenameUtils.getPrefixLength("a/b/c.txt"));
assertEquals(1, FilenameUtils.getPrefixLength("/a/b/c.txt"));
assertEquals(3, FilenameUtils.getPrefixLength("C:/a/b/c.txt"));
assertEquals(9, FilenameUtils.getPrefixLength("//server/a/b/c.txt"));
assertEquals(2, FilenameUtils.getPrefixLength("~/a/b/c.txt"));
assertEquals(6, FilenameUtils.getPrefixLength("~user/a/b/c.txt"));
assertEquals(0, FilenameUtils.getPrefixLength("a\\b\\c.txt"));
assertEquals(1, FilenameUtils.getPrefixLength("\\a\\b\\c.txt"));
assertEquals(2, FilenameUtils.getPrefixLength("~\\a\\b\\c.txt"));
assertEquals(6, FilenameUtils.getPrefixLength("~user\\a\\b\\c.txt"));
assertEquals(9, FilenameUtils.getPrefixLength("//server/a/b/c.txt"));
assertEquals(-1, FilenameUtils.getPrefixLength("\\\\\\a\\b\\c.txt"));
assertEquals(-1, FilenameUtils.getPrefixLength("///a/b/c.txt"));
assertEquals(1, FilenameUtils.getPrefixLength("/:foo"));
assertEquals(1, FilenameUtils.getPrefixLength("/:/"));
assertEquals(1, FilenameUtils.getPrefixLength("/:::::::.txt"));
assertEquals(12, FilenameUtils.getPrefixLength("\\\\127.0.0.1\\a\\b\\c.txt"));
assertEquals(6, FilenameUtils.getPrefixLength("\\\\::1\\a\\b\\c.txt"));
assertEquals(21, FilenameUtils.getPrefixLength("\\\\server.example.org\\a\\b\\c.txt"));
assertEquals(10, FilenameUtils.getPrefixLength("\\\\server.\\a\\b\\c.txt"));
assertEquals(-1, FilenameUtils.getPrefixLength("\\\\-server\\a\\b\\c.txt"));
assertEquals(-1, FilenameUtils.getPrefixLength("\\\\.\\a\\b\\c.txt"));
assertEquals(-1, FilenameUtils.getPrefixLength("\\\\..\\a\\b\\c.txt"));
assertEquals(-1, FilenameUtils.indexOfExtension(null));
assertEquals(-1, FilenameUtils.indexOfExtension("file"));
assertEquals(4, FilenameUtils.indexOfExtension("file.txt"));
assertEquals(13, FilenameUtils.indexOfExtension("a.txt/b.txt/c.txt"));
assertEquals(-1, FilenameUtils.indexOfExtension("a/b/c"));
assertEquals(-1, FilenameUtils.indexOfExtension("a\\b\\c"));
assertEquals(-1, FilenameUtils.indexOfExtension("a/b.notextension/c"));
assertEquals(-1, FilenameUtils.indexOfExtension("a\\b.notextension\\c"));
throw new AssertionError("Expected Exception");
assertEquals("NTFS ADS separator (':') in file name is forbidden.", e.getMessage());
assertEquals(11, FilenameUtils.indexOfExtension("foo.exe:bar.txt"));
assertEquals(-1, FilenameUtils.indexOfLastSeparator(null));
assertEquals(-1, FilenameUtils.indexOfLastSeparator("noseperator.inthispath"));
assertEquals(3, FilenameUtils.indexOfLastSeparator("a/b/c"));
assertEquals(3, FilenameUtils.indexOfLastSeparator("a\\b\\c"));
assertThrows(IllegalArgumentException.class, () -> FilenameUtils.getName("a\\b\\\u0000c"));
assertFalse(FilenameUtils.isExtension(null, (String) null));
assertFalse(FilenameUtils.isExtension("file.txt", (String) null));
assertTrue(FilenameUtils.isExtension("file", (String) null));
assertFalse(FilenameUtils.isExtension("file.txt", ""));
assertTrue(FilenameUtils.isExtension("file", ""));
assertTrue(FilenameUtils.isExtension("file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("file.txt", "rtf"));
assertFalse(FilenameUtils.isExtension("a/b/file.txt", (String) null));
assertFalse(FilenameUtils.isExtension("a/b/file.txt", ""));
assertTrue(FilenameUtils.isExtension("a/b/file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("a/b/file.txt", "rtf"));
assertFalse(FilenameUtils.isExtension("a.b/file.txt", (String) null));
assertFalse(FilenameUtils.isExtension("a.b/file.txt", ""));
assertTrue(FilenameUtils.isExtension("a.b/file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("a.b/file.txt", "rtf"));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", (String) null));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", ""));
assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", "rtf"));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", (String) null));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", ""));
assertTrue(FilenameUtils.isExtension("a.b\\file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", "rtf"));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", "TXT"));
assertThrows(IllegalArgumentException.class, () -> FilenameUtils.isExtension("a.b\\fi\u0000le.txt", "TXT"));
assertFalse(FilenameUtils.isExtension(null, (String[]) null));
assertFalse(FilenameUtils.isExtension("file.txt", (String[]) null));
assertTrue(FilenameUtils.isExtension("file", (String[]) null));
assertFalse(FilenameUtils.isExtension("file.txt"));
assertTrue(FilenameUtils.isExtension("file.txt", new String[]{"txt"}));
assertFalse(FilenameUtils.isExtension("file.txt", new String[]{"rtf"}));
assertTrue(FilenameUtils.isExtension("file", "rtf", ""));
assertTrue(FilenameUtils.isExtension("file.txt", "rtf", "txt"));
assertFalse(FilenameUtils.isExtension("a/b/file.txt", (String[]) null));
assertFalse(FilenameUtils.isExtension("a/b/file.txt"));
assertTrue(FilenameUtils.isExtension("a/b/file.txt", new String[]{"txt"}));
assertFalse(FilenameUtils.isExtension("a/b/file.txt", new String[]{"rtf"}));
assertTrue(FilenameUtils.isExtension("a/b/file.txt", "rtf", "txt"));
assertFalse(FilenameUtils.isExtension("a.b/file.txt", (String[]) null));
assertFalse(FilenameUtils.isExtension("a.b/file.txt"));
assertTrue(FilenameUtils.isExtension("a.b/file.txt", new String[]{"txt"}));
assertFalse(FilenameUtils.isExtension("a.b/file.txt", new String[]{"rtf"}));
assertTrue(FilenameUtils.isExtension("a.b/file.txt", "rtf", "txt"));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", (String[]) null));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt"));
assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", new String[]{"txt"}));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", new String[]{"rtf"}));
assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", "rtf", "txt"));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", (String[]) null));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt"));
assertTrue(FilenameUtils.isExtension("a.b\\file.txt", new String[]{"txt"}));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new String[]{"rtf"}));
assertTrue(FilenameUtils.isExtension("a.b\\file.txt", "rtf", "txt"));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new String[]{"TXT"}));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", "TXT", "RTF"));
assertFalse(FilenameUtils.isExtension(null, (Collection<String>) null));
assertFalse(FilenameUtils.isExtension("file.txt", (Collection<String>) null));
assertTrue(FilenameUtils.isExtension("file", (Collection<String>) null));
assertFalse(FilenameUtils.isExtension("file.txt", new ArrayList<>()));
assertTrue(FilenameUtils.isExtension("file.txt", new ArrayList<>(Arrays.asList("txt"))));
assertFalse(FilenameUtils.isExtension("file.txt", new ArrayList<>(Arrays.asList("rtf"))));
assertTrue(FilenameUtils.isExtension("file", new ArrayList<>(Arrays.asList("rtf", ""))));
assertTrue(FilenameUtils.isExtension("file.txt", new ArrayList<>(Arrays.asList("rtf", "txt"))));
assertFalse(FilenameUtils.isExtension("a/b/file.txt", (Collection<String>) null));
assertFalse(FilenameUtils.isExtension("a/b/file.txt", new ArrayList<>()));
assertTrue(FilenameUtils.isExtension("a/b/file.txt", new ArrayList<>(Arrays.asList("txt"))));
assertFalse(FilenameUtils.isExtension("a/b/file.txt", new ArrayList<>(Arrays.asList("rtf"))));
assertTrue(FilenameUtils.isExtension("a/b/file.txt", new ArrayList<>(Arrays.asList("rtf", "txt"))));
assertFalse(FilenameUtils.isExtension("a.b/file.txt", (Collection<String>) null));
assertFalse(FilenameUtils.isExtension("a.b/file.txt", new ArrayList<>()));
assertTrue(FilenameUtils.isExtension("a.b/file.txt", new ArrayList<>(Arrays.asList("txt"))));
assertFalse(FilenameUtils.isExtension("a.b/file.txt", new ArrayList<>(Arrays.asList("rtf"))));
assertTrue(FilenameUtils.isExtension("a.b/file.txt", new ArrayList<>(Arrays.asList("rtf", "txt"))));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", (Collection<String>) null));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", new ArrayList<>()));
assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", new ArrayList<>(Arrays.asList("txt"))));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", new ArrayList<>(Arrays.asList("rtf"))));
assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", new ArrayList<>(Arrays.asList("rtf", "txt"))));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", (Collection<String>) null));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new ArrayList<>()));
assertTrue(FilenameUtils.isExtension("a.b\\file.txt", new ArrayList<>(Arrays.asList("txt"))));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new ArrayList<>(Arrays.asList("rtf"))));
assertTrue(FilenameUtils.isExtension("a.b\\file.txt", new ArrayList<>(Arrays.asList("rtf", "txt"))));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new ArrayList<>(Arrays.asList("TXT"))));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", new ArrayList<>(Arrays.asList("TXT", "RTF"))));
assertTrue(FilenameUtils.isExtension("file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("file.txt", "rtf"));
assertTrue(FilenameUtils.isExtension("file", "rtf", ""));
assertTrue(FilenameUtils.isExtension("file.txt", "rtf", "txt"));
assertTrue(FilenameUtils.isExtension("a/b/file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("a/b/file.txt", "rtf"));
assertTrue(FilenameUtils.isExtension("a/b/file.txt", "rtf", "txt"));
assertTrue(FilenameUtils.isExtension("a.b/file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("a.b/file.txt", "rtf"));
assertTrue(FilenameUtils.isExtension("a.b/file.txt", "rtf", "txt"));
assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("a\\b\\file.txt", "rtf"));
assertTrue(FilenameUtils.isExtension("a\\b\\file.txt", "rtf", "txt"));
assertTrue(FilenameUtils.isExtension("a.b\\file.txt", "txt"));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", "rtf"));
assertTrue(FilenameUtils.isExtension("a.b\\file.txt", "rtf", "txt"));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", "TXT"));
assertFalse(FilenameUtils.isExtension("a.b\\file.txt", "TXT", "RTF"));
assertNull(FilenameUtils.normalize(null));
assertNull(FilenameUtils.normalize(":"));
assertNull(FilenameUtils.normalize("1:\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("1:"));
assertNull(FilenameUtils.normalize("1:a"));
assertNull(FilenameUtils.normalize("\\\\\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\a"));
assertEquals("a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("a\\b/c.txt"));
assertEquals("" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\a\\b/c.txt"));
assertEquals("C:" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("C:\\a\\b/c.txt"));
assertEquals("" + SEP + "" + SEP + "server" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\server\\a\\b/c.txt"));
assertEquals("~" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("~\\a\\b/c.txt"));
assertEquals("~user" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("~user\\a\\b/c.txt"));
assertEquals("a" + SEP + "c", FilenameUtils.normalize("a/b/../c"));
assertEquals("c", FilenameUtils.normalize("a/b/../../c"));
assertEquals("c" + SEP, FilenameUtils.normalize("a/b/../../c/"));
assertNull(FilenameUtils.normalize("a/b/../../../c"));
assertEquals("a" + SEP, FilenameUtils.normalize("a/b/.."));
assertEquals("a" + SEP, FilenameUtils.normalize("a/b/../"));
assertEquals("", FilenameUtils.normalize("a/b/../.."));
assertEquals("", FilenameUtils.normalize("a/b/../../"));
assertNull(FilenameUtils.normalize("a/b/../../.."));
assertEquals("a" + SEP + "d", FilenameUtils.normalize("a/b/../c/../d"));
assertEquals("a" + SEP + "d" + SEP, FilenameUtils.normalize("a/b/../c/../d/"));
assertEquals("a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("a/b//d"));
assertEquals("a" + SEP + "b" + SEP, FilenameUtils.normalize("a/b/././."));
assertEquals("a" + SEP + "b" + SEP, FilenameUtils.normalize("a/b/./././"));
assertEquals("a" + SEP, FilenameUtils.normalize("./a/"));
assertEquals("a", FilenameUtils.normalize("./a"));
assertEquals("", FilenameUtils.normalize("./"));
assertEquals("", FilenameUtils.normalize("."));
assertNull(FilenameUtils.normalize("../a"));
assertNull(FilenameUtils.normalize(".."));
assertEquals("", FilenameUtils.normalize(""));
assertEquals(SEP + "a", FilenameUtils.normalize("/a"));
assertEquals(SEP + "a" + SEP, FilenameUtils.normalize("/a/"));
assertEquals(SEP + "a" + SEP + "c", FilenameUtils.normalize("/a/b/../c"));
assertEquals(SEP + "c", FilenameUtils.normalize("/a/b/../../c"));
assertNull(FilenameUtils.normalize("/a/b/../../../c"));
assertEquals(SEP + "a" + SEP, FilenameUtils.normalize("/a/b/.."));
assertEquals(SEP + "", FilenameUtils.normalize("/a/b/../.."));
assertNull(FilenameUtils.normalize("/a/b/../../.."));
assertEquals(SEP + "a" + SEP + "d", FilenameUtils.normalize("/a/b/../c/../d"));
assertEquals(SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("/a/b//d"));
assertEquals(SEP + "a" + SEP + "b" + SEP, FilenameUtils.normalize("/a/b/././."));
assertEquals(SEP + "a", FilenameUtils.normalize("/./a"));
assertEquals(SEP + "", FilenameUtils.normalize("/./"));
assertEquals(SEP + "", FilenameUtils.normalize("/."));
assertNull(FilenameUtils.normalize("/../a"));
assertNull(FilenameUtils.normalize("/.."));
assertEquals(SEP + "", FilenameUtils.normalize("/"));
assertEquals("~" + SEP + "a", FilenameUtils.normalize("~/a"));
assertEquals("~" + SEP + "a" + SEP, FilenameUtils.normalize("~/a/"));
assertEquals("~" + SEP + "a" + SEP + "c", FilenameUtils.normalize("~/a/b/../c"));
assertEquals("~" + SEP + "c", FilenameUtils.normalize("~/a/b/../../c"));
assertNull(FilenameUtils.normalize("~/a/b/../../../c"));
assertEquals("~" + SEP + "a" + SEP, FilenameUtils.normalize("~/a/b/.."));
assertEquals("~" + SEP + "", FilenameUtils.normalize("~/a/b/../.."));
assertNull(FilenameUtils.normalize("~/a/b/../../.."));
assertEquals("~" + SEP + "a" + SEP + "d", FilenameUtils.normalize("~/a/b/../c/../d"));
assertEquals("~" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("~/a/b//d"));
assertEquals("~" + SEP + "a" + SEP + "b" + SEP, FilenameUtils.normalize("~/a/b/././."));
assertEquals("~" + SEP + "a", FilenameUtils.normalize("~/./a"));
assertEquals("~" + SEP, FilenameUtils.normalize("~/./"));
assertEquals("~" + SEP, FilenameUtils.normalize("~/."));
assertNull(FilenameUtils.normalize("~/../a"));
assertNull(FilenameUtils.normalize("~/.."));
assertEquals("~" + SEP, FilenameUtils.normalize("~/"));
assertEquals("~" + SEP, FilenameUtils.normalize("~"));
assertEquals("~user" + SEP + "a", FilenameUtils.normalize("~user/a"));
assertEquals("~user" + SEP + "a" + SEP, FilenameUtils.normalize("~user/a/"));
assertEquals("~user" + SEP + "a" + SEP + "c", FilenameUtils.normalize("~user/a/b/../c"));
assertEquals("~user" + SEP + "c", FilenameUtils.normalize("~user/a/b/../../c"));
assertNull(FilenameUtils.normalize("~user/a/b/../../../c"));
assertEquals("~user" + SEP + "a" + SEP, FilenameUtils.normalize("~user/a/b/.."));
assertEquals("~user" + SEP + "", FilenameUtils.normalize("~user/a/b/../.."));
assertNull(FilenameUtils.normalize("~user/a/b/../../.."));
assertEquals("~user" + SEP + "a" + SEP + "d", FilenameUtils.normalize("~user/a/b/../c/../d"));
assertEquals("~user" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("~user/a/b//d"));
assertEquals("~user" + SEP + "a" + SEP + "b" + SEP, FilenameUtils.normalize("~user/a/b/././."));
assertEquals("~user" + SEP + "a", FilenameUtils.normalize("~user/./a"));
assertEquals("~user" + SEP + "", FilenameUtils.normalize("~user/./"));
assertEquals("~user" + SEP + "", FilenameUtils.normalize("~user/."));
assertNull(FilenameUtils.normalize("~user/../a"));
assertNull(FilenameUtils.normalize("~user/.."));
assertEquals("~user" + SEP, FilenameUtils.normalize("~user/"));
assertEquals("~user" + SEP, FilenameUtils.normalize("~user"));
assertEquals("C:" + SEP + "a", FilenameUtils.normalize("C:/a"));
assertEquals("C:" + SEP + "a" + SEP, FilenameUtils.normalize("C:/a/"));
assertEquals("C:" + SEP + "a" + SEP + "c", FilenameUtils.normalize("C:/a/b/../c"));
assertEquals("C:" + SEP + "c", FilenameUtils.normalize("C:/a/b/../../c"));
assertNull(FilenameUtils.normalize("C:/a/b/../../../c"));
assertEquals("C:" + SEP + "a" + SEP, FilenameUtils.normalize("C:/a/b/.."));
assertEquals("C:" + SEP + "", FilenameUtils.normalize("C:/a/b/../.."));
assertNull(FilenameUtils.normalize("C:/a/b/../../.."));
assertEquals("C:" + SEP + "a" + SEP + "d", FilenameUtils.normalize("C:/a/b/../c/../d"));
assertEquals("C:" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("C:/a/b//d"));
assertEquals("C:" + SEP + "a" + SEP + "b" + SEP, FilenameUtils.normalize("C:/a/b/././."));
assertEquals("C:" + SEP + "a", FilenameUtils.normalize("C:/./a"));
assertEquals("C:" + SEP + "", FilenameUtils.normalize("C:/./"));
assertEquals("C:" + SEP + "", FilenameUtils.normalize("C:/."));
assertNull(FilenameUtils.normalize("C:/../a"));
assertNull(FilenameUtils.normalize("C:/.."));
assertEquals("C:" + SEP + "", FilenameUtils.normalize("C:/"));
assertEquals("C:" + "a", FilenameUtils.normalize("C:a"));
assertEquals("C:" + "a" + SEP, FilenameUtils.normalize("C:a/"));
assertEquals("C:" + "a" + SEP + "c", FilenameUtils.normalize("C:a/b/../c"));
assertEquals("C:" + "c", FilenameUtils.normalize("C:a/b/../../c"));
assertNull(FilenameUtils.normalize("C:a/b/../../../c"));
assertEquals("C:" + "a" + SEP, FilenameUtils.normalize("C:a/b/.."));
assertEquals("C:" + "", FilenameUtils.normalize("C:a/b/../.."));
assertNull(FilenameUtils.normalize("C:a/b/../../.."));
assertEquals("C:" + "a" + SEP + "d", FilenameUtils.normalize("C:a/b/../c/../d"));
assertEquals("C:" + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("C:a/b//d"));
assertEquals("C:" + "a" + SEP + "b" + SEP, FilenameUtils.normalize("C:a/b/././."));
assertEquals("C:" + "a", FilenameUtils.normalize("C:./a"));
assertEquals("C:" + "", FilenameUtils.normalize("C:./"));
assertEquals("C:" + "", FilenameUtils.normalize("C:."));
assertNull(FilenameUtils.normalize("C:../a"));
assertNull(FilenameUtils.normalize("C:.."));
assertEquals("C:" + "", FilenameUtils.normalize("C:"));
assertEquals(SEP + SEP + "server" + SEP + "a", FilenameUtils.normalize("//server/a"));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP, FilenameUtils.normalize("//server/a/"));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "c", FilenameUtils.normalize("//server/a/b/../c"));
assertEquals(SEP + SEP + "server" + SEP + "c", FilenameUtils.normalize("//server/a/b/../../c"));
assertNull(FilenameUtils.normalize("//server/a/b/../../../c"));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP, FilenameUtils.normalize("//server/a/b/.."));
assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalize("//server/a/b/../.."));
assertNull(FilenameUtils.normalize("//server/a/b/../../.."));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "d", FilenameUtils.normalize("//server/a/b/../c/../d"));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalize("//server/a/b//d"));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "b" + SEP, FilenameUtils.normalize("//server/a/b/././."));
assertEquals(SEP + SEP + "server" + SEP + "a", FilenameUtils.normalize("//server/./a"));
assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalize("//server/./"));
assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalize("//server/."));
assertNull(FilenameUtils.normalize("//server/../a"));
assertNull(FilenameUtils.normalize("//server/.."));
assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalize("//server/"));
assertEquals(SEP + SEP + "127.0.0.1" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\127.0.0.1\\a\\b\\c.txt"));
assertEquals(SEP + SEP + "::1" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\::1\\a\\b\\c.txt"));
assertEquals(SEP + SEP + "1::" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\1::\\a\\b\\c.txt"));
assertEquals(SEP + SEP + "server.example.org" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\server.example.org\\a\\b\\c.txt"));
assertEquals(SEP + SEP + "server.sub.example.org" + SEP + "a" + SEP + "b" + SEP + "c.txt",FilenameUtils.normalize("\\\\server.sub.example.org\\a\\b\\c.txt"));
assertEquals(SEP + SEP + "server." + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\server.\\a\\b\\c.txt"));
assertEquals(SEP + SEP + "1::127.0.0.1" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\1::127.0.0.1\\a\\b\\c.txt"));
assertEquals(SEP + SEP + "127.0.0.256" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\127.0.0.256\\a\\b\\c.txt"));
assertEquals(SEP + SEP + "127.0.0.01" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\\\\127.0.0.01\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\-server\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\.\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\..\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\127.0..1\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\::1::2\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\:1\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\1:\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\1:2:3:4:5:6:7:8:9\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\g:2:3:4:5:6:7:8\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\1ffff:2:3:4:5:6:7:8\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("\\\\1:2\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalize("//../foo"));
assertNull(FilenameUtils.normalize("\\\\..\\foo"));
assertThrows(IllegalArgumentException.class, () -> FilenameUtils.normalize("a\\b/c\u0000.txt"));
assertThrows(IllegalArgumentException.class, () -> FilenameUtils.normalize("\u0000a\\b/c.txt"));
assertNull(FilenameUtils.normalizeNoEndSeparator(null));
assertNull(FilenameUtils.normalizeNoEndSeparator(":"));
assertNull(FilenameUtils.normalizeNoEndSeparator("1:\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalizeNoEndSeparator("1:"));
assertNull(FilenameUtils.normalizeNoEndSeparator("1:a"));
assertNull(FilenameUtils.normalizeNoEndSeparator("\\\\\\a\\b\\c.txt"));
assertNull(FilenameUtils.normalizeNoEndSeparator("\\\\a"));
assertEquals("a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("a\\b/c.txt"));
assertEquals("" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("\\a\\b/c.txt"));
assertEquals("C:" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("C:\\a\\b/c.txt"));
assertEquals("" + SEP + "" + SEP + "server" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("\\\\server\\a\\b/c.txt"));
assertEquals("~" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("~\\a\\b/c.txt"));
assertEquals("~user" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("~user\\a\\b/c.txt"));
assertEquals("C:" + SEP + "a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalizeNoEndSeparator("C:\\\\a\\\\b\\\\c.txt"));
assertEquals("a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("a/b/../c"));
assertEquals("c", FilenameUtils.normalizeNoEndSeparator("a/b/../../c"));
assertEquals("c", FilenameUtils.normalizeNoEndSeparator("a/b/../../c/"));
assertNull(FilenameUtils.normalizeNoEndSeparator("a/b/../../../c"));
assertEquals("a", FilenameUtils.normalizeNoEndSeparator("a/b/.."));
assertEquals("a", FilenameUtils.normalizeNoEndSeparator("a/b/../"));
assertEquals("", FilenameUtils.normalizeNoEndSeparator("a/b/../.."));
assertEquals("", FilenameUtils.normalizeNoEndSeparator("a/b/../../"));
assertNull(FilenameUtils.normalizeNoEndSeparator("a/b/../../.."));
assertEquals("a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("a/b/../c/../d"));
assertEquals("a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("a/b/../c/../d/"));
assertEquals("a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("a/b//d"));
assertEquals("a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("a/b/././."));
assertEquals("a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("a/b/./././"));
assertEquals("a", FilenameUtils.normalizeNoEndSeparator("./a/"));
assertEquals("a", FilenameUtils.normalizeNoEndSeparator("./a"));
assertEquals("", FilenameUtils.normalizeNoEndSeparator("./"));
assertEquals("", FilenameUtils.normalizeNoEndSeparator("."));
assertNull(FilenameUtils.normalizeNoEndSeparator("../a"));
assertNull(FilenameUtils.normalizeNoEndSeparator(".."));
assertEquals("", FilenameUtils.normalizeNoEndSeparator(""));
assertEquals(SEP + "a", FilenameUtils.normalizeNoEndSeparator("/a"));
assertEquals(SEP + "a", FilenameUtils.normalizeNoEndSeparator("/a/"));
assertEquals(SEP + "a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("/a/b/../c"));
assertEquals(SEP + "c", FilenameUtils.normalizeNoEndSeparator("/a/b/../../c"));
assertNull(FilenameUtils.normalizeNoEndSeparator("/a/b/../../../c"));
assertEquals(SEP + "a", FilenameUtils.normalizeNoEndSeparator("/a/b/.."));
assertEquals(SEP + "", FilenameUtils.normalizeNoEndSeparator("/a/b/../.."));
assertNull(FilenameUtils.normalizeNoEndSeparator("/a/b/../../.."));
assertEquals(SEP + "a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("/a/b/../c/../d"));
assertEquals(SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("/a/b//d"));
assertEquals(SEP + "a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("/a/b/././."));
assertEquals(SEP + "a", FilenameUtils.normalizeNoEndSeparator("/./a"));
assertEquals(SEP + "", FilenameUtils.normalizeNoEndSeparator("/./"));
assertEquals(SEP + "", FilenameUtils.normalizeNoEndSeparator("/."));
assertNull(FilenameUtils.normalizeNoEndSeparator("/../a"));
assertNull(FilenameUtils.normalizeNoEndSeparator("/.."));
assertEquals(SEP + "", FilenameUtils.normalizeNoEndSeparator("/"));
assertEquals("~" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~/a"));
assertEquals("~" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~/a/"));
assertEquals("~" + SEP + "a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("~/a/b/../c"));
assertEquals("~" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("~/a/b/../../c"));
assertNull(FilenameUtils.normalizeNoEndSeparator("~/a/b/../../../c"));
assertEquals("~" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~/a/b/.."));
assertEquals("~" + SEP + "", FilenameUtils.normalizeNoEndSeparator("~/a/b/../.."));
assertNull(FilenameUtils.normalizeNoEndSeparator("~/a/b/../../.."));
assertEquals("~" + SEP + "a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("~/a/b/../c/../d"));
assertEquals("~" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("~/a/b//d"));
assertEquals("~" + SEP + "a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("~/a/b/././."));
assertEquals("~" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~/./a"));
assertEquals("~" + SEP, FilenameUtils.normalizeNoEndSeparator("~/./"));
assertEquals("~" + SEP, FilenameUtils.normalizeNoEndSeparator("~/."));
assertNull(FilenameUtils.normalizeNoEndSeparator("~/../a"));
assertNull(FilenameUtils.normalizeNoEndSeparator("~/.."));
assertEquals("~" + SEP, FilenameUtils.normalizeNoEndSeparator("~/"));
assertEquals("~" + SEP, FilenameUtils.normalizeNoEndSeparator("~"));
assertEquals("~user" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~user/a"));
assertEquals("~user" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~user/a/"));
assertEquals("~user" + SEP + "a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("~user/a/b/../c"));
assertEquals("~user" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("~user/a/b/../../c"));
assertNull(FilenameUtils.normalizeNoEndSeparator("~user/a/b/../../../c"));
assertEquals("~user" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~user/a/b/.."));
assertEquals("~user" + SEP + "", FilenameUtils.normalizeNoEndSeparator("~user/a/b/../.."));
assertNull(FilenameUtils.normalizeNoEndSeparator("~user/a/b/../../.."));
assertEquals("~user" + SEP + "a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("~user/a/b/../c/../d"));
assertEquals("~user" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("~user/a/b//d"));
assertEquals("~user" + SEP + "a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("~user/a/b/././."));
assertEquals("~user" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("~user/./a"));
assertEquals("~user" + SEP + "", FilenameUtils.normalizeNoEndSeparator("~user/./"));
assertEquals("~user" + SEP + "", FilenameUtils.normalizeNoEndSeparator("~user/."));
assertNull(FilenameUtils.normalizeNoEndSeparator("~user/../a"));
assertNull(FilenameUtils.normalizeNoEndSeparator("~user/.."));
assertEquals("~user" + SEP, FilenameUtils.normalizeNoEndSeparator("~user/"));
assertEquals("~user" + SEP, FilenameUtils.normalizeNoEndSeparator("~user"));
assertEquals("C:" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("C:/a"));
assertEquals("C:" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("C:/a/"));
assertEquals("C:" + SEP + "a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("C:/a/b/../c"));
assertEquals("C:" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("C:/a/b/../../c"));
assertNull(FilenameUtils.normalizeNoEndSeparator("C:/a/b/../../../c"));
assertEquals("C:" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("C:/a/b/.."));
assertEquals("C:" + SEP + "", FilenameUtils.normalizeNoEndSeparator("C:/a/b/../.."));
assertNull(FilenameUtils.normalizeNoEndSeparator("C:/a/b/../../.."));
assertEquals("C:" + SEP + "a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("C:/a/b/../c/../d"));
assertEquals("C:" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("C:/a/b//d"));
assertEquals("C:" + SEP + "a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("C:/a/b/././."));
assertEquals("C:" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("C:/./a"));
assertEquals("C:" + SEP + "", FilenameUtils.normalizeNoEndSeparator("C:/./"));
assertEquals("C:" + SEP + "", FilenameUtils.normalizeNoEndSeparator("C:/."));
assertNull(FilenameUtils.normalizeNoEndSeparator("C:/../a"));
assertNull(FilenameUtils.normalizeNoEndSeparator("C:/.."));
assertEquals("C:" + SEP + "", FilenameUtils.normalizeNoEndSeparator("C:/"));
assertEquals("C:" + "a", FilenameUtils.normalizeNoEndSeparator("C:a"));
assertEquals("C:" + "a", FilenameUtils.normalizeNoEndSeparator("C:a/"));
assertEquals("C:" + "a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("C:a/b/../c"));
assertEquals("C:" + "c", FilenameUtils.normalizeNoEndSeparator("C:a/b/../../c"));
assertNull(FilenameUtils.normalizeNoEndSeparator("C:a/b/../../../c"));
assertEquals("C:" + "a", FilenameUtils.normalizeNoEndSeparator("C:a/b/.."));
assertEquals("C:" + "", FilenameUtils.normalizeNoEndSeparator("C:a/b/../.."));
assertNull(FilenameUtils.normalizeNoEndSeparator("C:a/b/../../.."));
assertEquals("C:" + "a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("C:a/b/../c/../d"));
assertEquals("C:" + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("C:a/b//d"));
assertEquals("C:" + "a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("C:a/b/././."));
assertEquals("C:" + "a", FilenameUtils.normalizeNoEndSeparator("C:./a"));
assertEquals("C:" + "", FilenameUtils.normalizeNoEndSeparator("C:./"));
assertEquals("C:" + "", FilenameUtils.normalizeNoEndSeparator("C:."));
assertNull(FilenameUtils.normalizeNoEndSeparator("C:../a"));
assertNull(FilenameUtils.normalizeNoEndSeparator("C:.."));
assertEquals("C:" + "", FilenameUtils.normalizeNoEndSeparator("C:"));
assertEquals(SEP + SEP + "server" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("//server/a"));
assertEquals(SEP + SEP + "server" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("//server/a/"));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("//server/a/b/../c"));
assertEquals(SEP + SEP + "server" + SEP + "c", FilenameUtils.normalizeNoEndSeparator("//server/a/b/../../c"));
assertNull(FilenameUtils.normalizeNoEndSeparator("//server/a/b/../../../c"));
assertEquals(SEP + SEP + "server" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("//server/a/b/.."));
assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalizeNoEndSeparator("//server/a/b/../.."));
assertNull(FilenameUtils.normalizeNoEndSeparator("//server/a/b/../../.."));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("//server/a/b/../c/../d"));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "b" + SEP + "d", FilenameUtils.normalizeNoEndSeparator("//server/a/b//d"));
assertEquals(SEP + SEP + "server" + SEP + "a" + SEP + "b", FilenameUtils.normalizeNoEndSeparator("//server/a/b/././."));
assertEquals(SEP + SEP + "server" + SEP + "a", FilenameUtils.normalizeNoEndSeparator("//server/./a"));
assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalizeNoEndSeparator("//server/./"));
assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalizeNoEndSeparator("//server/."));
assertNull(FilenameUtils.normalizeNoEndSeparator("//server/../a"));
assertNull(FilenameUtils.normalizeNoEndSeparator("//server/.."));
assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalizeNoEndSeparator("//server/"));
assertEquals("/a/c", FilenameUtils.normalizeNoEndSeparator("/a/b/../c/", true));
assertEquals("/a/c", FilenameUtils.normalizeNoEndSeparator("\\a\\b\\..\\c\\", true));
assertEquals("\\a\\c", FilenameUtils.normalizeNoEndSeparator("/a/b/../c/", false));
assertEquals("\\a\\c", FilenameUtils.normalizeNoEndSeparator("\\a\\b\\..\\c\\", false));
assertEquals("/a/c/", FilenameUtils.normalize("/a/b/../c/", true));
assertEquals("/a/c/", FilenameUtils.normalize("\\a\\b\\..\\c\\", true));
assertEquals("\\a\\c\\", FilenameUtils.normalize("/a/b/../c/", false));
assertEquals("\\a\\c\\", FilenameUtils.normalize("\\a\\b\\..\\c\\", false));
assertNull(FilenameUtils.removeExtension(null));
assertEquals("file", FilenameUtils.removeExtension("file.ext"));
assertEquals("README", FilenameUtils.removeExtension("README"));
assertEquals("domain.dot", FilenameUtils.removeExtension("domain.dot.com"));
assertEquals("image", FilenameUtils.removeExtension("image.jpeg"));
assertEquals("a.b/c", FilenameUtils.removeExtension("a.b/c"));
assertEquals("a.b/c", FilenameUtils.removeExtension("a.b/c.txt"));
assertEquals("a/b/c", FilenameUtils.removeExtension("a/b/c"));
assertEquals("a.b\\c", FilenameUtils.removeExtension("a.b\\c"));
assertEquals("a.b\\c", FilenameUtils.removeExtension("a.b\\c.txt"));
assertEquals("a\\b\\c", FilenameUtils.removeExtension("a\\b\\c"));
assertEquals("C:\\temp\\foo.bar\\README", FilenameUtils.removeExtension("C:\\temp\\foo.bar\\README"));
assertEquals("../filename", FilenameUtils.removeExtension("../filename.ext"));
assertNull(FilenameUtils.separatorsToSystem(null));
assertEquals("\\a\\b\\c", FilenameUtils.separatorsToSystem("\\a\\b\\c"));
assertEquals("\\a\\b\\c.txt", FilenameUtils.separatorsToSystem("\\a\\b\\c.txt"));
assertEquals("\\a\\b\\c", FilenameUtils.separatorsToSystem("\\a\\b/c"));
assertEquals("\\a\\b\\c", FilenameUtils.separatorsToSystem("/a/b/c"));
assertEquals("D:\\a\\b\\c", FilenameUtils.separatorsToSystem("D:/a/b/c"));
assertNull(FilenameUtils.separatorsToSystem(null));
assertEquals("/a/b/c", FilenameUtils.separatorsToSystem("/a/b/c"));
assertEquals("/a/b/c.txt", FilenameUtils.separatorsToSystem("/a/b/c.txt"));
assertEquals("/a/b/c", FilenameUtils.separatorsToSystem("/a/b\\c"));
assertEquals("/a/b/c", FilenameUtils.separatorsToSystem("\\a\\b\\c"));
assertEquals("D:/a/b/c", FilenameUtils.separatorsToSystem("D:\\a\\b\\c"));
assertNull(FilenameUtils.separatorsToUnix(null));
assertEquals("/a/b/c", FilenameUtils.separatorsToUnix("/a/b/c"));
assertEquals("/a/b/c.txt", FilenameUtils.separatorsToUnix("/a/b/c.txt"));
assertEquals("/a/b/c", FilenameUtils.separatorsToUnix("/a/b\\c"));
assertEquals("/a/b/c", FilenameUtils.separatorsToUnix("\\a\\b\\c"));
assertEquals("D:/a/b/c", FilenameUtils.separatorsToUnix("D:\\a\\b\\c"));
assertNull(FilenameUtils.separatorsToWindows(null));
assertEquals("\\a\\b\\c", FilenameUtils.separatorsToWindows("\\a\\b\\c"));
assertEquals("\\a\\b\\c.txt", FilenameUtils.separatorsToWindows("\\a\\b\\c.txt"));
assertEquals("\\a\\b\\c", FilenameUtils.separatorsToWindows("\\a\\b/c"));
assertEquals("\\a\\b\\c", FilenameUtils.separatorsToWindows("/a/b/c"));
assertEquals("D:\\a\\b\\c", FilenameUtils.separatorsToWindows("D:/a/b/c"));
assertEquals(0, IOCase.SENSITIVE.checkCompareTo("ABC", "ABC"));
assertTrue(IOCase.SENSITIVE.checkCompareTo("ABC", "abc") < 0);
assertTrue(IOCase.SENSITIVE.checkCompareTo("abc", "ABC") > 0);
assertEquals(0, IOCase.INSENSITIVE.checkCompareTo("ABC", "ABC"));
assertEquals(0, IOCase.INSENSITIVE.checkCompareTo("ABC", "abc"));
assertEquals(0, IOCase.INSENSITIVE.checkCompareTo("abc", "ABC"));
assertEquals(0, IOCase.SYSTEM.checkCompareTo("ABC", "ABC"));
assertEquals(WINDOWS, IOCase.SYSTEM.checkCompareTo("ABC", "abc") == 0);
assertEquals(WINDOWS, IOCase.SYSTEM.checkCompareTo("abc", "ABC") == 0);
assertTrue(IOCase.SENSITIVE.checkCompareTo("ABC", "") > 0);
assertTrue(IOCase.SENSITIVE.checkCompareTo("", "ABC") < 0);
assertTrue(IOCase.SENSITIVE.checkCompareTo("ABC", "DEF") < 0);
assertTrue(IOCase.SENSITIVE.checkCompareTo("DEF", "ABC") > 0);
assertEquals(0, IOCase.SENSITIVE.checkCompareTo("ABC", "ABC"));
assertEquals(0, IOCase.SENSITIVE.checkCompareTo("", ""));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkCompareTo("ABC", null));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkCompareTo(null, "ABC"));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkCompareTo(null, null));
assertTrue(IOCase.SENSITIVE.checkEndsWith("ABC", "BC"));
assertFalse(IOCase.SENSITIVE.checkEndsWith("ABC", "Bc"));
assertTrue(IOCase.INSENSITIVE.checkEndsWith("ABC", "BC"));
assertTrue(IOCase.INSENSITIVE.checkEndsWith("ABC", "Bc"));
assertTrue(IOCase.SYSTEM.checkEndsWith("ABC", "BC"));
assertEquals(WINDOWS, IOCase.SYSTEM.checkEndsWith("ABC", "Bc"));
assertTrue(IOCase.SENSITIVE.checkEndsWith("ABC", ""));
assertFalse(IOCase.SENSITIVE.checkEndsWith("ABC", "A"));
assertFalse(IOCase.SENSITIVE.checkEndsWith("ABC", "AB"));
assertTrue(IOCase.SENSITIVE.checkEndsWith("ABC", "ABC"));
assertTrue(IOCase.SENSITIVE.checkEndsWith("ABC", "BC"));
assertTrue(IOCase.SENSITIVE.checkEndsWith("ABC", "C"));
assertFalse(IOCase.SENSITIVE.checkEndsWith("ABC", "ABCD"));
assertFalse(IOCase.SENSITIVE.checkEndsWith("", "ABC"));
assertTrue(IOCase.SENSITIVE.checkEndsWith("", ""));
assertFalse(IOCase.SENSITIVE.checkEndsWith("ABC", null));
assertFalse(IOCase.SENSITIVE.checkEndsWith(null, "ABC"));
assertFalse(IOCase.SENSITIVE.checkEndsWith(null, null));
assertTrue(IOCase.SENSITIVE.checkEquals("ABC", "ABC"));
assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "Abc"));
assertTrue(IOCase.INSENSITIVE.checkEquals("ABC", "ABC"));
assertTrue(IOCase.INSENSITIVE.checkEquals("ABC", "Abc"));
assertTrue(IOCase.SYSTEM.checkEquals("ABC", "ABC"));
assertEquals(WINDOWS, IOCase.SYSTEM.checkEquals("ABC", "Abc"));
assertFalse(IOCase.SENSITIVE.checkEquals("ABC", ""));
assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "A"));
assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "AB"));
assertTrue(IOCase.SENSITIVE.checkEquals("ABC", "ABC"));
assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "BC"));
assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "C"));
assertFalse(IOCase.SENSITIVE.checkEquals("ABC", "ABCD"));
assertFalse(IOCase.SENSITIVE.checkEquals("", "ABC"));
assertTrue(IOCase.SENSITIVE.checkEquals("", ""));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkEquals("ABC", null));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkEquals(null, "ABC"));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkEquals(null, null));
assertEquals(1,  IOCase.SENSITIVE.checkIndexOf("ABC", 0, "BC"));
assertEquals(-1, IOCase.SENSITIVE.checkIndexOf("ABC", 0, "Bc"));
assertEquals(1, IOCase.INSENSITIVE.checkIndexOf("ABC", 0, "BC"));
assertEquals(1, IOCase.INSENSITIVE.checkIndexOf("ABC", 0, "Bc"));
assertEquals(1, IOCase.SYSTEM.checkIndexOf("ABC", 0, "BC"));
assertEquals(WINDOWS ? 1 : -1, IOCase.SYSTEM.checkIndexOf("ABC", 0, "Bc"));
assertEquals(0,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "A"));
assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 1, "A"));
assertEquals(0,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "AB"));
assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 1, "AB"));
assertEquals(0,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "ABC"));
assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 1, "ABC"));
assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "D"));
assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 3, "D"));
assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 4, "D"));
assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "DE"));
assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 3, "DE"));
assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 4, "DE"));
assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "DEF"));
assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 3, "DEF"));
assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 4, "DEF"));
assertEquals(9,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "J"));
assertEquals(9,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 8, "J"));
assertEquals(9,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 9, "J"));
assertEquals(8,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "IJ"));
assertEquals(8,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 8, "IJ"));
assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 9, "IJ"));
assertEquals(7,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 6, "HIJ"));
assertEquals(7,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 7, "HIJ"));
assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 8, "HIJ"));
assertEquals(-1,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "DED"));
assertEquals(-1,   IOCase.SENSITIVE.checkIndexOf("DEF", 0, "ABCDEFGHIJ"));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkIndexOf("ABC", 0, null));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkIndexOf(null, 0, "ABC"));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkIndexOf(null, 0, null));
assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "AB"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "Ab"));
assertTrue(IOCase.INSENSITIVE.checkRegionMatches("ABC", 0, "AB"));
assertTrue(IOCase.INSENSITIVE.checkRegionMatches("ABC", 0, "Ab"));
assertTrue(IOCase.SYSTEM.checkRegionMatches("ABC", 0, "AB"));
assertEquals(WINDOWS, IOCase.SYSTEM.checkRegionMatches("ABC", 0, "Ab"));
assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, ""));
assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "A"));
assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "AB"));
assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "ABC"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "BC"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "C"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 0, "ABCD"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("", 0, "ABC"));
assertTrue(IOCase.SENSITIVE.checkRegionMatches("", 0, ""));
assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, ""));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "A"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "AB"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "ABC"));
assertTrue(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "BC"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "C"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("ABC", 1, "ABCD"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("", 1, "ABC"));
assertFalse(IOCase.SENSITIVE.checkRegionMatches("", 1, ""));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkRegionMatches("ABC", 0, null));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkRegionMatches(null, 0, "ABC"));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkRegionMatches(null, 0, null));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkRegionMatches("ABC", 1, null));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkRegionMatches(null, 1, "ABC"));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkRegionMatches(null, 1, null));
assertTrue(IOCase.SENSITIVE.checkStartsWith("ABC", "AB"));
assertFalse(IOCase.SENSITIVE.checkStartsWith("ABC", "Ab"));
assertTrue(IOCase.INSENSITIVE.checkStartsWith("ABC", "AB"));
assertTrue(IOCase.INSENSITIVE.checkStartsWith("ABC", "Ab"));
assertTrue(IOCase.SYSTEM.checkStartsWith("ABC", "AB"));
assertEquals(WINDOWS, IOCase.SYSTEM.checkStartsWith("ABC", "Ab"));
assertTrue(IOCase.SENSITIVE.checkStartsWith("ABC", ""));
assertTrue(IOCase.SENSITIVE.checkStartsWith("ABC", "A"));
assertTrue(IOCase.SENSITIVE.checkStartsWith("ABC", "AB"));
assertTrue(IOCase.SENSITIVE.checkStartsWith("ABC", "ABC"));
assertFalse(IOCase.SENSITIVE.checkStartsWith("ABC", "BC"));
assertFalse(IOCase.SENSITIVE.checkStartsWith("ABC", "C"));
assertFalse(IOCase.SENSITIVE.checkStartsWith("ABC", "ABCD"));
assertFalse(IOCase.SENSITIVE.checkStartsWith("", "ABC"));
assertTrue(IOCase.SENSITIVE.checkStartsWith("", ""));
assertFalse(IOCase.SENSITIVE.checkStartsWith("ABC", null));
assertFalse(IOCase.SENSITIVE.checkStartsWith(null, "ABC"));
assertFalse(IOCase.SENSITIVE.checkStartsWith(null, null));
assertEquals(IOCase.SENSITIVE, IOCase.forName("Sensitive"));
assertEquals(IOCase.INSENSITIVE, IOCase.forName("Insensitive"));
assertEquals(IOCase.SYSTEM, IOCase.forName("System"));
assertThrows(IllegalArgumentException.class, () -> IOCase.forName("Blah"));
assertThrows(IllegalArgumentException.class, () -> IOCase.forName(null));
assertEquals("Sensitive", IOCase.SENSITIVE.getName());
assertEquals("Insensitive", IOCase.INSENSITIVE.getName());
assertEquals("System", IOCase.SYSTEM.getName());
assertTrue(IOCase.SENSITIVE.isCaseSensitive());
assertFalse(IOCase.INSENSITIVE.isCaseSensitive());
assertEquals(!WINDOWS, IOCase.SYSTEM.isCaseSensitive());
assertTrue(IOCase.isCaseSensitive(IOCase.SENSITIVE));
assertFalse(IOCase.isCaseSensitive(IOCase.INSENSITIVE));
assertEquals(!WINDOWS, IOCase.isCaseSensitive(IOCase.SYSTEM));
assertSame(IOCase.SENSITIVE, serialize(IOCase.SENSITIVE));
assertSame(IOCase.INSENSITIVE, serialize(IOCase.INSENSITIVE));
assertSame(IOCase.SYSTEM, serialize(IOCase.SYSTEM));
assertEquals("Sensitive", IOCase.SENSITIVE.toString());
assertEquals("Insensitive", IOCase.INSENSITIVE.toString());
assertEquals("System", IOCase.SYSTEM.toString());
assertCounts(1, 0, 0, countingPathVisitor.getPathCounters());
assertCounts(1, 1, 0, countingPathVisitor.getPathCounters());
assertCounts(1, 1, 1, countingPathVisitor.getPathCounters());
assertCounts(3, 2, 2, countingPathVisitor.getPathCounters());
assertCounts(1, 0, 0, pathCounts);
assertCounts(1, 1, 0, pathCounts);
assertCounts(1, 1, 1, visitor);
assertCounts(3, 2, 2, pathCounts);
assertCounts(3, 4, 8, pathCounts);
assertCounts(1, 1, 0, PathUtils.deleteDirectory(tempDirPath));
assertCounts(1, 1, 0, PathUtils.deleteDirectory(tempDirPath, options));
assertCounts(1, 1, 1, PathUtils.deleteDirectory(tempDirPath));
assertCounts(3, 2, 2, PathUtils.deleteDirectory(tempDirPath));
assertCounts(1, 0, 0, PathUtils.deleteDirectory(tempDirPath));
assertCounts(1, 0, 0, visitFileTree);
assertArrayEquals(EXPECTED_COPY_OPTIONS, visitFileTree.getCopyOptions());
assertEquals(sourceDir.get(), ((PathWrapper) visitFileTree.getSourceDirectory()).get());
assertEquals(sourceDir, visitFileTree.getSourceDirectory());
assertEquals(targetDir, visitFileTree.getTargetDirectory());
assertEquals(targetDir, visitFileTree.getTargetDirectory());
assertEquals(visitFileTree, supplier.get());
assertEquals(visitFileTree.hashCode(), supplier.get().hashCode());
assertEquals(visitFileTree, visitFileTree);
assertEquals(visitFileTree.hashCode(), visitFileTree.hashCode());
assertNotEquals(visitFileTree, "not");
assertNotEquals(visitFileTree, CountingPathVisitor.withLongCounters());
assertCounts(1, 0, 0, visitFileTree);
assertArrayEquals(EXPECTED_COPY_OPTIONS, visitFileTree.getCopyOptions());
assertEquals(sourceDir, visitFileTree.getSourceDirectory());
assertEquals(targetDir, visitFileTree.getTargetDirectory());
assertEquals(visitFileTree, supplier.get());
assertEquals(visitFileTree.hashCode(), supplier.get().hashCode());
assertEquals(visitFileTree, visitFileTree);
assertEquals(visitFileTree.hashCode(), visitFileTree.hashCode());
assertCounts(1, 1, 0, visitFileTree);
assertArrayEquals(EXPECTED_COPY_OPTIONS, visitFileTree.getCopyOptions());
assertEquals(sourceDir, visitFileTree.getSourceDirectory());
assertEquals(targetDir, visitFileTree.getTargetDirectory());
assertEquals(visitFileTree, supplier.get());
assertEquals(visitFileTree.hashCode(), supplier.get().hashCode());
assertEquals(visitFileTree, visitFileTree);
assertEquals(visitFileTree.hashCode(), visitFileTree.hashCode());
assertCounts(1, 1, 1, visitFileTree);
assertArrayEquals(EXPECTED_COPY_OPTIONS, visitFileTree.getCopyOptions());
assertEquals(sourceDir, visitFileTree.getSourceDirectory());
assertEquals(targetDir, visitFileTree.getTargetDirectory());
assertCounts(3, 2, 2, visitFileTree);
assertArrayEquals(EXPECTED_COPY_OPTIONS, visitFileTree.getCopyOptions());
assertEquals(sourceDir, visitFileTree.getSourceDirectory());
assertEquals(targetDir, visitFileTree.getTargetDirectory());
assertCounts(0, 0, 0, accPathVisitor.getPathCounters());
assertEquals(1, accPathVisitor.getDirList().size());
assertTrue(accPathVisitor.getFileList().isEmpty());
assertEquals(accPathVisitor, accPathVisitor);
assertEquals(accPathVisitor.hashCode(), accPathVisitor.hashCode());
assertCounts(1, 0, 0, accPathVisitor.getPathCounters());
assertEquals(1, accPathVisitor.getDirList().size());
assertTrue(accPathVisitor.getFileList().isEmpty());
assertEquals(accPathVisitor, accPathVisitor);
assertEquals(accPathVisitor.hashCode(), accPathVisitor.hashCode());
assertCounts(1, 1, 0, accPathVisitor.getPathCounters());
assertEquals(1, accPathVisitor.getDirList().size());
assertEquals(1, accPathVisitor.getFileList().size());
assertEquals(accPathVisitor, accPathVisitor);
assertEquals(accPathVisitor.hashCode(), accPathVisitor.hashCode());
assertCounts(1, 1, 1, accPathVisitor.getPathCounters());
assertEquals(1, accPathVisitor.getDirList().size());
assertEquals(1, accPathVisitor.getFileList().size());
assertEquals(accPathVisitor, accPathVisitor);
assertEquals(accPathVisitor.hashCode(), accPathVisitor.hashCode());
assertCounts(3, 2, 2, accPathVisitor.getPathCounters());
assertEquals(3, accPathVisitor.getDirList().size());
assertEquals(2, accPathVisitor.getFileList().size());
assertEquals(accPathVisitor, accPathVisitor);
assertEquals(accPathVisitor.hashCode(), accPathVisitor.hashCode());
assertTrue(Files.exists(tempFile));
assertEquals(accPathVisitor, accPathVisitor);
assertEquals(accPathVisitor.hashCode(), accPathVisitor.hashCode());
assertTrue(Files.exists(tempFile));
assertCounts(1, marker - 1, 0, accPathVisitor.getPathCounters());
assertEquals(1, accPathVisitor.getDirList().size());
assertEquals(marker - 1, accPathVisitor.getFileList().size());
assertEquals(accPathVisitor, accPathVisitor);
assertEquals(accPathVisitor.hashCode(), accPathVisitor.hashCode());
assertCounter(0, counter, "");
assertCounts(0, 0, 0, pathCounter);
assertEquals(old + 1, byteCounter.get());
assertEquals(0, byteCounter.get());
assertEquals(old + 1, byteCounter.get());
assertEquals(0, byteCounter.get());
assertEquals(parsedFileTime, FileTimes.toFileTime(parsedDate));
assertEquals(ntfsMillis, FileTimes.toNtfsTime(parsed));
assertEquals(0, FileTimes.EPOCH.toMillis());
assertEquals(parsedDate, FileTimes.toDate(parsedFileTime));
assertEquals(ntfsTime, FileTimes.toNtfsTime(parsed));
assertEquals(Instant.EPOCH.minusMillis(millis), FileTimes.minusMillis(FileTimes.EPOCH, millis).toInstant());
assertEquals(Instant.EPOCH, FileTimes.minusMillis(FileTimes.EPOCH, 0).toInstant());
assertEquals(Instant.EPOCH.minusNanos(millis), FileTimes.minusNanos(FileTimes.EPOCH, millis).toInstant());
assertEquals(Instant.EPOCH, FileTimes.minusNanos(FileTimes.EPOCH, 0).toInstant());
assertEquals(Instant.EPOCH.minusSeconds(seconds), FileTimes.minusSeconds(FileTimes.EPOCH, seconds).toInstant());
assertEquals(Instant.EPOCH, FileTimes.minusSeconds(FileTimes.EPOCH, 0).toInstant());
assertEquals(Instant.parse(instant), FileTimes.ntfsTimeToDate(ntfsTime).toInstant());
assertEquals(parsed, FileTimes.ntfsTimeToFileTime(ntfsTime));
assertNull(FileTimes.toFileTime(null));
assertNull(FileTimes.toDate(null));
assertEquals(Instant.EPOCH.plusMillis(millis), FileTimes.plusMillis(FileTimes.EPOCH, millis).toInstant());
assertEquals(Instant.EPOCH, FileTimes.plusMillis(FileTimes.EPOCH, 0).toInstant());
assertEquals(Instant.EPOCH.plusNanos(millis), FileTimes.plusNanos(FileTimes.EPOCH, millis).toInstant());
assertEquals(Instant.EPOCH, FileTimes.plusNanos(FileTimes.EPOCH, 0).toInstant());
assertEquals(Instant.EPOCH.plusSeconds(seconds), FileTimes.plusSeconds(FileTimes.EPOCH, seconds).toInstant());
assertEquals(Instant.EPOCH, FileTimes.plusSeconds(FileTimes.EPOCH, 0).toInstant());
assertTrue(Files.exists(tempDirPath.resolve("f1")));
assertTrue(Files.exists(tempDirPath.resolve("dir")));
assertTrue(Files.exists(targetDir.resolve("dirs-a-file-size-1")));
assertTrue(Files.exists(targetDir.resolve("dirs-a-file-size-1")));
assertTrue(Files.exists(targetDir.resolve("dir")));
assertTrue(Files.exists(targetDir.resolve("f1")));
assertTrue(Files.exists(targetDir.resolve("dirs-a-file-size-1")));
assertTrue(Files.exists(targetDir.resolve("dirs-a-file-size-1")));
assertTrue(Files.exists(targetFile));
assertEquals(Files.size(sourceFile), Files.size(targetFile));
assertTrue(Files.exists(targetFile));
assertEquals(Files.size(sourceFile), Files.size(targetFile));
assertEquals(tempDirPath.getParent(), PathUtils.createParentDirectories(tempDirPath));
assertNull(parent);
assertEquals(parent, PathUtils.createParentDirectories(path));
assertEquals(path.getParent(), PathUtils.createParentDirectories(path, (LinkOption) null));
assertEquals(tempDirPath, PathUtils.createParentDirectories(tempDirPath.resolve("child")));
assertEquals(Files.readSymbolicLink(symlinkedDir), newDirFollowed);
assertThrowsExactly(FileAlreadyExistsException.class, () -> PathUtils.createParentDirectories(symlinkedDir.resolve("child")));
assertNotNull(PathUtils.getLastModifiedFileTime(current().toFile()));
assertNull(PathUtils.getLastModifiedFileTime(getNonExistantPath()));
assertEquals(fromMillis, PathUtils.getLastModifiedFileTime(getNonExistantPath(), fromMillis));
assertNotNull(PathUtils.getLastModifiedFileTime(current()));
assertNotNull(PathUtils.getLastModifiedFileTime(current().toUri()));
assertNotNull(PathUtils.getLastModifiedFileTime(current().toUri().toURL()));
assertEquals(tempDirectory, PathUtils.getTempDirectory());
assertFalse(PathUtils.isDirectory(null));
assertTrue(PathUtils.isDirectory(tempDirPath));
assertFalse(PathUtils.isDirectory(testFile1.get()));
assertTrue(PathUtils.isDirectory(tempDir.get()));
assertFalse(PathUtils.isDirectory(ref));
assertEquals(isPosix, PathUtils.isPosix(current()));
assertFalse(PathUtils.isRegularFile(null));
assertFalse(PathUtils.isRegularFile(tempDirPath));
assertTrue(PathUtils.isRegularFile(testFile1.get()));
assertFalse(PathUtils.isRegularFile(testFile1.get()));
assertEquals(PATH_FIXTURE, path.getFileName().toString());
assertFalse(iterator.hasNext());
assertArrayEquals(ArrayUtils.addAll(BYTE_ARRAY_FIXTURE, BYTE_ARRAY_FIXTURE), Files.readAllBytes(file));
assertArrayEquals(BYTE_ARRAY_FIXTURE, Files.readAllBytes(file));
assertEquals(isPosix, PathUtils.readAttributes(current(), PosixFileAttributes.class) != null);
assertEquals(StringUtils.EMPTY, PathUtils.readString(path, StandardCharsets.UTF_8));
assertEquals(StringUtils.EMPTY, PathUtils.readString(path, null));
assertEquals(expected, PathUtils.readString(path, StandardCharsets.UTF_8));
assertEquals(expected, PathUtils.readString(path, null));
assertTrue(readable);
assertTrue(writable);
assertTrue(Files.isReadable(resolved), "isReadable");
assertTrue(Files.isWritable(resolved), "isWritable");
assertTrue(Files.isReadable(resolved), "isReadable");
assertTrue(Files.isWritable(resolved), "isWritable");
assertEquals(regularFile, Files.isReadable(resolved));
assertEquals(executable, Files.isExecutable(resolved));
assertEquals(hidden, Files.isHidden(resolved));
assertEquals(directory, Files.isDirectory(resolved));
assertEquals(symbolicLink, Files.isSymbolicLink(resolved));
assertFalse(Files.isReadable(resolved), "isReadable");
assertTrue(Files.isReadable(resolved), "isReadable");
assertFalse(Files.isWritable(resolved), "isWritable");
assertTrue(dosFileAttributeView.readAttributes().isReadOnly());
assertFalse(Files.isReadable(resolved));
assertEquals(regularFile, Files.isReadable(resolved));
assertEquals(executable, Files.isExecutable(resolved));
assertEquals(hidden, Files.isHidden(resolved));
assertEquals(directory, Files.isDirectory(resolved));
assertEquals(symbolicLink, Files.isSymbolicLink(resolved));
assertThrows(NullPointerException.class, () -> FileUtils.touch(null));
assertFalse(Files.exists(file), "Bad test: test file still exists");
assertTrue(Files.exists(file), "touch() created file");
assertEquals(0, Files.size(file), "Created empty file.");
assertEquals(1, Files.size(file), "Wrote one byte to file");
assertEquals(y2k, getLastModifiedMillis(file), "Bad test: set lastModified set incorrect value");
assertEquals(1, Files.size(file), "FileUtils.touch() didn't empty the file.");
assertNotEquals(y2k, getLastModifiedMillis(file), "FileUtils.touch() changed lastModified");
assertTrue(getLastModifiedMillis(file) >= nowMillis - delta, "FileUtils.touch() changed lastModified to more than now-3s");
assertTrue(getLastModifiedMillis(file) <= nowMillis + delta, "FileUtils.touch() changed lastModified to less than now+3s");
TestUtils.assertEqualContent(text, file);
assertTrue(Files.exists(brokenLink, LinkOption.NOFOLLOW_LINKS));
assertFalse(Files.exists(missingFile, LinkOption.NOFOLLOW_LINKS));
assertFalse(Files.exists(brokenLink, LinkOption.NOFOLLOW_LINKS), "Symbolic link not removed");
assertCounts(0, 1, 0, PathUtils.deleteFile(tempDir.resolve(fileName)));
assertCounts(0, 1, 1, PathUtils.deleteFile(tempDir.resolve(fileName)));
assertCounts(0, 0, 0, pathCounts);
Assertions.assertThrows(NoSuchFileException.class, () -> testDeleteFileEmpty(PathUtils.deleteFile(tempDir)));
assertFalse(Files.isWritable(resolved));
assertThrows(IOException.class, () -> PathUtils.deleteFile(resolved));
assertCounts(0, 1, 1, PathUtils.deleteFile(resolved, StandardDeleteOption.OVERRIDE_READ_ONLY));
assertFalse(Files.isWritable(resolved));
assertThrows(IOException.class, () -> PathUtils.deleteFile(resolved));
Assertions.assertTrue(PathUtils.isEmpty(FILE_SIZE_0));
Assertions.assertFalse(PathUtils.isEmpty(FILE_SIZE_1));
Assertions.assertTrue(PathUtils.isEmpty(tempDir.get()));
Assertions.assertFalse(PathUtils.isEmpty(DIR_SIZE_1));
Assertions.assertTrue(PathUtils.isEmptyDirectory(tempDir.get()));
Assertions.assertFalse(PathUtils.isEmptyDirectory(DIR_SIZE_1));
Assertions.assertTrue(PathUtils.isEmptyFile(FILE_SIZE_0));
Assertions.assertFalse(PathUtils.isEmptyFile(FILE_SIZE_1));
assertTrue(FileUtils.isEmptyDirectory(tempDir.toFile()));
assertFalse(Files.exists(ref.get()));
// assertFalse(Files.exists(ref));
assertTrue(FileUtils.isEmptyDirectory(tempDir.toFile()));
assertFalse(Files.exists(ref.get()));
assertTrue(PathUtils.directoryAndFileContentEquals(null, null));
assertFalse(PathUtils.directoryAndFileContentEquals(null, path1));
assertFalse(PathUtils.directoryAndFileContentEquals(path1, null));
assertTrue(PathUtils.directoryAndFileContentEquals(path1, path1));
assertTrue(PathUtils.directoryAndFileContentEquals(path1, path2));
assertTrue(PathUtils.directoryAndFileContentEquals(path2, path2));
assertTrue(PathUtils.directoryAndFileContentEquals(path2, path1));
assertTrue(PathUtils.directoryAndFileContentEquals(dir1, dir2));
assertTrue(PathUtils.directoryAndFileContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryAndFileContentEquals(dir1, dir1));
assertTrue(PathUtils.directoryAndFileContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryAndFileContentEquals(dir1, dir2));
assertTrue(PathUtils.directoryAndFileContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryAndFileContentEquals(dir1, dir1));
assertTrue(PathUtils.directoryAndFileContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryAndFileContentEquals(dir1, dir2));
assertTrue(PathUtils.directoryAndFileContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryAndFileContentEquals(dir1, dir1));
assertTrue(PathUtils.directoryAndFileContentEquals(dir2, dir2));
assertFalse(PathUtils.directoryAndFileContentEquals(dir1, dir2));
assertFalse(PathUtils.directoryAndFileContentEquals(dir2, dir1));
assertFalse(PathUtils.directoryAndFileContentEquals(dir1, dir2));
assertFalse(PathUtils.directoryAndFileContentEquals(dir2, dir1));
assertTrue(PathUtils.directoryContentEquals(null, null));
assertFalse(PathUtils.directoryContentEquals(null, path1));
assertFalse(PathUtils.directoryContentEquals(path1, null));
assertTrue(PathUtils.directoryContentEquals(path1, path1));
assertTrue(PathUtils.directoryContentEquals(path1, path2));
assertTrue(PathUtils.directoryContentEquals(path2, path2));
assertTrue(PathUtils.directoryContentEquals(path2, path1));
assertTrue(PathUtils.directoryContentEquals(dir1, dir2));
assertTrue(PathUtils.directoryContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryContentEquals(dir1, dir1));
assertTrue(PathUtils.directoryContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryContentEquals(dir1, dir2));
assertTrue(PathUtils.directoryContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryContentEquals(dir1, dir1));
assertTrue(PathUtils.directoryContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryContentEquals(dir1, dir2));
assertTrue(PathUtils.directoryContentEquals(dir2, dir2));
assertTrue(PathUtils.directoryContentEquals(dir1, dir1));
assertTrue(PathUtils.directoryContentEquals(dir2, dir2));
assertFalse(PathUtils.directoryContentEquals(dir1, dir2));
assertFalse(PathUtils.directoryContentEquals(dir2, dir1));
assertFalse(PathUtils.directoryContentEquals(dir1, dir2));
assertFalse(PathUtils.directoryContentEquals(dir2, dir1));
assertTrue(PathUtils.fileContentEquals(null, null));
assertFalse(PathUtils.fileContentEquals(null, path1));
assertFalse(PathUtils.fileContentEquals(path1, null));
assertTrue(PathUtils.fileContentEquals(path1, path1));
assertTrue(PathUtils.fileContentEquals(path1, path2));
assertTrue(PathUtils.fileContentEquals(path2, path2));
assertTrue(PathUtils.fileContentEquals(path2, path1));
assertThrows(IOException.class, () -> PathUtils.fileContentEquals(temporaryFolder.toPath(), temporaryFolder.toPath()));
assertFalse(PathUtils.fileContentEquals(objFile1, objFile2));
assertFalse(PathUtils.fileContentEquals(objFile1b, objFile2));
assertTrue(PathUtils.fileContentEquals(objFile1, objFile1b));
assertTrue(PathUtils.fileContentEquals(objFile1, objFile1));
assertTrue(PathUtils.fileContentEquals(objFile1b, objFile1b));
assertTrue(PathUtils.fileContentEquals(objFile2, objFile2));
assertTrue(PathUtils.fileContentEquals(path1, path1));
assertTrue(PathUtils.fileContentEquals(path1, path2));
assertTrue(Files.exists(ref.get()));
assertFalse(Files.exists(ref.get()));
// assertFalse(Files.exists(ref));
assertTrue(Files.exists(ref.get()));
assertFalse(Files.exists(ref.get()));
Assertions.assertEquals(CountingPathVisitor.withLongCounters(), visitor);
Assertions.assertEquals(CountingPathVisitor.withBigIntegerCounters(), visitor);
assertCounts(1, 0, 0, PathUtils.visitFileTree(visitor, tempDir.get()));
assertCounts(1, 1, 0, PathUtils.visitFileTree(visitor,"src/test/resources/org/apache/commons/io/dirs-1-file-size-0"));
assertCounts(1, 1, 1, PathUtils.visitFileTree(visitor,"src/test/resources/org/apache/commons/io/dirs-1-file-size-1"));
assertCounts(3, 2, 2, PathUtils.visitFileTree(visitor,"src/test/resources/org/apache/commons/io/dirs-2-file-size-2"));
assertCounts(0, 1, 0, PathUtils.delete(tempDirPath.resolve(fileName)));
assertCounts(0, 1, 0, PathUtils.delete(tempDirPath.resolve(fileName), options));
assertCounts(0, 1, 1, PathUtils.delete(tempDirPath.resolve(fileName)));
assertCounts(0, 1, 1, PathUtils.delete(tempDirPath.resolve(fileName), options));
assertCounts(1, 0, 0, pathCounts);
assertCounts(0, 0, 0, PathUtils.deleteFile(tempDirPath.resolve("file-does-not-exist.bin")));
Assertions.assertEquals(counter1, counter2);
Assertions.assertNotEquals(counter1, counter2);
Assertions.assertEquals(counter1, counter2);
Assertions.assertEquals(counter1, counter2);
Assertions.assertNotEquals(counter1, counter2);
Assertions.assertEquals(counter1, counter2);
Assertions.assertEquals(counter1, counter2);
Assertions.assertNotEquals(counter1, counter2);
Assertions.assertEquals(counter1, counter2);
Assertions.assertEquals(counter1, counter2);
Assertions.assertNotEquals(counter1, counter2);
Assertions.assertEquals(counter1, counter2);
Assertions.assertEquals(counter1.hashCode(), counter2.hashCode());
Assertions.assertNotEquals(counter1.hashCode(), counter2.hashCode());
Assertions.assertEquals(counter1.hashCode(), counter2.hashCode());
Assertions.assertEquals(counter1.hashCode(), counter2.hashCode());
Assertions.assertNotEquals(counter1.hashCode(), counter2.hashCode());
Assertions.assertEquals(counter1.hashCode(), counter2.hashCode());
assertCounts(1, 0, 0, visitor);
assertCounts(1, 1, 0, PathUtils.visitFileTree(visitor, tempDir));
assertCounts(1, 1, 1, PathUtils.visitFileTree(visitor, tempDir));
assertCounts(1, 1, 1, PathUtils.visitFileTree(visitor, tempDir));
Assertions.assertTrue(Files.exists(skippedFile));
assertCounts(3, 2, 2, PathUtils.visitFileTree(visitor, tempDir));
assertCounts(1, 1, 0, PathUtils.cleanDirectory(tempDir));
assertCounts(1, 1, 1, PathUtils.cleanDirectory(tempDir));
assertCounts(3, 2, 2, PathUtils.cleanDirectory(tempDir));
assertCounts(1, 0, 0, PathUtils.cleanDirectory(tempDir));
assertCounts(1, 0, 0, visitor);
assertCounts(1, 1, 0, visitFileTree);
assertSame(visitor, visitFileTree);
assertNotEquals(visitFileTree, CleaningPathVisitor.withLongCounters());
assertNotEquals(visitFileTree.hashCode(), CleaningPathVisitor.withLongCounters().hashCode());
assertEquals(visitFileTree, visitFileTree);
assertEquals(visitFileTree.hashCode(), visitFileTree.hashCode());
assertCounts(1, 1, 1, visitFileTree);
assertSame(visitor, visitFileTree);
assertNotEquals(visitFileTree, CleaningPathVisitor.withLongCounters());
assertNotEquals(visitFileTree.hashCode(), CleaningPathVisitor.withLongCounters().hashCode());
assertEquals(visitFileTree, visitFileTree);
assertEquals(visitFileTree.hashCode(), visitFileTree.hashCode());
assertCounts(1, 1, 1, visitFileTree);
assertSame(visitor, visitFileTree);
Assertions.assertTrue(Files.exists(skippedFile));
assertNotEquals(visitFileTree, CleaningPathVisitor.withLongCounters());
assertNotEquals(visitFileTree.hashCode(), CleaningPathVisitor.withLongCounters().hashCode());
assertEquals(visitFileTree, visitFileTree);
assertEquals(visitFileTree.hashCode(), visitFileTree.hashCode());
assertCounts(3, 2, 2, visitFileTree);
assertSame(visitor, visitFileTree);
assertNotEquals(visitFileTree, CleaningPathVisitor.withLongCounters());
assertNotEquals(visitFileTree.hashCode(), CleaningPathVisitor.withLongCounters().hashCode());
assertEquals(visitFileTree, visitFileTree);
assertEquals(visitFileTree.hashCode(), visitFileTree.hashCode());
assertEquals(scheme, FileSystemProviders.installed().getFileSystemProvider(uri).getScheme());
assertNotNull(FileSystemProviders.getFileSystemProvider(Paths.get(URI.create(FILE_PATH))));
assertNotNull(FileSystemProviders.installed().getFileSystemProvider("file"));
assertNotNull(FileSystemProviders.installed().getFileSystemProvider(URI.create(FILE_PATH)));
assertNotNull(FileSystemProviders.installed().getFileSystemProvider(new URL(FILE_PATH)));
assertEquals(0, FilesUncheck.copy(NullInputStream.INSTANCE, NEW_FILE_PATH, PathUtils.EMPTY_COPY_OPTIONS));
assertEquals(0, FilesUncheck.copy(FILE_PATH_EMPTY, NullOutputStream.INSTANCE));
assertEquals(NEW_FILE_PATH, FilesUncheck.copy(FILE_PATH_EMPTY, NEW_FILE_PATH, PathUtils.EMPTY_COPY_OPTIONS));
assertEquals(TARGET_PATH, FilesUncheck.createDirectories(TARGET_PATH, EMPTY_FILE_ATTRIBUTES_ARRAY));
assertEquals(NEW_DIR_PATH, FilesUncheck.createDirectory(NEW_DIR_PATH, EMPTY_FILE_ATTRIBUTES_ARRAY));
assertEquals(NEW_FILE_PATH, FilesUncheck.createFile(NEW_FILE_PATH, EMPTY_FILE_ATTRIBUTES_ARRAY));
assertEquals(NEW_FILE_PATH_LINK, FilesUncheck.createLink(NEW_FILE_PATH_LINK, FILE_PATH_EMPTY));
assertEquals(NEW_FILE_PATH_LINK, FilesUncheck.createSymbolicLink(NEW_FILE_PATH_LINK, FILE_PATH_EMPTY));
assertEquals(TARGET_PATH, FilesUncheck.createTempDirectory(TARGET_PATH, PREFIX, EMPTY_FILE_ATTRIBUTES_ARRAY).getParent());
assertEquals(PathUtils.getTempDirectory(), FilesUncheck.createTempDirectory(PREFIX, EMPTY_FILE_ATTRIBUTES_ARRAY).getParent());
assertEquals(TARGET_PATH, FilesUncheck.createTempFile(TARGET_PATH, PREFIX, SUFFIX, EMPTY_FILE_ATTRIBUTES_ARRAY).getParent());
assertEquals(PathUtils.getTempDirectory(), FilesUncheck.createTempFile(PREFIX, SUFFIX, EMPTY_FILE_ATTRIBUTES_ARRAY).getParent());
assertThrows(UncheckedIOException.class, () -> FilesUncheck.delete(NEW_FILE_PATH));
assertFalse(FilesUncheck.deleteIfExists(NEW_FILE_PATH));
assertEquals(0L, FilesUncheck.getAttribute(FILE_PATH_EMPTY, "basic:size", LinkOption.NOFOLLOW_LINKS));
assertNotNull(FilesUncheck.getFileStore(FILE_PATH_EMPTY));
assertTrue(0 < FilesUncheck.getLastModifiedTime(FILE_PATH_EMPTY, LinkOption.NOFOLLOW_LINKS).toMillis());
assertNotNull(FilesUncheck.getOwner(FILE_PATH_EMPTY, LinkOption.NOFOLLOW_LINKS));
assertNotNull(FilesUncheck.getPosixFilePermissions(FILE_PATH_EMPTY, LinkOption.NOFOLLOW_LINKS));
assertFalse(FilesUncheck.isHidden(FILE_PATH_EMPTY));
assertTrue(FilesUncheck.isSameFile(FILE_PATH_EMPTY, FILE_PATH_EMPTY));
assertEquals(0, FilesUncheck.lines(FILE_PATH_EMPTY).count());
assertEquals(0, FilesUncheck.lines(FILE_PATH_EMPTY, StandardCharsets.UTF_8).count());
assertEquals(1, FilesUncheck.list(Paths.get("src/test/resources/org/apache/commons/io/dirs-1-file-size-0")).count());
assertEquals(tempFile2, FilesUncheck.move(tempFile1, tempFile2, StandardCopyOption.REPLACE_EXISTING));
assertEquals("test", FilesUncheck.readAllLines(tempPath, StandardCharsets.UTF_8).get(0));
assertEquals("test", FilesUncheck.readAllLines(tempPath).get(0));
assertEquals(0, Uncheck.get(() -> {try (SeekableByteChannel c = FilesUncheck.newByteChannel(FILE_PATH_EMPTY, StandardOpenOption.READ)) {return c.size();
assertEquals(0, Uncheck.get(() -> {try (SeekableByteChannel c = FilesUncheck.newByteChannel(FILE_PATH_EMPTY, options, EMPTY_FILE_ATTRIBUTES_ARRAY)) {return c.size();
directoryStream.forEach(e -> assertEquals(TARGET_PATH, e.getParent()));
directoryStream.forEach(e -> assertEquals(TARGET_PATH, e.getParent()));
directoryStream.forEach(e -> assertEquals(TARGET_PATH, e.getParent()));
assertEquals(0, Uncheck.get(() -> {try (InputStream in = FilesUncheck.newInputStream(FILE_PATH_EMPTY, StandardOpenOption.READ)) {return in.available();
assertEquals("test", FilesUncheck.readAllLines(tempPath).get(0));
assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, FilesUncheck.readAllBytes(FILE_PATH_EMPTY));
assertArrayEquals(new byte[] {'a'}, FilesUncheck.readAllBytes(FILE_PATH_A));
assertEquals(Collections.emptyList(), FilesUncheck.readAllLines(FILE_PATH_EMPTY));
assertEquals(Arrays.asList("a"), FilesUncheck.readAllLines(FILE_PATH_A));
assertEquals(Collections.emptyList(), FilesUncheck.readAllLines(FILE_PATH_EMPTY, StandardCharsets.UTF_8));
assertEquals(Arrays.asList("a"), FilesUncheck.readAllLines(FILE_PATH_A, StandardCharsets.UTF_8));
assertNotNull(FilesUncheck.readAttributes(FILE_PATH_EMPTY, BasicFileAttributes.class, LinkOption.NOFOLLOW_LINKS));
assertNotNull(FilesUncheck.readAttributes(FILE_PATH_EMPTY, "basic:lastModifiedTime", LinkOption.NOFOLLOW_LINKS));
assertThrows(UncheckedIOException.class, () -> FilesUncheck.readSymbolicLink(NEW_FILE_PATH_LINK));
assertEquals(FILE_PATH_EMPTY, FilesUncheck.setAttribute(FILE_PATH_EMPTY, "basic:lastModifiedTime", ft, LinkOption.NOFOLLOW_LINKS));
assertEquals(FILE_PATH_EMPTY, FilesUncheck.setLastModifiedTime(FILE_PATH_EMPTY, ft));
assertEquals(FILE_PATH_EMPTY, FilesUncheck.setOwner(FILE_PATH_EMPTY, owner));
assertEquals(FILE_PATH_EMPTY, FilesUncheck.setPosixFilePermissions(FILE_PATH_EMPTY, posixFilePermissions));
assertEquals(0, FilesUncheck.size(FILE_PATH_EMPTY));
assertEquals(1, FilesUncheck.size(FILE_PATH_A));
assertEquals(TARGET_PATH, FilesUncheck.walkFileTree(TARGET_PATH, NoopPathVisitor.INSTANCE));
assertEquals(TARGET_PATH, FilesUncheck.walkFileTree(TARGET_PATH, new HashSet<>(), 1, NoopPathVisitor.INSTANCE));
assertTrue(0 < FilesUncheck.walk(TARGET_PATH, FileVisitOption.FOLLOW_LINKS).count());
assertEquals(1, FilesUncheck.walk(TARGET_PATH, 0, FileVisitOption.FOLLOW_LINKS).count());
assertEquals(tempFile, FilesUncheck.write(tempFile, "test".getBytes(), StandardOpenOption.TRUNCATE_EXISTING));
assertEquals(tempFile, FilesUncheck.write(tempFile, Arrays.asList("test"), StandardCharsets.UTF_8, StandardOpenOption.TRUNCATE_EXISTING));
assertEquals(tempFile, FilesUncheck.write(tempFile, Arrays.asList("test"), StandardOpenOption.TRUNCATE_EXISTING));
public class CounterAssertions {static void assertCounter(final long expected, final Counter actual, final String message) {assertEquals(expected, actual.get(), message);
assertEquals(Long.valueOf(expected), actual.getLong(), message);
assertEquals(BigInteger.valueOf(expected), actual.getBigInteger(), message);
static void assertCounts(final long expectedDirCount, final long expectedFileCount, final long expectedByteCount,final CountingPathVisitor actualVisitor) {assertCounts(expectedDirCount, expectedFileCount, expectedByteCount, actualVisitor.getPathCounters());
static void assertCounts(final long expectedDirCount, final long expectedFileCount, final long expectedByteCount,final PathCounters actualPathCounters) {assertCounter(expectedDirCount, actualPathCounters.getDirectoryCounter(), "getDirectoryCounter");
assertCounter(expectedFileCount, actualPathCounters.getFileCounter(), "getFileCounter");
assertCounter(expectedByteCount, actualPathCounters.getByteCounter(), "getByteCounter");
public static void assertZeroCounters(final PathCounters pathCounters) {assertCounts(0, 0, 0, pathCounters);
assertEquals(Counters.longPathCounters(), pathCounters);
assertEquals(pathFilter, streamFilter.getPathFilter());
assertEquals(PATH_FIXTURE, path.getFileName().toString());
assertFalse(iterator.hasNext());
assertEquals(pathFilter, streamFilter.getPathFilter());
stream.forEach(path -> assertNotEquals(PATH_FIXTURE, path.getFileName().toString()));
assertTrue(testFile.exists());
assertTrue(tempDirFile.exists());
assertEquals(0, theInstance.getTrackCount());
assertEquals(1, theInstance.getTrackCount());
assertEquals(0, theInstance.getTrackCount());
assertTrue(testFile.exists());  // not deleted, as dir not empty
assertTrue(testFile.getParentFile().exists());  // not deleted, as dir not empty
assertTrue(testFile.exists());
assertTrue(tempDirFile.exists());
assertEquals(0, theInstance.getTrackCount());
assertEquals(1, theInstance.getTrackCount());
assertEquals(0, theInstance.getTrackCount());
assertFalse(new File(testFile.getPath()).exists(), showFailures());
assertFalse(testFile.getParentFile().exists(), showFailures());
assertTrue(testFile.exists());
assertTrue(tempDirFile.exists());
assertEquals(0, theInstance.getTrackCount());
assertEquals(1, theInstance.getTrackCount());
assertEquals(0, theInstance.getTrackCount());
assertTrue(testFile.exists());  // not deleted, as dir not empty
assertTrue(testFile.getParentFile().exists());  // not deleted, as dir not empty
assertFalse(theInstance.exitWhenFinished);
assertTrue(theInstance.exitWhenFinished);
assertNull(theInstance.reaper);
assertThrows(IllegalStateException.class, () -> theInstance.track(path, marker));
assertTrue(theInstance.exitWhenFinished);
assertNull(theInstance.reaper);
assertFalse(testFile.exists(), "1-testFile exists: " + testFile);
assertTrue(testFile.exists(), "2-testFile exists");
assertEquals(0, theInstance.getTrackCount(), "3-Track Count");
assertEquals(1, theInstance.getTrackCount(), "4-Track Count");
assertFalse(theInstance.exitWhenFinished, "5-exitWhenFinished");
assertTrue(theInstance.reaper.isAlive(), "6-reaper.isAlive");
assertFalse(theInstance.exitWhenFinished, "7-exitWhenFinished");
assertTrue(theInstance.exitWhenFinished, "8-exitWhenFinished");
assertTrue(theInstance.reaper.isAlive(), "9-reaper.isAlive");
assertEquals(0, theInstance.getTrackCount(), "10-Track Count");
assertFalse(new File(path).exists(), "11-testFile exists " + showFailures());
assertTrue(theInstance.exitWhenFinished, "12-exitWhenFinished");
assertFalse(theInstance.reaper.isAlive(), "13-reaper.isAlive");
assertFalse(testFile.exists());
assertTrue(testFile.exists());
assertEquals(0, theInstance.getTrackCount());
assertEquals(1, theInstance.getTrackCount());
assertFalse(theInstance.exitWhenFinished);
assertTrue(theInstance.reaper.isAlive());
assertEquals(0, theInstance.getTrackCount());
assertFalse(new File(path).exists(), showFailures());
assertFalse(theInstance.exitWhenFinished);
assertTrue(theInstance.reaper.isAlive());
assertFalse(theInstance.exitWhenFinished);
assertTrue(theInstance.exitWhenFinished);
assertFalse(theInstance.reaper.isAlive());
assertFalse(theInstance.exitWhenFinished);
assertTrue(theInstance.exitWhenFinished);
assertNull(theInstance.reaper);
assertEquals(0, theInstance.getTrackCount());
assertTrue(theInstance.exitWhenFinished);
assertNull(theInstance.reaper);
assertFalse(testFile.exists());
assertTrue(testFile.exists());
assertEquals(0, theInstance.getTrackCount());
assertEquals(1, theInstance.getTrackCount());
assertEquals(0, theInstance.getTrackCount());
assertFalse(new File(path).exists(), showFailures());
assertThrows(NullPointerException.class, () -> theInstance.track((File) null, new Object()));
assertThrows(NullPointerException.class, () -> theInstance.track((File) null, new Object(), FileDeleteStrategy.NORMAL));
assertThrows(NullPointerException.class, () -> theInstance.track((String) null, new Object()));
assertThrows(NullPointerException.class, () -> theInstance.track((String) null, new Object(), FileDeleteStrategy.NORMAL));
public void assertCloseCalled() {assertTrue(_closeCalled);
private void assertData(final byte[] expected, final byte[] actual, final int len) {assertEquals(expected.length, len, "length");
assertEquals(expected[ii], actual[ii], "byte " + ii);
assertNotNull(doc);
assertEquals("X", doc.getFirstChild().getNodeName());
assertNotNull(doc);
assertEquals("X", doc.getFirstChild().getNodeName());
assertNotNull(inputStream);
assertEquals(2, is1.skip(2));
assertEquals((byte) 0x33, is1.read());
assertEquals(2, is2.skip(2)); // IO-428
assertEquals((byte) 0x33, is2.read());
assertEquals(7, in.available());
assertEquals(4, in.available());
del.assertCloseCalled();
assertEquals(-1, in.read(buf));
assertEquals(-1, in.read(buf));
assertEquals(ByteOrderMark.UTF_8, in.getBOM(), "getBOM");
assertTrue(in.hasBOM(), "hasBOM()");
assertTrue(in.hasBOM(ByteOrderMark.UTF_8), "hasBOM(UTF-8)");
assertEquals('A', in.read());
assertEquals('B', in.read());
assertEquals('C', in.read());
assertEquals(-1, in.read());
assertTrue(in.hasBOM(), "hasBOM()");
assertTrue(in.hasBOM(ByteOrderMark.UTF_8), "hasBOM(UTF-8)");
assertEquals(ByteOrderMark.UTF_8, in.getBOM(), "getBOM");
assertEquals(0xEF, in.read());
assertEquals(0xBB, in.read());
assertEquals(0xBF, in.read());
assertEquals('A', in.read());
assertEquals('B', in.read());
assertEquals('C', in.read());
assertEquals(-1, in.read());
assertData(data, buf, in.read(buf));
assertData(data, buf, in.read(buf));
assertData(data, buf, in.read(buf));
assertEquals(0xEF, in.read());
assertEquals(0xAB, in.read());
assertEquals(0xCD, in.read());
assertEquals(-1, in.read());
assertTrue(in.markSupported());
assertEquals('B', in.read());
assertTrue(in.markSupported());
assertEquals('B', in.read());
assertTrue(in.markSupported());
assertEquals('A', in.read());
assertTrue(in.markSupported());
assertEquals('A', in.read());
assertThrows(IllegalArgumentException.class, () -> new BOMInputStream(createUtf8DataStream(data, true), false, (ByteOrderMark[])null).close());
assertThrows(IllegalArgumentException.class, () -> new BOMInputStream(createUtf8DataStream(data, true), false, new ByteOrderMark[0]).close());
assertEquals(-1, in.read());
assertFalse(in.hasBOM(), "hasBOM()");
assertFalse(in.hasBOM(ByteOrderMark.UTF_8), "hasBOM(UTF-8)");
assertNull(in.getBOM(), "getBOM");
assertEquals('A', in.read());
assertEquals('B', in.read());
assertEquals(-1, in.read());
assertFalse(in.hasBOM(), "hasBOM()");
assertFalse(in.hasBOM(ByteOrderMark.UTF_8), "hasBOM(UTF-8)");
assertNull(in.getBOM(), "getBOM");
assertEquals(0xEF, in.read());
assertEquals(0xBB, in.read());
assertEquals(0xBF, in.read());
assertEquals('A', in.read());
assertEquals('B', in.read());
assertEquals('C', in.read());
assertEquals(-1, in.read());
assertTrue(in.hasBOM(), "hasBOM()");
assertTrue(in.hasBOM(ByteOrderMark.UTF_8), "hasBOM(UTF-8)");
assertEquals(ByteOrderMark.UTF_8, in.getBOM(), "getBOM");
assertEquals(0, in.read());
assertEquals('A', in.read());
assertEquals(0, in.read());
assertEquals('B', in.read());
assertEquals(0, in.read());
assertEquals('C', in.read());
assertEquals(-1, in.read());
assertTrue(in.hasBOM(), "hasBOM()");
assertTrue(in.hasBOM(ByteOrderMark.UTF_16BE), "hasBOM(UTF-16BE)");
assertEquals(ByteOrderMark.UTF_16BE, in.getBOM(), "getBOM");
assertThrows(IllegalArgumentException.class, () -> in.hasBOM(ByteOrderMark.UTF_16LE));
assertEquals('A', in.read());
assertEquals(0, in.read());
assertEquals('B', in.read());
assertEquals(0, in.read());
assertEquals('C', in.read());
assertEquals(0, in.read());
assertEquals(-1, in.read());
assertTrue(in.hasBOM(), "hasBOM()");
assertTrue(in.hasBOM(ByteOrderMark.UTF_16LE), "hasBOM(UTF-16LE)");
assertEquals(ByteOrderMark.UTF_16LE, in.getBOM(), "getBOM");
assertThrows(IllegalArgumentException.class, () -> in.hasBOM(ByteOrderMark.UTF_16BE));
assertEquals(0, in.read());
assertEquals(0, in.read());
assertEquals(0, in.read());
assertEquals('A', in.read());
assertEquals(0, in.read());
assertEquals(0, in.read());
assertEquals(0, in.read());
assertEquals('B', in.read());
assertEquals(0, in.read());
assertEquals(0, in.read());
assertEquals(0, in.read());
assertEquals('C', in.read());
assertEquals(-1, in.read());
assertTrue(in.hasBOM(), "hasBOM()");
assertTrue(in.hasBOM(ByteOrderMark.UTF_32BE), "hasBOM(UTF-32BE)");
assertEquals(ByteOrderMark.UTF_32BE, in.getBOM(), "getBOM");
assertThrows(IllegalArgumentException.class, () -> in.hasBOM(ByteOrderMark.UTF_32LE));
assertEquals('A', in.read());
assertEquals(0, in.read());
assertEquals(0, in.read());
assertEquals(0, in.read());
assertEquals('B', in.read());
assertEquals(0, in.read());
assertEquals(0, in.read());
assertEquals(0, in.read());
assertEquals('C', in.read());
assertEquals(0, in.read());
assertEquals(0, in.read());
assertEquals(0, in.read());
assertEquals(-1, in.read());
assertTrue(in.hasBOM(), "hasBOM()");
assertTrue(in.hasBOM(ByteOrderMark.UTF_32LE), "hasBOM(UTF-32LE)");
assertEquals(ByteOrderMark.UTF_32LE, in.getBOM(), "getBOM");
assertThrows(IllegalArgumentException.class, () -> in.hasBOM(ByteOrderMark.UTF_32BE));
assertEquals('A', in.read());
assertEquals('B', in.read());
assertEquals('C', in.read());
assertEquals(-1, in.read());
assertTrue(in.hasBOM(), "hasBOM()");
assertTrue(in.hasBOM(ByteOrderMark.UTF_8), "hasBOM(UTF-8)");
assertEquals(ByteOrderMark.UTF_8, in.getBOM(), "getBOM");
assertThrows(IllegalArgumentException.class, () -> in.hasBOM(ByteOrderMark.UTF_16BE));
assertEquals('A', in.read());
assertEquals('B', in.read());
assertEquals('C', in.read());
assertEquals(-1, in.read());
assertTrue(in.hasBOM(), "hasBOM()");
assertTrue(in.hasBOM(ByteOrderMark.UTF_8), "hasBOM(UTF-8)");
assertFalse(in.hasBOM(ByteOrderMark.UTF_16BE), "hasBOM(UTF-16BE)");
assertEquals(ByteOrderMark.UTF_8, in.getBOM(), "getBOM");
assertEquals('A', in.read());
assertEquals('B', in.read());
assertEquals('C', in.read());
assertEquals(-1, in.read());
assertFalse(in.hasBOM(), "hasBOM()");
assertFalse(in.hasBOM(ByteOrderMark.UTF_8), "hasBOM(UTF-8)");
assertNull(in.getBOM(), "getBOM");
assertEquals('C', in.read());
assertEquals('C', in.read());
assertData(new byte[] { 'A', 'B' }, buf, in.read(buf, 0, 2));
assertData(new byte[] { 'C' }, buf, in.read(buf, 0, 2));
assertData(new byte[] { 'A', 'B' }, buf, in.read(buf, 0, 2));
assertData(new byte[] { 'C' }, buf, in.read(buf, 0, 2));
assertEquals(5, len);
assertEquals(0xEF, buf[0] & 0xFF);
assertEquals(0xBB, buf[1] & 0xFF);
assertEquals(0xBF, buf[2] & 0xFF);
assertEquals('A', buf[3] & 0xFF);
assertEquals('B', buf[4] & 0xFF);
assertData(new byte[] { (byte) 0xEF, (byte) 0xBB, (byte) 0xBF, 'A', 'B' }, buf, len);
assertEquals(empty.length, is.available());
assertEquals(one.length, is.available());
assertEquals(some.length, is.available());
assertEquals(empty.length, is.available());
assertEquals(0, is.available());
assertEquals(one.length, is.available());
assertEquals(0, is.available());
assertEquals(0, is.available());
assertEquals(some.length, is.available());
assertEquals(some.length - 1, is.available());
assertEquals(some.length - 10, is.available());
assertEquals(0, is.available());
assertEquals(empty.length, is.available());
assertEquals(0, is.available());
assertEquals(0, is.available());
assertEquals(0, is.available());
assertEquals(one.length, is.available());
assertEquals(one.length - 1, is.available());
assertEquals(0, is.available());
assertEquals(1, is.available());
assertEquals(0, is.available());
assertEquals(1, is.available());
assertEquals(0, is.available());
assertEquals(0, is.available());
assertEquals(some.length, is.available());
assertEquals(some.length - 1, is.available());
assertEquals(some.length - 10, is.available());
assertEquals(0, is.available());
assertEquals(0, is.available());
assertEquals(1, is.available());
assertEquals(7, is.available());
assertEquals(7, is.available());
assertEquals(some.length, is.available());
assertEquals(1, is.available());
assertThrows(IllegalArgumentException.class, () -> {new UnsynchronizedByteArrayInputStream(IOUtils.EMPTY_BYTE_ARRAY, -1);
assertThrows(IllegalArgumentException.class, () -> {new UnsynchronizedByteArrayInputStream(IOUtils.EMPTY_BYTE_ARRAY, 0, -1);
assertThrows(IllegalArgumentException.class, () -> {new UnsynchronizedByteArrayInputStream(IOUtils.EMPTY_BYTE_ARRAY, -1, 1);
assertThrows(IndexOutOfBoundsException.class, () -> {is.read(buf, 0, -1);
assertThrows(IndexOutOfBoundsException.class, () -> {is.read(buf, -1, 1);
assertThrows(IndexOutOfBoundsException.class, () -> {is.read(buf, 0, 1);
assertThrows(NullPointerException.class, () -> {is.read(buf);
assertThrows(IllegalArgumentException.class, () -> {is.skip(-1);
assertTrue(is.markSupported());
assertEquals(0xa, is.read());
assertTrue(is.markSupported());
assertEquals(0xb, is.read());
assertEquals(0xc, is.read());
assertEquals(0xb, is.read());
assertEquals(0xc, is.read());
assertEquals(END_OF_STREAM, is.read());
assertEquals(0xb, is.read());
assertEquals(0xc, is.read());
assertEquals(END_OF_STREAM, is.read());
assertEquals(END_OF_STREAM, read);
assertArrayEquals(new byte[10], buf);
assertEquals(0, read);
assertEquals(3, read);
assertEquals(0xa, buf[0]);
assertEquals(0xb, buf[1]);
assertEquals(0xc, buf[2]);
assertEquals(0, buf[3]);
assertEquals(2, read);
assertEquals(0xa, buf[0]);
assertEquals(0xb, buf[1]);
assertEquals(1, read);
assertEquals(0xc, buf[0]);
assertEquals(END_OF_STREAM, read);
assertArrayEquals(new byte[10], buf);
assertEquals(END_OF_STREAM, read);
assertArrayEquals(new byte[10], buf);
assertEquals(END_OF_STREAM, read);
assertArrayEquals(new byte[10], buf);
assertEquals(0, read);
assertEquals(2, read);
assertEquals(0xa, buf[0]);
assertEquals(0xb, buf[1]);
assertEquals(0, buf[2]);
assertEquals(1, read);
assertEquals(0xc, buf[0]);
assertEquals(END_OF_STREAM, is.read());
assertEquals(0xa, is.read());
assertEquals(0xb, is.read());
assertEquals(0xc, is.read());
assertEquals(END_OF_STREAM, is.read());
assertEquals(3, is.available());
assertEquals(2, is.available());
assertEquals(0xb, is.read());
assertEquals(0, is.available());
assertEquals(END_OF_STREAM, is.read());
assertEquals(3, is.available());
assertEquals(3, is.available());
assertEquals(0xa, is.read());
assertEquals(3, is.available());
assertEquals(1, is.available());
assertEquals(0xc, is.read());
assertEquals(END_OF_STREAM, is.read());
assertEquals(3, is.available());
assertEquals(0, is.available());
assertEquals(END_OF_STREAM, is.read());
assertEquals(3, is.available());
assertEquals(0, is.available());
assertEquals(END_OF_STREAM, is.read());
assertEquals("a\n", roundtrip("a\r"));
assertEquals("a\nb\n", roundtrip("a\rb"));
assertEquals("a\nb", roundtrip("a\rb", false));
assertEquals("a\nbc\n", roundtrip("a\r\nbc"));
assertEquals("a\n\nbc\n", roundtrip("a\r\n\r\nbc"));
assertEquals("a\n\n", roundtrip("a\r\n\r\n", false));
assertEquals("a", roundtrip("a", false));
assertEquals("abc\n", roundtrip("abc"));
assertEquals("a\n\n", roundtrip("a\r\n\r\n"));
assertFalse(timestampedObserver.isClosed());
assertNotNull(timestampedObserver.toString());
assertTrue(timestampedObserver.getOpenInstant().isAfter(before));
assertTrue(timestampedObserver.getOpenToNowDuration().toNanos() > 0);
assertNull(timestampedObserver.getCloseInstant());
assertFalse(timestampedObserver.isClosed());
assertTrue(timestampedObserver.getOpenInstant().isAfter(before));
assertTrue(timestampedObserver.getOpenToNowDuration().toNanos() > 0);
assertFalse(timestampedObserver.isClosed());
assertTrue(timestampedObserver.isClosed());
assertTrue(timestampedObserver.getOpenInstant().isAfter(before));
assertTrue(timestampedObserver.getOpenToNowDuration().toNanos() > 0);
assertTrue(timestampedObserver.getCloseInstant().isAfter(timestampedObserver.getOpenInstant()));
assertTrue(timestampedObserver.getOpenToCloseDuration().toNanos() > 0);
assertNotNull(timestampedObserver.toString());
assertEquals(input, result);
assertEquals(input, result);
assertEquals(input, result);
assertEquals(input, result);
assertEquals(input, result);
assertTrue(Comparable.class.isAssignableFrom(result), "Assignable");
assertTrue(Comparable.class.isAssignableFrom(result), "Assignable");
assertTrue(Runnable.class.isAssignableFrom(result), "Assignable");
assertTrue(Serializable.class.isAssignableFrom(result), "Assignable");
assertFalse(Flushable.class.isAssignableFrom(result), "Not Assignable");
assertEquals(xmlReader.getDefaultEncoding(), alternateEnc);
// we can not assert things here because UTF-8, US-ASCII and// ISO-8859-1 look alike for the chars used for detection// (niallp 2010-10-06 - I re-instated the check below - the tests(6) passed)final String enc = alternateEnc != null ? alternateEnc : streamEnc;
assertEquals(xmlReader.getEncoding(), enc);
assertEquals(xmlReader.getEncoding().substring(0, streamEnc.length()), streamEnc);
assertThrows(NullPointerException.class, () -> new XmlStreamReader((File) null));
assertThrows(NullPointerException.class, () -> new XmlStreamReader((InputStream) null));
assertThrows(NullPointerException.class, () -> new XmlStreamReader((Path) null));
assertThrows(NullPointerException.class, () -> new XmlStreamReader((URLConnection) null, US_ASCII));
assertThrows(NullPointerException.class, () -> new XmlStreamReader((URL) null));
assertEquals(xmlReader.getEncoding(), UTF_8);
assertEquals(xmlReader.getEncoding(), encoding, "Check encoding");
assertEquals(xml, IOUtils.toString(xmlReader), "Check content");
assertTrue(ex.getMessage().contains("Invalid encoding,"));
assertEquals(xmlReader.getEncoding(), shouldBe);
// we can not assert things here because UTF-8, US-ASCII and// ISO-8859-1 look alike for the chars used for detection// (niallp 2010-10-06 - I re-instated the check below and removed the 2 tests that failed)assertEquals(xmlReader.getEncoding(), streamEnc);
assertEquals(xmlReader.getEncoding().substring(0, streamEnc.length()), streamEnc);
assertTrue(encoding.equalsIgnoreCase(xmlReader.getEncoding()), "Check encoding : " + encoding);
assertEquals(xml, IOUtils.toString(xmlReader), "Check content");
assertTrue(ex.getMessage().contains("Invalid encoding,"));
assertEquals(xmlReader.getEncoding(), encoding);
assertEquals(xmlReader.getEncoding().substring(0, encoding.length()), encoding);
assertEquals(xmlReader.getEncoding(), encoding, "Check encoding");
assertEquals(xml, IOUtils.toString(xmlReader), "Check content");
assertTrue(ex.getMessage().contains("Invalid encoding,"));
assertEquals(xmlReader.getEncoding(), UTF_8);
assertEquals(xmlReader.getEncoding(), UTF_8);
assertEquals(xmlReader.getEncoding(), encoding);
assertEquals(xmlReader.getEncoding(), encoding);
assertEquals(xmlReader.getEncoding(), encoding);
assertTrue(file.getParentFile().exists(), () -> "Cannot create file " + file + " as the parent directory does not exist");
assertTrue(file.exists());
assertEquals(size, file.length());
@SuppressWarnings("squid:S2699") // Suppress "Add at least one assertion to this test case"public void testBufferBreak() throws Exception {final long delay = 50;
assertTrue(tailer.getTailable() instanceof NonStandardTailable);
assertFalse(file.exists(), "nosuchfile should not exist");
assertNotNull(listener.exception, "Missing InterruptedException");
assertTrue(listener.exception instanceof InterruptedException, "Unexpected Exception: " + listener.exception);
assertEquals(1, listener.initialized, "Expected init to be called");
assertTrue(listener.notFound > 0, "fileNotFound should be called");
assertEquals(0, listener.rotated, "fileRotated should be not be called");
assertEquals(0, listener.reachedEndOfFile, "end of file never reached");
assertEquals(4, lines.size(), "line count");
assertEquals("CRLF", lines.get(0), "line 1");
assertEquals("LF", lines.get(1), "line 2");
assertEquals("CR", lines.get(2), "line 3");
assertEquals("CRCR\r", lines.get(3), "line 4");
@SuppressWarnings("squid:S2699") // Suppress "Add at least one assertion to this test case"public void testLongFile() throws Exception {final long delay = 50;
assertEquals(lines.size(), tailerlines.size(), "line count");
assertFalse(file.exists(), "nosuchfile should not exist");
assertNull(listener.exception, "Should not generate Exception");
assertEquals(1, listener.initialized, "Expected init to be called");
assertTrue(listener.notFound > 0, "fileNotFound should be called");
assertEquals(0, listener.rotated, "fileRotated should be not be called");
assertEquals(0, listener.reachedEndOfFile, "end of file never reached");
assertFalse(file.exists(), "nosuchfile should not exist");
assertNull(listener.exception, "Should not generate Exception");
assertEquals(1, listener.initialized, "Expected init to be called");
assertTrue(listener.notFound > 0, "fileNotFound should be called");
assertEquals(0, listener.rotated, "fileRotated should be not be called");
assertEquals(0, listener.reachedEndOfFile, "end of file never reached");
assertEquals(2, lines.size(), "1 line count");
assertEquals("Line one", lines.get(0), "1 line 1");
assertEquals("Line two", lines.get(1), "1 line 2");
assertEquals(1, lines.size(), "2 line count");
assertEquals("Line three", lines.get(0), "2 line 3");
assertEquals(3, lines.size(), "3 line count");
assertEquals("Line one", lines.get(0), "3 line 1");
assertEquals("Line two", lines.get(1), "3 line 2");
assertEquals("Line three", lines.get(2), "3 line 3");
assertFalse(file.exists(), "File should not exist");
assertTrue(file.exists(), "File should now exist");
assertEquals(1, lines.size(), "4 line count");
assertEquals("Line four", lines.get(0), "4 line 3");
assertEquals(0, listener.getLines().size(), "4 line count");
assertNotNull(listener.exception, "Missing InterruptedException");
assertTrue(listener.exception instanceof InterruptedException, "Unexpected Exception: " + listener.exception);
assertEquals(1, listener.initialized, "Expected init to be called");
// assertEquals(0 , listener.notFound, "fileNotFound should not be called"); // there is a window when it might be
assertEquals(1, listener.rotated, "fileRotated should be called");
assertTrue(listener.reachedEndOfFile >= 3, "end of file reached at least 3 times");
assertEquals(0, lines.size(), "1 line count");
assertEquals(1, lines.size(), "1 line count");
assertEquals("Line one", lines.get(0), "1 line 1");
assertTrue(listener.awaitExpectedLines(timeout, timeoutUnit), () -> String.format("await timed out after %s %s", timeout, timeoutUnit));
assertEquals(listener.getLines(), Lists.newArrayList("foo"), "lines");
assertEquals(expected[i], actual[i], "Compare[" +i + "]");
assertEquals(expected.charAt(i), (char)reader.read(), "Read[" + i + "] of '" + expected + "'");
assertThrows(IllegalArgumentException.class, () -> new CharSequenceReader("FooBar", -1, 6),"Expected exception not thrown for negative start.");
assertThrows(IllegalArgumentException.class, () -> new CharSequenceReader("FooBar", 1, 0),"Expected exception not thrown for end before start.");
assertTrue(reader.markSupported());
assertEquals('F', reader.read());
assertEquals('o', reader.read());
assertEquals('o', reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals('o', reader.read());
assertEquals('o', reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals(2, reader.read(chars));
assertEquals(3, reader.read(chars));
assertEquals(1, reader.read(chars));
assertEquals(-1, reader.read(chars));
assertEquals(2, reader.read(chars));
assertEquals(2, reader.read(chars));
assertEquals(-1, reader.read(chars));
assertEquals(-1, reader.read(chars));
assertEquals(3, reader.read(chars, 3, 3));
assertEquals(3, reader.read(chars, 0, 3));
assertEquals(-1, reader.read(chars));
assertEquals(2, reader.read(chars, 3, 2));
assertEquals(2, reader.read(chars, 0, 3));
assertEquals(-1, reader.read(chars));
assertTrue(reader.ready());
assertTrue(reader.ready());
assertFalse(reader.ready());
assertTrue(reader.ready());
assertTrue(reader.ready());
assertFalse(reader.ready());
assertTrue(reader.ready());
assertFalse(reader.ready());
assertTrue(subReader.ready());
assertTrue(subReader.ready());
assertFalse(subReader.ready());
assertTrue(subReader.ready());
assertTrue(subReader.ready());
assertFalse(subReader.ready());
assertTrue(subReader.ready());
assertFalse(subReader.ready());
assertEquals('F', reader.read());
assertEquals('o', reader.read());
assertEquals('o', reader.read());
assertEquals('B', reader.read());
assertEquals('a', reader.read());
assertEquals('r', reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals('F', reader.read());
assertEquals('o', reader.read());
assertEquals('o', reader.read());
assertEquals('B', reader.read());
assertEquals('a', reader.read());
assertEquals('r', reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals('F', reader.read());
assertEquals('o', reader.read());
assertEquals('o', reader.read());
assertEquals('B', reader.read());
assertEquals('a', reader.read());
assertEquals('r', reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals(3, reader.skip(3));
assertEquals(0, reader.skip(3));
assertEquals(2, reader.skip(2));
assertEquals(4, reader.skip(10));
assertEquals(0, reader.skip(1));
assertEquals(6, reader.skip(20));
assertEquals(-1, reader.read());
assertEquals(3, subReader.skip(3));
assertEquals(0, subReader.skip(3));
assertEquals(2, subReader.skip(2));
assertEquals(4, subReader.skip(10));
assertEquals(0, subReader.skip(1));
assertEquals(6, subReader.skip(20));
assertEquals(-1, subReader.read());
assertEquals("FooBar", new CharSequenceReader("FooBar").toString());
assertEquals("FooBar", new CharSequenceReader("xFooBarx", 1, 7).toString());
assertTrue(closed, "closed");
assertEquals(-1, stream.read(), "read()");
assertTrue(closed, "closed");
assertEquals(-1, stream.read(), "read()");
assertEquals(element, stream.read(), "read()");
assertFalse(closed, "closed");
assertEquals(-1, stream.read(), "read()");
assertTrue(closed, "closed");
assertFalse(closed, "closed");
assertEquals(data[total + i], b[i], "read(b)");
assertEquals(data.length, total, "read(b)");
assertTrue(closed, "closed");
assertEquals(-1, stream.read(b), "read(b)");
assertFalse(closed, "closed");
assertEquals(data.length, total, "read(b, off, len)");
assertEquals(data[i], b[i], "read(b, off, len)");
assertTrue(closed, "closed");
assertEquals(-1, stream.read(b, 0, b.length), "read(b, off, len)");
assertEquals('1', inputStream.read());
assertEquals('1', inputStream.read());
assertEquals('2', inputStream.read());
assertEquals('1', inputStream.read());
assertEquals('2', inputStream.read());
assertEquals('3', inputStream.read());
assertEquals('1', inputStream.read());
assertEquals('2', inputStream.read());
assertEquals('3', inputStream.read());
assertEquals('4', inputStream.read());
assertEquals('1', inputStream.read());
assertEqualsAndNoLineBreaks("987654321", reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks("123456789", reversedLinesFileReader.readLine());
assertThrows(IllegalArgumentException.class, () -> reversedLinesFileReader.readLines(-1));
assertTrue(reversedLinesFileReader.readLines(0).isEmpty());
assertEqualsAndNoLineBreaks("987654321", lines.get(0));
assertEqualsAndNoLineBreaks("123456789", lines.get(1));
assertTrue(reversedLinesFileReader.readLines(0).isEmpty());
assertTrue(reversedLinesFileReader.readLines(10000).isEmpty());
assertThrows(IllegalArgumentException.class, () -> reversedLinesFileReader.toString(-1));
assertTrue(reversedLinesFileReader.readLines(0).isEmpty());
assertEquals("123456789" + System.lineSeparator() + "987654321" + System.lineSeparator(), lines);
assertTrue(reversedLinesFileReader.toString(0).isEmpty());
assertTrue(reversedLinesFileReader.toString(10000).isEmpty());
assertThrows(UnsupportedEncodingException.class,() -> new ReversedLinesFileReader(testFileEncodingBig5, IOUtils.DEFAULT_BUFFER_SIZE, "Big5").close());
assertThrows(UnsupportedEncodingException.class,() -> new ReversedLinesFileReader(testFileEmpty, IOUtils.DEFAULT_BUFFER_SIZE, StandardCharsets.UTF_16.name()).close());
assertEquals("a\r\nbc\r\n", roundtrip("a\r\nbc"));
assertEquals("ab\r\nc", roundtrip);
assertEquals("a\rbc", roundtrip("a\rbc", false));
assertEquals("a\r\n\r\nbc\r\n", roundtrip("a\r\n\r\nbc"));
assertEquals("a\r\n\r\n", roundtrip("a\r\n\r\n", false));
assertEquals("a", roundtrip("a", false));
assertEquals("abc\r\n", roundtrip("abc"));
assertEquals("a\r\n\r\n", roundtrip("a\r\n\r\n"));
assertThrows(IOException.class, ois::read);
assertThrows(IOException.class, () -> ois.read(new byte[1]));
assertThrows(IOException.class, () -> ois.read(new byte[2], 0, 1));
assertEquals(-1, lko.lastValue);
assertEquals(-1, lko.lastValue);
assertEquals(0, lko.getFinishedCount());
assertEquals(0, lko.getClosedCount());
assertEquals((byte) result, buffer[i]);
assertEquals(result, lko.lastValue);
assertEquals(0, lko.getFinishedCount());
assertEquals(0, lko.getClosedCount());
assertEquals(-1, result);
assertEquals(1, lko.getFinishedCount());
assertEquals(0, lko.getClosedCount());
assertEquals(1, lko.getFinishedCount());
assertEquals(1, lko.getClosedCount());
assertEquals(-1, lko.lastValue);
assertNotEquals(-1, lko.lastValue);
assertEquals(0, lko.getFinishedCount());
assertEquals(0, lko.getClosedCount());
assertEquals((byte) result, buffer[i]);
assertEquals(result, lko.lastValue);
assertEquals(0, lko.getFinishedCount());
assertEquals(0, lko.getClosedCount());
assertEquals(-1, result);
assertEquals(1, lko.getFinishedCount());
assertEquals(0, lko.getClosedCount());
assertEquals(1, lko.getFinishedCount());
assertEquals(1, lko.getClosedCount());
assertNull(observer.buffer);
assertNull(observer.buffer);
assertEquals(readBuffer, observer.buffer);
assertEquals(0, observer.offset);
assertEquals(readBuffer.length, observer.length);
assertEquals(readBuffer, observer.buffer);
assertEquals(1, observer.offset);
assertEquals(res, observer.length);
assertTrue(ois.getObservers().isEmpty());
assertEquals(observer0, ois.getObservers().get(0));
assertEquals(observer0, ois.getObservers().get(0));
assertEquals(observer1, ois.getObservers().get(1));
assertEquals(IOUtils.DEFAULT_BUFFER_SIZE,IOUtils.copy(ois, NullOutputStream.INSTANCE, bufferSize));
assertEquals(IOUtils.DEFAULT_BUFFER_SIZE, lengthObserver.getTotal());
assertEquals(1, methodCountObserver.getClosedCount());
assertEquals(1, methodCountObserver.getFinishedCount());
assertEquals(0, methodCountObserver.getErrorCount());
assertEquals(0, methodCountObserver.getDataCount());
assertEquals(buffer.length / bufferSize, methodCountObserver.getDataBufferCount());
assertEquals(0, input.read(), "Read 1");
assertEquals(1, input.read(), "Read 2");
assertThrows(EOFException.class, () -> input.read());
assertTrue(input.markSupported(), "Mark Should be Supported");
assertEquals("No position has been marked", e.getMessage(), "No Mark IOException message");
assertEquals(position, input.read(), "Read Before Mark [" + position + "]");
assertEquals(position + i, input.read(), "Read After Mark [" + i + "]");
assertEquals(position + i, input.read(), "Read After Reset [" + i + "]");
assertEquals("Marked position [" + position + "] is no longer valid - passed the read limit [" + readlimit + "]", e.getMessage(),"Read limit IOException message");
assertFalse(input.markSupported(), "Mark Should NOT be Supported");
assertEquals(MARK_RESET_NOT_SUPPORTED, e.getMessage(), "mark() error message");
assertEquals(MARK_RESET_NOT_SUPPORTED, e.getMessage(), "reset() error message");
assertEquals(size - i, input.available(), "Check Size [" + i + "]");
assertEquals(i, input.read(), "Check Value [" + i + "]");
assertEquals(0, input.available(), "Available after contents all read");
assertEquals(-1, input.read(), "End of File");
assertEquals(0, input.available(), "Available after End of File");
assertEquals("Read after end of file", e.getMessage());
assertEquals(size, input.available(), "Available after close");
assertEquals(bytes.length, count1, "Read 1");
assertEquals(i, bytes[i], "Check Bytes 1");
assertEquals(5, count2, "Read 2");
assertEquals(count1 + i, bytes[i], "Check Bytes 2");
assertEquals(-1, count3, "Read 3 (EOF)");
assertEquals("Read after end of file", e.getMessage());
assertEquals(lth, count5, "Read 5");
assertEquals(i, bytes[i], "Check Bytes 2");
assertEquals(0, input.read(), "Read 1");
assertEquals(1, input.read(), "Read 2");
assertEquals(5, input.skip(5), "Skip 1");
assertEquals(7, input.read(), "Read 3");
assertEquals(2, input.skip(5), "Skip 2"); // only 2 left to skip
assertEquals(-1, input.skip(5), "Skip 3 (EOF)"); // End of file
assertEquals("Skip after end of file", e.getMessage(), "Skip after EOF IOException message");
assertTrue(reader.isCauseOf(e));
assertEquals(exception, e2);
assertTrue(reader.isCauseOf(e));
assertEquals(exception, e2);
assertTrue(reader.isCauseOf(e));
assertEquals(exception, e2);
assertFalse(reader.ready());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read(new char[1]));
assertEquals(-1, reader.read(new char[1], 0, 1));
assertTrue(reader.ready());
assertEquals('a', reader.read());
assertEquals(1, reader.read(buffer));
assertEquals('b', buffer[0]);
assertEquals(1, reader.read(buffer, 0, 1));
assertEquals('c', buffer[0]);
assertEquals(-1, reader.read());
assertFalse(reader.isCauseOf(exception));
assertFalse(reader.isCauseOf(new TaggedIOException(exception, UUID.randomUUID())));
assertEquals(inputData, actualData);
assertEquals(inputData, dataCopy);
assertEquals(inputData, actualData);
assertThrows(NullPointerException.class, () -> new QueueInputStream(null), "queue is required");
assertEquals(inputData, actualData);
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals('b', reader.read());
assertEquals(-1, reader.read());
assertEquals('a', reader.read());
assertEquals(-1, reader.read());
assertEquals('a', reader.read());
assertEquals('b', reader.read());
assertEquals(-1, reader.read());
assertEquals(6, charCount);
assertEquals("aacacd", new String(buff, 0, charCount));
assertEquals(9, charCount);
assertEquals("ababcabcd", new String(buff, 0, charCount));
assertEquals("aacacd", output.toString());
assertEquals("ababcabcd", output.toString());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals('b', reader.read());
assertEquals(-1, reader.read());
assertEquals('a', reader.read());
assertEquals(-1, reader.read());
assertEquals('b', reader.read());
assertEquals(-1, reader.read());
assertEquals('a', reader.read());
assertEquals(-1, reader.read());
assertEquals('a', reader.read());
assertEquals('b', reader.read());
assertTimeoutPreemptively(Duration.ofMillis(500), () -> {try (StringBuilderWriter output = new StringBuilderWriter();
assertEquals(STRING_FIXTURE, output.toString());
assertEquals('0', uncheckedReader.read());
assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.close()).getCause());
assertEquals(c, ucStringReader.read());
assertThrows(UncheckedIOException.class, () -> closedReader.mark(1));
assertEquals('0', uncheckedReader.read());
assertEquals('1', uncheckedReader.read());
assertEquals(IOUtils.EOF, uncheckedReader.read());
assertEquals(IOUtils.EOF, uncheckedReader.read());
assertEquals(1, uncheckedReader.read(array));
assertEquals('0', array[0]);
assertEquals(1, uncheckedReader.read(array));
assertEquals('1', array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array));
assertEquals(0, array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array));
assertEquals(0, array[0]);
assertEquals(1, uncheckedReader.read(array, 0, 1));
assertEquals('0', array[0]);
assertEquals(1, uncheckedReader.read(array, 0, 1));
assertEquals('1', array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array, 0, 1));
assertEquals(0, array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array, 0, 1));
assertEquals(0, array[0]);
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read(new char[1], 0, 1)).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read(new char[1])).getCause());
assertEquals(1, uncheckedReader.read(buffer));
assertEquals('0', buffer.charAt(0));
assertEquals(1, uncheckedReader.read(buffer));
assertEquals('1', buffer.charAt(0));
assertEquals(IOUtils.EOF, uncheckedReader.read(buffer));
assertEquals(0, buffer.length());
assertEquals(0, uncheckedReader.read(buffer));
assertEquals(0, buffer.length());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read(CharBuffer.wrap(new char[1]))).getCause());
assertEquals("01", uncheckedReader.readLine());
assertEquals(IOUtils.EOF, uncheckedReader.read());
assertEquals(IOUtils.EOF, uncheckedReader.read());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.readLine()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read()).getCause());
assertTrue(ucStringReader.ready());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.ready()).getCause());
assertThrows(UncheckedIOException.class, () -> ucBrokenReader.reset());
assertEquals(1, ucStringReader.skip(1));
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.skip(1)).getCause());
assertEquals(0, in.markcount);
assertEquals(0, in.readlimit);
assertEquals(0, in.markcount);
assertEquals(0, in.readlimit);
assertFalse(is.markSupported());
assertFalse(msis.markSupported());
assertTrue(is.markSupported());
assertFalse(msis.markSupported());
assertThrows(UnsupportedOperationException.class, msis::reset);
assertThrows(UnsupportedOperationException.class, msis::reset);
assertEquals(1024, inputStream.skip(1024));
assertEquals(randomBytes[i], (byte) inputStream.read());
assertEquals(randomBytes.length, inputStream.skip(randomBytes.length + 1));
assertEquals(-1, inputStream.read());
assertEquals(randomBytes[i], (byte) inputStream.read());
assertEquals(1024, inputStream.skip(1024));
assertEquals(randomBytes[i], (byte) inputStream.read());
assertEquals(randomBytes[i], (byte) inputStream.read());
assertEquals(0, inputStream.skip(-1));
assertEquals(0, inputStream.skip(-1024));
assertEquals(0, inputStream.skip(Long.MIN_VALUE));
assertEquals(1024, inputStream.skip(1024));
assertEquals(randomBytes[i], (byte) inputStream.read());
assertEquals(randomBytes[i], readBytes[j]);
assertEquals(randomByte, (byte) inputStream.read());
assertEquals(-1, readAfterEOF);
assertEquals(1024, inputStream.skip(1024));
assertEquals(randomBytes[i], (byte) inputStream.read());
assertEquals(256, inputStream.skip(256));
assertEquals(256, inputStream.skip(256));
assertEquals(512, inputStream.skip(512));
assertEquals(randomBytes[i], (byte) inputStream.read());
assertEquals(-1, cis.read(), "read()");
assertFalse(sdis.readBoolean());
assertTrue(sdis.readBoolean());
assertTrue(sdis.readBoolean());
assertEquals( 0x01, this.sdis.readByte() );
assertEquals( (char) 0x0201, this.sdis.readChar() );
assertEquals( Double.longBitsToDouble(0x0807060504030201L), this.sdis.readDouble(), 0 );
assertEquals( Float.intBitsToFloat(0x04030201), this.sdis.readFloat(), 0 );
assertEquals( bytes[i], bytesIn[i] );
assertEquals( 0x04030201, this.sdis.readInt() );
assertThrows(UnsupportedOperationException.class, () ->  this.sdis.readLine(),"readLine should be unsupported. ");
assertEquals( 0x0807060504030201L, this.sdis.readLong() );
assertEquals( (short) 0x0201, this.sdis.readShort() );
assertEquals( 0x01, this.sdis.readUnsignedByte() );
assertEquals( (short) 0x0201, this.sdis.readUnsignedShort() );
assertThrows(UnsupportedOperationException.class, () ->  this.sdis.readUTF(),"readUTF should be unsupported. ");
assertEquals( 0x08070605, this.sdis.readInt() );
assertEquals(0, reader.read(), "Read 1");
assertEquals(1, reader.read(), "Read 2");
assertThrows(EOFException.class, () -> reader.read());
assertTrue(reader.markSupported(), "Mark Should be Supported");
assertEquals("No position has been marked", e.getMessage(), "No Mark IOException message");
assertEquals(position, reader.read(), "Read Before Mark [" + position + "]");
assertEquals(position + i, reader.read(), "Read After Mark [" + i + "]");
assertEquals(position + i, reader.read(), "Read After Reset [" + i + "]");
assertEquals("Marked position [" + position + "] is no longer valid - passed the read limit [" + readlimit + "]", e.getMessage(),"Read limit IOException message");
assertFalse(reader.markSupported(), "Mark Should NOT be Supported");
assertEquals(MARK_RESET_NOT_SUPPORTED, e.getMessage(), "mark() error message");
assertEquals(MARK_RESET_NOT_SUPPORTED, e.getMessage(), "reset() error message");
assertEquals(i, reader.read(), "Check Value [" + i + "]");
assertEquals(-1, reader.read(), "End of File");
assertEquals("Read after end of file", e.getMessage());
assertEquals(0, reader.getPosition(), "Available after close");
assertEquals(chars.length, count1, "Read 1");
assertEquals(i, chars[i], "Check Chars 1");
assertEquals(5, count2, "Read 2");
assertEquals(count1 + i, chars[i], "Check Chars 2");
assertEquals(-1, count3, "Read 3 (EOF)");
assertEquals("Read after end of file", e.getMessage());
assertEquals(lth, count5, "Read 5");
assertEquals(i, chars[i], "Check Chars 3");
assertEquals(0, reader.read(), "Read 1");
assertEquals(1, reader.read(), "Read 2");
assertEquals(5, reader.skip(5), "Skip 1");
assertEquals(7, reader.read(), "Read 3");
assertEquals(2, reader.skip(5), "Skip 2"); // only 2 left to skip
assertEquals(-1, reader.skip(5), "Skip 3 (EOF)"); // End of file
assertEquals("Skip after end of file", e.getMessage(), "Skip after EOF IOException message");
assertEquals(expected[i], actual[i], "Compare[" + i + "]");
assertEquals(expected.charAt(i), (char) reader.read(), "Read[" + i + "] of '" + expected + "'");
assertEquals(-1, reader.read());
assertFalse(reader.markSupported());
assertEquals('F', reader.read());
assertEquals('o', reader.read());
assertEquals('o', reader.read());
assertEquals('B', reader.read());
assertEquals('a', reader.read());
assertEquals('r', reader.read());
assertEquals(2, reader.read(chars));
assertEquals(3, reader.read(chars));
assertEquals(1, reader.read(chars));
assertEquals(-1, reader.read(chars));
assertEquals(3, reader.read(chars, 3, 3));
assertEquals(3, reader.read(chars, 0, 3));
assertEquals(-1, reader.read(chars));
assertThrows(IndexOutOfBoundsException.class, () -> reader.read(chars, 10, 10));
assertThrows(NullPointerException.class, () -> reader.read(null, 0, 10));
assertEquals('F', reader.read());
assertEquals('B', reader.read());
assertEquals('F', reader.read());
assertEquals('B', reader.read());
assertEquals('0', reader.read());
assertEquals('1', reader.read());
assertEquals('2', reader.read());
assertEquals('3', reader.read());
assertEquals('F', reader.read());
assertEquals('B', reader.read());
assertEquals(3, reader.skip(3));
assertEquals(0, reader.skip(3));
assertThrows(IllegalArgumentException.class, () -> new ReaderInputStream(new StringReader("\uD800"), StandardCharsets.UTF_8, -1));
assertThrows(IllegalArgumentException.class, () -> new ReaderInputStream(new StringReader("\uD800"), StandardCharsets.UTF_8, 0));
assertThrows(IllegalArgumentException.class, () -> new ReaderInputStream(new StringReader("\uD800"), StandardCharsets.UTF_8, 1));
assertEquals(Arrays.toString(expected), Arrays.toString(actual));
assertThrows(CharacterCodingException.class, in::read);
assertEquals(Charset.defaultCharset(), in.getCharsetEncoder().charset());
assertEquals(Charset.defaultCharset(), in.getCharsetEncoder().charset());
assertEquals(Charset.defaultCharset(), in.getCharsetEncoder().charset());
assertEquals(0, inputStream.read(bytes, 0, 0));
assertEquals(inStr.length(), inputStream.read(bytes, 0, inStr.length() + 1));
assertEquals(0, inputStream.read(bytes, 0, 0));
assertEquals(0, inputStream.read(bytes, 0, 0));
assertEquals(-1, inputStream.read(bytes, 0, 1));
assertEquals(0, inputStream.read(bytes, 0, 0));
assertEquals(-1, inputStream.read(bytes, 0, 1));
assertEquals(offset, expected.length);
assertTrue(read <= bufferLength);
assertTrue(offset < expected.length);
assertEquals(expected[offset], buffer[bufferOffset]);
assertTrue(read >= 0);
assertTrue(read <= 255);
assertEquals(b, (byte) read);
assertEquals(-1, in.read());
assertEquals(expected, XmlStreamReader.isAppXml(mime), "Mime=[" + mime + "]");
assertEquals(expected, XmlStreamReader.getContentTypeEncoding(httpContentType), "ContentTypeEncoding=[" + httpContentType + "]");
assertEquals(expected, XmlStreamReader.getContentTypeMime(httpContentType), "ContentTypeMime=[" + httpContentType + "]");
assertEquals(expected, encoding, builder.toString());
assertTrue(e.getMessage().startsWith("Invalid encoding"), "Msg Start: " + e.getMessage());
assertTrue(e.getMessage().endsWith(msgSuffix), "Msg End: " + e.getMessage());
assertEquals(bomEnc, e.getBomEncoding(), "bomEnc");
assertEquals(xmlGuessEnc, e.getXmlGuessEncoding(), "xmlGuessEnc");
assertEquals(xmlEnc, e.getXmlEncoding(), "xmlEnc");
assertEquals(XmlStreamReader.getContentTypeEncoding(httpContentType), e.getContentTypeEncoding(),"ContentTypeEncoding");
assertEquals(XmlStreamReader.getContentTypeMime(httpContentType), e.getContentTypeMime(), "ContentTypeMime");
assertEquals(expected, encoding, builder.toString());
assertTrue(e.getMessage().startsWith("Invalid encoding"), "Msg Start: " + e.getMessage());
assertTrue(e.getMessage().endsWith(msgSuffix), "Msg End: "   + e.getMessage());
assertEquals(bomEnc, e.getBomEncoding(), "bomEnc");
assertEquals(xmlGuessEnc, e.getXmlGuessEncoding(), "xmlGuessEnc");
assertEquals(xmlEnc, e.getXmlEncoding(), "xmlEnc");
assertNull(e.getContentTypeEncoding(), "ContentTypeEncoding");
assertNull(e.getContentTypeMime(), "ContentTypeMime");
assertEquals(expected, XmlStreamReader.isTextXml(mime), "Mime=[" + mime + "]");
assertTrue(closed.get());
assertEquals(-1, mr.read());
assertEquals(-1, mr.read());
assertEquals(-1, mr.read());
assertEquals(-1, mr.read());
assertEquals(-1, mr.read());
assertEquals(-1, mr.read());
assertEquals(3, read);
assertEquals('0', cbuf[0]);
assertEquals('1', cbuf[1]);
assertEquals('2', cbuf[2]);
assertEquals('X', cbuf[3]);
assertEquals(2, read);
assertEquals('X', cbuf[0]);
assertEquals('0', cbuf[1]);
assertEquals('1', cbuf[2]);
assertEquals('X', cbuf[3]);
assertEquals(-1, mr.read());
assertEquals(-1, mr.read());
assertEquals(-1, mr.read());
assertTimeout(TIMEOUT, () -> testLineNumberReaderAndFileReaderLastLine(STRING_END_NO_EOL));
assertTimeout(TIMEOUT, () -> testLineNumberReaderAndFileReaderLastLine(STRING_END_EOL));
assertTimeout(TIMEOUT, () -> testLineNumberReader(new StringReader(STRING_END_NO_EOL)));
assertTimeout(TIMEOUT, () -> testLineNumberReader(new StringReader(STRING_END_EOL)));
assertTimeout(TIMEOUT, () -> {final BoundedReader mr = new BoundedReader(sr, 3);
assertEquals('a', tee.read());
assertEquals('b', tee.read());
assertEquals('b', tee.read());
assertEquals('c', tee.read());
assertEquals(-1, tee.read());
assertEquals("abbc", output.toString(ASCII));
assertEquals('a', tee.read());
assertEquals('b', tee.read());
assertEquals('c', tee.read());
assertEquals(-1, tee.read());
assertEquals("abc", output.toString(ASCII));
assertEquals("", output.toString(ASCII));
assertEquals('a', tee.read());
assertEquals("a", output.toString(ASCII));
assertEquals(3, tee.read(buffer));
assertEquals('a', buffer[0]);
assertEquals('b', buffer[1]);
assertEquals('c', buffer[2]);
assertEquals(-1, tee.read(buffer));
assertEquals("abc", output.toString(ASCII));
assertEquals(3, tee.read(buffer, 4, 4));
assertEquals('a', buffer[4]);
assertEquals('b', buffer[5]);
assertEquals('c', buffer[6]);
assertEquals(-1, tee.read(buffer, 4, 4));
assertEquals("abc", output.toString(ASCII));
assertEquals('a', tee.read());
assertEquals(1, tee.skip(1));
assertEquals('c', tee.read());
assertEquals(-1, tee.read());
assertEquals("ac", output.toString(ASCII));
private void assertStreamOutput(final byte[] toCycle, final byte[] expected) throws IOException {final byte[] actual = new byte[expected.length];
assertArrayEquals(expected, actual);
assertEquals(expected.length, actualReadBytes);
assertThrows(IllegalArgumentException.class, () -> createInputStream(new byte[] { -1 }));
assertThrows(IllegalArgumentException.class, () -> createInputStream(new byte[] {}));
assertEquals(1, in.read());
assertEquals(1, in.read());
assertStreamOutput(input, expected);
assertThrows(NullPointerException.class, () -> createInputStream(null));
assertStreamOutput(contentToCycle, expectedOutput);
assertEquals(expected.length, actual.length, msg + " length");
assertEquals(expected[i], actual[i], msg + " byte[" + i + "]");
assertEquals(helloWorld[i], bounded.read(), "limit = length byte[" + i + "]");
assertEquals(-1, bounded.read(), "limit = length end");
assertEquals(helloWorld[i], bounded.read(), "limit > length byte[" + i + "]");
assertEquals(-1, bounded.read(), "limit > length end");
assertEquals(hello[i], bounded.read(), "limit < length byte[" + i + "]");
assertEquals(-1, bounded.read(), "limit < length end");
assertTrue(stream.isCauseOf(e));
assertEquals(exception, e2);
assertTrue(stream.isCauseOf(e));
assertEquals(exception, e2);
assertTrue(stream.isCauseOf(e));
assertEquals(exception, e2);
assertEquals(0, stream.available());
assertEquals(-1, stream.read());
assertEquals(-1, stream.read(new byte[1]));
assertEquals(-1, stream.read(new byte[1], 0, 1));
assertEquals(3, stream.available());
assertEquals('a', stream.read());
assertEquals(1, stream.read(buffer));
assertEquals('b', buffer[0]);
assertEquals(1, stream.read(buffer, 0, 1));
assertEquals('c', buffer[0]);
assertEquals(-1, stream.read());
assertFalse(stream.isCauseOf(exception));
assertFalse(stream.isCauseOf(new TaggedIOException(exception, UUID.randomUUID())));
assertTrue(available >= min, "avail should be >= " + min + ", but was " + available);
assertEquals(available - 1, r.skip(available - 1)); // skip all but one
assertEquals(available, r.read(buff, 0, available));
assertEquals(available - 1, r.skip(available - 1)); // skip all but one
assertEquals(1, r.skip(1));
assertEquals(expected.length, offset, "EOF: offset should equal length for charset " + charsetName);
assertTrue(read <= bufferLength, "Read " + read + " <= " + bufferLength);
assertTrue(offset < expected.length,"offset for " + charsetName + " " + offset + " < " + expected.length);
assertEquals(expected[offset], buffer[bufferOffset], "bytes should agree for " + charsetName);
assertNotEquals(-1, ch);
assertEquals(dataSize, readCount1);
assertEquals(dataSize, readCount2);
assertArrayEquals(data1, data2, "bufferSize=" + bufferSize + " dataSize=" + dataSize);
assertEquals(2, r.skip(2));
assertEquals('s', r.read(), csName);
assertEquals('t', r.read(), csName);
assertEquals(-1, r.read(), csName);
assertEquals('s', r.read(), csName);
assertEquals('t', r.read(), csName);
assertEquals(-1, r.read(), csName);
assertTrue(r.markSupported());
assertEquals(Charset.defaultCharset(), in.getCharsetEncoder().charset());
assertEquals(Charset.defaultCharset(), in.getCharsetEncoder().charset());
assertEquals(0, r.read(bytes, 0, 0));
assertEquals(0, r.read(bytes, 0, 0));
assertTrue(read >= 0, "read " + read + " >=0 ");
assertTrue(read <= 255, "read " + read + " <= 255");
assertEquals(b, (byte) read, "Should agree with input");
assertEquals(-1, in.read());
assertEquals(1, r.skip(1));
assertEquals(2, r.skip(2));
assertEquals('t', r.read(), csName);
assertEquals(-1, r.read(), csName);
assertEquals("01", IOUtils.toString(input, Charset.defaultCharset()));
assertEquals("01", IOUtils.toString(input, Charset.defaultCharset()));
assertArrayEquals(expect, messageDigestInputStream.getMessageDigest().digest());
//Assert.assertTrue(goodW.closed);
assertEquals('a', tee.read());
assertEquals('b', tee.read());
assertEquals('b', tee.read());
assertEquals('c', tee.read());
assertEquals(-1, tee.read());
assertEquals("abbc", output.toString());
assertEquals('a', tee.read());
assertEquals('b', tee.read());
assertEquals('c', tee.read());
assertEquals(-1, tee.read());
assertEquals("abc", output.toString());
assertEquals("", output.toString());
assertEquals('a', tee.read());
assertEquals("a", output.toString());
assertEquals(3, tee.read(buffer));
assertEquals('a', buffer[0]);
assertEquals('b', buffer[1]);
assertEquals('c', buffer[2]);
assertEquals(-1, tee.read(buffer));
assertEquals("abc", output.toString());
assertEquals(3, tee.read(buffer, 4, 4));
assertEquals('a', buffer[4]);
assertEquals('b', buffer[5]);
assertEquals('c', buffer[6]);
assertEquals(-1, tee.read(buffer, 4, 4));
assertEquals("abc", output.toString());
assertEquals(3, tee.read(buffer));
assertEquals(4, buffer.position());
assertEquals('a', buffer.charAt(0));
assertEquals('b', buffer.charAt(1));
assertEquals('c', buffer.charAt(2));
assertEquals(-1, tee.read(buffer));
assertEquals("abc", output.toString());
assertEquals('a', tee.read());
assertEquals(1, tee.skip(1));
assertEquals('c', tee.read());
assertEquals(-1, tee.read());
assertEquals("ac", output.toString());
private void assertStreamOutput(final byte[] toCycle, final byte[] expected) throws IOException {final byte[] actual = new byte[expected.length];
assertArrayEquals(expected, actual);
assertEquals(expected.length, actualReadBytes);
assertThrows(IllegalArgumentException.class, () -> createInputStream(new byte[] { -1 }, 0));
assertEquals(IOUtils.EOF, in.read());
assertThrows(IllegalArgumentException.class, () -> createInputStream(new byte[] {}, 0));
assertEquals(IOUtils.EOF, in.read());
assertEquals(1, in.read());
assertEquals(IOUtils.EOF, in.read());
assertStreamOutput(input, expected);
assertThrows(NullPointerException.class, () -> createInputStream(null, 0));
assertStreamOutput(contentToCycle, expectedOutput);
assertEquals(lineFromBufferedReader, line);
assertEquals(0, lineStack.size(), "Stack should be empty");
assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.close()).getCause());
assertEquals(c, ucStringReader.read());
assertThrows(UncheckedIOException.class, () -> closedReader.mark(1));
assertEquals('0', uncheckedReader.read());
assertEquals('1', uncheckedReader.read());
assertEquals(IOUtils.EOF, uncheckedReader.read());
assertEquals(IOUtils.EOF, uncheckedReader.read());
assertEquals(1, uncheckedReader.read(array));
assertEquals('0', array[0]);
assertEquals(1, uncheckedReader.read(array));
assertEquals('1', array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array));
assertEquals(0, array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array));
assertEquals(0, array[0]);
assertEquals(1, uncheckedReader.read(array, 0, 1));
assertEquals('0', array[0]);
assertEquals(1, uncheckedReader.read(array, 0, 1));
assertEquals('1', array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array, 0, 1));
assertEquals(0, array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array, 0, 1));
assertEquals(0, array[0]);
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read(new char[1], 0, 1)).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read(new char[1])).getCause());
assertEquals(1, uncheckedReader.read(buffer));
assertEquals('0', buffer.charAt(0));
assertEquals(1, uncheckedReader.read(buffer));
assertEquals('1', buffer.charAt(0));
assertEquals(IOUtils.EOF, uncheckedReader.read(buffer));
assertEquals(0, buffer.length());
assertEquals(0, uncheckedReader.read(buffer));
assertEquals(0, buffer.length());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read(CharBuffer.wrap(new char[1]))).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read()).getCause());
assertTrue(ucStringReader.ready());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.ready()).getCause());
assertThrows(UncheckedIOException.class, () -> ucBrokenReader.reset());
assertEquals(1, ucStringReader.skip(1));
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.skip(1)).getCause());
assertEquals(exception, assertThrows(IOException.class, () -> stream.available()));
assertEquals(exception, assertThrows(IOException.class, () -> stream.close()));
assertEquals(exception, assertThrows(IOException.class, () -> stream.read()));
assertEquals(exception, assertThrows(IOException.class, () -> stream.read(new byte[1])));
assertEquals(exception, assertThrows(IOException.class, () -> stream.read(new byte[1], 0, 1)));
assertEquals(exception, assertThrows(IOException.class, () -> stream.reset()));
assertEquals(exception, assertThrows(IOException.class, () -> stream.skip(1)));
final IOException thrown = assertThrows(IOException.class, () -> {try (InputStream newStream = new BrokenInputStream()) {newStream.read();
assertEquals("Broken input stream", thrown.getMessage());
assertEquals(1, suppressed.length);
assertEquals(IOException.class, suppressed[0].getClass());
assertEquals("Broken input stream", suppressed[0].getMessage());
assertEquals(-1, cr.read(new char[10], 0, 10), "read(cbuf, off, len)");
assertEquals(DATA_FILE_LEN, inputStream.available());
assertEquals(DATA_FILE_LEN, inputStream.availableLong());
assertFalse(inputStream.isCloseOnClose());
assertTrue(inputStream.isCloseOnClose());
assertThrows(IOException.class, file::read);
assertFalse(inputStream.isCloseOnClose());
assertThrows(NullPointerException.class, () -> new RandomAccessFileInputStream(null));
assertEquals(file, inputStream.getRandomAccessFile());
assertTrue(inputStream.isCloseOnClose());
assertEquals('A', inputStream.read());
assertEquals(' ', inputStream.read());
assertEquals('T', inputStream.read());
assertEquals('e', inputStream.read());
assertEquals('s', inputStream.read());
assertEquals('t', inputStream.read());
assertEquals(' ', inputStream.read());
assertEquals('L', inputStream.read());
assertEquals('i', inputStream.read());
assertEquals('n', inputStream.read());
assertEquals('e', inputStream.read());
assertEquals('.', inputStream.read());
assertEquals(DATA_FILE_LEN - 12, inputStream.available());
assertEquals(DATA_FILE_LEN - 12, inputStream.availableLong());
assertEquals(dataLen, inputStream.read(buffer));
assertArrayEquals("A Test Line.".getBytes(StandardCharsets.ISO_8859_1), buffer);
assertEquals(DATA_FILE_LEN - dataLen, inputStream.available());
assertEquals(DATA_FILE_LEN - dataLen, inputStream.availableLong());
assertEquals(dataLen, inputStream.read(buffer, 0, dataLen));
assertArrayEquals("A Test Line.".getBytes(StandardCharsets.ISO_8859_1), buffer);
assertEquals(DATA_FILE_LEN - dataLen, inputStream.available());
assertEquals(DATA_FILE_LEN - dataLen, inputStream.availableLong());
assertEquals(0, inputStream.skip(-1));
assertEquals(0, inputStream.skip(Integer.MIN_VALUE));
assertEquals(0, inputStream.skip(0));
assertEquals('A', inputStream.read());
assertEquals(1, inputStream.skip(1));
assertEquals('T', inputStream.read());
assertEquals(1, inputStream.skip(1));
assertEquals('s', inputStream.read());
assertEquals(1, inputStream.skip(1));
assertEquals(' ', inputStream.read());
assertEquals(1, inputStream.skip(1));
assertEquals('i', inputStream.read());
assertEquals(1, inputStream.skip(1));
assertEquals('e', inputStream.read());
assertEquals(1, inputStream.skip(1));
assertEquals(DATA_FILE_LEN - 12, inputStream.available());
assertEquals(DATA_FILE_LEN - 12, inputStream.availableLong());
assertEquals(10, inputStream.skip(10));
assertEquals(DATA_FILE_LEN - 22, inputStream.availableLong());
assertEquals(avail, inputStream.skip(inputStream.availableLong()));
assertEquals(DATA_FILE_LEN, file.length());
assertEquals(DATA_FILE_LEN, file.getFilePointer());
assertEquals(0, inputStream.skip(1));
assertEquals(0, inputStream.skip(1000000000000L));
assertTrue(ByteBufferCleaner.isSupported(), "ByteBufferCleaner does not work on this platform, please investigate and fix");
assertEquals(-1, shielded.read(cbuf, 0, 10), "read(cbuf, off, len)");
assertEquals(data.length(), original.read(cbuf, 0, 10), "read(cbuf, off, len)");
assertEquals(data, new String(cbuf, 0, data.length()));
assertEquals(found, cis.getCount());
assertEquals(found, cis.getCount());
assertEquals(found, cis.getCount());
assertEquals(found, cis.getCount());
assertEquals(textResult, text);
assertEquals(0, found);
assertEquals(1, cis.getCount());
assertEquals(0, found);
assertEquals(2, cis.getCount());
assertEquals(-1, found);
assertEquals(2, cis.getCount());
assertEquals(2, found);
assertEquals(2, cis.getCount());
assertEquals(2, found);
assertEquals(2, cis.getCount());
assertThrows(ArithmeticException.class, () -> cis.getCount());
assertThrows(ArithmeticException.class, () -> cis.resetCount());
assertEquals(size, cis.getByteCount(), "getByteCount()");
assertEquals(size, cis.resetByteCount(), "resetByteCount()");
assertEquals(found, cis.getCount());
assertEquals(found, count);
assertEquals(6, cis.skip(6));
assertEquals(6, cis.getCount());
assertEquals("World!", new String(result));
assertEquals(12, cis.getCount());
assertEquals(-1, found);
assertEquals(0, cis.getCount());
assertEquals(-1, found);
assertEquals(0, cis.getCount());
assertEquals(-1, found);
assertEquals(0, cis.getCount());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals(-1, reader.read());
assertEquals('b', reader.read());
assertEquals(-1, reader.read());
assertEquals('a', reader.read());
assertEquals(-1, reader.read());
assertTimeoutPreemptively(Duration.ofMillis(500), () -> {try (StringBuilderWriter output = new StringBuilderWriter();
assertEquals(STRING_FIXTURE, output.toString());
assertEquals(6, charCount);
assertEquals("aacacd", new String(buff, 0, charCount));
assertEquals("aacacd", output.toString());
assertEquals(exception, assertThrows(IOException.class, () -> brokenReader.close()));
assertNotNull(BrokenReader.INSTANCE);
assertEquals(exception, assertThrows(IOException.class, () -> brokenReader.mark(1)));
assertEquals(exception, assertThrows(IOException.class, () -> brokenReader.read()));
assertEquals(exception, assertThrows(IOException.class, () -> brokenReader.read(new char[1])));
assertEquals(exception, assertThrows(IOException.class, () -> brokenReader.read(new char[1], 0, 1)));
assertEquals(exception, assertThrows(IOException.class, () -> brokenReader.ready()));
assertEquals(exception, assertThrows(IOException.class, () -> brokenReader.reset()));
assertEquals(exception, assertThrows(IOException.class, () -> brokenReader.skip(1)));
final IOException thrown = assertThrows(IOException.class, () -> {try (Reader newReader = new BrokenReader()) {newReader.read();
assertEquals("Broken reader", thrown.getMessage());
assertEquals(1, suppressed.length);
assertEquals(IOException.class, suppressed[0].getClass());
assertEquals("Broken reader", suppressed[0].getMessage());
assertThrows(UncheckedIOException.class, () -> brokenInputStream.read());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenInputStream.close()).getCause());
assertEquals(c, stringInputStream.read());
assertEquals('0', uncheckedReader.read());
assertEquals('1', uncheckedReader.read());
assertEquals(IOUtils.EOF, uncheckedReader.read());
assertEquals(IOUtils.EOF, uncheckedReader.read());
assertEquals(1, uncheckedReader.read(array));
assertEquals('0', array[0]);
assertEquals(1, uncheckedReader.read(array));
assertEquals('1', array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array));
assertEquals(0, array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array));
assertEquals(0, array[0]);
assertEquals(1, uncheckedReader.read(array, 0, 1));
assertEquals('0', array[0]);
assertEquals(1, uncheckedReader.read(array, 0, 1));
assertEquals('1', array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array, 0, 1));
assertEquals(0, array[0]);
assertEquals(IOUtils.EOF, uncheckedReader.read(array, 0, 1));
assertEquals(0, array[0]);
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenInputStream.read(new byte[1], 0, 1)).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenInputStream.read(new byte[1])).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenInputStream.read()).getCause());
assertThrows(UncheckedIOException.class, () -> brokenInputStream.reset());
assertEquals(1, stringInputStream.skip(1));
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenInputStream.skip(1)).getCause());
assertArrayEquals(expectedData, IOUtils.toByteArray(inputStream));
assertArrayEquals(EMPTY_BYTE_ARRAY, IOUtils.toByteArray(inputStream));
assertArrayEquals(expectedData, IOUtils.toByteArray(inputStream));
Assertions.assertThrows(IOException.class, () -> IOUtils.toByteArray(inputStream));
assertEquals(-1, inputStream.read());
assertArrayEquals(expectedData, new byte[] {(byte) b1, (byte) b2});
assertEquals(1, inputStream.skip(1));
assertArrayEquals(Arrays.copyOfRange(expectedData, 1, expectedData.length), data);
assertEquals(0, inputStream.skip(5));
assertArrayEquals(EMPTY_BYTE_ARRAY, IOUtils.toByteArray(inputStream));
assertEquals(3, inputStream.skip(3));
assertArrayEquals(Arrays.copyOfRange(expectedData, 8, expectedData.length), data);
assertEquals(0, inputStream.skip(amountToSkip));
assertArrayEquals(expectedData, IOUtils.toByteArray(inputStream));
assertEquals(6, inputStream.skip(6));
assertArrayEquals(Arrays.copyOfRange(expectedData, 11, expectedData.length), data);
assertEquals(95, inputStream.skip(96));
assertArrayEquals(EMPTY_BYTE_ARRAY, IOUtils.toByteArray(inputStream));
assertEquals(5, inputStream.skip(5));
assertArrayEquals(Arrays.copyOfRange(expectedData, 10, expectedData.length), data);
assertArrayEquals(expectedData, IOUtils.toByteArray(inputStream));
static void assertEqualsAndNoLineBreaks(final String expected, final String actual) {assertEqualsAndNoLineBreaks(null, expected, actual);
static void assertEqualsAndNoLineBreaks(final String msg, final String expected, final String actual) {if (actual != null) {assertFalse(actual.contains(LF.getString()), "Line contains \\n: line=" + actual);
assertFalse(actual.contains(CR.getString()), "Line contains \\r: line=" + actual);
assertEquals(expected, actual, msg);
private void assertFileWithShrinkingTestLines(final ReversedLinesFileReader reversedLinesFileReader) throws IOException {String line = null;
assertEqualsAndNoLineBreaks("Line " + lineCount + " is not matching", TEST_LINE.substring(0, lineCount), line);
assertNull(reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks("987654321", reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks("123456789", reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks(TEST_LINE_GBK_2, reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks(TEST_LINE_GBK_1, reversedLinesFileReader.readLine());
assertFileWithShrinkingTestLines(reversedLinesFileReader);
assertEqualsAndNoLineBreaks("", reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks("" + i, reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks(TEST_LINE_SHIFT_JIS2, reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks(TEST_LINE_SHIFT_JIS1, reversedLinesFileReader.readLine());
assertThrows(UnsupportedEncodingException.class,() -> new ReversedLinesFileReader(testFileEncodingBig5, testParamBlockSize, "Big5").close());
assertThrows(UnsupportedEncodingException.class,() -> new ReversedLinesFileReader(testFileEmpty, testParamBlockSize, StandardCharsets.UTF_16.name()).close());
assertFileWithShrinkingTestLines(reversedLinesFileReader);
assertFileWithShrinkingTestLines(reversedLinesFileReader);
assertFileWithShrinkingTestLines(reversedLinesFileReader);
assertFileWithShrinkingTestLines(reversedLinesFileReader);
assertFileWithShrinkingTestLines(reversedLinesFileReader);
assertFileWithShrinkingTestLines(reversedLinesFileReader);
assertEqualsAndNoLineBreaks(TEST_LINE_WINDOWS_31J_2, reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks(TEST_LINE_WINDOWS_31J_1, reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks(TEST_LINE_X_WINDOWS_949_2, reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks(TEST_LINE_X_WINDOWS_949_1, reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks(TEST_LINE_X_WINDOWS_950_2, reversedLinesFileReader.readLine());
assertEqualsAndNoLineBreaks(TEST_LINE_X_WINDOWS_950_1, reversedLinesFileReader.readLine());
assertEquals(buffer[i] & 0xFF, b, "byte at index " + i + " should be equal");
assertEquals(buffer.length, i, "Should have read all the bytes");
assertTrue(true, "Test finished OK");
assertFalse(closed, "closed");
assertEquals(-1, shielded.read(), "read()");
assertEquals(data[0], original.read(), "read()");
assertEquals("\r", CR.getString());
assertArrayEquals("\r".getBytes(StandardCharsets.ISO_8859_1), CR.getBytes(StandardCharsets.ISO_8859_1));
assertEquals("\r\n", CRLF.getString());
assertArrayEquals("\r\n".getBytes(StandardCharsets.ISO_8859_1), CRLF.getBytes(StandardCharsets.ISO_8859_1));
assertEquals("\n", LF.getString());
assertArrayEquals("\n".getBytes(StandardCharsets.ISO_8859_1), LF.getBytes(StandardCharsets.ISO_8859_1));
assertThrows(NullPointerException.class, () -> FileUtils.deleteDirectory(null));
assertTrue(realOuter.mkdirs());
assertTrue(realInner.mkdirs());
assertEquals(1, realInner.list().length);
assertTrue(randomDirectory.mkdirs());
assertEquals(1, randomDirectory.list().length);
assertTrue(setupSymlink(randomDirectory, symlinkDirectory));
assertEquals(1, symlinkDirectory.list().length);
// assert contents of the real directory were removed including the symlinkFileUtils.deleteDirectory(realOuter);
assertEquals(1, top.list().length);
assertEquals(1, randomDirectory.list().length, "Contents of sym link should not have been removed");
assertTrue(realOuter.mkdirs());
assertTrue(realInner.mkdirs());
assertEquals(1, realInner.list().length);
assertTrue(randomDirectory.mkdirs());
assertEquals(1, randomDirectory.list().length);
assertEquals(1, symlinkDirectory.list().length);
// assert contents of the real directory were removed including the symlinkFileUtils.deleteDirectory(realOuter);
assertEquals(1, top.list().length);
assertEquals(1, randomDirectory.list().length, "Contents of sym link should not have been removed");
assertTrue(realOuter.mkdirs());
assertTrue(realInner.mkdirs());
assertEquals(1, realInner.list().length);
assertTrue(setupSymlink(randomFile, symlinkFile));
assertEquals(2, realInner.list().length);
assertEquals(2, top.list().length);
// assert the real directory were removed including the symlinkFileUtils.deleteDirectory(realOuter);
assertEquals(1, top.list().length);
assertTrue(randomFile.exists());
assertFalse(symlinkFile.exists());
assertTrue(aFile.mkdir());
assertTrue(bFile.mkdir());
assertTrue(cFile.mkdir());
assertTrue(dFile.mkdir());
assertEquals(0, top.list().length);
assertTrue(realParent.mkdirs());
assertTrue(realInner.mkdirs());
assertEquals(1, realInner.list().length);
assertTrue(randomDirectory.mkdirs());
assertEquals(1, randomDirectory.list().length);
assertTrue(setupSymlink(randomDirectory, symlinkDirectory));
assertEquals(1, symlinkDirectory.list().length);
assertTrue(setupSymlink(realParent, symlinkParentDirectory));
// assert only the symlink is deleted, but not followedFileUtils.deleteDirectory(symlinkParentDirectory);
assertEquals(2, top.list().length);
assertEquals(1, randomDirectory.list().length, "Contents of sym link should not have been removed");
assertTrue(realParent.mkdirs());
assertTrue(realInner.mkdirs());
assertEquals(1, realInner.list().length);
assertTrue(randomDirectory.mkdirs());
assertEquals(1, randomDirectory.list().length);
assertEquals(1, symlinkDirectory.list().length);
// assert only the symlink is deleted, but not followedFileUtils.deleteDirectory(symlinkParentDirectory);
assertEquals(2, top.list().length);
assertEquals(1, randomDirectory.list().length, "Contents of sym link should not have been removed");
assertTrue(nested.mkdirs());
assertEquals(1, top.list().length);
assertEquals(2, nested.list().length);
assertEquals(0, top.list().length);
assertTrue(nested.mkdirs());
assertEquals(1, top.list().length);
assertEquals(0, nested.list().length);
assertEquals(0, top.list().length);
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(0, baout.size(), "Sizes differ");
assertThrows(NullPointerException.class, () -> IOUtils.write(inData, (OutputStream) null));
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertArrayEquals(inData, bytes, "Content differs");
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertThrows(NullPointerException.class, () -> IOUtils.write(inData, null, "UTF8"));
assertEquals(0, baout.size(), "Sizes differ");
assertThrows(NullPointerException.class, () -> IOUtils.write(inData, (Writer) null));
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertArrayEquals(inData, bytes, "Content differs");
assertEquals(0, baout.size(), "Sizes differ");
assertThrows(NullPointerException.class, () -> IOUtils.write(str.toCharArray(), (OutputStream) null));
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertThrows(NullPointerException.class, () -> IOUtils.write(str.toCharArray(), (OutputStream) null));
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(0, baout.size(), "Sizes differ");
assertThrows(NullPointerException.class, () -> IOUtils.write(str.toCharArray(), (Writer) null));
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertArrayEquals(inData, bytes, "Content differs");
assertEquals(0, baout.size(), "Sizes differ");
assertThrows(NullPointerException.class, () -> IOUtils.write(csq, (OutputStream) null));
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertThrows(NullPointerException.class, () -> IOUtils.write(csq, (OutputStream) null));
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(0, baout.size(), "Sizes differ");
assertThrows(NullPointerException.class, () -> IOUtils.write(csq, (Writer) null));
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertArrayEquals(inData, bytes, "Content differs");
assertEquals(0, baout.size(), "Sizes differ");
assertThrows(NullPointerException.class, () -> IOUtils.write(str, (OutputStream) null));
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertThrows(NullPointerException.class, () -> IOUtils.write(str, (OutputStream) null));
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(0, baout.size(), "Sizes differ");
assertThrows(NullPointerException.class, () -> IOUtils.write(str, (Writer) null));
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(expected, actual);
assertEquals(expected, actual);
assertThrows(NullPointerException.class, () -> IOUtils.writeLines(list, "*", null, "US-ASCII"));
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(expected, actual);
assertThrows(NullPointerException.class, () -> IOUtils.writeLines(list, "*", (OutputStream) null));
assertEquals(expected, actual);
assertEquals(0, baout.size(), "Sizes differ");
assertEquals(expected, actual);
assertThrows(NullPointerException.class, () -> IOUtils.writeLines(list, "*", (Writer) null));
assertTrue(ca.matches("org.foo"));
assertFalse(ca.matches("org.foo.and.more"));
assertFalse(ca.matches("org_foo"));
assertTrue(ca.matches("org.foo.should.match"));
assertFalse(ca.matches("bar.should.not.match"));
assertTrue(ca.matches("org.apache_something.more"));
assertFalse(ca.matches("org..apache_something.more"));
private void assertSerialization(final ObjectInputStream ois) throws ClassNotFoundException, IOException {final MoreComplexObject copy = (MoreComplexObject) ois.readObject();
assertEquals(original.toString(), copy.toString(), "Expecting same data after deserializing");
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(inputStream).accept(MoreComplexObject.class).accept("java.*","[Ljava.*")));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(inputStream).accept(MoreComplexObject.class, ArrayList.class, Random.class).accept("java.lang.*","[Ljava.lang.*")));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(inputStream).accept("*").reject(blacklist)));
assertFalse(m.matches(Integer.class.getName()));
assertTrue(m.matches(Integer.class.getName()));
assertFalse(m.matches(String.class.getName()));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(ALWAYS_TRUE));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(Pattern.compile(".*MockSerializedClass.*")));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept("org.apache.commons.io.*"));
private void assertSerialization(final ObjectInputStream ois) throws ClassNotFoundException, IOException {final MockSerializedClass result = (MockSerializedClass) ois.readObject();
assertEquals(testObject, result);
assertThrows(RuntimeException.class,() -> assertSerialization(closeAfterEachTest(new CustomVOIS(testStream)).reject(Integer.class)));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)));
assertTrue(ice.getMessage().contains(name), "Expecting message to contain " + name);
assertThrows(InvalidClassException.class, () -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream))));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class, Integer.class));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept("*MockSerializedClass","*Integer"));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(Integer.class, MockSerializedClass.class));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept("*Integer","*MockSerializedClass"));
assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(Integer.class)));
assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class));
assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(Long.class).reject(MockSerializedClass.class, Integer.class)));
assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class).reject(ALWAYS_TRUE)));
assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).reject(Integer.class)));
assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class).reject(Pattern.compile("org.*"))));
assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class).reject(MockSerializedClass.class, Integer.class)));
assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class).reject("org.*")));
assertThrows(NullPointerException.class, () -> new RegexpClassNameMatcher((Pattern) null));
assertThrows(NullPointerException.class, () -> new RegexpClassNameMatcher((String) null));
assertTrue(ca.matches("foo.should.match"));
assertTrue(ca.matches("bar.should.match"));
assertFalse(ca.matches("zoo.should.not.match"));
assertTrue(ca.matches("foo.should.match"));
assertFalse(ca.matches("bar.should.not.match"));
assertTrue(ca.matches("foo.should.match"));
assertFalse(ca.matches("bar.should.not.match"));
assertEquals(cmd, params[params.length - 1]);
assertNotNull(line, "Unexpected null line");
assertEquals(free, kb, acceptableDelta);
assertEquals(free / 2d, kb, acceptableDelta);
assertEquals((double) bytes / 1024, kb, acceptableDelta);
assertThrows(IllegalStateException.class, () -> fsu.freeSpaceOS("", -1, false, NEG_1_TIMEOUT));
assertThrows(IllegalStateException.class, () -> fsu.freeSpaceOS("", -1, true, NEG_1_TIMEOUT));
assertThrows(NullPointerException.class, () -> fsu.freeSpaceOS(null, 1, false, NEG_1_TIMEOUT));
assertThrows(NullPointerException.class, () -> fsu.freeSpaceOS(null, 1, true, NEG_1_TIMEOUT));
assertThrows(IllegalStateException.class, () -> fsu.freeSpaceOS("", 0, false, NEG_1_TIMEOUT));
assertThrows(NullPointerException.class, () -> fsu.freeSpaceOS(null, 1, true, NEG_1_TIMEOUT));
assertThrows(IllegalStateException.class, () -> fsu.freeSpaceOS("", 0, true, NEG_1_TIMEOUT));
assertEquals(54321L, fsu.freeSpaceOS("", 2, false, NEG_1_TIMEOUT));
assertEquals(12345L, fsu.freeSpaceOS("", 2, true, NEG_1_TIMEOUT));
assertEquals(12345L, fsu.freeSpaceOS("", 1, false, NEG_1_TIMEOUT));
assertEquals(12345L / 1024, fsu.freeSpaceOS("", 1, true, NEG_1_TIMEOUT));
assertThrows(IllegalArgumentException.class, () -> fsu.freeSpaceUnix("", false, false, NEG_1_TIMEOUT));
assertThrows(IllegalArgumentException.class, () -> fsu.freeSpaceUnix("", true, false, NEG_1_TIMEOUT));
assertThrows(IllegalArgumentException.class, () -> fsu.freeSpaceUnix("", true, true, NEG_1_TIMEOUT));
assertThrows(IllegalArgumentException.class, () -> fsu.freeSpaceUnix("", false, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, true, NEG_1_TIMEOUT));
assertEquals(1472504L, fsu.freeSpaceUnix("/home/users/s", false, false, NEG_1_TIMEOUT));
assertEquals(1472504L, fsu.freeSpaceUnix("/home/users/s", true, false, NEG_1_TIMEOUT));
assertEquals(15770L, fsu.freeSpaceUnix("/", false, false, NEG_1_TIMEOUT));
assertEquals(15770L, fsu.freeSpaceUnix("/", true, false, NEG_1_TIMEOUT));
assertEquals(189416L, fsu.freeSpaceUnix("/", true, false, NEG_1_TIMEOUT));
assertEquals(481163L, fsu.freeSpaceUnix("/dev/dsk/x0x0x0x0", true, false, NEG_1_TIMEOUT));
assertEquals(189416L, fsu.freeSpaceUnix("/", false, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceWindows("C:", NEG_1_TIMEOUT));
assertEquals(41411551232L, fsu.freeSpaceWindows("", NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceWindows("C:", NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceWindows("C:", NEG_1_TIMEOUT));
assertEquals(41411551232L, fsu.freeSpaceWindows("C:", NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceWindows("C:", NEG_1_TIMEOUT));
assertEquals(41411551232L, fsu.freeSpaceWindows("", NEG_1_TIMEOUT));
assertEquals(141411551232L, fsu.freeSpaceWindows("", NEG_1_TIMEOUT));
assertEquals(1232L, fsu.freeSpaceWindows("", NEG_1_TIMEOUT));
assertEquals(41411551232L, fsu.freeSpaceWindows("\"C:\\somedir\"", NEG_1_TIMEOUT));
assertEquals(41411551232L, fsu.freeSpaceWindows("C:\\somedir", NEG_1_TIMEOUT));
assertEquals(cause, sqlExceptionList.getCause());
assertEquals(cause, sqlExceptionList.getCause(0));
assertEquals(list, sqlExceptionList.getCauseList());
assertEquals(list, sqlExceptionList.getCauseList(EOFException.class));
assertEquals(cause, sqlExceptionList.getCause(0, EOFException.class));
assertEquals(list, causeList);
assertThrows(IOExceptionList.class, () -> IOExceptionList.checkEmpty(Collections.singletonList(new Exception()), ""));
assertThrows(IOExceptionList.class, () -> IOExceptionList.checkEmpty(Collections.singletonList(new Exception()), null));
assertEquals("Hello", sqlExceptionList.getMessage());
assertEquals(cause, sqlExceptionList.getCause());
assertEquals(cause, sqlExceptionList.getCause(0));
assertEquals(list, sqlExceptionList.getCauseList());
assertEquals(list, sqlExceptionList.getCauseList(EOFException.class));
assertEquals(cause, sqlExceptionList.getCause(0, EOFException.class));
assertEquals(list, causeList);
assertNull(sqlExceptionList.getCause());
assertTrue(sqlExceptionList.getCauseList().isEmpty());
assertNotNull(new IOExceptionList(null, Collections.emptyList()).getMessage());
assertNotNull(new IOExceptionList(null, null).getMessage());
assertEquals("A", new IOExceptionList("A", Collections.emptyList()).getMessage());
assertEquals("A", new IOExceptionList("A", null).getMessage());
assertTrue(st.startsWith("org.apache.commons.io.IOExceptionList: 1 exception(s): [java.io.EOFException]"));
assertTrue(st.contains("Caused by: java.io.EOFException"));
private void assertContentMatchesAfterCopyURLToFileFor(final String resourceName, final File destination) throws IOException {FileUtils.copyURLToFile(getClass().getResource(resourceName), destination);
assertTrue(IOUtils.contentEquals(expected, fis), "Content is not equal.");
assertTrue(setLastModifiedMillis(testFile, lastModified1 - mins10));
assertNotEquals(getLastModifiedMillis(testFile), lastModified1, "Should have changed source date");
assertTrue(file.exists());
assertTrue(file.exists());
assertFalse(Files.exists(linkPath));
assertTrue(Files.exists(targetPath));
assertTrue(Files.isSymbolicLink(linkPath), () -> "Expected a sym link here: " + linkName);
assertTrue(expectedFilesAndDirs.contains(file),() -> "Unexpected directory/file " + file + ", expected one of " + expectedFilesAndDirs);
assertEquals(expectedFilesAndDirs.size(), filesCount, actualFiles::toString);
assertNull(file.getParentFile());
assertTrue(file.exists());
assertEquals('H', in.read());
assertThrows(IOException.class, () -> FileUtils.openInputStream(directory));
assertThrows(IOException.class, () -> FileUtils.openInputStream(directory));
assertTrue(file.exists());
assertThrows(IllegalArgumentException.class, () -> FileUtils.openOutputStream(directory));
assertTrue(file.exists());
assertTrue(file.exists());
assertThrows(IOException.class, () -> FileUtils.openOutputStream(file));
assertEquals("0 bytes", FileUtils.byteCountToDisplaySize(BigInteger.ZERO));
assertEquals("1 bytes", FileUtils.byteCountToDisplaySize(BigInteger.ONE));
assertEquals("1023 bytes", FileUtils.byteCountToDisplaySize(b1023));
assertEquals("1 KB", FileUtils.byteCountToDisplaySize(KB1));
assertEquals("1 KB", FileUtils.byteCountToDisplaySize(b1025));
assertEquals("1023 KB", FileUtils.byteCountToDisplaySize(MB1.subtract(BigInteger.ONE)));
assertEquals("1 MB", FileUtils.byteCountToDisplaySize(MB1));
assertEquals("1 MB", FileUtils.byteCountToDisplaySize(MB1.add(BigInteger.ONE)));
assertEquals("1023 MB", FileUtils.byteCountToDisplaySize(GB1.subtract(BigInteger.ONE)));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(GB1));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(GB1.add(BigInteger.ONE)));
assertEquals("2 GB", FileUtils.byteCountToDisplaySize(GB2));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(GB2.subtract(BigInteger.ONE)));
assertEquals("1 TB", FileUtils.byteCountToDisplaySize(TB1));
assertEquals("1 PB", FileUtils.byteCountToDisplaySize(PB1));
assertEquals("1 EB", FileUtils.byteCountToDisplaySize(EB1));
assertEquals("7 EB", FileUtils.byteCountToDisplaySize(Long.MAX_VALUE));
assertEquals("63 KB", FileUtils.byteCountToDisplaySize(BigInteger.valueOf(Character.MAX_VALUE)));
assertEquals("31 KB", FileUtils.byteCountToDisplaySize(BigInteger.valueOf(Short.MAX_VALUE)));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(BigInteger.valueOf(Integer.MAX_VALUE)));
assertEquals("0 bytes", FileUtils.byteCountToDisplaySize(0));
assertEquals("1 bytes", FileUtils.byteCountToDisplaySize(1));
assertEquals("1023 bytes", FileUtils.byteCountToDisplaySize(1023));
assertEquals("1 KB", FileUtils.byteCountToDisplaySize(1024));
assertEquals("1 KB", FileUtils.byteCountToDisplaySize(1025));
assertEquals("1023 KB", FileUtils.byteCountToDisplaySize(1024 * 1023));
assertEquals("1 MB", FileUtils.byteCountToDisplaySize(1024 * 1024));
assertEquals("1 MB", FileUtils.byteCountToDisplaySize(1024 * 1025));
assertEquals("1023 MB", FileUtils.byteCountToDisplaySize(1024 * 1024 * 1023));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(1024 * 1024 * 1024));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(1024 * 1024 * 1025));
assertEquals("2 GB", FileUtils.byteCountToDisplaySize(1024L * 1024 * 1024 * 2));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(1024 * 1024 * 1024 * 2 - 1));
assertEquals("1 TB", FileUtils.byteCountToDisplaySize(1024L * 1024 * 1024 * 1024));
assertEquals("1 PB", FileUtils.byteCountToDisplaySize(1024L * 1024 * 1024 * 1024 * 1024));
assertEquals("1 EB", FileUtils.byteCountToDisplaySize(1024L * 1024 * 1024 * 1024 * 1024 * 1024));
assertEquals("7 EB", FileUtils.byteCountToDisplaySize(Long.MAX_VALUE));
assertEquals("63 KB", FileUtils.byteCountToDisplaySize(Character.MAX_VALUE));
assertEquals("31 KB", FileUtils.byteCountToDisplaySize(Short.MAX_VALUE));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(Integer.MAX_VALUE));
assertEquals("0 bytes", FileUtils.byteCountToDisplaySize(Integer.valueOf(0)));
assertEquals("1 bytes", FileUtils.byteCountToDisplaySize(Integer.valueOf(1)));
assertEquals("1023 bytes", FileUtils.byteCountToDisplaySize(Integer.valueOf(1023)));
assertEquals("1 KB", FileUtils.byteCountToDisplaySize(Integer.valueOf(1024)));
assertEquals("1 KB", FileUtils.byteCountToDisplaySize(Integer.valueOf(1025)));
assertEquals("1023 KB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024 * 1023)));
assertEquals("1 MB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024 * 1024)));
assertEquals("1 MB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024 * 1025)));
assertEquals("1023 MB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024 * 1024 * 1023)));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024 * 1024 * 1024)));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024 * 1024 * 1025)));
assertEquals("2 GB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024L * 1024 * 1024 * 2)));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024 * 1024 * 1024 * 2 - 1)));
assertEquals("1 TB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024L * 1024 * 1024 * 1024)));
assertEquals("1 PB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024L * 1024 * 1024 * 1024 * 1024)));
assertEquals("1 EB", FileUtils.byteCountToDisplaySize(Long.valueOf(1024L * 1024 * 1024 * 1024 * 1024 * 1024)));
assertEquals("7 EB", FileUtils.byteCountToDisplaySize(Long.valueOf(Long.MAX_VALUE)));
assertEquals("63 KB", FileUtils.byteCountToDisplaySize(Integer.valueOf(Character.MAX_VALUE)));
assertEquals("31 KB", FileUtils.byteCountToDisplaySize(Short.valueOf(Short.MAX_VALUE)));
assertEquals("1 GB", FileUtils.byteCountToDisplaySize(Integer.valueOf(Integer.MAX_VALUE)));
assertSame(testChecksum, resultChecksum);
assertEquals(expectedValue, resultValue);
assertEquals(expectedValue, resultValue);
assertEquals(expectedValue, resultValue);
assertThrows(IllegalArgumentException.class, () -> FileUtils.checksum(FileUtils.current(), new CRC32()));
assertThrows(NullPointerException.class, () -> FileUtils.checksum(file, null));
assertThrows(NullPointerException.class, () -> FileUtils.checksum(null, new CRC32()));
assertEquals(sizeLong1, sizeLong2, "Size should not change");
assertEquals(sizeLong1, sizeBig.longValue(), "longSize should equal BigSize");
assertTrue(FileUtils.contentEquals(null, null));
assertFalse(FileUtils.contentEquals(null, file));
assertFalse(FileUtils.contentEquals(file, null));
assertTrue(FileUtils.contentEquals(file, file));
assertTrue(FileUtils.contentEquals(file, file2));
assertTrue(FileUtils.contentEquals(file2, file2));
assertTrue(FileUtils.contentEquals(file2, file));
assertThrows(IllegalArgumentException.class, () -> FileUtils.contentEquals(tempDirFile, tempDirFile));
assertFalse(FileUtils.contentEquals(objFile1, objFile2));
assertFalse(FileUtils.contentEquals(objFile1b, objFile2));
assertTrue(FileUtils.contentEquals(objFile1, objFile1b));
assertTrue(FileUtils.contentEquals(objFile1, objFile1));
assertTrue(FileUtils.contentEquals(objFile1b, objFile1b));
assertTrue(FileUtils.contentEquals(objFile2, objFile2));
assertTrue(FileUtils.contentEquals(file, file));
assertTrue(FileUtils.contentEquals(file, file2));
assertTrue(FileUtils.contentEqualsIgnoreEOL(null, null, null));
assertFalse(FileUtils.contentEqualsIgnoreEOL(null, file1, null));
assertFalse(FileUtils.contentEqualsIgnoreEOL(file1, null, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(file2, file2, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(file2, file1, null));
assertThrows(IllegalArgumentException.class,() -> FileUtils.contentEqualsIgnoreEOL(tempDirFile, tempDirFile, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile1, tfile1, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile2, tfile2, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile3, tfile3, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(tfile1, tfile2, null));
assertFalse(FileUtils.contentEqualsIgnoreEOL(tfile1, tfile3, null));
assertFalse(FileUtils.contentEqualsIgnoreEOL(tfile2, tfile3, null));
assertNotNull(urlCR);
assertTrue(cr.exists());
assertNotNull(urlCRLF);
assertTrue(crlf.exists());
assertNotNull(urlLF);
assertTrue(lf.exists());
assertTrue(FileUtils.contentEqualsIgnoreEOL(cr, cr, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(crlf, crlf, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(lf, lf, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(cr, crlf, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(cr, lf, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(crlf, lf, null));
assertTrue(FileUtils.contentEquals(cr, cr));
assertTrue(FileUtils.contentEquals(crlf, crlf));
assertTrue(FileUtils.contentEquals(lf, lf));
assertFalse(FileUtils.contentEquals(cr, crlf));
assertFalse(FileUtils.contentEquals(cr, lf));
assertFalse(FileUtils.contentEquals(crlf, lf));
assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file1, null));
assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
assertThrows(NullPointerException.class, () -> FileUtils.copyDirectory(null, null));
assertThrows(NullPointerException.class, () -> FileUtils.copyDirectory(null, testFile1));
assertThrows(NullPointerException.class, () -> FileUtils.copyDirectory(testFile1, null));
assertThrows(NullPointerException.class, () -> FileUtils.copyDirectory(null, new File("a")));
assertThrows(IllegalArgumentException.class, () -> FileUtils.copyDirectory(testFile1, new File("a")));
assertThrows(IllegalArgumentException.class, () -> FileUtils.copyDirectory(testFile1, new File("a")));
assertThrows(IllegalArgumentException.class, () -> FileUtils.copyDirectory(tempDirFile, tempDirFile));
assertThrows(IOException.class, () -> FileUtils.copyDirectory(new File("doesnt-exist"), new File("a")));
assertThrows(IllegalArgumentException.class, () -> FileUtils.copyDirectory(tempDirFile, testFile1));
assertEquals(3, files.size());
assertEquals("parent", files.get(0).getName());
assertEquals("child", files.get(1).getName());
assertEquals("file3.txt", files.get(2).getName());
//        assertEquals(files.length, urls.length);
//        assertTrue(urls[0].toExternalForm().startsWith("file:"));
//        assertTrue(urls[0].toExternalForm().indexOf("file1.txt") > 0);
//        assertEquals(null, urls[1]);
//        assertEquals(0, urls.length);
assertTrue(setLastModifiedMillis(sourceFile, DATE3));
assertTrue(setLastModifiedMillis(sourceDirectory, DATE2));
assertTrue(setLastModifiedMillis(source, DATE1));
assertNotEquals(DATE1, getLastModifiedMillis(target));
assertNotEquals(DATE2, getLastModifiedMillis(targetDirectory));
assertNotEquals(DATE3, getLastModifiedMillis(targetFile));
assertEquals(DATE1, getLastModifiedMillis(target));
assertEquals(DATE2, getLastModifiedMillis(targetDirectory));
assertEquals(DATE3, getLastModifiedMillis(targetFile));
assertEquals(DATE1, getLastModifiedMillis(target));
assertEquals(DATE2, getLastModifiedMillis(targetDirectory));
assertEquals(DATE3, getLastModifiedMillis(targetFile));
assertEquals(DATE1, getLastModifiedMillis(target));
assertEquals(DATE2, getLastModifiedMillis(targetDirectory));
assertEquals(DATE3, getLastModifiedMillis(targetFile));
assertEquals(expectedCount, LIST_WALKER.list(grandParentDir).size());
assertEquals(expectedSize, FileUtils.sizeOfDirectory(grandParentDir));
assertTrue(expectedCount > 0, "Count > 0");
assertTrue(expectedSize > 0, "Size > 0");
assertTrue(destDir.exists(), "Check exists");
assertTrue(actualDestDir.exists(), "Check exists");
assertTrue(srcSize > 0, "Size > 0");
assertEquals(srcSize, FileUtils.sizeOfDirectory(actualDestDir), "Check size");
assertTrue(new File(actualDestDir, "sub/A.txt").exists());
assertTrue(srcSize > 0, "Size > 0");
assertEquals(srcSize, FileUtils.sizeOfDirectory(destDir));
assertTrue(new File(destDir, "sub/A.txt").exists());
assertEquals(expectedCount, LIST_WALKER.list(grandParentDir).size());
assertEquals(expectedSize, FileUtils.sizeOfDirectory(grandParentDir));
assertTrue(expectedSize > 0, "Size > 0");
assertEquals(1, LIST_WALKER.list(dir).size());
assertTrue(destDir.exists(), "Check exists");
assertTrue(sizeOfSrcDirectory > 0, "Size > 0");
assertEquals(sizeOfSrcDirectory, FileUtils.sizeOfDirectory(destDir), "Check size");
assertTrue(new File(destDir, "sub/A.txt").exists());
assertEquals(expectedCount, latestFiles.size());
assertEquals(expectedSize, FileUtils.sizeOfDirectory(grandParentDir));
assertTrue(expectedCount > 0, "Count > 0");
assertTrue(expectedSize > 0, "Size > 0");
assertEquals(parFiles.size(), newFilePaths.size());
assertTrue(destination.exists(), "Check Exist");
assertEquals(testFile1Size, destination.length(), "Check Full copy");
assertEquals(getLastModifiedMillis(testFile1), getLastModifiedMillis(destination), "Check last modified date preserved");
assertTrue(destination.exists(), "Check Exist");
assertEquals(testFile1Size, destination.length(), "Check Full copy");
assertEquals(FileUtils.lastModified(testFile1), FileUtils.lastModified(destination), "Check last modified date preserved");
assertThrows(IllegalArgumentException.class, () -> FileUtils.copyFileToDirectory(destination, directory),"Should not be able to copy a file into the same directory as itself");
assertTrue(destination.exists(), "Check Exist");
assertEquals(testFile2Size, destination.length(), "Check Full copy");
assertEquals(getLastModifiedMillis(testFile1) , getLastModifiedMillis(destination), "Check last modified date preserved");
assertTrue(destination.exists(), "Check Exist");
assertEquals(testFile2Size, destination.length(), "Check Full copy");
assertEquals(FileUtils.lastModified(testFile1), FileUtils.lastModified(destination), "Check last modified date preserved");
assertTrue(destFile.exists(), "Check Exist");
assertEquals(testFile1Size, destFile.length(), "Check Full copy");
assertNotEquals(unexpectedMillis, destLastModMillis,"Check last modified date not same as input, delta " + deltaMillis);
assertTrue(destLastModMillis > nowMillis,destLastModMillis + " > " + nowMillis + " (delta " + deltaMillis + ")");
assertTrue(destination.exists(), "Check Exist");
assertEquals(largeFile.length(), destination.length(), "Check Full copy");
assertEquals(testFile1Size, destination.size(), "Check Full copy size");
assertArrayEquals(expected, destination.toByteArray(), "Check Full copy");
assertTrue(outputDirDestination.exists(), "Check Exists");
assertTrue(outputDirDestination.isDirectory(), "Check Directory");
assertTrue(destFile1.exists(), "Check Exists");
assertEquals(testFile1Size, destFile1.length(), "Check Full Copy");
assertTrue(destFile2.exists(), "Check Exists");
assertEquals(testFile2Size, destFile2.length(), "Check Full Copy");
assertTrue(destination.exists(), "Check Exists");
assertEquals(testFile1Size, destination.length(), "Check Full Copy");
assertThrows(IOException.class,() -> FileUtils.copyToDirectory(new File(tempDirFile, "doesNotExists"), tempDirFile));
assertThrows(NullPointerException.class, () -> FileUtils.copyToDirectory((File) null, tempDirFile));
assertTrue(destFile1.exists(), "Check Exists");
assertEquals(testFile1Size, destFile1.length(), "Check Full Copy");
assertTrue(destFile2.exists(), "Check Exists");
assertEquals(testFile2Size, destFile2.length(), "Check Full Copy");
assertThrows(IOException.class,() -> FileUtils.copyToDirectory(Collections.singleton(new File(tempDirFile, "doesNotExists")),tempDirFile));
assertThrows(NullPointerException.class, () -> FileUtils.copyToDirectory((List<File>) null, tempDirFile));
assertThrows(IllegalArgumentException.class, () -> FileUtils.copyFile(destination, destination));
assertContentMatchesAfterCopyURLToFileFor("/java/lang/Object.class", file);
assertContentMatchesAfterCopyURLToFileFor("/java/lang/Object.class", file);
assertContentMatchesAfterCopyURLToFileFor("/java/lang/Object.class", file);
assertContentMatchesAfterCopyURLToFileFor("/java/lang/String.class", file);
assertTrue(IOUtils.contentEquals(resStream, fis), "Content is not equal.");
assertEquals(0, FileUtils.sizeOfDirectory(Paths.get("src/test/resources/org/apache/commons/io/dirs-1-file-size-0").toFile()));
assertEquals(1, FileUtils.sizeOfDirectory(Paths.get("src/test/resources/org/apache/commons/io/dirs-1-file-size-1").toFile()));
assertEquals(2, FileUtils.sizeOfDirectory(Paths.get("src/test/resources/org/apache/commons/io/dirs-2-file-size-2").toFile()));
assertEquals(8, FileUtils.sizeOfDirectory(Paths.get("src/test/resources/org/apache/commons/io/dirs-2-file-size-4").toFile()));
assertEquals("", FileUtils.decodeUrl(""));
assertEquals("foo", FileUtils.decodeUrl("foo"));
assertEquals("+", FileUtils.decodeUrl("+"));
assertEquals("% ", FileUtils.decodeUrl("%25%20"));
assertEquals("%20", FileUtils.decodeUrl("%2520"));
assertEquals("jar:file:/C:/dir/sub dir/1.0/foo-1.0.jar!/org/Bar.class", FileUtils.decodeUrl("jar:file:/C:/dir/sub%20dir/1.0/foo-1.0.jar!/org/Bar.class"));
assertEquals("\u00E4\u00F6\u00FC\u00DF", FileUtils.decodeUrl("%C3%A4%C3%B6%C3%BC%C3%9F"));
assertEquals(" ", FileUtils.decodeUrl(" "));
assertEquals("\u00E4\u00F6\u00FC\u00DF", FileUtils.decodeUrl("\u00E4\u00F6\u00FC\u00DF"));
assertEquals("%", FileUtils.decodeUrl("%"));
assertEquals("% ", FileUtils.decodeUrl("%%20"));
assertEquals("%2", FileUtils.decodeUrl("%2"));
assertEquals("%2G", FileUtils.decodeUrl("%2G"));
assertNull(FileUtils.decodeUrl(null));
assertEquals(testFile1, FileUtils.delete(testFile1));
assertThrows(IOException.class, () -> FileUtils.delete(new File("does not exist.nope")));
assertThrows(IllegalArgumentException.class, () -> FileUtils.deleteDirectory(testFile1));
assertTrue(testDirectory.exists());
assertTrue(testFile.exists());
assertFalse(testDirectory.exists(), "Check No Exist");
assertFalse(testFile.exists(), "Check No Exist");
assertTrue(testFile.exists());
assertFalse(testFile.exists(), "Check No Exist");
assertFalse(testFile.exists());
assertTrue(file2.exists());
assertTrue(file2.length() > 0);
assertEquals(filename, file2contents, "Second file's contents correct");
assertTrue(file2.delete());
assertEquals("This is a test", contents, "FileUtils.fileRead()");
assertTrue(destination.exists(), "Copy1.txt doesn't exist to delete");
assertFalse(destination.exists(), "Check No Exist");
assertTrue(destination.exists(), "Copy2.txt doesn't exist to delete");
assertFalse(destination.exists(), "Check No Exist");
assertFalse(destination.exists(), "Check No Exist");
assertThrows(IOException.class, () -> FileUtils.forceDelete(destination));
assertTrue(testDirectory.exists(), "TestDirectory must exist");
assertFalse(testDirectory.exists(), "TestDirectory must not exist");
assertTrue(file.setReadOnly());
assertTrue(file.canRead());
assertFalse(file.canWrite());
assertTrue(file.delete());
assertTrue(file.setReadOnly());
assertTrue(file.canRead());
assertFalse(file.canWrite());
assertTrue(file.exists(), "File doesn't exist to delete");
assertFalse(file.exists(), "Check deletion");
assertTrue(testFile.exists(), "Test file does not exist.");
assertThrows(IOException.class, () -> FileUtils.forceMkdir(testFile));
assertTrue(testFile.exists(), "Directory was not created.");
assertTrue(tempDirFile.exists());
assertFalse(testParentDir.exists());
assertFalse(testParentDir.exists());
assertFalse(testFile.exists());
assertTrue(testParentDir.exists());
assertFalse(testFile.exists());
assertTrue(testParentDir.exists());
assertFalse(testFile.exists());
assertEquals(expected_A, FileUtils.getFile("src"), "A");
assertEquals(expected_B, FileUtils.getFile("src", "main"), "B");
assertEquals(expected_C, FileUtils.getFile("src", "main", "java"), "C");
assertThrows(NullPointerException.class, () -> FileUtils.getFile((String[]) null));
assertEquals(expected_A, FileUtils.getFile(parent, "src"), "A");
assertEquals(expected_B, FileUtils.getFile(parent, "src", "main"), "B");
assertEquals(expected_C, FileUtils.getFile(parent, "src", "main", "java"), "C");
assertThrows(NullPointerException.class, () -> FileUtils.getFile(parent, (String[]) null));
assertThrows(NullPointerException.class, () -> FileUtils.getFile((File) null, "src"));
assertEquals(tempDirectory, FileUtils.getTempDirectory());
assertEquals(System.getProperty("java.io.tmpdir"), FileUtils.getTempDirectoryPath());
assertEquals(userDirectory, FileUtils.getUserDirectory());
assertEquals(System.getProperty("user.home"), FileUtils.getUserDirectoryPath());
assertTrue(dir.mkdirs(), dir + " should not be present");
assertTrue(file.createNewFile(), file + " should not be present");
assertTrue(dest.mkdirs());
assertTrue(src.exists());
assertThrows(IOException.class, () -> FileUtils.moveDirectoryToDirectory(src, dest, false));
assertTrue(src.exists());
assertEquals(SystemUtils.IS_OS_WINDOWS, sourceFile.toFile().canExecute());
assertTrue(sourceFile.toFile().canExecute());
assertTrue(destFile.toFile().exists());
assertTrue(destFile.toFile().canExecute());
assertFalse(FileUtils.isDirectory(null));
assertTrue(FileUtils.isDirectory(tempDirFile));
assertFalse(FileUtils.isDirectory(testFile1));
assertTrue(FileUtils.isDirectory(tempDirAsFile));
assertFalse(FileUtils.isDirectory(tempDirAsFile));
Assertions.assertTrue(FileUtils.isEmptyDirectory(tempDirAsFile));
Assertions.assertFalse(FileUtils.isEmptyDirectory(PathUtilsIsEmptyTest.DIR_SIZE_1.toFile()));
assertFalse(FileUtils.isFileNewer(oldFile, refFile), "Old File - Newer - File");
assertFalse(FileUtils.isFileNewer(oldFile, date), "Old File - Newer - Date");
assertFalse(FileUtils.isFileNewer(oldFile, now), "Old File - Newer - Mili");
assertFalse(FileUtils.isFileNewer(oldFile, instant), "Old File - Newer - Instant");
assertFalse(FileUtils.isFileNewer(oldFile, zonedDateTime), "Old File - Newer - ZonedDateTime");
assertFalse(FileUtils.isFileNewer(oldFile, offsetDateTime), "Old File - Newer - OffsetDateTime");
assertFalse(FileUtils.isFileNewer(oldFile, localDateTime), "Old File - Newer - LocalDateTime");
assertFalse(FileUtils.isFileNewer(oldFile, localDateTime, ZoneId.systemDefault()), "Old File - Newer - LocalDateTime,ZoneId");
assertFalse(FileUtils.isFileNewer(oldFile, localDate), "Old File - Newer - LocalDate");
assertTrue(FileUtils.isFileNewer(oldFile, localDate, localTime0), "Old File - Newer - LocalDate,LocalTime");
assertTrue(FileUtils.isFileNewer(oldFile, localDate, offsetTime0), "Old File - Newer - LocalDate,OffsetTime");
assertFalse(FileUtils.isFileNewer(oldFile, localDatePlusDay), "Old File - Newer - LocalDate plus one day");
assertFalse(FileUtils.isFileNewer(oldFile, localDatePlusDay, localTime0), "Old File - Newer - LocalDate plus one day,LocalTime");
assertFalse(FileUtils.isFileNewer(oldFile, localDatePlusDay, offsetTime0), "Old File - Newer - LocalDate plus one day,OffsetTime");
assertTrue(FileUtils.isFileNewer(newFile, refFile), "New File - Newer - File");
assertTrue(FileUtils.isFileNewer(newFile, date), "New File - Newer - Date");
assertTrue(FileUtils.isFileNewer(newFile, now), "New File - Newer - Mili");
assertTrue(FileUtils.isFileNewer(newFile, instant), "New File - Newer - Instant");
assertTrue(FileUtils.isFileNewer(newFile, zonedDateTime), "New File - Newer - ZonedDateTime");
assertTrue(FileUtils.isFileNewer(newFile, offsetDateTime), "New File - Newer - OffsetDateTime");
assertTrue(FileUtils.isFileNewer(newFile, localDateTime), "New File - Newer - LocalDateTime");
assertTrue(FileUtils.isFileNewer(newFile, localDateTime, ZoneId.systemDefault()), "New File - Newer - LocalDateTime,ZoneId");
assertFalse(FileUtils.isFileNewer(newFile, localDate), "New File - Newer - LocalDate");
assertTrue(FileUtils.isFileNewer(newFile, localDate, localTime0), "New File - Newer - LocalDate,LocalTime");
assertTrue(FileUtils.isFileNewer(newFile, localDate, offsetTime0), "New File - Newer - LocalDate,OffsetTime");
assertFalse(FileUtils.isFileNewer(newFile, localDatePlusDay), "New File - Newer - LocalDate plus one day");
assertFalse(FileUtils.isFileNewer(newFile, localDatePlusDay, localTime0), "New File - Newer - LocalDate plus one day,LocalTime");
assertFalse(FileUtils.isFileNewer(newFile, localDatePlusDay, offsetTime0), "New File - Newer - LocalDate plus one day,OffsetTime");
assertFalse(FileUtils.isFileNewer(invalidFile, refFile), "Invalid - Newer - File");
assertThrows(IllegalArgumentException.class, () -> FileUtils.isFileNewer(newFile, invalidFile));
assertTrue(FileUtils.isFileOlder(oldFile, refFile), "Old File - Older - File");
assertTrue(FileUtils.isFileOlder(oldFile, date), "Old File - Older - Date");
assertTrue(FileUtils.isFileOlder(oldFile, now), "Old File - Older - Mili");
assertTrue(FileUtils.isFileOlder(oldFile, instant), "Old File - Older - Instant");
assertTrue(FileUtils.isFileOlder(oldFile, zonedDateTime), "Old File - Older - ZonedDateTime");
assertTrue(FileUtils.isFileOlder(oldFile, offsetDateTime), "Old File - Older - OffsetDateTime");
assertTrue(FileUtils.isFileOlder(oldFile, localDateTime), "Old File - Older - LocalDateTime");
assertTrue(FileUtils.isFileOlder(oldFile, localDateTime, ZoneId.systemDefault()), "Old File - Older - LocalDateTime,LocalTime");
assertTrue(FileUtils.isFileOlder(oldFile, localDate), "Old File - Older - LocalDate");
assertFalse(FileUtils.isFileOlder(oldFile, localDate, localTime0), "Old File - Older - LocalDate,LocalTime");
assertFalse(FileUtils.isFileOlder(oldFile, localDate, offsetTime0), "Old File - Older - LocalDate,OffsetTime");
assertTrue(FileUtils.isFileOlder(oldFile, localDatePlusDay), "Old File - Older - LocalDate plus one day");
assertTrue(FileUtils.isFileOlder(oldFile, localDatePlusDay, localTime0), "Old File - Older - LocalDate plus one day,LocalTime");
assertTrue(FileUtils.isFileOlder(oldFile, localDatePlusDay, offsetTime0), "Old File - Older - LocalDate plus one day,OffsetTime");
assertFalse(FileUtils.isFileOlder(newFile, refFile), "New File - Older - File");
assertFalse(FileUtils.isFileOlder(newFile, date), "New File - Older - Date");
assertFalse(FileUtils.isFileOlder(newFile, now), "New File - Older - Mili");
assertFalse(FileUtils.isFileOlder(newFile, instant), "New File - Older - Instant");
assertFalse(FileUtils.isFileOlder(newFile, zonedDateTime), "New File - Older - ZonedDateTime");
assertFalse(FileUtils.isFileOlder(newFile, offsetDateTime), "New File - Older - OffsetDateTime");
assertFalse(FileUtils.isFileOlder(newFile, localDateTime), "New File - Older - LocalDateTime");
assertFalse(FileUtils.isFileOlder(newFile, localDateTime, ZoneId.systemDefault()), "New File - Older - LocalDateTime,ZoneId");
assertTrue(FileUtils.isFileOlder(newFile, localDate), "New File - Older - LocalDate");
assertFalse(FileUtils.isFileOlder(newFile, localDate, localTime0), "New File - Older - LocalDate,LocalTime");
assertFalse(FileUtils.isFileOlder(newFile, localDate, offsetTime0), "New File - Older - LocalDate,OffsetTime");
assertTrue(FileUtils.isFileOlder(newFile, localDatePlusDay), "New File - Older - LocalDate plus one day");
assertTrue(FileUtils.isFileOlder(newFile, localDatePlusDay, localTime0), "New File - Older - LocalDate plus one day,LocalTime");
assertTrue(FileUtils.isFileOlder(newFile, localDatePlusDay, offsetTime0), "New File - Older - LocalDate plus one day,OffsetTime");
assertFalse(FileUtils.isFileOlder(invalidFile, refFile), "Invalid - Older - File");
assertThrows(IllegalArgumentException.class, () -> FileUtils.isFileOlder(newFile, invalidFile));
assertThrows(NullPointerException.class, () -> FileUtils.isFileNewer(null, now));
assertThrows(NullPointerException.class, () -> FileUtils.isFileNewer(oldFile, (File) null));
assertThrows(IllegalArgumentException.class, () -> FileUtils.isFileNewer(oldFile, invalidFile));
assertThrows(NullPointerException.class, () -> FileUtils.isFileNewer(oldFile, (Date) null));
assertThrows(NullPointerException.class, () -> FileUtils.isFileOlder(null, now));
assertThrows(NullPointerException.class, () -> FileUtils.isFileOlder(oldFile, (File) null));
assertThrows(NullPointerException.class, () -> FileUtils.isFileOlder(oldFile, (Date) null));
assertThrows(IllegalArgumentException.class, () -> FileUtils.isFileOlder(oldFile, invalidFile));
assertFalse(FileUtils.isRegularFile(null));
assertFalse(FileUtils.isRegularFile(tempDirFile));
assertTrue(FileUtils.isRegularFile(testFile1));
assertFalse(FileUtils.isRegularFile(testFile1));
assertTrue(subDir.mkdir());
assertTrue(subSubDir.mkdir());
assertTrue(notSubSubDir.mkdir());
assertEquals(expectedFileNames.size(), fileSizes.length);
assertEquals(expectedFileNames.size(), matchedFileNames.size());
assertEquals(expectedFileNames, actualFileNames);
assertTrue(subDir1.mkdir());
assertTrue(subDir2.mkdir());
assertTrue(subDir3.mkdir());
assertTrue(subDir4.mkdir());
assertTrue(new File(directory, "TEST").mkdir());
assertTrue(new File(directory, "test.txt").createNewFile());
FileUtils.iterateFiles(directory, filter, null).forEachRemaining(file -> assertFalse(file.isDirectory(), file::getAbsolutePath));
assertEquals(expectedFileNames.length, actualFiles.size(), actualFiles::toString);
assertEquals(foundFileNames.size(), expectedFileNames.length, foundFileNames::toString);
assertTrue(new File(directory, "TEST").mkdir());
assertTrue(new File(directory, "test.txt").createNewFile());
assertFalse(file.isDirectory(), file::getAbsolutePath);
assertEquals(4, files.size());
assertTrue(files.contains(subDir1), "Should contain the directory.");
assertTrue(files.contains(subDir2), "Should contain the directory.");
assertTrue(files.contains(someFile), "Should contain the file.");
assertTrue(files.contains(subDir3), "Should contain the directory.");
assertTrue(destination.exists(), "Check Exist");
assertFalse(src.exists(), "Original deleted");
assertTrue(movedDir.exists(), "Check dir moved");
assertTrue(movedFile.exists(), "Check file moved");
assertThrows(NullPointerException.class, () -> FileUtils.moveDirectory(null, new File("foo")));
assertThrows(NullPointerException.class, () -> FileUtils.moveDirectory(new File("foo"), null));
assertThrows(FileNotFoundException.class, () -> FileUtils.moveDirectory(new File("nonexistant"), new File("foo")));
assertThrows(IllegalArgumentException.class, () -> FileUtils.moveDirectory(testFile, new File("foo")));
assertThrows(FileExistsException.class, () -> FileUtils.moveDirectory(testSrcFile, testDestFile),"Expected FileExistsException when dest already exists");
assertTrue(destination.exists(), "Check Exist");
assertFalse(src.exists(), "Original deleted");
assertTrue(movedDir.exists(), "Check dir moved");
assertTrue(movedFile.exists(), "Check file moved");
assertFalse(destDir.exists(), "Check Exist before");
assertTrue(destDir.exists(), "Check Exist after");
assertFalse(src.exists(), "Original deleted");
assertTrue(movedDir.exists(), "Check dir moved");
assertTrue(movedChildDir.exists(), "Check child dir moved");
assertTrue(movedFile.exists(), "Check file moved");
assertThrows(NullPointerException.class, () -> FileUtils.moveDirectoryToDirectory(null, new File("foo"), true));
assertThrows(NullPointerException.class, () -> FileUtils.moveDirectoryToDirectory(new File("foo"), null, true));
assertThrows(IOException.class, () -> FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true));
assertThrows(IOException.class, () -> FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false));
assertTrue(destination.exists(), "Check Exist");
assertFalse(src.exists(), "Original deleted");
assertThrows(IOException.class, () -> FileUtils.moveFile(src, destination));
assertFalse(destination.exists(), "Check Rollback");
assertTrue(src.exists(), "Original exists");
assertTrue(destination.exists(), "Check Exist");
assertFalse(src.exists(), "Original deleted");
assertEquals(expected, destLastMod, "Check last modified date same as input, delta " + delta);
assertTrue(destination.exists(), "Check Exist");
assertFalse(src.exists(), "Original deleted");
assertNotEquals(unexpectedMillis, destLastModMillis,"Check last modified date not same as input, delta " + deltaMillis);
assertTrue(destLastModMillis > nowMillis,destLastModMillis + " > " + nowMillis + " (delta " + deltaMillis + ")");
assertThrows(NullPointerException.class, () -> FileUtils.moveFile(null, new File("foo")));
assertThrows(NullPointerException.class, () -> FileUtils.moveFile(new File("foo"), null));
assertThrows(FileNotFoundException.class, () -> FileUtils.moveFile(new File("nonexistant"), new File("foo")));
assertThrows(IllegalArgumentException.class, () -> FileUtils.moveFile(tempDirFile, new File("foo")));
assertTrue(testDestFile.getParentFile().exists(), () -> "Cannot create file " + testDestFile + " as the parent directory does not exist");
assertThrows(FileExistsException.class, () -> FileUtils.moveFile(testSourceFile, testDestFile),"Expected FileExistsException when dest already exists");
assertTrue(destination.exists(), "Check Exist");
assertFalse(testFile1.exists(), "Original deleted");
assertFalse(destDir.exists(), "Check Exist before");
assertFalse(movedFile.exists(), "Check Exist before");
assertTrue(movedFile.exists(), "Check Exist after");
assertFalse(testFile1.exists(), "Original deleted");
assertThrows(NullPointerException.class, () -> FileUtils.moveFileToDirectory(null, new File("foo"), true));
assertThrows(NullPointerException.class, () -> FileUtils.moveFileToDirectory(new File("foo"), null, true));
assertThrows(IllegalArgumentException.class, () -> FileUtils.moveFileToDirectory(testFile1, testFile2, true));
assertThrows(IOException.class, () -> FileUtils.moveFileToDirectory(testFile1, nonexistant, false));
assertFalse(movedFile.exists(), "Check File Doesnt exist");
assertFalse(movedDir.exists(), "Check Dir Doesnt exist");
assertTrue(movedFile.exists(), "Check File exists");
assertFalse(testFile.exists(), "Check Original File doesn't exist");
assertTrue(movedDir.exists(), "Check Dir exists");
assertFalse(testDir.exists(), "Check Original Dir doesn't exist");
assertThrows(NullPointerException.class, () -> FileUtils.moveDirectoryToDirectory(null, new File("foo"), true));
assertThrows(NullPointerException.class, () -> FileUtils.moveDirectoryToDirectory(new File("foo"), null, true));
assertThrows(IOException.class, () -> FileUtils.moveToDirectory(nonexistant, destDir, true), "Expected IOException when source does not exist");
assertEquals(3, data.length);
assertEquals(11, data[0]);
assertEquals(21, data[1]);
assertEquals(31, data[2]);
assertEquals(fixture, FileUtils.readFileToString(file));
assertEquals("Hello /u1234", data);
assertEquals(Arrays.asList(data), lines);
assertThrows(NullPointerException.class, () -> FileUtils.sizeOf(null));
assertThrows(IllegalArgumentException.class, () -> FileUtils.sizeOf(file));
assertEquals(0, FileUtils.sizeOf(file));
assertEquals(testFile1Size, FileUtils.sizeOf(testFile1), "Unexpected files size");
assertEquals(TEST_DIRECTORY_SIZE, FileUtils.sizeOf(tempDirFile), "Unexpected directory size");
assertThrows(NullPointerException.class, () -> FileUtils.sizeOfAsBigInteger(null));
assertThrows(IllegalArgumentException.class, () -> FileUtils.sizeOfAsBigInteger(file));
assertEquals(BigInteger.ZERO, FileUtils.sizeOfAsBigInteger(file));
assertEquals(BigInteger.valueOf(testFile1Size), FileUtils.sizeOfAsBigInteger(testFile1),"Unexpected files size");
assertEquals(TEST_DIRECTORY_SIZE_BI, FileUtils.sizeOfAsBigInteger(tempDirFile),"Unexpected directory size");
assertThrows(NullPointerException.class, () -> FileUtils.sizeOfDirectory(null));
assertThrows(IllegalArgumentException.class, () -> FileUtils.sizeOfAsBigInteger(file));
assertThrows(IllegalArgumentException.class, () -> FileUtils.sizeOfDirectory(file));
assertEquals(TEST_DIRECTORY_SIZE, FileUtils.sizeOfDirectory(file), "Unexpected directory size");
assertThrows(NullPointerException.class, () -> FileUtils.sizeOfDirectoryAsBigInteger(null));
assertThrows(IllegalArgumentException.class, () -> FileUtils.sizeOfDirectoryAsBigInteger(file));
assertThrows(IllegalArgumentException.class, () -> FileUtils.sizeOfDirectoryAsBigInteger(file));
assertEquals(TEST_DIRECTORY_SIZE_BI, FileUtils.sizeOfDirectoryAsBigInteger(file), "Unexpected directory size");
assertTrue(nonEmptyFile.getParentFile().exists(), () -> "Cannot create file " + nonEmptyFile + " as the parent directory does not exist");
assertEquals(TEST_DIRECTORY_SIZE_GT_ZERO_BI, FileUtils.sizeOfDirectoryAsBigInteger(file), "Unexpected directory size");
assertTrue(file.toString().contains("file.txt"));
assertTrue(file.toString().contains("file name%20.txt"));
assertNull(FileUtils.toFile(null));
assertNull(FileUtils.toFile(new URL("http://jakarta.apache.org")));
assertTrue(file.toString().contains("file% %me.txt%"));
assertEquals("both are 100 % true", file.toString());
assertEquals(urls.length, files.length);
assertTrue(files[0].toString().contains("file1.txt"), "File: " + files[0]);
assertTrue(files[1].toString().contains("file2.txt"), "File: " + files[1]);
assertEquals(urls.length, files.length);
assertTrue(files[0].toString().contains("file1.txt"), "File: " + files[0]);
assertNull(files[1], "File: " + files[1]);
assertEquals(0, files.length);
assertEquals(0, files.length);
assertThrows(IllegalArgumentException.class, () -> FileUtils.toFiles(urls));
assertTrue(file.toString().contains("\u00E4\u00F6\u00FC\u00DF"));
assertThrows(NullPointerException.class, () -> FileUtils.touch(null));
assertFalse(file.exists(), "Bad test: test file still exists");
assertTrue(file.exists(), "FileUtils.touch() created file");
assertEquals(0, file.length(), "Created empty file.");
assertEquals(1, file.length(), "Wrote one byte to file");
assertTrue(res, "Bad test: set lastModified failed");
assertEquals(y2k, getLastModifiedMillis(file), "Bad test: set lastModified set incorrect value");
assertEquals(1, file.length(), "FileUtils.touch() didn't empty the file.");
assertNotEquals(y2k, getLastModifiedMillis(file), "FileUtils.touch() changed lastModified");
assertTrue(getLastModifiedMillis(file) >= nowMillis - delta, "FileUtils.touch() changed lastModified to more than now-3s");
assertTrue(getLastModifiedMillis(file) <= nowMillis + delta, "FileUtils.touch() changed lastModified to less than now+3s");
assertEquals(files.length, urls.length);
assertTrue(urls[0].toExternalForm().startsWith("file:"));
assertTrue(urls[0].toExternalForm().contains("file1.txt"));
assertTrue(urls[1].toExternalForm().startsWith("file:"));
assertTrue(urls[1].toExternalForm().contains("file2.txt"));
assertTrue(urls[2].toExternalForm().startsWith("file:"));
assertTrue(urls[2].toExternalForm().contains("test%20file.txt"));
assertEquals(0, urls.length);
assertEquals(expected, actual);
assertEquals(expected, actual);
TestUtils.assertEqualContent(data, file);
assertEquals(expected, actual);
assertEquals(expected, actual);
TestUtils.assertEqualContent(writtenData, file);
assertEquals(expected, actual);
assertEquals(expected, actual);
TestUtils.assertEqualContent(text, file);
TestUtils.assertEqualContent(text, file);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(0, file.length(), "Sizes differ");
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertEquals(expected, actual);
TestUtils.assertEqualContent(text, file);
TestUtils.assertEqualContent(text, file);
TestUtils.assertEqualContent(text, file);
assertEquals(expected, actual);
assertEquals(expected, actual);
TestUtils.assertEqualContent(text, file);
TestUtils.assertEqualContent(text, file);
assertEquals(expected, actual);
assertEquals(expected, actual);
assertTrue(writer.isCauseOf(e));
assertEquals(exception, e2);
assertTrue(writer.isCauseOf(e));
assertEquals(exception, e2);
assertTrue(writer.isCauseOf(e));
assertEquals(exception, e2);
assertEquals(3, buffer.getBuilder().length());
assertEquals('a', buffer.getBuilder().charAt(0));
assertEquals('b', buffer.getBuilder().charAt(1));
assertEquals('c', buffer.getBuilder().charAt(2));
assertFalse(writer.isCauseOf(exception));
assertFalse(writer.isCauseOf(new TaggedIOException(exception, UUID.randomUUID())));
assertEquals(charset, writerCharset);
assertTrue(writerCharset.contains(charset), writerCharset.name());
assertArrayEquals(xml.getBytes(encodingName), xmlContent);
assertEquals(expected.size(), actual.size(), "Sizes are not equal");
assertThrows(IllegalArgumentException.class, () -> baosFactory.newInstance(-1));
assertThrows(IndexOutOfBoundsException.class, () -> baout.write(new byte[1], 0, -1));
assertThrows(IndexOutOfBoundsException.class, () -> baout.write(new byte[1], 0, 2));
assertThrows(IndexOutOfBoundsException.class, () -> baout.write(new byte[1], 1, -2));
assertThrows(IndexOutOfBoundsException.class, () -> baout.write(IOUtils.EMPTY_BYTE_ARRAY, 1, 0));
assertThrows(IndexOutOfBoundsException.class, () -> baout.write(null, -1, 0));
assertEquals(36, written);
assertEquals(32, written);
assertEquals(155, written);
assertEquals(155, written);
assertEquals(refString, baoutString, "ASCII decoded String must be equal");
assertSame(baos1.toByteArray(), baos2.toByteArray());
assertEquals(data.length, bain.available());
assertEquals(data.length, buffered.available());
assertArrayEquals(data, IOUtils.toByteArray(buffered));
assertEquals(0, bain.available());
assertEquals(0, buffered.available());
assertEquals(8224, baoutData.length);
assertEquals(8254, baoutData.length);
assertEquals(0, in.available());
assertTrue(in instanceof ClosedInputStream);
assertEquals(8224, baoutData.length);
assertEquals(30, baoutData.length);
assertTrue(true, "Dummy");
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertTrue(true, "Dummy to show test completed OK");
assertEquals(expected.toString(), sbw1.toString(), "ProxyCollectionWriter.write(int)");
assertEquals(expected.toString(), sbw2.toString(), "ProxyCollectionWriter.write(int)");
assertEquals(expected.toString(), sbw1.toString(), "ProxyCollectionWriter.write(char[])");
assertEquals(expected.toString(), sbw2.toString(), "ProxyCollectionWriter.write(char[])");
assertEquals(expected.toString(), sbw1.toString(), "TeeOutputStream.write(byte[], int, int)");
assertEquals(expected.toString(), sbw2.toString(), "TeeOutputStream.write(byte[], int, int)");
assertEquals(expected.toString(), sbw1.toString(), "ProxyCollectionWriter.append(char)");
assertEquals(expected.toString(), sbw2.toString(), "ProxyCollectionWriter.append(char)");
assertEquals(expected.toString(), sbw1.toString(), "ProxyCollectionWriter.append(CharSequence)");
assertEquals(expected.toString(), sbw2.toString(), "ProxyCollectionWriter.write(CharSequence)");
assertEquals(expected.toString(), sbw1.toString(), "ProxyCollectionWriter.append(CharSequence, int, int)");
assertEquals(expected.toString(), sbw2.toString(), "ProxyCollectionWriter.append(CharSequence, int, int)");
assertEquals("c", writer.toString());
assertEquals("ABC", writer.toString());
assertEquals("BC", writer.toString());
assertThrows(UnsupportedEncodingException.class, () -> proxy.append('c'));
assertThrows(UnsupportedEncodingException.class, () -> proxy.append("ABCE"));
assertThrows(UnsupportedEncodingException.class, () -> proxy.append("ABCE", 1, 2));
assertThrows(UnsupportedEncodingException.class, () -> {try (OutputStreamWriter osw = new OutputStreamWriter(new ByteArrayOutputStream()) {@Overridepublic void close() throws IOException {throw new UnsupportedEncodingException("Bah");
assertThrows(UnsupportedEncodingException.class, proxy::flush);
assertThrows(UnsupportedEncodingException.class, () -> proxy.write("ABCE".toCharArray()));
assertThrows(UnsupportedEncodingException.class, () -> proxy.write('a'));
assertThrows(UnsupportedEncodingException.class, () -> proxy.write("ABCE".toCharArray(), 2, 3));
assertThrows(UnsupportedEncodingException.class, () -> proxy.write("ABCE"));
assertThrows(UnsupportedEncodingException.class, () -> proxy.write("ABCE", 1, 3));
assertEquals("ABC", writer.toString());
assertEquals("BC", writer.toString());
assertEquals("A", writer.toString());
assertEquals("ABC", writer.toString());
assertEquals("BC", writer.toString());
assertEquals(0, writer.getBuffer().length());
assertEquals("abc", writer.toString());
assertEquals(testString, writer.toString());
assertEquals(testString, writer.toString());
assertEquals(testString, writer.toString());
assertEquals(testString, writer.toString());
assertEquals("abc", writer.toString());
assertFalse(closed, "closed");
assertThrows(IOException.class, () -> shielded.write('x'), "write(b)");
assertEquals(1, original.size());
assertEquals('y', original.toByteArray()[0]);
assertEquals(exception, assertThrows(IOException.class, () -> stream.close()));
assertEquals(exception, assertThrows(IOException.class, () -> stream.flush()));
final IOException thrown = assertThrows(IOException.class, () -> {try (OutputStream newStream = new BrokenOutputStream()) {newStream.write(1);
assertEquals("Broken output stream", thrown.getMessage());
assertEquals(1, suppressed.length);
assertEquals(IOException.class, suppressed[0].getClass());
assertEquals("Broken output stream", suppressed[0].getMessage());
assertEquals(exception, assertThrows(IOException.class, () -> stream.write(new byte[1])));
assertEquals(exception, assertThrows(IOException.class, () -> stream.write(new byte[1], 0, 1)));
assertEquals(exception, assertThrows(IOException.class, () -> stream.write(1)));
assertEquals(2, numWrites.get());
assertThrows(IllegalArgumentException.class, () -> new ChunkedOutputStream(new ByteArrayOutputStream(), 0));
assertEquals(4, numWrites.get());
assertEquals("F", out.getAppendable().toString());
assertEquals(testData, out.getAppendable().toString());
private void assertByteArrayEquals(final String msg, final byte[] array, final int start, final int end) {for (int i = start; i < end; i++) {
assertEquals(array[i], i-start, msg+": array[" + i + "] mismatch");
assertByteArrayEquals("CountingOutputStream.write(int)", baos.toByteArray(), 0, 20);
assertEquals(cos.getCount(), 20, "CountingOutputStream.getCount()");
assertByteArrayEquals("CountingOutputStream.write(byte[])", baos.toByteArray(), 0, 30);
assertEquals(cos.getCount(), 30, "CountingOutputStream.getCount()");
assertByteArrayEquals("CountingOutputStream.write(byte[], int, int)", baos.toByteArray(), 0, 35);
assertEquals(cos.getCount(), 35, "CountingOutputStream.getCount()");
assertEquals(count, 35, "CountingOutputStream.resetCount()");
assertByteArrayEquals("CountingOutputStream.write(int)", baos.toByteArray(), 35, 45);
assertEquals(cos.getCount(), 10, "CountingOutputStream.getCount()");
assertThrows(ArithmeticException.class, () -> cos.getCount());
assertThrows(ArithmeticException.class, () -> cos.resetCount());
assertEquals(size, cos.getByteCount(), "getByteCount()");
assertEquals(size, cos.resetByteCount(), "resetByteCount()");
private void assertByteArrayEquals(final String msg, final byte[] array1, final byte[] array2) {assertEquals(array1.length, array2.length, msg + ": array size mismatch");
assertEquals(array1[i], array2[i], msg + ": array[ " + i + "] mismatch");
assertByteArrayEquals("TeeOutputStream.write(int)", expected.toByteArray(), baos1.toByteArray());
assertByteArrayEquals("TeeOutputStream.write(int)", expected.toByteArray(), baos2.toByteArray());
assertByteArrayEquals("TeeOutputStream.write(byte[])", expected.toByteArray(), baos1.toByteArray());
assertByteArrayEquals("TeeOutputStream.write(byte[])", expected.toByteArray(), baos2.toByteArray());
assertByteArrayEquals("TeeOutputStream.write(byte[], int, int)", expected.toByteArray(),baos1.toByteArray());
assertByteArrayEquals("TeeOutputStream.write(byte[], int, int)", expected.toByteArray(),baos2.toByteArray());
assertThrows(IOException.class, () -> cos.flush());
assertThrows(IOException.class, () -> cos.write('x'));
assertEquals("ab", appendableString.toString());
assertEquals("ab", appendableString.toString());
assertEquals("ab", appendableString.toString());
assertEquals(exception, e.getCause());
assertEquals(exception, e.getCause());
assertEquals(exception, e.getCause());
assertEquals("ab", UncheckedAppendable.on(new StringWriter(2).append("ab")).toString());
assertTrue(stream.isCauseOf(e));
assertEquals(exception, e2);
assertTrue(stream.isCauseOf(e));
assertEquals(exception, e2);
assertTrue(stream.isCauseOf(e));
assertEquals(exception, e2);
assertEquals(3, buffer.size());
assertEquals('a', buffer.toByteArray()[0]);
assertEquals('b', buffer.toByteArray()[1]);
assertEquals('c', buffer.toByteArray()[2]);
assertFalse(stream.isCauseOf(exception));
assertFalse(stream.isCauseOf(new TaggedIOException(exception, UUID.randomUUID())));
assertTrue(file.exists());
assertTrue(altLockFile.exists());
assertTrue(msg.startsWith("Can't write file, lock "), "Exception message does not start correctly. ");
assertTrue(file.exists());
assertTrue(altLockFile.exists());
assertTrue(file.exists());
assertFalse(altLockFile.exists());
assertThrows(IOException.class, () -> new LockableFileWriter(temporaryFolder));
assertFalse(file.exists());
assertFalse(lockFile.exists());
assertFalse(file.exists());
assertFalse(lockFile.exists());
assertThrows(UnsupportedCharsetException.class, () -> new LockableFileWriter(file, "BAD-ENCODE"));
assertFalse(file.exists());
assertFalse(lockFile.exists());
assertFalse(file.exists());
assertFalse(lockFile.exists());
assertThrows(NullPointerException.class, () -> new LockableFileWriter((File) null));
assertFalse(file.exists());
assertFalse(lockFile.exists());
assertFalse(file.exists());
assertFalse(lockFile.exists());
assertThrows(NullPointerException.class, () -> new LockableFileWriter((String) null));
assertFalse(file.exists());
assertFalse(lockFile.exists());
assertFalse(file.exists());
assertFalse(lockFile.exists());
assertTrue(file.exists());
assertTrue(lockFile.exists());
assertTrue(msg.startsWith("Can't write file, lock "), "Exception message does not start correctly. ");
assertTrue(file.exists());
assertTrue(lockFile.exists());
assertTrue(msg.startsWith("Can't write file, lock "), "Exception message does not start correctly. ");
assertTrue(file.exists());
assertTrue(lockFile.exists());
assertTrue(file.exists());
assertFalse(lockFile.exists());
assertTrue(file.exists());
assertTrue(lockFile.exists());
assertTrue(file.exists());
assertFalse(lockFile.exists());
assertTrue(file.exists());
assertTrue(lockFile.exists());
assertTrue(file.exists());
assertFalse(lockFile.exists());
assertFalse(reached.get());
assertTrue(reached.get());
assertFalse(reached.get());
assertFalse(reached.get());
assertFalse(reached.get());
assertTrue(reached.get());
assertFalse(reached.get());
assertTrue(reached.get());
assertThrows(IOException.class, () -> tos.write('a'));
assertThrows(IllegalStateException.class, () -> tos.write('a'));
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.close()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.equals(null)).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.flush()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.hashCode()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.toString()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.write(1)).getCause());
assertThrows(NullPointerException.class, () -> new QueueOutputStream(null), "queue is required");
assertNotNull(exception);
assertEquals(exception.getClass(), InterruptedIOException.class);
assertEquals("ABC", value);
assertEquals("ABC", value);
assertFalse(dfos.isInMemory());
assertNull(dfos.getData());
assertFalse(dfos.isInMemory());
assertArrayEquals(testBytes, IOUtils.toByteArray(is));
assertTrue(dfos.isInMemory());
assertEquals(testBytes.length, resultBytes.length);
assertArrayEquals(resultBytes, testBytes);
assertTrue(dfos.isInMemory());
assertEquals(testBytes.length, resultBytes.length);
assertArrayEquals(resultBytes, testBytes);
assertTrue(dfos.isInMemory());
assertArrayEquals(testBytes, IOUtils.toByteArray(is));
assertNull(dfos.getFile(), "Check file is null-A");
assertFalse(dfos.isInMemory());
assertNull(dfos.getData());
assertNotNull(dfos.getFile(), "Check file not null");
assertTrue(dfos.getFile().exists(), "Check file exists");
assertTrue(dfos.getFile().getName().startsWith(prefix), "Check prefix");
assertTrue(dfos.getFile().getName().endsWith(suffix), "Check suffix");
assertEquals(tempDir.getPath(), dfos.getFile().getParent(), "Check dir");
assertNull(dfos.getFile(), "Check file is null-A");
assertFalse(dfos.isInMemory());
assertNull(dfos.getData());
assertNotNull(dfos.getFile(), "Check file not null");
assertTrue(dfos.getFile().exists(), "Check file exists");
assertTrue(dfos.getFile().getName().startsWith(prefix), "Check prefix");
assertTrue(dfos.getFile().getName().endsWith(".tmp"), "Check suffix"); // ".tmp" is default
assertNull(dfos.getFile(), "Check file is null-A");
assertTrue(dfos.isInMemory());
assertNull(dfos.getFile(), "Check file is null-B");
assertThrows(NullPointerException.class, () -> new DeferredFileOutputStream(testBytes.length - 5, prefix, suffix, tempDir).close());
assertFalse(dfos.isInMemory());
assertNull(dfos.getData());
assertTrue(testFile.exists());
assertFalse(dfos.isInMemory());
assertThrows(IOException.class, () -> dfos.writeTo(baos));
assertArrayEquals(testBytes, copiedBytes);
assertFalse(testFile.exists());
assertTrue(dfos.isInMemory());
assertThrows(IOException.class, () -> dfos.writeTo(baos));
assertArrayEquals(testBytes, copiedBytes);
assertEquals(testBytes.length, fis.available());
assertEquals(testBytes.length, fis.read(resultBytes));
assertArrayEquals(resultBytes, testBytes);
assertEquals(-1, fis.read(resultBytes));
assertEquals("F", out.getAppendable().toString());
assertEquals(testData + "null", out.getAppendable().toString());
assertEquals(testData.substring(1, 3) + "ul", out.getAppendable().toString());
assertEquals(testData, out.getAppendable().toString());
assertEquals("F", out.getAppendable().toString());
assertEquals(testData, out.getAppendable().toString());
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.append('1')));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.append("01")));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.append("01", 0, 1)));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.close()));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.equals(null)));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.flush()));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.hashCode()));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.toString()));
final IOException thrown = assertThrows(IOException.class, () -> {try (Writer newWriter = new BrokenWriter()) {newWriter.write(1);
assertEquals("Broken writer", thrown.getMessage());
assertEquals(1, suppressed.length);
assertEquals(IOException.class, suppressed[0].getClass());
assertEquals("Broken writer", suppressed[0].getMessage());
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.write(new char[1])));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.write(new char[1], 0, 1)));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.write(1)));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.write("01")));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.write("01", 0, 1)));
assertEquals("Foo", writer.toString());
assertEquals("FooBar", writer.toString());
assertEquals("BarFoo", writer.toString());
assertEquals("Foo", writer.toString());
assertEquals("Foo", writer.toString());
assertEquals("FooBar", writer.toString());
assertSame(builder, writer.getBuilder());
assertEquals("FooBar", writer.toString());
assertEquals("F", writer.toString());
assertEquals("Fo", writer.toString());
assertEquals("Foo", writer.toString());
assertEquals("Foo", writer.toString());
assertEquals("FooBar", writer.toString());
assertEquals("Bar", writer.toString());
assertEquals("BarFoo", writer.toString());
assertEquals("Foo", writer.toString());
assertEquals("FooBar", writer.toString());
assertEquals("Bar", writer.toString());
assertEquals("BarFoo", writer.toString());
assertThrows(IOException.class, () -> {try (Writer writer = new FileWriterWithEncoding(temporaryFolder, defaultEncoding)) {// empty}});assertFalse(file1.exists());}@Testpublic void constructor_File_encoding_badEncoding() {assertThrows(IOException.class, () -> {try (Writer writer = new FileWriterWithEncoding(file1, "BAD-ENCODE")) {// empty}});assertFalse(file1.exists());}@Testpublic void constructor_File_existingFile_withContent() throws Exception {try (FileWriter fw1 = new FileWriter(file1);) {fw1.write(textContent);fw1.write(65);}assertEquals(1025, file1.length());try (FileWriterWithEncoding fw1 = new FileWriterWithEncoding(file1, defaultEncoding)) {fw1.write("ABcd");}assertEquals(4, file1.length());}@Testpublic void constructor_File_nullFile() {assertThrows(NullPointerException.class, () -> {try (Writer writer = new FileWriterWithEncoding((File) null, defaultEncoding)) {// empty}});assertFalse(file1.exists());}@Testpublic void constructor_fileName_nullFile() {assertThrows(NullPointerException.class, () -> {try (Writer writer = new FileWriterWithEncoding((String) null, defaultEncoding)) {// empty}});assertFalse(file1.exists());}@Testpublic void constructorAppend_File_existingFile_withContent() throws Exception {try (FileWriter fw1 = new FileWriter(file1)) {fw1.write("ABcd");}assertEquals(4, file1.length());try (FileWriterWithEncoding fw1 = new FileWriterWithEncoding(file1, defaultEncoding, true)) {fw1.write("XyZ");}assertEquals(7, file1.length());}@Testpublic void sameEncoding_Charset_constructor() throws Exception {try (FileWriterWithEncoding writer = new FileWriterWithEncoding(file2, Charset.defaultCharset())) {successfulRun(writer);}}@Testpublic void sameEncoding_CharsetEncoder_constructor() throws Exception {try (FileWriterWithEncoding writer = new FileWriterWithEncoding(file2, Charset.defaultCharset().newEncoder())) {successfulRun(writer);}}@Testpublic void sameEncoding_null_Charset_constructor() throws Exception {try (FileWriterWithEncoding writer = new FileWriterWithEncoding(file2, (Charset) null)) {successfulRun(writer);}}@Testpublic void sameEncoding_null_CharsetEncoder_constructor() throws Exception {try (FileWriterWithEncoding writer = new FileWriterWithEncoding(file2.getPath(), (CharsetEncoder) null)) {successfulRun(writer);}}@Testpublic void sameEncoding_null_CharsetName_constructor() throws Exception {try (FileWriterWithEncoding writer = new FileWriterWithEncoding(file2.getPath(), (String) null)) {successfulRun(writer);}}@Testpublic void sameEncoding_string_Charset_constructor() throws Exception {try (FileWriterWithEncoding writer = new FileWriterWithEncoding(file2.getPath(), Charset.defaultCharset())) {successfulRun(writer);}}@Testpublic void sameEncoding_string_CharsetEncoder_constructor() throws Exception {try (FileWriterWithEncoding writer = new FileWriterWithEncoding(file2.getPath(), Charset.defaultCharset().newEncoder())) {successfulRun(writer);}}@Testpublic void sameEncoding_string_constructor() throws Exception {try (FileWriterWithEncoding writer = new FileWriterWithEncoding(file2, defaultEncoding)) {successfulRun(writer);}}@Testpublic void sameEncoding_string_string_constructor() throws Exception {try (FileWriterWithEncoding writer = new FileWriterWithEncoding(file2.getPath(), defaultEncoding)) {successfulRun(writer);}}@BeforeEachpublic void setUp() throws Exception {final File encodingFinder = new File(temporaryFolder, "finder.txt");try (OutputStreamWriter out = new OutputStreamWriter(Files.newOutputStream(encodingFinder.toPath()))) {defaultEncoding = out.getEncoding();}file1 = new File(temporaryFolder, "testfile1.txt");file2 = new File(temporaryFolder, "testfile2.txt");final char[] arr = new char[1024];final char[] chars = "ABCDEFGHIJKLMNOPQabcdefgihklmnopq".toCharArray();for (int i = 0; i < arr.length; i++) {arr[i] = chars[i % chars.length];}textContent = new String(arr);}private void successfulRun(final FileWriterWithEncoding fw21) throws Exception {try (FileWriter fw1 = new FileWriter(file1); // default encodingFileWriterWithEncoding fw2 = fw21) {writeTestPayload(fw1, fw2);checkFile(file1, file2);}assertTrue(file1.exists());assertTrue(file2.exists());}@Testpublic void testDifferentEncoding() throws Exception {if (Charset.isSupported(StandardCharsets.UTF_16BE.name())) {try (FileWriter fw1 = new FileWriter(file1); // default encodingFileWriterWithEncoding fw2 = new FileWriterWithEncoding(file2, defaultEncoding)) {writeTestPayload(fw1, fw2);try {checkFile(file1, file2);fail();} catch (final AssertionError ex) {// success}}assertTrue(file1.exists());assertTrue(file2.exists());}if (Charset.isSupported(StandardCharsets.UTF_16LE.name())) {try (FileWriter fw1 = new FileWriter(file1); // default encodingFileWriterWithEncoding fw2 = new FileWriterWithEncoding(file2, defaultEncoding)) {writeTestPayload(fw1, fw2);try {checkFile(file1, file2);fail();} catch (final AssertionError ex) {// success}}assertTrue(file1.exists());assertTrue(file2.exists());}}private void writeTestPayload(final FileWriter fw1, final FileWriterWithEncoding fw2) throws IOException {assertTrue(file1.exists());assertTrue(file2.exists());fw1.write(textContent);fw2.write(textContent);fw1.write(65);fw2.write(65);fw1.write(anotherTestContent);fw2.write(anotherTestContent);fw1.write(anotherTestContent, 1, 2);fw2.write(anotherTestContent, 1, 2);fw1.write("CAFE", 1, 2);fw2.write("CAFE", 1, 2);fw1.flush();fw2.flush();}}
assertEquals(1, original.size());
assertEquals('y', original.toByteArray()[0]);
assertThrows(IllegalArgumentException.class,() -> new ChunkedWriter(new OutputStreamWriter(new ByteArrayOutputStream()), 0));
assertEquals(4, numWrites.get());
assertEquals(2, numWrites.get());
assertThrows(IOException.class, () -> shielded.write('x'), "write(c)");
assertEquals(1, original.getBuilder().length());
assertEquals('y', original.toString().charAt(0));
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.append("01", 0, 1)).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.append("01")).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.append('1')).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.close()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.equals(null)).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.flush()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.hashCode()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.toString()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.write(new char[1], 0, 1)).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.write(new char[1])).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.write(1)).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.write("01", 0, 1)).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.write("01")).getCause());
assertThrows(IOException.class, () -> cw.flush());
assertThrows(IOException.class, () -> cw.write(new char[0], 0, 0));
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(0, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertEquals(1, e.getCauseList().size());
assertEquals(1, e.getCause(0, IOIndexedException.class).getIndex());
assertTrue(true, "Dummy to show test completed OK");
assertEquals(expected.toString(), sbw1.toString(), "TeeWriter.write(int)");
assertEquals(expected.toString(), sbw2.toString(), "TeeWriter.write(int)");
assertEquals(expected.toString(), sbw1.toString(), "TeeWriter.write(char[])");
assertEquals(expected.toString(), sbw2.toString(), "TeeWriter.write(char[])");
assertEquals(expected.toString(), sbw1.toString(), "TeeOutputStream.write(byte[], int, int)");
assertEquals(expected.toString(), sbw2.toString(), "TeeOutputStream.write(byte[], int, int)");
assertEquals(expected.toString(), sbw1.toString(), "TeeWriter.append(char)");
assertEquals(expected.toString(), sbw2.toString(), "TeeWriter.append(char)");
assertEquals(expected.toString(), sbw1.toString(), "TeeWriter.append(CharSequence)");
assertEquals(expected.toString(), sbw2.toString(), "TeeWriter.append(CharSequence)");
assertEquals(expected.toString(), sbw1.toString(), "TeeWriter.append(CharSequence, int, int)");
assertEquals(expected.toString(), sbw2.toString(), "TeeWriter.append(CharSequence, int, int)");
assertFalse(cancelled);
assertFalse(cancelled);
assertTrue(results.contains(files[i]), prefix + "[" + i + "] " + files[i]);
assertEquals(cancelName, cancel.getFile().getName(), "File:  " + cancelName);
assertEquals(5, cancel.getDepth(), "Depth: " + cancelName);
assertEquals(cancelName, cancel.getFile().getName(), "File:  " + cancelName);
assertEquals(3, cancel.getDepth(), "Depth: " + cancelName);
assertEquals(cancelName, lastFile.getName(), "Suppress:  " + cancelName);
assertEquals(1 + dirs.length + ioFiles.length + outputFiles.length, results.size(), "Result Size");
assertTrue(results.contains(javaDir), "Start Dir");
assertEquals(1, results.size(), "[A] Result Size");
assertTrue(results.contains(javaDir), "[A] Start Dir");
assertEquals(2, results.size(), "[B] Result Size");
assertTrue(results.contains(javaDir), "[B] Start Dir");
assertTrue(results.contains(orgDir), "[B] Org Dir");
assertEquals(4, results.size(), "[C] Result Size");
assertTrue(results.contains(javaDir), "[C] Start Dir");
assertTrue(results.contains(orgDir), "[C] Org Dir");
assertTrue(results.contains(apacheDir), "[C] Apache Dir");
assertTrue(results.contains(commonsDir), "[C] Commons Dir");
assertEquals(1 + dirs.length + ioFiles.length, results.size(), "[D] Result Size");
assertTrue(results.contains(javaDir), "[D] Start Dir");
assertEquals(1 + dirs.length + ioFiles.length, results.size(), "[DirAndFile1] Result Size");
assertTrue(results.contains(javaDir), "[DirAndFile1] Start Dir");
assertTrue(results.size() > 1 + dirs.length + ioFiles.length, "[DirAndFile2] Result Size");
assertTrue(results.contains(javaDir), "[DirAndFile2] Start Dir");
assertEquals(1 + dirs.length, resultDirs.size(), "[DirAndFile3] Result Size");
assertTrue(results.contains(javaDir), "[DirAndFile3] Start Dir");
assertEquals(ioFiles.length, resultFiles.size(), "[DirAndFile4] Result Size");
assertTrue(results.contains(javaDir), "[DirAndFile4] Start Dir");
assertEquals(0, results.size(), "Result Size");
assertEquals(1, results.size(), "Result Size");
assertTrue(results.contains(FileUtils.current()), "Current Dir");
assertEquals(1, results.size(), "Result Size");
assertTrue(results.contains(invalidDir), "Current Dir");
assertThrows(NullPointerException.class, () -> new TestFileFinder(null, -1).find(null));
assertEquals(cancelName, last.getName());
assertEquals(5, cancel.getDepth(), "Depth: " + cancelName);
assertEquals(cancelName, cancel.getFile().getName(), "File:  " + cancelName);
assertEquals(3, cancel.getDepth(), "Depth: " + cancelName);
assertEquals(cancelName, lastFile.getName(), "Suppress:  " + cancelName);
assertEquals(4, holder.value);
assertEquals(9, holder.value);
assertEquals(4, productFunction.apply(is));
assertEquals(9, productFunction.apply(is));
assertEquals(4, holder.value);
assertEquals(9, holder.value);
assertEquals(4, productFunction.apply(is));
assertEquals(9, productFunction.apply(is));
assertEquals(0xa, readByte.apply(is));
assertEquals(0xb, readByte.apply(is));
assertEquals(0xc, readByte.apply(is));
assertEquals(-1, readByte.apply(is));
assertThrows(IOException.class, () -> throwException.apply(new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY)));
assertThrows(UncheckedIOException.class, () -> Optional.of("a").map(TestConstants.THROWING_IO_FUNCTION.asFunction()).get());
assertEquals("a", Optional.of("a").map(IOFunction.identity().asFunction()).get());
assertEquals(49, productFunction.apply(is));
assertEquals(49, productFunction.apply(is));
assertEquals(4, productFunction.apply(is));
assertEquals(9, productFunction.apply(is));
assertEquals(4, productFunction.get());
assertEquals(9, productFunction.get());
assertEquals(81, productFunction.get());
assertEquals(81, productFunction.get());
assertEquals(IOFunction.identity(), IOFunction.identity());
assertEquals(buf, identityFunction.apply(buf));
assertArrayEquals(buf, identityFunction.apply(buf));
assertEquals("ABC", tri.apply(ref1, ref2, ref3));
assertEquals(Character.valueOf('a'), ref1.get());
assertEquals(Short.valueOf((short) 1), ref2.get());
assertEquals("z", ref3.get());
assertEquals(BigInteger.TEN, tri.andThen(after).apply(ref1, ref2, ref3));
assertEquals(Character.valueOf('b'), ref1.get());
assertEquals(Short.valueOf((short) 2), ref2.get());
assertEquals("zz", ref3.get());
assertEquals("A1", ref.get());
assertThrows(UncheckedIOException.class, () -> Executors.callable(TestConstants.THROWING_IO_RUNNABLE.asRunnable()).call());
assertNull(Executors.callable(runnable.asRunnable()).call());
assertEquals("A1b", ref.get());
assertEquals("B2bb2B", ref.get());
assertEquals("A1", ref.get());
assertEquals("B12B", ref.get());
assertThrows(UncheckedIOException.class, () -> Optional.of("a").ifPresent(TestUtils.throwingIOConsumer().asConsumer()));
assertEquals("a1", ref.get());
assertThrows(IOExceptionList.class, () -> IOConsumer.forAll(TestUtils.throwingIOConsumer(), new String[] {"1"}));
assertEquals("12", ref.get());
assertThrows(IOExceptionList.class, () -> IOConsumer.forAll(TestUtils.throwingIOConsumer(), Arrays.asList("1")));
assertEquals("12", ref.get());
assertThrows(IOExceptionList.class, () -> IOConsumer.forAll(TestUtils.throwingIOConsumer(), Arrays.asList("1").stream()));
assertEquals("12", ref.get());
assertDoesNotThrow(() -> IOUtils.close(nullCloseable, noopConsumer));
assertDoesNotThrow(() -> IOUtils.close(new StringReader("s"), noopConsumer));
assertDoesNotThrow(() -> IOUtils.close(new ThrowOnCloseReader(new StringReader("s")), noopConsumer));
assertThrows(UncheckedIOException.class, () -> list.replaceAll(throwingIOUnaryOperator.asUnaryOperator()));
assertEquals("a", Optional.of("a").map(IOUnaryOperator.identity().asUnaryOperator()).get());
assertEquals("a", Optional.of("a").map(IOUnaryOperator.identity().asFunction()).get());
assertEquals(IOUnaryOperator.identity(), IOUnaryOperator.identity());
assertEquals(buf, identityFunction.apply(buf));
assertArrayEquals(buf, identityFunction.apply(buf));
assertThrows(UncheckedIOException.class,() -> Stream.of(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A).reduce((TestUtils.<Path>throwingIOBinaryOperator()).asBinaryOperator()).get());
assertEquals(TestConstants.ABS_PATH_A, Stream.of(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A).reduce(MAX_BY_BO).get());
assertEquals(TestConstants.ABS_PATH_A, Stream.of(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A).reduce(MIN_BY_BO).get());
assertEquals(TestConstants.ABS_PATH_A, Stream.of(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A).reduce(MAX_BY_BO).get());
assertEquals(TestConstants.ABS_PATH_B, asBiFunction.apply(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_B));
assertEquals(TestConstants.ABS_PATH_B, asBinaryOperator.apply(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_B));
assertEquals(TestConstants.ABS_PATH_A, Stream.of(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A).reduce(asBinaryOperator).get());
assertEquals(TestConstants.ABS_PATH_B, Stream.of(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_B).reduce(asBinaryOperator).get());
assertEquals(TestConstants.ABS_PATH_B, Stream.of(TestConstants.ABS_PATH_B, TestConstants.ABS_PATH_A).reduce(asBinaryOperator).get());
assertEquals(TestConstants.ABS_PATH_A, Stream.of(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A).reduce(MIN_BY_BO).get());
assertEquals(TestConstants.ABS_PATH_A, asBiFunction.apply(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_B));
assertEquals(TestConstants.ABS_PATH_A, asBinaryOperator.apply(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_B));
assertEquals(TestConstants.ABS_PATH_A, Stream.of(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A).reduce(asBinaryOperator).get());
assertEquals(TestConstants.ABS_PATH_A, Stream.of(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_B).reduce(asBinaryOperator).get());
assertEquals(TestConstants.ABS_PATH_A, Stream.of(TestConstants.ABS_PATH_B, TestConstants.ABS_PATH_A).reduce(asBinaryOperator).get());
assertEquals(expected, Files.list(current).reduce(REAL_PATH_BO).get());
assertEquals(0, REAL_PATH_COMP.asComparator().compare(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A));
assertThrows(UncheckedIOException.class,() -> TestConstants.THROWING_IO_COMPARATOR.asComparator().compare(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_B));
assertEquals(0, REAL_PATH_COMP.compare(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A));
assertEquals(0, PATH_SIZE_COMP.compare(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_A));
assertThrows(IOException.class, () -> TestConstants.THROWING_IO_COMPARATOR.compare(TestConstants.ABS_PATH_A, TestConstants.ABS_PATH_B));
assertThrows(UncheckedIOException.class, () -> Uncheck.accept((t, u) -> {throw new IOException();
assertThrows(UncheckedIOException.class, () -> Uncheck.accept(TestConstants.THROWING_IO_BI_CONSUMER, null, null));
assertEquals("new1", ref1.get());
assertEquals("new2", ref2.get());
assertThrows(UncheckedIOException.class, () -> Uncheck.accept(t -> {throw new IOException();
assertThrows(UncheckedIOException.class, () -> Uncheck.accept(TestUtils.throwingIOConsumer(), null));
assertEquals("new1", ref1.get());
assertThrows(UncheckedIOException.class, () -> Uncheck.accept((t, u, v) -> {throw new IOException();
assertThrows(UncheckedIOException.class, () -> Uncheck.accept(TestConstants.THROWING_IO_TRI_CONSUMER, null, null, null));
assertEquals("new1", ref1.get());
assertEquals("new2", ref2.get());
assertEquals("new3", ref3.get());
assertThrows(UncheckedIOException.class, () -> Uncheck.apply((t, u) -> {throw new IOException();
assertThrows(UncheckedIOException.class, () -> Uncheck.apply(TestConstants.THROWING_IO_BI_FUNCTION, null, null));
assertEquals("new0", Uncheck.apply((t, u) -> {TestUtils.compareAndSetThrows(ref1, t);
assertEquals("new1", ref1.get());
assertEquals("new2", ref2.get());
assertThrows(UncheckedIOException.class, () -> Uncheck.apply(t -> {throw new IOException();
assertThrows(UncheckedIOException.class, () -> Uncheck.apply(TestConstants.THROWING_IO_FUNCTION, null));
assertEquals("new1", ref1.get());
assertThrows(UncheckedIOException.class, () -> Uncheck.apply((t, u, v, w) -> {throw new IOException();
assertThrows(UncheckedIOException.class, () -> Uncheck.apply(TestConstants.THROWING_IO_QUAD_FUNCTION, null, null, null, null));
assertEquals("new0", Uncheck.apply((t, u, v, w) -> {TestUtils.compareAndSetThrows(ref1, t);
assertEquals("new1", ref1.get());
assertEquals("new2", ref2.get());
assertEquals("new3", ref3.get());
assertEquals("new4", ref4.get());
assertThrows(UncheckedIOException.class, () -> Uncheck.apply((t, u, v) -> {throw new IOException();
assertThrows(UncheckedIOException.class, () -> Uncheck.apply(TestConstants.THROWING_IO_TRI_FUNCTION, null, null, null));
assertEquals("new0", Uncheck.apply((t, u, v) -> {TestUtils.compareAndSetThrows(ref1, t);
assertEquals("new1", ref1.get());
assertEquals("new2", ref2.get());
assertEquals("new3", ref3.get());
assertThrows(UncheckedIOException.class, () -> Uncheck.get(() -> {throw new IOException();
assertThrows(UncheckedIOException.class, () -> Uncheck.get(TestConstants.THROWING_IO_SUPPLIER));
assertEquals("new1", Uncheck.get(() -> TestUtils.compareAndSetThrows(ref1, "new1")));
assertEquals("new1", ref1.get());
assertThrows(UncheckedIOException.class, () -> Uncheck.run(() -> {throw new IOException();
assertThrows(UncheckedIOException.class, () -> Uncheck.run(TestConstants.THROWING_IO_RUNNABLE));
assertEquals("new1", ref1.get());
assertThrows(UncheckedIOException.class, () -> Uncheck.test(t -> {throw new IOException();
assertThrows(UncheckedIOException.class, () -> Uncheck.test(TestConstants.THROWING_IO_PREDICATE, null));
assertTrue(Uncheck.test(t -> TestUtils.compareAndSetThrows(ref1, t).equals(t), "new1"));
assertEquals("new1", ref1.get());
assertEquals("A1", ref.get());
assertEquals("B22B", ref.get());
assertThrows(UncheckedIOException.class, () -> map.forEach(TestConstants.THROWING_IO_BI_CONSUMER.asBiConsumer()));
assertEquals("a1", ref.get());
assertEquals(true, isDirectory.apply(PathUtils.current(), PathUtils.EMPTY_LINK_OPTION_ARRAY));
assertEquals(false, andThen.apply(PathUtils.current(), PathUtils.EMPTY_LINK_OPTION_ARRAY));
assertEquals(true, isDirectory.apply(PathUtils.current(), PathUtils.EMPTY_LINK_OPTION_ARRAY));
assertThrows(IOException.class, () -> isDirectory.apply(PathUtils.current(), PathUtils.EMPTY_LINK_OPTION_ARRAY));
assertNotEquals(0L, map.get("1"));
assertNull(IOBiFunction.noop().apply(null, null));
private void assertThrowsChecked(final Executable executable) {assertThrows(IOException.class, executable);
private void assertThrowsUnchecked(final Executable executable) {assertThrows(UncheckedIOException.class, executable);
assertFalse(IS_HIDDEN.and(IS_HIDDEN).test(PATH_FIXTURE));
assertTrue(IOPredicate.alwaysTrue().and(IOPredicate.alwaysTrue()).test(PATH_FIXTURE));
assertFalse(IOPredicate.alwaysFalse().and(IOPredicate.alwaysTrue()).test(PATH_FIXTURE));
assertFalse(IOPredicate.alwaysTrue().and(IOPredicate.alwaysFalse()).test(PATH_FIXTURE));
assertFalse(IOPredicate.alwaysFalse().and(IOPredicate.alwaysFalse()).test(PATH_FIXTURE));
assertThrowsUnchecked(() -> THROWING_UNCHECKED_PREDICATE.and(THROWING_UNCHECKED_PREDICATE).test(PATH_FIXTURE));
assertFalse(list.contains("A"));
assertFalse(list.contains("B"));
assertFalse(IS_HIDDEN.test(PATH_FIXTURE));
assertFalse(Constants.IO_PREDICATE_FALSE.test("A"));
assertFalse(alwaysFalse.test("A"));
assertEquals(IOPredicate.alwaysFalse(), IOPredicate.alwaysFalse());
assertSame(IOPredicate.alwaysFalse(), IOPredicate.alwaysFalse());
assertThrowsChecked(() -> IOPredicate.isEqual(THROWING_EQUALS).test("B"));
assertFalse(IOPredicate.isEqual(null).test("A"));
assertTrue(IOPredicate.isEqual("B").test("B"));
assertFalse(IOPredicate.isEqual("A").test("B"));
assertFalse(IOPredicate.isEqual("B").test("A"));
assertThrowsUnchecked(() -> IOPredicate.isEqual(THROWING_EQUALS).asPredicate().test("B"));
assertFalse(IOPredicate.isEqual(null).asPredicate().test("A"));
assertTrue(IOPredicate.isEqual("B").asPredicate().test("B"));
assertFalse(IOPredicate.isEqual("A").asPredicate().test("B"));
assertFalse(IOPredicate.isEqual("B").asPredicate().test("A"));
assertTrue(IS_HIDDEN.negate().test(PATH_FIXTURE));
assertFalse(IOPredicate.alwaysTrue().negate().test(PATH_FIXTURE));
assertTrue(IS_HIDDEN.negate().asPredicate().test(PATH_FIXTURE));
assertTrue(IS_HIDDEN.asPredicate().negate().test(PATH_FIXTURE));
assertThrowsUnchecked(() -> THROWING_UNCHECKED_PREDICATE.negate().test(PATH_FIXTURE));
assertFalse(IS_HIDDEN.or(IS_HIDDEN).test(PATH_FIXTURE));
assertTrue(IOPredicate.alwaysTrue().or(IOPredicate.alwaysFalse()).test(PATH_FIXTURE));
assertTrue(IOPredicate.alwaysFalse().or(IOPredicate.alwaysTrue()).test(PATH_FIXTURE));
assertFalse(IS_HIDDEN.asPredicate().or(e -> false).test(PATH_FIXTURE));
assertThrowsUnchecked(() -> THROWING_UNCHECKED_PREDICATE.or(THROWING_UNCHECKED_PREDICATE).test(PATH_FIXTURE));
assertThrowsChecked(() -> TestConstants.THROWING_IO_PREDICATE.test(null));
assertTrue(Constants.IO_PREDICATE_TRUE.test("A"));
assertThrowsUnchecked(() -> THROWING_UNCHECKED_PREDICATE.test(null));
assertTrue(Constants.IO_PREDICATE_TRUE.asPredicate().test("A"));
assertTrue(Constants.IO_PREDICATE_TRUE.test("A"));
assertTrue(alwaysTrue.test("A"));
assertEquals(IOPredicate.alwaysTrue(), IOPredicate.alwaysTrue());
assertSame(IOPredicate.alwaysTrue(), IOPredicate.alwaysTrue());
assertEquals("ABCD", quad.apply(ref1, ref2, ref3, ref4));
assertEquals(Byte.valueOf("1"), ref1.get());
assertEquals(Short.valueOf((short) 1), ref2.get());
assertEquals("z", ref3.get());
assertEquals(Long.valueOf(2), ref4.get());
assertEquals(BigInteger.TEN, quad.andThen(after).apply(ref1, ref2, ref3, ref4));
assertEquals(Byte.valueOf("2"), ref1.get());
assertEquals(Short.valueOf((short) 2), ref2.get());
assertEquals("zz", ref3.get());
assertEquals(Long.valueOf(3), ref4.get());
assertThrows(UncheckedIOException.class, () -> TestConstants.THROWING_IO_SUPPLIER.asSupplier().get());
assertEquals("new1", getThrowsNone(() -> TestUtils.compareAndSetThrows(ref1, "new1")));
assertEquals("new1", ref1.get());
assertNotEquals(TestConstants.THROWING_IO_SUPPLIER.asSupplier(), TestConstants.THROWING_IO_SUPPLIER.asSupplier());
assertThrows(IOException.class, () -> TestConstants.THROWING_IO_SUPPLIER.get());
assertThrows(IOException.class, () -> {throw new IOException();
assertEquals("new1", getThrows(() -> TestUtils.compareAndSetThrows(ref1, "new1")));
assertEquals("new1", ref1.get());
assertTrue(realOuter.mkdirs());
assertTrue(realInner.mkdirs());
assertEquals(1, realInner.list().length);
assertTrue(randomDirectory.mkdirs());
assertEquals(1, randomDirectory.list().length);
assertTrue(setupSymlink(randomDirectory, symlinkDirectory));
assertEquals(1, symlinkDirectory.list().length);
// assert contents of the real directory were removed including the symlinkFileUtils.cleanDirectory(realOuter);
assertEquals(0, realOuter.list().length);
assertEquals(1, randomDirectory.list().length, "Contents of sym link should not have been removed");
assertTrue(realParent.mkdirs());
assertTrue(realInner.mkdirs());
assertEquals(1, realInner.list().length);
assertTrue(randomDirectory.mkdirs());
assertEquals(1, randomDirectory.list().length);
assertTrue(setupSymlink(randomDirectory, symlinkDirectory));
assertEquals(1, symlinkDirectory.list().length);
assertTrue(setupSymlink(realParent, symlinkParentDirectory));
// assert contents of the real directory were removed including the symlinkFileUtils.cleanDirectory(symlinkParentDirectory);// should clean the contents of this but not recurse into other links
assertEquals(0, symlinkParentDirectory.list().length);
assertEquals(0, realParent.list().length);
assertEquals(1, randomDirectory.list().length, "Contents of sym link should not have been removed");
assertTrue(realOuter.mkdirs());
assertTrue(realInner.mkdirs());
assertEquals(1, realInner.list().length);
assertTrue(setupSymlink(randomFile, symlinkFile));
assertEquals(2, realInner.list().length);
// assert contents of the real directory were removed including the symlinkFileUtils.cleanDirectory(realOuter);
assertEquals(0, realOuter.list().length);
assertTrue(randomFile.exists());
assertFalse(symlinkFile.exists());
assertTrue(realParent.mkdirs());
assertTrue(setupSymlink(realParent, symlinkParentDirectory));
assertTrue(realChild.mkdirs());
assertTrue(setupSymlink(realChild, symlinkChild));
assertTrue(FileUtils.isSymlink(symlinkChild));
assertFalse(FileUtils.isSymlink(realChild));
assertTrue(setupSymlink(noexistFile, symlinkFile));
assertTrue(FileUtils.isSymlink(symlinkFile));
assertFalse(FileUtils.isSymlink(noexistFile));
assertFalse(FileUtils.isSymlink(noexistParentFile));
assertFalse(FileUtils.isSymlink(badSymlinkInPathFile));
assertTrue(randomDirectory.mkdirs());
assertTrue(setupSymlink(randomDirectory, symlinkDirectory));
assertTrue(FileUtils.isSymlink(symlinkDirectory));
assertFalse(FileUtils.isSymlink(randomDirectory));
assertTrue(setupSymlink(randomFile, symlinkFile));
assertTrue(FileUtils.isSymlink(symlinkFile));
assertFalse(FileUtils.isSymlink(randomFile));
assertTrue(randomDirectory.mkdirs());
assertEquals(1, randomDirectory.list().length);
assertTrue(setupSymlink(randomDirectory, symlinkDirectory));
assertEquals(0, symlinkDirectory.list().length);
assertEquals(0, randomDirectory.list().length);
assertNotNull(thread, "getInput()");
assertNotNull(output, "getOutput()");
assertEquals(DATA1, getInput(T1), "Data1");
assertEquals(DATA2, getInput(T2), "Data2");
assertEquals(DATA3, getInput(T3), "Data3");
assertEquals(DATA4, getInput(T4), "Data4");
assertEquals(DATA1, getOutput(T1), "Data1");
assertEquals(DATA2, getOutput(T2), "Data2");
assertEquals(DATA3, getOutput(T3), "Data3");
assertEquals(DATA4, getOutput(T4), "Data4");
assertEquals(IOUtils.EOF, input.read());
private static void assertExceptionTypeAndMessage(final File srcDir, final File destDir,final Class<? extends Exception> expectedExceptionType, final String expectedMessage) {try {FileUtils.copyDirectoryToDirectory(srcDir, destDir);
assertEquals(expectedExceptionType, e.getClass());
assertEquals(expectedMessage, msg);
private void assertAclEntryList(final Path sourcePath, final Path destPath) throws IOException {assertEquals(PathUtils.getAclEntryList(sourcePath), PathUtils.getAclEntryList(destPath));
assertExceptionTypeAndMessage(srcDir, destDir, IllegalArgumentException.class, expectedMessage);
assertExceptionTypeAndMessage(srcDir.toFile(), destDir, IllegalArgumentException.class, expectedMessage);
assertExceptionTypeAndMessage(srcDir, destDir, NullPointerException.class, "destinationDir");
assertExceptionTypeAndMessage(srcDir, destinationDirectory, NullPointerException.class, "sourceDir");
assertAclEntryList(sourcePath.get(), destPath);
assertAclEntryList(sourcePath.get(), destPath);
assertAclEntryList(sourcePath.get(), destPath);
assertAclEntryList(sourcePath.get(), destPath);
assertEquals(wantedResult, FileUtils.isFileNewer(file, fileTime), () -> description + " - FileTime");
assertEquals(wantedResult, FileUtils.isFileNewer(file, fileTime.toInstant()), () -> description + " - Instant");
assertEquals(fileTime, Files.getLastModifiedTime(temporaryFile.toPath()), "The temporary file hasn't the right last modification date");
assertEquals(wantedResult, FileUtils.isFileNewer(file, temporaryFile), () -> description + " - file");
assertThrows(NullPointerException.class, () -> FileUtils.isFileNewer(testFile1, (Date) null), "date");
assertThrows(NullPointerException.class, () -> FileUtils.isFileNewer(null, 0), "file");
assertThrows(NullPointerException.class, () -> FileUtils.isFileNewer(testFile1, (File) null), "reference");
assertEquals(ByteOrder.BIG_ENDIAN, parseByteOrder("BIG_ENDIAN"));
assertEquals(ByteOrder.LITTLE_ENDIAN, parseByteOrder("LITTLE_ENDIAN"));
assertThrows(IllegalArgumentException.class, () -> parseByteOrder("some value"));
assertEquals(-1, exception.getIndex());
assertNull(exception.getCause());
assertNotNull(exception.getMessage());
assertEquals(0, exception.getIndex());
assertEquals(e, exception.getCause());
assertNotNull(exception.getMessage());
assertEquals(0, tempDirFile.list().length);
assertEquals(0, tempDirFile.list().length);
assertTrue(nested.mkdirs());
assertEquals(1, tempDirFile.list().length);
assertEquals(0, tempDirFile.list().length);
assertEquals(2, tempDirFile.list().length);
assertEquals(0, tempDirFile.list().length);
assertEquals("Unknown I/O error listing contents of directory: " + tempDirFile.getAbsolutePath(), e.getMessage());
assertTrue(subDir.mkdir());
assertTrue(subDir.exists());
assertTrue(subFile.exists());
assertFalse(subDir.exists());
assertFalse(subFile.exists());
assertFalse(subDir.exists());
assertTrue(subDir.mkdir());
assertTrue(subDir.exists());
assertTrue(subFile.exists());
assertThrows(IOException.class, () -> FileDeleteStrategy.NORMAL.delete(subDir));
assertTrue(subDir.exists());
assertTrue(subFile.exists());
assertTrue(subDir.exists());
assertFalse(subFile.exists());
assertFalse(subDir.exists());
assertFalse(subDir.exists());
assertThrows(NullPointerException.class, () -> FileDeleteStrategy.NORMAL.delete(null));
assertTrue(FileDeleteStrategy.NORMAL.deleteQuietly(null));
assertTrue(subDir.mkdir());
assertTrue(subDir.exists());
assertTrue(subFile.exists());
assertFalse(FileDeleteStrategy.NORMAL.deleteQuietly(subDir));
assertTrue(subDir.exists());
assertTrue(subFile.exists());
assertTrue(FileDeleteStrategy.NORMAL.deleteQuietly(subFile));
assertTrue(subDir.exists());
assertFalse(subFile.exists());
assertTrue(FileDeleteStrategy.NORMAL.deleteQuietly(subDir));
assertFalse(subDir.exists());
assertTrue(FileDeleteStrategy.NORMAL.deleteQuietly(subDir));  // no error
assertFalse(subDir.exists());
assertEquals("FileDeleteStrategy[Normal]", FileDeleteStrategy.NORMAL.toString());
assertEquals("FileDeleteStrategy[Force]", FileDeleteStrategy.FORCE.toString());
assertTrue(FileUtils.directoryContains(directory1, file1ByRelativeDirectory2));
assertTrue(FileUtils.directoryContains(directory2, file2ByRelativeDirectory1));
assertFalse(FileUtils.directoryContains(directory1, file2ByRelativeDirectory1));
assertFalse(FileUtils.directoryContains(directory2, file1ByRelativeDirectory2));
assertTrue(FileUtils.directoryContains(top, directory1));
assertTrue(FileUtils.directoryContains(top, directory2));
assertTrue(FileUtils.directoryContains(top, directory3));
assertTrue(FileUtils.directoryContains(directory2, directory3));
assertTrue(FileUtils.directoryContains(directory1, file1));
assertTrue(FileUtils.directoryContains(directory2, file2));
assertFalse(FileUtils.directoryContains(directory1, file2));
assertFalse(FileUtils.directoryContains(directory2, file1));
assertFalse(FileUtils.directoryContains(directory1, file3));
assertFalse(FileUtils.directoryContains(directory2, file3));
assertFalse(FileUtils.directoryContains(directory1, top));
assertFalse(FileUtils.directoryContains(directory2, top));
assertFalse(FileUtils.directoryContains(directory3, top));
assertFalse(FileUtils.directoryContains(directory3, directory2));
assertFalse(dir.exists());
assertThrows(IllegalArgumentException.class, () -> FileUtils.directoryContains(dir, file1));
assertFalse(FileUtils.directoryContains(top, null));
assertFalse(file.exists());
assertFalse(FileUtils.directoryContains(top, file));
assertTrue(top.exists(), "Check directory exists");
assertFalse(file.exists(), "Check file does not exist");
assertFalse(FileUtils.directoryContains(top, file), "Directory does not contain unrealized file");
assertFalse(FileUtils.directoryContains(foo, foobar));
assertFalse(FileUtils.directoryContains(foo, fooTxt));
assertFalse(FileUtils.directoryContains(directory1, fooFile));
assertThrows(IllegalArgumentException.class, () -> FileUtils.directoryContains(file1, file1));
assertFalse(dir.exists());
assertFalse(file.exists());
assertThrows(IllegalArgumentException.class, () -> FileUtils.directoryContains(dir, file));
private void assertLines(final List<String> lines, final LineIterator iterator) {try {for (int i = 0; i < lines.size(); i++) {
assertEquals(lines.get(i), line, "nextLine() line " + i);
assertFalse(iterator.hasNext(), "No more expected");
assertThrows(UnsupportedOperationException.class, iterator::remove);
assertEquals(lines.get(idx), line, "Comparing line " + idx);
assertTrue(idx < lines.size(), "Exceeded expected idx=" + idx + " size=" + lines.size());
assertEquals(idx, lines.size(), "Line Count doesn't match");
assertThrows(NoSuchElementException.class, iterator::next);
assertThrows(NoSuchElementException.class, iterator::nextLine);
assertNotNull("Line expected", iterator.next());
assertTrue(iterator.hasNext(), "More expected");
assertFalse(iterator.hasNext(), "No more expected");
assertThrows(NoSuchElementException.class, iterator::next);
assertThrows(NoSuchElementException.class, iterator::nextLine);
assertThrows(NoSuchElementException.class, iterator::next);
assertThrows(NoSuchElementException.class, iterator::nextLine);
assertThrows(NullPointerException.class, () -> new LineIterator(null));
assertThrows(UnsupportedOperationException.class, iterator::remove);
assertEquals(lines.get(idx), line, "Comparing line " + idx);
assertTrue(idx < lines.size(), "Exceeded expected idx=" + idx + " size=" + lines.size());
assertEquals(9, lines.size(), "Line Count doesn't match");
assertEquals(9, idx, "Line Count doesn't match");
assertEquals(6, actualLines, "Line Count doesn't match");
assertThrows(NoSuchElementException.class, iterator::next);
assertThrows(NoSuchElementException.class, iterator::nextLine);
assertThrows(UnsupportedCharsetException.class, () -> FileUtils.lineIterator(testFile, encoding));
assertThrows(NoSuchFileException.class, () -> FileUtils.lineIterator(testFile, UTF_8));
assertLines(lines, iterator);
assertLines(lines, iterator);
assertLines(lines, iterator);
assertEquals(lines.get(i), line, "next() line " + i);
assertFalse(iterator.hasNext(), "No more expected");
assertThrows(IllegalStateException.class, li::hasNext);
assertNotNull(iterator.next());
assertEquals(3, count);
assertNotNull(Charset.forName(ByteOrderMark.UTF_8.getCharsetName()));
assertNotNull(Charset.forName(ByteOrderMark.UTF_16BE.getCharsetName()));
assertNotNull(Charset.forName(ByteOrderMark.UTF_16LE.getCharsetName()));
assertNotNull(Charset.forName(ByteOrderMark.UTF_32BE.getCharsetName()));
assertNotNull(Charset.forName(ByteOrderMark.UTF_32LE.getCharsetName()));
assertThrows(NullPointerException.class, () -> new ByteOrderMark(null, 1, 2, 3));
assertThrows(IllegalArgumentException.class, () -> new ByteOrderMark("", 1, 2, 3));
assertThrows(NullPointerException.class, () -> new ByteOrderMark("a", (int[]) null));
assertThrows(IllegalArgumentException.class, () -> new ByteOrderMark("b"));
assertEquals(TEST_BOM_1, TEST_BOM_1, "test1 equals");
assertEquals(TEST_BOM_2, TEST_BOM_2, "test2 equals");
assertEquals(TEST_BOM_3, TEST_BOM_3, "test3 equals");
assertNotEquals(TEST_BOM_1, new Object(), "Object not equal");
assertNotEquals(TEST_BOM_1, new ByteOrderMark("1a", 2), "test1-1 not equal");
assertNotEquals(TEST_BOM_1, new ByteOrderMark("1b", 1, 2), "test1-2 not test2");
assertNotEquals(TEST_BOM_2, new ByteOrderMark("2", 1, 1), "test2 not equal");
assertNotEquals(TEST_BOM_3, new ByteOrderMark("3", 1, 2, 4), "test3 not equal");
assertArrayEquals(TEST_BOM_1.getBytes(), new byte[]{(byte) 1}, "test1 bytes");
assertArrayEquals(TEST_BOM_1.getBytes(), new byte[]{(byte) 1}, "test1 bytes");
assertArrayEquals(TEST_BOM_2.getBytes(), new byte[]{(byte) 1, (byte) 2}, "test1 bytes");
assertArrayEquals(TEST_BOM_3.getBytes(), new byte[]{(byte) 1, (byte) 2, (byte) 3}, "test1 bytes");
assertEquals("test1", TEST_BOM_1.getCharsetName(), "test1 name");
assertEquals("test2", TEST_BOM_2.getCharsetName(), "test2 name");
assertEquals("test3", TEST_BOM_3.getCharsetName(), "test3 name");
assertEquals(1, TEST_BOM_1.get(0), "test1 get(0)");
assertEquals(1, TEST_BOM_2.get(0), "test2 get(0)");
assertEquals(2, TEST_BOM_2.get(1), "test2 get(1)");
assertEquals(1, TEST_BOM_3.get(0), "test3 get(0)");
assertEquals(2, TEST_BOM_3.get(1), "test3 get(1)");
assertEquals(3, TEST_BOM_3.get(2), "test3 get(2)");
assertEquals(bomClassHash + 1, TEST_BOM_1.hashCode(), "hash test1 ");
assertEquals(bomClassHash + 3, TEST_BOM_2.hashCode(), "hash test2 ");
assertEquals(bomClassHash + 6, TEST_BOM_3.hashCode(), "hash test3 ");
assertEquals(1, TEST_BOM_1.length(), "test1 length");
assertEquals(2, TEST_BOM_2.length(), "test2 length");
assertEquals(3, TEST_BOM_3.length(), "test3 length");
assertEquals("ByteOrderMark[test1: 0x1]",          TEST_BOM_1.toString(), "test1 ");
assertEquals("ByteOrderMark[test2: 0x1,0x2]",      TEST_BOM_2.toString(), "test2 ");
assertEquals("ByteOrderMark[test3: 0x1,0x2,0x3]",  TEST_BOM_3.toString(), "test3 ");
assertThrows(EOFException.class, () -> EndianUtils.readSwappedDouble(input));
assertEquals( d1, d2, 0.0 );
assertEquals( d1, EndianUtils.readSwappedDouble( input ), 0.0 );
assertEquals( f1, f2, 0.0 );
assertEquals( f1, EndianUtils.readSwappedFloat( input ), 0.0 );
assertEquals( 0x01020304, EndianUtils.readSwappedInteger( bytes, 0 ) );
assertEquals( 0x01020304, EndianUtils.readSwappedInteger( input ) );
assertEquals( 0x0102030405060708L, EndianUtils.readSwappedLong( bytes, 0 ) );
assertEquals( 0x0102030405060708L, EndianUtils.readSwappedLong( input ) );
assertEquals( 0x0102, EndianUtils.readSwappedShort( bytes, 0 ) );
assertEquals( 0x0102, EndianUtils.readSwappedShort( input ) );
assertEquals( 0x0000000001020304L, EndianUtils.readSwappedUnsignedInteger( bytes, 0 ) );
assertEquals( 0x0000000001020304L, EndianUtils.readSwappedUnsignedInteger( input ) );
assertEquals( 0x00000102, EndianUtils.readSwappedUnsignedShort( bytes, 0 ) );
assertEquals( 0x00000102, EndianUtils.readSwappedUnsignedShort( input ) );
assertEquals( 0.0, EndianUtils.swapDouble( 0.0 ), 0.0 );
assertEquals( d2, EndianUtils.swapDouble( d1 ), 0.0 );
assertEquals( 0.0f, EndianUtils.swapFloat( 0.0f ), 0.0 );
assertEquals( f2, EndianUtils.swapFloat( f1 ), 0.0 );
assertEquals( 0, EndianUtils.swapInteger( 0 ) );
assertEquals( 0x04030201, EndianUtils.swapInteger( 0x01020304 ) );
assertEquals( 0x01000000, EndianUtils.swapInteger( 0x00000001 ) );
assertEquals( 0x00000001, EndianUtils.swapInteger( 0x01000000 ) );
assertEquals( 0x11111111, EndianUtils.swapInteger( 0x11111111 ) );
assertEquals( 0xabcdef10, EndianUtils.swapInteger( 0x10efcdab ) );
assertEquals( 0xab, EndianUtils.swapInteger( 0xab000000 ) );
assertEquals( 0, EndianUtils.swapLong( 0 ) );
assertEquals( 0x0807060504030201L, EndianUtils.swapLong( 0x0102030405060708L ) );
assertEquals( 0xffffffffffffffffL, EndianUtils.swapLong( 0xffffffffffffffffL ) );
assertEquals( 0xab, EndianUtils.swapLong( 0xab00000000000000L ) );
assertEquals( (short) 0, EndianUtils.swapShort( (short) 0 ) );
assertEquals( (short) 0x0201, EndianUtils.swapShort( (short) 0x0102 ) );
assertEquals( (short) 0xffff, EndianUtils.swapShort( (short) 0xffff ) );
assertEquals( (short) 0x0102, EndianUtils.swapShort( (short) 0x0201 ) );
assertEquals( (short) 0x0102, EndianUtils.swapShort( EndianUtils.swapShort( (short) 0x0102 ) ) );
assertEquals( 0x01020304, EndianUtils.swapInteger( EndianUtils.swapInteger( 0x01020304 ) ) );
assertEquals( 0x0102030405060708L, EndianUtils.swapLong( EndianUtils.swapLong( 0x0102030405060708L ) ) );
assertEquals( f1, EndianUtils.swapFloat( EndianUtils.swapFloat( f1 ) ), 0.0 );
assertEquals( d1, EndianUtils.swapDouble( EndianUtils.swapDouble( d1 ) ), 0.0 );
assertEquals( ln1, ln2 );
assertEquals( test, val, 0 );
assertEquals(expected, actual, "readSwappedUnsignedInteger(byte[], int) was incorrect");
assertEquals(expected, actual, "readSwappedUnsignedInteger(InputStream) was incorrect");
assertEquals( 0x08, bytes[0] );
assertEquals( 0x07, bytes[1] );
assertEquals( 0x06, bytes[2] );
assertEquals( 0x05, bytes[3] );
assertEquals( 0x04, bytes[4] );
assertEquals( 0x03, bytes[5] );
assertEquals( 0x02, bytes[6] );
assertEquals( 0x01, bytes[7] );
assertEquals( 0x08, bytes[0] );
assertEquals( 0x07, bytes[1] );
assertEquals( 0x06, bytes[2] );
assertEquals( 0x05, bytes[3] );
assertEquals( 0x04, bytes[4] );
assertEquals( 0x03, bytes[5] );
assertEquals( 0x02, bytes[6] );
assertEquals( 0x01, bytes[7] );
assertEquals( 0x04, bytes[0] );
assertEquals( 0x03, bytes[1] );
assertEquals( 0x02, bytes[2] );
assertEquals( 0x01, bytes[3] );
assertEquals( 0x04, bytes[0] );
assertEquals( 0x03, bytes[1] );
assertEquals( 0x02, bytes[2] );
assertEquals( 0x01, bytes[3] );
assertEquals( 0x04, bytes[0] );
assertEquals( 0x03, bytes[1] );
assertEquals( 0x02, bytes[2] );
assertEquals( 0x01, bytes[3] );
assertEquals( 0x04, bytes[0] );
assertEquals( 0x03, bytes[1] );
assertEquals( 0x02, bytes[2] );
assertEquals( 0x01, bytes[3] );
assertEquals( 0x08, bytes[0] );
assertEquals( 0x07, bytes[1] );
assertEquals( 0x06, bytes[2] );
assertEquals( 0x05, bytes[3] );
assertEquals( 0x04, bytes[4] );
assertEquals( 0x03, bytes[5] );
assertEquals( 0x02, bytes[6] );
assertEquals( 0x01, bytes[7] );
assertEquals( 0x08, bytes[0] );
assertEquals( 0x07, bytes[1] );
assertEquals( 0x06, bytes[2] );
assertEquals( 0x05, bytes[3] );
assertEquals( 0x04, bytes[4] );
assertEquals( 0x03, bytes[5] );
assertEquals( 0x02, bytes[6] );
assertEquals( 0x01, bytes[7] );
assertEquals( 0x02, bytes[0] );
assertEquals( 0x01, bytes[1] );
assertEquals( 0x02, bytes[0] );
assertEquals( 0x01, bytes[1] );
assertEquals(expectedMessage, throwable.getMessage());
assertEquals(expectedCause, throwable.getCause());
assertSame(expectedCause, throwable.getCause());
assertTrue(TaggedIOException.isTaggedWith(tagged, tag));
assertFalse(TaggedIOException.isTaggedWith(tagged, UUID.randomUUID()));
assertEquals(exception, tagged.getCause());
assertEquals(exception.getMessage(), tagged.getMessage());
assertEquals("ISO-8859-1", Charsets.ISO_8859_1.name());
assertEquals(requiredCharsets.get("US-ASCII").name(), "US-ASCII");
assertEquals(requiredCharsets.get("ISO-8859-1").name(), "ISO-8859-1");
assertEquals(requiredCharsets.get("UTF-8").name(), "UTF-8");
assertEquals(requiredCharsets.get("UTF-16").name(), "UTF-16");
assertEquals(requiredCharsets.get("UTF-16BE").name(), "UTF-16BE");
assertEquals(requiredCharsets.get("UTF-16LE").name(), "UTF-16LE");
assertEquals(Charset.defaultCharset(), Charsets.toCharset((String) null));
assertEquals(Charset.defaultCharset(), Charsets.toCharset((Charset) null));
assertEquals(Charset.defaultCharset(), Charsets.toCharset(Charset.defaultCharset()));
assertEquals(StandardCharsets.UTF_8, Charsets.toCharset(StandardCharsets.UTF_8));
assertEquals(null, Charsets.toCharset((String) null, null));
assertEquals(Charset.defaultCharset(), Charsets.toCharset((String) null, Charset.defaultCharset()));
assertEquals(Charset.defaultCharset(), Charsets.toCharset((Charset) null, Charset.defaultCharset()));
assertEquals(null, Charsets.toCharset((Charset) null, null));
assertEquals(Charset.defaultCharset(), Charsets.toCharset(Charset.defaultCharset(), Charset.defaultCharset()));
assertEquals(StandardCharsets.UTF_8, Charsets.toCharset(StandardCharsets.UTF_8, Charset.defaultCharset()));
assertEquals(StandardCharsets.UTF_8, Charsets.toCharset(StandardCharsets.UTF_8, null));
assertEquals("US-ASCII", Charsets.US_ASCII.name());
assertEquals("UTF-16", Charsets.UTF_16.name());
assertEquals("UTF-16BE", Charsets.UTF_16BE.name());
assertEquals("UTF-16LE", Charsets.UTF_16LE.name());
assertEquals("UTF-8", Charsets.UTF_8.name());
assertEquals(outputArray.length, actualOutput.length, "array size mismatch");
assertEquals(outputArray[j], actualOutput[j], "array[ " + j + "] mismatch");
assertEquals(outputArray.length, actualOutput.length, "array size mismatch");
assertEquals(outputArray[j], actualOutput[j], "array[ " + j + "] mismatch");
assertEquals(outputArray.length, actualOutput.length, "array size mismatch");
assertEquals(outputArray[j], actualOutput[j], "array[ " + j + "] mismatch");
assertEquals(outputArray.length, actualOutput.length, "array size mismatch");
assertEquals(outputArray[j], actualOutput[j], "array[ " + j + "] mismatch");
assertThrows(ArrayIndexOutOfBoundsException.class, () -> HexDump.dump(testArray, 0x10000000, new ByteArrayOutputStream(), -1));
assertThrows(ArrayIndexOutOfBoundsException.class, () -> HexDump.dump(testArray, 0x10000000, new ByteArrayOutputStream(), testArray.length));
assertThrows(NullPointerException.class, () -> HexDump.dump(testArray, 0x10000000, null, 0));
assertEquals(FileSystem.WINDOWS, FileSystem.getCurrent());
assertEquals(FileSystem.LINUX, FileSystem.getCurrent());
assertEquals(FileSystem.MAC_OSX, FileSystem.getCurrent());
assertFalse(fs.isLegalFileName(""), fs.name()); // Empty is always illegal
assertFalse(fs.isLegalFileName(null), fs.name()); // null is always illegal
assertFalse(fs.isLegalFileName("\0"), fs.name()); // Assume NUL is always illegal
assertTrue(fs.isLegalFileName("0"), fs.name()); // Assume simple name always legal
assertFalse(fs.isLegalFileName(candidate));
assertTrue(fs.isReservedFileName(candidate));
assertTrue(fs.isReservedFileName(candidate));
assertTrue(fs.isReservedFileName(candidate + ".txt"), candidate);
//            assertTrue(fs.isReservedFileName(candidate));
//            assertEquals(exists, Files.exists(path), path.toString());
assertTrue(iae.getMessage().startsWith("The replacement character '\\0'"), iae.getMessage());
assertTrue(chars[i] < chars[i + 1], fs.name());
assertTrue(FileSystem.WINDOWS.supportsDriveLetter());
assertFalse(FileSystem.GENERIC.supportsDriveLetter());
assertFalse(FileSystem.LINUX.supportsDriveLetter());
assertFalse(FileSystem.MAC_OSX.supportsDriveLetter());
assertEquals(replacement, fs.toLegalFileName(String.valueOf(i), replacement).charAt(0));
assertEquals(replacement, fs.toLegalFileName(String.valueOf(i), replacement).charAt(0));
assertEquals(i, fs.toLegalFileName(String.valueOf(i), replacement).charAt(0));
assertEquals(i, fs.toLegalFileName(String.valueOf(i), replacement).charAt(0));
assertEquals(i, fs.toLegalFileName(String.valueOf(i), replacement).charAt(0));
assertNull(monitor, "Timeout -1, Monitor should be null");
assertNull(monitor, "Timeout 0, Monitor should be null");
assertThrows(InterruptedException.class, () -> {final Thread monitor = ThreadMonitor.start(Duration.ofMillis(100));
assertTrue(nested.mkdirs());
assertEquals("Cannot delete file: " + file.getAbsolutePath(), list.getCause(0).getMessage());
assertEquals(0, top.list().length);
assertTrue(nested.mkdirs());
assertEquals("Unknown I/O error listing contents of directory: " + nested.getAbsolutePath(), e.getMessage());
assertEquals(0, top.list().length);
assertFalse(cancelled);
assertFalse(cancelled);
assertTrue(results.contains(files[i]), prefix + "["+i+"] " + files[i]);
assertTrue(results.contains(files[i].toString()), prefix + "["+i+"] " + files[i]);
assertEquals(cancelName, cancel.getFile().getName(), "File:  " + cancelName);
assertEquals(5, cancel.getDepth(), "Depth: " + cancelName);
assertEquals(cancelName, cancel.getFile().getName(), "File:  " + cancelName);
assertEquals(3, cancel.getDepth(), "Depth: " + cancelName);
assertEquals(cancelName, lastFile.getName(), "Suppress:  " + cancelName);
assertEquals(1 + dirs.length + ioFiles.length + outputFiles.length, results.size(), "Result Size");
assertTrue(results.contains(javaDir), "Start Dir");
assertEquals(1, results.size(), "[A] Result Size");
assertTrue(results.contains(javaDir), "[A] Start Dir");
assertEquals(2, results.size(), "[B] Result Size");
assertTrue(results.contains(javaDir), "[B] Start Dir");
assertTrue(results.contains(orgDir), "[B] Org Dir");
assertEquals(4, results.size(), "[C] Result Size");
assertTrue(results.contains(javaDir), "[C] Start Dir");
assertTrue(results.contains(orgDir), "[C] Org Dir");
assertTrue(results.contains(apacheDir), "[C] Apache Dir");
assertTrue(results.contains(commonsDir), "[C] Commons Dir");
assertEquals(1 + dirs.length + ioFiles.length, results.size(), "[D] Result Size");
assertTrue(results.contains(javaDir), "[D] Start Dir");
assertEquals(1 + dirs.length + ioFiles.length, results.size(), "[DirAndFile1] Result Size");
assertTrue(results.contains(javaDir), "[DirAndFile1] Start Dir");
assertTrue(results.size() > 1 + dirs.length + ioFiles.length, "[DirAndFile2] Result Size");
assertTrue(results.contains(javaDir), "[DirAndFile2] Start Dir");
assertEquals(1 + dirs.length, resultDirs.size(), "[DirAndFile3] Result Size");
assertTrue(results.contains(javaDir), "[DirAndFile3] Start Dir");
assertEquals(ioFiles.length, resultFiles.size(), "[DirAndFile4] Result Size");
assertTrue(results.contains(javaDir), "[DirAndFile4] Start Dir");
assertEquals(results.size(), outputFiles.length + ioFiles.length, "Result Size");
assertEquals(0, results.size(), "Result Size");
assertEquals(1, results.size(), "Result Size");
assertTrue(results.contains(FileUtils.current()), "Current Dir");
assertEquals(1, results.size(), "Result Size");
assertTrue(results.contains(invalidDir), "Current Dir");
assertThrows(NullPointerException.class, () -> new TestFileFinder(null, -1).find(null));
assertEquals(cancelName, last.getName());
assertEquals(5, cancel.getDepth(), "Depth: " + cancelName);
assertEquals(cancelName, cancel.getFile().getName(), "File:  " + cancelName);
assertEquals(3, cancel.getDepth(), "Depth: " + cancelName);
assertEquals(cancelName, lastFile.getName(), "Suppress:  " + cancelName);
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(0, in.available(), "Not all bytes were read");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(inDataStr, writer.toString());
assertEquals(inData.length, count, "The number of characters returned by copy is wrong");
assertEquals(inData.length, baout.size(), "Sizes differ");
assertArrayEquals(inData, baout.toByteArray(), "Content differs");
assertEquals(inData.length, baout.size(), "Sizes