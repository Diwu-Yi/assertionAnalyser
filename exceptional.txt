assertThrows(NullPointerException.class, () -> mutNum.compareTo(null));
assertThrows(NullPointerException.class, () -> new MutableDouble((Number) null));
assertThrows(NullPointerException.class, () -> mutNum.setValue(null));
assertThrows(NullPointerException.class, () -> mutNum.compareTo(null));
assertThrows(NullPointerException.class, () -> new MutableShort((Number) null));
assertThrows(NullPointerException.class, () -> mutNum.setValue(null));
assertThrows(NullPointerException.class, () -> mutBool.compareTo(null));
assertThrows(NullPointerException.class, () -> new MutableBoolean(null));
assertThrows(NullPointerException.class, () -> mutBool.setValue(null));
assertThrows(NullPointerException.class, () -> mutNum.compareTo(null));
assertThrows(NullPointerException.class, () -> new MutableLong((Number) null));
assertThrows(NullPointerException.class, () -> mutNum.setValue(null));
assertThrows(NullPointerException.class, () -> mutNum.compareTo(null));
assertThrows(NullPointerException.class, () -> new MutableFloat((Number) null));
assertThrows(NullPointerException.class, () -> mutNum.setValue(null));
assertThrows(NullPointerException.class, () -> mutNum.compareTo(null));
assertThrows(NullPointerException.class, () -> new MutableByte((Number) null));
assertThrows(NullPointerException.class, () -> mutNum.setValue(null));
assertThrows(NullPointerException.class, () -> mutNum.compareTo(null));
assertThrows(NullPointerException.class, () -> new MutableInt((Number) null));
assertThrows(NullPointerException.class, () -> mutNum.setValue(null));
assertThrows(IllegalArgumentException.class, () -> LocaleUtils.toLocale("Us"), "Should fail if not lowercase");
assertThrows(IllegalArgumentException.class, () -> LocaleUtils.toLocale("uS"), "Should fail if not lowercase");
assertThrows(IllegalArgumentException.class, () -> LocaleUtils.toLocale("u#"), "Should fail if not lowercase");
assertThrows(IllegalArgumentException.class, () -> LocaleUtils.toLocale("u"), "Must be 2 chars if less than 5");
assertThrows(IllegalArgumentException.class, () -> LocaleUtils.toLocale("uu_U"), "Must be 2 chars if less than 5");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("us_En"),"Should fail second part not uppercase");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("us_en"),"Should fail second part not uppercase");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("us_eN"),"Should fail second part not uppercase");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("uS_EN"),"Should fail first part not lowercase");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("us_E3"),"Should fail second part not uppercase");
assertThrows(IllegalArgumentException.class, () -> LocaleUtils.toLocale("us_EN-a"), "Should fail as no consistent delimiter");
assertThrows(IllegalArgumentException.class, () -> LocaleUtils.toLocale("uu_UU_"), "Must be 3, 5 or 7+ in length");
private static void assertUnmodifiableCollection(final Collection<?> coll) {assertThrows(UnsupportedOperationException.class, () -> coll.add(null));
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("_G"),"Must be at least 3 chars if starts with underscore");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("_Gb"),"Must be uppercase if starts with underscore");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("_gB"),"Must be uppercase if starts with underscore");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("_1B"),"Must be letter if starts with underscore");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("_G1"),"Must be letter if starts with underscore");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("_GB_"),"Must be at least 5 chars if starts with underscore");
assertThrows(IllegalArgumentException.class,() -> LocaleUtils.toLocale("_GBAP"),"Must have underscore after the country if starts with underscore and is at least 5 chars");
assertThrows(IllegalArgumentException.class, () -> LocaleUtils.toLocale(str));
assertThrows(IllegalArgumentException.class, () -> Conversion.hexDigitToInt('G'));
assertThrows(IllegalArgumentException.class, () -> Conversion.hexDigitMsb0ToInt('G'));
assertThrows(IllegalArgumentException.class, () -> Conversion.hexDigitToBinary('G'));
assertThrows(IllegalArgumentException.class, () -> Conversion.hexDigitMsb0ToBinary('G'));
assertThrows(IllegalArgumentException.class, () -> Conversion.binaryToHexDigit(new boolean[]{}));
assertThrows(IllegalArgumentException.class, () -> Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{}));
assertThrows(IllegalArgumentException.class, () -> Conversion.binaryBeMsb0ToHexDigit(new boolean[]{}));
assertThrows(IndexOutOfBoundsException.class,() -> Conversion.binaryBeMsb0ToHexDigit(new boolean[8], index));
assertThrows(IllegalArgumentException.class, () -> Conversion.intToHexDigit(16));
assertThrows(IllegalArgumentException.class, () -> Conversion.intToHexDigitMsb0(16));
assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.longToHex(0x1234567890ABCDEFL, 0, "", 1, 8));
assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.intToHex(0x90ABCDEF, 0, "", 1, 8));
assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.shortToHex((short) 0xCDEF, 0, "", 1, 4));
assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.byteToHex((byte) 0xEF, 0, "", 1, 2));
final NumberFormatException thrown = assertThrows(NumberFormatException.class, testMethod);
final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, testMethod);
final OutOfMemoryError oomeThrown = assertThrows(OutOfMemoryError.class, oomeTestMethod);
final UndeclaredThrowableException seThrown = assertThrows(UndeclaredThrowableException.class, seTestMethod);
final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, testMethod);
final OutOfMemoryError thrown = assertThrows(OutOfMemoryError.class, testMethod);
final UndeclaredThrowableException thrown = assertThrows(UndeclaredThrowableException.class, testMethod);
private void assertGetClassThrowsException(final String className, final Class<? extends Exception> exceptionType) {assertThrows(exceptionType, () -> ClassUtils.getClass(className),"ClassUtils.getClass() should fail with an exception of type " + exceptionType.getName() + " when given class name \"" + className + "\".");
assertThrows(ClassCastException.class, () -> ClassUtils.convertClassesToClassNames(list), "Should not have been able to convert list");
assertThrows(ClassCastException.class, () -> ClassUtils.convertClassNamesToClasses(list), "Should not have been able to convert list");
assertThrows(IllegalArgumentException.class, () -> ClassUtils.getAbbreviatedName(String.class, -10));
assertThrows(IllegalArgumentException.class, () -> ClassUtils.getAbbreviatedName(String.class, 0));
assertThrows(IllegalAccessException.class, () -> isEmptyMethod.invoke(set));
assertThrows(IndexOutOfBoundsException.class, () -> eightFbs.clear(-1));
assertThrows(IndexOutOfBoundsException.class, () -> newInstance(10).clear(-1, 3),"Test1: Attempt to flip with negative index failed to generate exception");
assertThrows(IndexOutOfBoundsException.class, () -> newInstance(10).clear(2, -1),"Test2: Attempt to flip with negative index failed to generate exception");
assertThrows(IndexOutOfBoundsException.class, () -> newInstance(10).clear(4, 2),"Test4: Attempt to flip with illegal args failed to generate exception");
assertThrows(IndexOutOfBoundsException.class, () -> eightFbs.clear(-1));
assertThrows(NegativeArraySizeException.class, () -> newInstance(-9));
assertThrows(IndexOutOfBoundsException.class, () -> newInstance().flip(-1), "Attempt to flip at negative index failed to generate exception");
assertThrows(IndexOutOfBoundsException.class, () -> newInstance().get(-1), "Attempt to get at negative index failed to generate exception");
Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(Testable::test, testable, ise));
e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(Testable::test, testable, error));
e = assertThrows(UncheckedIOException.class, () -> Functions.accept(Testable::test, testable, ioe));
Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(Testable::test, testable));
e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(Testable::test, testable));
e = assertThrows(UncheckedIOException.class, () -> Functions.accept(Testable::test, testable));
Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(testable::testDouble, 1d));
e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(testable::testDouble, 1d));
e = assertThrows(UncheckedIOException.class, () -> Functions.accept(testable::testDouble, 1d));
Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(testable::testInt, 1));
e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(testable::testInt, 1));
e = assertThrows(UncheckedIOException.class, () -> Functions.accept(testable::testInt, 1));
Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(testable::testLong, 1L));
e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(testable::testLong, 1L));
e = assertThrows(UncheckedIOException.class, () -> Functions.accept(testable::testLong, 1L));
Throwable e = assertThrows(IllegalStateException.class,() -> Functions.accept(testable::testObjDouble, "X", 1d));
e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(testable::testObjDouble, "X", 1d));
e = assertThrows(UncheckedIOException.class, () -> Functions.accept(testable::testObjDouble, "X", 1d));
Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(testable::testObjInt, "X", 1));
e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(testable::testObjInt, "X", 1));
e = assertThrows(UncheckedIOException.class, () -> Functions.accept(testable::testObjInt, "X", 1));
Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(testable::testObjLong, "X", 1L));
e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(testable::testObjLong, "X", 1L));
e = assertThrows(UncheckedIOException.class, () -> Functions.accept(testable::testObjLong, "X", 1L));
Throwable e = assertThrows(IllegalStateException.class,() -> Functions.apply(Testable::testAsInteger, testable, ise));
e = assertThrows(OutOfMemoryError.class, () -> Functions.apply(Testable::testAsInteger, testable, error));
e = assertThrows(UncheckedIOException.class, () -> Functions.apply(Testable::testAsInteger, testable, ioe));
Throwable e = assertThrows(IllegalStateException.class,() -> Functions.apply(Testable::testAsInteger, testable));
e = assertThrows(OutOfMemoryError.class, () -> Functions.apply(Testable::testAsInteger, testable));
e = assertThrows(UncheckedIOException.class, () -> Functions.apply(Testable::testAsInteger, testable));
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, callable::call);
Throwable e = assertThrows(IllegalStateException.class, () -> consumer.accept(testable));
e = assertThrows(OutOfMemoryError.class, () -> consumer.accept(testable));
e = assertThrows(UncheckedIOException.class, () -> consumer.accept(testable));
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, runnable::run);
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, supplier::get);
Throwable e = assertThrows(IllegalStateException.class, () -> consumer.accept(testable, ise));
e = assertThrows(OutOfMemoryError.class, () -> consumer.accept(testable, error));
e = assertThrows(UncheckedIOException.class, () -> consumer.accept(testable, ioe));
Throwable e = assertThrows(IllegalStateException.class, () -> biFunction.apply(testable, ise));
e = assertThrows(OutOfMemoryError.class, () -> biFunction.apply(testable, error));
e = assertThrows(UncheckedIOException.class, () -> biFunction.apply(testable, ioe));
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> predicate.test(null, null));
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> Functions.run(FailureOnOddInvocations::new));
Throwable e = assertThrows(IllegalStateException.class, () -> function.apply(ise));
e = assertThrows(OutOfMemoryError.class, () -> function.apply(error));
e = assertThrows(UncheckedIOException.class, () -> function.apply(ioe));
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> Functions.run(FailureOnOddInvocations::new));
Throwable e = assertThrows(IllegalStateException.class, () -> Functions.get(testable::testAsInteger));
e = assertThrows(OutOfMemoryError.class, () -> Functions.get(testable::testAsInteger));
e = assertThrows(UncheckedIOException.class, () -> Functions.get(testable::testAsInteger));
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> predicate.test(null));
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> Functions.run(FailureOnOddInvocations::new));
Throwable e = assertThrows(IllegalStateException.class,() -> Functions.tryWithResources(() -> consumer.accept(ise), co::close));
e = assertThrows(OutOfMemoryError.class,() -> Functions.tryWithResources(() -> consumer.accept(error), co::close));
final UncheckedIOException uioe = assertThrows(UncheckedIOException.class,() -> Functions.tryWithResources(() -> consumer.accept(ioe), co::close));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(-1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(array.length + 1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(-1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(array.length + 1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(-1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(array.length + 1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(-1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(array.length + 1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(-1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(array.length + 1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(-1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(array.length + 1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(-1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(array.length + 1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(-1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(array.length + 1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(-1, array, array));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.insert(array.length + 1, array, array));
assertThrows(NullPointerException.class, () -> Triple.ofNonNull(null, null, null));
assertThrows(NullPointerException.class, () -> Triple.ofNonNull(null, null, "z"));
assertThrows(NullPointerException.class, () -> Triple.ofNonNull(null, "y", "z"));
assertThrows(NullPointerException.class, () -> Triple.ofNonNull("x", null, null));
assertThrows(NullPointerException.class, () -> Triple.ofNonNull("x", "y", null));
assertThrows(NullPointerException.class, () -> Pair.ofNonNull(null, null));
assertThrows(NullPointerException.class, () -> Pair.ofNonNull(null, "x"));
assertThrows(NullPointerException.class, () -> Pair.ofNonNull("x", null));
assertThrows(NullPointerException.class, () -> ImmutablePair.ofNonNull(null, null));
assertThrows(NullPointerException.class, () -> ImmutablePair.ofNonNull(null, "x"));
assertThrows(NullPointerException.class, () -> ImmutablePair.ofNonNull("x", null));
assertThrows(UnsupportedOperationException.class, () -> pair.setValue("any"));
assertThrows(NullPointerException.class, () -> MutablePair.ofNonNull(null, null));
assertThrows(NullPointerException.class, () -> MutablePair.ofNonNull(null, "x"));
assertThrows(NullPointerException.class, () -> MutablePair.ofNonNull("x", null));
assertThrows(NullPointerException.class, () -> ImmutableTriple.ofNonNull(null, null, null));
assertThrows(NullPointerException.class, () -> ImmutableTriple.ofNonNull(null, null, "z"));
assertThrows(NullPointerException.class, () -> ImmutableTriple.ofNonNull(null, "y", "z"));
assertThrows(NullPointerException.class, () -> ImmutableTriple.ofNonNull("x", null, null));
assertThrows(NullPointerException.class, () -> ImmutableTriple.ofNonNull("x", "y", null));
assertThrows(NullPointerException.class, () -> MutableTriple.ofNonNull(null, null, null));
assertThrows(NullPointerException.class, () -> MutableTriple.ofNonNull(null, null, "z"));
assertThrows(NullPointerException.class, () -> MutableTriple.ofNonNull(null, "y", "z"));
assertThrows(NullPointerException.class, () -> MutableTriple.ofNonNull("x", null, null));
assertThrows(NullPointerException.class, () -> MutableTriple.ofNonNull("x", "y", null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.ESCAPE_JAVA.translate(null, null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.ESCAPE_JAVA.translate("", null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.UNESCAPE_JAVA.translate(null, null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.UNESCAPE_JAVA.translate("", null));
assertThrows(RuntimeException.class, () -> StringEscapeUtils.unescapeJava("\\u02-3"));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(null, null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.ESCAPE_ECMASCRIPT.translate("", null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.UNESCAPE_ECMASCRIPT.translate(null, null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.UNESCAPE_ECMASCRIPT.translate("", null));
assertThrows(IllegalStateException.class, () -> StringEscapeUtils.ESCAPE_CSV.translate("foo", -1, writer));
assertThrows(IllegalStateException.class, () -> StringEscapeUtils.UNESCAPE_CSV.translate("foo", -1, writer));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.ESCAPE_JSON.translate(null, null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.ESCAPE_JSON.translate("", null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.UNESCAPE_JSON.translate(null, null));
assertThrows(NullPointerException.class, () -> StringEscapeUtils.UNESCAPE_JSON.translate("", null));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( null, -1, true));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add(new boolean[] { true, false }, 4, true));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add(new boolean[] { true, false }, -1, true));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( (char[]) null, -1, 'a' ));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new char[] { 'a', 'b' }, 4, 'c'));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new char[] { 'a', 'b' }, -1, 'c'));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( (short[]) null, -1, (short) 2));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new short[] { 2, 6 }, 4, (short) 10));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new short[] { 2, 6 }, -1, (short) 10));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( (byte[]) null, -1, (byte) 2));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new byte[] { 2, 6 }, 4, (byte) 3));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new byte[] { 2, 6 }, -1, (byte) 3));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( (int[]) null, -1, 2));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new int[] { 2, 6 }, 4, 10));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new int[] { 2, 6 }, -1, 10));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( (long[]) null, -1, 2L));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new long[] { 2L, 6L }, 4, 10L));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new long[] { 2L, 6L }, -1, 10L));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( (float[]) null, -1, 2.2f));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new float[] { 2.3f, 6.4f }, 4, 10.5f));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new float[] { 2.3f, 6.4f }, -1, 10.5f));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add(null, -1, 2.2));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new double[] { 2.3, 6.4 }, 4, 10.5));
e = assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.add( new double[] { 2.3, 6.4 }, -1, 10.5));
assertThrows(IllegalArgumentException.class,() -> ArrayUtils.addAll(new Integer[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)}));
assertThrows(IllegalArgumentException.class, () -> ArrayUtils.add(stringArray, aString));
assertThrows(IllegalArgumentException.class, () -> ArrayUtils.add(stringArray, 0, aString));
final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, testMethod);
final OutOfMemoryError thrown = assertThrows(OutOfMemoryError.class, testMethod);
final UndeclaredThrowableException thrown = assertThrows(UndeclaredThrowableException.class, testMethod);
final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, testMethod);
final OutOfMemoryError oomeThrown = assertThrows(OutOfMemoryError.class, oomeTestMethod);
final UndeclaredThrowableException seThrown = assertThrows(UndeclaredThrowableException.class, seTestMethod);
final NumberFormatException thrown = assertThrows(NumberFormatException.class, testMethod);
assertThrows(NullPointerException.class, () -> new TypeLiteral() {});
assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeMethod(testBean, "foo", 1, 2));
assertThrows(NoSuchMethodException.class,() -> MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.BYTE_ONE));
assertThrows(NoSuchMethodException.class,() -> MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.LONG_ONE));
assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeExactMethod(testBean, "foo", Boolean.TRUE));
assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeStaticMethod(TestBean.class, "does_not_exist"));
assertThrows(NoSuchMethodException.class,() -> MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE));
assertThrows(NoSuchMethodException.class,() -> MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE));
assertThrows(NoSuchMethodException.class,() -> MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", Boolean.TRUE));
assertThrows(NullPointerException.class, () -> MethodUtils.getMethodsWithAnnotation(FieldUtilsTest.class, null));
assertThrows(NullPointerException.class, () -> MethodUtils.getMethodsWithAnnotation(null, Annotated.class));
assertThrows(NullPointerException.class, () -> MethodUtils.getMethodsWithAnnotation(null, null));
assertThrows(NullPointerException.class, () -> MethodUtils.getMethodsListWithAnnotation(FieldUtilsTest.class, null));
assertThrows(NullPointerException.class, () -> MethodUtils.getMethodsListWithAnnotation(null, Annotated.class));
assertThrows(NullPointerException.class, () -> MethodUtils.getMethodsListWithAnnotation(null, null));
assertThrows(NullPointerException.class,() -> MethodUtils.getAnnotation(FieldUtilsTest.class.getDeclaredMethods()[0], null, true, true));
assertThrows(NullPointerException.class, () -> MethodUtils.getAnnotation(null, Annotated.class, true, true));
assertThrows(NullPointerException.class, () -> MethodUtils.getAnnotation(null, null, true, true));
assertThrows(IllegalStateException.class,() -> MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod2", (Class<?>) null));
assertThrows(IllegalStateException.class,() -> MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, "testMethod4", null, null));
assertThrows(NoSuchMethodException.class,() -> ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.BYTE_ONE));
assertThrows(NoSuchMethodException.class,() -> ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.LONG_ONE));
assertThrows(NoSuchMethodException.class,() -> ConstructorUtils.invokeExactConstructor(TestBean.class, Boolean.TRUE));
assertThrows(NullPointerException.class, () -> FieldUtils.getField(null, "none"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getField(PublicChild.class, null));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getField(PublicChild.class, ""));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getField(PublicChild.class, " "));
assertThrows(NullPointerException.class, () -> FieldUtils.getField(null, "none", true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getField(PublicChild.class, null, true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getField(PublicChild.class, "", true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getField(PublicChild.class, " ", true));
assertThrows(NullPointerException.class, () -> FieldUtils.getFieldsWithAnnotation(FieldUtilsTest.class, null));
assertThrows(NullPointerException.class, () -> FieldUtils.getFieldsWithAnnotation(null, Annotated.class));
assertThrows(NullPointerException.class, () -> FieldUtils.getFieldsWithAnnotation(null, null));
assertThrows(NullPointerException.class, () -> FieldUtils.getFieldsListWithAnnotation(FieldUtilsTest.class, null));
assertThrows(NullPointerException.class, () -> FieldUtils.getFieldsListWithAnnotation(null, Annotated.class));
assertThrows(NullPointerException.class, () -> FieldUtils.getFieldsListWithAnnotation(null, null));
assertThrows(NullPointerException.class, () -> FieldUtils.getDeclaredField(null, "none"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getDeclaredField(PublicChild.class, null));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getDeclaredField(PublicChild.class, ""));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getDeclaredField(PublicChild.class, " "));
assertThrows(NullPointerException.class, () -> FieldUtils.getDeclaredField(null, "none", true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getDeclaredField(PublicChild.class, null, true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getDeclaredField(PublicChild.class, "", true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getDeclaredField(PublicChild.class, " ", true));
assertThrows(NullPointerException.class, () -> FieldUtils.readStaticField(null));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readStaticField(nonStaticField));
assertThrows(NullPointerException.class, () -> FieldUtils.readStaticField(null, true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readStaticField(nonStaticField));
assertThrows(NullPointerException.class,() -> FieldUtils.readStaticField(null, "none"),"null class should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readStaticField(Foo.class, null),"null field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readStaticField(Foo.class, ""),"empty field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readStaticField(Foo.class, " "),"blank field name should cause an IllegalArgumentException");
assertThrows(NullPointerException.class,() -> FieldUtils.readStaticField(Foo.class, "does_not_exist"),"a field that doesn't exist should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readStaticField(PublicChild.class, "s"),"non-static field should cause an IllegalArgumentException");
assertThrows(NullPointerException.class,() -> FieldUtils.readStaticField(null, "none", true),"null class should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readStaticField(Foo.class, null, true),"null field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readStaticField(Foo.class, "", true),"empty field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readStaticField(Foo.class, " ", true),"blank field name should cause an IllegalArgumentException");
assertThrows(NullPointerException.class,() -> FieldUtils.readStaticField(Foo.class, "does_not_exist", true),"a field that doesn't exist should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readStaticField(PublicChild.class, "s", false),"non-static field should cause an IllegalArgumentException");
assertThrows(NullPointerException.class, () -> FieldUtils.readDeclaredStaticField(PublicChild.class, "VALUE"));
assertThrows(NullPointerException.class,() -> FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, "VALUE"));
assertThrows(NullPointerException.class,() -> FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, "VALUE"));
assertThrows(NullPointerException.class,() -> FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, "VALUE", true));
assertThrows(NullPointerException.class,() -> FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, "VALUE", true));
assertThrows(NullPointerException.class,() -> FieldUtils.readField(null, publicChild),"a null field should cause an IllegalArgumentException");
assertThrows(NullPointerException.class,() -> FieldUtils.readField(null, publicChild, true),"a null field should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readField(publicChild, null),"a null field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readField(publicChild, ""),"an empty field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readField(publicChild, " "),"a blank field name should cause an IllegalArgumentException");
assertThrows(NullPointerException.class,() -> FieldUtils.readField((Object) null, "none"),"a null target should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readField(publicChild, "b"));
assertThrows( IllegalArgumentException.class, () -> FieldUtils.readField(privatelyShadowedChild, "b"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readField(publicChild, "i"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readField(privatelyShadowedChild, "i"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readField(publicChild, "d"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readField(privatelyShadowedChild, "d"));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readField(publicChild, null, true),"a null field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readField(publicChild, "", true),"an empty field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readField(publicChild, " ", true),"a blank field name should cause an IllegalArgumentException");
assertThrows(NullPointerException.class,() -> FieldUtils.readField((Object) null, "none", true),"a null target should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readDeclaredField(publicChild, null),"a null field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readDeclaredField(publicChild, ""),"an empty field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readDeclaredField(publicChild, " "),"a blank field name should cause an IllegalArgumentException");
assertThrows(NullPointerException.class,() -> FieldUtils.readDeclaredField(null, "none"),"a null target should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(publicChild, "s"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(privatelyShadowedChild, "s"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(publicChild, "b"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(privatelyShadowedChild, "b"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(publicChild, "i"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(privatelyShadowedChild, "i"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(publicChild, "d"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(privatelyShadowedChild, "d"));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readDeclaredField(publicChild, null, true),"a null field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readDeclaredField(publicChild, "", true),"an empty field name should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> FieldUtils.readDeclaredField(publicChild, " ", true),"a blank field name should cause an IllegalArgumentException");
assertThrows(NullPointerException.class,() -> FieldUtils.readDeclaredField(null, "none", true),"a null target should cause an IllegalArgumentException");
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(publicChild, "s", true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(publicChild, "b", true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(publicChild, "i", true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.readDeclaredField(publicChild, "d", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("mutableProtected"), "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("mutablePackage"), "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("mutablePrivate"), "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("IMMUTABLE_PUBLIC"), "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("IMMUTABLE_PROTECTED"), "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("IMMUTABLE_PACKAGE"), "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("IMMUTABLE_PRIVATE"), "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("IMMUTABLE_PUBLIC"), "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("IMMUTABLE_PROTECTED"), "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("IMMUTABLE_PACKAGE"), "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField("IMMUTABLE_PRIVATE"), "new", true));
assertThrows(NullPointerException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new", true));
assertThrows(NullPointerException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new"));
assertThrows(NullPointerException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new"));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new", true));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeField(parentClass.getDeclaredField("b"), publicChild, Boolean.TRUE));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeField(parentClass.getDeclaredField("i"), publicChild, Integer.valueOf(Integer.MAX_VALUE)));
assertThrows(IllegalAccessException.class,() -> FieldUtils.writeField(parentClass.getDeclaredField("d"), publicChild, Double.valueOf(Double.MAX_VALUE)));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.writeField(publicChild, "b", Boolean.TRUE));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.writeField(publicChild, "i", Integer.valueOf(1)));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.writeField(publicChild, "d", Double.valueOf(1.0)));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeField(privatelyShadowedChild, "i", Integer.valueOf(1)));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeField(privatelyShadowedChild, "d", Double.valueOf(1.0)));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.writeDeclaredField(publicChild, "s", "S"));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.writeDeclaredField(publicChild, "b", Boolean.TRUE));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeDeclaredField(publicChild, "i", Integer.valueOf(1)));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeDeclaredField(publicChild, "d", Double.valueOf(1.0)));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.writeDeclaredField(privatelyShadowedChild, "s", "S"));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeDeclaredField(privatelyShadowedChild, "b", Boolean.TRUE));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeDeclaredField(privatelyShadowedChild, "i", Integer.valueOf(1)));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeDeclaredField(privatelyShadowedChild, "d", Double.valueOf(1.0)));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.writeDeclaredField(publicChild, "s", "S", true));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeDeclaredField(publicChild, "b", Boolean.TRUE, true));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeDeclaredField(publicChild, "i", Integer.valueOf(1), true));
assertThrows(IllegalArgumentException.class,() -> FieldUtils.writeDeclaredField(publicChild, "d", Double.valueOf(1.0), true));
assertThrows(IllegalArgumentException.class, () -> FieldUtils.getField(Ambig.class, "VALUE"));
final NullPointerException e = assertThrows(NullPointerException.class, () -> range.contains(null));
assertThrows(NoSuchElementException.class, emptySetIt::next);
assertThrows(NoSuchElementException.class, notFirstIt::next);
assertThrows(NoSuchElementException.class, notLastIt::next);
assertThrows(UnsupportedOperationException.class, aIt::remove);
assertThrows(PatternSyntaxException.class,() -> RegExUtils.removeAll("any", "{badRegexSyntax}"),"RegExUtils.removeAll expecting PatternSyntaxException");
assertThrows(PatternSyntaxException.class,() -> RegExUtils.removeFirst("any", "{badRegexSyntax}"),"RegExUtils.removeFirst expecting PatternSyntaxException");
assertThrows(PatternSyntaxException.class,() -> RegExUtils.replaceAll("any", "{badRegexSyntax}", ""),"RegExUtils.replaceAll expecting PatternSyntaxException");
assertThrows(PatternSyntaxException.class,() -> RegExUtils.replaceFirst("any", "{badRegexSyntax}", ""),"RegExUtils.replaceFirst expecting PatternSyntaxException");
assertThrows(NullPointerException.class, () -> nop.andThen(null));
Assertions.assertThrows(IllegalStateException.class, () -> badComposite.accept(true));
assertThrows(CustomUncheckedException.class, () -> func.apply(INSTANCE, "A"));
assertThrows(NullPointerException.class, () -> MethodInvokers.asBiFunction(null));
assertThrows(CustomUncheckedException.class, () -> func.apply(INSTANCE));
assertThrows(NullPointerException.class, () -> MethodInvokers.asFunction(null));
Throwable e = assertThrows(IllegalStateException.class,() -> Failable.accept(Testable::test, testable, ILLEGAL_STATE_EXCEPTION));
e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(Testable::test, testable, ERROR));
e = assertThrows(UncheckedIOException.class, () -> Failable.accept(Testable::test, testable, ioe));
Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(Testable::test, testable));
e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(Testable::test, testable));
e = assertThrows(UncheckedIOException.class, () -> Failable.accept(Testable::test, testable));
Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(testable::testDouble, 1d));
e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(testable::testDouble, 1d));
e = assertThrows(UncheckedIOException.class, () -> Failable.accept(testable::testDouble, 1d));
Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(testable::testInt, 1));
e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(testable::testInt, 1));
e = assertThrows(UncheckedIOException.class, () -> Failable.accept(testable::testInt, 1));
Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(testable::testLong, 1L));
e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(testable::testLong, 1L));
e = assertThrows(UncheckedIOException.class, () -> Failable.accept(testable::testLong, 1L));
Throwable e = assertThrows(IllegalStateException.class,() -> Failable.accept(testable::testObjDouble, "X", 1d));
e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(testable::testObjDouble, "X", 1d));
e = assertThrows(UncheckedIOException.class, () -> Failable.accept(testable::testObjDouble, "X", 1d));
Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(testable::testObjInt, "X", 1));
e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(testable::testObjInt, "X", 1));
e = assertThrows(UncheckedIOException.class, () -> Failable.accept(testable::testObjInt, "X", 1));
Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(testable::testObjLong, "X", 1L));
e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(testable::testObjLong, "X", 1L));
e = assertThrows(UncheckedIOException.class, () -> Failable.accept(testable::testObjLong, "X", 1L));
Throwable e = assertThrows(IllegalStateException.class,() -> Failable.apply(Testable::testAsInteger, testable, ILLEGAL_STATE_EXCEPTION));
e = assertThrows(OutOfMemoryError.class, () -> Failable.apply(Testable::testAsInteger, testable, ERROR));
e = assertThrows(UncheckedIOException.class, () -> Failable.apply(Testable::testAsInteger, testable, ioe));
final Throwable e = assertThrows(IllegalStateException.class,() -> Failable.applyAsDouble(testable::testDoubleDouble, 1d, 2d));
Throwable e = assertThrows(IllegalStateException.class,() -> Failable.apply(Testable::testAsInteger, testable));
e = assertThrows(OutOfMemoryError.class, () -> Failable.apply(Testable::testAsInteger, testable));
e = assertThrows(UncheckedIOException.class, () -> Failable.apply(Testable::testAsInteger, testable));
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, callable::call);
Throwable e = assertThrows(IllegalStateException.class, () -> consumer.accept(testable));
e = assertThrows(OutOfMemoryError.class, () -> consumer.accept(testable));
e = assertThrows(UncheckedIOException.class, () -> consumer.accept(testable));
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, runnable::run);
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, supplier::get);
Throwable e = assertThrows(IllegalStateException.class,() -> consumer.accept(testable, ILLEGAL_STATE_EXCEPTION));
e = assertThrows(OutOfMemoryError.class, () -> consumer.accept(testable, ERROR));
e = assertThrows(OutOfMemoryError.class, () -> failableBiConsumer.accept(testable, ERROR));
e = assertThrows(UncheckedIOException.class, () -> consumer.accept(testable, ioe));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).accept(testable, ERROR));
e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).accept(testable, ERROR));
assertThrows(NullPointerException.class, () -> failing.andThen(null));
Throwable e = assertThrows(IllegalStateException.class,() -> biFunction.apply(testable, ILLEGAL_STATE_EXCEPTION));
e = assertThrows(OutOfMemoryError.class, () -> biFunction.apply(testable, ERROR));
e = assertThrows(UncheckedIOException.class, () -> biFunction.apply(testable, ioe));
assertThrows(IOException.class, () -> failingBiFunctionTest.andThen(failingFunction).apply(null, null));
assertThrows(IOException.class, () -> failingBiFunctionTest.andThen(nopFailableFunction).apply(null, null));
assertThrows(IOException.class, () -> nopFailableBiFunction.andThen(failingFunction).apply(null, null));
assertThrows(NullPointerException.class, () -> failingBiFunctionTest.andThen(null));
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> predicate.test(null, null));
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> Failable.run(FailureOnOddInvocations::new));
final Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failableConsumer).accept(ERROR));
assertThrows(NullPointerException.class, () -> failableConsumer.andThen(null));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).accept(0d));
e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).accept(0d));
assertThrows(NullPointerException.class, () -> failing.andThen(null));
assertThrows(SomeException.class, () -> failablePredicate.test(1d));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).applyAsDouble(0d));
e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).applyAsDouble(0d));
assertThrows(NullPointerException.class, () -> failing.andThen(null));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.compose(failing).applyAsDouble(0d));
e = assertThrows(OutOfMemoryError.class, () -> failing.compose(nop).applyAsDouble(0d));
assertThrows(NullPointerException.class, () -> failing.compose(null));
assertThrows(NullPointerException.class, () -> nop.compose(null));
Throwable e = assertThrows(IllegalStateException.class, () -> function.apply(ILLEGAL_STATE_EXCEPTION));
e = assertThrows(OutOfMemoryError.class, () -> function.apply(ERROR));
e = assertThrows(UncheckedIOException.class, () -> function.apply(ioe));
assertThrows(IOException.class, () -> failingFunction.andThen(failingFunction).apply(null));
assertThrows(IOException.class, () -> failingFunction.andThen(nopFailableFunction).apply(null));
assertThrows(IOException.class, () -> nopFailableFunction.andThen(failingFunction).apply(null));
assertThrows(NullPointerException.class, () -> failingFunction.andThen(null));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.compose(failing).apply(0));
e = assertThrows(OutOfMemoryError.class, () -> failing.compose(nop).apply(0));
assertThrows(NullPointerException.class, () -> failing.compose(null));
assertThrows(NullPointerException.class, () -> nop.compose(null));
Throwable e = assertThrows(IllegalStateException.class,() -> Failable.getAsBoolean(testable::testAsBooleanPrimitive));
e = assertThrows(OutOfMemoryError.class, () -> Failable.getAsBoolean(testable::testAsBooleanPrimitive));
e = assertThrows(UncheckedIOException.class, () -> Failable.getAsBoolean(testable::testAsBooleanPrimitive));
Throwable e = assertThrows(IllegalStateException.class,() -> Failable.getAsDouble(testable::testAsDoublePrimitive));
e = assertThrows(OutOfMemoryError.class, () -> Failable.getAsDouble(testable::testAsDoublePrimitive));
e = assertThrows(UncheckedIOException.class, () -> Failable.getAsDouble(testable::testAsDoublePrimitive));
Throwable e = assertThrows(IllegalStateException.class, () -> Failable.getAsInt(testable::testAsIntPrimitive));
e = assertThrows(OutOfMemoryError.class, () -> Failable.getAsInt(testable::testAsIntPrimitive));
e = assertThrows(UncheckedIOException.class, () -> Failable.getAsInt(testable::testAsIntPrimitive));
Throwable e = assertThrows(IllegalStateException.class,() -> Failable.getAsLong(testable::testAsLongPrimitive));
e = assertThrows(OutOfMemoryError.class, () -> Failable.getAsLong(testable::testAsLongPrimitive));
e = assertThrows(UncheckedIOException.class, () -> Failable.getAsLong(testable::testAsLongPrimitive));
Throwable e = assertThrows(IllegalStateException.class,() -> Failable.getAsShort(testable::testAsShortPrimitive));
e = assertThrows(OutOfMemoryError.class, () -> Failable.getAsShort(testable::testAsShortPrimitive));
e = assertThrows(UncheckedIOException.class, () -> Failable.getAsShort(testable::testAsShortPrimitive));
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> Failable.run(FailureOnOddInvocations::new));
Throwable e = assertThrows(IllegalStateException.class, () -> Failable.get(testable::testAsInteger));
e = assertThrows(OutOfMemoryError.class, () -> Failable.get(testable::testAsInteger));
e = assertThrows(UncheckedIOException.class, () -> Failable.get(testable::testAsInteger));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).accept(0));
e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).accept(0));
assertThrows(NullPointerException.class, () -> failing.andThen(null));
assertThrows(SomeException.class, () -> failablePredicate.test(1));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).applyAsInt(0));
e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).applyAsInt(0));
assertThrows(NullPointerException.class, () -> failing.andThen(null));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.compose(failing).applyAsInt(0));
e = assertThrows(OutOfMemoryError.class, () -> failing.compose(nop).applyAsInt(0));
assertThrows(NullPointerException.class, () -> failing.compose(null));
assertThrows(NullPointerException.class, () -> nop.compose(null));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).accept(0L));
e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).accept(0L));
assertThrows(NullPointerException.class, () -> failing.andThen(null));
assertThrows(SomeException.class, () -> failablePredicate.test(1L));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).applyAsLong(0L));
e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).applyAsLong(0L));
assertThrows(NullPointerException.class, () -> failing.andThen(null));
Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.compose(failing).applyAsLong(0L));
e = assertThrows(OutOfMemoryError.class, () -> failing.compose(nop).applyAsLong(0L));
assertThrows(NullPointerException.class, () -> failing.compose(null));
assertThrows(NullPointerException.class, () -> nop.compose(null));
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> predicate.test(null));
final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class,() -> Failable.run(FailureOnOddInvocations::new));
Throwable e = assertThrows(IllegalStateException.class,() -> Failable.tryWithResources(() -> consumer.accept(ILLEGAL_STATE_EXCEPTION), closeable::close));
e = assertThrows(OutOfMemoryError.class,() -> Failable.tryWithResources(() -> consumer.accept(ERROR), closeable::close));
final UncheckedIOException uioe = assertThrows(UncheckedIOException.class,() -> Failable.tryWithResources(() -> consumer.accept(ioe), closeable::close));
assertThrows(CustomCheckedException.class, () -> func.apply(INSTANCE, "A"));
assertThrows(CustomUncheckedException.class, () -> func.apply(INSTANCE, "A"));
assertThrows(NullPointerException.class, () -> MethodInvokers.asFailableBiFunction(null));
assertThrows(CustomCheckedException.class, () -> MethodInvokers.asFailableBiConsumer(getMethodForSetString1ArgThrowsChecked()).accept(INSTANCE, "A"));
assertThrows(CustomUncheckedException.class, () -> MethodInvokers.asFailableBiConsumer(getMethodForSetString1ArgThrowsUnchecked()).accept(INSTANCE, "A"));
assertThrows(NullPointerException.class, () -> MethodInvokers.asFailableBiConsumer(null));
assertThrows(NullPointerException.class, () -> MethodInvokers.asFailableFunction((Method) null));
assertThrows(Exception.class, () -> MethodInvokers.asFailableFunction(getMethodForGetStringThrowsChecked()).apply(INSTANCE));
assertThrows(NullPointerException.class, () -> MethodInvokers.asBiConsumer(null));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MIN_VALUE, 1).abs());
assertThrows(NullPointerException.class, () -> fr.add(null));
assertThrows(ArithmeticException.class, () -> overflower.add(Fraction.ONE)); // should overflow
assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Integer.MIN_VALUE, 5).add(Fraction.getFraction(-1, 5)));
assertThrows(ArithmeticException.class, () -> maxValue.add(maxValue));
assertThrows(ArithmeticException.class, () -> negativeMaxValue.add(negativeMaxValue));
assertThrows(ArithmeticException.class, () -> f3.add(f4)); // should overflow
assertThrows(NullPointerException.class, () -> fr.compareTo(null));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(3, 5).divideBy(Fraction.ZERO));
assertThrows(NullPointerException.class, () -> fr.divideBy(null));
assertThrows(ArithmeticException.class, () -> smallest.divideBy(smallest.invert())); // Should overflow
assertThrows(ArithmeticException.class, () -> negative.divideBy(negative.invert())); // Should overflow
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Double.NaN));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Double.POSITIVE_INFINITY));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Double.NEGATIVE_INFINITY));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction((double) Integer.MAX_VALUE + 1));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, 0));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(2, 0));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-3, 0));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(4, Integer.MIN_VALUE));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, Integer.MIN_VALUE));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, -6, -10));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, -6, -10));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, -6, -10));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-1, -6, 10));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-1, 6, -10));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-1, -6, -10));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(0, 1, 0));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, 2, 0));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-1, -3, 0));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MAX_VALUE, 1, 2));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-Integer.MAX_VALUE, 1, 2));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(0, 4, Integer.MIN_VALUE));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, 1, Integer.MAX_VALUE));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-1, 2, Integer.MAX_VALUE));
assertThrows(NullPointerException.class, () -> Fraction.getFraction(null));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("2.3R"));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("2147483648")); // too big
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("."));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("2/d"));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("2e/3"));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("2/"));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("/"));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("2 3"));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("a 3"));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("2 b/4"));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction("2 "));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction(" 3"));
assertThrows(NumberFormatException.class, () -> Fraction.getFraction(" "));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(0, 3).invert());
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MIN_VALUE, 1).invert());
assertThrows(NullPointerException.class, () -> fr.multiplyBy(null));
assertThrows(ArithmeticException.class, () -> fr1.multiplyBy(fr1));
assertThrows(ArithmeticException.class, () -> fr2.multiplyBy(fr2));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MIN_VALUE, 1).negate());
assertThrows(ArithmeticException.class, () -> fr.pow(-1));
assertThrows(ArithmeticException.class, () -> fr.pow(Integer.MIN_VALUE));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MAX_VALUE, 1).pow(2));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MIN_VALUE, 1).pow(3));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(65536, 1).pow(2));
assertThrows(ArithmeticException.class, () -> Fraction.getReducedFraction(1, 0));
assertThrows(ArithmeticException.class, () -> Fraction.getReducedFraction(2, 0));
assertThrows(ArithmeticException.class, () -> Fraction.getReducedFraction(-3, 0));
assertThrows(ArithmeticException.class, () -> Fraction.getReducedFraction(-7, Integer.MIN_VALUE));
assertThrows(NullPointerException.class, () -> fr.subtract(null));
assertThrows(ArithmeticException.class,() -> Fraction.getFraction(1, Integer.MAX_VALUE).subtract(Fraction.getFraction(1, Integer.MAX_VALUE - 1)));
assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Integer.MIN_VALUE, 5).subtract(Fraction.getFraction(1, 5)));
assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MIN_VALUE, 1).subtract(Fraction.ONE));
assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Integer.MAX_VALUE, 1).subtract(Fraction.ONE.negate()));
assertThrows(ArithmeticException.class,() -> Fraction.getFraction(3, 327680).subtract(Fraction.getFraction(2, 59049)));
assertThrows(NumberFormatException.class, () -> NumberUtils.createBigDecimal(str),"createBigDecimal(\"" + str + "\") should have failed.");
assertThrows(NumberFormatException.class, () -> NumberUtils.createBigInteger(str),"createBigInteger(\"" + str + "\") should have failed.");
assertThrows(NumberFormatException.class, () -> NumberUtils.createDouble(str),"createDouble(\"" + str + "\") should have failed.");
assertThrows(NumberFormatException.class, () -> NumberUtils.createFloat(str),"createFloat(\"" + str + "\") should have failed.");
assertThrows(NumberFormatException.class, () -> NumberUtils.createInteger(str),"createInteger(\"" + str + "\") should have failed.");
assertThrows(NumberFormatException.class, () -> NumberUtils.createLong(str),"createLong(\"" + str + "\") should have failed.");
assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber("--1.1E-700F"));
assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber("-1.1E+0-7e00"));
assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber("-11E+0-7e00"));
assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber("1eE+00001"));
assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber("1234.5ff"));
assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber("1234.5FF"));
assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber("1234.5dd"));
assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber("1234.5DD"));
assertThrows(IllegalArgumentException.class, NumberUtils::max);
assertThrows(NullPointerException.class, () -> NumberUtils.max((byte[]) null));
assertThrows(NullPointerException.class, () -> NumberUtils.max(d), "No exception was thrown for null input.");
assertThrows(IllegalArgumentException.class, NumberUtils::max, "No exception was thrown for empty input.");
assertThrows(IllegalArgumentException.class, NumberUtils::max);
assertThrows(NullPointerException.class, () -> NumberUtils.max((double[]) null));
assertThrows(IllegalArgumentException.class, NumberUtils::max);
assertThrows(NullPointerException.class, () -> NumberUtils.max((float[]) null));
assertThrows(IllegalArgumentException.class, NumberUtils::max);
assertThrows(NullPointerException.class, () -> NumberUtils.max((int[]) null));
assertThrows(IllegalArgumentException.class, NumberUtils::max);
assertThrows(NullPointerException.class, () -> NumberUtils.max((long[]) null));
assertThrows(IllegalArgumentException.class, NumberUtils::max);
assertThrows(NullPointerException.class, () -> NumberUtils.max((short[]) null));
assertThrows(IllegalArgumentException.class, NumberUtils::min);
assertThrows(NullPointerException.class, () -> NumberUtils.min((byte[]) null));
assertThrows(IllegalArgumentException.class, NumberUtils::min);
assertThrows(NullPointerException.class, () -> NumberUtils.min((double[]) null));
assertThrows(IllegalArgumentException.class, NumberUtils::min);
assertThrows(NullPointerException.class, () -> NumberUtils.min((float[]) null));
assertThrows(IllegalArgumentException.class, NumberUtils::min);
assertThrows(NullPointerException.class, () -> NumberUtils.min((int[]) null));
assertThrows(IllegalArgumentException.class, NumberUtils::min);
assertThrows(NullPointerException.class, () -> NumberUtils.min((long[]) null));
assertThrows(IllegalArgumentException.class, NumberUtils::min);
assertThrows(NullPointerException.class, () -> NumberUtils.min((short[]) null));
assertThrows(NullPointerException.class,() -> IEEE754rUtils.min( (float[]) null),"IllegalArgumentException expected for null input");
assertThrows(IllegalArgumentException.class,IEEE754rUtils::min,"IllegalArgumentException expected for empty input");
assertThrows(NullPointerException.class,() -> IEEE754rUtils.max( (float[]) null),"IllegalArgumentException expected for null input");
assertThrows(IllegalArgumentException.class,IEEE754rUtils::max,"IllegalArgumentException expected for empty input");
assertThrows(NullPointerException.class,() -> IEEE754rUtils.min( (double[]) null),"IllegalArgumentException expected for null input");
assertThrows(IllegalArgumentException.class,IEEE754rUtils::min,"IllegalArgumentException expected for empty input");
assertThrows(NullPointerException.class,() -> IEEE754rUtils.max( (double[]) null),"IllegalArgumentException expected for null input");
assertThrows(IllegalArgumentException.class,IEEE754rUtils::max,"IllegalArgumentException expected for empty input");
assertThrows(IllegalArgumentException.class, () -> getInstance("XXXX"));
assertThrows(ParseException.class, () -> fdp.parse("2015"));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInMilliseconds(aCalendar, 0));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInSeconds(aCalendar, 0));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInMinutes(aCalendar, 0));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInHours(aCalendar, 0));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInDays(aCalendar, 0));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInMilliseconds(aDate, 0));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInSeconds(aDate, 0));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInMinutes(aDate, 0));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInHours(aDate, 0));
assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInDays(aDate, 0));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInMilliseconds((Calendar) null, Calendar.MILLISECOND));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInSeconds((Calendar) null, Calendar.MILLISECOND));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInMinutes((Calendar) null, Calendar.MILLISECOND));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInHours((Calendar) null, Calendar.MILLISECOND));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInDays((Calendar) null, Calendar.MILLISECOND));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInMilliseconds((Date) null, Calendar.MILLISECOND));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInSeconds((Date) null, Calendar.MILLISECOND));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInMinutes((Date) null, Calendar.MILLISECOND));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInHours((Date) null, Calendar.MILLISECOND));
assertThrows(NullPointerException.class, () -> DateUtils.getFragmentInDays((Date) null, Calendar.MILLISECOND));
assertThrows(IllegalArgumentException.class, () -> DurationFormatUtils.formatDuration(-5000, "S", true));
assertThrows(IllegalArgumentException.class, () -> DurationFormatUtils.formatDurationHMS(-5000));
assertThrows(IllegalArgumentException.class, () -> DurationFormatUtils.formatDurationISO(-5000));
assertThrows(IllegalArgumentException.class, () -> DurationFormatUtils.formatDurationWords(-5000, true, true));
assertThrows(IllegalArgumentException.class, () -> DurationFormatUtils.formatPeriod(5000, 2500, "yy/MM"));
assertThrows(IllegalArgumentException.class, () -> DurationFormatUtils.formatPeriodISO(5000, 2000));
assertThrows(IllegalArgumentException.class, () -> DurationFormatUtils.lexx("'yMdHms''S"));
assertThrows(IllegalArgumentException.class, () -> getInstance("XXXX"));
assertThrows(IllegalStateException.class, watch::stop,"Calling stop on an unstarted StopWatch should throw an exception. ");
assertThrows(IllegalStateException.class, watch::suspend,"Calling suspend on an unstarted StopWatch should throw an exception. ");
assertThrows(IllegalStateException.class, watch::split,"Calling split on a non-running StopWatch should throw an exception. ");
assertThrows(IllegalStateException.class, watch::unsplit,"Calling unsplit on an unsplit StopWatch should throw an exception. ");
assertThrows(IllegalStateException.class, watch::resume,"Calling resume on an unsuspended StopWatch should throw an exception. ");
assertThrows(IllegalStateException.class, watch::start,"Calling start on a started StopWatch should throw an exception. ");
assertThrows(IllegalStateException.class, watch::unsplit,"Calling unsplit on an unsplit StopWatch should throw an exception. ");
assertThrows(IllegalStateException.class, watch::getSplitTime,"Calling getSplitTime on an unsplit StopWatch should throw an exception. ");
assertThrows(IllegalStateException.class, watch::resume,"Calling resume on an unsuspended StopWatch should throw an exception. ");
assertThrows(IllegalStateException.class, watch::start,"Calling start on a stopped StopWatch should throw an exception as it needs to be reset. ");
assertThrows(IllegalStateException.class, watch::getStartTime,"Calling getStartTime on an unstarted StopWatch should throw an exception");
assertThrows(IllegalStateException.class, watch::getStartTime,"Calling getStartTime on a reset, but unstarted StopWatch should throw an exception");
assertThrows(NullPointerException.class, () -> DateUtils.addDays(null, 0));
assertThrows(NullPointerException.class, () -> DateUtils.addHours(null, 0));
assertThrows(NullPointerException.class, () -> DateUtils.addMilliseconds(null, 0));
assertThrows(NullPointerException.class, () -> DateUtils.addMinutes(null, 0));
assertThrows(NullPointerException.class, () -> DateUtils.addMonths(null, 0));
assertThrows(NullPointerException.class, () -> DateUtils.addSeconds(null, 0));
assertThrows(NullPointerException.class, () -> DateUtils.addMonths(null, 0));
assertThrows(NullPointerException.class, () -> DateUtils.addYears(null, 0));
assertThrows(NullPointerException.class, () -> DateUtils.ceiling((Date) null, Calendar.SECOND));
assertThrows(NullPointerException.class, () -> DateUtils.ceiling((Calendar) null, Calendar.SECOND));
assertThrows(NullPointerException.class, () -> DateUtils.ceiling((Object) null, Calendar.SECOND));
assertThrows(ClassCastException.class, () -> DateUtils.ceiling("", Calendar.SECOND));
assertThrows(IllegalArgumentException.class, () -> DateUtils.ceiling(date1, -9999));
assertThrows(ArithmeticException.class, () -> DateUtils.ceiling(endCal, Calendar.DATE));
assertThrows(ArithmeticException.class, () -> DateUtils.ceiling(endCal, Calendar.DATE));
assertThrows(NullPointerException.class, () -> DateUtils.isSameDay(Calendar.getInstance(), null));
assertThrows(NullPointerException.class, () -> DateUtils.isSameDay(null, Calendar.getInstance()));
assertThrows(NullPointerException.class, () -> DateUtils.isSameDay((Calendar) null, null));
assertThrows(NullPointerException.class, () -> DateUtils.isSameDay(new Date(), null));
assertThrows(NullPointerException.class, () -> DateUtils.isSameDay(null, new Date()));
assertThrows(NullPointerException.class, () -> DateUtils.isSameDay((Date) null, null));
assertThrows(NullPointerException.class, () -> DateUtils.isSameInstant(Calendar.getInstance(), null));
assertThrows(NullPointerException.class, () -> DateUtils.isSameInstant(null, Calendar.getInstance()));
assertThrows(NullPointerException.class, () -> DateUtils.isSameInstant((Calendar) null, null));
assertThrows(NullPointerException.class, () -> DateUtils.isSameInstant(new Date(), null));
assertThrows(NullPointerException.class, () -> DateUtils.isSameInstant(null, new Date()));
assertThrows(NullPointerException.class, () -> DateUtils.isSameInstant((Date) null, null));
assertThrows(NullPointerException.class, () -> DateUtils.isSameLocalTime(Calendar.getInstance(), null));
assertThrows(NullPointerException.class, () -> DateUtils.isSameLocalTime(null, Calendar.getInstance()));
assertThrows(NullPointerException.class, () -> DateUtils.isSameLocalTime(null, null));
assertThrows(IllegalArgumentException.class, () -> DateUtils.iterator(Calendar.getInstance(), -9999));
assertThrows(NullPointerException.class, () -> DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER));
assertThrows(NullPointerException.class, () -> DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER));
assertThrows(NullPointerException.class, () -> DateUtils.iterator((Object) null, DateUtils.RANGE_WEEK_CENTER));
assertThrows(ClassCastException.class, () -> DateUtils.iterator("", DateUtils.RANGE_WEEK_CENTER));
assertThrows(ParseException.class, () -> DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"));
assertThrows(ParseException.class, () -> DateUtils.parseDate("Mi, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"));
assertThrows(ParseException.class, () -> DateUtils.parseDate("19721203"));
assertThrows(NullPointerException.class, () -> DateUtils.parseDate("19721203", (String[]) null));
assertThrows(ParseException.class, () -> DateUtils.parseDate("197212AB", parsers));
assertThrows(ParseException.class, () -> DateUtils.parseDate("PURPLE", parsers));
assertThrows(NullPointerException.class, () -> DateUtils.parseDate(null, parsers));
assertThrows(ParseException.class, () -> DateUtils.parseDateStrictly(dateStr, parsers));
assertThrows(NullPointerException.class, () -> DateUtils.round((Date) null, Calendar.SECOND));
assertThrows(NullPointerException.class, () -> DateUtils.round((Calendar) null, Calendar.SECOND));
assertThrows(NullPointerException.class, () -> DateUtils.round((Object) null, Calendar.SECOND));
assertThrows(ClassCastException.class, () -> DateUtils.round("", Calendar.SECOND));
assertThrows(IllegalArgumentException.class, () -> DateUtils.round(date1, -9999));
assertThrows(IllegalArgumentException.class,() -> DateUtils.setDays(BASE_DATE, 32),outsideOfRangeAssertionMessage);
assertThrows(IllegalArgumentException.class,() -> DateUtils.setDays(BASE_DATE, 0),outsideOfRangeAssertionMessage);
assertThrows(NullPointerException.class, () -> DateUtils.setDays(null, 1));
assertThrows(IllegalArgumentException.class,() -> DateUtils.setHours(BASE_DATE, 24),outsideOfRangeAssertionMessage);
assertThrows(IllegalArgumentException.class,() -> DateUtils.setHours(BASE_DATE, -1),outsideOfRangeAssertionMessage);
assertThrows(NullPointerException.class, () -> DateUtils.setHours(null, 0));
assertThrows(IllegalArgumentException.class,() -> DateUtils.setMilliseconds(BASE_DATE, 1000),outsideOfRangeAssertionMessage);
assertThrows(IllegalArgumentException.class,() -> DateUtils.setMilliseconds(BASE_DATE, -1),outsideOfRangeAssertionMessage);
assertThrows(NullPointerException.class, () -> DateUtils.setMilliseconds(null, 0));
assertThrows(IllegalArgumentException.class,() -> DateUtils.setMinutes(BASE_DATE, 60),outsideOfRangeAssertionMessage);
assertThrows(IllegalArgumentException.class,() -> DateUtils.setMinutes(BASE_DATE, -1),outsideOfRangeAssertionMessage);
assertThrows(NullPointerException.class, () -> DateUtils.setMinutes(null, 0));
assertThrows(IllegalArgumentException.class,() -> DateUtils.setMonths(BASE_DATE, 12),outsideOfRangeAssertionMessage);
assertThrows(IllegalArgumentException.class,() -> DateUtils.setMonths(BASE_DATE, -1),outsideOfRangeAssertionMessage);
assertThrows(NullPointerException.class, () -> DateUtils.setMonths(null, 0));
assertThrows(IllegalArgumentException.class,() -> DateUtils.setSeconds(BASE_DATE, 60),outsideOfRangeAssertionMessage);
assertThrows(IllegalArgumentException.class,() -> DateUtils.setSeconds(BASE_DATE, -1),outsideOfRangeAssertionMessage);
assertThrows(NullPointerException.class, () -> DateUtils.setSeconds(null, 0));
assertThrows(NullPointerException.class, () -> DateUtils.setYears(null, 0));
assertThrows(NullPointerException.class, () -> DateUtils.toCalendar(null));
assertThrows(NullPointerException.class, () -> DateUtils.toCalendar(null, null));
assertThrows(NullPointerException.class, () -> DateUtils.toCalendar(null, zone));
assertThrows(NullPointerException.class, () -> DateUtils.toCalendar(date1, null));
assertThrows(NullPointerException.class, () -> DateUtils.truncate((Date) null, Calendar.SECOND));
assertThrows(NullPointerException.class, () -> DateUtils.truncate((Calendar) null, Calendar.SECOND));
assertThrows(NullPointerException.class, () -> DateUtils.truncate((Object) null, Calendar.SECOND));
assertThrows(ClassCastException.class, () -> DateUtils.truncate("", Calendar.SECOND));
assertThrows(ArithmeticException.class, () -> DateUtils.truncate(endCal, Calendar.DATE));
assertThrows(ArithmeticException.class, () -> DateUtils.truncate(endCal, Calendar.DATE));
assertThrows(NoSuchElementException.class, it2::next);
assertThrows(UnsupportedOperationException.class, it3::remove);
assertThrows(IllegalArgumentException.class, () -> new GmtTimeZone(false, 24, 0));
assertThrows(IllegalArgumentException.class, () -> new GmtTimeZone(false, 0, 60));
assertThrows(UnsupportedOperationException.class, () -> new GmtTimeZone(false, 0, 0).setRawOffset(0));
assertThrows(IOException.class, () -> DurationUtils.of(() -> {throw new IOException();
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new boolean[] {true, false}, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new boolean[] {true, false}, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((boolean[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new byte[] {1, 2}, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new byte[] {1, 2}, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((byte[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new char[] {'a', 'b'}, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new char[] {'a', 'b'}, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((char[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new double[] {1, 2}, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new double[] {1, 2}, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((double[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new float[] {1, 2}, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new float[] {1, 2}, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((float[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new int[] {1, 2}, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new int[] {1, 2}, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((int[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new long[] {1, 2}, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new long[] {1, 2}, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((long[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new Object[] {"a", "b"}, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new Object[] {"a", "b"}, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((Object[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new short[] {1, 2}, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove(new short[] {1, 2}, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((short[]) null, 0));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.toBoolean(8, 6, 7));
assertThrows(IllegalArgumentException.class,() -> BooleanUtils.toBoolean(Integer.valueOf(8), Integer.valueOf(6), Integer.valueOf(7)));
assertThrows(IllegalArgumentException.class,() -> BooleanUtils.toBoolean(null, Integer.valueOf(6), Integer.valueOf(7)));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.toBoolean("X", "Y", "N"));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.toBoolean(null, "Y", "N"));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.toBooleanObject(9, 6, 7, 8));
assertThrows(IllegalArgumentException.class,() -> BooleanUtils.toBooleanObject(Integer.valueOf(9), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8)));
assertThrows(IllegalArgumentException.class,() -> BooleanUtils.toBooleanObject(null, Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8)));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.toBooleanObject("X", "Y", "N", "U"));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.toBooleanObject(null, "Y", "N", "U"));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.and(new Boolean[] {}));
assertThrows(NullPointerException.class, () -> BooleanUtils.and((Boolean[]) null));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.and(new boolean[] {}));
assertThrows(NullPointerException.class, () -> BooleanUtils.and((boolean[]) null));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.oneHot(new Boolean[] {}));
assertThrows(NullPointerException.class, () -> BooleanUtils.oneHot((Boolean[]) null));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.oneHot(new boolean[] {}));
assertThrows(NullPointerException.class, () -> BooleanUtils.oneHot((boolean[]) null));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.or(new Boolean[] {}));
assertThrows(NullPointerException.class, () -> BooleanUtils.or((Boolean[]) null));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.or(new boolean[] {}));
assertThrows(NullPointerException.class, () -> BooleanUtils.or((boolean[]) null));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.xor(new Boolean[] {}));
assertThrows(NullPointerException.class, () -> BooleanUtils.xor((Boolean[]) null));
assertThrows(IllegalArgumentException.class, () -> BooleanUtils.xor(new boolean[] {}));
assertThrows(NullPointerException.class, () -> BooleanUtils.xor((boolean[]) null));
assertThrows(NullPointerException.class,() -> ClassPathUtils.toFullyQualifiedName((Class<?>) null, "Test.properties"));
assertThrows(NullPointerException.class, () -> ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class, null));
assertThrows(NullPointerException.class,() -> ClassPathUtils.toFullyQualifiedName((Package) null, "Test.properties"));
assertThrows(NullPointerException.class,() -> ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class.getPackage(), null));
assertThrows(NullPointerException.class,() -> ClassPathUtils.toFullyQualifiedPath((Class<?>) null, "Test.properties"));
assertThrows(NullPointerException.class, () -> ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class, null));
assertThrows(NullPointerException.class,() -> ClassPathUtils.toFullyQualifiedPath((Package) null, "Test.properties"));
assertThrows(NullPointerException.class,() -> ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class.getPackage(), null));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(3, 5, 5, false, false));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(-1));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(-1, true, true));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(-1, DUMMY));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(1, new char[0]));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(-1, ""));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(-1, (String) null));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(-1, 'a', 'z', false, false));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY));
assertThrows(IllegalArgumentException.class,() -> RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(8, 32, 48, false, true));
assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(8, 32, 65, true, false));
assertThrows(IllegalArgumentException.class, () -> new ConcurrentException(new RuntimeException()));
assertThrows(IllegalArgumentException.class, () -> new ConcurrentException("An error", new Error()));
assertThrows(IllegalArgumentException.class, () -> new ConcurrentException(null));
assertThrows(IllegalArgumentException.class, () -> new ConcurrentRuntimeException(new RuntimeException()));
assertThrows(IllegalArgumentException.class, () -> new ConcurrentRuntimeException("An error", new Error()));
assertThrows(IllegalArgumentException.class, () -> new ConcurrentRuntimeException(null));
final AssertionError e = assertThrows(AssertionError.class, () -> ConcurrentUtils.extractCause(new ExecutionException(err)));
assertThrows(RuntimeException.class, () -> ConcurrentUtils.extractCause(new ExecutionException(rex)));
final Error e = assertThrows(Error.class, () -> ConcurrentUtils.extractCauseUnchecked(new ExecutionException(err)));
final RuntimeException r = assertThrows(RuntimeException.class, () -> ConcurrentUtils.extractCauseUnchecked(new ExecutionException(rex)));
final Error e = assertThrows(Error.class, () -> ConcurrentUtils.handleCause(new ExecutionException(err)));
final RuntimeException r = assertThrows(RuntimeException.class, () -> ConcurrentUtils.handleCause(new ExecutionException(rex)));
final ConcurrentException cex = assertThrows(ConcurrentException.class, () -> ConcurrentUtils.handleCause(new ExecutionException(ex)));
final Error e = assertThrows(Error.class, () -> ConcurrentUtils.handleCauseUnchecked(new ExecutionException(err)));
final RuntimeException r = assertThrows(RuntimeException.class, () -> ConcurrentUtils.handleCauseUnchecked(new ExecutionException(rex)));
final ConcurrentRuntimeException crex = assertThrows(ConcurrentRuntimeException.class,() -> ConcurrentUtils.handleCauseUnchecked(new ExecutionException(ex)));
final ConcurrentRuntimeException crex = assertThrows(ConcurrentRuntimeException.class, () -> ConcurrentUtils.initializeUnchecked(init));
final ConcurrentRuntimeException crex = assertThrows(ConcurrentRuntimeException.class,() -> ConcurrentUtils.createIfAbsentUnchecked(new ConcurrentHashMap<>(), "test", init));
assertThrows(IllegalStateException.class, () -> init.setExternalExecutor(exec));
assertThrows(IllegalStateException.class, init::get);
final Exception ex = assertThrows(Exception.class, init::get);
final ConcurrentException cex = assertThrows(ConcurrentException.class, init::get);
assertThrows(NullPointerException.class, () -> initializer.addInitializer(null, new ChildBackgroundInitializer()));
assertThrows(NullPointerException.class, () -> initializer.addInitializer(CHILD_INIT, null));
assertThrows(IllegalStateException.class,() -> initializer.addInitializer(CHILD_INIT, new ChildBackgroundInitializer()),"Could add initializer after start()!");
assertThrows(NoSuchElementException.class, () -> res.getInitializer("unknown"));
assertThrows(NoSuchElementException.class, () -> res.getResultObject("unknown"));
assertThrows(NoSuchElementException.class, () -> res.getException("unknown"));
assertThrows(NoSuchElementException.class, () -> res.isException("unknown"));
assertThrows(UnsupportedOperationException.class, it::remove);
final Exception ex = assertThrows(Exception.class, initializer::get);
assertThrows(Throwable.class, () -> memoizer.compute(input));
assertThrows(IllegalArgumentException.class, () -> memoizer.compute(input));
assertThrows(Throwable.class, () -> memoizer.compute(input));
assertThrows(IllegalArgumentException.class, () -> memoizer.compute(input));
assertThrows(Throwable.class, () -> memoizer.compute(input));
assertThrows(Error.class, () -> memoizer.compute(input));
assertThrows(RuntimeException.class, () -> memoizer.compute(input));
assertThrows(CircuitBreakingException.class, () -> {throw new CircuitBreakingException(EXCEPTION_MESSAGE, generateCause());
assertThrows(CircuitBreakingException.class, () -> {throw new CircuitBreakingException(EXCEPTION_MESSAGE);
assertThrows(CircuitBreakingException.class, () -> {throw new CircuitBreakingException(generateCause());
assertThrows(CircuitBreakingException.class, () -> {throw new CircuitBreakingException();
assertThrows(UncheckedExecutionException.class, () -> UncheckedFuture.on(new TestFuture<>(e)).get());
assertThrows(UncheckedInterruptedException.class, () -> UncheckedFuture.on(new TestFuture<>(e)).get());
assertThrows(UncheckedExecutionException.class, () -> UncheckedFuture.on(new TestFuture<>(e)).get(1, TimeUnit.MICROSECONDS));
assertThrows(UncheckedInterruptedException.class, () -> UncheckedFuture.on(new TestFuture<>(e)).get(1, TimeUnit.MICROSECONDS));
assertThrows(UncheckedTimeoutException.class, () -> UncheckedFuture.on(new TestFuture<>(e)).get(1, TimeUnit.MICROSECONDS));
assertThrows(NullPointerException.class, () -> new CallableBackgroundInitializer<>(null));
assertThrows(NullPointerException.class, () -> new CallableBackgroundInitializer<Integer>(null, exec));
assertThrows(NullPointerException.class, () -> builder.namingPattern(null));
assertThrows(NullPointerException.class, () -> builder.wrappedFactory(null));
assertThrows(NullPointerException.class, () -> builder.uncaughtExceptionHandler(null));
assertThrows(IllegalArgumentException.class, () -> new TimedSemaphore(0L, UNIT, LIMIT));
assertThrows(IllegalStateException.class, semaphore::acquire);
assertThrows(IllegalStateException.class, semaphore::tryAcquire);
assertThrows(Throwable.class, () -> memoizer.compute(input));
assertThrows(IllegalStateException.class, () -> memoizer.compute(input));
assertThrows(Throwable.class, () -> memoizer.compute(input));
assertThrows(IllegalStateException.class, () -> memoizer.compute(input));
assertThrows(Throwable.class, () -> memoizer.compute(input));
assertThrows(Error.class, () -> memoizer.compute(input));
assertThrows(RuntimeException.class, () -> memoizer.compute(input));
assertThrows(IllegalArgumentException.class,() -> EnumUtils.generateBitVector(TooMany.class, EnumSet.of(TooMany.A1)));
assertThrows(IllegalArgumentException.class, () -> EnumUtils.generateBitVector(TooMany.class, TooMany.A1));
assertThrows(IllegalArgumentException.class, () -> EnumUtils.generateBitVector(rawType, rawList));
assertThrows(IllegalArgumentException.class, () -> EnumUtils.generateBitVector(rawType));
assertThrows(NullPointerException.class, () -> EnumUtils.generateBitVector(Traffic.class, (Traffic[]) null));
assertThrows(IllegalArgumentException.class,() -> EnumUtils.generateBitVector(Traffic.class, Traffic.RED, null));
assertThrows(NullPointerException.class, () -> EnumUtils.generateBitVector(null, EnumSet.of(Traffic.RED)));
assertThrows(NullPointerException.class, () -> EnumUtils.generateBitVector(null, Traffic.RED));
assertThrows(NullPointerException.class,() -> EnumUtils.generateBitVector(Traffic.class, Arrays.asList(Traffic.RED, null)));
assertThrows(NullPointerException.class,() -> EnumUtils.generateBitVector(Traffic.class, (Iterable<Traffic>) null));
assertThrows(IllegalArgumentException.class, () -> EnumUtils.generateBitVectors(rawType, rawList));
assertThrows(IllegalArgumentException.class, () -> EnumUtils.generateBitVectors(rawType));
assertThrows(NullPointerException.class, () -> EnumUtils.generateBitVectors(Traffic.class, (Traffic[]) null));
assertThrows(IllegalArgumentException.class,() -> EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, null));
assertThrows(NullPointerException.class, () -> EnumUtils.generateBitVectors(null, EnumSet.of(Traffic.RED)));
assertThrows(NullPointerException.class, () -> EnumUtils.generateBitVectors(null, Traffic.RED));
assertThrows(NullPointerException.class,() -> EnumUtils.generateBitVectors(Traffic.class, Arrays.asList(Traffic.RED, null)));
assertThrows(NullPointerException.class, () -> EnumUtils.generateBitVectors(null, (Iterable<Traffic>) null));
assertThrows(NullPointerException.class, () -> EnumUtils.getEnum((Class<Traffic>) null, "PURPLE"));
assertThrows(NullPointerException.class, () -> EnumUtils.getEnumIgnoreCase((Class<Traffic>) null, "PURPLE"));
assertThrows(NullPointerException.class, () -> EnumUtils.isValidEnum(null, "PURPLE"));
assertThrows(NullPointerException.class, () -> EnumUtils.isValidEnumIgnoreCase(null, "PURPLE"));
assertThrows(IllegalArgumentException.class, () -> EnumUtils.processBitVector(TooMany.class, 0L));
assertThrows(NullPointerException.class, () -> EnumUtils.processBitVector(empty, 0L));
assertThrows(NullPointerException.class, () -> EnumUtils.processBitVectors(empty, 0L));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new boolean[] { true, false }, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new boolean[] { true, false }, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new byte[] { 1, 2 }, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new byte[] { 1, 2 }, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new char[] { 'a', 'b' }, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new char[] { 'a', 'b' }, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new double[] { 1, 2 }, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new double[] { 1, 2 }, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new float[] { 1, 2 }, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new float[] { 1, 2 }, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new int[] { 1, 2 }, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new int[] { 1, 2 }, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new long[] { 1, 2 }, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new long[] { 1, 2 }, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll((boolean[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll((byte[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll((char[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll((double[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll((float[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll((int[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll((long[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.remove((Object[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll((short[]) null, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new Object[] { "a", "b" }, -1));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new Object[] { "a", "b" }, 2));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new short[] { 1, 2 }, -1, 0));
assertThrows(IndexOutOfBoundsException.class, () -> ArrayUtils.removeAll(new short[] { 1, 2 }, 2, 0));
assertThrows(IllegalArgumentException.class, () -> RandomUtils.nextBytes(-1));
assertThrows(IllegalArgumentException.class, () -> RandomUtils.nextInt(-1, 1));
assertThrows(IllegalArgumentException.class, () -> RandomUtils.nextLong(-1, 1));
assertThrows(IllegalArgumentException.class, () -> RandomUtils.nextDouble(-1, 1));
assertThrows(IllegalArgumentException.class, () -> RandomUtils.nextFloat(-1, 1));
assertThrows(IllegalArgumentException.class, () -> RandomUtils.nextInt(2, 1));
assertThrows(IllegalArgumentException.class, () -> RandomUtils.nextLong(2, 1));
assertThrows(IllegalArgumentException.class, () -> RandomUtils.nextDouble(2, 1));
assertThrows(IllegalArgumentException.class, () -> RandomUtils.nextFloat(2, 1));
assertThrows(IllegalArgumentException.class,() -> StringUtils.abbreviate("abc", 3),"StringUtils.abbreviate expecting IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> StringUtils.abbreviate("abcdefghij", 0, 3),"StringUtils.abbreviate expecting IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> StringUtils.abbreviate("abcdefghij", 5, 6),"StringUtils.abbreviate expecting IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> StringUtils.abbreviate("abcdefghij", "...", 3),"StringUtils.abbreviate expecting IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> StringUtils.abbreviate("abcdefghij", "::", 0, 2),"StringUtils.abbreviate expecting IllegalArgumentException");
assertThrows(IllegalArgumentException.class,() -> StringUtils.abbreviate("abcdefghij", "!!!", 5, 6),"StringUtils.abbreviate expecting IllegalArgumentException");
assertThrows(IllegalArgumentException.class, () -> StringUtils.getFuzzyDistance(null, null, null));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getFuzzyDistance(null, "clear", Locale.ENGLISH));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getFuzzyDistance(" ", null, Locale.ENGLISH));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getFuzzyDistance(" ", "clear", null));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getJaroWinklerDistance(null, null));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getJaroWinklerDistance(null, "clear"));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getJaroWinklerDistance(" ", null));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getLevenshteinDistance("a", null));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getLevenshteinDistance(null, "a", 0));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getLevenshteinDistance(null, "a"));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getLevenshteinDistance("a", null, 0));
assertThrows(IllegalArgumentException.class, () -> StringUtils.getLevenshteinDistance("a", "a", -1));
assertThrows(IllegalArgumentException.class, () -> StringUtils.joinWith(",", (Object[]) null));
assertThrows(PatternSyntaxException.class,() -> StringUtils.removeAll("any", "{badRegexSyntax}"),"StringUtils.removeAll expecting PatternSyntaxException");
assertThrows(PatternSyntaxException.class,() -> StringUtils.removeFirst("any", "{badRegexSyntax}"),"StringUtils.removeFirst expecting PatternSyntaxException");
assertThrows(IllegalArgumentException.class,() -> StringUtils.replaceEach("abba", new String[]{"a"}, new String[]{"b", "a"}),"StringUtils.replaceEach(String, String[], String[]) expecting IllegalArgumentException");
assertThrows(IllegalStateException.class,() -> StringUtils.replaceEachRepeatedly("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}),"Should be a circular reference");
assertThrows(PatternSyntaxException.class,() -> StringUtils.replaceAll("any", "{badRegexSyntax}", ""),"StringUtils.replaceAll expecting PatternSyntaxException");
assertThrows(PatternSyntaxException.class,() -> StringUtils.replaceFirst("any", "{badRegexSyntax}", ""),"StringUtils.replaceFirst expecting PatternSyntaxException");
assertThrows(IllegalArgumentException.class, () -> StringUtils.truncate(null, -1), "maxWith cannot be negative");
assertThrows(IllegalArgumentException.class, () -> StringUtils.truncate(null, -10), "maxWith cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate(null, Integer.MIN_VALUE),"maxWith cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", -1),"maxWith cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", -100),"maxWith cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", Integer.MIN_VALUE),"maxWith cannot be negative");
assertThrows(IllegalArgumentException.class, () -> StringUtils.truncate(null, -1, 0), "offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate(null, -10, -4),"offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate(null, Integer.MIN_VALUE, Integer.MIN_VALUE),"offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", 0, -1),"maxWith cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", 0, -10),"maxWith cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", 0, -100),"maxWith cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", 1, -100),"maxWith cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", 0, Integer.MIN_VALUE),"maxWith cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", -1, 0),"offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", -10, 0),"offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", -100, 1),"offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", Integer.MIN_VALUE, 0),"offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", -1, -1),"offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", -10, -10),"offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", -100, -100),"offset cannot be negative");
assertThrows(IllegalArgumentException.class,() -> StringUtils.truncate("abcdefghij", Integer.MIN_VALUE, Integer.MIN_VALUE),"offset cannot be negative");
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isTrue(false));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isTrue(false, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isTrue(false, "MSG %s", 6));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isTrue(false, "MSG %s", 7.4d));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.isTrue(false, "MSG %s %s", "Object 1", "Object 2"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notNull(null));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notNull(null, "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notEmpty((Object[]) null));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notEmpty(new Object[0]));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notEmpty((Object[]) null, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notEmpty(new Object[0], "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notEmpty((Collection<?>) null));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notEmpty(Collections.emptySet()));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notEmpty((Collection<?>) null, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notEmpty(Collections.emptySet(), "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notEmpty((Map<?, ?>) null));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notEmpty(Collections.emptyMap()));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notEmpty((Map<?, ?>) null, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notEmpty(Collections.emptyMap(), "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notEmpty((CharSequence) null));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notEmpty(""));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notEmpty((CharSequence) null, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notEmpty("", "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notBlank(null));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notBlank(""));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notBlank("   "));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notBlank(" \n \t \r \n "));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.notBlank(null, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notBlank("", "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notBlank("   ", "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notBlank(" \n \t \r \n ", "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.noNullElements((Object[]) null));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.noNullElements(new String[] {"a", null}));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.noNullElements((Object[]) null, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.noNullElements(new String[] {"a", null}, "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.noNullElements((Collection<?>) null));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.noNullElements(Collections.singleton(null)));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.noNullElements((Collection<?>) null, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.noNullElements(Collections.singleton(null), "MSG"));
assertThrows(IllegalStateException.class, () -> Validate.validState(false, "The Message"));
assertThrows(IllegalStateException.class, () -> Validate.validState(false));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.validIndex((Object[]) null, 1));
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class, () -> Validate.validIndex(new String[] {"a"}, -1));
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class, () -> Validate.validIndex(new String[] {"a"}, 1));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.validIndex((Object[]) null, 1, "MSG"));
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class,() -> Validate.validIndex(new String[] {"a"}, -1, "MSG"));
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class, () -> Validate.validIndex(new String[] {"a"}, 1, "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.validIndex((Collection<?>) null, 1));
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class,() -> Validate.validIndex(Collections.singleton("a"), -1));
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class,() -> Validate.validIndex(Collections.singleton("a"), 1));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.validIndex((Collection<?>) null, 1, "MSG"));
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class,() -> Validate.validIndex(Collections.singleton("a"), -1, "MSG"));
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class, () -> Validate.validIndex(Collections.singleton("a"), 1, "MSG"));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.validIndex((String) null, 1));
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class, () -> Validate.validIndex("a", -1));
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class, () -> Validate.validIndex("a", 1));
final NullPointerException ex = assertThrows(NullPointerException.class, () -> Validate.validIndex((String) null, 1, "MSG"));
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class, () -> Validate.validIndex("a", -1, "MSG"));
final IndexOutOfBoundsException ex = assertThrows(IndexOutOfBoundsException.class, () -> Validate.validIndex("a", 1, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.matchesPattern("hi", "[0-9]*"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.matchesPattern("hi", "[0-9]*", "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notNaN(Double.NaN));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.notNaN(Double.NaN, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.finite(Double.POSITIVE_INFINITY));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.finite(Double.NEGATIVE_INFINITY));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.finite(Double.NaN));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.finite(Double.POSITIVE_INFINITY, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.finite(Double.NEGATIVE_INFINITY, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.finite(Double.NaN, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, "0"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, "4"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, "0", "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, "4", "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0.01));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4.1));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0.01, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4.1, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, "0"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, "4"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, "0", "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, "4", "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0.01));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4.1));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0.01, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4.1, "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isInstanceOf(List.class, "hi"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isInstanceOf(List.class, "hi", "MSG"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.isInstanceOf(List.class, "hi", "Error %s=%s", "Name", "Value"));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isAssignableFrom(List.class, String.class));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isAssignableFrom(null, String.class));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isAssignableFrom(List.class, null));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> Validate.isAssignableFrom(null, null));
final IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,() -> Validate.isAssignableFrom(List.class, String.class, "MSG"));
assertThrows(IllegalArgumentException.class, () -> ArrayUtils.getLength("notAnArray"));
assertThrows(NullPointerException.class, () -> ArrayUtils.isSorted(null, null));
assertThrows(IllegalArgumentException.class, () -> ArrayUtils.nullToEmpty(input, null));
assertThrows(IllegalArgumentException.class, () -> ArrayUtils.isSameType(null, null));
assertThrows(IllegalArgumentException.class, () -> ArrayUtils.isSameType(null, new Object[0]));
assertThrows(IllegalArgumentException.class, () -> ArrayUtils.isSameType(new Object[0], null));
assertThrows(ClassCastException.class,() -> java.sql.Date[].class.cast(ArrayUtils.subarray(dateArray, 1, 3)),"Invalid downcast");
assertThrows(IllegalArgumentException.class, () ->ArrayUtils.toMap(new String[][]{{"foo", "bar"}, {"short"}}));
assertThrows(IllegalArgumentException.class, () ->ArrayUtils.toMap(new Object[]{new Object[]{"foo", "bar"}, "illegal type"}));
assertThrows(IllegalArgumentException.class, () ->ArrayUtils.toMap(new Object[]{new Object[]{"foo", "bar"}, null}));
assertThrows(NullPointerException.class,() -> ArrayUtils.toPrimitive(new Byte[]{Byte.valueOf(Byte.MIN_VALUE), null}));
assertThrows(NullPointerException.class,() -> ArrayUtils.toPrimitive(new Character[]{Character.valueOf(Character.MIN_VALUE), null}));
assertThrows(NullPointerException.class,() -> ArrayUtils.toPrimitive(new Float[]{Float.valueOf(Float.MIN_VALUE), null}));
assertThrows(NullPointerException.class,() -> ArrayUtils.toPrimitive(new Float[]{Float.valueOf(Float.MIN_VALUE), null}));
assertThrows(NullPointerException.class,() -> ArrayUtils.toPrimitive(new Integer[]{Integer.valueOf(Integer.MIN_VALUE), null}));
assertThrows(NullPointerException.class,() -> ArrayUtils.toPrimitive(new Long[]{Long.valueOf(Long.MIN_VALUE), null}));
assertThrows(NullPointerException.class,() -> ArrayUtils.toPrimitive(new Short[]{Short.valueOf(Short.MIN_VALUE), null}));
assertThrows(NullPointerException.class, () -> ArrayUtils.toStringArray(new Object[]{null}));
assertThrows(SerializationException.class, () -> SerializationUtils.serialize(iMap, streamTest));
assertThrows(NullPointerException.class, () -> SerializationUtils.serialize(iMap, null));
assertThrows(NullPointerException.class, () -> SerializationUtils.serialize(null, null));
assertThrows(SerializationException.class, () -> SerializationUtils.serialize(iMap, streamTest));
assertThrows(ClassCastException.class, () -> {// Causes ClassCastException in call site, not in SerializationUtils.deserialize@SuppressWarnings("unused") // needed to cause Exceptionfinal Integer i = SerializationUtils.deserialize(serialized);
assertThrows(NullPointerException.class, () -> SerializationUtils.deserialize((InputStream) null));
assertThrows(SerializationException.class,() -> SerializationUtils.deserialize(new ByteArrayInputStream(new byte[0])));
final SerializationException se = assertThrows(SerializationException.class, () -> SerializationUtils.deserialize(inTest));
assertThrows(SerializationException.class, () -> SerializationUtils.serialize(iMap));
assertThrows(NullPointerException.class, () -> SerializationUtils.deserialize((byte[]) null));
assertThrows(SerializationException.class, () -> SerializationUtils.deserialize(new byte[0]));
assertThrows(SerializationException.class, () -> SerializationUtils.clone(iMap));
assertThrows(NullPointerException.class, () -> StrLookup.systemPropertiesLookup().lookup(null));
assertThrows(IllegalArgumentException.class,() -> uu.translate(input),"A lack of digits in a Unicode escape sequence failed to throw an exception");
assertThrows(IllegalArgumentException.class, () -> failingNeu.translate(failingInput));
assertThrows(NoSuchElementException.class, tokenizer::next);
assertThrows(NoSuchElementException.class, tkn::previous);
assertThrows(UnsupportedOperationException.class, tkn::remove);
assertThrows(UnsupportedOperationException.class, () -> tkn.set("x"));
assertThrows(UnsupportedOperationException.class, () -> tkn.add("y"));
assertThrows(NoSuchElementException.class, tkn::next);
assertThrows(IllegalStateException.class,() -> sub.replace("The ${animal} jumps over the ${target}."),"Cyclic replacement was not detected!");
assertThrows(IllegalStateException.class,() -> sub2.replace("The ${animal} jumps over the ${target}."),"Cyclic replacement was not detected!");
assertThrows(NullPointerException.class, () -> sub.setVariablePrefix(null));
assertThrows(NullPointerException.class, () -> sub.setVariablePrefixMatcher(null));
assertThrows(NullPointerException.class, () -> sub.setVariableSuffix(null));
assertThrows(NullPointerException.class, () -> sub.setVariableSuffixMatcher(null));
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append("bar", -1, 1),"append(char[], -1,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append("bar", 3, 1),"append(char[], 3,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append("bar", 1, -1),"append(char[],, -1) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append("bar", 1, 3),"append(char[], 1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append("bar", -1, 3),"append(char[], -1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append("bar", 4, 0),"append(char[], 4, 0) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuilder("bar"), -1, 1),"append(StringBuilder, -1,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuilder("bar"), 3, 1),"append(StringBuilder, 3,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuilder("bar"), 1, -1),"append(StringBuilder,, -1) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuilder("bar"), 1, 3),"append(StringBuilder, 1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuilder("bar"), -1, 3),"append(StringBuilder, -1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuilder("bar"), 4, 0),"append(StringBuilder, 4, 0) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuffer("bar"), -1, 1),"append(char[], -1,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuffer("bar"), 3, 1),"append(char[], 3,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuffer("bar"), 1, -1),"append(char[],, -1) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuffer("bar"), 1, 3),"append(char[], 1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuffer("bar"), -1, 3),"append(char[], -1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StringBuffer("bar"), 4, 0),"append(char[], 4, 0) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StrBuilder("bar"), -1, 1),"append(char[], -1,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StrBuilder("bar"), 3, 1),"append(char[], 3,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StrBuilder("bar"), 1, -1),"append(char[],, -1) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StrBuilder("bar"), 1, 3),"append(char[], 1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StrBuilder("bar"), -1, 3),"append(char[], -1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new StrBuilder("bar"), 4, 0),"append(char[], 4, 0) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new char[]{'b', 'a', 'r'}, -1, 1),"append(char[], -1,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new char[]{'b', 'a', 'r'}, 3, 1),"append(char[], 3,) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new char[]{'b', 'a', 'r'}, 1, -1),"append(char[],, -1) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new char[]{'b', 'a', 'r'}, 1, 3),"append(char[], 1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new char[]{'b', 'a', 'r'}, -1, 3),"append(char[], -1, 3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb1.append(new char[]{'b', 'a', 'r'}, 4, 0),"append(char[], 4, 0) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, FOO),"insert(-1, Object) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, FOO),"insert(7, Object) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, "foo"),"insert(-1, String) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, "foo"),"insert(7, String) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, new char[]{'f', 'o', 'o'}),"insert(-1, char[]) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, new char[]{'f', 'o', 'o'}),"insert(7, char[]) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3),"insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3),"insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3),"insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3),"insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1),"insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10),"insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, true),"insert(-1, boolean) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, true),"insert(7, boolean) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, '!'),"insert(-1, char) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, '!'),"insert(7, char) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, 0),"insert(-1, int) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, 0),"insert(7, int) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, 1L),"insert(-1, long) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, 1L),"insert(7, long) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, 2.3F),"insert(-1, float) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, 2.3F),"insert(7, float) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, 4.5D),"insert(-1, double) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, 4.5D),"insert(7, double) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, FOO),"insert(-1, Object) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, FOO),"insert(7, Object) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(-1, "foo"),"insert(-1, String) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.insert(7, "foo"),"insert(7, String) expected StringIndexOutOfBoundsException");
assertThrows(IllegalArgumentException.class, () -> FormattableUtils.append("foo", new Formatter(), 0, -1, 1, "xx"));
assertThrows(IndexOutOfBoundsException.class,() -> sb.setLength(-1),"setLength(-1) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.setLength(-1),"setLength(-1) expected StringIndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class, () -> sb.charAt(0), "charAt(0) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class, () -> sb.charAt(-1), "charAt(-1) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class, () -> sb.charAt(-1), "charAt(-1) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class, () -> sb.charAt(3), "charAt(3) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.setCharAt(0, 'f'),"setCharAt(0, ) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.setCharAt(-1, 'f'),"setCharAt(-1, ) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class,() -> sb.setCharAt(3, '!'),"setCharAt(3, ) expected IndexOutOfBoundsException");
assertThrows(IndexOutOfBoundsException.class, () -> sb.deleteCharAt(1000));
assertThrows(IndexOutOfBoundsException.class, () -> sb.toCharArray(-1, 5), "no string index out of bound on -1");
assertThrows(IndexOutOfBoundsException.class, () -> sb.toCharArray(6, 5), "no string index out of bound on -1");
assertThrows(IndexOutOfBoundsException.class, () -> sb.getChars(-1, 0, b, 0));
assertThrows(IndexOutOfBoundsException.class, () -> sb.getChars(0, -1, b, 0));
assertThrows(IndexOutOfBoundsException.class, () -> sb.getChars(0, 20, b, 0));
assertThrows(IndexOutOfBoundsException.class, () -> sb.getChars(4, 2, b, 0));
assertThrows(IndexOutOfBoundsException.class, () -> sb.delete(1, 2));
assertThrows(IndexOutOfBoundsException.class, () -> sb.delete(-1, 1));
assertThrows(IndexOutOfBoundsException.class, () -> new StrBuilder("anything").delete(2, 1));
assertThrows(IndexOutOfBoundsException.class, () -> sb1.replace(2, 1, "anything"));
assertThrows(IndexOutOfBoundsException.class, () -> sb2.replace(1, 2, "anything"));
assertThrows(IndexOutOfBoundsException.class, () -> sb2.replace(-1, 1, "anything"));
assertThrows(IndexOutOfBoundsException.class,() -> sb1.replace(StrMatcher.stringMatcher("aa"), "-", 11, sb1.length(), -1));
assertThrows(IndexOutOfBoundsException.class,() -> sb2.replace(StrMatcher.stringMatcher("aa"), "-", -1, sb2.length(), -1));
assertThrows(IndexOutOfBoundsException.class,() -> sb1.replace(StrMatcher.stringMatcher("aa"), "-", 2, 1, -1));
assertThrows(IndexOutOfBoundsException.class, () -> sb.subSequence(-1, 5));
assertThrows(IndexOutOfBoundsException.class, () -> sb.subSequence(2, -1));
assertThrows(IndexOutOfBoundsException.class, () -> sb.subSequence(2, sb.length() + 1));
assertThrows(IndexOutOfBoundsException.class, () -> sb.subSequence(3, 2));
assertThrows(IndexOutOfBoundsException.class, () -> sb.substring(-1));
assertThrows(IndexOutOfBoundsException.class, () -> sb.substring(15));
assertThrows(IndexOutOfBoundsException.class, () -> sb.substring(-1, 5));
assertThrows(IndexOutOfBoundsException.class, () -> sb.substring(15, 20));
assertThrows(IndexOutOfBoundsException.class, () -> r.read(arr, -1, 0));
assertThrows(IndexOutOfBoundsException.class, () -> r.read(arr, 0, -1));
assertThrows(IndexOutOfBoundsException.class, () -> r.read(arr, 100, 1));
assertThrows(IndexOutOfBoundsException.class, () -> r.read(arr, 0, 100));
assertThrows(IndexOutOfBoundsException.class, () -> r.read(arr, Integer.MAX_VALUE, Integer.MAX_VALUE));
assertThrows(IllegalArgumentException.class,() -> Range.between(null, null, lengthComp));
assertThrows(NullPointerException.class, () -> intRange.elementCompareTo(null));
assertThrows(NullPointerException.class, () -> {intRange.fit(null);
assertThrows(IllegalArgumentException.class, () -> intRange.intersectionWith(Range.between(0, 9)));
assertThrows(IllegalArgumentException.class, () -> intRange.intersectionWith(null));
assertThrows(NullPointerException.class, () -> CharUtils.toChar((Character) null));
assertThrows(NullPointerException.class, () -> CharUtils.toChar((String) null));
assertThrows(IllegalArgumentException.class, () -> CharUtils.toChar(""));
assertThrows(IllegalArgumentException.class, () -> CharUtils.toIntValue('a'));
assertThrows(NullPointerException.class, () -> CharUtils.toIntValue(null));
assertThrows(IllegalArgumentException.class, () -> CharUtils.toIntValue(CHARACTER_A));
Assertions.assertThrows(IllegalStateException.class, () -> {builder.toString();
Assertions.assertThrows(IllegalStateException.class, () -> {builder.toString();
assertThrows(NullPointerException.class, () -> new DiffBuilder<>(null, this, ToStringStyle.DEFAULT_STYLE));
assertThrows(NullPointerException.class, () -> new DiffBuilder<>(this, null, ToStringStyle.DEFAULT_STYLE));
assertThrows(UnsupportedOperationException.class, () -> list.getDiffs().remove(0));
assertThrows(NullPointerException.class,() -> new DiffResult<>(null, SIMPLE_FALSE, SIMPLE_TRUE.diff(SIMPLE_FALSE).getDiffs(), SHORT_STYLE));
assertThrows(NullPointerException.class,() -> new DiffResult<>(SIMPLE_TRUE, null, SIMPLE_TRUE.diff(SIMPLE_FALSE).getDiffs(), SHORT_STYLE));
assertThrows(NullPointerException.class,() -> new DiffResult<>(SIMPLE_TRUE, SIMPLE_FALSE, null, SHORT_STYLE));
assertThrows(NullPointerException.class,() -> new ReflectionToStringBuilder(null, ToStringStyle.DEFAULT_STYLE, new StringBuffer()));
assertThrows(IllegalArgumentException.class, () -> new HashCodeBuilder(2, 3));
assertThrows(IllegalArgumentException.class, () -> new HashCodeBuilder(-2, -2));
assertThrows(IllegalArgumentException.class, () -> new HashCodeBuilder(3, 2));
assertThrows(IllegalArgumentException.class, () -> new HashCodeBuilder(0, 0));
assertThrows(IllegalArgumentException.class, () -> HashCodeBuilder.reflectionHashCode(0, 0, new TestObject(0), true));
assertThrows(IllegalArgumentException.class, () -> HashCodeBuilder.reflectionHashCode(2, 2, new TestObject(0), true));
assertThrows(NullPointerException.class, () -> HashCodeBuilder.reflectionHashCode(13, 19, null, true));
assertThrows(IllegalArgumentException.class, () -> HashCodeBuilder.reflectionHashCode(0, 0, new TestSubObject(0, 0, 0), true));
assertThrows(IllegalArgumentException.class, () -> HashCodeBuilder.reflectionHashCode(2, 2, new TestSubObject(0, 0, 0), true));
assertThrows(NullPointerException.class, () -> ToStringBuilder.setDefaultStyle(null));
assertThrows(IllegalArgumentException.class, () -> test.setUpToClass(String.class));
assertThrows(NullPointerException.class, () -> ReflectionToStringBuilder.toString(null));
assertThrows(UnsupportedOperationException.class, () -> booleanDiff.setValue(Boolean.FALSE));
assertThrows(NullPointerException.class, () -> CompareToBuilder.reflectionCompare(o1, null));
assertThrows(ClassCastException.class, () -> CompareToBuilder.reflectionCompare(o1, o2));
assertThrows(ClassCastException.class, () -> new CompareToBuilder().append(o1, o2));
assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append('A').toString());
assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append(now).toString());
assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append((Object) null).toString());
assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append(i3).toString());
assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append("a", i3, false).toString());
assertThrows(UnsupportedOperationException.class,() -> new ToStringBuilder(base).append("a", new ArrayList<>(), false).toString());
assertThrows(UnsupportedOperationException.class,() -> new ToStringBuilder(base).append("a", new HashMap<>(), false).toString());
assertThrows(UnsupportedOperationException.class,() -> new ToStringBuilder(base).append("a", (Object) new String[0], false).toString());
assertThrows(UnsupportedOperationException.class,() -> new ToStringBuilder(base).append("a", (Object) new int[]{1, 2, 3}, false).toString());
assertThrows(UnsupportedOperationException.class,() -> new ToStringBuilder(base).append("a", (Object) new String[]{"v", "x", "y", "z"}, false).toString());
assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append(3L).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object[]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[][]) null).toString());
assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());
IOException ioe = assertThrows(IOException.class, ExceptionUtilsTest::throwsCheckedException);
ioe = assertThrows(IOException.class, ExceptionUtilsTest::redeclareCheckedException);
assertThrows(NullPointerException.class,() -> ExceptionUtils.printRootCauseStackTrace(withCause, (PrintStream) null));
assertThrows(NullPointerException.class,() -> ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null));
assertThrows(NullPointerException.class, () -> ExceptionUtils.removeCommonFrames(null, null));
final Exception actual = assertThrows(Exception.class, () -> ExceptionUtils.rethrow(expected));
final Throwable t = assertThrows(Throwable.class, () -> ExceptionUtils.wrapAndThrow(new IOException()));
final Throwable t = assertThrows(Throwable.class, () -> ExceptionUtils.wrapAndThrow(new OutOfMemoryError()));
final Throwable t = assertThrows(Throwable.class, () -> ExceptionUtils.wrapAndThrow(new IllegalArgumentException()));
final Throwable t = assertThrows(Throwable.class, () -> ExceptionUtils.wrapAndThrow(new TestThrowable()));
assertThrows(CloneFailedException.class, () -> {throw new CloneFailedException(EXCEPTION_MESSAGE, generateCause());
assertThrows(CloneFailedException.class, () -> {throw new CloneFailedException(EXCEPTION_MESSAGE);
assertThrows(CloneFailedException.class, () -> {throw new CloneFailedException(generateCause());
assertThrows(IndexOutOfBoundsException.class, () -> CharSequenceUtils.subSequence(StringUtils.EMPTY, -1));
assertThrows(IndexOutOfBoundsException.class, () -> CharSequenceUtils.subSequence(StringUtils.EMPTY, 1));
assertThrows(data.throwable, this::invoke, id + " Expected " + data.throwable);
assertThrows(NullPointerException.class, () -> listenerSupport.addListener(null));
assertThrows(NullPointerException.class, () -> listenerSupport.removeListener(null));
assertThrows(IllegalArgumentException.class, () -> EventListenerSupport.create(String.class));
assertThrows(NullPointerException.class, () -> EventListenerSupport.create(null));
assertThrows(IllegalArgumentException.class, () -> EventUtils.addEventListener(src, ObjectChangeListener.class, listener));
assertThrows(RuntimeException.class, () ->EventUtils.addEventListener(src, PropertyChangeListener.class, e -> {// Do nothing!}));
assertThrows(IllegalArgumentException.class, () -> EventUtils.addEventListener(src, VetoableChangeListener.class, listener));
assertThrows(IllegalArgumentException.class, () -> ThreadUtils.findThreadById(-5L));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadGroupsByName(null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadsByName(null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadsByName("tname", (ThreadGroup) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadById(1L, (ThreadGroup) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadsByName(null, (ThreadGroup) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadsByName(null, "tgname"));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadsByName("tname", (String) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadsByName(null, (String) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadById(Thread.currentThread().getId(), (String) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadGroups(null, true, ThreadUtils.ALWAYS_TRUE_PREDICATE));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadGroups(null, false, ThreadUtils.ALWAYS_TRUE_PREDICATE));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadGroups((ThreadGroupPredicate) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadGroups((Predicate<ThreadGroup>) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreadGroups((Predicate) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreads((ThreadPredicate) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreads((Predicate<Thread>) null));
assertThrows(NullPointerException.class, () -> ThreadUtils.findThreads((Predicate) null));
final CloneFailedException e = assertThrows(CloneFailedException.class, () -> ObjectUtils.clone(string));
assertThrows(IllegalArgumentException.class, () -> ObjectUtils.median(new CharSequenceComparator()));
assertThrows(NullPointerException.class,() -> ObjectUtils.median((Comparator<CharSequence>) null, new NonComparableCharSequence("foo")));
assertThrows(NullPointerException.class,() -> ObjectUtils.median(new CharSequenceComparator(), (CharSequence[]) null));
assertThrows(IllegalArgumentException.class,() -> ObjectUtils.CONST_BYTE(-129),"CONST_BYTE(-129): IllegalArgumentException should have been thrown.");
assertThrows(IllegalArgumentException.class,() -> ObjectUtils.CONST_BYTE(128),"CONST_BYTE(128): IllegalArgumentException should have been thrown.");
assertThrows(IllegalArgumentException.class,() -> ObjectUtils.CONST_SHORT(-32769),"CONST_SHORT(-32769): IllegalArgumentException should have been thrown.");
assertThrows(IllegalArgumentException.class,() -> ObjectUtils.CONST_BYTE(32768),"CONST_SHORT(32768): IllegalArgumentException should have been thrown.");
assertThrows(NullPointerException.class, () -> ObjectUtils.identityToString((Appendable) null, "tmp"));
assertThrows(NullPointerException.class,() -> ObjectUtils.identityToString((Appendable) (new StringBuilder()), null));
assertThrows(NullPointerException.class, () -> ObjectUtils.identityToString((StrBuilder) null, "tmp"));
assertThrows(NullPointerException.class, () -> ObjectUtils.identityToString(new StrBuilder(), null));
assertThrows(NullPointerException.class, () -> ObjectUtils.identityToString((StringBuffer) null, "tmp"));
assertThrows(NullPointerException.class, () -> ObjectUtils.identityToString(new StringBuffer(), null));
assertThrows(NullPointerException.class, () -> ObjectUtils.identityToString((StringBuilder) null, "tmp"));
assertThrows(NullPointerException.class, () -> ObjectUtils.identityToString(new StringBuilder(), null));
assertThrows(IllegalArgumentException.class, ObjectUtils::<String>median);
assertThrows(NullPointerException.class, () -> ObjectUtils.median((String[]) null));
assertThrows(NullPointerException.class, ()->IOUtils.buffer((InputStream) null),npeExpectedMessage );
assertThrows(NullPointerException.class, ()->IOUtils.buffer((OutputStream) null),npeExpectedMessage);
assertThrows(NullPointerException.class, ()->IOUtils.buffer((Reader) null),npeExpectedMessage);
assertThrows(NullPointerException.class, ()->IOUtils.buffer((Writer) null),npeExpectedMessage);
assertThrows(NullPointerException.class, () -> IOUtils.writer(null));
assertThrows(IOException.class, () -> IOUtils.close(new ThrowOnCloseReader(new StringReader("s"))));
assertThrows(IOException.class,() -> IOUtils.close(new ThrowOnCloseReader(new StringReader("s")), noisyConsumer)); // closeable throws
assertThrows(IOException.class, () -> IOUtils.close(nullCloseable, new ThrowOnCloseReader(new StringReader("s"))));
assertThrows(EOFException.class, () -> IOUtils.copyLarge(is, os, 1000, 100));
assertThrows(EOFException.class, () -> IOUtils.copyLarge(is, os, 1000, 100));
assertThrows(EOFException.class, ()->IOUtils.readFully(input, buffer),"Should have failed with EOFException");
assertThrows(IllegalArgumentException.class, ()-> IOUtils.readFully(input, buffer, 0, -1),"Should have failed with IllegalArgumentException");
assertThrows(EOFException.class, ()-> IOUtils.readFully(input, buffer, 0, 2),"Should have failed with EOFException");
assertThrows(EOFException.class, ()->IOUtils.readFully(input, buffer),"Should have failed with EOFxception");
assertThrows(IllegalArgumentException.class, ()->IOUtils.readFully(input, buffer, 0, -1),"Should have failed with IllegalArgumentException" );
assertThrows(EOFException.class, ()->IOUtils.readFully(input, buffer, 0, 5),"Should have failed with EOFException" );
assertThrows(IOException.class, () -> IOUtils.resourceToByteArray("/non-existing-file.bin"));
assertThrows(IOException.class,() -> IOUtils.resourceToByteArray("non-existing-file.bin", ClassLoader.getSystemClassLoader()));
assertThrows(NullPointerException.class, () -> IOUtils.resourceToByteArray(null));
assertThrows(NullPointerException.class,() -> IOUtils.resourceToByteArray(null, ClassLoader.getSystemClassLoader()));
assertThrows(IOException.class,() -> IOUtils.resourceToString("/non-existing-file.bin", StandardCharsets.UTF_8));
assertThrows(IOException.class, () -> IOUtils.resourceToString("non-existing-file.bin", StandardCharsets.UTF_8,ClassLoader.getSystemClassLoader()));
assertThrows(NullPointerException.class, () -> IOUtils.resourceToString(null, StandardCharsets.UTF_8));
assertThrows(NullPointerException.class,() -> IOUtils.resourceToString(null, StandardCharsets.UTF_8, ClassLoader.getSystemClassLoader()));
assertThrows(IOException.class, () -> IOUtils.resourceToURL("/non-existing-file.bin"));
assertThrows(IOException.class,() -> IOUtils.resourceToURL("non-existing-file.bin", ClassLoader.getSystemClassLoader()));
assertThrows(NullPointerException.class, () -> IOUtils.resourceToURL(null));
assertThrows(NullPointerException.class, () -> IOUtils.resourceToURL(null, ClassLoader.getSystemClassLoader()));
assertThrows(NullPointerException.class, () -> IOUtils.copy(null));
assertThrows(NullPointerException.class, () -> IOUtils.copy((InputStream) null, out));
assertThrows(NullPointerException.class, () -> IOUtils.copy(in, (OutputStream) null));
assertThrows(NullPointerException.class, () -> IOUtils.copy(null, writer, "UTF8"));
assertThrows(NullPointerException.class, () -> IOUtils.copy(in, null, "UTF8"));
assertThrows(NullPointerException.class, () -> IOUtils.copy((InputStream) null, writer));
assertThrows(NullPointerException.class, () -> IOUtils.copy(in, (Writer) null)); // deliberately testing deprecated method
assertThrows(NullPointerException.class, () -> IOUtils.copy(null, writer));
assertThrows(NullPointerException.class, () -> IOUtils.copy(reader, (Appendable) null));
assertThrows(NullPointerException.class, () -> IOUtils.copy(null, out, "UTF16"));
assertThrows(NullPointerException.class, () -> IOUtils.copy(reader, null, "UTF16"));
assertThrows(NullPointerException.class, () -> IOUtils.copy((Reader) null, out));
assertThrows(NullPointerException.class, () -> IOUtils.copy(reader, (OutputStream) null)); // deliberately testing deprecated method
assertThrows(NullPointerException.class, () -> IOUtils.copy((Reader) null, writer));
assertThrows(NullPointerException.class, () -> IOUtils.copy(reader, (Writer) null));
assertThrows(IllegalStateException.class, () -> monitor.start());
assertThrows(IllegalStateException.class, () -> monitor.stop());
assertThrows(NullPointerException.class, () -> new AndFileFilter(falseFilter, null));
assertThrows(NullPointerException.class, () -> new AndFileFilter(null, falseFilter));
assertThrows(NullPointerException.class, () -> new AndFileFilter((List<IOFileFilter>) null));
assertThrows(NullPointerException.class, () -> new DelegateFileFilter((FileFilter) null));
assertThrows(NullPointerException.class, () -> new DelegateFileFilter((FilenameFilter) null));
assertThrows(NullPointerException.class, () -> new WildcardFilter((String) null));
assertThrows(NullPointerException.class, () -> new WildcardFilter((String[]) null));
assertThrows(NullPointerException.class, () -> new WildcardFilter((List<String>) null));
assertThrows(NullPointerException.class, () -> FileFilterUtils.filter(null, fileA, fileB));
assertThrows(NullPointerException.class, () -> FileFilterUtils.filterList(null, Collections.emptyList()));
assertThrows(NullPointerException.class, () -> PathUtils.filter(null, fileA, fileB));
assertThrows(NullPointerException.class, () -> FileFilterUtils.filterSet(null, Collections.emptySet()));
assertThrows(NullPointerException.class, () -> new MagicNumberFileFilter((String) null, 0));
assertThrows(IllegalArgumentException.class, () -> new MagicNumberFileFilter("0", -1));
assertThrows(IllegalArgumentException.class, () -> new MagicNumberFileFilter("", 0));
assertThrows(NullPointerException.class, () -> new MagicNumberFileFilter((byte[]) null, 0));
assertThrows(IllegalArgumentException.class, () -> new MagicNumberFileFilter(new byte[] {0}, -1));
assertThrows(IllegalArgumentException.class, () -> new MagicNumberFileFilter(new byte[] {}, 0));
assertThrows(NullPointerException.class, () -> new NameFileFilter(test), failMessage);
assertThrows(NullPointerException.class, () -> FileFilterUtils.nameFileFilter(test, IOCase.INSENSITIVE), failMessage);
assertThrows(NullPointerException.class, () -> new NameFileFilter((String[]) null));
assertThrows(NullPointerException.class, () -> new NameFileFilter(test));
assertThrows(NullPointerException.class, () -> new NotFileFilter(null));
assertThrows(NullPointerException.class, () -> FileFilterUtils.toList((IOFileFilter) null));
assertThrows(NullPointerException.class, () -> FileFilterUtils.toList(new IOFileFilter[] {null}));
assertThrows(NullPointerException.class, () -> new OrFileFilter(falseFilter, null));
assertThrows(NullPointerException.class, () -> new PrefixFileFilter((String) null));
assertThrows(NullPointerException.class, () -> new PrefixFileFilter((String[]) null));
assertThrows(NullPointerException.class, () -> new PrefixFileFilter((List<String>) null));
assertThrows(NullPointerException.class, () -> new PrefixFileFilter((String) null, IOCase.INSENSITIVE));
assertThrows(NullPointerException.class, () -> new PrefixFileFilter((String[]) null, IOCase.INSENSITIVE));
assertThrows(NullPointerException.class, () -> new PrefixFileFilter((List<String>) null, IOCase.INSENSITIVE));
assertThrows(NullPointerException.class, () -> FileFilterUtils.prefixFileFilter(null, IOCase.INSENSITIVE));
assertThrows(IllegalArgumentException.class, () -> FileFilterUtils.sizeFileFilter(-1));
assertThrows(IllegalArgumentException.class, () -> FileFilterUtils.sizeFileFilter(-1));
assertThrows(NullPointerException.class, () -> new SuffixFileFilter((String) null));
assertThrows(NullPointerException.class, () -> new SuffixFileFilter((String[]) null));
assertThrows(NullPointerException.class, () -> new SuffixFileFilter((List<String>) null));
assertThrows(NullPointerException.class, () -> new SuffixFileFilter((String) null, IOCase.INSENSITIVE));
assertThrows(NullPointerException.class, () -> new SuffixFileFilter((String[]) null, IOCase.INSENSITIVE));
assertThrows(NullPointerException.class, () -> new SuffixFileFilter((List<String>) null, IOCase.INSENSITIVE));
assertThrows(NullPointerException.class, () -> FileFilterUtils.suffixFileFilter(null, IOCase.INSENSITIVE));
assertThrows(NullPointerException.class, () -> new WildcardFileFilter((String) null));
assertThrows(NullPointerException.class, () -> new WildcardFileFilter((String[]) null));
assertThrows(NullPointerException.class, () -> new WildcardFileFilter((List<String>) null));
assertThrows(NullPointerException.class, () -> assertSerializable(new RegexFileFilter((String) null)));
assertThrows(NullPointerException.class, () -> assertSerializable(new RegexFileFilter(null, Pattern.CASE_INSENSITIVE)));
assertThrows(NullPointerException.class, () -> assertSerializable(new RegexFileFilter(null, IOCase.INSENSITIVE)));
assertThrows(NullPointerException.class, () -> assertSerializable(new RegexFileFilter((java.util.regex.Pattern) null)));
assertThrows(IOException.class, () -> PathUtils.delete(file));
assertThrows(IllegalArgumentException.class, () -> FilenameUtils.getBaseName("fil\u0000e.txt.bak"));
assertThrows(IllegalArgumentException.class, () -> FilenameUtils.getPath("~user/a/\u0000b/c.txt"));
assertThrows(IllegalArgumentException.class, () -> FilenameUtils.getPathNoEndSeparator("~user/a\u0000/b/c.txt"));
assertThrows(IllegalArgumentException.class, () -> FilenameUtils.getPrefix("~u\u0000ser\\a\\b\\c.txt"));
assertThrows(IllegalArgumentException.class, () -> FilenameUtils.getName("a\\b\\\u0000c"));
assertThrows(IllegalArgumentException.class, () -> FilenameUtils.isExtension("a.b\\fi\u0000le.txt", "TXT"));
assertThrows(IllegalArgumentException.class, () -> FilenameUtils.normalize("a\\b/c\u0000.txt"));
assertThrows(IllegalArgumentException.class, () -> FilenameUtils.normalize("\u0000a\\b/c.txt"));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkCompareTo("ABC", null));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkCompareTo(null, "ABC"));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkCompareTo(null, null));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkEquals("ABC", null));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkEquals(null, "ABC"));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkEquals(null, null));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkIndexOf("ABC", 0, null));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkIndexOf(null, 0, "ABC"));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkIndexOf(null, 0, null));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkRegionMatches("ABC", 0, null));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkRegionMatches(null, 0, "ABC"));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkRegionMatches(null, 0, null));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkRegionMatches("ABC", 1, null));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkRegionMatches(null, 1, "ABC"));
assertThrows(NullPointerException.class, () -> IOCase.SENSITIVE.checkRegionMatches(null, 1, null));
assertThrows(IllegalArgumentException.class, () -> IOCase.forName("Blah"));
assertThrows(IllegalArgumentException.class, () -> IOCase.forName(null));
assertThrowsExactly(FileAlreadyExistsException.class, () -> PathUtils.createParentDirectories(symlinkedDir.resolve("child")));
assertThrows(NullPointerException.class, () -> FileUtils.touch(null));
Assertions.assertThrows(NoSuchFileException.class, () -> testDeleteFileEmpty(PathUtils.deleteFile(tempDir)));
assertThrows(IOException.class, () -> PathUtils.deleteFile(resolved));
assertThrows(IOException.class, () -> PathUtils.deleteFile(resolved));
assertThrows(IOException.class, () -> PathUtils.fileContentEquals(temporaryFolder.toPath(), temporaryFolder.toPath()));
assertThrows(UncheckedIOException.class, () -> FilesUncheck.delete(NEW_FILE_PATH));
assertThrows(UncheckedIOException.class, () -> FilesUncheck.readSymbolicLink(NEW_FILE_PATH_LINK));
assertThrows(IllegalStateException.class, () -> theInstance.track(path, marker));
assertThrows(NullPointerException.class, () -> theInstance.track((File) null, new Object()));
assertThrows(NullPointerException.class, () -> theInstance.track((File) null, new Object(), FileDeleteStrategy.NORMAL));
assertThrows(NullPointerException.class, () -> theInstance.track((String) null, new Object()));
assertThrows(NullPointerException.class, () -> theInstance.track((String) null, new Object(), FileDeleteStrategy.NORMAL));
assertThrows(IllegalArgumentException.class, () -> new BOMInputStream(createUtf8DataStream(data, true), false, (ByteOrderMark[])null).close());
assertThrows(IllegalArgumentException.class, () -> new BOMInputStream(createUtf8DataStream(data, true), false, new ByteOrderMark[0]).close());
assertThrows(IllegalArgumentException.class, () -> in.hasBOM(ByteOrderMark.UTF_16LE));
assertThrows(IllegalArgumentException.class, () -> in.hasBOM(ByteOrderMark.UTF_16BE));
assertThrows(IllegalArgumentException.class, () -> in.hasBOM(ByteOrderMark.UTF_32LE));
assertThrows(IllegalArgumentException.class, () -> in.hasBOM(ByteOrderMark.UTF_32BE));
assertThrows(IllegalArgumentException.class, () -> in.hasBOM(ByteOrderMark.UTF_16BE));
assertThrows(IllegalArgumentException.class, () -> {new UnsynchronizedByteArrayInputStream(IOUtils.EMPTY_BYTE_ARRAY, -1);
assertThrows(IllegalArgumentException.class, () -> {new UnsynchronizedByteArrayInputStream(IOUtils.EMPTY_BYTE_ARRAY, 0, -1);
assertThrows(IllegalArgumentException.class, () -> {new UnsynchronizedByteArrayInputStream(IOUtils.EMPTY_BYTE_ARRAY, -1, 1);
assertThrows(IndexOutOfBoundsException.class, () -> {is.read(buf, 0, -1);
assertThrows(IndexOutOfBoundsException.class, () -> {is.read(buf, -1, 1);
assertThrows(IndexOutOfBoundsException.class, () -> {is.read(buf, 0, 1);
assertThrows(NullPointerException.class, () -> {is.read(buf);
assertThrows(IllegalArgumentException.class, () -> {is.skip(-1);
assertThrows(NullPointerException.class, () -> new XmlStreamReader((File) null));
assertThrows(NullPointerException.class, () -> new XmlStreamReader((InputStream) null));
assertThrows(NullPointerException.class, () -> new XmlStreamReader((Path) null));
assertThrows(NullPointerException.class, () -> new XmlStreamReader((URLConnection) null, US_ASCII));
assertThrows(NullPointerException.class, () -> new XmlStreamReader((URL) null));
assertThrows(IllegalArgumentException.class, () -> new CharSequenceReader("FooBar", -1, 6),"Expected exception not thrown for negative start.");
assertThrows(IllegalArgumentException.class, () -> new CharSequenceReader("FooBar", 1, 0),"Expected exception not thrown for end before start.");
assertThrows(IllegalArgumentException.class, () -> reversedLinesFileReader.readLines(-1));
assertThrows(IllegalArgumentException.class, () -> reversedLinesFileReader.toString(-1));
assertThrows(UnsupportedEncodingException.class,() -> new ReversedLinesFileReader(testFileEncodingBig5, IOUtils.DEFAULT_BUFFER_SIZE, "Big5").close());
assertThrows(UnsupportedEncodingException.class,() -> new ReversedLinesFileReader(testFileEmpty, IOUtils.DEFAULT_BUFFER_SIZE, StandardCharsets.UTF_16.name()).close());
assertThrows(IOException.class, ois::read);
assertThrows(IOException.class, () -> ois.read(new byte[1]));
assertThrows(IOException.class, () -> ois.read(new byte[2], 0, 1));
assertThrows(EOFException.class, () -> input.read());
assertThrows(NullPointerException.class, () -> new QueueInputStream(null), "queue is required");
assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.close()).getCause());
assertThrows(UncheckedIOException.class, () -> closedReader.mark(1));
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read(new char[1], 0, 1)).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read(new char[1])).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read(CharBuffer.wrap(new char[1]))).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.readLine()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.ready()).getCause());
assertThrows(UncheckedIOException.class, () -> ucBrokenReader.reset());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.skip(1)).getCause());
assertThrows(UnsupportedOperationException.class, msis::reset);
assertThrows(UnsupportedOperationException.class, msis::reset);
assertThrows(UnsupportedOperationException.class, () ->  this.sdis.readLine(),"readLine should be unsupported. ");
assertThrows(UnsupportedOperationException.class, () ->  this.sdis.readUTF(),"readUTF should be unsupported. ");
assertThrows(EOFException.class, () -> reader.read());
assertThrows(IndexOutOfBoundsException.class, () -> reader.read(chars, 10, 10));
assertThrows(NullPointerException.class, () -> reader.read(null, 0, 10));
assertThrows(IllegalArgumentException.class, () -> new ReaderInputStream(new StringReader("\uD800"), StandardCharsets.UTF_8, -1));
assertThrows(IllegalArgumentException.class, () -> new ReaderInputStream(new StringReader("\uD800"), StandardCharsets.UTF_8, 0));
assertThrows(IllegalArgumentException.class, () -> new ReaderInputStream(new StringReader("\uD800"), StandardCharsets.UTF_8, 1));
assertThrows(CharacterCodingException.class, in::read);
assertThrows(IllegalArgumentException.class, () -> createInputStream(new byte[] { -1 }));
assertThrows(IllegalArgumentException.class, () -> createInputStream(new byte[] {}));
assertThrows(NullPointerException.class, () -> createInputStream(null));
assertThrows(IllegalArgumentException.class, () -> createInputStream(new byte[] { -1 }, 0));
assertThrows(IllegalArgumentException.class, () -> createInputStream(new byte[] {}, 0));
assertThrows(NullPointerException.class, () -> createInputStream(null, 0));
assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.close()).getCause());
assertThrows(UncheckedIOException.class, () -> closedReader.mark(1));
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read(new char[1], 0, 1)).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read(new char[1])).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read(CharBuffer.wrap(new char[1]))).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.read()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.ready()).getCause());
assertThrows(UncheckedIOException.class, () -> ucBrokenReader.reset());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> ucBrokenReader.skip(1)).getCause());
assertEquals(exception, assertThrows(IOException.class, () -> stream.available()));
assertEquals(exception, assertThrows(IOException.class, () -> stream.close()));
assertEquals(exception, assertThrows(IOException.class, () -> stream.read()));
assertEquals(exception, assertThrows(IOException.class, () -> stream.read(new byte[1])));
assertEquals(exception, assertThrows(IOException.class, () -> stream.read(new byte[1], 0, 1)));
assertEquals(exception, assertThrows(IOException.class, () -> stream.reset()));
assertEquals(exception, assertThrows(IOException.class, () -> stream.skip(1)));
final IOException thrown = assertThrows(IOException.class, () -> {try (InputStream newStream = new BrokenInputStream()) {newStream.read();
assertThrows(IOException.class, file::read);
assertThrows(NullPointerException.class, () -> new RandomAccessFileInputStream(null));
assertThrows(ArithmeticException.class, () -> cis.getCount());
assertThrows(ArithmeticException.class, () -> cis.resetCount());
assertEquals(exception, assertThrows(IOException.class, () -> brokenReader.close()));
assertEquals(exception, assertThrows(IOException.class, () -> brokenReader.mark(1)));
assertEquals(exception, assertThrows(IOException.class, () -> brokenReader.read()));
assertEquals(exception, assertThrows(IOException.class, () -> brokenReader.read(new char[1])));
assertEquals(exception, assertThrows(IOException.class, () -> brokenReader.read(new char[1], 0, 1)));
assertEquals(exception, assertThrows(IOException.class, () -> brokenReader.ready()));
assertEquals(exception, assertThrows(IOException.class, () -> brokenReader.reset()));
assertEquals(exception, assertThrows(IOException.class, () -> brokenReader.skip(1)));
final IOException thrown = assertThrows(IOException.class, () -> {try (Reader newReader = new BrokenReader()) {newReader.read();
assertThrows(UncheckedIOException.class, () -> brokenInputStream.read());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenInputStream.close()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenInputStream.read(new byte[1], 0, 1)).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenInputStream.read(new byte[1])).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenInputStream.read()).getCause());
assertThrows(UncheckedIOException.class, () -> brokenInputStream.reset());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenInputStream.skip(1)).getCause());
Assertions.assertThrows(IOException.class, () -> IOUtils.toByteArray(inputStream));
assertThrows(UnsupportedEncodingException.class,() -> new ReversedLinesFileReader(testFileEncodingBig5, testParamBlockSize, "Big5").close());
assertThrows(UnsupportedEncodingException.class,() -> new ReversedLinesFileReader(testFileEmpty, testParamBlockSize, StandardCharsets.UTF_16.name()).close());
assertThrows(NullPointerException.class, () -> FileUtils.deleteDirectory(null));
assertThrows(NullPointerException.class, () -> IOUtils.write(inData, (OutputStream) null));
assertThrows(NullPointerException.class, () -> IOUtils.write(inData, null, "UTF8"));
assertThrows(NullPointerException.class, () -> IOUtils.write(inData, (Writer) null));
assertThrows(NullPointerException.class, () -> IOUtils.write(str.toCharArray(), (OutputStream) null));
assertThrows(NullPointerException.class, () -> IOUtils.write(str.toCharArray(), (OutputStream) null));
assertThrows(NullPointerException.class, () -> IOUtils.write(str.toCharArray(), (Writer) null));
assertThrows(NullPointerException.class, () -> IOUtils.write(csq, (OutputStream) null));
assertThrows(NullPointerException.class, () -> IOUtils.write(csq, (OutputStream) null));
assertThrows(NullPointerException.class, () -> IOUtils.write(csq, (Writer) null));
assertThrows(NullPointerException.class, () -> IOUtils.write(str, (OutputStream) null));
assertThrows(NullPointerException.class, () -> IOUtils.write(str, (OutputStream) null));
assertThrows(NullPointerException.class, () -> IOUtils.write(str, (Writer) null));
assertThrows(NullPointerException.class, () -> IOUtils.writeLines(list, "*", null, "US-ASCII"));
assertThrows(NullPointerException.class, () -> IOUtils.writeLines(list, "*", (OutputStream) null));
assertThrows(NullPointerException.class, () -> IOUtils.writeLines(list, "*", (Writer) null));
assertThrows(RuntimeException.class,() -> assertSerialization(closeAfterEachTest(new CustomVOIS(testStream)).reject(Integer.class)));
assertThrows(InvalidClassException.class, () -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream))));
assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(Integer.class)));
assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(Long.class).reject(MockSerializedClass.class, Integer.class)));
assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class).reject(ALWAYS_TRUE)));
assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).reject(Integer.class)));
assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class).reject(Pattern.compile("org.*"))));
assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class).reject(MockSerializedClass.class, Integer.class)));
assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class).reject("org.*")));
assertThrows(NullPointerException.class, () -> new RegexpClassNameMatcher((Pattern) null));
assertThrows(NullPointerException.class, () -> new RegexpClassNameMatcher((String) null));
assertThrows(IllegalStateException.class, () -> fsu.freeSpaceOS("", -1, false, NEG_1_TIMEOUT));
assertThrows(IllegalStateException.class, () -> fsu.freeSpaceOS("", -1, true, NEG_1_TIMEOUT));
assertThrows(NullPointerException.class, () -> fsu.freeSpaceOS(null, 1, false, NEG_1_TIMEOUT));
assertThrows(NullPointerException.class, () -> fsu.freeSpaceOS(null, 1, true, NEG_1_TIMEOUT));
assertThrows(IllegalStateException.class, () -> fsu.freeSpaceOS("", 0, false, NEG_1_TIMEOUT));
assertThrows(NullPointerException.class, () -> fsu.freeSpaceOS(null, 1, true, NEG_1_TIMEOUT));
assertThrows(IllegalStateException.class, () -> fsu.freeSpaceOS("", 0, true, NEG_1_TIMEOUT));
assertThrows(IllegalArgumentException.class, () -> fsu.freeSpaceUnix("", false, false, NEG_1_TIMEOUT));
assertThrows(IllegalArgumentException.class, () -> fsu.freeSpaceUnix("", true, false, NEG_1_TIMEOUT));
assertThrows(IllegalArgumentException.class, () -> fsu.freeSpaceUnix("", true, true, NEG_1_TIMEOUT));
assertThrows(IllegalArgumentException.class, () -> fsu.freeSpaceUnix("", false, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, false, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", false, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceUnix("/home/users/s", true, true, NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceWindows("C:", NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceWindows("C:", NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceWindows("C:", NEG_1_TIMEOUT));
assertThrows(IOException.class, () -> fsu.freeSpaceWindows("C:", NEG_1_TIMEOUT));
assertThrows(IOExceptionList.class, () -> IOExceptionList.checkEmpty(Collections.singletonList(new Exception()), ""));
assertThrows(IOExceptionList.class, () -> IOExceptionList.checkEmpty(Collections.singletonList(new Exception()), null));
assertThrows(IOException.class, () -> FileUtils.openInputStream(directory));
assertThrows(IOException.class, () -> FileUtils.openInputStream(directory));
assertThrows(IllegalArgumentException.class, () -> FileUtils.openOutputStream(directory));
assertThrows(IOException.class, () -> FileUtils.openOutputStream(file));
assertThrows(IllegalArgumentException.class, () -> FileUtils.checksum(FileUtils.current(), new CRC32()));
assertThrows(NullPointerException.class, () -> FileUtils.checksum(file, null));
assertThrows(NullPointerException.class, () -> FileUtils.checksum(null, new CRC32()));
assertThrows(IllegalArgumentException.class, () -> FileUtils.contentEquals(tempDirFile, tempDirFile));
assertThrows(IllegalArgumentException.class,() -> FileUtils.contentEqualsIgnoreEOL(tempDirFile, tempDirFile, null));
assertThrows(NullPointerException.class, () -> FileUtils.copyDirectory(null, null));
assertThrows(NullPointerException.class, () -> FileUtils.copyDirectory(null, testFile1));
assertThrows(NullPointerException.class, () -> FileUtils.copyDirectory(testFile1, null));
assertThrows(NullPointerException.class, () -> FileUtils.copyDirectory(null, new File("a")));
assertThrows(IllegalArgumentException.class, () -> FileUtils.copyDirectory(testFile1, new File("a")));
assertThrows(IllegalArgumentException.class, () -> FileUtils.copyDirectory(testFile1, new File("a")));
assertThrows(IllegalArgumentException.class, () -> FileUtils.copyDirectory(tempDirFile, tempDirFile));
assertThrows(IOException.class, () -> FileUtils.copyDirectory(new File("doesnt-exist"), new File("a")));
assertThrows(IllegalArgumentException.class, () -> FileUtils.copyDirectory(tempDirFile, testFile1));
assertThrows(IllegalArgumentException.class, () -> FileUtils.copyFileToDirectory(destination, directory),"Should not be able to copy a file into the same directory as itself");
assertThrows(IOException.class,() -> FileUtils.copyToDirectory(new File(tempDirFile, "doesNotExists"), tempDirFile));
assertThrows(NullPointerException.class, () -> FileUtils.copyToDirectory((File) null, tempDirFile));
assertThrows(IOException.class,() -> FileUtils.copyToDirectory(Collections.singleton(new File(tempDirFile, "doesNotExists")),tempDirFile));
assertThrows(NullPointerException.class, () -> FileUtils.copyToDirectory((List<File>) null, tempDirFile));
assertThrows(IllegalArgumentException.class, () -> FileUtils.copyFile(destination, destination));
assertThrows(IOException.class, () -> FileUtils.delete(new File("does not exist.nope")));
assertThrows(IllegalArgumentException.class, () -> FileUtils.deleteDirectory(testFile1));
assertThrows(IOException.class, () -> FileUtils.forceDelete(destination));
assertThrows(IOException.class, () -> FileUtils.forceMkdir(testFile));
assertThrows(NullPointerException.class, () -> FileUtils.getFile((String[]) null));
assertThrows(NullPointerException.class, () -> FileUtils.getFile(parent, (String[]) null));
assertThrows(NullPointerException.class, () -> FileUtils.getFile((File) null, "src"));
assertThrows(IOException.class, () -> FileUtils.moveDirectoryToDirectory(src, dest, false));
assertThrows(IllegalArgumentException.class, () -> FileUtils.isFileNewer(newFile, invalidFile));
assertThrows(IllegalArgumentException.class, () -> FileUtils.isFileOlder(newFile, invalidFile));
assertThrows(NullPointerException.class, () -> FileUtils.isFileNewer(null, now));
assertThrows(NullPointerException.class, () -> FileUtils.isFileNewer(oldFile, (File) null));
assertThrows(IllegalArgumentException.class, () -> FileUtils.isFileNewer(oldFile, invalidFile));
assertThrows(NullPointerException.class, () -> FileUtils.isFileNewer(oldFile, (Date) null));
assertThrows(NullPointerException.class, () -> FileUtils.isFileOlder(null, now));
assertThrows(NullPointerException.class, () -> FileUtils.isFileOlder(oldFile, (File) null));
assertThrows(NullPointerException.class, () -> FileUtils.isFileOlder(oldFile, (Date) null));
assertThrows(IllegalArgumentException.class, () -> FileUtils.isFileOlder(oldFile, invalidFile));
assertThrows(NullPointerException.class, () -> FileUtils.moveDirectory(null, new File("foo")));
assertThrows(NullPointerException.class, () -> FileUtils.moveDirectory(new File("foo"), null));
assertThrows(FileNotFoundException.class, () -> FileUtils.moveDirectory(new File("nonexistant"), new File("foo")));
assertThrows(IllegalArgumentException.class, () -> FileUtils.moveDirectory(testFile, new File("foo")));
assertThrows(FileExistsException.class, () -> FileUtils.moveDirectory(testSrcFile, testDestFile),"Expected FileExistsException when dest already exists");
assertThrows(NullPointerException.class, () -> FileUtils.moveDirectoryToDirectory(null, new File("foo"), true));
assertThrows(NullPointerException.class, () -> FileUtils.moveDirectoryToDirectory(new File("foo"), null, true));
assertThrows(IOException.class, () -> FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true));
assertThrows(IOException.class, () -> FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false));
assertThrows(IOException.class, () -> FileUtils.moveFile(src, destination));
assertThrows(NullPointerException.class, () -> FileUtils.moveFile(null, new File("foo")));
assertThrows(NullPointerException.class, () -> FileUtils.moveFile(new File("foo"), null));
assertThrows(FileNotFoundException.class, () -> FileUtils.moveFile(new File("nonexistant"), new File("foo")));
assertThrows(IllegalArgumentException.class, () -> FileUtils.moveFile(tempDirFile, new File("foo")));
assertThrows(FileExistsException.class, () -> FileUtils.moveFile(testSourceFile, testDestFile),"Expected FileExistsException when dest already exists");
assertThrows(NullPointerException.class, () -> FileUtils.moveFileToDirectory(null, new File("foo"), true));
assertThrows(NullPointerException.class, () -> FileUtils.moveFileToDirectory(new File("foo"), null, true));
assertThrows(IllegalArgumentException.class, () -> FileUtils.moveFileToDirectory(testFile1, testFile2, true));
assertThrows(IOException.class, () -> FileUtils.moveFileToDirectory(testFile1, nonexistant, false));
assertThrows(NullPointerException.class, () -> FileUtils.moveDirectoryToDirectory(null, new File("foo"), true));
assertThrows(NullPointerException.class, () -> FileUtils.moveDirectoryToDirectory(new File("foo"), null, true));
assertThrows(IOException.class, () -> FileUtils.moveToDirectory(nonexistant, destDir, true), "Expected IOException when source does not exist");
assertThrows(NullPointerException.class, () -> FileUtils.sizeOf(null));
assertThrows(IllegalArgumentException.class, () -> FileUtils.sizeOf(file));
assertThrows(NullPointerException.class, () -> FileUtils.sizeOfAsBigInteger(null));
assertThrows(IllegalArgumentException.class, () -> FileUtils.sizeOfAsBigInteger(file));
assertThrows(NullPointerException.class, () -> FileUtils.sizeOfDirectory(null));
assertThrows(IllegalArgumentException.class, () -> FileUtils.sizeOfAsBigInteger(file));
assertThrows(IllegalArgumentException.class, () -> FileUtils.sizeOfDirectory(file));
assertThrows(NullPointerException.class, () -> FileUtils.sizeOfDirectoryAsBigInteger(null));
assertThrows(IllegalArgumentException.class, () -> FileUtils.sizeOfDirectoryAsBigInteger(file));
assertThrows(IllegalArgumentException.class, () -> FileUtils.sizeOfDirectoryAsBigInteger(file));
assertThrows(IllegalArgumentException.class, () -> FileUtils.toFiles(urls));
assertThrows(NullPointerException.class, () -> FileUtils.touch(null));
assertThrows(IllegalArgumentException.class, () -> baosFactory.newInstance(-1));
assertThrows(IndexOutOfBoundsException.class, () -> baout.write(new byte[1], 0, -1));
assertThrows(IndexOutOfBoundsException.class, () -> baout.write(new byte[1], 0, 2));
assertThrows(IndexOutOfBoundsException.class, () -> baout.write(new byte[1], 1, -2));
assertThrows(IndexOutOfBoundsException.class, () -> baout.write(IOUtils.EMPTY_BYTE_ARRAY, 1, 0));
assertThrows(IndexOutOfBoundsException.class, () -> baout.write(null, -1, 0));
assertThrows(UnsupportedEncodingException.class, () -> proxy.append('c'));
assertThrows(UnsupportedEncodingException.class, () -> proxy.append("ABCE"));
assertThrows(UnsupportedEncodingException.class, () -> proxy.append("ABCE", 1, 2));
assertThrows(UnsupportedEncodingException.class, () -> {try (OutputStreamWriter osw = new OutputStreamWriter(new ByteArrayOutputStream()) {@Overridepublic void close() throws IOException {throw new UnsupportedEncodingException("Bah");
assertThrows(UnsupportedEncodingException.class, proxy::flush);
assertThrows(UnsupportedEncodingException.class, () -> proxy.write("ABCE".toCharArray()));
assertThrows(UnsupportedEncodingException.class, () -> proxy.write('a'));
assertThrows(UnsupportedEncodingException.class, () -> proxy.write("ABCE".toCharArray(), 2, 3));
assertThrows(UnsupportedEncodingException.class, () -> proxy.write("ABCE"));
assertThrows(UnsupportedEncodingException.class, () -> proxy.write("ABCE", 1, 3));
assertThrows(IOException.class, () -> shielded.write('x'), "write(b)");
assertEquals(exception, assertThrows(IOException.class, () -> stream.close()));
assertEquals(exception, assertThrows(IOException.class, () -> stream.flush()));
final IOException thrown = assertThrows(IOException.class, () -> {try (OutputStream newStream = new BrokenOutputStream()) {newStream.write(1);
assertEquals(exception, assertThrows(IOException.class, () -> stream.write(new byte[1])));
assertEquals(exception, assertThrows(IOException.class, () -> stream.write(new byte[1], 0, 1)));
assertEquals(exception, assertThrows(IOException.class, () -> stream.write(1)));
assertThrows(IllegalArgumentException.class, () -> new ChunkedOutputStream(new ByteArrayOutputStream(), 0));
assertThrows(ArithmeticException.class, () -> cos.getCount());
assertThrows(ArithmeticException.class, () -> cos.resetCount());
assertThrows(IOException.class, () -> cos.flush());
assertThrows(IOException.class, () -> cos.write('x'));
assertThrows(IOException.class, () -> new LockableFileWriter(temporaryFolder));
assertThrows(UnsupportedCharsetException.class, () -> new LockableFileWriter(file, "BAD-ENCODE"));
assertThrows(NullPointerException.class, () -> new LockableFileWriter((File) null));
assertThrows(NullPointerException.class, () -> new LockableFileWriter((String) null));
assertThrows(IOException.class, () -> tos.write('a'));
assertThrows(IllegalStateException.class, () -> tos.write('a'));
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.close()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.equals(null)).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.flush()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.hashCode()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.toString()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.write(1)).getCause());
assertThrows(NullPointerException.class, () -> new QueueOutputStream(null), "queue is required");
assertThrows(NullPointerException.class, () -> new DeferredFileOutputStream(testBytes.length - 5, prefix, suffix, tempDir).close());
assertThrows(IOException.class, () -> dfos.writeTo(baos));
assertThrows(IOException.class, () -> dfos.writeTo(baos));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.append('1')));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.append("01")));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.append("01", 0, 1)));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.close()));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.equals(null)));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.flush()));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.hashCode()));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.toString()));
final IOException thrown = assertThrows(IOException.class, () -> {try (Writer newWriter = new BrokenWriter()) {newWriter.write(1);
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.write(new char[1])));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.write(new char[1], 0, 1)));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.write(1)));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.write("01")));
assertEquals(exception, assertThrows(IOException.class, () -> brokenWriter.write("01", 0, 1)));
assertThrows(IllegalArgumentException.class,() -> new ChunkedWriter(new OutputStreamWriter(new ByteArrayOutputStream()), 0));
assertThrows(IOException.class, () -> shielded.write('x'), "write(c)");
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.append("01", 0, 1)).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.append("01")).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.append('1')).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.close()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.equals(null)).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.flush()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.hashCode()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.toString()).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.write(new char[1], 0, 1)).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.write(new char[1])).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.write(1)).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.write("01", 0, 1)).getCause());
assertEquals(exception, assertThrows(UncheckedIOException.class, () -> brokenWriter.write("01")).getCause());
assertThrows(IOException.class, () -> cw.flush());
assertThrows(IOException.class, () -> cw.write(new char[0], 0, 0));
assertThrows(NullPointerException.class, () -> new TestFileFinder(null, -1).find(null));
assertThrows(IOException.class, () -> throwException.apply(new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY)));
assertThrows(UncheckedI